
ADCS_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000123a8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000944  08012548  08012548  00022548  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012e8c  08012e8c  00030208  2**0
                  CONTENTS
  4 .ARM          00000008  08012e8c  08012e8c  00022e8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012e94  08012e94  00030208  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012e94  08012e94  00022e94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012e98  08012e98  00022e98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000208  20000000  08012e9c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00021dd4  20000208  080130a4  00030208  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20021fdc  080130a4  00031fdc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030208  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002ba38  00000000  00000000  00030238  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000628d  00000000  00000000  0005bc70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002278  00000000  00000000  00061f00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002038  00000000  00000000  00064178  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002b71d  00000000  00000000  000661b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002a49d  00000000  00000000  000918cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fc447  00000000  00000000  000bbd6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001b81b1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a1a4  00000000  00000000  001b8204  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000208 	.word	0x20000208
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08012530 	.word	0x08012530

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000020c 	.word	0x2000020c
 80001dc:	08012530 	.word	0x08012530

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b974 	b.w	8000f58 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	4604      	mov	r4, r0
 8000c90:	468e      	mov	lr, r1
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d14d      	bne.n	8000d32 <__udivmoddi4+0xaa>
 8000c96:	428a      	cmp	r2, r1
 8000c98:	4694      	mov	ip, r2
 8000c9a:	d969      	bls.n	8000d70 <__udivmoddi4+0xe8>
 8000c9c:	fab2 f282 	clz	r2, r2
 8000ca0:	b152      	cbz	r2, 8000cb8 <__udivmoddi4+0x30>
 8000ca2:	fa01 f302 	lsl.w	r3, r1, r2
 8000ca6:	f1c2 0120 	rsb	r1, r2, #32
 8000caa:	fa20 f101 	lsr.w	r1, r0, r1
 8000cae:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cb2:	ea41 0e03 	orr.w	lr, r1, r3
 8000cb6:	4094      	lsls	r4, r2
 8000cb8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cbc:	0c21      	lsrs	r1, r4, #16
 8000cbe:	fbbe f6f8 	udiv	r6, lr, r8
 8000cc2:	fa1f f78c 	uxth.w	r7, ip
 8000cc6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cca:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cce:	fb06 f107 	mul.w	r1, r6, r7
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	d90a      	bls.n	8000cec <__udivmoddi4+0x64>
 8000cd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cda:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cde:	f080 811f 	bcs.w	8000f20 <__udivmoddi4+0x298>
 8000ce2:	4299      	cmp	r1, r3
 8000ce4:	f240 811c 	bls.w	8000f20 <__udivmoddi4+0x298>
 8000ce8:	3e02      	subs	r6, #2
 8000cea:	4463      	add	r3, ip
 8000cec:	1a5b      	subs	r3, r3, r1
 8000cee:	b2a4      	uxth	r4, r4
 8000cf0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cf4:	fb08 3310 	mls	r3, r8, r0, r3
 8000cf8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cfc:	fb00 f707 	mul.w	r7, r0, r7
 8000d00:	42a7      	cmp	r7, r4
 8000d02:	d90a      	bls.n	8000d1a <__udivmoddi4+0x92>
 8000d04:	eb1c 0404 	adds.w	r4, ip, r4
 8000d08:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d0c:	f080 810a 	bcs.w	8000f24 <__udivmoddi4+0x29c>
 8000d10:	42a7      	cmp	r7, r4
 8000d12:	f240 8107 	bls.w	8000f24 <__udivmoddi4+0x29c>
 8000d16:	4464      	add	r4, ip
 8000d18:	3802      	subs	r0, #2
 8000d1a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d1e:	1be4      	subs	r4, r4, r7
 8000d20:	2600      	movs	r6, #0
 8000d22:	b11d      	cbz	r5, 8000d2c <__udivmoddi4+0xa4>
 8000d24:	40d4      	lsrs	r4, r2
 8000d26:	2300      	movs	r3, #0
 8000d28:	e9c5 4300 	strd	r4, r3, [r5]
 8000d2c:	4631      	mov	r1, r6
 8000d2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d32:	428b      	cmp	r3, r1
 8000d34:	d909      	bls.n	8000d4a <__udivmoddi4+0xc2>
 8000d36:	2d00      	cmp	r5, #0
 8000d38:	f000 80ef 	beq.w	8000f1a <__udivmoddi4+0x292>
 8000d3c:	2600      	movs	r6, #0
 8000d3e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d42:	4630      	mov	r0, r6
 8000d44:	4631      	mov	r1, r6
 8000d46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d4a:	fab3 f683 	clz	r6, r3
 8000d4e:	2e00      	cmp	r6, #0
 8000d50:	d14a      	bne.n	8000de8 <__udivmoddi4+0x160>
 8000d52:	428b      	cmp	r3, r1
 8000d54:	d302      	bcc.n	8000d5c <__udivmoddi4+0xd4>
 8000d56:	4282      	cmp	r2, r0
 8000d58:	f200 80f9 	bhi.w	8000f4e <__udivmoddi4+0x2c6>
 8000d5c:	1a84      	subs	r4, r0, r2
 8000d5e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d62:	2001      	movs	r0, #1
 8000d64:	469e      	mov	lr, r3
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	d0e0      	beq.n	8000d2c <__udivmoddi4+0xa4>
 8000d6a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d6e:	e7dd      	b.n	8000d2c <__udivmoddi4+0xa4>
 8000d70:	b902      	cbnz	r2, 8000d74 <__udivmoddi4+0xec>
 8000d72:	deff      	udf	#255	; 0xff
 8000d74:	fab2 f282 	clz	r2, r2
 8000d78:	2a00      	cmp	r2, #0
 8000d7a:	f040 8092 	bne.w	8000ea2 <__udivmoddi4+0x21a>
 8000d7e:	eba1 010c 	sub.w	r1, r1, ip
 8000d82:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d86:	fa1f fe8c 	uxth.w	lr, ip
 8000d8a:	2601      	movs	r6, #1
 8000d8c:	0c20      	lsrs	r0, r4, #16
 8000d8e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d92:	fb07 1113 	mls	r1, r7, r3, r1
 8000d96:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d9a:	fb0e f003 	mul.w	r0, lr, r3
 8000d9e:	4288      	cmp	r0, r1
 8000da0:	d908      	bls.n	8000db4 <__udivmoddi4+0x12c>
 8000da2:	eb1c 0101 	adds.w	r1, ip, r1
 8000da6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000daa:	d202      	bcs.n	8000db2 <__udivmoddi4+0x12a>
 8000dac:	4288      	cmp	r0, r1
 8000dae:	f200 80cb 	bhi.w	8000f48 <__udivmoddi4+0x2c0>
 8000db2:	4643      	mov	r3, r8
 8000db4:	1a09      	subs	r1, r1, r0
 8000db6:	b2a4      	uxth	r4, r4
 8000db8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dbc:	fb07 1110 	mls	r1, r7, r0, r1
 8000dc0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000dc4:	fb0e fe00 	mul.w	lr, lr, r0
 8000dc8:	45a6      	cmp	lr, r4
 8000dca:	d908      	bls.n	8000dde <__udivmoddi4+0x156>
 8000dcc:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dd4:	d202      	bcs.n	8000ddc <__udivmoddi4+0x154>
 8000dd6:	45a6      	cmp	lr, r4
 8000dd8:	f200 80bb 	bhi.w	8000f52 <__udivmoddi4+0x2ca>
 8000ddc:	4608      	mov	r0, r1
 8000dde:	eba4 040e 	sub.w	r4, r4, lr
 8000de2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000de6:	e79c      	b.n	8000d22 <__udivmoddi4+0x9a>
 8000de8:	f1c6 0720 	rsb	r7, r6, #32
 8000dec:	40b3      	lsls	r3, r6
 8000dee:	fa22 fc07 	lsr.w	ip, r2, r7
 8000df2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000df6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dfa:	fa01 f306 	lsl.w	r3, r1, r6
 8000dfe:	431c      	orrs	r4, r3
 8000e00:	40f9      	lsrs	r1, r7
 8000e02:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e06:	fa00 f306 	lsl.w	r3, r0, r6
 8000e0a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e0e:	0c20      	lsrs	r0, r4, #16
 8000e10:	fa1f fe8c 	uxth.w	lr, ip
 8000e14:	fb09 1118 	mls	r1, r9, r8, r1
 8000e18:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e1c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e20:	4288      	cmp	r0, r1
 8000e22:	fa02 f206 	lsl.w	r2, r2, r6
 8000e26:	d90b      	bls.n	8000e40 <__udivmoddi4+0x1b8>
 8000e28:	eb1c 0101 	adds.w	r1, ip, r1
 8000e2c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e30:	f080 8088 	bcs.w	8000f44 <__udivmoddi4+0x2bc>
 8000e34:	4288      	cmp	r0, r1
 8000e36:	f240 8085 	bls.w	8000f44 <__udivmoddi4+0x2bc>
 8000e3a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e3e:	4461      	add	r1, ip
 8000e40:	1a09      	subs	r1, r1, r0
 8000e42:	b2a4      	uxth	r4, r4
 8000e44:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e48:	fb09 1110 	mls	r1, r9, r0, r1
 8000e4c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e50:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e54:	458e      	cmp	lr, r1
 8000e56:	d908      	bls.n	8000e6a <__udivmoddi4+0x1e2>
 8000e58:	eb1c 0101 	adds.w	r1, ip, r1
 8000e5c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e60:	d26c      	bcs.n	8000f3c <__udivmoddi4+0x2b4>
 8000e62:	458e      	cmp	lr, r1
 8000e64:	d96a      	bls.n	8000f3c <__udivmoddi4+0x2b4>
 8000e66:	3802      	subs	r0, #2
 8000e68:	4461      	add	r1, ip
 8000e6a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e6e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e72:	eba1 010e 	sub.w	r1, r1, lr
 8000e76:	42a1      	cmp	r1, r4
 8000e78:	46c8      	mov	r8, r9
 8000e7a:	46a6      	mov	lr, r4
 8000e7c:	d356      	bcc.n	8000f2c <__udivmoddi4+0x2a4>
 8000e7e:	d053      	beq.n	8000f28 <__udivmoddi4+0x2a0>
 8000e80:	b15d      	cbz	r5, 8000e9a <__udivmoddi4+0x212>
 8000e82:	ebb3 0208 	subs.w	r2, r3, r8
 8000e86:	eb61 010e 	sbc.w	r1, r1, lr
 8000e8a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e8e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e92:	40f1      	lsrs	r1, r6
 8000e94:	431f      	orrs	r7, r3
 8000e96:	e9c5 7100 	strd	r7, r1, [r5]
 8000e9a:	2600      	movs	r6, #0
 8000e9c:	4631      	mov	r1, r6
 8000e9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ea2:	f1c2 0320 	rsb	r3, r2, #32
 8000ea6:	40d8      	lsrs	r0, r3
 8000ea8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000eac:	fa21 f303 	lsr.w	r3, r1, r3
 8000eb0:	4091      	lsls	r1, r2
 8000eb2:	4301      	orrs	r1, r0
 8000eb4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000eb8:	fa1f fe8c 	uxth.w	lr, ip
 8000ebc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ec0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ec4:	0c0b      	lsrs	r3, r1, #16
 8000ec6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eca:	fb00 f60e 	mul.w	r6, r0, lr
 8000ece:	429e      	cmp	r6, r3
 8000ed0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ed4:	d908      	bls.n	8000ee8 <__udivmoddi4+0x260>
 8000ed6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eda:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ede:	d22f      	bcs.n	8000f40 <__udivmoddi4+0x2b8>
 8000ee0:	429e      	cmp	r6, r3
 8000ee2:	d92d      	bls.n	8000f40 <__udivmoddi4+0x2b8>
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	4463      	add	r3, ip
 8000ee8:	1b9b      	subs	r3, r3, r6
 8000eea:	b289      	uxth	r1, r1
 8000eec:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ef0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ef4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef8:	fb06 f30e 	mul.w	r3, r6, lr
 8000efc:	428b      	cmp	r3, r1
 8000efe:	d908      	bls.n	8000f12 <__udivmoddi4+0x28a>
 8000f00:	eb1c 0101 	adds.w	r1, ip, r1
 8000f04:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f08:	d216      	bcs.n	8000f38 <__udivmoddi4+0x2b0>
 8000f0a:	428b      	cmp	r3, r1
 8000f0c:	d914      	bls.n	8000f38 <__udivmoddi4+0x2b0>
 8000f0e:	3e02      	subs	r6, #2
 8000f10:	4461      	add	r1, ip
 8000f12:	1ac9      	subs	r1, r1, r3
 8000f14:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f18:	e738      	b.n	8000d8c <__udivmoddi4+0x104>
 8000f1a:	462e      	mov	r6, r5
 8000f1c:	4628      	mov	r0, r5
 8000f1e:	e705      	b.n	8000d2c <__udivmoddi4+0xa4>
 8000f20:	4606      	mov	r6, r0
 8000f22:	e6e3      	b.n	8000cec <__udivmoddi4+0x64>
 8000f24:	4618      	mov	r0, r3
 8000f26:	e6f8      	b.n	8000d1a <__udivmoddi4+0x92>
 8000f28:	454b      	cmp	r3, r9
 8000f2a:	d2a9      	bcs.n	8000e80 <__udivmoddi4+0x1f8>
 8000f2c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f30:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f34:	3801      	subs	r0, #1
 8000f36:	e7a3      	b.n	8000e80 <__udivmoddi4+0x1f8>
 8000f38:	4646      	mov	r6, r8
 8000f3a:	e7ea      	b.n	8000f12 <__udivmoddi4+0x28a>
 8000f3c:	4620      	mov	r0, r4
 8000f3e:	e794      	b.n	8000e6a <__udivmoddi4+0x1e2>
 8000f40:	4640      	mov	r0, r8
 8000f42:	e7d1      	b.n	8000ee8 <__udivmoddi4+0x260>
 8000f44:	46d0      	mov	r8, sl
 8000f46:	e77b      	b.n	8000e40 <__udivmoddi4+0x1b8>
 8000f48:	3b02      	subs	r3, #2
 8000f4a:	4461      	add	r1, ip
 8000f4c:	e732      	b.n	8000db4 <__udivmoddi4+0x12c>
 8000f4e:	4630      	mov	r0, r6
 8000f50:	e709      	b.n	8000d66 <__udivmoddi4+0xde>
 8000f52:	4464      	add	r4, ip
 8000f54:	3802      	subs	r0, #2
 8000f56:	e742      	b.n	8000dde <__udivmoddi4+0x156>

08000f58 <__aeabi_idiv0>:
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop

08000f5c <computeChecksum>:
circular_buffer_handle rxcBuff; //rx and search buffer
uint8_t rxBuffer[IMU_BUFFER_LEN]; //memory buffer for rxBuff
uint8_t tmpBuff[IMU_BUFFER_LEN]; //temporary buffer where to store received packets

//function to compute message checksum
static uint8_t computeChecksum(imu_packet_struct * pckt){
 8000f5c:	b480      	push	{r7}
 8000f5e:	b085      	sub	sp, #20
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
	if(pckt==NULL) return 0;
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d101      	bne.n	8000f6e <computeChecksum+0x12>
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	e01e      	b.n	8000fac <computeChecksum+0x50>

	uint8_t crc=IMU_BID+pckt->mid+pckt->len;
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	781a      	ldrb	r2, [r3, #0]
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	785b      	ldrb	r3, [r3, #1]
 8000f76:	4413      	add	r3, r2
 8000f78:	b2db      	uxtb	r3, r3
 8000f7a:	3b01      	subs	r3, #1
 8000f7c:	73fb      	strb	r3, [r7, #15]
	for(uint32_t d=0;d<pckt->len;d++){
 8000f7e:	2300      	movs	r3, #0
 8000f80:	60bb      	str	r3, [r7, #8]
 8000f82:	e00a      	b.n	8000f9a <computeChecksum+0x3e>
		crc+=pckt->data[d];
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	685a      	ldr	r2, [r3, #4]
 8000f88:	68bb      	ldr	r3, [r7, #8]
 8000f8a:	4413      	add	r3, r2
 8000f8c:	781a      	ldrb	r2, [r3, #0]
 8000f8e:	7bfb      	ldrb	r3, [r7, #15]
 8000f90:	4413      	add	r3, r2
 8000f92:	73fb      	strb	r3, [r7, #15]
	for(uint32_t d=0;d<pckt->len;d++){
 8000f94:	68bb      	ldr	r3, [r7, #8]
 8000f96:	3301      	adds	r3, #1
 8000f98:	60bb      	str	r3, [r7, #8]
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	785b      	ldrb	r3, [r3, #1]
 8000f9e:	461a      	mov	r2, r3
 8000fa0:	68bb      	ldr	r3, [r7, #8]
 8000fa2:	4293      	cmp	r3, r2
 8000fa4:	d3ee      	bcc.n	8000f84 <computeChecksum+0x28>
	}
	return -crc;
 8000fa6:	7bfb      	ldrb	r3, [r7, #15]
 8000fa8:	425b      	negs	r3, r3
 8000faa:	b2db      	uxtb	r3, r3
}
 8000fac:	4618      	mov	r0, r3
 8000fae:	3714      	adds	r7, #20
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb6:	4770      	bx	lr

08000fb8 <sendMsg>:

//function to send message
static void sendMsg(UART_HandleTypeDef* IMUhandle, imu_packet_struct * pckt){
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b084      	sub	sp, #16
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
 8000fc0:	6039      	str	r1, [r7, #0]
	if(pckt==NULL) return;
 8000fc2:	683b      	ldr	r3, [r7, #0]
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d033      	beq.n	8001030 <sendMsg+0x78>

	uint8_t tmp=IMU_PREAMBLE;
 8000fc8:	23fa      	movs	r3, #250	; 0xfa
 8000fca:	73fb      	strb	r3, [r7, #15]
	sendDriver_UART(IMUhandle, &tmp, 1);
 8000fcc:	f107 030f 	add.w	r3, r7, #15
 8000fd0:	2201      	movs	r2, #1
 8000fd2:	4619      	mov	r1, r3
 8000fd4:	6878      	ldr	r0, [r7, #4]
 8000fd6:	f000 fbc1 	bl	800175c <sendDriver_UART>
	tmp=IMU_BID;
 8000fda:	23ff      	movs	r3, #255	; 0xff
 8000fdc:	73fb      	strb	r3, [r7, #15]
	sendDriver_UART(IMUhandle, &tmp, 1);
 8000fde:	f107 030f 	add.w	r3, r7, #15
 8000fe2:	2201      	movs	r2, #1
 8000fe4:	4619      	mov	r1, r3
 8000fe6:	6878      	ldr	r0, [r7, #4]
 8000fe8:	f000 fbb8 	bl	800175c <sendDriver_UART>
	sendDriver_UART(IMUhandle, &pckt->mid, 1);
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	2201      	movs	r2, #1
 8000ff0:	4619      	mov	r1, r3
 8000ff2:	6878      	ldr	r0, [r7, #4]
 8000ff4:	f000 fbb2 	bl	800175c <sendDriver_UART>
	sendDriver_UART(IMUhandle, &pckt->len, 1);
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	3301      	adds	r3, #1
 8000ffc:	2201      	movs	r2, #1
 8000ffe:	4619      	mov	r1, r3
 8001000:	6878      	ldr	r0, [r7, #4]
 8001002:	f000 fbab 	bl	800175c <sendDriver_UART>
	sendDriver_UART(IMUhandle, pckt->data, pckt->len);
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	6859      	ldr	r1, [r3, #4]
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	785b      	ldrb	r3, [r3, #1]
 800100e:	461a      	mov	r2, r3
 8001010:	6878      	ldr	r0, [r7, #4]
 8001012:	f000 fba3 	bl	800175c <sendDriver_UART>
	tmp=computeChecksum(pckt);
 8001016:	6838      	ldr	r0, [r7, #0]
 8001018:	f7ff ffa0 	bl	8000f5c <computeChecksum>
 800101c:	4603      	mov	r3, r0
 800101e:	73fb      	strb	r3, [r7, #15]
	sendDriver_UART(IMUhandle, &tmp, 1);
 8001020:	f107 030f 	add.w	r3, r7, #15
 8001024:	2201      	movs	r2, #1
 8001026:	4619      	mov	r1, r3
 8001028:	6878      	ldr	r0, [r7, #4]
 800102a:	f000 fb97 	bl	800175c <sendDriver_UART>
 800102e:	e000      	b.n	8001032 <sendMsg+0x7a>
	if(pckt==NULL) return;
 8001030:	bf00      	nop
}
 8001032:	3710      	adds	r7, #16
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}

08001038 <receiveMsg>:
//NB. not checking crc is risky for many reasons but one of the worst is that
//len field could arrive corrupted so always check that len is the expected one
//format can be passed if a specific mid and len are required, otherwise can be left to NULL
//the buffer is automatically shifted out and filled at every call, user can eventually
//flush buffers before calling to get most recent messages
static uint8_t receiveMsg(UART_HandleTypeDef* IMUhandle, imu_packet_struct * pckt, imu_packet_struct* format, uint8_t checkCRC, uint32_t timeout){
 8001038:	b590      	push	{r4, r7, lr}
 800103a:	b099      	sub	sp, #100	; 0x64
 800103c:	af02      	add	r7, sp, #8
 800103e:	60f8      	str	r0, [r7, #12]
 8001040:	60b9      	str	r1, [r7, #8]
 8001042:	607a      	str	r2, [r7, #4]
 8001044:	70fb      	strb	r3, [r7, #3]
	uint32_t startTick=HAL_GetTick();
 8001046:	f005 f92b 	bl	80062a0 <HAL_GetTick>
 800104a:	6538      	str	r0, [r7, #80]	; 0x50
	uint8_t len=0; //temporary variable to store target number of bytes to search
 800104c:	2300      	movs	r3, #0
 800104e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	uint8_t mid=0; //temporary variable to store message id
 8001052:	2300      	movs	r3, #0
 8001054:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
	typedef enum{
		_header,
		_packet
	} search_phase;

	search_phase phase=_header;
 8001058:	2300      	movs	r3, #0
 800105a:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55

	uint8_t headTail[4]={IMU_PREAMBLE,IMU_BID,0,0};
 800105e:	f64f 73fa 	movw	r3, #65530	; 0xfffa
 8001062:	64fb      	str	r3, [r7, #76]	; 0x4c

	search_frame_rule rule;

	rule.head=(uint8_t *) headTail;
 8001064:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001068:	633b      	str	r3, [r7, #48]	; 0x30
	rule.tail=NULL;
 800106a:	2300      	movs	r3, #0
 800106c:	63bb      	str	r3, [r7, #56]	; 0x38
	rule.tailLen=0;
 800106e:	2300      	movs	r3, #0
 8001070:	63fb      	str	r3, [r7, #60]	; 0x3c
	rule.maxLen=0;
 8001072:	2300      	movs	r3, #0
 8001074:	647b      	str	r3, [r7, #68]	; 0x44
	rule.policy=soft;
 8001076:	2302      	movs	r3, #2
 8001078:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48

	circular_buffer_handle foundPckt;
	imu_packet_struct tmpPckt;
	tmpPckt.data=tmpBuff;
 800107c:	4b5c      	ldr	r3, [pc, #368]	; (80011f0 <receiveMsg+0x1b8>)
 800107e:	61fb      	str	r3, [r7, #28]

	do{
		//filling buffer until is full or no more bytes available
		while(!cBuffFull(&rxcBuff)){ //fill buffer with new packets
 8001080:	e010      	b.n	80010a4 <receiveMsg+0x6c>
			uint8_t c;
			if(receiveDriver_UART(IMUhandle, &c, 1)){
 8001082:	f107 0317 	add.w	r3, r7, #23
 8001086:	2201      	movs	r2, #1
 8001088:	4619      	mov	r1, r3
 800108a:	68f8      	ldr	r0, [r7, #12]
 800108c:	f000 fb14 	bl	80016b8 <receiveDriver_UART>
 8001090:	4603      	mov	r3, r0
 8001092:	2b00      	cmp	r3, #0
 8001094:	d00d      	beq.n	80010b2 <receiveMsg+0x7a>
				cBuffPush(&rxcBuff, &c, 1,1);
 8001096:	f107 0117 	add.w	r1, r7, #23
 800109a:	2301      	movs	r3, #1
 800109c:	2201      	movs	r2, #1
 800109e:	4855      	ldr	r0, [pc, #340]	; (80011f4 <receiveMsg+0x1bc>)
 80010a0:	f001 fa59 	bl	8002556 <cBuffPush>
		while(!cBuffFull(&rxcBuff)){ //fill buffer with new packets
 80010a4:	4853      	ldr	r0, [pc, #332]	; (80011f4 <receiveMsg+0x1bc>)
 80010a6:	f001 fd4a 	bl	8002b3e <cBuffFull>
 80010aa:	4603      	mov	r3, r0
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d0e8      	beq.n	8001082 <receiveMsg+0x4a>
 80010b0:	e000      	b.n	80010b4 <receiveMsg+0x7c>
			}else{
				break;
 80010b2:	bf00      	nop
			}
		}

		//analyzing buffer
		if(phase==_header){ //if we are searching an header
 80010b4:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d129      	bne.n	8001110 <receiveMsg+0xd8>

			if(format!=NULL){	//if format specified
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d00b      	beq.n	80010da <receiveMsg+0xa2>
				mid=format->mid;
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	781b      	ldrb	r3, [r3, #0]
 80010c6:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
				len=format->len;
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	785b      	ldrb	r3, [r3, #1]
 80010ce:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				phase=_packet;
 80010d2:	2301      	movs	r3, #1
 80010d4:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
				continue;	//jump to packet search
 80010d8:	e07b      	b.n	80011d2 <receiveMsg+0x19a>
			}

			//search a complete xbus header (shiftOut disabled)
			rule.headLen=2;
 80010da:	2302      	movs	r3, #2
 80010dc:	637b      	str	r3, [r7, #52]	; 0x34
			rule.minLen=2;
 80010de:	2302      	movs	r3, #2
 80010e0:	643b      	str	r3, [r7, #64]	; 0x40
			if(searchFrameAdvance(&rxcBuff, &foundPckt, &rule, SHIFTOUT_FULL | SHIFTOUT_CURR | SHIFTOUT_FAST)){	//if we found a header, get MID and LEN fields
 80010e2:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80010e6:	f107 0120 	add.w	r1, r7, #32
 80010ea:	2313      	movs	r3, #19
 80010ec:	4841      	ldr	r0, [pc, #260]	; (80011f4 <receiveMsg+0x1bc>)
 80010ee:	f002 f826 	bl	800313e <searchFrameAdvance>
 80010f2:	4603      	mov	r3, r0
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d06c      	beq.n	80011d2 <receiveMsg+0x19a>
				mid=foundPckt.buff[2];
 80010f8:	6a3b      	ldr	r3, [r7, #32]
 80010fa:	789b      	ldrb	r3, [r3, #2]
 80010fc:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
				len=foundPckt.buff[3];
 8001100:	6a3b      	ldr	r3, [r7, #32]
 8001102:	78db      	ldrb	r3, [r3, #3]
 8001104:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				phase=_packet;
 8001108:	2301      	movs	r3, #1
 800110a:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
 800110e:	e060      	b.n	80011d2 <receiveMsg+0x19a>
			}
		}else if(phase==_packet){
 8001110:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8001114:	2b01      	cmp	r3, #1
 8001116:	d159      	bne.n	80011cc <receiveMsg+0x194>
			headTail[2]=mid;
 8001118:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 800111c:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
			headTail[3]=len;
 8001120:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001124:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			rule.headLen=4;
 8001128:	2304      	movs	r3, #4
 800112a:	637b      	str	r3, [r7, #52]	; 0x34
			rule.minLen=len+1;	//len+1 to house CRC
 800112c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001130:	3301      	adds	r3, #1
 8001132:	643b      	str	r3, [r7, #64]	; 0x40

			//search for the complete packet with shiftOut active
			if(searchFrameAdvance(&rxcBuff, &foundPckt, &rule, SHIFTOUT_FULL | SHIFTOUT_NEXT | SHIFTOUT_FAST)){
 8001134:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001138:	f107 0120 	add.w	r1, r7, #32
 800113c:	2315      	movs	r3, #21
 800113e:	482d      	ldr	r0, [pc, #180]	; (80011f4 <receiveMsg+0x1bc>)
 8001140:	f001 fffd 	bl	800313e <searchFrameAdvance>
 8001144:	4603      	mov	r3, r0
 8001146:	2b00      	cmp	r3, #0
 8001148:	d043      	beq.n	80011d2 <receiveMsg+0x19a>
#if enable_printf
				printf("RAW IMU FRAME:\n");
#endif
				//cBuffPrint(&foundPckt,PRINTBUFF_HEX | PRINTBUFF_NOEMPTY);

				tmpPckt.mid=mid;
 800114a:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 800114e:	763b      	strb	r3, [r7, #24]
				tmpPckt.len=len;
 8001150:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001154:	767b      	strb	r3, [r7, #25]
				if(len!=0) cBuffRead(&foundPckt,tmpPckt.data,foundPckt.elemNum,0,4);
 8001156:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800115a:	2b00      	cmp	r3, #0
 800115c:	d008      	beq.n	8001170 <receiveMsg+0x138>
 800115e:	69f9      	ldr	r1, [r7, #28]
 8001160:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001162:	f107 0020 	add.w	r0, r7, #32
 8001166:	2304      	movs	r3, #4
 8001168:	9300      	str	r3, [sp, #0]
 800116a:	2300      	movs	r3, #0
 800116c:	f001 facd 	bl	800270a <cBuffRead>

				if(pckt!=NULL){ //if we want the packet to be output
 8001170:	68bb      	ldr	r3, [r7, #8]
 8001172:	2b00      	cmp	r3, #0
 8001174:	d00e      	beq.n	8001194 <receiveMsg+0x15c>
					pckt->mid=mid;
 8001176:	68bb      	ldr	r3, [r7, #8]
 8001178:	f897 2056 	ldrb.w	r2, [r7, #86]	; 0x56
 800117c:	701a      	strb	r2, [r3, #0]
					pckt->len=len;
 800117e:	68bb      	ldr	r3, [r7, #8]
 8001180:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8001184:	705a      	strb	r2, [r3, #1]
					if(len!=0) pckt->data=tmpPckt.data;
 8001186:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800118a:	2b00      	cmp	r3, #0
 800118c:	d002      	beq.n	8001194 <receiveMsg+0x15c>
 800118e:	69fa      	ldr	r2, [r7, #28]
 8001190:	68bb      	ldr	r3, [r7, #8]
 8001192:	605a      	str	r2, [r3, #4]
				}

				//if crc must be checked
				if(checkCRC){
 8001194:	78fb      	ldrb	r3, [r7, #3]
 8001196:	2b00      	cmp	r3, #0
 8001198:	d016      	beq.n	80011c8 <receiveMsg+0x190>
					if(cBuffReadByte(&foundPckt,1,0)==computeChecksum(&tmpPckt)){	//if correct crc
 800119a:	f107 0320 	add.w	r3, r7, #32
 800119e:	2200      	movs	r2, #0
 80011a0:	2101      	movs	r1, #1
 80011a2:	4618      	mov	r0, r3
 80011a4:	f001 fc82 	bl	8002aac <cBuffReadByte>
 80011a8:	4603      	mov	r3, r0
 80011aa:	461c      	mov	r4, r3
 80011ac:	f107 0318 	add.w	r3, r7, #24
 80011b0:	4618      	mov	r0, r3
 80011b2:	f7ff fed3 	bl	8000f5c <computeChecksum>
 80011b6:	4603      	mov	r3, r0
 80011b8:	429c      	cmp	r4, r3
 80011ba:	d101      	bne.n	80011c0 <receiveMsg+0x188>
						return 1;
 80011bc:	2301      	movs	r3, #1
 80011be:	e012      	b.n	80011e6 <receiveMsg+0x1ae>
					}else phase=_header;	//continue search from next byte
 80011c0:	2300      	movs	r3, #0
 80011c2:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
 80011c6:	e004      	b.n	80011d2 <receiveMsg+0x19a>
				}else return 1;
 80011c8:	2301      	movs	r3, #1
 80011ca:	e00c      	b.n	80011e6 <receiveMsg+0x1ae>
#if enable_printf
				printf("Checksum verification failed!\n");
#endif
			}
		}else{
			phase=_header;	//in case of any state error, return to default state
 80011cc:	2300      	movs	r3, #0
 80011ce:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
		}

	}while((HAL_GetTick()-startTick) < timeout);
 80011d2:	f005 f865 	bl	80062a0 <HAL_GetTick>
 80011d6:	4602      	mov	r2, r0
 80011d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80011da:	1ad3      	subs	r3, r2, r3
 80011dc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80011de:	429a      	cmp	r2, r3
 80011e0:	f63f af60 	bhi.w	80010a4 <receiveMsg+0x6c>

	return 0;
 80011e4:	2300      	movs	r3, #0
}
 80011e6:	4618      	mov	r0, r3
 80011e8:	375c      	adds	r7, #92	; 0x5c
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd90      	pop	{r4, r7, pc}
 80011ee:	bf00      	nop
 80011f0:	20000298 	.word	0x20000298
 80011f4:	20000224 	.word	0x20000224

080011f8 <imuAckTransaction>:

//function to send command to imu and wait for the right acknowledge
//the ack should be the next received or the transaction is considered failed
//returns 1 if ack received, 0 otherwise
static uint8_t imuAckTransaction(UART_HandleTypeDef* IMUhandle, imu_packet_struct * cmd, imu_packet_struct * ack, uint32_t timeout){
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b086      	sub	sp, #24
 80011fc:	af02      	add	r7, sp, #8
 80011fe:	60f8      	str	r0, [r7, #12]
 8001200:	60b9      	str	r1, [r7, #8]
 8001202:	607a      	str	r2, [r7, #4]
 8001204:	603b      	str	r3, [r7, #0]
	if(cmd==NULL || ack==NULL) return 0;
 8001206:	68bb      	ldr	r3, [r7, #8]
 8001208:	2b00      	cmp	r3, #0
 800120a:	d002      	beq.n	8001212 <imuAckTransaction+0x1a>
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	2b00      	cmp	r3, #0
 8001210:	d101      	bne.n	8001216 <imuAckTransaction+0x1e>
 8001212:	2300      	movs	r3, #0
 8001214:	e014      	b.n	8001240 <imuAckTransaction+0x48>

	cBuffFlush(&rxcBuff); //flush circular buffer
 8001216:	480c      	ldr	r0, [pc, #48]	; (8001248 <imuAckTransaction+0x50>)
 8001218:	f001 fc80 	bl	8002b1c <cBuffFlush>

	sendMsg(IMUhandle, cmd);
 800121c:	68b9      	ldr	r1, [r7, #8]
 800121e:	68f8      	ldr	r0, [r7, #12]
 8001220:	f7ff feca 	bl	8000fb8 <sendMsg>

    if(receiveMsg(IMUhandle, NULL, ack, 1, timeout)){
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	9300      	str	r3, [sp, #0]
 8001228:	2301      	movs	r3, #1
 800122a:	687a      	ldr	r2, [r7, #4]
 800122c:	2100      	movs	r1, #0
 800122e:	68f8      	ldr	r0, [r7, #12]
 8001230:	f7ff ff02 	bl	8001038 <receiveMsg>
 8001234:	4603      	mov	r3, r0
 8001236:	2b00      	cmp	r3, #0
 8001238:	d001      	beq.n	800123e <imuAckTransaction+0x46>
    	return 1;
 800123a:	2301      	movs	r3, #1
 800123c:	e000      	b.n	8001240 <imuAckTransaction+0x48>
    }else{
    	return 0;
 800123e:	2300      	movs	r3, #0
    }

}
 8001240:	4618      	mov	r0, r3
 8001242:	3710      	adds	r7, #16
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}
 8001248:	20000224 	.word	0x20000224

0800124c <initIMUConfig>:

uint8_t initIMUConfig(UART_HandleTypeDef* IMUhandle){
 800124c:	b580      	push	{r7, lr}
 800124e:	b08a      	sub	sp, #40	; 0x28
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
	//initializing circular buffer
	cBuffInit(&rxcBuff, rxBuffer, sizeof(rxBuffer),0);
 8001254:	2300      	movs	r3, #0
 8001256:	2264      	movs	r2, #100	; 0x64
 8001258:	493d      	ldr	r1, [pc, #244]	; (8001350 <initIMUConfig+0x104>)
 800125a:	483e      	ldr	r0, [pc, #248]	; (8001354 <initIMUConfig+0x108>)
 800125c:	f001 f8fc 	bl	8002458 <cBuffInit>

    HAL_Delay(500);
 8001260:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001264:	f005 f828 	bl	80062b8 <HAL_Delay>

    flushRXDriver_UART(IMUhandle);
 8001268:	6878      	ldr	r0, [r7, #4]
 800126a:	f000 fb29 	bl	80018c0 <flushRXDriver_UART>

    imu_packet_struct cmd;
    imu_packet_struct ack;

    cmd.len=0;
 800126e:	2300      	movs	r3, #0
 8001270:	757b      	strb	r3, [r7, #21]
    ack.len=0;
 8001272:	2300      	movs	r3, #0
 8001274:	737b      	strb	r3, [r7, #13]

    //going to config mode
    cmd.mid=IMU_GOTO_CONFIG_MID;
 8001276:	2330      	movs	r3, #48	; 0x30
 8001278:	753b      	strb	r3, [r7, #20]
    ack.mid=IMU_GOTO_CONFIG_ACK_MID;
 800127a:	2331      	movs	r3, #49	; 0x31
 800127c:	733b      	strb	r3, [r7, #12]
    for(uint32_t retry=0;retry<IMU_CONFIG_RETRY;retry++){
 800127e:	2300      	movs	r3, #0
 8001280:	627b      	str	r3, [r7, #36]	; 0x24
 8001282:	e012      	b.n	80012aa <initIMUConfig+0x5e>
    	if(imuAckTransaction(IMUhandle,&cmd,&ack,IMU_ACK_DELAY)) break;
 8001284:	f107 020c 	add.w	r2, r7, #12
 8001288:	f107 0114 	add.w	r1, r7, #20
 800128c:	2364      	movs	r3, #100	; 0x64
 800128e:	6878      	ldr	r0, [r7, #4]
 8001290:	f7ff ffb2 	bl	80011f8 <imuAckTransaction>
 8001294:	4603      	mov	r3, r0
 8001296:	2b00      	cmp	r3, #0
 8001298:	d10b      	bne.n	80012b2 <initIMUConfig+0x66>
    	else if(retry==(IMU_CONFIG_RETRY-1)) return 0;
 800129a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800129c:	2b01      	cmp	r3, #1
 800129e:	d101      	bne.n	80012a4 <initIMUConfig+0x58>
 80012a0:	2300      	movs	r3, #0
 80012a2:	e050      	b.n	8001346 <initIMUConfig+0xfa>
    for(uint32_t retry=0;retry<IMU_CONFIG_RETRY;retry++){
 80012a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012a6:	3301      	adds	r3, #1
 80012a8:	627b      	str	r3, [r7, #36]	; 0x24
 80012aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012ac:	2b01      	cmp	r3, #1
 80012ae:	d9e9      	bls.n	8001284 <initIMUConfig+0x38>
 80012b0:	e000      	b.n	80012b4 <initIMUConfig+0x68>
    	if(imuAckTransaction(IMUhandle,&cmd,&ack,IMU_ACK_DELAY)) break;
 80012b2:	bf00      	nop
    }

    //set output config
    cmd.mid=IMU_SET_OCONFIG_MID;
 80012b4:	23c0      	movs	r3, #192	; 0xc0
 80012b6:	753b      	strb	r3, [r7, #20]
    cmd.len=IMU_SET_OCONFIG_LEN;
 80012b8:	2308      	movs	r3, #8
 80012ba:	757b      	strb	r3, [r7, #21]
    cmd.data=(uint8_t *)outputConfigData;
 80012bc:	4b26      	ldr	r3, [pc, #152]	; (8001358 <initIMUConfig+0x10c>)
 80012be:	61bb      	str	r3, [r7, #24]
	ack.mid=IMU_SET_OCONFIG_ACK_MID;
 80012c0:	23c1      	movs	r3, #193	; 0xc1
 80012c2:	733b      	strb	r3, [r7, #12]
	ack.len=IMU_SET_OCONFIG_ACK_LEN;
 80012c4:	2308      	movs	r3, #8
 80012c6:	737b      	strb	r3, [r7, #13]
	for(uint32_t retry=0;retry<IMU_CONFIG_RETRY;retry++){
 80012c8:	2300      	movs	r3, #0
 80012ca:	623b      	str	r3, [r7, #32]
 80012cc:	e012      	b.n	80012f4 <initIMUConfig+0xa8>
		if(imuAckTransaction(IMUhandle,&cmd,&ack,IMU_ACK_DELAY)) break;
 80012ce:	f107 020c 	add.w	r2, r7, #12
 80012d2:	f107 0114 	add.w	r1, r7, #20
 80012d6:	2364      	movs	r3, #100	; 0x64
 80012d8:	6878      	ldr	r0, [r7, #4]
 80012da:	f7ff ff8d 	bl	80011f8 <imuAckTransaction>
 80012de:	4603      	mov	r3, r0
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d10b      	bne.n	80012fc <initIMUConfig+0xb0>
		else if(retry==(IMU_CONFIG_RETRY-1)) return 0;
 80012e4:	6a3b      	ldr	r3, [r7, #32]
 80012e6:	2b01      	cmp	r3, #1
 80012e8:	d101      	bne.n	80012ee <initIMUConfig+0xa2>
 80012ea:	2300      	movs	r3, #0
 80012ec:	e02b      	b.n	8001346 <initIMUConfig+0xfa>
	for(uint32_t retry=0;retry<IMU_CONFIG_RETRY;retry++){
 80012ee:	6a3b      	ldr	r3, [r7, #32]
 80012f0:	3301      	adds	r3, #1
 80012f2:	623b      	str	r3, [r7, #32]
 80012f4:	6a3b      	ldr	r3, [r7, #32]
 80012f6:	2b01      	cmp	r3, #1
 80012f8:	d9e9      	bls.n	80012ce <initIMUConfig+0x82>
 80012fa:	e000      	b.n	80012fe <initIMUConfig+0xb2>
		if(imuAckTransaction(IMUhandle,&cmd,&ack,IMU_ACK_DELAY)) break;
 80012fc:	bf00      	nop
	}

    //go to measurement state
    cmd.mid=IMU_GOTO_MEAS_MID;
 80012fe:	2310      	movs	r3, #16
 8001300:	753b      	strb	r3, [r7, #20]
    cmd.len=0;
 8001302:	2300      	movs	r3, #0
 8001304:	757b      	strb	r3, [r7, #21]
	ack.mid=IMU_GOTO_MEAS_ACK_MID;
 8001306:	2311      	movs	r3, #17
 8001308:	733b      	strb	r3, [r7, #12]
	ack.len=0;
 800130a:	2300      	movs	r3, #0
 800130c:	737b      	strb	r3, [r7, #13]
	for(uint32_t retry=0;retry<IMU_CONFIG_RETRY;retry++){
 800130e:	2300      	movs	r3, #0
 8001310:	61fb      	str	r3, [r7, #28]
 8001312:	e012      	b.n	800133a <initIMUConfig+0xee>
		if(imuAckTransaction(IMUhandle,&cmd,&ack,IMU_ACK_DELAY)) break;
 8001314:	f107 020c 	add.w	r2, r7, #12
 8001318:	f107 0114 	add.w	r1, r7, #20
 800131c:	2364      	movs	r3, #100	; 0x64
 800131e:	6878      	ldr	r0, [r7, #4]
 8001320:	f7ff ff6a 	bl	80011f8 <imuAckTransaction>
 8001324:	4603      	mov	r3, r0
 8001326:	2b00      	cmp	r3, #0
 8001328:	d10b      	bne.n	8001342 <initIMUConfig+0xf6>
		else if(retry==(IMU_CONFIG_RETRY-1)) return 0;
 800132a:	69fb      	ldr	r3, [r7, #28]
 800132c:	2b01      	cmp	r3, #1
 800132e:	d101      	bne.n	8001334 <initIMUConfig+0xe8>
 8001330:	2300      	movs	r3, #0
 8001332:	e008      	b.n	8001346 <initIMUConfig+0xfa>
	for(uint32_t retry=0;retry<IMU_CONFIG_RETRY;retry++){
 8001334:	69fb      	ldr	r3, [r7, #28]
 8001336:	3301      	adds	r3, #1
 8001338:	61fb      	str	r3, [r7, #28]
 800133a:	69fb      	ldr	r3, [r7, #28]
 800133c:	2b01      	cmp	r3, #1
 800133e:	d9e9      	bls.n	8001314 <initIMUConfig+0xc8>
 8001340:	e000      	b.n	8001344 <initIMUConfig+0xf8>
		if(imuAckTransaction(IMUhandle,&cmd,&ack,IMU_ACK_DELAY)) break;
 8001342:	bf00      	nop
	}

	return 1;
 8001344:	2301      	movs	r3, #1
}
 8001346:	4618      	mov	r0, r3
 8001348:	3728      	adds	r7, #40	; 0x28
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	20000234 	.word	0x20000234
 8001354:	20000224 	.word	0x20000224
 8001358:	0801282c 	.word	0x0801282c

0800135c <writeIMUDataArray>:
}

/* Extract fields from IMU data field and converts it into host order before placing it inside data array*/
// frame is data field buffer, data is output data array, dataSize is number of data fields
void writeIMUDataArray(uint8_t* frame, uint32_t* data, uint32_t dataSize)
{
 800135c:	b480      	push	{r7}
 800135e:	b089      	sub	sp, #36	; 0x24
 8001360:	af00      	add	r7, sp, #0
 8001362:	60f8      	str	r0, [r7, #12]
 8001364:	60b9      	str	r1, [r7, #8]
 8001366:	607a      	str	r2, [r7, #4]
	for(uint32_t d=0;d<dataSize;d++){
 8001368:	2300      	movs	r3, #0
 800136a:	61fb      	str	r3, [r7, #28]
 800136c:	e024      	b.n	80013b8 <writeIMUDataArray+0x5c>
		uint32_t raw=0;
 800136e:	2300      	movs	r3, #0
 8001370:	61bb      	str	r3, [r7, #24]
		for(uint32_t byte=0;byte<4;byte++){
 8001372:	2300      	movs	r3, #0
 8001374:	617b      	str	r3, [r7, #20]
 8001376:	e013      	b.n	80013a0 <writeIMUDataArray+0x44>
			raw|=((uint32_t)frame[d*4+byte])<<(8*(3-byte));
 8001378:	69fb      	ldr	r3, [r7, #28]
 800137a:	009a      	lsls	r2, r3, #2
 800137c:	697b      	ldr	r3, [r7, #20]
 800137e:	4413      	add	r3, r2
 8001380:	68fa      	ldr	r2, [r7, #12]
 8001382:	4413      	add	r3, r2
 8001384:	781b      	ldrb	r3, [r3, #0]
 8001386:	461a      	mov	r2, r3
 8001388:	697b      	ldr	r3, [r7, #20]
 800138a:	f1c3 0303 	rsb	r3, r3, #3
 800138e:	00db      	lsls	r3, r3, #3
 8001390:	fa02 f303 	lsl.w	r3, r2, r3
 8001394:	69ba      	ldr	r2, [r7, #24]
 8001396:	4313      	orrs	r3, r2
 8001398:	61bb      	str	r3, [r7, #24]
		for(uint32_t byte=0;byte<4;byte++){
 800139a:	697b      	ldr	r3, [r7, #20]
 800139c:	3301      	adds	r3, #1
 800139e:	617b      	str	r3, [r7, #20]
 80013a0:	697b      	ldr	r3, [r7, #20]
 80013a2:	2b03      	cmp	r3, #3
 80013a4:	d9e8      	bls.n	8001378 <writeIMUDataArray+0x1c>
		}
		data[d]=raw;
 80013a6:	69fb      	ldr	r3, [r7, #28]
 80013a8:	009b      	lsls	r3, r3, #2
 80013aa:	68ba      	ldr	r2, [r7, #8]
 80013ac:	4413      	add	r3, r2
 80013ae:	69ba      	ldr	r2, [r7, #24]
 80013b0:	601a      	str	r2, [r3, #0]
	for(uint32_t d=0;d<dataSize;d++){
 80013b2:	69fb      	ldr	r3, [r7, #28]
 80013b4:	3301      	adds	r3, #1
 80013b6:	61fb      	str	r3, [r7, #28]
 80013b8:	69fa      	ldr	r2, [r7, #28]
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	429a      	cmp	r2, r3
 80013be:	d3d6      	bcc.n	800136e <writeIMUDataArray+0x12>
	}
	return;
 80013c0:	bf00      	nop
}
 80013c2:	3724      	adds	r7, #36	; 0x24
 80013c4:	46bd      	mov	sp, r7
 80013c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ca:	4770      	bx	lr

080013cc <readIMUPacket>:

uint8_t readIMUPacket(UART_HandleTypeDef* IMUhandle, float gyroscope[3], float magnetometer[3], uint32_t timeout)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b08a      	sub	sp, #40	; 0x28
 80013d0:	af02      	add	r7, sp, #8
 80013d2:	60f8      	str	r0, [r7, #12]
 80013d4:	60b9      	str	r1, [r7, #8]
 80013d6:	607a      	str	r2, [r7, #4]
 80013d8:	603b      	str	r3, [r7, #0]
	//flush driver rx buffer
	cBuffFlush(&rxcBuff); //flushing local buffer
 80013da:	4817      	ldr	r0, [pc, #92]	; (8001438 <readIMUPacket+0x6c>)
 80013dc:	f001 fb9e 	bl	8002b1c <cBuffFlush>

	imu_packet_struct format={
 80013e0:	f107 0318 	add.w	r3, r7, #24
 80013e4:	2200      	movs	r2, #0
 80013e6:	601a      	str	r2, [r3, #0]
 80013e8:	605a      	str	r2, [r3, #4]
 80013ea:	2336      	movs	r3, #54	; 0x36
 80013ec:	763b      	strb	r3, [r7, #24]
 80013ee:	231e      	movs	r3, #30
 80013f0:	767b      	strb	r3, [r7, #25]
		.len=IMU_DATA_PACKET_LEN,
	};

	imu_packet_struct meas;

	if(receiveMsg(IMUhandle,&meas, &format, 1, timeout)){
 80013f2:	f107 0218 	add.w	r2, r7, #24
 80013f6:	f107 0110 	add.w	r1, r7, #16
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	9300      	str	r3, [sp, #0]
 80013fe:	2301      	movs	r3, #1
 8001400:	68f8      	ldr	r0, [r7, #12]
 8001402:	f7ff fe19 	bl	8001038 <receiveMsg>
 8001406:	4603      	mov	r3, r0
 8001408:	2b00      	cmp	r3, #0
 800140a:	d00f      	beq.n	800142c <readIMUPacket+0x60>
		//found packet
		//writing gyro data
		writeIMUDataArray(&meas.data[IMU_DATA_GYRO_INDEX], (uint32_t*)gyroscope, 3);
 800140c:	697b      	ldr	r3, [r7, #20]
 800140e:	3303      	adds	r3, #3
 8001410:	2203      	movs	r2, #3
 8001412:	68b9      	ldr	r1, [r7, #8]
 8001414:	4618      	mov	r0, r3
 8001416:	f7ff ffa1 	bl	800135c <writeIMUDataArray>
		//writing mag data
		writeIMUDataArray(&meas.data[IMU_DATA_MAG_INDEX], (uint32_t*)magnetometer, 3);
 800141a:	697b      	ldr	r3, [r7, #20]
 800141c:	3312      	adds	r3, #18
 800141e:	2203      	movs	r2, #3
 8001420:	6879      	ldr	r1, [r7, #4]
 8001422:	4618      	mov	r0, r3
 8001424:	f7ff ff9a 	bl	800135c <writeIMUDataArray>

		return 1;
 8001428:	2301      	movs	r3, #1
 800142a:	e000      	b.n	800142e <readIMUPacket+0x62>
	}

	return 0;
 800142c:	2300      	movs	r3, #0
}
 800142e:	4618      	mov	r0, r3
 8001430:	3720      	adds	r7, #32
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop
 8001438:	20000224 	.word	0x20000224

0800143c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800143c:	b480      	push	{r7}
 800143e:	b083      	sub	sp, #12
 8001440:	af00      	add	r7, sp, #0
 8001442:	4603      	mov	r3, r0
 8001444:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001446:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800144a:	2b00      	cmp	r3, #0
 800144c:	db0b      	blt.n	8001466 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800144e:	79fb      	ldrb	r3, [r7, #7]
 8001450:	f003 021f 	and.w	r2, r3, #31
 8001454:	4907      	ldr	r1, [pc, #28]	; (8001474 <__NVIC_EnableIRQ+0x38>)
 8001456:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800145a:	095b      	lsrs	r3, r3, #5
 800145c:	2001      	movs	r0, #1
 800145e:	fa00 f202 	lsl.w	r2, r0, r2
 8001462:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001466:	bf00      	nop
 8001468:	370c      	adds	r7, #12
 800146a:	46bd      	mov	sp, r7
 800146c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001470:	4770      	bx	lr
 8001472:	bf00      	nop
 8001474:	e000e100 	.word	0xe000e100

08001478 <__NVIC_GetEnableIRQ>:
  \return             0  Interrupt is not enabled.
  \return             1  Interrupt is enabled.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE uint32_t __NVIC_GetEnableIRQ(IRQn_Type IRQn)
{
 8001478:	b480      	push	{r7}
 800147a:	b083      	sub	sp, #12
 800147c:	af00      	add	r7, sp, #0
 800147e:	4603      	mov	r3, r0
 8001480:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001482:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001486:	2b00      	cmp	r3, #0
 8001488:	db0d      	blt.n	80014a6 <__NVIC_GetEnableIRQ+0x2e>
  {
    return((uint32_t)(((NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
 800148a:	4a0a      	ldr	r2, [pc, #40]	; (80014b4 <__NVIC_GetEnableIRQ+0x3c>)
 800148c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001490:	095b      	lsrs	r3, r3, #5
 8001492:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001496:	79fb      	ldrb	r3, [r7, #7]
 8001498:	f003 031f 	and.w	r3, r3, #31
 800149c:	fa22 f303 	lsr.w	r3, r2, r3
 80014a0:	f003 0301 	and.w	r3, r3, #1
 80014a4:	e000      	b.n	80014a8 <__NVIC_GetEnableIRQ+0x30>
  }
  else
  {
    return(0U);
 80014a6:	2300      	movs	r3, #0
  }
}
 80014a8:	4618      	mov	r0, r3
 80014aa:	370c      	adds	r7, #12
 80014ac:	46bd      	mov	sp, r7
 80014ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b2:	4770      	bx	lr
 80014b4:	e000e100 	.word	0xe000e100

080014b8 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80014b8:	b480      	push	{r7}
 80014ba:	b083      	sub	sp, #12
 80014bc:	af00      	add	r7, sp, #0
 80014be:	4603      	mov	r3, r0
 80014c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	db12      	blt.n	80014f0 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014ca:	79fb      	ldrb	r3, [r7, #7]
 80014cc:	f003 021f 	and.w	r2, r3, #31
 80014d0:	490a      	ldr	r1, [pc, #40]	; (80014fc <__NVIC_DisableIRQ+0x44>)
 80014d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014d6:	095b      	lsrs	r3, r3, #5
 80014d8:	2001      	movs	r0, #1
 80014da:	fa00 f202 	lsl.w	r2, r0, r2
 80014de:	3320      	adds	r3, #32
 80014e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80014e4:	f3bf 8f4f 	dsb	sy
}
 80014e8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80014ea:	f3bf 8f6f 	isb	sy
}
 80014ee:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80014f0:	bf00      	nop
 80014f2:	370c      	adds	r7, #12
 80014f4:	46bd      	mov	sp, r7
 80014f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fa:	4770      	bx	lr
 80014fc:	e000e100 	.word	0xe000e100

08001500 <initDriver_UART>:
} DriverHandel_UART;

volatile DriverHandel_UART _driverHandle_UART[MAX_UART_HANDLE]; 	//handle structures array

void initDriver_UART()
{
 8001500:	b480      	push	{r7}
 8001502:	b083      	sub	sp, #12
 8001504:	af00      	add	r7, sp, #0
    //initializing the data structure
    for(uint32_t handleIndex = 0; handleIndex < MAX_UART_HANDLE; handleIndex++)
 8001506:	2300      	movs	r3, #0
 8001508:	607b      	str	r3, [r7, #4]
 800150a:	e00b      	b.n	8001524 <initDriver_UART+0x24>
    {
        _driverHandle_UART[handleIndex]._usageFlag = 0;
 800150c:	4a0a      	ldr	r2, [pc, #40]	; (8001538 <initDriver_UART+0x38>)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	f241 11a8 	movw	r1, #4520	; 0x11a8
 8001514:	fb01 f303 	mul.w	r3, r1, r3
 8001518:	4413      	add	r3, r2
 800151a:	2200      	movs	r2, #0
 800151c:	701a      	strb	r2, [r3, #0]
    for(uint32_t handleIndex = 0; handleIndex < MAX_UART_HANDLE; handleIndex++)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	3301      	adds	r3, #1
 8001522:	607b      	str	r3, [r7, #4]
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	2b03      	cmp	r3, #3
 8001528:	d9f0      	bls.n	800150c <initDriver_UART+0xc>
    }
}
 800152a:	bf00      	nop
 800152c:	bf00      	nop
 800152e:	370c      	adds	r7, #12
 8001530:	46bd      	mov	sp, r7
 8001532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001536:	4770      	bx	lr
 8001538:	200002fc 	.word	0x200002fc

0800153c <addDriver_UART>:

uint8_t addDriver_UART(UART_HandleTypeDef* huartHandle, IRQn_Type irq, fifo_policy policyRX)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b086      	sub	sp, #24
 8001540:	af02      	add	r7, sp, #8
 8001542:	6078      	str	r0, [r7, #4]
 8001544:	460b      	mov	r3, r1
 8001546:	70fb      	strb	r3, [r7, #3]
 8001548:	4613      	mov	r3, r2
 800154a:	70bb      	strb	r3, [r7, #2]
    //scan the data structure to find a free position (or if the handle is already inserted)
    for(uint32_t handleIndex = 0; handleIndex < MAX_UART_HANDLE; handleIndex++)
 800154c:	2300      	movs	r3, #0
 800154e:	60fb      	str	r3, [r7, #12]
 8001550:	e0a6      	b.n	80016a0 <addDriver_UART+0x164>
    {
        //if it finds an occupied position
        if(_driverHandle_UART[handleIndex]._usageFlag == 1)
 8001552:	4a58      	ldr	r2, [pc, #352]	; (80016b4 <addDriver_UART+0x178>)
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	f241 11a8 	movw	r1, #4520	; 0x11a8
 800155a:	fb01 f303 	mul.w	r3, r1, r3
 800155e:	4413      	add	r3, r2
 8001560:	781b      	ldrb	r3, [r3, #0]
 8001562:	b2db      	uxtb	r3, r3
 8001564:	2b01      	cmp	r3, #1
 8001566:	d10e      	bne.n	8001586 <addDriver_UART+0x4a>
        {
            //if the handle is already inside the structure
            if(_driverHandle_UART[handleIndex]._huartHandle == huartHandle)
 8001568:	4a52      	ldr	r2, [pc, #328]	; (80016b4 <addDriver_UART+0x178>)
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	f241 11a8 	movw	r1, #4520	; 0x11a8
 8001570:	fb01 f303 	mul.w	r3, r1, r3
 8001574:	4413      	add	r3, r2
 8001576:	3304      	adds	r3, #4
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	687a      	ldr	r2, [r7, #4]
 800157c:	429a      	cmp	r2, r3
 800157e:	f040 808c 	bne.w	800169a <addDriver_UART+0x15e>
            {
                //error
                return 1; 
 8001582:	2301      	movs	r3, #1
 8001584:	e091      	b.n	80016aa <addDriver_UART+0x16e>
            }
        }
        else
        {
        	//disable the IRQ
        	uint32_t irqState=NVIC_GetEnableIRQ(irq);
 8001586:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800158a:	4618      	mov	r0, r3
 800158c:	f7ff ff74 	bl	8001478 <__NVIC_GetEnableIRQ>
 8001590:	60b8      	str	r0, [r7, #8]
        	NVIC_DisableIRQ(irq);
 8001592:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001596:	4618      	mov	r0, r3
 8001598:	f7ff ff8e 	bl	80014b8 <__NVIC_DisableIRQ>

            //intialize the strcture for this handle
            _driverHandle_UART[handleIndex]._huartHandle = huartHandle;
 800159c:	4a45      	ldr	r2, [pc, #276]	; (80016b4 <addDriver_UART+0x178>)
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	f241 11a8 	movw	r1, #4520	; 0x11a8
 80015a4:	fb01 f303 	mul.w	r3, r1, r3
 80015a8:	4413      	add	r3, r2
 80015aa:	3304      	adds	r3, #4
 80015ac:	687a      	ldr	r2, [r7, #4]
 80015ae:	601a      	str	r2, [r3, #0]
            _driverHandle_UART[handleIndex]._rxQueueHandle = xQueueCreateStatic(SERIAL_RX_BUFF_LEN,1,(void*)&_driverHandle_UART[handleIndex]._rxQueueStorageBuffer,&_driverHandle_UART[handleIndex]._rxQueueBuffer);
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	f241 12a8 	movw	r2, #4520	; 0x11a8
 80015b6:	fb02 f303 	mul.w	r3, r2, r3
 80015ba:	3310      	adds	r3, #16
 80015bc:	4a3d      	ldr	r2, [pc, #244]	; (80016b4 <addDriver_UART+0x178>)
 80015be:	441a      	add	r2, r3
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	f241 11a8 	movw	r1, #4520	; 0x11a8
 80015c6:	fb01 f303 	mul.w	r3, r1, r3
 80015ca:	f503 7388 	add.w	r3, r3, #272	; 0x110
 80015ce:	4939      	ldr	r1, [pc, #228]	; (80016b4 <addDriver_UART+0x178>)
 80015d0:	440b      	add	r3, r1
 80015d2:	2100      	movs	r1, #0
 80015d4:	9100      	str	r1, [sp, #0]
 80015d6:	2101      	movs	r1, #1
 80015d8:	f44f 7080 	mov.w	r0, #256	; 0x100
 80015dc:	f00b fe32 	bl	800d244 <xQueueGenericCreateStatic>
 80015e0:	4602      	mov	r2, r0
 80015e2:	4934      	ldr	r1, [pc, #208]	; (80016b4 <addDriver_UART+0x178>)
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	f241 10a8 	movw	r0, #4520	; 0x11a8
 80015ea:	fb00 f303 	mul.w	r3, r0, r3
 80015ee:	440b      	add	r3, r1
 80015f0:	330c      	adds	r3, #12
 80015f2:	601a      	str	r2, [r3, #0]
            _driverHandle_UART[handleIndex]._txQueueHandle = xQueueCreateStatic(SERIAL_TX_BUFF_LEN,1,(void*)&_driverHandle_UART[handleIndex]._txQueueStorageBuffer,&_driverHandle_UART[handleIndex]._txQueueBuffer);
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	f241 12a8 	movw	r2, #4520	; 0x11a8
 80015fa:	fb02 f303 	mul.w	r3, r2, r3
 80015fe:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8001602:	4a2c      	ldr	r2, [pc, #176]	; (80016b4 <addDriver_UART+0x178>)
 8001604:	4413      	add	r3, r2
 8001606:	1d1a      	adds	r2, r3, #4
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	f241 11a8 	movw	r1, #4520	; 0x11a8
 800160e:	fb01 f303 	mul.w	r3, r1, r3
 8001612:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 8001616:	3318      	adds	r3, #24
 8001618:	4926      	ldr	r1, [pc, #152]	; (80016b4 <addDriver_UART+0x178>)
 800161a:	440b      	add	r3, r1
 800161c:	3304      	adds	r3, #4
 800161e:	2100      	movs	r1, #0
 8001620:	9100      	str	r1, [sp, #0]
 8001622:	2101      	movs	r1, #1
 8001624:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001628:	f00b fe0c 	bl	800d244 <xQueueGenericCreateStatic>
 800162c:	4602      	mov	r2, r0
 800162e:	4921      	ldr	r1, [pc, #132]	; (80016b4 <addDriver_UART+0x178>)
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	f241 10a8 	movw	r0, #4520	; 0x11a8
 8001636:	fb00 f303 	mul.w	r3, r0, r3
 800163a:	440b      	add	r3, r1
 800163c:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8001640:	601a      	str	r2, [r3, #0]
            _driverHandle_UART[handleIndex]._usageFlag = 1;
 8001642:	4a1c      	ldr	r2, [pc, #112]	; (80016b4 <addDriver_UART+0x178>)
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	f241 11a8 	movw	r1, #4520	; 0x11a8
 800164a:	fb01 f303 	mul.w	r3, r1, r3
 800164e:	4413      	add	r3, r2
 8001650:	2201      	movs	r2, #1
 8001652:	701a      	strb	r2, [r3, #0]
            _driverHandle_UART[handleIndex]._policyRX = policyRX;
 8001654:	4a17      	ldr	r2, [pc, #92]	; (80016b4 <addDriver_UART+0x178>)
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	f241 11a8 	movw	r1, #4520	; 0x11a8
 800165c:	fb01 f303 	mul.w	r3, r1, r3
 8001660:	4413      	add	r3, r2
 8001662:	f503 538d 	add.w	r3, r3, #4512	; 0x11a0
 8001666:	3304      	adds	r3, #4
 8001668:	78ba      	ldrb	r2, [r7, #2]
 800166a:	701a      	strb	r2, [r3, #0]

            HAL_UART_Receive_IT(huartHandle,&_driverHandle_UART[handleIndex]._rxByte,1);
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	f241 12a8 	movw	r2, #4520	; 0x11a8
 8001672:	fb02 f303 	mul.w	r3, r2, r3
 8001676:	4a0f      	ldr	r2, [pc, #60]	; (80016b4 <addDriver_UART+0x178>)
 8001678:	4413      	add	r3, r2
 800167a:	3301      	adds	r3, #1
 800167c:	2201      	movs	r2, #1
 800167e:	4619      	mov	r1, r3
 8001680:	6878      	ldr	r0, [r7, #4]
 8001682:	f00a f869 	bl	800b758 <HAL_UART_Receive_IT>

            if(irqState) NVIC_EnableIRQ(irq);
 8001686:	68bb      	ldr	r3, [r7, #8]
 8001688:	2b00      	cmp	r3, #0
 800168a:	d004      	beq.n	8001696 <addDriver_UART+0x15a>
 800168c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001690:	4618      	mov	r0, r3
 8001692:	f7ff fed3 	bl	800143c <__NVIC_EnableIRQ>

            return 0;
 8001696:	2300      	movs	r3, #0
 8001698:	e007      	b.n	80016aa <addDriver_UART+0x16e>
    for(uint32_t handleIndex = 0; handleIndex < MAX_UART_HANDLE; handleIndex++)
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	3301      	adds	r3, #1
 800169e:	60fb      	str	r3, [r7, #12]
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	2b03      	cmp	r3, #3
 80016a4:	f67f af55 	bls.w	8001552 <addDriver_UART+0x16>
        }
    }
    return 1;
 80016a8:	2301      	movs	r3, #1
}
 80016aa:	4618      	mov	r0, r3
 80016ac:	3710      	adds	r7, #16
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	bf00      	nop
 80016b4:	200002fc 	.word	0x200002fc

080016b8 <receiveDriver_UART>:

uint32_t receiveDriver_UART(UART_HandleTypeDef* huartHandle, uint8_t* buff, uint32_t size){
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b086      	sub	sp, #24
 80016bc:	af00      	add	r7, sp, #0
 80016be:	60f8      	str	r0, [r7, #12]
 80016c0:	60b9      	str	r1, [r7, #8]
 80016c2:	607a      	str	r2, [r7, #4]

    if(size == 0) return 0;
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d101      	bne.n	80016ce <receiveDriver_UART+0x16>
 80016ca:	2300      	movs	r3, #0
 80016cc:	e03f      	b.n	800174e <receiveDriver_UART+0x96>

    //scanning the array with the structures to find the handle
    for(uint32_t handleIndex = 0; handleIndex < MAX_UART_HANDLE; handleIndex++)
 80016ce:	2300      	movs	r3, #0
 80016d0:	617b      	str	r3, [r7, #20]
 80016d2:	e038      	b.n	8001746 <receiveDriver_UART+0x8e>
    {
        //if it finds the handle
        if((_driverHandle_UART[handleIndex]._usageFlag == 1) && (huartHandle == _driverHandle_UART[handleIndex]._huartHandle))
 80016d4:	4a20      	ldr	r2, [pc, #128]	; (8001758 <receiveDriver_UART+0xa0>)
 80016d6:	697b      	ldr	r3, [r7, #20]
 80016d8:	f241 11a8 	movw	r1, #4520	; 0x11a8
 80016dc:	fb01 f303 	mul.w	r3, r1, r3
 80016e0:	4413      	add	r3, r2
 80016e2:	781b      	ldrb	r3, [r3, #0]
 80016e4:	b2db      	uxtb	r3, r3
 80016e6:	2b01      	cmp	r3, #1
 80016e8:	d12a      	bne.n	8001740 <receiveDriver_UART+0x88>
 80016ea:	4a1b      	ldr	r2, [pc, #108]	; (8001758 <receiveDriver_UART+0xa0>)
 80016ec:	697b      	ldr	r3, [r7, #20]
 80016ee:	f241 11a8 	movw	r1, #4520	; 0x11a8
 80016f2:	fb01 f303 	mul.w	r3, r1, r3
 80016f6:	4413      	add	r3, r2
 80016f8:	3304      	adds	r3, #4
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	68fa      	ldr	r2, [r7, #12]
 80016fe:	429a      	cmp	r2, r3
 8001700:	d11e      	bne.n	8001740 <receiveDriver_UART+0x88>
        {
        	uint8_t rxNum=0;
 8001702:	2300      	movs	r3, #0
 8001704:	74fb      	strb	r3, [r7, #19]
        	while(rxNum<size && xQueueReceive(_driverHandle_UART[handleIndex]._rxQueueHandle,&buff[rxNum],0)==pdTRUE){
 8001706:	e002      	b.n	800170e <receiveDriver_UART+0x56>
        		rxNum++;
 8001708:	7cfb      	ldrb	r3, [r7, #19]
 800170a:	3301      	adds	r3, #1
 800170c:	74fb      	strb	r3, [r7, #19]
        	while(rxNum<size && xQueueReceive(_driverHandle_UART[handleIndex]._rxQueueHandle,&buff[rxNum],0)==pdTRUE){
 800170e:	7cfb      	ldrb	r3, [r7, #19]
 8001710:	687a      	ldr	r2, [r7, #4]
 8001712:	429a      	cmp	r2, r3
 8001714:	d912      	bls.n	800173c <receiveDriver_UART+0x84>
 8001716:	4a10      	ldr	r2, [pc, #64]	; (8001758 <receiveDriver_UART+0xa0>)
 8001718:	697b      	ldr	r3, [r7, #20]
 800171a:	f241 11a8 	movw	r1, #4520	; 0x11a8
 800171e:	fb01 f303 	mul.w	r3, r1, r3
 8001722:	4413      	add	r3, r2
 8001724:	330c      	adds	r3, #12
 8001726:	6818      	ldr	r0, [r3, #0]
 8001728:	7cfb      	ldrb	r3, [r7, #19]
 800172a:	68ba      	ldr	r2, [r7, #8]
 800172c:	4413      	add	r3, r2
 800172e:	2200      	movs	r2, #0
 8001730:	4619      	mov	r1, r3
 8001732:	f00b ffe9 	bl	800d708 <xQueueReceive>
 8001736:	4603      	mov	r3, r0
 8001738:	2b01      	cmp	r3, #1
 800173a:	d0e5      	beq.n	8001708 <receiveDriver_UART+0x50>
        	}

            //0 bytes read
            return rxNum;
 800173c:	7cfb      	ldrb	r3, [r7, #19]
 800173e:	e006      	b.n	800174e <receiveDriver_UART+0x96>
    for(uint32_t handleIndex = 0; handleIndex < MAX_UART_HANDLE; handleIndex++)
 8001740:	697b      	ldr	r3, [r7, #20]
 8001742:	3301      	adds	r3, #1
 8001744:	617b      	str	r3, [r7, #20]
 8001746:	697b      	ldr	r3, [r7, #20]
 8001748:	2b03      	cmp	r3, #3
 800174a:	d9c3      	bls.n	80016d4 <receiveDriver_UART+0x1c>
            HAL_UART_Receive_IT(huartHandle,&_driverHandle_UART[handleIndex]._rxByte,1);
            //NVIC_EnableIRQ(_driverHandle_UART[handleIndex]._irq);

        }
    }
    return 0;
 800174c:	2300      	movs	r3, #0
}
 800174e:	4618      	mov	r0, r3
 8001750:	3718      	adds	r7, #24
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	200002fc 	.word	0x200002fc

0800175c <sendDriver_UART>:

uint32_t sendDriver_UART(UART_HandleTypeDef* huartHandle,uint8_t* buff,uint32_t size){
 800175c:	b580      	push	{r7, lr}
 800175e:	b086      	sub	sp, #24
 8001760:	af00      	add	r7, sp, #0
 8001762:	60f8      	str	r0, [r7, #12]
 8001764:	60b9      	str	r1, [r7, #8]
 8001766:	607a      	str	r2, [r7, #4]
	if(size == 0) return 0;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	2b00      	cmp	r3, #0
 800176c:	d101      	bne.n	8001772 <sendDriver_UART+0x16>
 800176e:	2300      	movs	r3, #0
 8001770:	e0a0      	b.n	80018b4 <sendDriver_UART+0x158>

	//scanning the array with the structures to find the handle
	for(uint32_t handleIndex = 0; handleIndex < MAX_UART_HANDLE; handleIndex++)
 8001772:	2300      	movs	r3, #0
 8001774:	617b      	str	r3, [r7, #20]
 8001776:	e098      	b.n	80018aa <sendDriver_UART+0x14e>
	{
		//if it finds the handle
		if((_driverHandle_UART[handleIndex]._usageFlag == 1) && (huartHandle == _driverHandle_UART[handleIndex]._huartHandle))
 8001778:	4a50      	ldr	r2, [pc, #320]	; (80018bc <sendDriver_UART+0x160>)
 800177a:	697b      	ldr	r3, [r7, #20]
 800177c:	f241 11a8 	movw	r1, #4520	; 0x11a8
 8001780:	fb01 f303 	mul.w	r3, r1, r3
 8001784:	4413      	add	r3, r2
 8001786:	781b      	ldrb	r3, [r3, #0]
 8001788:	b2db      	uxtb	r3, r3
 800178a:	2b01      	cmp	r3, #1
 800178c:	f040 808a 	bne.w	80018a4 <sendDriver_UART+0x148>
 8001790:	4a4a      	ldr	r2, [pc, #296]	; (80018bc <sendDriver_UART+0x160>)
 8001792:	697b      	ldr	r3, [r7, #20]
 8001794:	f241 11a8 	movw	r1, #4520	; 0x11a8
 8001798:	fb01 f303 	mul.w	r3, r1, r3
 800179c:	4413      	add	r3, r2
 800179e:	3304      	adds	r3, #4
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	68fa      	ldr	r2, [r7, #12]
 80017a4:	429a      	cmp	r2, r3
 80017a6:	d17d      	bne.n	80018a4 <sendDriver_UART+0x148>
		{
			//inserting bytes inside queue
			uint8_t txNum=0;
 80017a8:	2300      	movs	r3, #0
 80017aa:	74fb      	strb	r3, [r7, #19]
			while((txNum+1)<size && xQueueSendToBack(_driverHandle_UART[handleIndex]._txQueueHandle,&buff[txNum],0)==pdTRUE){
 80017ac:	e002      	b.n	80017b4 <sendDriver_UART+0x58>
				txNum++;
 80017ae:	7cfb      	ldrb	r3, [r7, #19]
 80017b0:	3301      	adds	r3, #1
 80017b2:	74fb      	strb	r3, [r7, #19]
			while((txNum+1)<size && xQueueSendToBack(_driverHandle_UART[handleIndex]._txQueueHandle,&buff[txNum],0)==pdTRUE){
 80017b4:	7cfb      	ldrb	r3, [r7, #19]
 80017b6:	3301      	adds	r3, #1
 80017b8:	461a      	mov	r2, r3
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	4293      	cmp	r3, r2
 80017be:	d913      	bls.n	80017e8 <sendDriver_UART+0x8c>
 80017c0:	4a3e      	ldr	r2, [pc, #248]	; (80018bc <sendDriver_UART+0x160>)
 80017c2:	697b      	ldr	r3, [r7, #20]
 80017c4:	f241 11a8 	movw	r1, #4520	; 0x11a8
 80017c8:	fb01 f303 	mul.w	r3, r1, r3
 80017cc:	4413      	add	r3, r2
 80017ce:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 80017d2:	6818      	ldr	r0, [r3, #0]
 80017d4:	7cfb      	ldrb	r3, [r7, #19]
 80017d6:	68ba      	ldr	r2, [r7, #8]
 80017d8:	18d1      	adds	r1, r2, r3
 80017da:	2300      	movs	r3, #0
 80017dc:	2200      	movs	r2, #0
 80017de:	f00b fdf9 	bl	800d3d4 <xQueueGenericSend>
 80017e2:	4603      	mov	r3, r0
 80017e4:	2b01      	cmp	r3, #1
 80017e6:	d0e2      	beq.n	80017ae <sendDriver_UART+0x52>
			}
			//if no transmission ongoing and pipe is not empty, start transmission now
            //disable the IRQ
        	NVIC_DisableIRQ(_driverHandle_UART[handleIndex]._irq);
 80017e8:	4a34      	ldr	r2, [pc, #208]	; (80018bc <sendDriver_UART+0x160>)
 80017ea:	697b      	ldr	r3, [r7, #20]
 80017ec:	f241 11a8 	movw	r1, #4520	; 0x11a8
 80017f0:	fb01 f303 	mul.w	r3, r1, r3
 80017f4:	4413      	add	r3, r2
 80017f6:	3308      	adds	r3, #8
 80017f8:	781b      	ldrb	r3, [r3, #0]
 80017fa:	b25b      	sxtb	r3, r3
 80017fc:	4618      	mov	r0, r3
 80017fe:	f7ff fe5b 	bl	80014b8 <__NVIC_DisableIRQ>

			if(huartHandle->gState == HAL_UART_STATE_READY){
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001806:	2b20      	cmp	r3, #32
 8001808:	d126      	bne.n	8001858 <sendDriver_UART+0xfc>
				_driverHandle_UART[handleIndex]._txByte=buff[txNum];
 800180a:	7cfb      	ldrb	r3, [r7, #19]
 800180c:	68ba      	ldr	r2, [r7, #8]
 800180e:	4413      	add	r3, r2
 8001810:	7818      	ldrb	r0, [r3, #0]
 8001812:	4a2a      	ldr	r2, [pc, #168]	; (80018bc <sendDriver_UART+0x160>)
 8001814:	697b      	ldr	r3, [r7, #20]
 8001816:	f241 11a8 	movw	r1, #4520	; 0x11a8
 800181a:	fb01 f303 	mul.w	r3, r1, r3
 800181e:	4413      	add	r3, r2
 8001820:	3302      	adds	r3, #2
 8001822:	4602      	mov	r2, r0
 8001824:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit_IT(_driverHandle_UART[handleIndex]._huartHandle, &_driverHandle_UART[handleIndex]._txByte, 1); //try restarting transmit if not ongoing
 8001826:	4a25      	ldr	r2, [pc, #148]	; (80018bc <sendDriver_UART+0x160>)
 8001828:	697b      	ldr	r3, [r7, #20]
 800182a:	f241 11a8 	movw	r1, #4520	; 0x11a8
 800182e:	fb01 f303 	mul.w	r3, r1, r3
 8001832:	4413      	add	r3, r2
 8001834:	3304      	adds	r3, #4
 8001836:	6818      	ldr	r0, [r3, #0]
 8001838:	697b      	ldr	r3, [r7, #20]
 800183a:	f241 12a8 	movw	r2, #4520	; 0x11a8
 800183e:	fb02 f303 	mul.w	r3, r2, r3
 8001842:	4a1e      	ldr	r2, [pc, #120]	; (80018bc <sendDriver_UART+0x160>)
 8001844:	4413      	add	r3, r2
 8001846:	3302      	adds	r3, #2
 8001848:	2201      	movs	r2, #1
 800184a:	4619      	mov	r1, r3
 800184c:	f009 ff16 	bl	800b67c <HAL_UART_Transmit_IT>
				txNum++;
 8001850:	7cfb      	ldrb	r3, [r7, #19]
 8001852:	3301      	adds	r3, #1
 8001854:	74fb      	strb	r3, [r7, #19]
 8001856:	e016      	b.n	8001886 <sendDriver_UART+0x12a>
			}else{
				if(xQueueSendToBack(_driverHandle_UART[handleIndex]._txQueueHandle,&buff[txNum],0)==pdTRUE){
 8001858:	4a18      	ldr	r2, [pc, #96]	; (80018bc <sendDriver_UART+0x160>)
 800185a:	697b      	ldr	r3, [r7, #20]
 800185c:	f241 11a8 	movw	r1, #4520	; 0x11a8
 8001860:	fb01 f303 	mul.w	r3, r1, r3
 8001864:	4413      	add	r3, r2
 8001866:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800186a:	6818      	ldr	r0, [r3, #0]
 800186c:	7cfb      	ldrb	r3, [r7, #19]
 800186e:	68ba      	ldr	r2, [r7, #8]
 8001870:	18d1      	adds	r1, r2, r3
 8001872:	2300      	movs	r3, #0
 8001874:	2200      	movs	r2, #0
 8001876:	f00b fdad 	bl	800d3d4 <xQueueGenericSend>
 800187a:	4603      	mov	r3, r0
 800187c:	2b01      	cmp	r3, #1
 800187e:	d102      	bne.n	8001886 <sendDriver_UART+0x12a>
					txNum++;
 8001880:	7cfb      	ldrb	r3, [r7, #19]
 8001882:	3301      	adds	r3, #1
 8001884:	74fb      	strb	r3, [r7, #19]
                }
			}

            NVIC_EnableIRQ(_driverHandle_UART[handleIndex]._irq);
 8001886:	4a0d      	ldr	r2, [pc, #52]	; (80018bc <sendDriver_UART+0x160>)
 8001888:	697b      	ldr	r3, [r7, #20]
 800188a:	f241 11a8 	movw	r1, #4520	; 0x11a8
 800188e:	fb01 f303 	mul.w	r3, r1, r3
 8001892:	4413      	add	r3, r2
 8001894:	3308      	adds	r3, #8
 8001896:	781b      	ldrb	r3, [r3, #0]
 8001898:	b25b      	sxtb	r3, r3
 800189a:	4618      	mov	r0, r3
 800189c:	f7ff fdce 	bl	800143c <__NVIC_EnableIRQ>

			return txNum;
 80018a0:	7cfb      	ldrb	r3, [r7, #19]
 80018a2:	e007      	b.n	80018b4 <sendDriver_UART+0x158>
	for(uint32_t handleIndex = 0; handleIndex < MAX_UART_HANDLE; handleIndex++)
 80018a4:	697b      	ldr	r3, [r7, #20]
 80018a6:	3301      	adds	r3, #1
 80018a8:	617b      	str	r3, [r7, #20]
 80018aa:	697b      	ldr	r3, [r7, #20]
 80018ac:	2b03      	cmp	r3, #3
 80018ae:	f67f af63 	bls.w	8001778 <sendDriver_UART+0x1c>
		}
	}

	return 0;
 80018b2:	2300      	movs	r3, #0
}
 80018b4:	4618      	mov	r0, r3
 80018b6:	3718      	adds	r7, #24
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bd80      	pop	{r7, pc}
 80018bc:	200002fc 	.word	0x200002fc

080018c0 <flushRXDriver_UART>:

void flushRXDriver_UART(UART_HandleTypeDef* huartHandle){
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b084      	sub	sp, #16
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
	//scanning the structure array
	for(uint32_t handleIndex = 0; handleIndex < MAX_UART_HANDLE; handleIndex++)
 80018c8:	2300      	movs	r3, #0
 80018ca:	60fb      	str	r3, [r7, #12]
 80018cc:	e026      	b.n	800191c <flushRXDriver_UART+0x5c>
	{
		//if it finds the handle in the structure
		if(_driverHandle_UART[handleIndex]._usageFlag == 1 && huartHandle == _driverHandle_UART[handleIndex]._huartHandle)
 80018ce:	4a17      	ldr	r2, [pc, #92]	; (800192c <flushRXDriver_UART+0x6c>)
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	f241 11a8 	movw	r1, #4520	; 0x11a8
 80018d6:	fb01 f303 	mul.w	r3, r1, r3
 80018da:	4413      	add	r3, r2
 80018dc:	781b      	ldrb	r3, [r3, #0]
 80018de:	b2db      	uxtb	r3, r3
 80018e0:	2b01      	cmp	r3, #1
 80018e2:	d118      	bne.n	8001916 <flushRXDriver_UART+0x56>
 80018e4:	4a11      	ldr	r2, [pc, #68]	; (800192c <flushRXDriver_UART+0x6c>)
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	f241 11a8 	movw	r1, #4520	; 0x11a8
 80018ec:	fb01 f303 	mul.w	r3, r1, r3
 80018f0:	4413      	add	r3, r2
 80018f2:	3304      	adds	r3, #4
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	687a      	ldr	r2, [r7, #4]
 80018f8:	429a      	cmp	r2, r3
 80018fa:	d10c      	bne.n	8001916 <flushRXDriver_UART+0x56>
		{
			//flushing queue
			xQueueReset(_driverHandle_UART[handleIndex]._rxQueueHandle);
 80018fc:	4a0b      	ldr	r2, [pc, #44]	; (800192c <flushRXDriver_UART+0x6c>)
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	f241 11a8 	movw	r1, #4520	; 0x11a8
 8001904:	fb01 f303 	mul.w	r3, r1, r3
 8001908:	4413      	add	r3, r2
 800190a:	330c      	adds	r3, #12
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	2100      	movs	r1, #0
 8001910:	4618      	mov	r0, r3
 8001912:	f00b fc2f 	bl	800d174 <xQueueGenericReset>
	for(uint32_t handleIndex = 0; handleIndex < MAX_UART_HANDLE; handleIndex++)
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	3301      	adds	r3, #1
 800191a:	60fb      	str	r3, [r7, #12]
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	2b03      	cmp	r3, #3
 8001920:	d9d5      	bls.n	80018ce <flushRXDriver_UART+0xe>
		}
	}
}
 8001922:	bf00      	nop
 8001924:	bf00      	nop
 8001926:	3710      	adds	r7, #16
 8001928:	46bd      	mov	sp, r7
 800192a:	bd80      	pop	{r7, pc}
 800192c:	200002fc 	.word	0x200002fc

08001930 <HAL_UART_ErrorCallback>:
			xQueueReset(_driverHandle_UART[handleIndex]._txQueueHandle);
		}
	}
}

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huartHandle){
 8001930:	b580      	push	{r7, lr}
 8001932:	b084      	sub	sp, #16
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
//scanning the array with the structures to find the handle

    for(uint32_t handleIndex = 0; handleIndex < MAX_UART_HANDLE; handleIndex++)
 8001938:	2300      	movs	r3, #0
 800193a:	60fb      	str	r3, [r7, #12]
 800193c:	e027      	b.n	800198e <HAL_UART_ErrorCallback+0x5e>
    {
        //if it finds the handle
        if((_driverHandle_UART[handleIndex]._usageFlag == 1) && (huartHandle == _driverHandle_UART[handleIndex]._huartHandle))
 800193e:	4a17      	ldr	r2, [pc, #92]	; (800199c <HAL_UART_ErrorCallback+0x6c>)
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	f241 11a8 	movw	r1, #4520	; 0x11a8
 8001946:	fb01 f303 	mul.w	r3, r1, r3
 800194a:	4413      	add	r3, r2
 800194c:	781b      	ldrb	r3, [r3, #0]
 800194e:	b2db      	uxtb	r3, r3
 8001950:	2b01      	cmp	r3, #1
 8001952:	d119      	bne.n	8001988 <HAL_UART_ErrorCallback+0x58>
 8001954:	4a11      	ldr	r2, [pc, #68]	; (800199c <HAL_UART_ErrorCallback+0x6c>)
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	f241 11a8 	movw	r1, #4520	; 0x11a8
 800195c:	fb01 f303 	mul.w	r3, r1, r3
 8001960:	4413      	add	r3, r2
 8001962:	3304      	adds	r3, #4
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	687a      	ldr	r2, [r7, #4]
 8001968:	429a      	cmp	r2, r3
 800196a:	d10d      	bne.n	8001988 <HAL_UART_ErrorCallback+0x58>
        {
            HAL_UART_Receive_IT(huartHandle,&_driverHandle_UART[handleIndex]._rxByte,1);
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	f241 12a8 	movw	r2, #4520	; 0x11a8
 8001972:	fb02 f303 	mul.w	r3, r2, r3
 8001976:	4a09      	ldr	r2, [pc, #36]	; (800199c <HAL_UART_ErrorCallback+0x6c>)
 8001978:	4413      	add	r3, r2
 800197a:	3301      	adds	r3, #1
 800197c:	2201      	movs	r2, #1
 800197e:	4619      	mov	r1, r3
 8001980:	6878      	ldr	r0, [r7, #4]
 8001982:	f009 fee9 	bl	800b758 <HAL_UART_Receive_IT>
            return;
 8001986:	e006      	b.n	8001996 <HAL_UART_ErrorCallback+0x66>
    for(uint32_t handleIndex = 0; handleIndex < MAX_UART_HANDLE; handleIndex++)
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	3301      	adds	r3, #1
 800198c:	60fb      	str	r3, [r7, #12]
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	2b03      	cmp	r3, #3
 8001992:	d9d4      	bls.n	800193e <HAL_UART_ErrorCallback+0xe>
        }
    }
    return;
 8001994:	bf00      	nop
    
}
 8001996:	3710      	adds	r7, #16
 8001998:	46bd      	mov	sp, r7
 800199a:	bd80      	pop	{r7, pc}
 800199c:	200002fc 	.word	0x200002fc

080019a0 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b084      	sub	sp, #16
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
	//scanning the structure array
    for(uint32_t handleIndex = 0; handleIndex < MAX_UART_HANDLE; handleIndex++)
 80019a8:	2300      	movs	r3, #0
 80019aa:	60fb      	str	r3, [r7, #12]
 80019ac:	e068      	b.n	8001a80 <HAL_UART_RxCpltCallback+0xe0>
    {
        //if it finds the handle in the structure
        if(_driverHandle_UART[handleIndex]._usageFlag == 1 && huart == _driverHandle_UART[handleIndex]._huartHandle)
 80019ae:	4a38      	ldr	r2, [pc, #224]	; (8001a90 <HAL_UART_RxCpltCallback+0xf0>)
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	f241 11a8 	movw	r1, #4520	; 0x11a8
 80019b6:	fb01 f303 	mul.w	r3, r1, r3
 80019ba:	4413      	add	r3, r2
 80019bc:	781b      	ldrb	r3, [r3, #0]
 80019be:	b2db      	uxtb	r3, r3
 80019c0:	2b01      	cmp	r3, #1
 80019c2:	d15a      	bne.n	8001a7a <HAL_UART_RxCpltCallback+0xda>
 80019c4:	4a32      	ldr	r2, [pc, #200]	; (8001a90 <HAL_UART_RxCpltCallback+0xf0>)
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	f241 11a8 	movw	r1, #4520	; 0x11a8
 80019cc:	fb01 f303 	mul.w	r3, r1, r3
 80019d0:	4413      	add	r3, r2
 80019d2:	3304      	adds	r3, #4
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	687a      	ldr	r2, [r7, #4]
 80019d8:	429a      	cmp	r2, r3
 80019da:	d14e      	bne.n	8001a7a <HAL_UART_RxCpltCallback+0xda>
        {
        	if(_driverHandle_UART[handleIndex]._policyRX==keep_new && xQueueIsQueueFullFromISR(_driverHandle_UART[handleIndex]._rxQueueHandle)){
 80019dc:	4a2c      	ldr	r2, [pc, #176]	; (8001a90 <HAL_UART_RxCpltCallback+0xf0>)
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	f241 11a8 	movw	r1, #4520	; 0x11a8
 80019e4:	fb01 f303 	mul.w	r3, r1, r3
 80019e8:	4413      	add	r3, r2
 80019ea:	f503 538d 	add.w	r3, r3, #4512	; 0x11a0
 80019ee:	3304      	adds	r3, #4
 80019f0:	781b      	ldrb	r3, [r3, #0]
 80019f2:	b2db      	uxtb	r3, r3
 80019f4:	2b01      	cmp	r3, #1
 80019f6:	d11d      	bne.n	8001a34 <HAL_UART_RxCpltCallback+0x94>
 80019f8:	4a25      	ldr	r2, [pc, #148]	; (8001a90 <HAL_UART_RxCpltCallback+0xf0>)
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	f241 11a8 	movw	r1, #4520	; 0x11a8
 8001a00:	fb01 f303 	mul.w	r3, r1, r3
 8001a04:	4413      	add	r3, r2
 8001a06:	330c      	adds	r3, #12
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	f00c f8ec 	bl	800dbe8 <xQueueIsQueueFullFromISR>
 8001a10:	4603      	mov	r3, r0
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d00e      	beq.n	8001a34 <HAL_UART_RxCpltCallback+0x94>
        		uint8_t c;
        		xQueueReceiveFromISR(_driverHandle_UART[handleIndex]._rxQueueHandle, &c, NULL);
 8001a16:	4a1e      	ldr	r2, [pc, #120]	; (8001a90 <HAL_UART_RxCpltCallback+0xf0>)
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	f241 11a8 	movw	r1, #4520	; 0x11a8
 8001a1e:	fb01 f303 	mul.w	r3, r1, r3
 8001a22:	4413      	add	r3, r2
 8001a24:	330c      	adds	r3, #12
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f107 010b 	add.w	r1, r7, #11
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	4618      	mov	r0, r3
 8001a30:	f00b ff4a 	bl	800d8c8 <xQueueReceiveFromISR>
        	}

            xQueueSendToBackFromISR(_driverHandle_UART[handleIndex]._rxQueueHandle,(void*)&_driverHandle_UART[handleIndex]._rxByte,NULL);
 8001a34:	4a16      	ldr	r2, [pc, #88]	; (8001a90 <HAL_UART_RxCpltCallback+0xf0>)
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	f241 11a8 	movw	r1, #4520	; 0x11a8
 8001a3c:	fb01 f303 	mul.w	r3, r1, r3
 8001a40:	4413      	add	r3, r2
 8001a42:	330c      	adds	r3, #12
 8001a44:	6818      	ldr	r0, [r3, #0]
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	f241 12a8 	movw	r2, #4520	; 0x11a8
 8001a4c:	fb02 f303 	mul.w	r3, r2, r3
 8001a50:	4a0f      	ldr	r2, [pc, #60]	; (8001a90 <HAL_UART_RxCpltCallback+0xf0>)
 8001a52:	4413      	add	r3, r2
 8001a54:	1c59      	adds	r1, r3, #1
 8001a56:	2300      	movs	r3, #0
 8001a58:	2200      	movs	r2, #0
 8001a5a:	f00b fdb9 	bl	800d5d0 <xQueueGenericSendFromISR>

            //relaunching ISR
            HAL_UART_Receive_IT(huart,&_driverHandle_UART[handleIndex]._rxByte,1);
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	f241 12a8 	movw	r2, #4520	; 0x11a8
 8001a64:	fb02 f303 	mul.w	r3, r2, r3
 8001a68:	4a09      	ldr	r2, [pc, #36]	; (8001a90 <HAL_UART_RxCpltCallback+0xf0>)
 8001a6a:	4413      	add	r3, r2
 8001a6c:	3301      	adds	r3, #1
 8001a6e:	2201      	movs	r2, #1
 8001a70:	4619      	mov	r1, r3
 8001a72:	6878      	ldr	r0, [r7, #4]
 8001a74:	f009 fe70 	bl	800b758 <HAL_UART_Receive_IT>

            return;
 8001a78:	e006      	b.n	8001a88 <HAL_UART_RxCpltCallback+0xe8>
    for(uint32_t handleIndex = 0; handleIndex < MAX_UART_HANDLE; handleIndex++)
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	3301      	adds	r3, #1
 8001a7e:	60fb      	str	r3, [r7, #12]
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	2b03      	cmp	r3, #3
 8001a84:	d993      	bls.n	80019ae <HAL_UART_RxCpltCallback+0xe>
        }
    }
	return;
 8001a86:	bf00      	nop
}
 8001a88:	3710      	adds	r7, #16
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}
 8001a8e:	bf00      	nop
 8001a90:	200002fc 	.word	0x200002fc

08001a94 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b084      	sub	sp, #16
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
	//scanning the structure array
    for(uint32_t handleIndex = 0; handleIndex < MAX_UART_HANDLE; handleIndex++)
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	60fb      	str	r3, [r7, #12]
 8001aa0:	e048      	b.n	8001b34 <HAL_UART_TxCpltCallback+0xa0>
    {
        //if it finds the handle in the structure
        if(_driverHandle_UART[handleIndex]._usageFlag == 1 && huart == _driverHandle_UART[handleIndex]._huartHandle)
 8001aa2:	4a28      	ldr	r2, [pc, #160]	; (8001b44 <HAL_UART_TxCpltCallback+0xb0>)
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	f241 11a8 	movw	r1, #4520	; 0x11a8
 8001aaa:	fb01 f303 	mul.w	r3, r1, r3
 8001aae:	4413      	add	r3, r2
 8001ab0:	781b      	ldrb	r3, [r3, #0]
 8001ab2:	b2db      	uxtb	r3, r3
 8001ab4:	2b01      	cmp	r3, #1
 8001ab6:	d13a      	bne.n	8001b2e <HAL_UART_TxCpltCallback+0x9a>
 8001ab8:	4a22      	ldr	r2, [pc, #136]	; (8001b44 <HAL_UART_TxCpltCallback+0xb0>)
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	f241 11a8 	movw	r1, #4520	; 0x11a8
 8001ac0:	fb01 f303 	mul.w	r3, r1, r3
 8001ac4:	4413      	add	r3, r2
 8001ac6:	3304      	adds	r3, #4
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	687a      	ldr	r2, [r7, #4]
 8001acc:	429a      	cmp	r2, r3
 8001ace:	d12e      	bne.n	8001b2e <HAL_UART_TxCpltCallback+0x9a>
        {
            
			if(xQueueReceiveFromISR(_driverHandle_UART[handleIndex]._txQueueHandle,&_driverHandle_UART[handleIndex]._txByte,NULL)==pdTRUE){
 8001ad0:	4a1c      	ldr	r2, [pc, #112]	; (8001b44 <HAL_UART_TxCpltCallback+0xb0>)
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	f241 11a8 	movw	r1, #4520	; 0x11a8
 8001ad8:	fb01 f303 	mul.w	r3, r1, r3
 8001adc:	4413      	add	r3, r2
 8001ade:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8001ae2:	6818      	ldr	r0, [r3, #0]
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	f241 12a8 	movw	r2, #4520	; 0x11a8
 8001aea:	fb02 f303 	mul.w	r3, r2, r3
 8001aee:	4a15      	ldr	r2, [pc, #84]	; (8001b44 <HAL_UART_TxCpltCallback+0xb0>)
 8001af0:	4413      	add	r3, r2
 8001af2:	3302      	adds	r3, #2
 8001af4:	2200      	movs	r2, #0
 8001af6:	4619      	mov	r1, r3
 8001af8:	f00b fee6 	bl	800d8c8 <xQueueReceiveFromISR>
 8001afc:	4603      	mov	r3, r0
 8001afe:	2b01      	cmp	r3, #1
 8001b00:	d11c      	bne.n	8001b3c <HAL_UART_TxCpltCallback+0xa8>
				HAL_UART_Transmit_IT(_driverHandle_UART[handleIndex]._huartHandle, &_driverHandle_UART[handleIndex]._txByte, 1);
 8001b02:	4a10      	ldr	r2, [pc, #64]	; (8001b44 <HAL_UART_TxCpltCallback+0xb0>)
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	f241 11a8 	movw	r1, #4520	; 0x11a8
 8001b0a:	fb01 f303 	mul.w	r3, r1, r3
 8001b0e:	4413      	add	r3, r2
 8001b10:	3304      	adds	r3, #4
 8001b12:	6818      	ldr	r0, [r3, #0]
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	f241 12a8 	movw	r2, #4520	; 0x11a8
 8001b1a:	fb02 f303 	mul.w	r3, r2, r3
 8001b1e:	4a09      	ldr	r2, [pc, #36]	; (8001b44 <HAL_UART_TxCpltCallback+0xb0>)
 8001b20:	4413      	add	r3, r2
 8001b22:	3302      	adds	r3, #2
 8001b24:	2201      	movs	r2, #1
 8001b26:	4619      	mov	r1, r3
 8001b28:	f009 fda8 	bl	800b67c <HAL_UART_Transmit_IT>
			}

            return;
 8001b2c:	e006      	b.n	8001b3c <HAL_UART_TxCpltCallback+0xa8>
    for(uint32_t handleIndex = 0; handleIndex < MAX_UART_HANDLE; handleIndex++)
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	3301      	adds	r3, #1
 8001b32:	60fb      	str	r3, [r7, #12]
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	2b03      	cmp	r3, #3
 8001b38:	d9b3      	bls.n	8001aa2 <HAL_UART_TxCpltCallback+0xe>
        }
    }
	return;
 8001b3a:	e000      	b.n	8001b3e <HAL_UART_TxCpltCallback+0xaa>
            return;
 8001b3c:	bf00      	nop

}
 8001b3e:	3710      	adds	r7, #16
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bd80      	pop	{r7, pc}
 8001b44:	200002fc 	.word	0x200002fc

08001b48 <init_actuator_handler>:
//PWM freq puo variare tra 4Hz e 200Khz
//Duty cycle must be written in percentage in this function!!!
//dir = 1; -> FORWARD
//dir = 0; -> REVERSE
void init_actuator_handler(Actuator_struct *act,TIM_HandleTypeDef* htim,uint32_t pwm_channel1,uint32_t pwm_channel2,uint32_t pwm_freq,uint8_t duty_cycle)
{
 8001b48:	b5b0      	push	{r4, r5, r7, lr}
 8001b4a:	b086      	sub	sp, #24
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	60f8      	str	r0, [r7, #12]
 8001b50:	60b9      	str	r1, [r7, #8]
 8001b52:	607a      	str	r2, [r7, #4]
 8001b54:	603b      	str	r3, [r7, #0]
	act->htim=htim;
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	68ba      	ldr	r2, [r7, #8]
 8001b5a:	601a      	str	r2, [r3, #0]
	act->pwm_channel1=pwm_channel1;
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	687a      	ldr	r2, [r7, #4]
 8001b60:	609a      	str	r2, [r3, #8]
	act->pwm_channel2=pwm_channel2;
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	683a      	ldr	r2, [r7, #0]
 8001b66:	60da      	str	r2, [r3, #12]
	act->duty_cycle = duty_cycle;
 8001b68:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001b6c:	ee07 3a90 	vmov	s15, r3
 8001b70:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	edc3 7a04 	vstr	s15, [r3, #16]
	act->dir = 1; //Initially FORWARD
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	2201      	movs	r2, #1
 8001b7e:	751a      	strb	r2, [r3, #20]

	HAL_TIM_PWM_Stop(act->htim,pwm_channel1);
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	6879      	ldr	r1, [r7, #4]
 8001b86:	4618      	mov	r0, r3
 8001b88:	f008 fccc 	bl	800a524 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(act->htim,pwm_channel2);
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	6839      	ldr	r1, [r7, #0]
 8001b92:	4618      	mov	r0, r3
 8001b94:	f008 fcc6 	bl	800a524 <HAL_TIM_PWM_Stop>

	if(pwm_freq > 200000)  pwm_freq = 200000;
 8001b98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b9a:	4a9b      	ldr	r2, [pc, #620]	; (8001e08 <init_actuator_handler+0x2c0>)
 8001b9c:	4293      	cmp	r3, r2
 8001b9e:	d902      	bls.n	8001ba6 <init_actuator_handler+0x5e>
 8001ba0:	4b99      	ldr	r3, [pc, #612]	; (8001e08 <init_actuator_handler+0x2c0>)
 8001ba2:	62bb      	str	r3, [r7, #40]	; 0x28
 8001ba4:	e004      	b.n	8001bb0 <init_actuator_handler+0x68>
	else if(pwm_freq < 4) pwm_freq = 4;
 8001ba6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ba8:	2b03      	cmp	r3, #3
 8001baa:	d801      	bhi.n	8001bb0 <init_actuator_handler+0x68>
 8001bac:	2304      	movs	r3, #4
 8001bae:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t prescaler = (40000000 / (pwm_freq * (act->htim->Init.Period + 1))) - 1;
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	68db      	ldr	r3, [r3, #12]
 8001bb6:	3301      	adds	r3, #1
 8001bb8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001bba:	fb02 f303 	mul.w	r3, r2, r3
 8001bbe:	4a93      	ldr	r2, [pc, #588]	; (8001e0c <init_actuator_handler+0x2c4>)
 8001bc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bc4:	3b01      	subs	r3, #1
 8001bc6:	617b      	str	r3, [r7, #20]

	// Aggiornare il prescaler
	__HAL_TIM_SET_PRESCALER(act->htim, prescaler);
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	697a      	ldr	r2, [r7, #20]
 8001bd0:	629a      	str	r2, [r3, #40]	; 0x28


	uint32_t update_value = (uint32_t)roundf((float)(act->htim->Instance->ARR) * (act->duty_cycle * 0.01));
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bda:	ee07 3a90 	vmov	s15, r3
 8001bde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001be2:	ee17 0a90 	vmov	r0, s15
 8001be6:	f7fe fcb7 	bl	8000558 <__aeabi_f2d>
 8001bea:	4604      	mov	r4, r0
 8001bec:	460d      	mov	r5, r1
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	691b      	ldr	r3, [r3, #16]
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	f7fe fcb0 	bl	8000558 <__aeabi_f2d>
 8001bf8:	a381      	add	r3, pc, #516	; (adr r3, 8001e00 <init_actuator_handler+0x2b8>)
 8001bfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bfe:	f7fe fd03 	bl	8000608 <__aeabi_dmul>
 8001c02:	4602      	mov	r2, r0
 8001c04:	460b      	mov	r3, r1
 8001c06:	4620      	mov	r0, r4
 8001c08:	4629      	mov	r1, r5
 8001c0a:	f7fe fcfd 	bl	8000608 <__aeabi_dmul>
 8001c0e:	4602      	mov	r2, r0
 8001c10:	460b      	mov	r3, r1
 8001c12:	4610      	mov	r0, r2
 8001c14:	4619      	mov	r1, r3
 8001c16:	f7fe ffcf 	bl	8000bb8 <__aeabi_d2f>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	ee00 3a10 	vmov	s0, r3
 8001c20:	f010 fa5e 	bl	80120e0 <roundf>
 8001c24:	eef0 7a40 	vmov.f32	s15, s0
 8001c28:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001c2c:	ee17 3a90 	vmov	r3, s15
 8001c30:	613b      	str	r3, [r7, #16]
	//if(update_value > act->htim->Instance->ARR)	update_value = act->htim->Instance->ARR;
	__HAL_TIM_SET_COMPARE(act->htim, act->pwm_channel1, (uint32_t)(roundf(act->htim->Instance->ARR)));
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	689b      	ldr	r3, [r3, #8]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d110      	bne.n	8001c5c <init_actuator_handler+0x114>
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c42:	ee07 3a90 	vmov	s15, r3
 8001c46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001c54:	ee17 2a90 	vmov	r2, s15
 8001c58:	635a      	str	r2, [r3, #52]	; 0x34
 8001c5a:	e063      	b.n	8001d24 <init_actuator_handler+0x1dc>
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	689b      	ldr	r3, [r3, #8]
 8001c60:	2b04      	cmp	r3, #4
 8001c62:	d110      	bne.n	8001c86 <init_actuator_handler+0x13e>
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c6c:	ee07 3a90 	vmov	s15, r3
 8001c70:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	681a      	ldr	r2, [r3, #0]
 8001c7a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001c7e:	ee17 3a90 	vmov	r3, s15
 8001c82:	6393      	str	r3, [r2, #56]	; 0x38
 8001c84:	e04e      	b.n	8001d24 <init_actuator_handler+0x1dc>
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	689b      	ldr	r3, [r3, #8]
 8001c8a:	2b08      	cmp	r3, #8
 8001c8c:	d110      	bne.n	8001cb0 <init_actuator_handler+0x168>
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c96:	ee07 3a90 	vmov	s15, r3
 8001c9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	681a      	ldr	r2, [r3, #0]
 8001ca4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001ca8:	ee17 3a90 	vmov	r3, s15
 8001cac:	63d3      	str	r3, [r2, #60]	; 0x3c
 8001cae:	e039      	b.n	8001d24 <init_actuator_handler+0x1dc>
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	689b      	ldr	r3, [r3, #8]
 8001cb4:	2b0c      	cmp	r3, #12
 8001cb6:	d110      	bne.n	8001cda <init_actuator_handler+0x192>
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cc0:	ee07 3a90 	vmov	s15, r3
 8001cc4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	681a      	ldr	r2, [r3, #0]
 8001cce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001cd2:	ee17 3a90 	vmov	r3, s15
 8001cd6:	6413      	str	r3, [r2, #64]	; 0x40
 8001cd8:	e024      	b.n	8001d24 <init_actuator_handler+0x1dc>
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	689b      	ldr	r3, [r3, #8]
 8001cde:	2b10      	cmp	r3, #16
 8001ce0:	d110      	bne.n	8001d04 <init_actuator_handler+0x1bc>
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cea:	ee07 3a90 	vmov	s15, r3
 8001cee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	681a      	ldr	r2, [r3, #0]
 8001cf8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001cfc:	ee17 3a90 	vmov	r3, s15
 8001d00:	6593      	str	r3, [r2, #88]	; 0x58
 8001d02:	e00f      	b.n	8001d24 <init_actuator_handler+0x1dc>
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d0c:	ee07 3a90 	vmov	s15, r3
 8001d10:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	681a      	ldr	r2, [r3, #0]
 8001d1a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001d1e:	ee17 3a90 	vmov	r3, s15
 8001d22:	65d3      	str	r3, [r2, #92]	; 0x5c
	__HAL_TIM_SET_COMPARE(act->htim, act->pwm_channel2, (uint32_t)(roundf(update_value)));
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	68db      	ldr	r3, [r3, #12]
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d10d      	bne.n	8001d48 <init_actuator_handler+0x200>
 8001d2c:	693b      	ldr	r3, [r7, #16]
 8001d2e:	ee07 3a90 	vmov	s15, r3
 8001d32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001d40:	ee17 2a90 	vmov	r2, s15
 8001d44:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001d46:	e054      	b.n	8001df2 <init_actuator_handler+0x2aa>
	__HAL_TIM_SET_COMPARE(act->htim, act->pwm_channel2, (uint32_t)(roundf(update_value)));
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	68db      	ldr	r3, [r3, #12]
 8001d4c:	2b04      	cmp	r3, #4
 8001d4e:	d10d      	bne.n	8001d6c <init_actuator_handler+0x224>
 8001d50:	693b      	ldr	r3, [r7, #16]
 8001d52:	ee07 3a90 	vmov	s15, r3
 8001d56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	681a      	ldr	r2, [r3, #0]
 8001d60:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001d64:	ee17 3a90 	vmov	r3, s15
 8001d68:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001d6a:	e042      	b.n	8001df2 <init_actuator_handler+0x2aa>
	__HAL_TIM_SET_COMPARE(act->htim, act->pwm_channel2, (uint32_t)(roundf(update_value)));
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	68db      	ldr	r3, [r3, #12]
 8001d70:	2b08      	cmp	r3, #8
 8001d72:	d10d      	bne.n	8001d90 <init_actuator_handler+0x248>
 8001d74:	693b      	ldr	r3, [r7, #16]
 8001d76:	ee07 3a90 	vmov	s15, r3
 8001d7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	681a      	ldr	r2, [r3, #0]
 8001d84:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001d88:	ee17 3a90 	vmov	r3, s15
 8001d8c:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8001d8e:	e030      	b.n	8001df2 <init_actuator_handler+0x2aa>
	__HAL_TIM_SET_COMPARE(act->htim, act->pwm_channel2, (uint32_t)(roundf(update_value)));
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	68db      	ldr	r3, [r3, #12]
 8001d94:	2b0c      	cmp	r3, #12
 8001d96:	d10d      	bne.n	8001db4 <init_actuator_handler+0x26c>
 8001d98:	693b      	ldr	r3, [r7, #16]
 8001d9a:	ee07 3a90 	vmov	s15, r3
 8001d9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	681a      	ldr	r2, [r3, #0]
 8001da8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001dac:	ee17 3a90 	vmov	r3, s15
 8001db0:	6413      	str	r3, [r2, #64]	; 0x40
}
 8001db2:	e01e      	b.n	8001df2 <init_actuator_handler+0x2aa>
	__HAL_TIM_SET_COMPARE(act->htim, act->pwm_channel2, (uint32_t)(roundf(update_value)));
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	68db      	ldr	r3, [r3, #12]
 8001db8:	2b10      	cmp	r3, #16
 8001dba:	d10d      	bne.n	8001dd8 <init_actuator_handler+0x290>
 8001dbc:	693b      	ldr	r3, [r7, #16]
 8001dbe:	ee07 3a90 	vmov	s15, r3
 8001dc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	681a      	ldr	r2, [r3, #0]
 8001dcc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001dd0:	ee17 3a90 	vmov	r3, s15
 8001dd4:	6593      	str	r3, [r2, #88]	; 0x58
}
 8001dd6:	e00c      	b.n	8001df2 <init_actuator_handler+0x2aa>
	__HAL_TIM_SET_COMPARE(act->htim, act->pwm_channel2, (uint32_t)(roundf(update_value)));
 8001dd8:	693b      	ldr	r3, [r7, #16]
 8001dda:	ee07 3a90 	vmov	s15, r3
 8001dde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	681a      	ldr	r2, [r3, #0]
 8001de8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001dec:	ee17 3a90 	vmov	r3, s15
 8001df0:	65d3      	str	r3, [r2, #92]	; 0x5c
}
 8001df2:	bf00      	nop
 8001df4:	3718      	adds	r7, #24
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bdb0      	pop	{r4, r5, r7, pc}
 8001dfa:	bf00      	nop
 8001dfc:	f3af 8000 	nop.w
 8001e00:	47ae147b 	.word	0x47ae147b
 8001e04:	3f847ae1 	.word	0x3f847ae1
 8001e08:	00030d40 	.word	0x00030d40
 8001e0c:	02625a00 	.word	0x02625a00

08001e10 <get_actuator_current>:

void get_actuator_current(ADC_HandleTypeDef *hadc,volatile float voltagebuf[],volatile float currentbuf[],uint8_t Channels_mask[])
{
 8001e10:	b590      	push	{r4, r7, lr}
 8001e12:	b089      	sub	sp, #36	; 0x24
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	60f8      	str	r0, [r7, #12]
 8001e18:	60b9      	str	r1, [r7, #8]
 8001e1a:	607a      	str	r2, [r7, #4]
 8001e1c:	603b      	str	r3, [r7, #0]
	volatile uint16_t adc_raw[NUM_DRIVERS];
	if(Channels_mask[0] == 1)
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	781b      	ldrb	r3, [r3, #0]
 8001e22:	2b01      	cmp	r3, #1
 8001e24:	d13e      	bne.n	8001ea4 <get_actuator_current+0x94>
	{
		ADC_Select_CH1(hadc);
 8001e26:	68f8      	ldr	r0, [r7, #12]
 8001e28:	f000 f972 	bl	8002110 <ADC_Select_CH1>
		HAL_ADC_Start(hadc);
 8001e2c:	68f8      	ldr	r0, [r7, #12]
 8001e2e:	f004 fddb 	bl	80069e8 <HAL_ADC_Start>
		if (HAL_ADC_PollForConversion(hadc, 10) != HAL_OK)
 8001e32:	210a      	movs	r1, #10
 8001e34:	68f8      	ldr	r0, [r7, #12]
 8001e36:	f004 fe6d 	bl	8006b14 <HAL_ADC_PollForConversion>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d002      	beq.n	8001e46 <get_actuator_current+0x36>
		{
			Error_Handler();
 8001e40:	f002 f80e 	bl	8003e60 <Error_Handler>
 8001e44:	e02b      	b.n	8001e9e <get_actuator_current+0x8e>
		}
		else
		{
			adc_raw[0] = HAL_ADC_GetValue(hadc);
 8001e46:	68f8      	ldr	r0, [r7, #12]
 8001e48:	f004 fef3 	bl	8006c32 <HAL_ADC_GetValue>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	b29b      	uxth	r3, r3
 8001e50:	82bb      	strh	r3, [r7, #20]
			voltagebuf[0] = (volatile float)adc_raw[0] * (3.3/(pow(2,12) - 1));
 8001e52:	8abb      	ldrh	r3, [r7, #20]
 8001e54:	b29b      	uxth	r3, r3
 8001e56:	ee07 3a90 	vmov	s15, r3
 8001e5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e5e:	ee17 0a90 	vmov	r0, s15
 8001e62:	f7fe fb79 	bl	8000558 <__aeabi_f2d>
 8001e66:	a3a2      	add	r3, pc, #648	; (adr r3, 80020f0 <get_actuator_current+0x2e0>)
 8001e68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e6c:	f7fe fbcc 	bl	8000608 <__aeabi_dmul>
 8001e70:	4602      	mov	r2, r0
 8001e72:	460b      	mov	r3, r1
 8001e74:	4610      	mov	r0, r2
 8001e76:	4619      	mov	r1, r3
 8001e78:	f7fe fe9e 	bl	8000bb8 <__aeabi_d2f>
 8001e7c:	4602      	mov	r2, r0
 8001e7e:	68bb      	ldr	r3, [r7, #8]
 8001e80:	601a      	str	r2, [r3, #0]
			currentbuf[0] = (volatile float)(voltagebuf[0]/(Rsense[0]*Aipropri));
 8001e82:	68bb      	ldr	r3, [r7, #8]
 8001e84:	edd3 6a00 	vldr	s13, [r3]
 8001e88:	ed9f 7a9b 	vldr	s14, [pc, #620]	; 80020f8 <get_actuator_current+0x2e8>
 8001e8c:	eddf 7a9b 	vldr	s15, [pc, #620]	; 80020fc <get_actuator_current+0x2ec>
 8001e90:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e94:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	edc3 7a00 	vstr	s15, [r3]
#if enable_printf
			printf("Channel 1 digits: %d,voltage value:  %f v, current value: %f A \n",adc_raw[0],voltagebuf[0],currentbuf[0]);
#endif
		}
		HAL_ADC_Stop(hadc);
 8001e9e:	68f8      	ldr	r0, [r7, #12]
 8001ea0:	f004 fe05 	bl	8006aae <HAL_ADC_Stop>
	}
	if(Channels_mask[1] == 1)
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	3301      	adds	r3, #1
 8001ea8:	781b      	ldrb	r3, [r3, #0]
 8001eaa:	2b01      	cmp	r3, #1
 8001eac:	d141      	bne.n	8001f32 <get_actuator_current+0x122>
	{
		ADC_Select_CH2(hadc);
 8001eae:	68f8      	ldr	r0, [r7, #12]
 8001eb0:	f000 f956 	bl	8002160 <ADC_Select_CH2>
		HAL_ADC_Start(hadc);
 8001eb4:	68f8      	ldr	r0, [r7, #12]
 8001eb6:	f004 fd97 	bl	80069e8 <HAL_ADC_Start>
		if (HAL_ADC_PollForConversion(hadc, 10) != HAL_OK)
 8001eba:	210a      	movs	r1, #10
 8001ebc:	68f8      	ldr	r0, [r7, #12]
 8001ebe:	f004 fe29 	bl	8006b14 <HAL_ADC_PollForConversion>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d002      	beq.n	8001ece <get_actuator_current+0xbe>
		{
			Error_Handler();
 8001ec8:	f001 ffca 	bl	8003e60 <Error_Handler>
 8001ecc:	e02e      	b.n	8001f2c <get_actuator_current+0x11c>
		}
		else
		{
			adc_raw[1] = HAL_ADC_GetValue(hadc);
 8001ece:	68f8      	ldr	r0, [r7, #12]
 8001ed0:	f004 feaf 	bl	8006c32 <HAL_ADC_GetValue>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	b29b      	uxth	r3, r3
 8001ed8:	82fb      	strh	r3, [r7, #22]
			voltagebuf[1] = (volatile float)adc_raw[1] * (3.3/(pow(2,12) - 1));
 8001eda:	8afb      	ldrh	r3, [r7, #22]
 8001edc:	b29b      	uxth	r3, r3
 8001ede:	ee07 3a90 	vmov	s15, r3
 8001ee2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001ee6:	ee17 0a90 	vmov	r0, s15
 8001eea:	f7fe fb35 	bl	8000558 <__aeabi_f2d>
 8001eee:	a380      	add	r3, pc, #512	; (adr r3, 80020f0 <get_actuator_current+0x2e0>)
 8001ef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ef4:	f7fe fb88 	bl	8000608 <__aeabi_dmul>
 8001ef8:	4602      	mov	r2, r0
 8001efa:	460b      	mov	r3, r1
 8001efc:	4610      	mov	r0, r2
 8001efe:	4619      	mov	r1, r3
 8001f00:	68bb      	ldr	r3, [r7, #8]
 8001f02:	1d1c      	adds	r4, r3, #4
 8001f04:	f7fe fe58 	bl	8000bb8 <__aeabi_d2f>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	6023      	str	r3, [r4, #0]
			currentbuf[1] = (volatile float)(voltagebuf[1]/(Rsense[1]*Aipropri));
 8001f0c:	68bb      	ldr	r3, [r7, #8]
 8001f0e:	3304      	adds	r3, #4
 8001f10:	edd3 6a00 	vldr	s13, [r3]
 8001f14:	ed9f 7a7a 	vldr	s14, [pc, #488]	; 8002100 <get_actuator_current+0x2f0>
 8001f18:	eddf 7a78 	vldr	s15, [pc, #480]	; 80020fc <get_actuator_current+0x2ec>
 8001f1c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	3304      	adds	r3, #4
 8001f24:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001f28:	edc3 7a00 	vstr	s15, [r3]
#if enable_printf
			printf("Channel 2 digits: %d,voltage value:  %f v, current value: %f A \n",adc_raw[1],voltagebuf[1],currentbuf[1]);
#endif
		}
		HAL_ADC_Stop(hadc);
 8001f2c:	68f8      	ldr	r0, [r7, #12]
 8001f2e:	f004 fdbe 	bl	8006aae <HAL_ADC_Stop>
	}
	if(Channels_mask[2] == 1)
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	3302      	adds	r3, #2
 8001f36:	781b      	ldrb	r3, [r3, #0]
 8001f38:	2b01      	cmp	r3, #1
 8001f3a:	d142      	bne.n	8001fc2 <get_actuator_current+0x1b2>
	{
		ADC_Select_CH3(hadc);
 8001f3c:	68f8      	ldr	r0, [r7, #12]
 8001f3e:	f000 f937 	bl	80021b0 <ADC_Select_CH3>
		HAL_ADC_Start(hadc);
 8001f42:	68f8      	ldr	r0, [r7, #12]
 8001f44:	f004 fd50 	bl	80069e8 <HAL_ADC_Start>
		if (HAL_ADC_PollForConversion(hadc, 10) != HAL_OK)
 8001f48:	210a      	movs	r1, #10
 8001f4a:	68f8      	ldr	r0, [r7, #12]
 8001f4c:	f004 fde2 	bl	8006b14 <HAL_ADC_PollForConversion>
 8001f50:	4603      	mov	r3, r0
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d002      	beq.n	8001f5c <get_actuator_current+0x14c>
		{
			Error_Handler();
 8001f56:	f001 ff83 	bl	8003e60 <Error_Handler>
 8001f5a:	e02f      	b.n	8001fbc <get_actuator_current+0x1ac>
		}
		else
		{
			adc_raw[2] = HAL_ADC_GetValue(hadc);
 8001f5c:	68f8      	ldr	r0, [r7, #12]
 8001f5e:	f004 fe68 	bl	8006c32 <HAL_ADC_GetValue>
 8001f62:	4603      	mov	r3, r0
 8001f64:	b29b      	uxth	r3, r3
 8001f66:	833b      	strh	r3, [r7, #24]
			voltagebuf[2] = (volatile float)adc_raw[2] * (3.3/(pow(2,12) - 1));
 8001f68:	8b3b      	ldrh	r3, [r7, #24]
 8001f6a:	b29b      	uxth	r3, r3
 8001f6c:	ee07 3a90 	vmov	s15, r3
 8001f70:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f74:	ee17 0a90 	vmov	r0, s15
 8001f78:	f7fe faee 	bl	8000558 <__aeabi_f2d>
 8001f7c:	a35c      	add	r3, pc, #368	; (adr r3, 80020f0 <get_actuator_current+0x2e0>)
 8001f7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f82:	f7fe fb41 	bl	8000608 <__aeabi_dmul>
 8001f86:	4602      	mov	r2, r0
 8001f88:	460b      	mov	r3, r1
 8001f8a:	4610      	mov	r0, r2
 8001f8c:	4619      	mov	r1, r3
 8001f8e:	68bb      	ldr	r3, [r7, #8]
 8001f90:	f103 0408 	add.w	r4, r3, #8
 8001f94:	f7fe fe10 	bl	8000bb8 <__aeabi_d2f>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	6023      	str	r3, [r4, #0]
			currentbuf[2] = (volatile float)(voltagebuf[2]/(Rsense[2]*Aipropri));
 8001f9c:	68bb      	ldr	r3, [r7, #8]
 8001f9e:	3308      	adds	r3, #8
 8001fa0:	edd3 6a00 	vldr	s13, [r3]
 8001fa4:	ed9f 7a57 	vldr	s14, [pc, #348]	; 8002104 <get_actuator_current+0x2f4>
 8001fa8:	eddf 7a54 	vldr	s15, [pc, #336]	; 80020fc <get_actuator_current+0x2ec>
 8001fac:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	3308      	adds	r3, #8
 8001fb4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001fb8:	edc3 7a00 	vstr	s15, [r3]
#if enable_printf
			printf("Channel 3 digits: %d,voltage value:  %f v, current value: %f A \n",adc_raw[2],voltagebuf[2],currentbuf[2]);
#endif
		}
		HAL_ADC_Stop(hadc);
 8001fbc:	68f8      	ldr	r0, [r7, #12]
 8001fbe:	f004 fd76 	bl	8006aae <HAL_ADC_Stop>
	}
	if(Channels_mask[3] == 1)
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	3303      	adds	r3, #3
 8001fc6:	781b      	ldrb	r3, [r3, #0]
 8001fc8:	2b01      	cmp	r3, #1
 8001fca:	d142      	bne.n	8002052 <get_actuator_current+0x242>
	{
		ADC_Select_CH4(hadc);
 8001fcc:	68f8      	ldr	r0, [r7, #12]
 8001fce:	f000 f917 	bl	8002200 <ADC_Select_CH4>
		HAL_ADC_Start(hadc);
 8001fd2:	68f8      	ldr	r0, [r7, #12]
 8001fd4:	f004 fd08 	bl	80069e8 <HAL_ADC_Start>
		if (HAL_ADC_PollForConversion(hadc, 10) != HAL_OK)
 8001fd8:	210a      	movs	r1, #10
 8001fda:	68f8      	ldr	r0, [r7, #12]
 8001fdc:	f004 fd9a 	bl	8006b14 <HAL_ADC_PollForConversion>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d002      	beq.n	8001fec <get_actuator_current+0x1dc>
		{
			Error_Handler();
 8001fe6:	f001 ff3b 	bl	8003e60 <Error_Handler>
 8001fea:	e02f      	b.n	800204c <get_actuator_current+0x23c>
		}
		else
		{
			adc_raw[3] = HAL_ADC_GetValue(hadc);
 8001fec:	68f8      	ldr	r0, [r7, #12]
 8001fee:	f004 fe20 	bl	8006c32 <HAL_ADC_GetValue>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	b29b      	uxth	r3, r3
 8001ff6:	837b      	strh	r3, [r7, #26]
			voltagebuf[3] = (volatile float)adc_raw[3] * (3.3/(pow(2,12) - 1));
 8001ff8:	8b7b      	ldrh	r3, [r7, #26]
 8001ffa:	b29b      	uxth	r3, r3
 8001ffc:	ee07 3a90 	vmov	s15, r3
 8002000:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002004:	ee17 0a90 	vmov	r0, s15
 8002008:	f7fe faa6 	bl	8000558 <__aeabi_f2d>
 800200c:	a338      	add	r3, pc, #224	; (adr r3, 80020f0 <get_actuator_current+0x2e0>)
 800200e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002012:	f7fe faf9 	bl	8000608 <__aeabi_dmul>
 8002016:	4602      	mov	r2, r0
 8002018:	460b      	mov	r3, r1
 800201a:	4610      	mov	r0, r2
 800201c:	4619      	mov	r1, r3
 800201e:	68bb      	ldr	r3, [r7, #8]
 8002020:	f103 040c 	add.w	r4, r3, #12
 8002024:	f7fe fdc8 	bl	8000bb8 <__aeabi_d2f>
 8002028:	4603      	mov	r3, r0
 800202a:	6023      	str	r3, [r4, #0]
			currentbuf[3] = (volatile float)(voltagebuf[3]/(Rsense[3]*Aipropri));
 800202c:	68bb      	ldr	r3, [r7, #8]
 800202e:	330c      	adds	r3, #12
 8002030:	edd3 6a00 	vldr	s13, [r3]
 8002034:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8002108 <get_actuator_current+0x2f8>
 8002038:	eddf 7a30 	vldr	s15, [pc, #192]	; 80020fc <get_actuator_current+0x2ec>
 800203c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	330c      	adds	r3, #12
 8002044:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002048:	edc3 7a00 	vstr	s15, [r3]
#if enable_printf
			printf("Channel 4 digits: %d,voltage value:  %f v, current value: %f A \n",adc_raw[3],voltagebuf[3],currentbuf[3]);
#endif
		}
		HAL_ADC_Stop(hadc);
 800204c:	68f8      	ldr	r0, [r7, #12]
 800204e:	f004 fd2e 	bl	8006aae <HAL_ADC_Stop>
	}
	if(Channels_mask[4] == 1)
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	3304      	adds	r3, #4
 8002056:	781b      	ldrb	r3, [r3, #0]
 8002058:	2b01      	cmp	r3, #1
 800205a:	d142      	bne.n	80020e2 <get_actuator_current+0x2d2>
	{
		ADC_Select_CH16(hadc);
 800205c:	68f8      	ldr	r0, [r7, #12]
 800205e:	f000 f8f7 	bl	8002250 <ADC_Select_CH16>
		HAL_ADC_Start(hadc);
 8002062:	68f8      	ldr	r0, [r7, #12]
 8002064:	f004 fcc0 	bl	80069e8 <HAL_ADC_Start>
		if (HAL_ADC_PollForConversion(hadc,10) != HAL_OK)
 8002068:	210a      	movs	r1, #10
 800206a:	68f8      	ldr	r0, [r7, #12]
 800206c:	f004 fd52 	bl	8006b14 <HAL_ADC_PollForConversion>
 8002070:	4603      	mov	r3, r0
 8002072:	2b00      	cmp	r3, #0
 8002074:	d002      	beq.n	800207c <get_actuator_current+0x26c>
		{
			Error_Handler();
 8002076:	f001 fef3 	bl	8003e60 <Error_Handler>
 800207a:	e02f      	b.n	80020dc <get_actuator_current+0x2cc>
		}
		else
		{
			adc_raw[4] = HAL_ADC_GetValue(hadc);
 800207c:	68f8      	ldr	r0, [r7, #12]
 800207e:	f004 fdd8 	bl	8006c32 <HAL_ADC_GetValue>
 8002082:	4603      	mov	r3, r0
 8002084:	b29b      	uxth	r3, r3
 8002086:	83bb      	strh	r3, [r7, #28]
			voltagebuf[4] = (volatile float)adc_raw[4] * (3.3/(pow(2,12) - 1));
 8002088:	8bbb      	ldrh	r3, [r7, #28]
 800208a:	b29b      	uxth	r3, r3
 800208c:	ee07 3a90 	vmov	s15, r3
 8002090:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002094:	ee17 0a90 	vmov	r0, s15
 8002098:	f7fe fa5e 	bl	8000558 <__aeabi_f2d>
 800209c:	a314      	add	r3, pc, #80	; (adr r3, 80020f0 <get_actuator_current+0x2e0>)
 800209e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020a2:	f7fe fab1 	bl	8000608 <__aeabi_dmul>
 80020a6:	4602      	mov	r2, r0
 80020a8:	460b      	mov	r3, r1
 80020aa:	4610      	mov	r0, r2
 80020ac:	4619      	mov	r1, r3
 80020ae:	68bb      	ldr	r3, [r7, #8]
 80020b0:	f103 0410 	add.w	r4, r3, #16
 80020b4:	f7fe fd80 	bl	8000bb8 <__aeabi_d2f>
 80020b8:	4603      	mov	r3, r0
 80020ba:	6023      	str	r3, [r4, #0]
			currentbuf[4] = (volatile float)(voltagebuf[4]/(Rsense[4]*Aipropri));
 80020bc:	68bb      	ldr	r3, [r7, #8]
 80020be:	3310      	adds	r3, #16
 80020c0:	edd3 6a00 	vldr	s13, [r3]
 80020c4:	ed9f 7a11 	vldr	s14, [pc, #68]	; 800210c <get_actuator_current+0x2fc>
 80020c8:	eddf 7a0c 	vldr	s15, [pc, #48]	; 80020fc <get_actuator_current+0x2ec>
 80020cc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	3310      	adds	r3, #16
 80020d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80020d8:	edc3 7a00 	vstr	s15, [r3]
#if enable_printf
			printf("Channel 16 digits: %d,voltage value:  %f v, current value: %f A \n",adc_raw[4],voltagebuf[4],currentbuf[4]);
#endif
		}
		HAL_ADC_Stop(hadc);
 80020dc:	68f8      	ldr	r0, [r7, #12]
 80020de:	f004 fce6 	bl	8006aae <HAL_ADC_Stop>
	}
}
 80020e2:	bf00      	nop
 80020e4:	3724      	adds	r7, #36	; 0x24
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bd90      	pop	{r4, r7, pc}
 80020ea:	bf00      	nop
 80020ec:	f3af 8000 	nop.w
 80020f0:	e734d9b4 	.word	0xe734d9b4
 80020f4:	3f4a680c 	.word	0x3f4a680c
 80020f8:	44f6a000 	.word	0x44f6a000
 80020fc:	3ace703b 	.word	0x3ace703b
 8002100:	44fd8000 	.word	0x44fd8000
 8002104:	44f54000 	.word	0x44f54000
 8002108:	44f90000 	.word	0x44f90000
 800210c:	44f76000 	.word	0x44f76000

08002110 <ADC_Select_CH1>:
	printf("PWM signals stopped !! \n");
#endif
}

void ADC_Select_CH1 (ADC_HandleTypeDef *hadc)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b088      	sub	sp, #32
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
	  ADC_ChannelConfTypeDef sConfig = {0};
 8002118:	f107 0308 	add.w	r3, r7, #8
 800211c:	2200      	movs	r2, #0
 800211e:	601a      	str	r2, [r3, #0]
 8002120:	605a      	str	r2, [r3, #4]
 8002122:	609a      	str	r2, [r3, #8]
 8002124:	60da      	str	r2, [r3, #12]
 8002126:	611a      	str	r2, [r3, #16]
 8002128:	615a      	str	r2, [r3, #20]
	  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	  */
	  sConfig.Channel = ADC_CHANNEL_1;
 800212a:	4b0c      	ldr	r3, [pc, #48]	; (800215c <ADC_Select_CH1+0x4c>)
 800212c:	60bb      	str	r3, [r7, #8]
	  sConfig.Rank = ADC_REGULAR_RANK_1;
 800212e:	2306      	movs	r3, #6
 8002130:	60fb      	str	r3, [r7, #12]
	  sConfig.SamplingTime = ADC_SAMPLETIME_247CYCLES_5;
 8002132:	2306      	movs	r3, #6
 8002134:	613b      	str	r3, [r7, #16]
	  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002136:	237f      	movs	r3, #127	; 0x7f
 8002138:	617b      	str	r3, [r7, #20]
	  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800213a:	2304      	movs	r3, #4
 800213c:	61bb      	str	r3, [r7, #24]
	  if (HAL_ADC_ConfigChannel(hadc, &sConfig) != HAL_OK)
 800213e:	f107 0308 	add.w	r3, r7, #8
 8002142:	4619      	mov	r1, r3
 8002144:	6878      	ldr	r0, [r7, #4]
 8002146:	f004 fd81 	bl	8006c4c <HAL_ADC_ConfigChannel>
 800214a:	4603      	mov	r3, r0
 800214c:	2b00      	cmp	r3, #0
 800214e:	d001      	beq.n	8002154 <ADC_Select_CH1+0x44>
	  {
	    Error_Handler();
 8002150:	f001 fe86 	bl	8003e60 <Error_Handler>
	  }
}
 8002154:	bf00      	nop
 8002156:	3720      	adds	r7, #32
 8002158:	46bd      	mov	sp, r7
 800215a:	bd80      	pop	{r7, pc}
 800215c:	04300002 	.word	0x04300002

08002160 <ADC_Select_CH2>:

void ADC_Select_CH2 (ADC_HandleTypeDef *hadc)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b088      	sub	sp, #32
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
	ADC_ChannelConfTypeDef sConfig = {0};
 8002168:	f107 0308 	add.w	r3, r7, #8
 800216c:	2200      	movs	r2, #0
 800216e:	601a      	str	r2, [r3, #0]
 8002170:	605a      	str	r2, [r3, #4]
 8002172:	609a      	str	r2, [r3, #8]
 8002174:	60da      	str	r2, [r3, #12]
 8002176:	611a      	str	r2, [r3, #16]
 8002178:	615a      	str	r2, [r3, #20]
	  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	  */
	  sConfig.Channel = ADC_CHANNEL_2;
 800217a:	4b0c      	ldr	r3, [pc, #48]	; (80021ac <ADC_Select_CH2+0x4c>)
 800217c:	60bb      	str	r3, [r7, #8]
	  sConfig.Rank = ADC_REGULAR_RANK_1;
 800217e:	2306      	movs	r3, #6
 8002180:	60fb      	str	r3, [r7, #12]
	  sConfig.SamplingTime = ADC_SAMPLETIME_247CYCLES_5 ;
 8002182:	2306      	movs	r3, #6
 8002184:	613b      	str	r3, [r7, #16]
	  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002186:	237f      	movs	r3, #127	; 0x7f
 8002188:	617b      	str	r3, [r7, #20]
	  	  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800218a:	2304      	movs	r3, #4
 800218c:	61bb      	str	r3, [r7, #24]
	  if (HAL_ADC_ConfigChannel(hadc, &sConfig) != HAL_OK)
 800218e:	f107 0308 	add.w	r3, r7, #8
 8002192:	4619      	mov	r1, r3
 8002194:	6878      	ldr	r0, [r7, #4]
 8002196:	f004 fd59 	bl	8006c4c <HAL_ADC_ConfigChannel>
 800219a:	4603      	mov	r3, r0
 800219c:	2b00      	cmp	r3, #0
 800219e:	d001      	beq.n	80021a4 <ADC_Select_CH2+0x44>
	  {
	    Error_Handler();
 80021a0:	f001 fe5e 	bl	8003e60 <Error_Handler>
	  }
}
 80021a4:	bf00      	nop
 80021a6:	3720      	adds	r7, #32
 80021a8:	46bd      	mov	sp, r7
 80021aa:	bd80      	pop	{r7, pc}
 80021ac:	08600004 	.word	0x08600004

080021b0 <ADC_Select_CH3>:

void ADC_Select_CH3 (ADC_HandleTypeDef *hadc)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b088      	sub	sp, #32
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
	ADC_ChannelConfTypeDef sConfig = {0};
 80021b8:	f107 0308 	add.w	r3, r7, #8
 80021bc:	2200      	movs	r2, #0
 80021be:	601a      	str	r2, [r3, #0]
 80021c0:	605a      	str	r2, [r3, #4]
 80021c2:	609a      	str	r2, [r3, #8]
 80021c4:	60da      	str	r2, [r3, #12]
 80021c6:	611a      	str	r2, [r3, #16]
 80021c8:	615a      	str	r2, [r3, #20]
	  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	  */
	  sConfig.Channel = ADC_CHANNEL_3;
 80021ca:	4b0c      	ldr	r3, [pc, #48]	; (80021fc <ADC_Select_CH3+0x4c>)
 80021cc:	60bb      	str	r3, [r7, #8]
	  sConfig.Rank = ADC_REGULAR_RANK_1;
 80021ce:	2306      	movs	r3, #6
 80021d0:	60fb      	str	r3, [r7, #12]
	  sConfig.SamplingTime = ADC_SAMPLETIME_247CYCLES_5;
 80021d2:	2306      	movs	r3, #6
 80021d4:	613b      	str	r3, [r7, #16]
	  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80021d6:	237f      	movs	r3, #127	; 0x7f
 80021d8:	617b      	str	r3, [r7, #20]
	  	  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80021da:	2304      	movs	r3, #4
 80021dc:	61bb      	str	r3, [r7, #24]
	  if (HAL_ADC_ConfigChannel(hadc, &sConfig) != HAL_OK)
 80021de:	f107 0308 	add.w	r3, r7, #8
 80021e2:	4619      	mov	r1, r3
 80021e4:	6878      	ldr	r0, [r7, #4]
 80021e6:	f004 fd31 	bl	8006c4c <HAL_ADC_ConfigChannel>
 80021ea:	4603      	mov	r3, r0
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d001      	beq.n	80021f4 <ADC_Select_CH3+0x44>
	  {
	    Error_Handler();
 80021f0:	f001 fe36 	bl	8003e60 <Error_Handler>
	  }
}
 80021f4:	bf00      	nop
 80021f6:	3720      	adds	r7, #32
 80021f8:	46bd      	mov	sp, r7
 80021fa:	bd80      	pop	{r7, pc}
 80021fc:	0c900008 	.word	0x0c900008

08002200 <ADC_Select_CH4>:

void ADC_Select_CH4 (ADC_HandleTypeDef *hadc)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b088      	sub	sp, #32
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
	ADC_ChannelConfTypeDef sConfig = {0};
 8002208:	f107 0308 	add.w	r3, r7, #8
 800220c:	2200      	movs	r2, #0
 800220e:	601a      	str	r2, [r3, #0]
 8002210:	605a      	str	r2, [r3, #4]
 8002212:	609a      	str	r2, [r3, #8]
 8002214:	60da      	str	r2, [r3, #12]
 8002216:	611a      	str	r2, [r3, #16]
 8002218:	615a      	str	r2, [r3, #20]
	  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	  */
	  sConfig.Channel = ADC_CHANNEL_4;
 800221a:	4b0c      	ldr	r3, [pc, #48]	; (800224c <ADC_Select_CH4+0x4c>)
 800221c:	60bb      	str	r3, [r7, #8]
	  sConfig.Rank = ADC_REGULAR_RANK_1;
 800221e:	2306      	movs	r3, #6
 8002220:	60fb      	str	r3, [r7, #12]
	  sConfig.SamplingTime = ADC_SAMPLETIME_247CYCLES_5;
 8002222:	2306      	movs	r3, #6
 8002224:	613b      	str	r3, [r7, #16]
	  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002226:	237f      	movs	r3, #127	; 0x7f
 8002228:	617b      	str	r3, [r7, #20]
	  	  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800222a:	2304      	movs	r3, #4
 800222c:	61bb      	str	r3, [r7, #24]
	  if (HAL_ADC_ConfigChannel(hadc, &sConfig) != HAL_OK)
 800222e:	f107 0308 	add.w	r3, r7, #8
 8002232:	4619      	mov	r1, r3
 8002234:	6878      	ldr	r0, [r7, #4]
 8002236:	f004 fd09 	bl	8006c4c <HAL_ADC_ConfigChannel>
 800223a:	4603      	mov	r3, r0
 800223c:	2b00      	cmp	r3, #0
 800223e:	d001      	beq.n	8002244 <ADC_Select_CH4+0x44>
	  {
	    Error_Handler();
 8002240:	f001 fe0e 	bl	8003e60 <Error_Handler>
	  }
}
 8002244:	bf00      	nop
 8002246:	3720      	adds	r7, #32
 8002248:	46bd      	mov	sp, r7
 800224a:	bd80      	pop	{r7, pc}
 800224c:	10c00010 	.word	0x10c00010

08002250 <ADC_Select_CH16>:

void ADC_Select_CH16 (ADC_HandleTypeDef *hadc)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b088      	sub	sp, #32
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
	ADC_ChannelConfTypeDef sConfig = {0};
 8002258:	f107 0308 	add.w	r3, r7, #8
 800225c:	2200      	movs	r2, #0
 800225e:	601a      	str	r2, [r3, #0]
 8002260:	605a      	str	r2, [r3, #4]
 8002262:	609a      	str	r2, [r3, #8]
 8002264:	60da      	str	r2, [r3, #12]
 8002266:	611a      	str	r2, [r3, #16]
 8002268:	615a      	str	r2, [r3, #20]
	  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	  */
	  sConfig.Channel = ADC_CHANNEL_16;
 800226a:	4b0c      	ldr	r3, [pc, #48]	; (800229c <ADC_Select_CH16+0x4c>)
 800226c:	60bb      	str	r3, [r7, #8]
	  sConfig.Rank = ADC_REGULAR_RANK_1;
 800226e:	2306      	movs	r3, #6
 8002270:	60fb      	str	r3, [r7, #12]
	  sConfig.SamplingTime = ADC_SAMPLETIME_247CYCLES_5 ;sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002272:	2306      	movs	r3, #6
 8002274:	613b      	str	r3, [r7, #16]
 8002276:	237f      	movs	r3, #127	; 0x7f
 8002278:	617b      	str	r3, [r7, #20]
	  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800227a:	2304      	movs	r3, #4
 800227c:	61bb      	str	r3, [r7, #24]
	  if (HAL_ADC_ConfigChannel(hadc, &sConfig) != HAL_OK)
 800227e:	f107 0308 	add.w	r3, r7, #8
 8002282:	4619      	mov	r1, r3
 8002284:	6878      	ldr	r0, [r7, #4]
 8002286:	f004 fce1 	bl	8006c4c <HAL_ADC_ConfigChannel>
 800228a:	4603      	mov	r3, r0
 800228c:	2b00      	cmp	r3, #0
 800228e:	d001      	beq.n	8002294 <ADC_Select_CH16+0x44>
	  {
	    Error_Handler();
 8002290:	f001 fde6 	bl	8003e60 <Error_Handler>
	  }
}
 8002294:	bf00      	nop
 8002296:	3720      	adds	r7, #32
 8002298:	46bd      	mov	sp, r7
 800229a:	bd80      	pop	{r7, pc}
 800229c:	43210000 	.word	0x43210000

080022a0 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b086      	sub	sp, #24
 80022a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80022a6:	463b      	mov	r3, r7
 80022a8:	2200      	movs	r2, #0
 80022aa:	601a      	str	r2, [r3, #0]
 80022ac:	605a      	str	r2, [r3, #4]
 80022ae:	609a      	str	r2, [r3, #8]
 80022b0:	60da      	str	r2, [r3, #12]
 80022b2:	611a      	str	r2, [r3, #16]
 80022b4:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80022b6:	4b24      	ldr	r3, [pc, #144]	; (8002348 <MX_ADC1_Init+0xa8>)
 80022b8:	4a24      	ldr	r2, [pc, #144]	; (800234c <MX_ADC1_Init+0xac>)
 80022ba:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 80022bc:	4b22      	ldr	r3, [pc, #136]	; (8002348 <MX_ADC1_Init+0xa8>)
 80022be:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80022c2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80022c4:	4b20      	ldr	r3, [pc, #128]	; (8002348 <MX_ADC1_Init+0xa8>)
 80022c6:	2200      	movs	r2, #0
 80022c8:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80022ca:	4b1f      	ldr	r3, [pc, #124]	; (8002348 <MX_ADC1_Init+0xa8>)
 80022cc:	2200      	movs	r2, #0
 80022ce:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80022d0:	4b1d      	ldr	r3, [pc, #116]	; (8002348 <MX_ADC1_Init+0xa8>)
 80022d2:	2201      	movs	r2, #1
 80022d4:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80022d6:	4b1c      	ldr	r3, [pc, #112]	; (8002348 <MX_ADC1_Init+0xa8>)
 80022d8:	2204      	movs	r2, #4
 80022da:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80022dc:	4b1a      	ldr	r3, [pc, #104]	; (8002348 <MX_ADC1_Init+0xa8>)
 80022de:	2200      	movs	r2, #0
 80022e0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80022e2:	4b19      	ldr	r3, [pc, #100]	; (8002348 <MX_ADC1_Init+0xa8>)
 80022e4:	2201      	movs	r2, #1
 80022e6:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80022e8:	4b17      	ldr	r3, [pc, #92]	; (8002348 <MX_ADC1_Init+0xa8>)
 80022ea:	2201      	movs	r2, #1
 80022ec:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80022ee:	4b16      	ldr	r3, [pc, #88]	; (8002348 <MX_ADC1_Init+0xa8>)
 80022f0:	2200      	movs	r2, #0
 80022f2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80022f6:	4b14      	ldr	r3, [pc, #80]	; (8002348 <MX_ADC1_Init+0xa8>)
 80022f8:	2200      	movs	r2, #0
 80022fa:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80022fc:	4b12      	ldr	r3, [pc, #72]	; (8002348 <MX_ADC1_Init+0xa8>)
 80022fe:	2200      	movs	r2, #0
 8002300:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002302:	4b11      	ldr	r3, [pc, #68]	; (8002348 <MX_ADC1_Init+0xa8>)
 8002304:	2200      	movs	r2, #0
 8002306:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800230a:	4b0f      	ldr	r3, [pc, #60]	; (8002348 <MX_ADC1_Init+0xa8>)
 800230c:	2200      	movs	r2, #0
 800230e:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = ENABLE;
 8002310:	4b0d      	ldr	r3, [pc, #52]	; (8002348 <MX_ADC1_Init+0xa8>)
 8002312:	2201      	movs	r2, #1
 8002314:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_16;
 8002318:	4b0b      	ldr	r3, [pc, #44]	; (8002348 <MX_ADC1_Init+0xa8>)
 800231a:	220c      	movs	r2, #12
 800231c:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_4;
 800231e:	4b0a      	ldr	r3, [pc, #40]	; (8002348 <MX_ADC1_Init+0xa8>)
 8002320:	2280      	movs	r2, #128	; 0x80
 8002322:	641a      	str	r2, [r3, #64]	; 0x40
  hadc1.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 8002324:	4b08      	ldr	r3, [pc, #32]	; (8002348 <MX_ADC1_Init+0xa8>)
 8002326:	2200      	movs	r2, #0
 8002328:	645a      	str	r2, [r3, #68]	; 0x44
  hadc1.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 800232a:	4b07      	ldr	r3, [pc, #28]	; (8002348 <MX_ADC1_Init+0xa8>)
 800232c:	2201      	movs	r2, #1
 800232e:	649a      	str	r2, [r3, #72]	; 0x48
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002330:	4805      	ldr	r0, [pc, #20]	; (8002348 <MX_ADC1_Init+0xa8>)
 8002332:	f004 fa0d 	bl	8006750 <HAL_ADC_Init>
 8002336:	4603      	mov	r3, r0
 8002338:	2b00      	cmp	r3, #0
 800233a:	d001      	beq.n	8002340 <MX_ADC1_Init+0xa0>
  {
    Error_Handler();
 800233c:	f001 fd90 	bl	8003e60 <Error_Handler>
//  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002340:	bf00      	nop
 8002342:	3718      	adds	r7, #24
 8002344:	46bd      	mov	sp, r7
 8002346:	bd80      	pop	{r7, pc}
 8002348:	2000499c 	.word	0x2000499c
 800234c:	50040000 	.word	0x50040000

08002350 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b0a4      	sub	sp, #144	; 0x90
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002358:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800235c:	2200      	movs	r2, #0
 800235e:	601a      	str	r2, [r3, #0]
 8002360:	605a      	str	r2, [r3, #4]
 8002362:	609a      	str	r2, [r3, #8]
 8002364:	60da      	str	r2, [r3, #12]
 8002366:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002368:	f107 0314 	add.w	r3, r7, #20
 800236c:	2268      	movs	r2, #104	; 0x68
 800236e:	2100      	movs	r1, #0
 8002370:	4618      	mov	r0, r3
 8002372:	f00d f921 	bl	800f5b8 <memset>
  if(adcHandle->Instance==ADC1)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4a33      	ldr	r2, [pc, #204]	; (8002448 <HAL_ADC_MspInit+0xf8>)
 800237c:	4293      	cmp	r3, r2
 800237e:	d15e      	bne.n	800243e <HAL_ADC_MspInit+0xee>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8002380:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002384:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8002386:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800238a:	673b      	str	r3, [r7, #112]	; 0x70
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 800238c:	2302      	movs	r3, #2
 800238e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8002390:	2301      	movs	r3, #1
 8002392:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8002394:	2308      	movs	r3, #8
 8002396:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8002398:	2307      	movs	r3, #7
 800239a:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800239c:	2302      	movs	r3, #2
 800239e:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV4;
 80023a0:	2304      	movs	r3, #4
 80023a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80023a4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80023a8:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80023aa:	f107 0314 	add.w	r3, r7, #20
 80023ae:	4618      	mov	r0, r3
 80023b0:	f006 fd34 	bl	8008e1c <HAL_RCCEx_PeriphCLKConfig>
 80023b4:	4603      	mov	r3, r0
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d001      	beq.n	80023be <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 80023ba:	f001 fd51 	bl	8003e60 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80023be:	4b23      	ldr	r3, [pc, #140]	; (800244c <HAL_ADC_MspInit+0xfc>)
 80023c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023c2:	4a22      	ldr	r2, [pc, #136]	; (800244c <HAL_ADC_MspInit+0xfc>)
 80023c4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80023c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80023ca:	4b20      	ldr	r3, [pc, #128]	; (800244c <HAL_ADC_MspInit+0xfc>)
 80023cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023ce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80023d2:	613b      	str	r3, [r7, #16]
 80023d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80023d6:	4b1d      	ldr	r3, [pc, #116]	; (800244c <HAL_ADC_MspInit+0xfc>)
 80023d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023da:	4a1c      	ldr	r2, [pc, #112]	; (800244c <HAL_ADC_MspInit+0xfc>)
 80023dc:	f043 0304 	orr.w	r3, r3, #4
 80023e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80023e2:	4b1a      	ldr	r3, [pc, #104]	; (800244c <HAL_ADC_MspInit+0xfc>)
 80023e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023e6:	f003 0304 	and.w	r3, r3, #4
 80023ea:	60fb      	str	r3, [r7, #12]
 80023ec:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023ee:	4b17      	ldr	r3, [pc, #92]	; (800244c <HAL_ADC_MspInit+0xfc>)
 80023f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023f2:	4a16      	ldr	r2, [pc, #88]	; (800244c <HAL_ADC_MspInit+0xfc>)
 80023f4:	f043 0302 	orr.w	r3, r3, #2
 80023f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80023fa:	4b14      	ldr	r3, [pc, #80]	; (800244c <HAL_ADC_MspInit+0xfc>)
 80023fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023fe:	f003 0302 	and.w	r3, r3, #2
 8002402:	60bb      	str	r3, [r7, #8]
 8002404:	68bb      	ldr	r3, [r7, #8]
    PC1     ------> ADC1_IN2
    PC2     ------> ADC1_IN3
    PC3     ------> ADC1_IN4
    PB1     ------> ADC1_IN16
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8002406:	230f      	movs	r3, #15
 8002408:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800240a:	230b      	movs	r3, #11
 800240c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002410:	2300      	movs	r3, #0
 8002412:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002416:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800241a:	4619      	mov	r1, r3
 800241c:	480c      	ldr	r0, [pc, #48]	; (8002450 <HAL_ADC_MspInit+0x100>)
 800241e:	f005 fc9d 	bl	8007d5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002422:	2302      	movs	r3, #2
 8002424:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8002426:	230b      	movs	r3, #11
 8002428:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800242c:	2300      	movs	r3, #0
 800242e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002432:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002436:	4619      	mov	r1, r3
 8002438:	4806      	ldr	r0, [pc, #24]	; (8002454 <HAL_ADC_MspInit+0x104>)
 800243a:	f005 fc8f 	bl	8007d5c <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800243e:	bf00      	nop
 8002440:	3790      	adds	r7, #144	; 0x90
 8002442:	46bd      	mov	sp, r7
 8002444:	bd80      	pop	{r7, pc}
 8002446:	bf00      	nop
 8002448:	50040000 	.word	0x50040000
 800244c:	40021000 	.word	0x40021000
 8002450:	48000800 	.word	0x48000800
 8002454:	48000400 	.word	0x48000400

08002458 <cBuffInit>:
	if(handle==NULL) return 0;

	return (handle->elemNum == 0);
}

void cBuffInit(circular_buffer_handle* handle, uint8_t* buff, uint32_t buffLen, uint32_t elemNum){
 8002458:	b480      	push	{r7}
 800245a:	b085      	sub	sp, #20
 800245c:	af00      	add	r7, sp, #0
 800245e:	60f8      	str	r0, [r7, #12]
 8002460:	60b9      	str	r1, [r7, #8]
 8002462:	607a      	str	r2, [r7, #4]
 8002464:	603b      	str	r3, [r7, #0]
	if(handle== NULL || buff==NULL) return;
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	2b00      	cmp	r3, #0
 800246a:	d00f      	beq.n	800248c <cBuffInit+0x34>
 800246c:	68bb      	ldr	r3, [r7, #8]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d00c      	beq.n	800248c <cBuffInit+0x34>

	handle->buff=buff;
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	68ba      	ldr	r2, [r7, #8]
 8002476:	601a      	str	r2, [r3, #0]
	handle->buffLen=buffLen;
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	687a      	ldr	r2, [r7, #4]
 800247c:	605a      	str	r2, [r3, #4]
	handle->startIndex=0;
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	2200      	movs	r2, #0
 8002482:	60da      	str	r2, [r3, #12]
	handle->elemNum=elemNum;
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	683a      	ldr	r2, [r7, #0]
 8002488:	609a      	str	r2, [r3, #8]

	return;
 800248a:	e000      	b.n	800248e <cBuffInit+0x36>
	if(handle== NULL || buff==NULL) return;
 800248c:	bf00      	nop
}
 800248e:	3714      	adds	r7, #20
 8002490:	46bd      	mov	sp, r7
 8002492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002496:	4770      	bx	lr

08002498 <cBuffGetVirtIndex>:
		printf("\n");

}
#endif

uint32_t cBuffGetVirtIndex(circular_buffer_handle* handle,uint32_t memIndex){
 8002498:	b480      	push	{r7}
 800249a:	b083      	sub	sp, #12
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
 80024a0:	6039      	str	r1, [r7, #0]
	//special case when startIndex==0 is not critical but present to speed-up execution
	//of plain buffer functions based on circular buffer functions
	if(handle==NULL || handle->buffLen==0) return memIndex;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d003      	beq.n	80024b0 <cBuffGetVirtIndex+0x18>
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d101      	bne.n	80024b4 <cBuffGetVirtIndex+0x1c>
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	e019      	b.n	80024e8 <cBuffGetVirtIndex+0x50>

	memIndex=memIndex % handle->buffLen;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	685a      	ldr	r2, [r3, #4]
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	fbb3 f1f2 	udiv	r1, r3, r2
 80024be:	fb01 f202 	mul.w	r2, r1, r2
 80024c2:	1a9b      	subs	r3, r3, r2
 80024c4:	603b      	str	r3, [r7, #0]

	if(handle->startIndex<=memIndex){
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	68db      	ldr	r3, [r3, #12]
 80024ca:	683a      	ldr	r2, [r7, #0]
 80024cc:	429a      	cmp	r2, r3
 80024ce:	d304      	bcc.n	80024da <cBuffGetVirtIndex+0x42>
		return memIndex-handle->startIndex;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	68db      	ldr	r3, [r3, #12]
 80024d4:	683a      	ldr	r2, [r7, #0]
 80024d6:	1ad3      	subs	r3, r2, r3
 80024d8:	e006      	b.n	80024e8 <cBuffGetVirtIndex+0x50>
	}else{
		return handle->buffLen-handle->startIndex+memIndex;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	685a      	ldr	r2, [r3, #4]
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	68db      	ldr	r3, [r3, #12]
 80024e2:	1ad2      	subs	r2, r2, r3
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	4413      	add	r3, r2
	}
}
 80024e8:	4618      	mov	r0, r3
 80024ea:	370c      	adds	r7, #12
 80024ec:	46bd      	mov	sp, r7
 80024ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f2:	4770      	bx	lr

080024f4 <cBuffGetMemIndex>:

uint32_t cBuffGetMemIndex(circular_buffer_handle* handle,uint32_t virtIndex){
 80024f4:	b480      	push	{r7}
 80024f6:	b083      	sub	sp, #12
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
 80024fc:	6039      	str	r1, [r7, #0]
	//special case when startIndex==0 is not critical but present to speed-up execution
	//of plain buffer functions based on circular buffer functions
	if(handle==NULL || handle->buffLen==0) return virtIndex;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d003      	beq.n	800250c <cBuffGetMemIndex+0x18>
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	2b00      	cmp	r3, #0
 800250a:	d101      	bne.n	8002510 <cBuffGetMemIndex+0x1c>
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	e01c      	b.n	800254a <cBuffGetMemIndex+0x56>

	virtIndex=virtIndex % handle->buffLen;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	685a      	ldr	r2, [r3, #4]
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	fbb3 f1f2 	udiv	r1, r3, r2
 800251a:	fb01 f202 	mul.w	r2, r1, r2
 800251e:	1a9b      	subs	r3, r3, r2
 8002520:	603b      	str	r3, [r7, #0]

	if(virtIndex<(handle->buffLen-handle->startIndex)){
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	685a      	ldr	r2, [r3, #4]
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	68db      	ldr	r3, [r3, #12]
 800252a:	1ad3      	subs	r3, r2, r3
 800252c:	683a      	ldr	r2, [r7, #0]
 800252e:	429a      	cmp	r2, r3
 8002530:	d204      	bcs.n	800253c <cBuffGetMemIndex+0x48>
		return handle->startIndex+virtIndex;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	68da      	ldr	r2, [r3, #12]
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	4413      	add	r3, r2
 800253a:	e006      	b.n	800254a <cBuffGetMemIndex+0x56>
	}else{
		return virtIndex-(handle->buffLen-handle->startIndex);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	68da      	ldr	r2, [r3, #12]
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	1ad2      	subs	r2, r2, r3
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	4413      	add	r3, r2
	}
}
 800254a:	4618      	mov	r0, r3
 800254c:	370c      	adds	r7, #12
 800254e:	46bd      	mov	sp, r7
 8002550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002554:	4770      	bx	lr

08002556 <cBuffPush>:

void cBuffPush(circular_buffer_handle* handle, uint8_t* data, uint32_t dataLen, uint8_t ht){
 8002556:	b580      	push	{r7, lr}
 8002558:	b086      	sub	sp, #24
 800255a:	af00      	add	r7, sp, #0
 800255c:	60f8      	str	r0, [r7, #12]
 800255e:	60b9      	str	r1, [r7, #8]
 8002560:	607a      	str	r2, [r7, #4]
 8002562:	70fb      	strb	r3, [r7, #3]
	if(handle==NULL || handle->buffLen==0 || dataLen==0 || data==NULL) return;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	2b00      	cmp	r3, #0
 8002568:	d06d      	beq.n	8002646 <cBuffPush+0xf0>
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	2b00      	cmp	r3, #0
 8002570:	d069      	beq.n	8002646 <cBuffPush+0xf0>
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d066      	beq.n	8002646 <cBuffPush+0xf0>
 8002578:	68bb      	ldr	r3, [r7, #8]
 800257a:	2b00      	cmp	r3, #0
 800257c:	d063      	beq.n	8002646 <cBuffPush+0xf0>

	uint32_t pushMemIndx;
	if(ht==0){ //push before head
 800257e:	78fb      	ldrb	r3, [r7, #3]
 8002580:	2b00      	cmp	r3, #0
 8002582:	d108      	bne.n	8002596 <cBuffPush+0x40>
		//we will start pushing from buffLen-1 virtual index
		pushMemIndx=cBuffGetMemIndex(handle,handle->buffLen-1);
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	3b01      	subs	r3, #1
 800258a:	4619      	mov	r1, r3
 800258c:	68f8      	ldr	r0, [r7, #12]
 800258e:	f7ff ffb1 	bl	80024f4 <cBuffGetMemIndex>
 8002592:	6178      	str	r0, [r7, #20]
 8002594:	e006      	b.n	80025a4 <cBuffPush+0x4e>
	}else{ //push after tail
		//we will start pushing from elemNum virtual index
		pushMemIndx=cBuffGetMemIndex(handle,handle->elemNum);
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	689b      	ldr	r3, [r3, #8]
 800259a:	4619      	mov	r1, r3
 800259c:	68f8      	ldr	r0, [r7, #12]
 800259e:	f7ff ffa9 	bl	80024f4 <cBuffGetMemIndex>
 80025a2:	6178      	str	r0, [r7, #20]
	}

	for(uint32_t d=0;d<dataLen;d++){
 80025a4:	2300      	movs	r3, #0
 80025a6:	613b      	str	r3, [r7, #16]
 80025a8:	e048      	b.n	800263c <cBuffPush+0xe6>
		if(ht==0){ //push to head
 80025aa:	78fb      	ldrb	r3, [r7, #3]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d11f      	bne.n	80025f0 <cBuffPush+0x9a>
			//we push data starting from buffer end, going backwards
			//handle->buff[pushMemIndx]=data[dataLen-1-d]; //not tested, push following inverse order
			handle->buff[pushMemIndx]=data[d];
 80025b0:	68ba      	ldr	r2, [r7, #8]
 80025b2:	693b      	ldr	r3, [r7, #16]
 80025b4:	441a      	add	r2, r3
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	6819      	ldr	r1, [r3, #0]
 80025ba:	697b      	ldr	r3, [r7, #20]
 80025bc:	440b      	add	r3, r1
 80025be:	7812      	ldrb	r2, [r2, #0]
 80025c0:	701a      	strb	r2, [r3, #0]
			//if buffer was not full before pushing
			if(handle->elemNum<handle->buffLen){
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	689a      	ldr	r2, [r3, #8]
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	429a      	cmp	r2, r3
 80025cc:	d204      	bcs.n	80025d8 <cBuffPush+0x82>
				//increasing element number counter
				handle->elemNum++;
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	689b      	ldr	r3, [r3, #8]
 80025d2:	1c5a      	adds	r2, r3, #1
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	609a      	str	r2, [r3, #8]
			}
			//new start index is the one we pushed into
			handle->startIndex=pushMemIndx;
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	697a      	ldr	r2, [r7, #20]
 80025dc:	60da      	str	r2, [r3, #12]
			pushMemIndx=cBuffGetMemIndex(handle,handle->buffLen-1);
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	3b01      	subs	r3, #1
 80025e4:	4619      	mov	r1, r3
 80025e6:	68f8      	ldr	r0, [r7, #12]
 80025e8:	f7ff ff84 	bl	80024f4 <cBuffGetMemIndex>
 80025ec:	6178      	str	r0, [r7, #20]
 80025ee:	e022      	b.n	8002636 <cBuffPush+0xe0>
		}else{ //push to tail
			//we push data following the data buffer order
			handle->buff[pushMemIndx]=data[d];
 80025f0:	68ba      	ldr	r2, [r7, #8]
 80025f2:	693b      	ldr	r3, [r7, #16]
 80025f4:	441a      	add	r2, r3
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	6819      	ldr	r1, [r3, #0]
 80025fa:	697b      	ldr	r3, [r7, #20]
 80025fc:	440b      	add	r3, r1
 80025fe:	7812      	ldrb	r2, [r2, #0]
 8002600:	701a      	strb	r2, [r3, #0]
			//if buffer was not full before pushing
			if(handle->elemNum<handle->buffLen){
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	689a      	ldr	r2, [r3, #8]
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	429a      	cmp	r2, r3
 800260c:	d205      	bcs.n	800261a <cBuffPush+0xc4>
				//increasing element number counter
				handle->elemNum++;
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	689b      	ldr	r3, [r3, #8]
 8002612:	1c5a      	adds	r2, r3, #1
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	609a      	str	r2, [r3, #8]
 8002618:	e006      	b.n	8002628 <cBuffPush+0xd2>
			}else{
				//moving start index to virtual index 1
				handle->startIndex=cBuffGetMemIndex(handle,1);
 800261a:	2101      	movs	r1, #1
 800261c:	68f8      	ldr	r0, [r7, #12]
 800261e:	f7ff ff69 	bl	80024f4 <cBuffGetMemIndex>
 8002622:	4602      	mov	r2, r0
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	60da      	str	r2, [r3, #12]
			}
			pushMemIndx=cBuffGetMemIndex(handle,handle->elemNum);
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	689b      	ldr	r3, [r3, #8]
 800262c:	4619      	mov	r1, r3
 800262e:	68f8      	ldr	r0, [r7, #12]
 8002630:	f7ff ff60 	bl	80024f4 <cBuffGetMemIndex>
 8002634:	6178      	str	r0, [r7, #20]
	for(uint32_t d=0;d<dataLen;d++){
 8002636:	693b      	ldr	r3, [r7, #16]
 8002638:	3301      	adds	r3, #1
 800263a:	613b      	str	r3, [r7, #16]
 800263c:	693a      	ldr	r2, [r7, #16]
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	429a      	cmp	r2, r3
 8002642:	d3b2      	bcc.n	80025aa <cBuffPush+0x54>
		}

	}

	return;
 8002644:	e000      	b.n	8002648 <cBuffPush+0xf2>
	if(handle==NULL || handle->buffLen==0 || dataLen==0 || data==NULL) return;
 8002646:	bf00      	nop
}
 8002648:	3718      	adds	r7, #24
 800264a:	46bd      	mov	sp, r7
 800264c:	bd80      	pop	{r7, pc}

0800264e <cBuffPushToFill>:

uint32_t cBuffPushToFill(circular_buffer_handle* handle, uint8_t* data, uint32_t dataLen, uint8_t ht){
 800264e:	b580      	push	{r7, lr}
 8002650:	b086      	sub	sp, #24
 8002652:	af00      	add	r7, sp, #0
 8002654:	60f8      	str	r0, [r7, #12]
 8002656:	60b9      	str	r1, [r7, #8]
 8002658:	607a      	str	r2, [r7, #4]
 800265a:	70fb      	strb	r3, [r7, #3]
	if(handle==NULL || handle->buffLen==0 || dataLen==0 || data==NULL) return 0;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d009      	beq.n	8002676 <cBuffPushToFill+0x28>
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d005      	beq.n	8002676 <cBuffPushToFill+0x28>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	2b00      	cmp	r3, #0
 800266e:	d002      	beq.n	8002676 <cBuffPushToFill+0x28>
 8002670:	68bb      	ldr	r3, [r7, #8]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d101      	bne.n	800267a <cBuffPushToFill+0x2c>
 8002676:	2300      	movs	r3, #0
 8002678:	e012      	b.n	80026a0 <cBuffPushToFill+0x52>

	//compute the available space
	uint32_t available=handle->buffLen-handle->elemNum;
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	685a      	ldr	r2, [r3, #4]
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	689b      	ldr	r3, [r3, #8]
 8002682:	1ad3      	subs	r3, r2, r3
 8002684:	617b      	str	r3, [r7, #20]

	//compute the minimum between available and dataLen
	if(dataLen<available) available=dataLen;
 8002686:	687a      	ldr	r2, [r7, #4]
 8002688:	697b      	ldr	r3, [r7, #20]
 800268a:	429a      	cmp	r2, r3
 800268c:	d201      	bcs.n	8002692 <cBuffPushToFill+0x44>
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	617b      	str	r3, [r7, #20]

	//pushing bytes
	cBuffPush(handle,data,available,ht);
 8002692:	78fb      	ldrb	r3, [r7, #3]
 8002694:	697a      	ldr	r2, [r7, #20]
 8002696:	68b9      	ldr	r1, [r7, #8]
 8002698:	68f8      	ldr	r0, [r7, #12]
 800269a:	f7ff ff5c 	bl	8002556 <cBuffPush>

	return available;
 800269e:	697b      	ldr	r3, [r7, #20]
}
 80026a0:	4618      	mov	r0, r3
 80026a2:	3718      	adds	r7, #24
 80026a4:	46bd      	mov	sp, r7
 80026a6:	bd80      	pop	{r7, pc}

080026a8 <cBuffPull>:

uint32_t cBuffPull(circular_buffer_handle* handle, uint8_t* data, uint32_t dataLen, uint8_t ht){
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b088      	sub	sp, #32
 80026ac:	af02      	add	r7, sp, #8
 80026ae:	60f8      	str	r0, [r7, #12]
 80026b0:	60b9      	str	r1, [r7, #8]
 80026b2:	607a      	str	r2, [r7, #4]
 80026b4:	70fb      	strb	r3, [r7, #3]
	if(handle==NULL || handle->buffLen==0 || dataLen==0) return 0;
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d006      	beq.n	80026ca <cBuffPull+0x22>
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d002      	beq.n	80026ca <cBuffPull+0x22>
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d101      	bne.n	80026ce <cBuffPull+0x26>
 80026ca:	2300      	movs	r3, #0
 80026cc:	e019      	b.n	8002702 <cBuffPull+0x5a>

	//expoiting cBuffRead function to perform data reading
	uint32_t retVal=cBuffRead(handle,data,dataLen,ht,0);
 80026ce:	78fb      	ldrb	r3, [r7, #3]
 80026d0:	2200      	movs	r2, #0
 80026d2:	9200      	str	r2, [sp, #0]
 80026d4:	687a      	ldr	r2, [r7, #4]
 80026d6:	68b9      	ldr	r1, [r7, #8]
 80026d8:	68f8      	ldr	r0, [r7, #12]
 80026da:	f000 f816 	bl	800270a <cBuffRead>
 80026de:	6178      	str	r0, [r7, #20]

	//updating start index and elements number
	if(ht==0){ //pull from head
 80026e0:	78fb      	ldrb	r3, [r7, #3]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d106      	bne.n	80026f4 <cBuffPull+0x4c>
		handle->startIndex=cBuffGetMemIndex(handle,retVal);
 80026e6:	6979      	ldr	r1, [r7, #20]
 80026e8:	68f8      	ldr	r0, [r7, #12]
 80026ea:	f7ff ff03 	bl	80024f4 <cBuffGetMemIndex>
 80026ee:	4602      	mov	r2, r0
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	60da      	str	r2, [r3, #12]
	}

	handle->elemNum=handle->elemNum-retVal;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	689a      	ldr	r2, [r3, #8]
 80026f8:	697b      	ldr	r3, [r7, #20]
 80026fa:	1ad2      	subs	r2, r2, r3
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	609a      	str	r2, [r3, #8]

	return retVal;
 8002700:	697b      	ldr	r3, [r7, #20]
}
 8002702:	4618      	mov	r0, r3
 8002704:	3718      	adds	r7, #24
 8002706:	46bd      	mov	sp, r7
 8002708:	bd80      	pop	{r7, pc}

0800270a <cBuffRead>:

	return retVal;
	
}

uint32_t cBuffRead(circular_buffer_handle* handle, uint8_t* data, uint32_t dataLen, uint8_t ht, uint32_t off){
 800270a:	b590      	push	{r4, r7, lr}
 800270c:	b087      	sub	sp, #28
 800270e:	af00      	add	r7, sp, #0
 8002710:	60f8      	str	r0, [r7, #12]
 8002712:	60b9      	str	r1, [r7, #8]
 8002714:	607a      	str	r2, [r7, #4]
 8002716:	70fb      	strb	r3, [r7, #3]
	if(handle==NULL || handle->elemNum==0 || dataLen==0 || off>=handle->elemNum) return 0;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d00b      	beq.n	8002736 <cBuffRead+0x2c>
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	689b      	ldr	r3, [r3, #8]
 8002722:	2b00      	cmp	r3, #0
 8002724:	d007      	beq.n	8002736 <cBuffRead+0x2c>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2b00      	cmp	r3, #0
 800272a:	d004      	beq.n	8002736 <cBuffRead+0x2c>
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	689b      	ldr	r3, [r3, #8]
 8002730:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002732:	429a      	cmp	r2, r3
 8002734:	d301      	bcc.n	800273a <cBuffRead+0x30>
 8002736:	2300      	movs	r3, #0
 8002738:	e044      	b.n	80027c4 <cBuffRead+0xba>

	//determinign the actual number of bytes we can read
	uint32_t retVal;
	if(dataLen<=handle->elemNum-off){
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	689a      	ldr	r2, [r3, #8]
 800273e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002740:	1ad3      	subs	r3, r2, r3
 8002742:	687a      	ldr	r2, [r7, #4]
 8002744:	429a      	cmp	r2, r3
 8002746:	d802      	bhi.n	800274e <cBuffRead+0x44>
		retVal=dataLen;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	617b      	str	r3, [r7, #20]
 800274c:	e004      	b.n	8002758 <cBuffRead+0x4e>
	}else{
		retVal=handle->elemNum-off;
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	689a      	ldr	r2, [r3, #8]
 8002752:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002754:	1ad3      	subs	r3, r2, r3
 8002756:	617b      	str	r3, [r7, #20]
	}

	if(data!=NULL){ //data reading happens only if data is not NULL
 8002758:	68bb      	ldr	r3, [r7, #8]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d031      	beq.n	80027c2 <cBuffRead+0xb8>
		for(uint32_t d=0; d<retVal; d++){
 800275e:	2300      	movs	r3, #0
 8002760:	613b      	str	r3, [r7, #16]
 8002762:	e02a      	b.n	80027ba <cBuffRead+0xb0>
			if(ht==0){ //read from head
 8002764:	78fb      	ldrb	r3, [r7, #3]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d110      	bne.n	800278c <cBuffRead+0x82>
				//reading data starting from head
				data[d]=handle->buff[cBuffGetMemIndex(handle,d+off)];
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	681c      	ldr	r4, [r3, #0]
 800276e:	693a      	ldr	r2, [r7, #16]
 8002770:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002772:	4413      	add	r3, r2
 8002774:	4619      	mov	r1, r3
 8002776:	68f8      	ldr	r0, [r7, #12]
 8002778:	f7ff febc 	bl	80024f4 <cBuffGetMemIndex>
 800277c:	4603      	mov	r3, r0
 800277e:	18e2      	adds	r2, r4, r3
 8002780:	68b9      	ldr	r1, [r7, #8]
 8002782:	693b      	ldr	r3, [r7, #16]
 8002784:	440b      	add	r3, r1
 8002786:	7812      	ldrb	r2, [r2, #0]
 8002788:	701a      	strb	r2, [r3, #0]
 800278a:	e013      	b.n	80027b4 <cBuffRead+0xaa>
			}else{ //read from tail
				//reading data starting from tail
				//data[retVal-1-d]=handle->buff[cBuffGetMemIndex(handle,handle->elemNum-1-d)]; //inverted read order, not tested
				data[d]=handle->buff[cBuffGetMemIndex(handle,handle->elemNum-1-d-off)];
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	681c      	ldr	r4, [r3, #0]
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	689a      	ldr	r2, [r3, #8]
 8002794:	693b      	ldr	r3, [r7, #16]
 8002796:	1ad2      	subs	r2, r2, r3
 8002798:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800279a:	1ad3      	subs	r3, r2, r3
 800279c:	3b01      	subs	r3, #1
 800279e:	4619      	mov	r1, r3
 80027a0:	68f8      	ldr	r0, [r7, #12]
 80027a2:	f7ff fea7 	bl	80024f4 <cBuffGetMemIndex>
 80027a6:	4603      	mov	r3, r0
 80027a8:	18e2      	adds	r2, r4, r3
 80027aa:	68b9      	ldr	r1, [r7, #8]
 80027ac:	693b      	ldr	r3, [r7, #16]
 80027ae:	440b      	add	r3, r1
 80027b0:	7812      	ldrb	r2, [r2, #0]
 80027b2:	701a      	strb	r2, [r3, #0]
		for(uint32_t d=0; d<retVal; d++){
 80027b4:	693b      	ldr	r3, [r7, #16]
 80027b6:	3301      	adds	r3, #1
 80027b8:	613b      	str	r3, [r7, #16]
 80027ba:	693a      	ldr	r2, [r7, #16]
 80027bc:	697b      	ldr	r3, [r7, #20]
 80027be:	429a      	cmp	r2, r3
 80027c0:	d3d0      	bcc.n	8002764 <cBuffRead+0x5a>
			}
		}
	}

	return retVal;
 80027c2:	697b      	ldr	r3, [r7, #20]
	
}
 80027c4:	4618      	mov	r0, r3
 80027c6:	371c      	adds	r7, #28
 80027c8:	46bd      	mov	sp, r7
 80027ca:	bd90      	pop	{r4, r7, pc}

080027cc <cBuffCut>:

uint32_t cBuffCut(circular_buffer_handle* handle, uint8_t* data, uint32_t dataLen, uint8_t ht, uint32_t off){
 80027cc:	b5b0      	push	{r4, r5, r7, lr}
 80027ce:	b08e      	sub	sp, #56	; 0x38
 80027d0:	af02      	add	r7, sp, #8
 80027d2:	60f8      	str	r0, [r7, #12]
 80027d4:	60b9      	str	r1, [r7, #8]
 80027d6:	607a      	str	r2, [r7, #4]
 80027d8:	70fb      	strb	r3, [r7, #3]
	if(handle==NULL || handle->elemNum==0 || dataLen==0 || off>=handle->elemNum) return 0;
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d00b      	beq.n	80027f8 <cBuffCut+0x2c>
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	689b      	ldr	r3, [r3, #8]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d007      	beq.n	80027f8 <cBuffCut+0x2c>
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d004      	beq.n	80027f8 <cBuffCut+0x2c>
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	689b      	ldr	r3, [r3, #8]
 80027f2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80027f4:	429a      	cmp	r2, r3
 80027f6:	d301      	bcc.n	80027fc <cBuffCut+0x30>
 80027f8:	2300      	movs	r3, #0
 80027fa:	e0c5      	b.n	8002988 <cBuffCut+0x1bc>

	//reading data (using cBuffRead)
	uint32_t readLen=cBuffRead(handle,data,dataLen,ht,off);
 80027fc:	78fa      	ldrb	r2, [r7, #3]
 80027fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002800:	9300      	str	r3, [sp, #0]
 8002802:	4613      	mov	r3, r2
 8002804:	687a      	ldr	r2, [r7, #4]
 8002806:	68b9      	ldr	r1, [r7, #8]
 8002808:	68f8      	ldr	r0, [r7, #12]
 800280a:	f7ff ff7e 	bl	800270a <cBuffRead>
 800280e:	6178      	str	r0, [r7, #20]

	//returning immediately if nothing to cut
	if(readLen==0) return readLen;
 8002810:	697b      	ldr	r3, [r7, #20]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d101      	bne.n	800281a <cBuffCut+0x4e>
 8002816:	697b      	ldr	r3, [r7, #20]
 8002818:	e0b6      	b.n	8002988 <cBuffCut+0x1bc>

	//cutting data from buffer
	//determining the smaller portion of buffer to shift
	uint32_t shiftStart=0; //start of shift (virtual)
 800281a:	2300      	movs	r3, #0
 800281c:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t shiftDest=0; //shift destination (virtual)
 800281e:	2300      	movs	r3, #0
 8002820:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t shiftLen=0; //length of shift
 8002822:	2300      	movs	r3, #0
 8002824:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t shiftPiece=0; //shortest memory piece to shift (0:first 1:second)
 8002826:	2300      	movs	r3, #0
 8002828:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	if(off<=(handle->elemNum-off-readLen)){ //first buffer piece is shortes
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	689a      	ldr	r2, [r3, #8]
 8002830:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002832:	1ad2      	subs	r2, r2, r3
 8002834:	697b      	ldr	r3, [r7, #20]
 8002836:	1ad3      	subs	r3, r2, r3
 8002838:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800283a:	429a      	cmp	r2, r3
 800283c:	d824      	bhi.n	8002888 <cBuffCut+0xbc>
		shiftStart=(ht==0) ? off-1 : handle->elemNum-off;
 800283e:	78fb      	ldrb	r3, [r7, #3]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d102      	bne.n	800284a <cBuffCut+0x7e>
 8002844:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002846:	3b01      	subs	r3, #1
 8002848:	e003      	b.n	8002852 <cBuffCut+0x86>
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	689a      	ldr	r2, [r3, #8]
 800284e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002850:	1ad3      	subs	r3, r2, r3
 8002852:	62fb      	str	r3, [r7, #44]	; 0x2c
		shiftDest=(ht==0) ? off-1+readLen : handle->elemNum-off-readLen;
 8002854:	78fb      	ldrb	r3, [r7, #3]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d104      	bne.n	8002864 <cBuffCut+0x98>
 800285a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800285c:	697b      	ldr	r3, [r7, #20]
 800285e:	4413      	add	r3, r2
 8002860:	3b01      	subs	r3, #1
 8002862:	e005      	b.n	8002870 <cBuffCut+0xa4>
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	689a      	ldr	r2, [r3, #8]
 8002868:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800286a:	1ad2      	subs	r2, r2, r3
 800286c:	697b      	ldr	r3, [r7, #20]
 800286e:	1ad3      	subs	r3, r2, r3
 8002870:	62bb      	str	r3, [r7, #40]	; 0x28
		shiftLen=off;
 8002872:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002874:	627b      	str	r3, [r7, #36]	; 0x24
		shiftPiece=(ht==0) ? 0 : 1;
 8002876:	78fb      	ldrb	r3, [r7, #3]
 8002878:	2b00      	cmp	r3, #0
 800287a:	bf14      	ite	ne
 800287c:	2301      	movne	r3, #1
 800287e:	2300      	moveq	r3, #0
 8002880:	b2db      	uxtb	r3, r3
 8002882:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002886:	e028      	b.n	80028da <cBuffCut+0x10e>
	}else{ //second buffer piece is shortest
		shiftStart=(ht==0) ? off+readLen : handle->elemNum-off-1-readLen;
 8002888:	78fb      	ldrb	r3, [r7, #3]
 800288a:	2b00      	cmp	r3, #0
 800288c:	d103      	bne.n	8002896 <cBuffCut+0xca>
 800288e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002890:	697b      	ldr	r3, [r7, #20]
 8002892:	4413      	add	r3, r2
 8002894:	e006      	b.n	80028a4 <cBuffCut+0xd8>
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	689a      	ldr	r2, [r3, #8]
 800289a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800289c:	1ad2      	subs	r2, r2, r3
 800289e:	697b      	ldr	r3, [r7, #20]
 80028a0:	1ad3      	subs	r3, r2, r3
 80028a2:	3b01      	subs	r3, #1
 80028a4:	62fb      	str	r3, [r7, #44]	; 0x2c
		shiftDest=(ht==0) ? off : handle->elemNum-off-1;
 80028a6:	78fb      	ldrb	r3, [r7, #3]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d005      	beq.n	80028b8 <cBuffCut+0xec>
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	689a      	ldr	r2, [r3, #8]
 80028b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80028b2:	1ad3      	subs	r3, r2, r3
 80028b4:	3b01      	subs	r3, #1
 80028b6:	e000      	b.n	80028ba <cBuffCut+0xee>
 80028b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80028ba:	62bb      	str	r3, [r7, #40]	; 0x28
		shiftLen=handle->elemNum-off-readLen;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	689a      	ldr	r2, [r3, #8]
 80028c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80028c2:	1ad2      	subs	r2, r2, r3
 80028c4:	697b      	ldr	r3, [r7, #20]
 80028c6:	1ad3      	subs	r3, r2, r3
 80028c8:	627b      	str	r3, [r7, #36]	; 0x24
		shiftPiece=(ht==0) ? 1 : 0;
 80028ca:	78fb      	ldrb	r3, [r7, #3]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	bf0c      	ite	eq
 80028d0:	2301      	moveq	r3, #1
 80028d2:	2300      	movne	r3, #0
 80028d4:	b2db      	uxtb	r3, r3
 80028d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	}
	//actual shift
	if(!shiftPiece){ //shift first memory part forward
 80028da:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d129      	bne.n	8002936 <cBuffCut+0x16a>
		for(uint32_t b=0;b<shiftLen;b++){
 80028e2:	2300      	movs	r3, #0
 80028e4:	61fb      	str	r3, [r7, #28]
 80028e6:	e01a      	b.n	800291e <cBuffCut+0x152>
			handle->buff[cBuffGetMemIndex(handle,shiftDest-b)]=handle->buff[cBuffGetMemIndex(handle,shiftStart-b)];
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	681c      	ldr	r4, [r3, #0]
 80028ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80028ee:	69fb      	ldr	r3, [r7, #28]
 80028f0:	1ad3      	subs	r3, r2, r3
 80028f2:	4619      	mov	r1, r3
 80028f4:	68f8      	ldr	r0, [r7, #12]
 80028f6:	f7ff fdfd 	bl	80024f4 <cBuffGetMemIndex>
 80028fa:	4603      	mov	r3, r0
 80028fc:	441c      	add	r4, r3
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	681d      	ldr	r5, [r3, #0]
 8002902:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002904:	69fb      	ldr	r3, [r7, #28]
 8002906:	1ad3      	subs	r3, r2, r3
 8002908:	4619      	mov	r1, r3
 800290a:	68f8      	ldr	r0, [r7, #12]
 800290c:	f7ff fdf2 	bl	80024f4 <cBuffGetMemIndex>
 8002910:	4603      	mov	r3, r0
 8002912:	442b      	add	r3, r5
 8002914:	7822      	ldrb	r2, [r4, #0]
 8002916:	701a      	strb	r2, [r3, #0]
		for(uint32_t b=0;b<shiftLen;b++){
 8002918:	69fb      	ldr	r3, [r7, #28]
 800291a:	3301      	adds	r3, #1
 800291c:	61fb      	str	r3, [r7, #28]
 800291e:	69fa      	ldr	r2, [r7, #28]
 8002920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002922:	429a      	cmp	r2, r3
 8002924:	d3e0      	bcc.n	80028e8 <cBuffCut+0x11c>
		}
		//changing start index
		handle->startIndex=cBuffGetMemIndex(handle,readLen);
 8002926:	6979      	ldr	r1, [r7, #20]
 8002928:	68f8      	ldr	r0, [r7, #12]
 800292a:	f7ff fde3 	bl	80024f4 <cBuffGetMemIndex>
 800292e:	4602      	mov	r2, r0
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	60da      	str	r2, [r3, #12]
 8002934:	e021      	b.n	800297a <cBuffCut+0x1ae>

	}else{ //shift second memory part backwards
		for(uint32_t b=0;b<shiftLen;b++){
 8002936:	2300      	movs	r3, #0
 8002938:	61bb      	str	r3, [r7, #24]
 800293a:	e01a      	b.n	8002972 <cBuffCut+0x1a6>
			handle->buff[cBuffGetMemIndex(handle,shiftDest+b)]=handle->buff[cBuffGetMemIndex(handle,shiftStart+b)];
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681c      	ldr	r4, [r3, #0]
 8002940:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002942:	69bb      	ldr	r3, [r7, #24]
 8002944:	4413      	add	r3, r2
 8002946:	4619      	mov	r1, r3
 8002948:	68f8      	ldr	r0, [r7, #12]
 800294a:	f7ff fdd3 	bl	80024f4 <cBuffGetMemIndex>
 800294e:	4603      	mov	r3, r0
 8002950:	441c      	add	r4, r3
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681d      	ldr	r5, [r3, #0]
 8002956:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002958:	69bb      	ldr	r3, [r7, #24]
 800295a:	4413      	add	r3, r2
 800295c:	4619      	mov	r1, r3
 800295e:	68f8      	ldr	r0, [r7, #12]
 8002960:	f7ff fdc8 	bl	80024f4 <cBuffGetMemIndex>
 8002964:	4603      	mov	r3, r0
 8002966:	442b      	add	r3, r5
 8002968:	7822      	ldrb	r2, [r4, #0]
 800296a:	701a      	strb	r2, [r3, #0]
		for(uint32_t b=0;b<shiftLen;b++){
 800296c:	69bb      	ldr	r3, [r7, #24]
 800296e:	3301      	adds	r3, #1
 8002970:	61bb      	str	r3, [r7, #24]
 8002972:	69ba      	ldr	r2, [r7, #24]
 8002974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002976:	429a      	cmp	r2, r3
 8002978:	d3e0      	bcc.n	800293c <cBuffCut+0x170>
		}
	}
	//changing elemnum
	handle->elemNum=handle->elemNum-readLen;
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	689a      	ldr	r2, [r3, #8]
 800297e:	697b      	ldr	r3, [r7, #20]
 8002980:	1ad2      	subs	r2, r2, r3
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	609a      	str	r2, [r3, #8]

	return readLen;
 8002986:	697b      	ldr	r3, [r7, #20]
}
 8002988:	4618      	mov	r0, r3
 800298a:	3730      	adds	r7, #48	; 0x30
 800298c:	46bd      	mov	sp, r7
 800298e:	bdb0      	pop	{r4, r5, r7, pc}

08002990 <cBuffPushRead>:

uint32_t cBuffPushRead(circular_buffer_handle* dest, circular_buffer_handle* source, uint32_t len, uint8_t htDest, uint8_t htSource){
 8002990:	b580      	push	{r7, lr}
 8002992:	b08a      	sub	sp, #40	; 0x28
 8002994:	af02      	add	r7, sp, #8
 8002996:	60f8      	str	r0, [r7, #12]
 8002998:	60b9      	str	r1, [r7, #8]
 800299a:	607a      	str	r2, [r7, #4]
 800299c:	70fb      	strb	r3, [r7, #3]
	if(dest==NULL || source==NULL || dest->buffLen==0 || source->buffLen==0 || len==0) return 0;
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d00d      	beq.n	80029c0 <cBuffPushRead+0x30>
 80029a4:	68bb      	ldr	r3, [r7, #8]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d00a      	beq.n	80029c0 <cBuffPushRead+0x30>
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d006      	beq.n	80029c0 <cBuffPushRead+0x30>
 80029b2:	68bb      	ldr	r3, [r7, #8]
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d002      	beq.n	80029c0 <cBuffPushRead+0x30>
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d101      	bne.n	80029c4 <cBuffPushRead+0x34>
 80029c0:	2300      	movs	r3, #0
 80029c2:	e034      	b.n	8002a2e <cBuffPushRead+0x9e>

	//actual number of moved bytes
	uint32_t retVal=len;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	61fb      	str	r3, [r7, #28]
	if(source->elemNum<retVal) retVal=source->elemNum;
 80029c8:	68bb      	ldr	r3, [r7, #8]
 80029ca:	689b      	ldr	r3, [r3, #8]
 80029cc:	69fa      	ldr	r2, [r7, #28]
 80029ce:	429a      	cmp	r2, r3
 80029d0:	d902      	bls.n	80029d8 <cBuffPushRead+0x48>
 80029d2:	68bb      	ldr	r3, [r7, #8]
 80029d4:	689b      	ldr	r3, [r3, #8]
 80029d6:	61fb      	str	r3, [r7, #28]
	if((dest->buffLen-dest->elemNum)<retVal) retVal=dest->buffLen-dest->elemNum;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	685a      	ldr	r2, [r3, #4]
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	689b      	ldr	r3, [r3, #8]
 80029e0:	1ad3      	subs	r3, r2, r3
 80029e2:	69fa      	ldr	r2, [r7, #28]
 80029e4:	429a      	cmp	r2, r3
 80029e6:	d905      	bls.n	80029f4 <cBuffPushRead+0x64>
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	685a      	ldr	r2, [r3, #4]
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	689b      	ldr	r3, [r3, #8]
 80029f0:	1ad3      	subs	r3, r2, r3
 80029f2:	61fb      	str	r3, [r7, #28]

	//moving bytes
	uint8_t byte;
	for(uint32_t b=0;b<retVal;b++){
 80029f4:	2300      	movs	r3, #0
 80029f6:	61bb      	str	r3, [r7, #24]
 80029f8:	e014      	b.n	8002a24 <cBuffPushRead+0x94>
		cBuffRead(source,&byte,1,htSource,b);
 80029fa:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80029fe:	f107 0117 	add.w	r1, r7, #23
 8002a02:	69bb      	ldr	r3, [r7, #24]
 8002a04:	9300      	str	r3, [sp, #0]
 8002a06:	4613      	mov	r3, r2
 8002a08:	2201      	movs	r2, #1
 8002a0a:	68b8      	ldr	r0, [r7, #8]
 8002a0c:	f7ff fe7d 	bl	800270a <cBuffRead>
		cBuffPush(dest,&byte,1,htDest);
 8002a10:	78fb      	ldrb	r3, [r7, #3]
 8002a12:	f107 0117 	add.w	r1, r7, #23
 8002a16:	2201      	movs	r2, #1
 8002a18:	68f8      	ldr	r0, [r7, #12]
 8002a1a:	f7ff fd9c 	bl	8002556 <cBuffPush>
	for(uint32_t b=0;b<retVal;b++){
 8002a1e:	69bb      	ldr	r3, [r7, #24]
 8002a20:	3301      	adds	r3, #1
 8002a22:	61bb      	str	r3, [r7, #24]
 8002a24:	69ba      	ldr	r2, [r7, #24]
 8002a26:	69fb      	ldr	r3, [r7, #28]
 8002a28:	429a      	cmp	r2, r3
 8002a2a:	d3e6      	bcc.n	80029fa <cBuffPushRead+0x6a>
	}

	return retVal;
 8002a2c:	69fb      	ldr	r3, [r7, #28]
}
 8002a2e:	4618      	mov	r0, r3
 8002a30:	3720      	adds	r7, #32
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bd80      	pop	{r7, pc}

08002a36 <cBuffPushPull>:

uint32_t cBuffPushPull(circular_buffer_handle* dest, circular_buffer_handle* source, uint32_t len, uint8_t htDest, uint8_t htSource){
 8002a36:	b580      	push	{r7, lr}
 8002a38:	b088      	sub	sp, #32
 8002a3a:	af02      	add	r7, sp, #8
 8002a3c:	60f8      	str	r0, [r7, #12]
 8002a3e:	60b9      	str	r1, [r7, #8]
 8002a40:	607a      	str	r2, [r7, #4]
 8002a42:	70fb      	strb	r3, [r7, #3]
	if(dest==NULL || source==NULL || dest->buffLen==0 || source->buffLen==0 || len==0) return 0;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d00d      	beq.n	8002a66 <cBuffPushPull+0x30>
 8002a4a:	68bb      	ldr	r3, [r7, #8]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d00a      	beq.n	8002a66 <cBuffPushPull+0x30>
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d006      	beq.n	8002a66 <cBuffPushPull+0x30>
 8002a58:	68bb      	ldr	r3, [r7, #8]
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d002      	beq.n	8002a66 <cBuffPushPull+0x30>
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d101      	bne.n	8002a6a <cBuffPushPull+0x34>
 8002a66:	2300      	movs	r3, #0
 8002a68:	e01c      	b.n	8002aa4 <cBuffPushPull+0x6e>

	//moving using cBuffPushRead
	uint32_t retVal=cBuffPushRead(dest,source,len,htDest,htSource);
 8002a6a:	78fa      	ldrb	r2, [r7, #3]
 8002a6c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002a70:	9300      	str	r3, [sp, #0]
 8002a72:	4613      	mov	r3, r2
 8002a74:	687a      	ldr	r2, [r7, #4]
 8002a76:	68b9      	ldr	r1, [r7, #8]
 8002a78:	68f8      	ldr	r0, [r7, #12]
 8002a7a:	f7ff ff89 	bl	8002990 <cBuffPushRead>
 8002a7e:	6178      	str	r0, [r7, #20]
	//decreasing element number and chaning startIndex of source
	source->elemNum-=retVal;
 8002a80:	68bb      	ldr	r3, [r7, #8]
 8002a82:	689a      	ldr	r2, [r3, #8]
 8002a84:	697b      	ldr	r3, [r7, #20]
 8002a86:	1ad2      	subs	r2, r2, r3
 8002a88:	68bb      	ldr	r3, [r7, #8]
 8002a8a:	609a      	str	r2, [r3, #8]
	if(!htSource) source->startIndex=cBuffGetMemIndex(source,retVal);
 8002a8c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d106      	bne.n	8002aa2 <cBuffPushPull+0x6c>
 8002a94:	6979      	ldr	r1, [r7, #20]
 8002a96:	68b8      	ldr	r0, [r7, #8]
 8002a98:	f7ff fd2c 	bl	80024f4 <cBuffGetMemIndex>
 8002a9c:	4602      	mov	r2, r0
 8002a9e:	68bb      	ldr	r3, [r7, #8]
 8002aa0:	60da      	str	r2, [r3, #12]

	return retVal;
 8002aa2:	697b      	ldr	r3, [r7, #20]
}
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	3718      	adds	r7, #24
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	bd80      	pop	{r7, pc}

08002aac <cBuffReadByte>:
	else handle->buff[cBuffGetMemIndex(handle,handle->elemNum-1-off)]=val;

	return;
}

uint8_t cBuffReadByte(circular_buffer_handle* handle, uint8_t ht, uint32_t off){
 8002aac:	b590      	push	{r4, r7, lr}
 8002aae:	b085      	sub	sp, #20
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	60f8      	str	r0, [r7, #12]
 8002ab4:	460b      	mov	r3, r1
 8002ab6:	607a      	str	r2, [r7, #4]
 8002ab8:	72fb      	strb	r3, [r7, #11]
	if(handle==NULL || handle->buffLen==0 || handle->elemNum==0 || off>=handle->elemNum) return 0;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d00c      	beq.n	8002ada <cBuffReadByte+0x2e>
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	685b      	ldr	r3, [r3, #4]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d008      	beq.n	8002ada <cBuffReadByte+0x2e>
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	689b      	ldr	r3, [r3, #8]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d004      	beq.n	8002ada <cBuffReadByte+0x2e>
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	689b      	ldr	r3, [r3, #8]
 8002ad4:	687a      	ldr	r2, [r7, #4]
 8002ad6:	429a      	cmp	r2, r3
 8002ad8:	d301      	bcc.n	8002ade <cBuffReadByte+0x32>
 8002ada:	2300      	movs	r3, #0
 8002adc:	e01a      	b.n	8002b14 <cBuffReadByte+0x68>

	if(!ht) return handle->buff[cBuffGetMemIndex(handle,off)];
 8002ade:	7afb      	ldrb	r3, [r7, #11]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d109      	bne.n	8002af8 <cBuffReadByte+0x4c>
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	681c      	ldr	r4, [r3, #0]
 8002ae8:	6879      	ldr	r1, [r7, #4]
 8002aea:	68f8      	ldr	r0, [r7, #12]
 8002aec:	f7ff fd02 	bl	80024f4 <cBuffGetMemIndex>
 8002af0:	4603      	mov	r3, r0
 8002af2:	4423      	add	r3, r4
 8002af4:	781b      	ldrb	r3, [r3, #0]
 8002af6:	e00d      	b.n	8002b14 <cBuffReadByte+0x68>
	//else
	return handle->buff[cBuffGetMemIndex(handle,handle->elemNum-1-off)];
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	681c      	ldr	r4, [r3, #0]
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	689a      	ldr	r2, [r3, #8]
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	1ad3      	subs	r3, r2, r3
 8002b04:	3b01      	subs	r3, #1
 8002b06:	4619      	mov	r1, r3
 8002b08:	68f8      	ldr	r0, [r7, #12]
 8002b0a:	f7ff fcf3 	bl	80024f4 <cBuffGetMemIndex>
 8002b0e:	4603      	mov	r3, r0
 8002b10:	4423      	add	r3, r4
 8002b12:	781b      	ldrb	r3, [r3, #0]
}
 8002b14:	4618      	mov	r0, r3
 8002b16:	3714      	adds	r7, #20
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	bd90      	pop	{r4, r7, pc}

08002b1c <cBuffFlush>:
	//finally assigning the new start index to the buffer
	handle->startIndex=tmpBuff.startIndex;
	return;
}

void cBuffFlush(circular_buffer_handle* handle){
 8002b1c:	b480      	push	{r7}
 8002b1e:	b083      	sub	sp, #12
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
	if(handle==NULL) return;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d003      	beq.n	8002b32 <cBuffFlush+0x16>

	handle->elemNum=0;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	609a      	str	r2, [r3, #8]

	return;
 8002b30:	e000      	b.n	8002b34 <cBuffFlush+0x18>
	if(handle==NULL) return;
 8002b32:	bf00      	nop
}
 8002b34:	370c      	adds	r7, #12
 8002b36:	46bd      	mov	sp, r7
 8002b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3c:	4770      	bx	lr

08002b3e <cBuffFull>:

uint8_t cBuffFull(circular_buffer_handle* handle){
 8002b3e:	b480      	push	{r7}
 8002b40:	b083      	sub	sp, #12
 8002b42:	af00      	add	r7, sp, #0
 8002b44:	6078      	str	r0, [r7, #4]
	if(handle==NULL) return 0;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d101      	bne.n	8002b50 <cBuffFull+0x12>
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	e008      	b.n	8002b62 <cBuffFull+0x24>

	return (handle->elemNum == handle->buffLen);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	689a      	ldr	r2, [r3, #8]
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	685b      	ldr	r3, [r3, #4]
 8002b58:	429a      	cmp	r2, r3
 8002b5a:	bf0c      	ite	eq
 8002b5c:	2301      	moveq	r3, #1
 8002b5e:	2300      	movne	r3, #0
 8002b60:	b2db      	uxtb	r3, r3
}
 8002b62:	4618      	mov	r0, r3
 8002b64:	370c      	adds	r7, #12
 8002b66:	46bd      	mov	sp, r7
 8002b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6c:	4770      	bx	lr

08002b6e <cBuffToCirc>:
	dest->buff=pHandle->buff;
	dest->buffLen=pHandle->buffLen;
	dest->elemNum=pHandle->elemNum;
}

void cBuffToCirc(circular_buffer_handle* dest, circular_buffer_handle* cHandle){
 8002b6e:	b480      	push	{r7}
 8002b70:	b083      	sub	sp, #12
 8002b72:	af00      	add	r7, sp, #0
 8002b74:	6078      	str	r0, [r7, #4]
 8002b76:	6039      	str	r1, [r7, #0]
	if(dest==NULL || cHandle==NULL) return;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d013      	beq.n	8002ba6 <cBuffToCirc+0x38>
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d010      	beq.n	8002ba6 <cBuffToCirc+0x38>

	dest->buff=cHandle->buff;
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	681a      	ldr	r2, [r3, #0]
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	601a      	str	r2, [r3, #0]
	dest->buffLen=cHandle->buffLen;
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	685a      	ldr	r2, [r3, #4]
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	605a      	str	r2, [r3, #4]
	dest->elemNum=cHandle->elemNum;
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	689a      	ldr	r2, [r3, #8]
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	609a      	str	r2, [r3, #8]
	dest->startIndex=cHandle->startIndex;
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	68da      	ldr	r2, [r3, #12]
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	60da      	str	r2, [r3, #12]
 8002ba4:	e000      	b.n	8002ba8 <cBuffToCirc+0x3a>
	if(dest==NULL || cHandle==NULL) return;
 8002ba6:	bf00      	nop
}
 8002ba8:	370c      	adds	r7, #12
 8002baa:	46bd      	mov	sp, r7
 8002bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb0:	4770      	bx	lr
	...

08002bb4 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8002bb8:	4b17      	ldr	r3, [pc, #92]	; (8002c18 <MX_CAN1_Init+0x64>)
 8002bba:	4a18      	ldr	r2, [pc, #96]	; (8002c1c <MX_CAN1_Init+0x68>)
 8002bbc:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 8002bbe:	4b16      	ldr	r3, [pc, #88]	; (8002c18 <MX_CAN1_Init+0x64>)
 8002bc0:	2210      	movs	r2, #16
 8002bc2:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8002bc4:	4b14      	ldr	r3, [pc, #80]	; (8002c18 <MX_CAN1_Init+0x64>)
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8002bca:	4b13      	ldr	r3, [pc, #76]	; (8002c18 <MX_CAN1_Init+0x64>)
 8002bcc:	2200      	movs	r2, #0
 8002bce:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_6TQ;
 8002bd0:	4b11      	ldr	r3, [pc, #68]	; (8002c18 <MX_CAN1_Init+0x64>)
 8002bd2:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 8002bd6:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8002bd8:	4b0f      	ldr	r3, [pc, #60]	; (8002c18 <MX_CAN1_Init+0x64>)
 8002bda:	2200      	movs	r2, #0
 8002bdc:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8002bde:	4b0e      	ldr	r3, [pc, #56]	; (8002c18 <MX_CAN1_Init+0x64>)
 8002be0:	2200      	movs	r2, #0
 8002be2:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8002be4:	4b0c      	ldr	r3, [pc, #48]	; (8002c18 <MX_CAN1_Init+0x64>)
 8002be6:	2200      	movs	r2, #0
 8002be8:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8002bea:	4b0b      	ldr	r3, [pc, #44]	; (8002c18 <MX_CAN1_Init+0x64>)
 8002bec:	2200      	movs	r2, #0
 8002bee:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8002bf0:	4b09      	ldr	r3, [pc, #36]	; (8002c18 <MX_CAN1_Init+0x64>)
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8002bf6:	4b08      	ldr	r3, [pc, #32]	; (8002c18 <MX_CAN1_Init+0x64>)
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8002bfc:	4b06      	ldr	r3, [pc, #24]	; (8002c18 <MX_CAN1_Init+0x64>)
 8002bfe:	2200      	movs	r2, #0
 8002c00:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8002c02:	4805      	ldr	r0, [pc, #20]	; (8002c18 <MX_CAN1_Init+0x64>)
 8002c04:	f004 fe4c 	bl	80078a0 <HAL_CAN_Init>
 8002c08:	4603      	mov	r3, r0
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d001      	beq.n	8002c12 <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 8002c0e:	f001 f927 	bl	8003e60 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8002c12:	bf00      	nop
 8002c14:	bd80      	pop	{r7, pc}
 8002c16:	bf00      	nop
 8002c18:	20004a04 	.word	0x20004a04
 8002c1c:	40006400 	.word	0x40006400

08002c20 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b08a      	sub	sp, #40	; 0x28
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c28:	f107 0314 	add.w	r3, r7, #20
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	601a      	str	r2, [r3, #0]
 8002c30:	605a      	str	r2, [r3, #4]
 8002c32:	609a      	str	r2, [r3, #8]
 8002c34:	60da      	str	r2, [r3, #12]
 8002c36:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4a1f      	ldr	r2, [pc, #124]	; (8002cbc <HAL_CAN_MspInit+0x9c>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d138      	bne.n	8002cb4 <HAL_CAN_MspInit+0x94>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8002c42:	4b1f      	ldr	r3, [pc, #124]	; (8002cc0 <HAL_CAN_MspInit+0xa0>)
 8002c44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c46:	4a1e      	ldr	r2, [pc, #120]	; (8002cc0 <HAL_CAN_MspInit+0xa0>)
 8002c48:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002c4c:	6593      	str	r3, [r2, #88]	; 0x58
 8002c4e:	4b1c      	ldr	r3, [pc, #112]	; (8002cc0 <HAL_CAN_MspInit+0xa0>)
 8002c50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c56:	613b      	str	r3, [r7, #16]
 8002c58:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c5a:	4b19      	ldr	r3, [pc, #100]	; (8002cc0 <HAL_CAN_MspInit+0xa0>)
 8002c5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c5e:	4a18      	ldr	r2, [pc, #96]	; (8002cc0 <HAL_CAN_MspInit+0xa0>)
 8002c60:	f043 0302 	orr.w	r3, r3, #2
 8002c64:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002c66:	4b16      	ldr	r3, [pc, #88]	; (8002cc0 <HAL_CAN_MspInit+0xa0>)
 8002c68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c6a:	f003 0302 	and.w	r3, r3, #2
 8002c6e:	60fb      	str	r3, [r7, #12]
 8002c70:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB5     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002c72:	2320      	movs	r3, #32
 8002c74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c76:	2302      	movs	r3, #2
 8002c78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c7e:	2303      	movs	r3, #3
 8002c80:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_CAN1;
 8002c82:	2303      	movs	r3, #3
 8002c84:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c86:	f107 0314 	add.w	r3, r7, #20
 8002c8a:	4619      	mov	r1, r3
 8002c8c:	480d      	ldr	r0, [pc, #52]	; (8002cc4 <HAL_CAN_MspInit+0xa4>)
 8002c8e:	f005 f865 	bl	8007d5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002c92:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002c96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c98:	2302      	movs	r3, #2
 8002c9a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ca0:	2303      	movs	r3, #3
 8002ca2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8002ca4:	2309      	movs	r3, #9
 8002ca6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ca8:	f107 0314 	add.w	r3, r7, #20
 8002cac:	4619      	mov	r1, r3
 8002cae:	4805      	ldr	r0, [pc, #20]	; (8002cc4 <HAL_CAN_MspInit+0xa4>)
 8002cb0:	f005 f854 	bl	8007d5c <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8002cb4:	bf00      	nop
 8002cb6:	3728      	adds	r7, #40	; 0x28
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bd80      	pop	{r7, pc}
 8002cbc:	40006400 	.word	0x40006400
 8002cc0:	40021000 	.word	0x40021000
 8002cc4:	48000400 	.word	0x48000400

08002cc8 <checkByteIsPartOfPattern>:
 * The function will also set the integer pointed by indx to the index of the byte inside the pattern array
 * (if correspondance is found), if indx is not needed it can be set to NULL, if multiple possible indexes are found, 
 * the indxPolicy will determine if the lowest (indxPolicy==0) or highest (indxPolicy!=0) index is written.
 */
static uint8_t checkByteIsPartOfPattern(circular_buffer_handle* handle, uint32_t pos, uint8_t* patt, \
		uint32_t pattLen, uint32_t* indx, uint8_t indxPolicy){
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b08c      	sub	sp, #48	; 0x30
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	60f8      	str	r0, [r7, #12]
 8002cd0:	60b9      	str	r1, [r7, #8]
 8002cd2:	607a      	str	r2, [r7, #4]
 8002cd4:	603b      	str	r3, [r7, #0]

	if(handle==NULL || handle->elemNum==0 || patt==NULL || pattLen==0 || pos>=handle->elemNum) return 0;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d00e      	beq.n	8002cfa <checkByteIsPartOfPattern+0x32>
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	689b      	ldr	r3, [r3, #8]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d00a      	beq.n	8002cfa <checkByteIsPartOfPattern+0x32>
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d007      	beq.n	8002cfa <checkByteIsPartOfPattern+0x32>
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d004      	beq.n	8002cfa <checkByteIsPartOfPattern+0x32>
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	689b      	ldr	r3, [r3, #8]
 8002cf4:	68ba      	ldr	r2, [r7, #8]
 8002cf6:	429a      	cmp	r2, r3
 8002cf8:	d301      	bcc.n	8002cfe <checkByteIsPartOfPattern+0x36>
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	e091      	b.n	8002e22 <checkByteIsPartOfPattern+0x15a>

	//check if complete correspondance is possible
	if(handle->elemNum>=pattLen){
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	689b      	ldr	r3, [r3, #8]
 8002d02:	683a      	ldr	r2, [r7, #0]
 8002d04:	429a      	cmp	r2, r3
 8002d06:	d860      	bhi.n	8002dca <checkByteIsPartOfPattern+0x102>
		uint32_t startShift; //first shift of patt that is possible inside buff
		uint32_t endShift;	//last shift(+1) of patt that is possible inside buff

		//computing start and end shift
		//if there's no space for pattern until end of buffer (because we are too near the end of the buffer)
		if((handle->elemNum-pattLen)<pos) startShift=pos-(handle->elemNum-pattLen); else startShift=0;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	689a      	ldr	r2, [r3, #8]
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	1ad3      	subs	r3, r2, r3
 8002d10:	68ba      	ldr	r2, [r7, #8]
 8002d12:	429a      	cmp	r2, r3
 8002d14:	d907      	bls.n	8002d26 <checkByteIsPartOfPattern+0x5e>
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	689b      	ldr	r3, [r3, #8]
 8002d1a:	683a      	ldr	r2, [r7, #0]
 8002d1c:	1ad3      	subs	r3, r2, r3
 8002d1e:	68ba      	ldr	r2, [r7, #8]
 8002d20:	4413      	add	r3, r2
 8002d22:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d24:	e001      	b.n	8002d2a <checkByteIsPartOfPattern+0x62>
 8002d26:	2300      	movs	r3, #0
 8002d28:	62fb      	str	r3, [r7, #44]	; 0x2c
		//if there's no space for pattern from begin of buffer (because we are too near the begin of the buffer)
		if(pos<(pattLen-1)) endShift=pos+1; else endShift=pattLen;
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	3b01      	subs	r3, #1
 8002d2e:	68ba      	ldr	r2, [r7, #8]
 8002d30:	429a      	cmp	r2, r3
 8002d32:	d203      	bcs.n	8002d3c <checkByteIsPartOfPattern+0x74>
 8002d34:	68bb      	ldr	r3, [r7, #8]
 8002d36:	3301      	adds	r3, #1
 8002d38:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d3a:	e001      	b.n	8002d40 <checkByteIsPartOfPattern+0x78>
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	62bb      	str	r3, [r7, #40]	; 0x28


		for(uint32_t s=0;s<(endShift-startShift);s++){ //loop to check all possible shifts
 8002d40:	2300      	movs	r3, #0
 8002d42:	627b      	str	r3, [r7, #36]	; 0x24
 8002d44:	e03b      	b.n	8002dbe <checkByteIsPartOfPattern+0xf6>
			uint32_t shift;
			if(!indxPolicy) shift=startShift+s;
 8002d46:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d104      	bne.n	8002d58 <checkByteIsPartOfPattern+0x90>
 8002d4e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d52:	4413      	add	r3, r2
 8002d54:	623b      	str	r3, [r7, #32]
 8002d56:	e004      	b.n	8002d62 <checkByteIsPartOfPattern+0x9a>
			else			shift=endShift-1-s;
 8002d58:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d5c:	1ad3      	subs	r3, r2, r3
 8002d5e:	3b01      	subs	r3, #1
 8002d60:	623b      	str	r3, [r7, #32]

			uint8_t complete=1;
 8002d62:	2301      	movs	r3, #1
 8002d64:	77fb      	strb	r3, [r7, #31]
			for(uint32_t p=0;p<pattLen;p++){
 8002d66:	2300      	movs	r3, #0
 8002d68:	61bb      	str	r3, [r7, #24]
 8002d6a:	e016      	b.n	8002d9a <checkByteIsPartOfPattern+0xd2>
				if(cBuffReadByte(handle,0,pos-shift+p)!=patt[p]){
 8002d6c:	68ba      	ldr	r2, [r7, #8]
 8002d6e:	6a3b      	ldr	r3, [r7, #32]
 8002d70:	1ad2      	subs	r2, r2, r3
 8002d72:	69bb      	ldr	r3, [r7, #24]
 8002d74:	4413      	add	r3, r2
 8002d76:	461a      	mov	r2, r3
 8002d78:	2100      	movs	r1, #0
 8002d7a:	68f8      	ldr	r0, [r7, #12]
 8002d7c:	f7ff fe96 	bl	8002aac <cBuffReadByte>
 8002d80:	4603      	mov	r3, r0
 8002d82:	4619      	mov	r1, r3
 8002d84:	687a      	ldr	r2, [r7, #4]
 8002d86:	69bb      	ldr	r3, [r7, #24]
 8002d88:	4413      	add	r3, r2
 8002d8a:	781b      	ldrb	r3, [r3, #0]
 8002d8c:	4299      	cmp	r1, r3
 8002d8e:	d001      	beq.n	8002d94 <checkByteIsPartOfPattern+0xcc>
					complete=0;
 8002d90:	2300      	movs	r3, #0
 8002d92:	77fb      	strb	r3, [r7, #31]
			for(uint32_t p=0;p<pattLen;p++){
 8002d94:	69bb      	ldr	r3, [r7, #24]
 8002d96:	3301      	adds	r3, #1
 8002d98:	61bb      	str	r3, [r7, #24]
 8002d9a:	69ba      	ldr	r2, [r7, #24]
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	429a      	cmp	r2, r3
 8002da0:	d3e4      	bcc.n	8002d6c <checkByteIsPartOfPattern+0xa4>
				}
			}

			if(complete){ //complete correspondance found
 8002da2:	7ffb      	ldrb	r3, [r7, #31]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d007      	beq.n	8002db8 <checkByteIsPartOfPattern+0xf0>
				if(indx!=NULL) *indx=shift;
 8002da8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d002      	beq.n	8002db4 <checkByteIsPartOfPattern+0xec>
 8002dae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002db0:	6a3a      	ldr	r2, [r7, #32]
 8002db2:	601a      	str	r2, [r3, #0]
				return 2;
 8002db4:	2302      	movs	r3, #2
 8002db6:	e034      	b.n	8002e22 <checkByteIsPartOfPattern+0x15a>
		for(uint32_t s=0;s<(endShift-startShift);s++){ //loop to check all possible shifts
 8002db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dba:	3301      	adds	r3, #1
 8002dbc:	627b      	str	r3, [r7, #36]	; 0x24
 8002dbe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002dc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dc2:	1ad3      	subs	r3, r2, r3
 8002dc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002dc6:	429a      	cmp	r2, r3
 8002dc8:	d3bd      	bcc.n	8002d46 <checkByteIsPartOfPattern+0x7e>
			}
		}
	}

	//check for partial correspondance
	for(uint32_t p=0;p<pattLen;p++){
 8002dca:	2300      	movs	r3, #0
 8002dcc:	617b      	str	r3, [r7, #20]
 8002dce:	e023      	b.n	8002e18 <checkByteIsPartOfPattern+0x150>

		uint32_t shift;
		if(!indxPolicy) shift=p;
 8002dd0:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d102      	bne.n	8002dde <checkByteIsPartOfPattern+0x116>
 8002dd8:	697b      	ldr	r3, [r7, #20]
 8002dda:	613b      	str	r3, [r7, #16]
 8002ddc:	e004      	b.n	8002de8 <checkByteIsPartOfPattern+0x120>
		else			shift=pattLen-1-p;
 8002dde:	683a      	ldr	r2, [r7, #0]
 8002de0:	697b      	ldr	r3, [r7, #20]
 8002de2:	1ad3      	subs	r3, r2, r3
 8002de4:	3b01      	subs	r3, #1
 8002de6:	613b      	str	r3, [r7, #16]

		if(cBuffReadByte(handle,0,pos)==patt[shift]){
 8002de8:	68ba      	ldr	r2, [r7, #8]
 8002dea:	2100      	movs	r1, #0
 8002dec:	68f8      	ldr	r0, [r7, #12]
 8002dee:	f7ff fe5d 	bl	8002aac <cBuffReadByte>
 8002df2:	4603      	mov	r3, r0
 8002df4:	4619      	mov	r1, r3
 8002df6:	687a      	ldr	r2, [r7, #4]
 8002df8:	693b      	ldr	r3, [r7, #16]
 8002dfa:	4413      	add	r3, r2
 8002dfc:	781b      	ldrb	r3, [r3, #0]
 8002dfe:	4299      	cmp	r1, r3
 8002e00:	d107      	bne.n	8002e12 <checkByteIsPartOfPattern+0x14a>
			//partial correspondance found
			if(indx!=NULL) *indx=shift;
 8002e02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d002      	beq.n	8002e0e <checkByteIsPartOfPattern+0x146>
 8002e08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e0a:	693a      	ldr	r2, [r7, #16]
 8002e0c:	601a      	str	r2, [r3, #0]
			return 1;
 8002e0e:	2301      	movs	r3, #1
 8002e10:	e007      	b.n	8002e22 <checkByteIsPartOfPattern+0x15a>
	for(uint32_t p=0;p<pattLen;p++){
 8002e12:	697b      	ldr	r3, [r7, #20]
 8002e14:	3301      	adds	r3, #1
 8002e16:	617b      	str	r3, [r7, #20]
 8002e18:	697a      	ldr	r2, [r7, #20]
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	429a      	cmp	r2, r3
 8002e1e:	d3d7      	bcc.n	8002dd0 <checkByteIsPartOfPattern+0x108>
		}
	}

	return 0;
 8002e20:	2300      	movs	r3, #0
}
 8002e22:	4618      	mov	r0, r3
 8002e24:	3730      	adds	r7, #48	; 0x30
 8002e26:	46bd      	mov	sp, r7
 8002e28:	bd80      	pop	{r7, pc}

08002e2a <searchFrame>:

uint32_t searchFrame(circular_buffer_handle* stream, circular_buffer_handle* frame, search_frame_rule * rule){
 8002e2a:	b580      	push	{r7, lr}
 8002e2c:	b094      	sub	sp, #80	; 0x50
 8002e2e:	af02      	add	r7, sp, #8
 8002e30:	60f8      	str	r0, [r7, #12]
 8002e32:	60b9      	str	r1, [r7, #8]
 8002e34:	607a      	str	r2, [r7, #4]
	//guard checks
	if(stream==NULL || stream->buff == NULL || rule==NULL || stream->elemNum==0 || rule->headLen==0 || rule->head==NULL) return stream->elemNum;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d012      	beq.n	8002e62 <searchFrame+0x38>
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d00e      	beq.n	8002e62 <searchFrame+0x38>
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d00b      	beq.n	8002e62 <searchFrame+0x38>
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	689b      	ldr	r3, [r3, #8]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d007      	beq.n	8002e62 <searchFrame+0x38>
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d003      	beq.n	8002e62 <searchFrame+0x38>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d102      	bne.n	8002e68 <searchFrame+0x3e>
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	689b      	ldr	r3, [r3, #8]
 8002e66:	e166      	b.n	8003136 <searchFrame+0x30c>
	//If packet cannot fit in available bytes
	if(stream->elemNum<(rule->headLen+rule->minLen+rule->tailLen)) return stream->elemNum;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	689a      	ldr	r2, [r3, #8]
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6859      	ldr	r1, [r3, #4]
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	691b      	ldr	r3, [r3, #16]
 8002e74:	4419      	add	r1, r3
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	68db      	ldr	r3, [r3, #12]
 8002e7a:	440b      	add	r3, r1
 8002e7c:	429a      	cmp	r2, r3
 8002e7e:	d202      	bcs.n	8002e86 <searchFrame+0x5c>
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	689b      	ldr	r3, [r3, #8]
 8002e84:	e157      	b.n	8003136 <searchFrame+0x30c>
	    _waiting,
	    _inside
	} machine_state;

	//variables and flags
	machine_state state=_waiting;	//decoding state machine state
 8002e86:	2300      	movs	r3, #0
 8002e88:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    uint32_t startPos=0;	//temporary variable were we save the last byte of head
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	643b      	str	r3, [r7, #64]	; 0x40

	uint8_t headPart=0;	//flag to signal if this byte is part of a partial (if 1) or complete (if 2) head
 8002e90:	2300      	movs	r3, #0
 8002e92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	uint8_t tailPart=0;	//flag to signal if this byte is part of a partial (if 1) or complete (if 2) tail
 8002e96:	2300      	movs	r3, #0
 8002e98:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	uint32_t headIndex=0;	//variable that will contain the index of the byte inside head (if part of it)
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	61bb      	str	r3, [r7, #24]
	uint32_t tailIndex=0;	//variable that will contain the index of the byte inside tail (if part of it)
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	617b      	str	r3, [r7, #20]
	uint8_t forbiddenByte=0; //flag to signal that current byte is of forbidden type (head/tail or parts of it depending on mode)
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29

	uint8_t canBeFirst=0; //flag to signal if the current byte can be the first byte of a frame (last byte of head)
 8002eaa:	2300      	movs	r3, #0
 8002eac:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	uint8_t canBeLast=0; //flag to signal if the current byte can be the last byte of a frame
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t minLenFlag=0;//flag to signal that the minimum length prerequisite has been satisfied
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint32_t currLen=0; //current packet length (head and tail excluded)
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	63bb      	str	r3, [r7, #56]	; 0x38

    if(rule->policy != hard && rule->policy!=medium) rule->policy=soft;	//correct eventual policy error
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	7e1b      	ldrb	r3, [r3, #24]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d006      	beq.n	8002ed6 <searchFrame+0xac>
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	7e1b      	ldrb	r3, [r3, #24]
 8002ecc:	2b01      	cmp	r3, #1
 8002ece:	d002      	beq.n	8002ed6 <searchFrame+0xac>
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2202      	movs	r2, #2
 8002ed4:	761a      	strb	r2, [r3, #24]

	//scanning each byte inside the buffer (avoiding to check the last tailLen bytes)
	for(int b=0;b<(stream->elemNum-rule->tailLen);b++){
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	637b      	str	r3, [r7, #52]	; 0x34
 8002eda:	e121      	b.n	8003120 <searchFrame+0x2f6>

		//checking if byte can be part of a head or be a head end
        headPart=checkByteIsPartOfPattern(stream, b, rule->head, rule->headLen, &headIndex, 1);
 8002edc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681a      	ldr	r2, [r3, #0]
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6858      	ldr	r0, [r3, #4]
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	9301      	str	r3, [sp, #4]
 8002eea:	f107 0318 	add.w	r3, r7, #24
 8002eee:	9300      	str	r3, [sp, #0]
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	68f8      	ldr	r0, [r7, #12]
 8002ef4:	f7ff fee8 	bl	8002cc8 <checkByteIsPartOfPattern>
 8002ef8:	4603      	mov	r3, r0
 8002efa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

        //checking if byte can be part of a tail or be a tail begin
        //if mode is tail-less, tailPart will always remain 0
        tailPart=checkByteIsPartOfPattern(stream, b, rule->tail, rule->tailLen, &tailIndex, 0);
 8002efe:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	689a      	ldr	r2, [r3, #8]
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	68d8      	ldr	r0, [r3, #12]
 8002f08:	2300      	movs	r3, #0
 8002f0a:	9301      	str	r3, [sp, #4]
 8002f0c:	f107 0314 	add.w	r3, r7, #20
 8002f10:	9300      	str	r3, [sp, #0]
 8002f12:	4603      	mov	r3, r0
 8002f14:	68f8      	ldr	r0, [r7, #12]
 8002f16:	f7ff fed7 	bl	8002cc8 <checkByteIsPartOfPattern>
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a

		//check if byte is forbidden byte
		//for readibility i divided the assignment in different lines
		forbiddenByte=(rule->policy!=soft) && (headPart==2 || tailPart==2 || ((rule->policy==hard) && (headPart==1 || tailPart==1)));
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	7e1b      	ldrb	r3, [r3, #24]
 8002f24:	2b02      	cmp	r3, #2
 8002f26:	d015      	beq.n	8002f54 <searchFrame+0x12a>
 8002f28:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002f2c:	2b02      	cmp	r3, #2
 8002f2e:	d00f      	beq.n	8002f50 <searchFrame+0x126>
 8002f30:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8002f34:	2b02      	cmp	r3, #2
 8002f36:	d00b      	beq.n	8002f50 <searchFrame+0x126>
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	7e1b      	ldrb	r3, [r3, #24]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d109      	bne.n	8002f54 <searchFrame+0x12a>
 8002f40:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002f44:	2b01      	cmp	r3, #1
 8002f46:	d003      	beq.n	8002f50 <searchFrame+0x126>
 8002f48:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8002f4c:	2b01      	cmp	r3, #1
 8002f4e:	d101      	bne.n	8002f54 <searchFrame+0x12a>
 8002f50:	2301      	movs	r3, #1
 8002f52:	e000      	b.n	8002f56 <searchFrame+0x12c>
 8002f54:	2300      	movs	r3, #0
 8002f56:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29

		//checking minLen and maxLen policies
		if(state==_inside){
 8002f5a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002f5e:	2b01      	cmp	r3, #1
 8002f60:	d104      	bne.n	8002f6c <searchFrame+0x142>
			currLen=b-startPos;
 8002f62:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002f64:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f66:	1ad3      	subs	r3, r2, r3
 8002f68:	63bb      	str	r3, [r7, #56]	; 0x38
 8002f6a:	e001      	b.n	8002f70 <searchFrame+0x146>
		}else{
			currLen=0;
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	63bb      	str	r3, [r7, #56]	; 0x38
		}
		//the second part is to account for head bytes that are also last bytes
		minLenFlag=currLen>=rule->minLen;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	691b      	ldr	r3, [r3, #16]
 8002f74:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002f76:	429a      	cmp	r2, r3
 8002f78:	bf2c      	ite	cs
 8002f7a:	2301      	movcs	r3, #1
 8002f7c:	2300      	movcc	r3, #0
 8002f7e:	b2db      	uxtb	r3, r3
 8002f80:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		forbiddenByte=forbiddenByte || ((rule->maxLen!=0) && (currLen > rule->maxLen));
 8002f84:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d108      	bne.n	8002f9e <searchFrame+0x174>
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	695b      	ldr	r3, [r3, #20]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d006      	beq.n	8002fa2 <searchFrame+0x178>
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	695b      	ldr	r3, [r3, #20]
 8002f98:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002f9a:	429a      	cmp	r2, r3
 8002f9c:	d901      	bls.n	8002fa2 <searchFrame+0x178>
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	e000      	b.n	8002fa4 <searchFrame+0x17a>
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29

		//checking if current byte can be the first frame byte (last head byte)
		canBeFirst=(headPart==2) && (headIndex==(rule->headLen-1));
 8002fa8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002fac:	2b02      	cmp	r3, #2
 8002fae:	d107      	bne.n	8002fc0 <searchFrame+0x196>
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	685b      	ldr	r3, [r3, #4]
 8002fb4:	1e5a      	subs	r2, r3, #1
 8002fb6:	69bb      	ldr	r3, [r7, #24]
 8002fb8:	429a      	cmp	r2, r3
 8002fba:	d101      	bne.n	8002fc0 <searchFrame+0x196>
 8002fbc:	2301      	movs	r3, #1
 8002fbe:	e000      	b.n	8002fc2 <searchFrame+0x198>
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28

		//checking if current byte can be the last frame byte
		if(minLenFlag){
 8002fc6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d02b      	beq.n	8003026 <searchFrame+0x1fc>
			if(rule->tail== NULL || rule->tailLen==0){//tail-less mode
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	689b      	ldr	r3, [r3, #8]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d003      	beq.n	8002fde <searchFrame+0x1b4>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	68db      	ldr	r3, [r3, #12]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d103      	bne.n	8002fe6 <searchFrame+0x1bc>
				canBeLast=1; 
 8002fde:	2301      	movs	r3, #1
 8002fe0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8002fe4:	e01f      	b.n	8003026 <searchFrame+0x1fc>
			}else{ //normal mode
				uint32_t tmpTailIndex;
				canBeLast=checkByteIsPartOfPattern(stream, b+1, rule->tail, rule->tailLen, &tmpTailIndex, 0);
 8002fe6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fe8:	3301      	adds	r3, #1
 8002fea:	4618      	mov	r0, r3
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	689a      	ldr	r2, [r3, #8]
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	68d9      	ldr	r1, [r3, #12]
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	9301      	str	r3, [sp, #4]
 8002ff8:	f107 0310 	add.w	r3, r7, #16
 8002ffc:	9300      	str	r3, [sp, #0]
 8002ffe:	460b      	mov	r3, r1
 8003000:	4601      	mov	r1, r0
 8003002:	68f8      	ldr	r0, [r7, #12]
 8003004:	f7ff fe60 	bl	8002cc8 <checkByteIsPartOfPattern>
 8003008:	4603      	mov	r3, r0
 800300a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				canBeLast=(canBeLast == 2) && (tmpTailIndex==0);
 800300e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003012:	2b02      	cmp	r3, #2
 8003014:	d104      	bne.n	8003020 <searchFrame+0x1f6>
 8003016:	693b      	ldr	r3, [r7, #16]
 8003018:	2b00      	cmp	r3, #0
 800301a:	d101      	bne.n	8003020 <searchFrame+0x1f6>
 800301c:	2301      	movs	r3, #1
 800301e:	e000      	b.n	8003022 <searchFrame+0x1f8>
 8003020:	2300      	movs	r3, #0
 8003022:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			}
		}

		//STATE MACHINE
		if(state==_waiting){ 		//if we are waiting for the frame to begin
 8003026:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800302a:	2b00      	cmp	r3, #0
 800302c:	d135      	bne.n	800309a <searchFrame+0x270>
			if(canBeFirst){ //if we found a frame start
 800302e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003032:	2b00      	cmp	r3, #0
 8003034:	d071      	beq.n	800311a <searchFrame+0x2f0>
				state=_inside;
 8003036:	2301      	movs	r3, #1
 8003038:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				startPos=b;
 800303c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800303e:	643b      	str	r3, [r7, #64]	; 0x40

				//we check if we already found a 0 length frame
				if(canBeLast){
 8003040:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003044:	2b00      	cmp	r3, #0
 8003046:	d068      	beq.n	800311a <searchFrame+0x2f0>
					//frame found!

					//computing packet length and starting virtual index
					uint32_t tmpLen=rule->headLen;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	685b      	ldr	r3, [r3, #4]
 800304c:	633b      	str	r3, [r7, #48]	; 0x30
					if(rule->tail!=NULL) tmpLen+=rule->tailLen;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	689b      	ldr	r3, [r3, #8]
 8003052:	2b00      	cmp	r3, #0
 8003054:	d004      	beq.n	8003060 <searchFrame+0x236>
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	68db      	ldr	r3, [r3, #12]
 800305a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800305c:	4413      	add	r3, r2
 800305e:	633b      	str	r3, [r7, #48]	; 0x30
					uint32_t startVIndex=startPos+1-rule->headLen;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	685b      	ldr	r3, [r3, #4]
 8003064:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003066:	1ad3      	subs	r3, r2, r3
 8003068:	3301      	adds	r3, #1
 800306a:	61fb      	str	r3, [r7, #28]

					//filling output handle
					if(frame!=NULL){
 800306c:	68bb      	ldr	r3, [r7, #8]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d011      	beq.n	8003096 <searchFrame+0x26c>
						frame->buff=stream->buff;
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681a      	ldr	r2, [r3, #0]
 8003076:	68bb      	ldr	r3, [r7, #8]
 8003078:	601a      	str	r2, [r3, #0]
						frame->buffLen=stream->buffLen;
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	685a      	ldr	r2, [r3, #4]
 800307e:	68bb      	ldr	r3, [r7, #8]
 8003080:	605a      	str	r2, [r3, #4]
						frame->elemNum=tmpLen;
 8003082:	68bb      	ldr	r3, [r7, #8]
 8003084:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003086:	609a      	str	r2, [r3, #8]
						frame->startIndex=cBuffGetMemIndex(stream,startVIndex);
 8003088:	69f9      	ldr	r1, [r7, #28]
 800308a:	68f8      	ldr	r0, [r7, #12]
 800308c:	f7ff fa32 	bl	80024f4 <cBuffGetMemIndex>
 8003090:	4602      	mov	r2, r0
 8003092:	68bb      	ldr	r3, [r7, #8]
 8003094:	60da      	str	r2, [r3, #12]
					}
					return startVIndex;
 8003096:	69fb      	ldr	r3, [r7, #28]
 8003098:	e04d      	b.n	8003136 <searchFrame+0x30c>
				}
			}
		}else if(state==_inside){
 800309a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800309e:	2b01      	cmp	r3, #1
 80030a0:	d138      	bne.n	8003114 <searchFrame+0x2ea>
			/* checks priority:
			 * Forbidden bytes? -> discard frame and eventually restart with next possible frame
			 * Last frame byte? -> frame found!
			 */

			if(forbiddenByte){
 80030a2:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d005      	beq.n	80030b6 <searchFrame+0x28c>
				//discard frame and eventually restart with next possible frame
				//state back to waiting
				state=_waiting;
 80030aa:	2300      	movs	r3, #0
 80030ac:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				//after this iteration b will be incremented to the byte next to the old head
				//this can be optimized by taking note of the first occurrence of canBeFirst
				//and jumping there but for now this is enough 
				b=startPos;
 80030b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80030b2:	637b      	str	r3, [r7, #52]	; 0x34
 80030b4:	e031      	b.n	800311a <searchFrame+0x2f0>

			}else if(canBeLast){
 80030b6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d02d      	beq.n	800311a <searchFrame+0x2f0>
				//frame found!

				//computing packet length and starting virtual index
				uint32_t tmpLen=currLen+rule->headLen;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	685b      	ldr	r3, [r3, #4]
 80030c2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80030c4:	4413      	add	r3, r2
 80030c6:	62fb      	str	r3, [r7, #44]	; 0x2c
				if(rule->tail!=NULL) tmpLen+=rule->tailLen;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	689b      	ldr	r3, [r3, #8]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d004      	beq.n	80030da <searchFrame+0x2b0>
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	68db      	ldr	r3, [r3, #12]
 80030d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80030d6:	4413      	add	r3, r2
 80030d8:	62fb      	str	r3, [r7, #44]	; 0x2c
				uint32_t startVIndex=startPos+1-rule->headLen;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80030e0:	1ad3      	subs	r3, r2, r3
 80030e2:	3301      	adds	r3, #1
 80030e4:	623b      	str	r3, [r7, #32]

				//filling output handle
				if(frame!=NULL){
 80030e6:	68bb      	ldr	r3, [r7, #8]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d011      	beq.n	8003110 <searchFrame+0x2e6>
					frame->buff=stream->buff;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681a      	ldr	r2, [r3, #0]
 80030f0:	68bb      	ldr	r3, [r7, #8]
 80030f2:	601a      	str	r2, [r3, #0]
					frame->buffLen=stream->buffLen;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	685a      	ldr	r2, [r3, #4]
 80030f8:	68bb      	ldr	r3, [r7, #8]
 80030fa:	605a      	str	r2, [r3, #4]
					frame->elemNum=tmpLen;
 80030fc:	68bb      	ldr	r3, [r7, #8]
 80030fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003100:	609a      	str	r2, [r3, #8]
					frame->startIndex=cBuffGetMemIndex(stream,startVIndex);
 8003102:	6a39      	ldr	r1, [r7, #32]
 8003104:	68f8      	ldr	r0, [r7, #12]
 8003106:	f7ff f9f5 	bl	80024f4 <cBuffGetMemIndex>
 800310a:	4602      	mov	r2, r0
 800310c:	68bb      	ldr	r3, [r7, #8]
 800310e:	60da      	str	r2, [r3, #12]
				}
				return startVIndex;
 8003110:	6a3b      	ldr	r3, [r7, #32]
 8003112:	e010      	b.n	8003136 <searchFrame+0x30c>
			}
		}else{
			//to manage state errors (should never happen)
			state=_waiting;
 8003114:	2300      	movs	r3, #0
 8003116:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	for(int b=0;b<(stream->elemNum-rule->tailLen);b++){
 800311a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800311c:	3301      	adds	r3, #1
 800311e:	637b      	str	r3, [r7, #52]	; 0x34
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	689a      	ldr	r2, [r3, #8]
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	68db      	ldr	r3, [r3, #12]
 8003128:	1ad2      	subs	r2, r2, r3
 800312a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800312c:	429a      	cmp	r2, r3
 800312e:	f63f aed5 	bhi.w	8002edc <searchFrame+0xb2>
		}

    }
	//no valid packet found :(
	return stream->elemNum;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	689b      	ldr	r3, [r3, #8]
}
 8003136:	4618      	mov	r0, r3
 8003138:	3748      	adds	r7, #72	; 0x48
 800313a:	46bd      	mov	sp, r7
 800313c:	bd80      	pop	{r7, pc}

0800313e <searchFrameAdvance>:


uint8_t searchFrameAdvance(circular_buffer_handle* stream, circular_buffer_handle* frame, search_frame_rule * rule, uint8_t shiftFlags){
 800313e:	b580      	push	{r7, lr}
 8003140:	b08e      	sub	sp, #56	; 0x38
 8003142:	af00      	add	r7, sp, #0
 8003144:	60f8      	str	r0, [r7, #12]
 8003146:	60b9      	str	r1, [r7, #8]
 8003148:	607a      	str	r2, [r7, #4]
 800314a:	70fb      	strb	r3, [r7, #3]
	if(stream==NULL || stream->buff == NULL || rule==NULL || stream->elemNum==0 || rule->headLen==0 || rule->head==NULL) return 0;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d012      	beq.n	8003178 <searchFrameAdvance+0x3a>
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	2b00      	cmp	r3, #0
 8003158:	d00e      	beq.n	8003178 <searchFrameAdvance+0x3a>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2b00      	cmp	r3, #0
 800315e:	d00b      	beq.n	8003178 <searchFrameAdvance+0x3a>
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	689b      	ldr	r3, [r3, #8]
 8003164:	2b00      	cmp	r3, #0
 8003166:	d007      	beq.n	8003178 <searchFrameAdvance+0x3a>
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	685b      	ldr	r3, [r3, #4]
 800316c:	2b00      	cmp	r3, #0
 800316e:	d003      	beq.n	8003178 <searchFrameAdvance+0x3a>
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	2b00      	cmp	r3, #0
 8003176:	d101      	bne.n	800317c <searchFrameAdvance+0x3e>
 8003178:	2300      	movs	r3, #0
 800317a:	e06a      	b.n	8003252 <searchFrameAdvance+0x114>

	uint32_t startVIndex;
	uint8_t found=0;
 800317c:	2300      	movs	r3, #0
 800317e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

	//we start searching for the frame by using searchFrame
	startVIndex=searchFrame(stream, frame, rule);
 8003182:	687a      	ldr	r2, [r7, #4]
 8003184:	68b9      	ldr	r1, [r7, #8]
 8003186:	68f8      	ldr	r0, [r7, #12]
 8003188:	f7ff fe4f 	bl	8002e2a <searchFrame>
 800318c:	6338      	str	r0, [r7, #48]	; 0x30

	//if frame was found
	if(startVIndex!=stream->elemNum){
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	689b      	ldr	r3, [r3, #8]
 8003192:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003194:	429a      	cmp	r2, r3
 8003196:	d026      	beq.n	80031e6 <searchFrameAdvance+0xa8>
		found=1;
 8003198:	2301      	movs	r3, #1
 800319a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		//shift out depending on flags SHIFTOUT_CURR, SHIFTOUT_NEXT and SHIFTOUT_FOUND
		if(shiftFlags & (SHIFTOUT_CURR | SHIFTOUT_NEXT | SHIFTOUT_FOUND)){ 
 800319e:	78fb      	ldrb	r3, [r7, #3]
 80031a0:	f003 030e 	and.w	r3, r3, #14
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d02f      	beq.n	8003208 <searchFrameAdvance+0xca>
			cBuffPull(stream, NULL, startVIndex, 0);
 80031a8:	2300      	movs	r3, #0
 80031aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80031ac:	2100      	movs	r1, #0
 80031ae:	68f8      	ldr	r0, [r7, #12]
 80031b0:	f7ff fa7a 	bl	80026a8 <cBuffPull>
			if(shiftFlags & SHIFTOUT_FOUND) cBuffPull(stream, NULL, frame->elemNum, 0);
 80031b4:	78fb      	ldrb	r3, [r7, #3]
 80031b6:	f003 0308 	and.w	r3, r3, #8
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d007      	beq.n	80031ce <searchFrameAdvance+0x90>
 80031be:	68bb      	ldr	r3, [r7, #8]
 80031c0:	689a      	ldr	r2, [r3, #8]
 80031c2:	2300      	movs	r3, #0
 80031c4:	2100      	movs	r1, #0
 80031c6:	68f8      	ldr	r0, [r7, #12]
 80031c8:	f7ff fa6e 	bl	80026a8 <cBuffPull>
 80031cc:	e01c      	b.n	8003208 <searchFrameAdvance+0xca>
			else if(shiftFlags & SHIFTOUT_NEXT) cBuffPull(stream, NULL, 1, 0);
 80031ce:	78fb      	ldrb	r3, [r7, #3]
 80031d0:	f003 0304 	and.w	r3, r3, #4
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d017      	beq.n	8003208 <searchFrameAdvance+0xca>
 80031d8:	2300      	movs	r3, #0
 80031da:	2201      	movs	r2, #1
 80031dc:	2100      	movs	r1, #0
 80031de:	68f8      	ldr	r0, [r7, #12]
 80031e0:	f7ff fa62 	bl	80026a8 <cBuffPull>
 80031e4:	e010      	b.n	8003208 <searchFrameAdvance+0xca>
		}
	}else{
		//if no packet was found check for SHIFTOUT_FULL flag
		if((shiftFlags & SHIFTOUT_FULL) && cBuffFull(stream)) cBuffPull(stream, NULL, 1, 0);
 80031e6:	78fb      	ldrb	r3, [r7, #3]
 80031e8:	f003 0301 	and.w	r3, r3, #1
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d00b      	beq.n	8003208 <searchFrameAdvance+0xca>
 80031f0:	68f8      	ldr	r0, [r7, #12]
 80031f2:	f7ff fca4 	bl	8002b3e <cBuffFull>
 80031f6:	4603      	mov	r3, r0
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d005      	beq.n	8003208 <searchFrameAdvance+0xca>
 80031fc:	2300      	movs	r3, #0
 80031fe:	2201      	movs	r2, #1
 8003200:	2100      	movs	r1, #0
 8003202:	68f8      	ldr	r0, [r7, #12]
 8003204:	f7ff fa50 	bl	80026a8 <cBuffPull>
	}

	//regardless of packet found or not, perform SHIFTOUT_FAST if requested
	if(shiftFlags & SHIFTOUT_FAST){
 8003208:	78fb      	ldrb	r3, [r7, #3]
 800320a:	f003 0310 	and.w	r3, r3, #16
 800320e:	2b00      	cmp	r3, #0
 8003210:	d01d      	beq.n	800324e <searchFrameAdvance+0x110>
		//temporary rule for searcing next occurrence of first head byte
		search_frame_rule tmpRule={ 
			.head=rule->head,
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
		search_frame_rule tmpRule={ 
 8003216:	613b      	str	r3, [r7, #16]
 8003218:	2301      	movs	r3, #1
 800321a:	617b      	str	r3, [r7, #20]
 800321c:	2300      	movs	r3, #0
 800321e:	61bb      	str	r3, [r7, #24]
 8003220:	2300      	movs	r3, #0
 8003222:	61fb      	str	r3, [r7, #28]
 8003224:	2300      	movs	r3, #0
 8003226:	623b      	str	r3, [r7, #32]
 8003228:	2300      	movs	r3, #0
 800322a:	627b      	str	r3, [r7, #36]	; 0x24
 800322c:	2300      	movs	r3, #0
 800322e:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
			.tail=NULL,
			.tailLen=0,
			.policy=hard,
		};
		//search next occurrence of first head byte
		uint32_t nextHead=searchFrame(stream,NULL,&tmpRule);
 8003232:	f107 0310 	add.w	r3, r7, #16
 8003236:	461a      	mov	r2, r3
 8003238:	2100      	movs	r1, #0
 800323a:	68f8      	ldr	r0, [r7, #12]
 800323c:	f7ff fdf5 	bl	8002e2a <searchFrame>
 8003240:	62f8      	str	r0, [r7, #44]	; 0x2c

		cBuffPull(stream, NULL, nextHead, 0);
 8003242:	2300      	movs	r3, #0
 8003244:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003246:	2100      	movs	r1, #0
 8003248:	68f8      	ldr	r0, [r7, #12]
 800324a:	f7ff fa2d 	bl	80026a8 <cBuffPull>
	}

	return found;
 800324e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8003252:	4618      	mov	r0, r3
 8003254:	3738      	adds	r7, #56	; 0x38
 8003256:	46bd      	mov	sp, r7
 8003258:	bd80      	pop	{r7, pc}
	...

0800325c <txFunc1>:
void OBC_Comm_Task(void const * argument);


//defining serial line I/O functions
//using UART driver
uint8_t txFunc1(uint8_t byte){
 800325c:	b580      	push	{r7, lr}
 800325e:	b082      	sub	sp, #8
 8003260:	af00      	add	r7, sp, #0
 8003262:	4603      	mov	r3, r0
 8003264:	71fb      	strb	r3, [r7, #7]
	return (sendDriver_UART(&huart1, &byte, 1)!=0);
 8003266:	1dfb      	adds	r3, r7, #7
 8003268:	2201      	movs	r2, #1
 800326a:	4619      	mov	r1, r3
 800326c:	4806      	ldr	r0, [pc, #24]	; (8003288 <txFunc1+0x2c>)
 800326e:	f7fe fa75 	bl	800175c <sendDriver_UART>
 8003272:	4603      	mov	r3, r0
 8003274:	2b00      	cmp	r3, #0
 8003276:	bf14      	ite	ne
 8003278:	2301      	movne	r3, #1
 800327a:	2300      	moveq	r3, #0
 800327c:	b2db      	uxtb	r3, r3
}
 800327e:	4618      	mov	r0, r3
 8003280:	3708      	adds	r7, #8
 8003282:	46bd      	mov	sp, r7
 8003284:	bd80      	pop	{r7, pc}
 8003286:	bf00      	nop
 8003288:	20021bcc 	.word	0x20021bcc

0800328c <rxFunc1>:
uint8_t rxFunc1(uint8_t* byte){
 800328c:	b580      	push	{r7, lr}
 800328e:	b082      	sub	sp, #8
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
	return (receiveDriver_UART(&huart1, byte, 1)!=0);
 8003294:	2201      	movs	r2, #1
 8003296:	6879      	ldr	r1, [r7, #4]
 8003298:	4806      	ldr	r0, [pc, #24]	; (80032b4 <rxFunc1+0x28>)
 800329a:	f7fe fa0d 	bl	80016b8 <receiveDriver_UART>
 800329e:	4603      	mov	r3, r0
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	bf14      	ite	ne
 80032a4:	2301      	movne	r3, #1
 80032a6:	2300      	moveq	r3, #0
 80032a8:	b2db      	uxtb	r3, r3
}
 80032aa:	4618      	mov	r0, r3
 80032ac:	3708      	adds	r7, #8
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bd80      	pop	{r7, pc}
 80032b2:	bf00      	nop
 80032b4:	20021bcc 	.word	0x20021bcc

080032b8 <sdlTimeTick>:
uint8_t rxFunc4(uint8_t* byte){
	return (receiveDriver_UART(&huart4, byte, 1)!=0);
}

//defining tick function for timeouts
uint32_t sdlTimeTick(){
 80032b8:	b580      	push	{r7, lr}
 80032ba:	af00      	add	r7, sp, #0
	return HAL_GetTick();
 80032bc:	f002 fff0 	bl	80062a0 <HAL_GetTick>
 80032c0:	4603      	mov	r3, r0
}
 80032c2:	4618      	mov	r0, r3
 80032c4:	bd80      	pop	{r7, pc}
	...

080032c8 <__io_putchar>:

/*PUTCHAR_PROTOTYPE{
   HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
   return ch;
}*/
PUTCHAR_PROTOTYPE{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b084      	sub	sp, #16
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
	uint8_t c=(uint8_t)ch;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	b2db      	uxtb	r3, r3
 80032d4:	73fb      	strb	r3, [r7, #15]
	sendDriver_UART(&huart2,&c,1);
 80032d6:	f107 030f 	add.w	r3, r7, #15
 80032da:	2201      	movs	r2, #1
 80032dc:	4619      	mov	r1, r3
 80032de:	4804      	ldr	r0, [pc, #16]	; (80032f0 <__io_putchar+0x28>)
 80032e0:	f7fe fa3c 	bl	800175c <sendDriver_UART>
	return c;
 80032e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80032e6:	4618      	mov	r0, r3
 80032e8:	3710      	adds	r7, #16
 80032ea:	46bd      	mov	sp, r7
 80032ec:	bd80      	pop	{r7, pc}
 80032ee:	bf00      	nop
 80032f0:	20021c50 	.word	0x20021c50

080032f4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80032f4:	b480      	push	{r7}
 80032f6:	b085      	sub	sp, #20
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	60f8      	str	r0, [r7, #12]
 80032fc:	60b9      	str	r1, [r7, #8]
 80032fe:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	4a07      	ldr	r2, [pc, #28]	; (8003320 <vApplicationGetIdleTaskMemory+0x2c>)
 8003304:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8003306:	68bb      	ldr	r3, [r7, #8]
 8003308:	4a06      	ldr	r2, [pc, #24]	; (8003324 <vApplicationGetIdleTaskMemory+0x30>)
 800330a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2280      	movs	r2, #128	; 0x80
 8003310:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8003312:	bf00      	nop
 8003314:	3714      	adds	r7, #20
 8003316:	46bd      	mov	sp, r7
 8003318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331c:	4770      	bx	lr
 800331e:	bf00      	nop
 8003320:	2001ca80 	.word	0x2001ca80
 8003324:	2001cad4 	.word	0x2001cad4

08003328 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 8003328:	b480      	push	{r7}
 800332a:	b085      	sub	sp, #20
 800332c:	af00      	add	r7, sp, #0
 800332e:	60f8      	str	r0, [r7, #12]
 8003330:	60b9      	str	r1, [r7, #8]
 8003332:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	4a07      	ldr	r2, [pc, #28]	; (8003354 <vApplicationGetTimerTaskMemory+0x2c>)
 8003338:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 800333a:	68bb      	ldr	r3, [r7, #8]
 800333c:	4a06      	ldr	r2, [pc, #24]	; (8003358 <vApplicationGetTimerTaskMemory+0x30>)
 800333e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003346:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8003348:	bf00      	nop
 800334a:	3714      	adds	r7, #20
 800334c:	46bd      	mov	sp, r7
 800334e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003352:	4770      	bx	lr
 8003354:	2001ccd4 	.word	0x2001ccd4
 8003358:	2001cd28 	.word	0x2001cd28

0800335c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800335c:	b5b0      	push	{r4, r5, r7, lr}
 800335e:	b0bc      	sub	sp, #240	; 0xf0
 8003360:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */

	initDriver_UART();
 8003362:	f7fe f8cd 	bl	8001500 <initDriver_UART>
	//UART1 = for printf
	addDriver_UART(&huart2,USART2_IRQn,keep_old);
 8003366:	2200      	movs	r2, #0
 8003368:	2126      	movs	r1, #38	; 0x26
 800336a:	4882      	ldr	r0, [pc, #520]	; (8003574 <MX_FREERTOS_Init+0x218>)
 800336c:	f7fe f8e6 	bl	800153c <addDriver_UART>
	//UART1 = for OBC communication
	addDriver_UART(&huart1,USART1_IRQn,keep_old);
 8003370:	2200      	movs	r2, #0
 8003372:	2125      	movs	r1, #37	; 0x25
 8003374:	4880      	ldr	r0, [pc, #512]	; (8003578 <MX_FREERTOS_Init+0x21c>)
 8003376:	f7fe f8e1 	bl	800153c <addDriver_UART>
	//UART1 = for IMU
	addDriver_UART(&huart4,UART4_IRQn,keep_new);
 800337a:	2201      	movs	r2, #1
 800337c:	2134      	movs	r1, #52	; 0x34
 800337e:	487f      	ldr	r0, [pc, #508]	; (800357c <MX_FREERTOS_Init+0x220>)
 8003380:	f7fe f8dc 	bl	800153c <addDriver_UART>

  /* USER CODE END Init */

  /* USER CODE BEGIN RTOS_MUTEX */
  /* add mutexes, ... */
	ControlMutex = xSemaphoreCreateMutexStatic(&xControlMutexBuffer);
 8003384:	497e      	ldr	r1, [pc, #504]	; (8003580 <MX_FREERTOS_Init+0x224>)
 8003386:	2001      	movs	r0, #1
 8003388:	f00a f809 	bl	800d39e <xQueueCreateMutexStatic>
 800338c:	4603      	mov	r3, r0
 800338e:	4a7d      	ldr	r2, [pc, #500]	; (8003584 <MX_FREERTOS_Init+0x228>)
 8003390:	6013      	str	r3, [r2, #0]
	configASSERT(ControlMutex);
 8003392:	4b7c      	ldr	r3, [pc, #496]	; (8003584 <MX_FREERTOS_Init+0x228>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d10b      	bne.n	80033b2 <MX_FREERTOS_Init+0x56>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800339a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800339e:	f383 8811 	msr	BASEPRI, r3
 80033a2:	f3bf 8f6f 	isb	sy
 80033a6:	f3bf 8f4f 	dsb	sy
 80033aa:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80033ae:	bf00      	nop
 80033b0:	e7fe      	b.n	80033b0 <MX_FREERTOS_Init+0x54>
	xSemaphoreGive(ControlMutex);
 80033b2:	4b74      	ldr	r3, [pc, #464]	; (8003584 <MX_FREERTOS_Init+0x228>)
 80033b4:	6818      	ldr	r0, [r3, #0]
 80033b6:	2300      	movs	r3, #0
 80033b8:	2200      	movs	r2, #0
 80033ba:	2100      	movs	r1, #0
 80033bc:	f00a f80a 	bl	800d3d4 <xQueueGenericSend>
	IMURead_ControlMutex = xSemaphoreCreateMutexStatic(&xIMURead_ControlMutexBuffer);
 80033c0:	4971      	ldr	r1, [pc, #452]	; (8003588 <MX_FREERTOS_Init+0x22c>)
 80033c2:	2001      	movs	r0, #1
 80033c4:	f009 ffeb 	bl	800d39e <xQueueCreateMutexStatic>
 80033c8:	4603      	mov	r3, r0
 80033ca:	4a70      	ldr	r2, [pc, #448]	; (800358c <MX_FREERTOS_Init+0x230>)
 80033cc:	6013      	str	r3, [r2, #0]
	configASSERT(IMURead_ControlMutex);
 80033ce:	4b6f      	ldr	r3, [pc, #444]	; (800358c <MX_FREERTOS_Init+0x230>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d10b      	bne.n	80033ee <MX_FREERTOS_Init+0x92>
	__asm volatile
 80033d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033da:	f383 8811 	msr	BASEPRI, r3
 80033de:	f3bf 8f6f 	isb	sy
 80033e2:	f3bf 8f4f 	dsb	sy
 80033e6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
}
 80033ea:	bf00      	nop
 80033ec:	e7fe      	b.n	80033ec <MX_FREERTOS_Init+0x90>
	xSemaphoreGive(IMURead_ControlMutex);
 80033ee:	4b67      	ldr	r3, [pc, #412]	; (800358c <MX_FREERTOS_Init+0x230>)
 80033f0:	6818      	ldr	r0, [r3, #0]
 80033f2:	2300      	movs	r3, #0
 80033f4:	2200      	movs	r2, #0
 80033f6:	2100      	movs	r1, #0
 80033f8:	f009 ffec 	bl	800d3d4 <xQueueGenericSend>

  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of setAttitudeSem */
	osSemaphoreStaticDef(setAttitudeSem, &setAttitudeSemControlBlock);
 80033fc:	2300      	movs	r3, #0
 80033fe:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003402:	4b63      	ldr	r3, [pc, #396]	; (8003590 <MX_FREERTOS_Init+0x234>)
 8003404:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
	setAttitudeSemHandle = osSemaphoreCreate(osSemaphore(setAttitudeSem), 1);
 8003408:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800340c:	2101      	movs	r1, #1
 800340e:	4618      	mov	r0, r3
 8003410:	f009 fd19 	bl	800ce46 <osSemaphoreCreate>
 8003414:	4603      	mov	r3, r0
 8003416:	4a5f      	ldr	r2, [pc, #380]	; (8003594 <MX_FREERTOS_Init+0x238>)
 8003418:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  /* definition and creation of IMUQueue1 */
	osMessageQStaticDef(IMUQueue1, 512, uint32_t,IMUQueue1Buffer, &IMUQueue1ControlBlock);
 800341a:	4b5f      	ldr	r3, [pc, #380]	; (8003598 <MX_FREERTOS_Init+0x23c>)
 800341c:	f107 04d0 	add.w	r4, r7, #208	; 0xd0
 8003420:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003422:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	IMUQueue1Handle = osMessageCreate(osMessageQ(IMUQueue1), NULL);
 8003426:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800342a:	2100      	movs	r1, #0
 800342c:	4618      	mov	r0, r3
 800342e:	f009 fd22 	bl	800ce76 <osMessageCreate>
 8003432:	4603      	mov	r3, r0
 8003434:	4a59      	ldr	r2, [pc, #356]	; (800359c <MX_FREERTOS_Init+0x240>)
 8003436:	6013      	str	r3, [r2, #0]
  /* definition and creation of IMUQueue2 */
	osMessageQStaticDef(IMUQueue2, 512, uint32_t, IMUQueue2Buffer, &IMUQueue2ControlBlock);
 8003438:	4b59      	ldr	r3, [pc, #356]	; (80035a0 <MX_FREERTOS_Init+0x244>)
 800343a:	f107 04c0 	add.w	r4, r7, #192	; 0xc0
 800343e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003440:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	IMUQueue2Handle = osMessageCreate(osMessageQ(IMUQueue2), NULL);
 8003444:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8003448:	2100      	movs	r1, #0
 800344a:	4618      	mov	r0, r3
 800344c:	f009 fd13 	bl	800ce76 <osMessageCreate>
 8003450:	4603      	mov	r3, r0
 8003452:	4a54      	ldr	r2, [pc, #336]	; (80035a4 <MX_FREERTOS_Init+0x248>)
 8003454:	6013      	str	r3, [r2, #0]
  /* definition and creation of ADCSHouseKeepingQueue */
	osMessageQStaticDef(ADCSHouseKeepingQueue, 512, uint32_t, ADCSHouseKeepingQueueBuffer, &ADCSHouseKeepingQueueControlBlock);
 8003456:	4b54      	ldr	r3, [pc, #336]	; (80035a8 <MX_FREERTOS_Init+0x24c>)
 8003458:	f107 04b0 	add.w	r4, r7, #176	; 0xb0
 800345c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800345e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	ADCSHouseKeepingQueueHandle = osMessageCreate(osMessageQ(ADCSHouseKeepingQueue), NULL);
 8003462:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8003466:	2100      	movs	r1, #0
 8003468:	4618      	mov	r0, r3
 800346a:	f009 fd04 	bl	800ce76 <osMessageCreate>
 800346e:	4603      	mov	r3, r0
 8003470:	4a4e      	ldr	r2, [pc, #312]	; (80035ac <MX_FREERTOS_Init+0x250>)
 8003472:	6013      	str	r3, [r2, #0]
  /* definition and creation of setAttitudeADCSQueue */
	osMessageQStaticDef(setAttitudeADCSQueue, 512, uint32_t,setAttitudeADCSQueueBuffer, &setAttitudeADCSQueueControlBlock);
 8003474:	4b4e      	ldr	r3, [pc, #312]	; (80035b0 <MX_FREERTOS_Init+0x254>)
 8003476:	f107 04a0 	add.w	r4, r7, #160	; 0xa0
 800347a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800347c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	setAttitudeADCSQueueHandle = osMessageCreate(osMessageQ(setAttitudeADCSQueue), NULL);
 8003480:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003484:	2100      	movs	r1, #0
 8003486:	4618      	mov	r0, r3
 8003488:	f009 fcf5 	bl	800ce76 <osMessageCreate>
 800348c:	4603      	mov	r3, r0
 800348e:	4a49      	ldr	r2, [pc, #292]	; (80035b4 <MX_FREERTOS_Init+0x258>)
 8003490:	6013      	str	r3, [r2, #0]
  /* definition and creation of setOpModeADCSQueue */
	osMessageQStaticDef(setOpModeADCSQueue, 32, uint32_t,setOpModeADCSQueueBuffer, &setOpModeADCSQueueControlBlock);
 8003492:	4b49      	ldr	r3, [pc, #292]	; (80035b8 <MX_FREERTOS_Init+0x25c>)
 8003494:	f107 0490 	add.w	r4, r7, #144	; 0x90
 8003498:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800349a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	setOpModeADCSQueueHandle = osMessageCreate(osMessageQ(setOpModeADCSQueue), NULL);
 800349e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80034a2:	2100      	movs	r1, #0
 80034a4:	4618      	mov	r0, r3
 80034a6:	f009 fce6 	bl	800ce76 <osMessageCreate>
 80034aa:	4603      	mov	r3, r0
 80034ac:	4a43      	ldr	r2, [pc, #268]	; (80035bc <MX_FREERTOS_Init+0x260>)
 80034ae:	6013      	str	r3, [r2, #0]

  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
	osThreadStaticDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128, defaultTaskBuffer, &defaultTaskControlBlock);
 80034b0:	4b43      	ldr	r3, [pc, #268]	; (80035c0 <MX_FREERTOS_Init+0x264>)
 80034b2:	f107 0474 	add.w	r4, r7, #116	; 0x74
 80034b6:	461d      	mov	r5, r3
 80034b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80034ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80034bc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80034c0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80034c4:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80034c8:	2100      	movs	r1, #0
 80034ca:	4618      	mov	r0, r3
 80034cc:	f009 fc82 	bl	800cdd4 <osThreadCreate>
 80034d0:	4603      	mov	r3, r0
 80034d2:	4a3c      	ldr	r2, [pc, #240]	; (80035c4 <MX_FREERTOS_Init+0x268>)
 80034d4:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* definition and creation of FirstCheckTask */
    osThreadStaticDef(FirstCheckTask, Check_current_temp, osPriorityAboveNormal, 0, stack_size, FirstCheckTaskBuffer, &FirstCheckTaskControlBlock);
 80034d6:	4b3c      	ldr	r3, [pc, #240]	; (80035c8 <MX_FREERTOS_Init+0x26c>)
 80034d8:	f107 0458 	add.w	r4, r7, #88	; 0x58
 80034dc:	461d      	mov	r5, r3
 80034de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80034e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80034e2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80034e6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  	FirstCheckTaskHandle = osThreadCreate(osThread(FirstCheckTask), NULL);
 80034ea:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80034ee:	2100      	movs	r1, #0
 80034f0:	4618      	mov	r0, r3
 80034f2:	f009 fc6f 	bl	800cdd4 <osThreadCreate>
 80034f6:	4603      	mov	r3, r0
 80034f8:	4a34      	ldr	r2, [pc, #208]	; (80035cc <MX_FREERTOS_Init+0x270>)
 80034fa:	6013      	str	r3, [r2, #0]
  /* definition and creation of ControlAlgorithmTask */
	osThreadStaticDef(ControlAlgorithmTask, Control_Algorithm_Task, osPriorityNormal, 0,stack_size, ControlAlgorithmTaskBuffer, &ControlAlgorithmTaskControlBlock);
 80034fc:	4b34      	ldr	r3, [pc, #208]	; (80035d0 <MX_FREERTOS_Init+0x274>)
 80034fe:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8003502:	461d      	mov	r5, r3
 8003504:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003506:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003508:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800350c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	ControlAlgorithmTaskHandle = osThreadCreate(osThread(ControlAlgorithmTask), NULL);
 8003510:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003514:	2100      	movs	r1, #0
 8003516:	4618      	mov	r0, r3
 8003518:	f009 fc5c 	bl	800cdd4 <osThreadCreate>
 800351c:	4603      	mov	r3, r0
 800351e:	4a2d      	ldr	r2, [pc, #180]	; (80035d4 <MX_FREERTOS_Init+0x278>)
 8003520:	6013      	str	r3, [r2, #0]
  /* definition and creation of IMUTask */
	osThreadStaticDef(IMUTask, IMU_Task, osPriorityNormal, 0,stack_size, IMUTaskBuffer, &IMUTaskControlBlock);
 8003522:	4b2d      	ldr	r3, [pc, #180]	; (80035d8 <MX_FREERTOS_Init+0x27c>)
 8003524:	f107 0420 	add.w	r4, r7, #32
 8003528:	461d      	mov	r5, r3
 800352a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800352c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800352e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003532:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	IMUTaskHandle = osThreadCreate(osThread(IMUTask), NULL);
 8003536:	f107 0320 	add.w	r3, r7, #32
 800353a:	2100      	movs	r1, #0
 800353c:	4618      	mov	r0, r3
 800353e:	f009 fc49 	bl	800cdd4 <osThreadCreate>
 8003542:	4603      	mov	r3, r0
 8003544:	4a25      	ldr	r2, [pc, #148]	; (80035dc <MX_FREERTOS_Init+0x280>)
 8003546:	6013      	str	r3, [r2, #0]
  /* definition and creation of OBC_CommTaskHandle */
	osThreadStaticDef(OBC_CommTask, OBC_Comm_Task, osPriorityAboveNormal, 0,stack_size1, OBC_CommTaskBuffer, &OBC_CommTaskControlBlock);
 8003548:	4b25      	ldr	r3, [pc, #148]	; (80035e0 <MX_FREERTOS_Init+0x284>)
 800354a:	1d3c      	adds	r4, r7, #4
 800354c:	461d      	mov	r5, r3
 800354e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003550:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003552:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003556:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	OBC_CommTaskHandle = osThreadCreate(osThread(OBC_CommTask), NULL);
 800355a:	1d3b      	adds	r3, r7, #4
 800355c:	2100      	movs	r1, #0
 800355e:	4618      	mov	r0, r3
 8003560:	f009 fc38 	bl	800cdd4 <osThreadCreate>
 8003564:	4603      	mov	r3, r0
 8003566:	4a1f      	ldr	r2, [pc, #124]	; (80035e4 <MX_FREERTOS_Init+0x288>)
 8003568:	6013      	str	r3, [r2, #0]


  /* USER CODE END RTOS_THREADS */

}
 800356a:	bf00      	nop
 800356c:	37f0      	adds	r7, #240	; 0xf0
 800356e:	46bd      	mov	sp, r7
 8003570:	bdb0      	pop	{r4, r5, r7, pc}
 8003572:	bf00      	nop
 8003574:	20021c50 	.word	0x20021c50
 8003578:	20021bcc 	.word	0x20021bcc
 800357c:	20021b48 	.word	0x20021b48
 8003580:	20018dac 	.word	0x20018dac
 8003584:	20018da8 	.word	0x20018da8
 8003588:	20018df8 	.word	0x20018df8
 800358c:	20018df4 	.word	0x20018df4
 8003590:	2001ca38 	.word	0x2001ca38
 8003594:	2001ca34 	.word	0x2001ca34
 8003598:	08012594 	.word	0x08012594
 800359c:	2001928c 	.word	0x2001928c
 80035a0:	080125a4 	.word	0x080125a4
 80035a4:	2001aad8 	.word	0x2001aad8
 80035a8:	080125b4 	.word	0x080125b4
 80035ac:	20018e40 	.word	0x20018e40
 80035b0:	080125c4 	.word	0x080125c4
 80035b4:	2001c324 	.word	0x2001c324
 80035b8:	080125d4 	.word	0x080125d4
 80035bc:	2001c770 	.word	0x2001c770
 80035c0:	080125e4 	.word	0x080125e4
 80035c4:	2001c7dc 	.word	0x2001c7dc
 80035c8:	08012600 	.word	0x08012600
 80035cc:	20004c48 	.word	0x20004c48
 80035d0:	0801261c 	.word	0x0801261c
 80035d4:	20008ca0 	.word	0x20008ca0
 80035d8:	08012638 	.word	0x08012638
 80035dc:	2000ccf8 	.word	0x2000ccf8
 80035e0:	08012654 	.word	0x08012654
 80035e4:	20010d50 	.word	0x20010d50

080035e8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b082      	sub	sp, #8
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80035f0:	2001      	movs	r0, #1
 80035f2:	f009 fc14 	bl	800ce1e <osDelay>
 80035f6:	e7fb      	b.n	80035f0 <StartDefaultTask+0x8>

080035f8 <Check_current_temp>:
/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */


void Check_current_temp(void const * argument)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b090      	sub	sp, #64	; 0x40
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Check_pwr_temp */
	//declaring serial line
	//static serial_line_handle line;
	//Inizialize Serial Line for UART3
	//sdlInitLine(&line,&txFunc3,&rxFunc3,50,2);
	init_tempsens_handler(&ntc_values);
 8003600:	483e      	ldr	r0, [pc, #248]	; (80036fc <Check_current_temp+0x104>)
 8003602:	f000 fd89 	bl	8004118 <init_tempsens_handler>
	volatile float currentbuf[NUM_ACTUATORS],voltagebuf[NUM_ACTUATORS];
	Current_Temp_Struct *local_current_temp_struct = (Current_Temp_Struct*) malloc(sizeof(Current_Temp_Struct));
 8003606:	2034      	movs	r0, #52	; 0x34
 8003608:	f00b ffb8 	bl	800f57c <malloc>
 800360c:	4603      	mov	r3, r0
 800360e:	637b      	str	r3, [r7, #52]	; 0x34
	static uint8_t count = 0;
	
	/*Start calibration */
	if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED) !=  HAL_OK)
 8003610:	217f      	movs	r1, #127	; 0x7f
 8003612:	483b      	ldr	r0, [pc, #236]	; (8003700 <Check_current_temp+0x108>)
 8003614:	f004 f8e4 	bl	80077e0 <HAL_ADCEx_Calibration_Start>
#endif
		//----------------------------------------------------------------------

		//GET TEMPERATURES------------------------------------------------------
		//float prev1 = HAL_GetTick();
		get_temperatures(&hspi2,&ntc_values,count);
 8003618:	4b3a      	ldr	r3, [pc, #232]	; (8003704 <Check_current_temp+0x10c>)
 800361a:	781b      	ldrb	r3, [r3, #0]
 800361c:	461a      	mov	r2, r3
 800361e:	4937      	ldr	r1, [pc, #220]	; (80036fc <Check_current_temp+0x104>)
 8003620:	4839      	ldr	r0, [pc, #228]	; (8003708 <Check_current_temp+0x110>)
 8003622:	f000 ffd5 	bl	80045d0 <get_temperatures>
		//float next1 = HAL_GetTick();
		//printf("Execussion of get_temperatures: %.1f ms\n",next1-prev1);
		count ++;
 8003626:	4b37      	ldr	r3, [pc, #220]	; (8003704 <Check_current_temp+0x10c>)
 8003628:	781b      	ldrb	r3, [r3, #0]
 800362a:	3301      	adds	r3, #1
 800362c:	b2da      	uxtb	r2, r3
 800362e:	4b35      	ldr	r3, [pc, #212]	; (8003704 <Check_current_temp+0x10c>)
 8003630:	701a      	strb	r2, [r3, #0]
		//----------------------------------------------------------------------

		//GET ACTUATORS CURRENT
		get_actuator_current(&hadc1,voltagebuf,currentbuf,Channels_mask);
 8003632:	f107 0220 	add.w	r2, r7, #32
 8003636:	f107 010c 	add.w	r1, r7, #12
 800363a:	4b34      	ldr	r3, [pc, #208]	; (800370c <Check_current_temp+0x114>)
 800363c:	4830      	ldr	r0, [pc, #192]	; (8003700 <Check_current_temp+0x108>)
 800363e:	f7fe fbe7 	bl	8001e10 <get_actuator_current>
				error_status = 3;
			}

		}
		 */
		switch(error_status)
 8003642:	4b33      	ldr	r3, [pc, #204]	; (8003710 <Check_current_temp+0x118>)
 8003644:	781b      	ldrb	r3, [r3, #0]
 8003646:	2b05      	cmp	r3, #5
 8003648:	d852      	bhi.n	80036f0 <Check_current_temp+0xf8>
 800364a:	a201      	add	r2, pc, #4	; (adr r2, 8003650 <Check_current_temp+0x58>)
 800364c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003650:	08003669 	.word	0x08003669
 8003654:	080036f1 	.word	0x080036f1
 8003658:	080036f1 	.word	0x080036f1
 800365c:	080036f1 	.word	0x080036f1
 8003660:	080036f1 	.word	0x080036f1
 8003664:	080036f1 	.word	0x080036f1
		{
			case 0:
				//ALL IS OK
				//Send Housekeeping to OBC task
				
				if (local_current_temp_struct == NULL) {
 8003668:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800366a:	2b00      	cmp	r3, #0
 800366c:	d03f      	beq.n	80036ee <Check_current_temp+0xf6>
					   printf("IMU TASK: allocazione struttura fallita !\n");
#endif
				}
				else
				{
					if(count == 8)
 800366e:	4b25      	ldr	r3, [pc, #148]	; (8003704 <Check_current_temp+0x10c>)
 8003670:	781b      	ldrb	r3, [r3, #0]
 8003672:	2b08      	cmp	r3, #8
 8003674:	d13b      	bne.n	80036ee <Check_current_temp+0xf6>
					{
						for(int i=0;i<NUM_ACTUATORS;i++)
 8003676:	2300      	movs	r3, #0
 8003678:	63fb      	str	r3, [r7, #60]	; 0x3c
 800367a:	e00d      	b.n	8003698 <Check_current_temp+0xa0>
						{
							local_current_temp_struct->current[i] = currentbuf[i];
 800367c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800367e:	009b      	lsls	r3, r3, #2
 8003680:	3340      	adds	r3, #64	; 0x40
 8003682:	443b      	add	r3, r7
 8003684:	3b20      	subs	r3, #32
 8003686:	681a      	ldr	r2, [r3, #0]
 8003688:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800368a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800368c:	009b      	lsls	r3, r3, #2
 800368e:	440b      	add	r3, r1
 8003690:	601a      	str	r2, [r3, #0]
						for(int i=0;i<NUM_ACTUATORS;i++)
 8003692:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003694:	3301      	adds	r3, #1
 8003696:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003698:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800369a:	2b04      	cmp	r3, #4
 800369c:	ddee      	ble.n	800367c <Check_current_temp+0x84>
#if enable_printf
							printf("Task check: Current n%d,value: %f,current vect:%f \n",i+1,local_current_temp_struct->current[i],currentbuf[i]);
#endif
			    		}
						for(int i=NUM_ACTUATORS;i<NUM_TEMP_SENS+NUM_ACTUATORS;i++)
 800369e:	2305      	movs	r3, #5
 80036a0:	63bb      	str	r3, [r7, #56]	; 0x38
 80036a2:	e010      	b.n	80036c6 <Check_current_temp+0xce>
						{
							local_current_temp_struct->temperature[i - NUM_ACTUATORS] = ntc_values.temp[i - NUM_ACTUATORS];
 80036a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036a6:	1f5a      	subs	r2, r3, #5
 80036a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036aa:	3b05      	subs	r3, #5
 80036ac:	4913      	ldr	r1, [pc, #76]	; (80036fc <Check_current_temp+0x104>)
 80036ae:	0092      	lsls	r2, r2, #2
 80036b0:	440a      	add	r2, r1
 80036b2:	6812      	ldr	r2, [r2, #0]
 80036b4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80036b6:	3304      	adds	r3, #4
 80036b8:	009b      	lsls	r3, r3, #2
 80036ba:	440b      	add	r3, r1
 80036bc:	3304      	adds	r3, #4
 80036be:	601a      	str	r2, [r3, #0]
						for(int i=NUM_ACTUATORS;i<NUM_TEMP_SENS+NUM_ACTUATORS;i++)
 80036c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036c2:	3301      	adds	r3, #1
 80036c4:	63bb      	str	r3, [r7, #56]	; 0x38
 80036c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036c8:	2b0c      	cmp	r3, #12
 80036ca:	ddeb      	ble.n	80036a4 <Check_current_temp+0xac>
							printf("Task check: Temperature n%d,ntc value: %f,value: %f \n",i-4,ntc_values.temp[i-NUM_ACTUATORS],local_current_temp_struct->temperature[i-NUM_ACTUATORS]);
#endif
						}

						//Invio queue a OBC Task
						if (osMessagePut(ADCSHouseKeepingQueueHandle,(uint32_t)local_current_temp_struct,300) != osOK) {
 80036cc:	4b11      	ldr	r3, [pc, #68]	; (8003714 <Check_current_temp+0x11c>)
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80036d2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80036d6:	4618      	mov	r0, r3
 80036d8:	f009 fbe4 	bl	800cea4 <osMessagePut>
 80036dc:	4603      	mov	r3, r0
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d002      	beq.n	80036e8 <Check_current_temp+0xf0>
#if enable_printf
			    		   	printf("Invio a OBC Task fallito \n");
#endif
			       			free(local_current_temp_struct); // Ensure the receiving task has time to process
 80036e2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80036e4:	f00b ff52 	bl	800f58c <free>
						} else {
#if enable_printf
			    		    printf("Dati Inviati a OBC Task\n");
#endif
						}
						count = 0;
 80036e8:	4b06      	ldr	r3, [pc, #24]	; (8003704 <Check_current_temp+0x10c>)
 80036ea:	2200      	movs	r2, #0
 80036ec:	701a      	strb	r2, [r3, #0]
					}
				}
				break;
 80036ee:	bf00      	nop
				break;

		}
		//volatile next = HAL_GetTick();
		//printf("Execussion of check task: %.1f ms\n",next-prev);
	    osDelay(300);
 80036f0:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80036f4:	f009 fb93 	bl	800ce1e <osDelay>
		get_temperatures(&hspi2,&ntc_values,count);
 80036f8:	e78e      	b.n	8003618 <Check_current_temp+0x20>
 80036fa:	bf00      	nop
 80036fc:	20004a2c 	.word	0x20004a2c
 8003700:	2000499c 	.word	0x2000499c
 8003704:	2001d128 	.word	0x2001d128
 8003708:	200219b0 	.word	0x200219b0
 800370c:	20000000 	.word	0x20000000
 8003710:	20004c44 	.word	0x20004c44
 8003714:	20018e40 	.word	0x20018e40

08003718 <OBC_Comm_Task>:
  /* USER CODE END Check_pwr_temp */
}


void OBC_Comm_Task(void const * argument)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	f6ad 0de8 	subw	sp, sp, #2280	; 0x8e8
 800371e:	af02      	add	r7, sp, #8
 8003720:	f507 630e 	add.w	r3, r7, #2272	; 0x8e0
 8003724:	f6a3 03cc 	subw	r3, r3, #2252	; 0x8cc
 8003728:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN OBC_Comm_Task */
	static serial_line_handle line1;
	//Inizialize Serial Line for UART1
	sdlInitLine(&line1,&txFunc1,&rxFunc1,50,2);
 800372a:	2302      	movs	r3, #2
 800372c:	9300      	str	r3, [sp, #0]
 800372e:	2332      	movs	r3, #50	; 0x32
 8003730:	4a9d      	ldr	r2, [pc, #628]	; (80039a8 <OBC_Comm_Task+0x290>)
 8003732:	499e      	ldr	r1, [pc, #632]	; (80039ac <OBC_Comm_Task+0x294>)
 8003734:	489e      	ldr	r0, [pc, #632]	; (80039b0 <OBC_Comm_Task+0x298>)
 8003736:	f001 fcb7 	bl	80050a8 <sdlInitLine>

	uint8_t opmode=0;
 800373a:	2300      	movs	r3, #0
 800373c:	f887 38df 	strb.w	r3, [r7, #2271]	; 0x8df
	uint32_t rxLen;

	setAttitudeADCS *RxAttitude = (setAttitudeADCS*) malloc(sizeof(setAttitudeADCS));
 8003740:	2025      	movs	r0, #37	; 0x25
 8003742:	f00b ff1b 	bl	800f57c <malloc>
 8003746:	4603      	mov	r3, r0
 8003748:	f8c7 38cc 	str.w	r3, [r7, #2252]	; 0x8cc
	housekeepingADCS TxHousekeeping;
	attitudeADCS TxAttitude;
	setOpmodeADCS RxOpMode;
	//opmodeADCS TxOpMode;
	osEvent retvalue1,retvalue;
	uint8_t cnt1 = 0,cnt2 = 0;
 800374c:	2300      	movs	r3, #0
 800374e:	f887 38de 	strb.w	r3, [r7, #2270]	; 0x8de
 8003752:	2300      	movs	r3, #0
 8003754:	f887 38dd 	strb.w	r3, [r7, #2269]	; 0x8dd
#if enable_printf
	  //printf("We are in OBC TASK \n");
#endif
	  /*-------------------RECEIVE FROM OBC-------------------------*/
	  //trying to receive a message
	  rxLen=sdlReceive(&line1,(uint8_t *)rxBuff,sizeof(rxBuff));
 8003758:	f107 0320 	add.w	r3, r7, #32
 800375c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003760:	4619      	mov	r1, r3
 8003762:	4893      	ldr	r0, [pc, #588]	; (80039b0 <OBC_Comm_Task+0x298>)
 8003764:	f001 fd5d 	bl	8005222 <sdlReceive>
 8003768:	f8c7 08c8 	str.w	r0, [r7, #2248]	; 0x8c8
	  if(rxLen){
 800376c:	f8d7 38c8 	ldr.w	r3, [r7, #2248]	; 0x8c8
 8003770:	2b00      	cmp	r3, #0
 8003772:	d052      	beq.n	800381a <OBC_Comm_Task+0x102>
#if enable_printf
	  	printf("OBC TASK: Received %lu bytes !!!!!!!!!!!!\n",rxLen);
#endif
	  	if(rxBuff[0]==SETOPMODEADCS_CODE && rxLen==sizeof(setOpmodeADCS)){
 8003774:	f507 630e 	add.w	r3, r7, #2272	; 0x8e0
 8003778:	f5a3 630c 	sub.w	r3, r3, #2240	; 0x8c0
 800377c:	781b      	ldrb	r3, [r3, #0]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d10f      	bne.n	80037a2 <OBC_Comm_Task+0x8a>
 8003782:	f8d7 38c8 	ldr.w	r3, [r7, #2248]	; 0x8c8
 8003786:	2b02      	cmp	r3, #2
 8003788:	d10b      	bne.n	80037a2 <OBC_Comm_Task+0x8a>
 800378a:	f507 630e 	add.w	r3, r7, #2272	; 0x8e0
 800378e:	f5a3 630c 	sub.w	r3, r3, #2240	; 0x8c0
 8003792:	881b      	ldrh	r3, [r3, #0]
#if enable_printf
	  		printf("Received setOpmodeADCS message\n");
#endif
	  		//setOpmodeADCS msgStruct;
	  		memcpy(&RxOpMode,rxBuff,sizeof(setOpmodeADCS));
 8003794:	f8a7 3838 	strh.w	r3, [r7, #2104]	; 0x838
	  		opmode=RxOpMode.opmode;
 8003798:	f897 3839 	ldrb.w	r3, [r7, #2105]	; 0x839
 800379c:	f887 38df 	strb.w	r3, [r7, #2271]	; 0x8df
 80037a0:	e03b      	b.n	800381a <OBC_Comm_Task+0x102>
#if enable_printf
	  		printf("Opmode changed to %u\n",opmode);
#endif
	  	}else if(rxBuff[0]==SETATTITUDEADCS_CODE && rxLen==sizeof(setAttitudeADCS)){
 80037a2:	f507 630e 	add.w	r3, r7, #2272	; 0x8e0
 80037a6:	f5a3 630c 	sub.w	r3, r3, #2240	; 0x8c0
 80037aa:	781b      	ldrb	r3, [r3, #0]
 80037ac:	2b01      	cmp	r3, #1
 80037ae:	d134      	bne.n	800381a <OBC_Comm_Task+0x102>
 80037b0:	f8d7 38c8 	ldr.w	r3, [r7, #2248]	; 0x8c8
 80037b4:	2b25      	cmp	r3, #37	; 0x25
 80037b6:	d11b      	bne.n	80037f0 <OBC_Comm_Task+0xd8>
#if enable_printf
  			printf("OBC TASK:Received setAttitudeADCS message!!!!!!!!!\n");
#endif
  			//do something...
  			//Send opMode = setattitudeadcs to Control Task
			if (RxAttitude == NULL) {
 80037b8:	f8d7 38cc 	ldr.w	r3, [r7, #2252]	; 0x8cc
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d02c      	beq.n	800381a <OBC_Comm_Task+0x102>
					   printf("OBC TASK: allocazione struttura RxAttitude fallita !\n");
#endif
			}
			else
			{
				memcpy(RxAttitude,rxBuff,sizeof(setAttitudeADCS));
 80037c0:	f107 0320 	add.w	r3, r7, #32
 80037c4:	2225      	movs	r2, #37	; 0x25
 80037c6:	4619      	mov	r1, r3
 80037c8:	f8d7 08cc 	ldr.w	r0, [r7, #2252]	; 0x8cc
 80037cc:	f00b fee6 	bl	800f59c <memcpy>
				printf("Desired Magn Field in x: %f \n",RxAttitude->deltab_x);
				printf("Desired Magn Field in y: %f \n",RxAttitude->deltab_y);
				printf("Desired Magn Field in z: %f \n",RxAttitude->deltab_z);
#endif
				//Send Attitude Queue to Control Task
			 	if (osMessagePut(setAttitudeADCSQueueHandle,(uint32_t)RxAttitude,200) != osOK) {
 80037d0:	4b78      	ldr	r3, [pc, #480]	; (80039b4 <OBC_Comm_Task+0x29c>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f8d7 18cc 	ldr.w	r1, [r7, #2252]	; 0x8cc
 80037d8:	22c8      	movs	r2, #200	; 0xc8
 80037da:	4618      	mov	r0, r3
 80037dc:	f009 fb62 	bl	800cea4 <osMessagePut>
 80037e0:	4603      	mov	r3, r0
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d019      	beq.n	800381a <OBC_Comm_Task+0x102>
#if enable_printf
			    	printf("Invio a Control Task fallito \n");
#endif
			       	free(RxAttitude); // Ensure the receiving task has time to process
 80037e6:	f8d7 08cc 	ldr.w	r0, [r7, #2252]	; 0x8cc
 80037ea:	f00b fecf 	bl	800f58c <free>
 80037ee:	e014      	b.n	800381a <OBC_Comm_Task+0x102>
			        printf("Dati Inviati a Control Task\n");
#endif
			 	}
			}
	  		
	  	}else if(rxBuff[0]==ATTITUDEADCS_CODE && rxLen==sizeof(attitudeADCS)){
 80037f0:	f507 630e 	add.w	r3, r7, #2272	; 0x8e0
 80037f4:	f5a3 630c 	sub.w	r3, r3, #2240	; 0x8c0
 80037f8:	781b      	ldrb	r3, [r3, #0]
 80037fa:	2b15      	cmp	r3, #21
 80037fc:	d10d      	bne.n	800381a <OBC_Comm_Task+0x102>
 80037fe:	f8d7 38c8 	ldr.w	r3, [r7, #2248]	; 0x8c8
 8003802:	2b35      	cmp	r3, #53	; 0x35
 8003804:	d009      	beq.n	800381a <OBC_Comm_Task+0x102>
#if enable_printf
  			printf("Received attitudeADCS message\n");
#endif
  			//do something...
  			//(in theory this should never arrive to ADCS)
	  	}else if(rxBuff[0]==HOUSEKEEPINGADCS_CODE && rxLen==sizeof(housekeepingADCS)){
 8003806:	f507 630e 	add.w	r3, r7, #2272	; 0x8e0
 800380a:	f5a3 630c 	sub.w	r3, r3, #2240	; 0x8c0
 800380e:	781b      	ldrb	r3, [r3, #0]
 8003810:	2b16      	cmp	r3, #22
 8003812:	d102      	bne.n	800381a <OBC_Comm_Task+0x102>
 8003814:	f8d7 38c8 	ldr.w	r3, [r7, #2248]	; 0x8c8
 8003818:	2b53      	cmp	r3, #83	; 0x53
	  telemetryStruct.temp1=...;
	  telemetryStruct.speed=...;
	  .....*/
	
	 //Receive HouseKeeping sensor values via Queue
	retvalue = osMessageGet(ADCSHouseKeepingQueueHandle,300);
 800381a:	4b67      	ldr	r3, [pc, #412]	; (80039b8 <OBC_Comm_Task+0x2a0>)
 800381c:	6819      	ldr	r1, [r3, #0]
 800381e:	463b      	mov	r3, r7
 8003820:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003824:	4618      	mov	r0, r3
 8003826:	f009 fb7d 	bl	800cf24 <osMessageGet>
 800382a:	f507 630e 	add.w	r3, r7, #2272	; 0x8e0
 800382e:	f5a3 620e 	sub.w	r2, r3, #2272	; 0x8e0
 8003832:	f507 6302 	add.w	r3, r7, #2080	; 0x820
 8003836:	ca07      	ldmia	r2, {r0, r1, r2}
 8003838:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	//printf("OBC Task: Tick_Time: %lu \n",HAL_GetTick());

	if (retvalue.status == osEventMessage)
 800383c:	f8d7 3820 	ldr.w	r3, [r7, #2080]	; 0x820
 8003840:	2b10      	cmp	r3, #16
 8003842:	d139      	bne.n	80038b8 <OBC_Comm_Task+0x1a0>
	{
		cnt1++;
 8003844:	f897 38de 	ldrb.w	r3, [r7, #2270]	; 0x8de
 8003848:	3301      	adds	r3, #1
 800384a:	f887 38de 	strb.w	r3, [r7, #2270]	; 0x8de
		processCombinedData((void*)&retvalue,(void *)&TxHousekeeping,receive_Current_Tempqueue_OBC);
 800384e:	f607 0174 	addw	r1, r7, #2164	; 0x874
 8003852:	f507 6302 	add.w	r3, r7, #2080	; 0x820
 8003856:	4a59      	ldr	r2, [pc, #356]	; (80039bc <OBC_Comm_Task+0x2a4>)
 8003858:	4618      	mov	r0, r3
 800385a:	f000 fb51 	bl	8003f00 <processCombinedData>
		//in this case we just send the local copy of the structure
		//ALWAYS remember to set message code (use the generated defines

		//printf("OBC: Trying to send attitude \n");
		//finally we send the message
		if(cnt1 == 1)
 800385e:	f897 38de 	ldrb.w	r3, [r7, #2270]	; 0x8de
 8003862:	2b01      	cmp	r3, #1
 8003864:	d128      	bne.n	80038b8 <OBC_Comm_Task+0x1a0>
		{
			printf("OBC TASK: after 5 counts: %lu \n",HAL_GetTick());
 8003866:	f002 fd1b 	bl	80062a0 <HAL_GetTick>
 800386a:	4603      	mov	r3, r0
 800386c:	4619      	mov	r1, r3
 800386e:	4854      	ldr	r0, [pc, #336]	; (80039c0 <OBC_Comm_Task+0x2a8>)
 8003870:	f00c fbf4 	bl	801005c <iprintf>
			TxAttitude.code=ATTITUDEADCS_CODE;
 8003874:	2315      	movs	r3, #21
 8003876:	f887 383c 	strb.w	r3, [r7, #2108]	; 0x83c
			TxAttitude.ticktime=HAL_GetTick();
 800387a:	f002 fd11 	bl	80062a0 <HAL_GetTick>
 800387e:	4603      	mov	r3, r0
 8003880:	f8c7 386d 	str.w	r3, [r7, #2157]	; 0x86d
		if(sdlSend(&line1,(uint8_t *)&TxAttitude,sizeof(attitudeADCS),1)){
 8003884:	f607 013c 	addw	r1, r7, #2108	; 0x83c
 8003888:	2301      	movs	r3, #1
 800388a:	2235      	movs	r2, #53	; 0x35
 800388c:	4848      	ldr	r0, [pc, #288]	; (80039b0 <OBC_Comm_Task+0x298>)
 800388e:	f001 fc63 	bl	8005158 <sdlSend>
 8003892:	4603      	mov	r3, r0
 8003894:	2b00      	cmp	r3, #0
 8003896:	d00c      	beq.n	80038b2 <OBC_Comm_Task+0x19a>
			if(sentAttitudeMessages==5)
			{
				printf("OBC: Sent %lu attitudeADCS messages bytes:%d\n",sentAttitudeMessages,sizeof(attitudeADCS));
				sentAttitudeMessages=0;
			}*/
			for(uint32_t y=0;y<sizeof(attitudeADCS);y++){
 8003898:	2300      	movs	r3, #0
 800389a:	f8c7 38d8 	str.w	r3, [r7, #2264]	; 0x8d8
 800389e:	e004      	b.n	80038aa <OBC_Comm_Task+0x192>
 80038a0:	f8d7 38d8 	ldr.w	r3, [r7, #2264]	; 0x8d8
 80038a4:	3301      	adds	r3, #1
 80038a6:	f8c7 38d8 	str.w	r3, [r7, #2264]	; 0x8d8
 80038aa:	f8d7 38d8 	ldr.w	r3, [r7, #2264]	; 0x8d8
 80038ae:	2b34      	cmp	r3, #52	; 0x34
 80038b0:	d9f6      	bls.n	80038a0 <OBC_Comm_Task+0x188>
#if enable_printf
			printf("OBC: Failed to send attitudeADCS \n");
#endif

		}
		cnt1 = 0;
 80038b2:	2300      	movs	r3, #0
 80038b4:	f887 38de 	strb.w	r3, [r7, #2270]	; 0x8de
		}
	}

	//Receive Telemetry IMU via Queue
	retvalue1 = osMessageGet(IMUQueue2Handle, 300);
 80038b8:	4b42      	ldr	r3, [pc, #264]	; (80039c4 <OBC_Comm_Task+0x2ac>)
 80038ba:	6819      	ldr	r1, [r3, #0]
 80038bc:	463b      	mov	r3, r7
 80038be:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80038c2:	4618      	mov	r0, r3
 80038c4:	f009 fb2e 	bl	800cf24 <osMessageGet>
 80038c8:	f507 630e 	add.w	r3, r7, #2272	; 0x8e0
 80038cc:	f5a3 620e 	sub.w	r2, r3, #2272	; 0x8e0
 80038d0:	f607 032c 	addw	r3, r7, #2092	; 0x82c
 80038d4:	ca07      	ldmia	r2, {r0, r1, r2}
 80038d6:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	if (retvalue1.status == osEventMessage)
 80038da:	f8d7 382c 	ldr.w	r3, [r7, #2092]	; 0x82c
 80038de:	2b10      	cmp	r3, #16
 80038e0:	d139      	bne.n	8003956 <OBC_Comm_Task+0x23e>
	{
		cnt2++;
 80038e2:	f897 38dd 	ldrb.w	r3, [r7, #2269]	; 0x8dd
 80038e6:	3301      	adds	r3, #1
 80038e8:	f887 38dd 	strb.w	r3, [r7, #2269]	; 0x8dd
		processCombinedData((void*)&retvalue1,(void *)&TxAttitude,receive_IMUqueue_OBC);
 80038ec:	f607 013c 	addw	r1, r7, #2108	; 0x83c
 80038f0:	f607 032c 	addw	r3, r7, #2092	; 0x82c
 80038f4:	4a34      	ldr	r2, [pc, #208]	; (80039c8 <OBC_Comm_Task+0x2b0>)
 80038f6:	4618      	mov	r0, r3
 80038f8:	f000 fb02 	bl	8003f00 <processCombinedData>
		//in this case we just fill the structure with random values
		//ALWAYS remember to set message code (use the generated defines
		if(cnt2 == 3)
 80038fc:	f897 38dd 	ldrb.w	r3, [r7, #2269]	; 0x8dd
 8003900:	2b03      	cmp	r3, #3
 8003902:	d128      	bne.n	8003956 <OBC_Comm_Task+0x23e>
		{
			printf("OBC TASK: after 7 counts: %lu \n",HAL_GetTick());
 8003904:	f002 fccc 	bl	80062a0 <HAL_GetTick>
 8003908:	4603      	mov	r3, r0
 800390a:	4619      	mov	r1, r3
 800390c:	482f      	ldr	r0, [pc, #188]	; (80039cc <OBC_Comm_Task+0x2b4>)
 800390e:	f00c fba5 	bl	801005c <iprintf>
			TxHousekeeping.code=HOUSEKEEPINGADCS_CODE;
 8003912:	2316      	movs	r3, #22
 8003914:	f887 3874 	strb.w	r3, [r7, #2164]	; 0x874
			TxHousekeeping.ticktime=HAL_GetTick();
 8003918:	f002 fcc2 	bl	80062a0 <HAL_GetTick>
 800391c:	4603      	mov	r3, r0
 800391e:	f8c7 38c3 	str.w	r3, [r7, #2243]	; 0x8c3
			//printf("OBC: Trying to send housekeeping \n");
			//finally we send the message
		if(sdlSend(&line1,(uint8_t *)&TxHousekeeping,sizeof(housekeepingADCS),1))
 8003922:	f607 0174 	addw	r1, r7, #2164	; 0x874
 8003926:	2301      	movs	r3, #1
 8003928:	2253      	movs	r2, #83	; 0x53
 800392a:	4821      	ldr	r0, [pc, #132]	; (80039b0 <OBC_Comm_Task+0x298>)
 800392c:	f001 fc14 	bl	8005158 <sdlSend>
 8003930:	4603      	mov	r3, r0
 8003932:	2b00      	cmp	r3, #0
 8003934:	d00c      	beq.n	8003950 <OBC_Comm_Task+0x238>
		{
#if enable_printf
		  	printf("OBC: Sent housekeepingADCS bytes:%d \n",sizeof(housekeepingADCS));
#endif
		 	for(uint32_t y=0;y<sizeof(housekeepingADCS);y++){
 8003936:	2300      	movs	r3, #0
 8003938:	f8c7 38d4 	str.w	r3, [r7, #2260]	; 0x8d4
 800393c:	e004      	b.n	8003948 <OBC_Comm_Task+0x230>
 800393e:	f8d7 38d4 	ldr.w	r3, [r7, #2260]	; 0x8d4
 8003942:	3301      	adds	r3, #1
 8003944:	f8c7 38d4 	str.w	r3, [r7, #2260]	; 0x8d4
 8003948:	f8d7 38d4 	ldr.w	r3, [r7, #2260]	; 0x8d4
 800394c:	2b52      	cmp	r3, #82	; 0x52
 800394e:	d9f6      	bls.n	800393e <OBC_Comm_Task+0x226>
		else{
#if enable_printf
			printf("OBC: Failed to send housekeepingADCS \n");
#endif
		}
		cnt2 = 0;
 8003950:	2300      	movs	r3, #0
 8003952:	f887 38dd 	strb.w	r3, [r7, #2269]	; 0x8dd
		}

	}

	opmodeADCS opmodeMsg;
	opmodeMsg.opmode=opmode;
 8003956:	f507 630e 	add.w	r3, r7, #2272	; 0x8e0
 800395a:	f6a3 03c4 	subw	r3, r3, #2244	; 0x8c4
 800395e:	f897 28df 	ldrb.w	r2, [r7, #2271]	; 0x8df
 8003962:	705a      	strb	r2, [r3, #1]
	//ALWAYS remember to set message code (use the generated defines
	opmodeMsg.code=OPMODEADCS_CODE;
 8003964:	f507 630e 	add.w	r3, r7, #2272	; 0x8e0
 8003968:	f6a3 03c4 	subw	r3, r3, #2244	; 0x8c4
 800396c:	2214      	movs	r2, #20
 800396e:	701a      	strb	r2, [r3, #0]
	//finally we send the message (WITH ACK REQUESTED)
	//printf("OBC: Trying to send opmodeADCS \n");
	if(sdlSend(&line1,(uint8_t *)&opmodeMsg,sizeof(opmodeADCS),1))
 8003970:	f107 011c 	add.w	r1, r7, #28
 8003974:	2301      	movs	r3, #1
 8003976:	2202      	movs	r2, #2
 8003978:	480d      	ldr	r0, [pc, #52]	; (80039b0 <OBC_Comm_Task+0x298>)
 800397a:	f001 fbed 	bl	8005158 <sdlSend>
 800397e:	4603      	mov	r3, r0
 8003980:	2b00      	cmp	r3, #0
 8003982:	d00c      	beq.n	800399e <OBC_Comm_Task+0x286>
	{
#if enable_printf
	  	printf("OBC : Sent opmodeADCS bytes:%d \n",sizeof(opmodeADCS));
#endif
	  for(uint32_t y=0;y<sizeof(opmodeADCS);y++){
 8003984:	2300      	movs	r3, #0
 8003986:	f8c7 38d0 	str.w	r3, [r7, #2256]	; 0x8d0
 800398a:	e004      	b.n	8003996 <OBC_Comm_Task+0x27e>
 800398c:	f8d7 38d0 	ldr.w	r3, [r7, #2256]	; 0x8d0
 8003990:	3301      	adds	r3, #1
 8003992:	f8c7 38d0 	str.w	r3, [r7, #2256]	; 0x8d0
 8003996:	f8d7 38d0 	ldr.w	r3, [r7, #2256]	; 0x8d0
 800399a:	2b01      	cmp	r3, #1
 800399c:	d9f6      	bls.n	800398c <OBC_Comm_Task+0x274>
		printf("OBC: Failed to send opmodeADCS \n");
#endif
	}


  	osDelay(400);
 800399e:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80039a2:	f009 fa3c 	bl	800ce1e <osDelay>
  {
 80039a6:	e6d7      	b.n	8003758 <OBC_Comm_Task+0x40>
 80039a8:	0800328d 	.word	0x0800328d
 80039ac:	0800325d 	.word	0x0800325d
 80039b0:	2001d12c 	.word	0x2001d12c
 80039b4:	2001c324 	.word	0x2001c324
 80039b8:	20018e40 	.word	0x20018e40
 80039bc:	08004015 	.word	0x08004015
 80039c0:	08012670 	.word	0x08012670
 80039c4:	2001aad8 	.word	0x2001aad8
 80039c8:	08003f9d 	.word	0x08003f9d
 80039cc:	08012690 	.word	0x08012690

080039d0 <Control_Algorithm_Task>:
  }
  /* USER CODE END OBC_Comm_Task */
}

void Control_Algorithm_Task(void const * argument)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b090      	sub	sp, #64	; 0x40
 80039d4:	af02      	add	r7, sp, #8
 80039d6:	6178      	str	r0, [r7, #20]
  /* USER CODE BEGIN Control_Algorithm_Task */
	uint8_t flag = 0;
 80039d8:	2300      	movs	r3, #0
 80039da:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	osEvent retvalue,retvalue1;

	//Inizialize actuators struct
	init_actuator_handler(&Reaction1,&htim1,TIM_CHANNEL_1,TIM_CHANNEL_2,100000,50); //100 khz
 80039de:	2332      	movs	r3, #50	; 0x32
 80039e0:	9301      	str	r3, [sp, #4]
 80039e2:	4b35      	ldr	r3, [pc, #212]	; (8003ab8 <Control_Algorithm_Task+0xe8>)
 80039e4:	9300      	str	r3, [sp, #0]
 80039e6:	2304      	movs	r3, #4
 80039e8:	2200      	movs	r2, #0
 80039ea:	4934      	ldr	r1, [pc, #208]	; (8003abc <Control_Algorithm_Task+0xec>)
 80039ec:	4834      	ldr	r0, [pc, #208]	; (8003ac0 <Control_Algorithm_Task+0xf0>)
 80039ee:	f7fe f8ab 	bl	8001b48 <init_actuator_handler>
	init_actuator_handler(&Reaction2,&htim2,TIM_CHANNEL_3,TIM_CHANNEL_4,20000,50);
 80039f2:	2332      	movs	r3, #50	; 0x32
 80039f4:	9301      	str	r3, [sp, #4]
 80039f6:	f644 6320 	movw	r3, #20000	; 0x4e20
 80039fa:	9300      	str	r3, [sp, #0]
 80039fc:	230c      	movs	r3, #12
 80039fe:	2208      	movs	r2, #8
 8003a00:	4930      	ldr	r1, [pc, #192]	; (8003ac4 <Control_Algorithm_Task+0xf4>)
 8003a02:	4831      	ldr	r0, [pc, #196]	; (8003ac8 <Control_Algorithm_Task+0xf8>)
 8003a04:	f7fe f8a0 	bl	8001b48 <init_actuator_handler>
	init_actuator_handler(&MagneTorquer1,&htim3,TIM_CHANNEL_1,TIM_CHANNEL_2,89000,50); //89 khz
 8003a08:	2332      	movs	r3, #50	; 0x32
 8003a0a:	9301      	str	r3, [sp, #4]
 8003a0c:	4b2f      	ldr	r3, [pc, #188]	; (8003acc <Control_Algorithm_Task+0xfc>)
 8003a0e:	9300      	str	r3, [sp, #0]
 8003a10:	2304      	movs	r3, #4
 8003a12:	2200      	movs	r2, #0
 8003a14:	492e      	ldr	r1, [pc, #184]	; (8003ad0 <Control_Algorithm_Task+0x100>)
 8003a16:	482f      	ldr	r0, [pc, #188]	; (8003ad4 <Control_Algorithm_Task+0x104>)
 8003a18:	f7fe f896 	bl	8001b48 <init_actuator_handler>
	init_actuator_handler(&MagneTorquer2,&htim3,TIM_CHANNEL_3,TIM_CHANNEL_4,10000,50);
 8003a1c:	2332      	movs	r3, #50	; 0x32
 8003a1e:	9301      	str	r3, [sp, #4]
 8003a20:	f242 7310 	movw	r3, #10000	; 0x2710
 8003a24:	9300      	str	r3, [sp, #0]
 8003a26:	230c      	movs	r3, #12
 8003a28:	2208      	movs	r2, #8
 8003a2a:	4929      	ldr	r1, [pc, #164]	; (8003ad0 <Control_Algorithm_Task+0x100>)
 8003a2c:	482a      	ldr	r0, [pc, #168]	; (8003ad8 <Control_Algorithm_Task+0x108>)
 8003a2e:	f7fe f88b 	bl	8001b48 <init_actuator_handler>
	init_actuator_handler(&MagneTorquer3,&htim2,TIM_CHANNEL_1,TIM_CHANNEL_2,94000,50); //94 khz
 8003a32:	2332      	movs	r3, #50	; 0x32
 8003a34:	9301      	str	r3, [sp, #4]
 8003a36:	4b29      	ldr	r3, [pc, #164]	; (8003adc <Control_Algorithm_Task+0x10c>)
 8003a38:	9300      	str	r3, [sp, #0]
 8003a3a:	2304      	movs	r3, #4
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	4921      	ldr	r1, [pc, #132]	; (8003ac4 <Control_Algorithm_Task+0xf4>)
 8003a40:	4827      	ldr	r0, [pc, #156]	; (8003ae0 <Control_Algorithm_Task+0x110>)
 8003a42:	f7fe f881 	bl	8001b48 <init_actuator_handler>

	//Inizialize PID struct
	PID_INIT(&PID_Inputs);
 8003a46:	4827      	ldr	r0, [pc, #156]	; (8003ae4 <Control_Algorithm_Task+0x114>)
 8003a48:	f000 fa10 	bl	8003e6c <PID_INIT>
#if enable_printf
		//printf("We are in Control Algorithm TASK \n");
#endif
		//Receive Telemetry IMU via Queue

		retvalue1 = osMessageGet(setAttitudeADCSQueueHandle,200);
 8003a4c:	4b26      	ldr	r3, [pc, #152]	; (8003ae8 <Control_Algorithm_Task+0x118>)
 8003a4e:	6819      	ldr	r1, [r3, #0]
 8003a50:	463b      	mov	r3, r7
 8003a52:	22c8      	movs	r2, #200	; 0xc8
 8003a54:	4618      	mov	r0, r3
 8003a56:	f009 fa65 	bl	800cf24 <osMessageGet>
 8003a5a:	f107 031c 	add.w	r3, r7, #28
 8003a5e:	463a      	mov	r2, r7
 8003a60:	ca07      	ldmia	r2, {r0, r1, r2}
 8003a62:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		processCombinedData((void*)&retvalue1,(void *)&PID_Inputs,receive_Attitudequeue_control);
 8003a66:	f107 031c 	add.w	r3, r7, #28
 8003a6a:	4a20      	ldr	r2, [pc, #128]	; (8003aec <Control_Algorithm_Task+0x11c>)
 8003a6c:	491d      	ldr	r1, [pc, #116]	; (8003ae4 <Control_Algorithm_Task+0x114>)
 8003a6e:	4618      	mov	r0, r3
 8003a70:	f000 fa46 	bl	8003f00 <processCombinedData>

		retvalue = osMessageGet(IMUQueue1Handle, 300);
 8003a74:	4b1e      	ldr	r3, [pc, #120]	; (8003af0 <Control_Algorithm_Task+0x120>)
 8003a76:	6819      	ldr	r1, [r3, #0]
 8003a78:	463b      	mov	r3, r7
 8003a7a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003a7e:	4618      	mov	r0, r3
 8003a80:	f009 fa50 	bl	800cf24 <osMessageGet>
 8003a84:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003a88:	463a      	mov	r2, r7
 8003a8a:	ca07      	ldmia	r2, {r0, r1, r2}
 8003a8c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		processCombinedData((void*)&retvalue,(void *)&PID_Inputs,receive_IMUqueue_control);
 8003a90:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003a94:	4a17      	ldr	r2, [pc, #92]	; (8003af4 <Control_Algorithm_Task+0x124>)
 8003a96:	4913      	ldr	r1, [pc, #76]	; (8003ae4 <Control_Algorithm_Task+0x114>)
 8003a98:	4618      	mov	r0, r3
 8003a9a:	f000 fa31 	bl	8003f00 <processCombinedData>
		//PID_main(&PID_Inputs);

		//Update PWM values
		//X Magnetorquer

		if(!flag)
 8003a9e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d102      	bne.n	8003aac <Control_Algorithm_Task+0xdc>
//			actuator_START(&Reaction1);
//			actuator_START(&Reaction2);
//			actuator_START(&MagneTorquer1);
//			actuator_START(&MagneTorquer2);
//			actuator_START(&MagneTorquer3);
			flag = 1;
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
			//Spegnere i magnetorquer
			xSemaphoreGive(IMURead_ControlMutex);
			printf("Control Task : Released IMURead_ControlMutex control");
		}
		*/
		osDelay(500);
 8003aac:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003ab0:	f009 f9b5 	bl	800ce1e <osDelay>
		retvalue1 = osMessageGet(setAttitudeADCSQueueHandle,200);
 8003ab4:	e7ca      	b.n	8003a4c <Control_Algorithm_Task+0x7c>
 8003ab6:	bf00      	nop
 8003ab8:	000186a0 	.word	0x000186a0
 8003abc:	20021a64 	.word	0x20021a64
 8003ac0:	20004bcc 	.word	0x20004bcc
 8003ac4:	20021ab0 	.word	0x20021ab0
 8003ac8:	20004be4 	.word	0x20004be4
 8003acc:	00015ba8 	.word	0x00015ba8
 8003ad0:	20021afc 	.word	0x20021afc
 8003ad4:	20004bfc 	.word	0x20004bfc
 8003ad8:	20004c14 	.word	0x20004c14
 8003adc:	00016f30 	.word	0x00016f30
 8003ae0:	20004c2c 	.word	0x20004c2c
 8003ae4:	20004a78 	.word	0x20004a78
 8003ae8:	2001c324 	.word	0x2001c324
 8003aec:	080040ad 	.word	0x080040ad
 8003af0:	2001928c 	.word	0x2001928c
 8003af4:	08003f1d 	.word	0x08003f1d

08003af8 <IMU_Task>:
	}
  /* USER CODE END Control_Algorithm_Task */
}

void IMU_Task(void const * argument)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b08c      	sub	sp, #48	; 0x30
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN IMU_Task */
#if enable_printf
	printf("Initializing IMU \n");
#endif
	//uint8_t ret = 1;
	uint8_t ret = initIMUConfig(&huart4);
 8003b00:	4842      	ldr	r0, [pc, #264]	; (8003c0c <IMU_Task+0x114>)
 8003b02:	f7fd fba3 	bl	800124c <initIMUConfig>
 8003b06:	4603      	mov	r3, r0
 8003b08:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
#if enable_printf
	if(ret) printf("IMU correctly configured \n");
	else printf("Error configuring IMU \n");
#endif

	float gyro[3]={1,2,3};
 8003b0c:	4a40      	ldr	r2, [pc, #256]	; (8003c10 <IMU_Task+0x118>)
 8003b0e:	f107 0318 	add.w	r3, r7, #24
 8003b12:	ca07      	ldmia	r2, {r0, r1, r2}
 8003b14:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	float mag[3]={4,5,6};
 8003b18:	4a3e      	ldr	r2, [pc, #248]	; (8003c14 <IMU_Task+0x11c>)
 8003b1a:	f107 030c 	add.w	r3, r7, #12
 8003b1e:	ca07      	ldmia	r2, {r0, r1, r2}
 8003b20:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	imu_queue_struct *local_imu_struct =(imu_queue_struct*) malloc(sizeof(imu_queue_struct));
 8003b24:	2018      	movs	r0, #24
 8003b26:	f00b fd29 	bl	800f57c <malloc>
 8003b2a:	4603      	mov	r3, r0
 8003b2c:	627b      	str	r3, [r7, #36]	; 0x24
		//queste due linee per l'UART
		//Se voglio far comunicare IMU e Nucleo con solo le 2 linee UART tx ed Rx basta che disabilito l'hardware flow control
		//da CubeMx.


		ret=readIMUPacket(&huart4, gyro, mag, 500); //mag measured in Gauss(G) unit -> 1G = 10^-4 Tesla
 8003b2e:	f107 020c 	add.w	r2, r7, #12
 8003b32:	f107 0118 	add.w	r1, r7, #24
 8003b36:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8003b3a:	4834      	ldr	r0, [pc, #208]	; (8003c0c <IMU_Task+0x114>)
 8003b3c:	f7fd fc46 	bl	80013cc <readIMUPacket>
 8003b40:	4603      	mov	r3, r0
 8003b42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
		mag[0]/=10000; //1G = 10^-4 Tesla
 8003b46:	ed97 7a03 	vldr	s14, [r7, #12]
 8003b4a:	eddf 6a33 	vldr	s13, [pc, #204]	; 8003c18 <IMU_Task+0x120>
 8003b4e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003b52:	edc7 7a03 	vstr	s15, [r7, #12]
		mag[1]/=10000; //1G = 10^-4 Tesla
 8003b56:	ed97 7a04 	vldr	s14, [r7, #16]
 8003b5a:	eddf 6a2f 	vldr	s13, [pc, #188]	; 8003c18 <IMU_Task+0x120>
 8003b5e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003b62:	edc7 7a04 	vstr	s15, [r7, #16]
		mag[2]/=10000; //1G = 10^-4 Tesla
 8003b66:	ed97 7a05 	vldr	s14, [r7, #20]
 8003b6a:	eddf 6a2b 	vldr	s13, [pc, #172]	; 8003c18 <IMU_Task+0x120>
 8003b6e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003b72:	edc7 7a05 	vstr	s15, [r7, #20]
			printf("IMU Task : Taken IMURead_Control control");
			ret=readIMUPacket(&huart4, gyro, mag, 50);
			xSemaphoreGive(IMURead_ControlMutex);
			printf("IMU Task : Released IMURead_Control control");
		}*/
		if(ret)
 8003b76:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d040      	beq.n	8003c00 <IMU_Task+0x108>
			for(uint32_t field=0; field<3;field++){
				printf("%f \t",mag[field]);
			}
			printf("\n");*/

			if (local_imu_struct == NULL) {
 8003b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d0d4      	beq.n	8003b2e <IMU_Task+0x36>
#endif
			}
			else
			{
				//Riempio struct con valori letti da IMU,per poi inviareli a Task Controllo
				for (int i = 0; i < 3; i++)
 8003b84:	2300      	movs	r3, #0
 8003b86:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b88:	e01a      	b.n	8003bc0 <IMU_Task+0xc8>
				{
					local_imu_struct->gyro_msr[i] = gyro[i];
 8003b8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b8c:	009b      	lsls	r3, r3, #2
 8003b8e:	3330      	adds	r3, #48	; 0x30
 8003b90:	443b      	add	r3, r7
 8003b92:	3b18      	subs	r3, #24
 8003b94:	681a      	ldr	r2, [r3, #0]
 8003b96:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003b98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b9a:	009b      	lsls	r3, r3, #2
 8003b9c:	440b      	add	r3, r1
 8003b9e:	601a      	str	r2, [r3, #0]
#if enable_printf
					//printf("IMU TASK: Giro[%d] : %f \n",i,local_imu_struct->gyro_msr[i]);
#endif
					local_imu_struct->mag_msr[i] = mag[i];
 8003ba0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ba2:	009b      	lsls	r3, r3, #2
 8003ba4:	3330      	adds	r3, #48	; 0x30
 8003ba6:	443b      	add	r3, r7
 8003ba8:	3b24      	subs	r3, #36	; 0x24
 8003baa:	681a      	ldr	r2, [r3, #0]
 8003bac:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003bae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bb0:	3302      	adds	r3, #2
 8003bb2:	009b      	lsls	r3, r3, #2
 8003bb4:	440b      	add	r3, r1
 8003bb6:	3304      	adds	r3, #4
 8003bb8:	601a      	str	r2, [r3, #0]
				for (int i = 0; i < 3; i++)
 8003bba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bbc:	3301      	adds	r3, #1
 8003bbe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003bc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bc2:	2b02      	cmp	r3, #2
 8003bc4:	dde1      	ble.n	8003b8a <IMU_Task+0x92>
					//printf("IMU TASK: Magn Field[%d] : %f \n",i,local_imu_struct->mag_msr[i]);
#endif
				}
			
				//Invio queue a Control Task
			 	if (osMessagePut(IMUQueue1Handle,(uint32_t)local_imu_struct,300) != osOK) {
 8003bc6:	4b15      	ldr	r3, [pc, #84]	; (8003c1c <IMU_Task+0x124>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003bcc:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	f009 f967 	bl	800cea4 <osMessagePut>
 8003bd6:	4603      	mov	r3, r0
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d002      	beq.n	8003be2 <IMU_Task+0xea>
#if enable_printf
			    	printf("Invio a Control Task fallito \n");
#endif
			       	free(local_imu_struct); // Ensure the receiving task has time to process
 8003bdc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003bde:	f00b fcd5 	bl	800f58c <free>
#if enable_printf
			        printf("Dati Inviati a Control Task \n");
#endif
			 	}
			 	//Invio queue a OBC Task
			 	if (osMessagePut(IMUQueue2Handle,(uint32_t)local_imu_struct,300) != osOK) {
 8003be2:	4b0f      	ldr	r3, [pc, #60]	; (8003c20 <IMU_Task+0x128>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003be8:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003bec:	4618      	mov	r0, r3
 8003bee:	f009 f959 	bl	800cea4 <osMessagePut>
 8003bf2:	4603      	mov	r3, r0
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d09a      	beq.n	8003b2e <IMU_Task+0x36>
#if enable_printf
			    	printf("Invio a OBC Task fallito \n");
#endif
			       	free(local_imu_struct); // Ensure the receiving task has time to process
 8003bf8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003bfa:	f00b fcc7 	bl	800f58c <free>
 8003bfe:	e796      	b.n	8003b2e <IMU_Task+0x36>
		}
		else
#if enable_printf
			printf("IMU: Error configuring IMU \n");
#endif
		osDelay(1000);
 8003c00:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003c04:	f009 f90b 	bl	800ce1e <osDelay>
		ret=readIMUPacket(&huart4, gyro, mag, 500); //mag measured in Gauss(G) unit -> 1G = 10^-4 Tesla
 8003c08:	e791      	b.n	8003b2e <IMU_Task+0x36>
 8003c0a:	bf00      	nop
 8003c0c:	20021b48 	.word	0x20021b48
 8003c10:	080126b0 	.word	0x080126b0
 8003c14:	080126bc 	.word	0x080126bc
 8003c18:	461c4000 	.word	0x461c4000
 8003c1c:	2001928c 	.word	0x2001928c
 8003c20:	2001aad8 	.word	0x2001aad8

08003c24 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b08a      	sub	sp, #40	; 0x28
 8003c28:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c2a:	f107 0314 	add.w	r3, r7, #20
 8003c2e:	2200      	movs	r2, #0
 8003c30:	601a      	str	r2, [r3, #0]
 8003c32:	605a      	str	r2, [r3, #4]
 8003c34:	609a      	str	r2, [r3, #8]
 8003c36:	60da      	str	r2, [r3, #12]
 8003c38:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003c3a:	4b43      	ldr	r3, [pc, #268]	; (8003d48 <MX_GPIO_Init+0x124>)
 8003c3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c3e:	4a42      	ldr	r2, [pc, #264]	; (8003d48 <MX_GPIO_Init+0x124>)
 8003c40:	f043 0304 	orr.w	r3, r3, #4
 8003c44:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003c46:	4b40      	ldr	r3, [pc, #256]	; (8003d48 <MX_GPIO_Init+0x124>)
 8003c48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c4a:	f003 0304 	and.w	r3, r3, #4
 8003c4e:	613b      	str	r3, [r7, #16]
 8003c50:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c52:	4b3d      	ldr	r3, [pc, #244]	; (8003d48 <MX_GPIO_Init+0x124>)
 8003c54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c56:	4a3c      	ldr	r2, [pc, #240]	; (8003d48 <MX_GPIO_Init+0x124>)
 8003c58:	f043 0301 	orr.w	r3, r3, #1
 8003c5c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003c5e:	4b3a      	ldr	r3, [pc, #232]	; (8003d48 <MX_GPIO_Init+0x124>)
 8003c60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c62:	f003 0301 	and.w	r3, r3, #1
 8003c66:	60fb      	str	r3, [r7, #12]
 8003c68:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c6a:	4b37      	ldr	r3, [pc, #220]	; (8003d48 <MX_GPIO_Init+0x124>)
 8003c6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c6e:	4a36      	ldr	r2, [pc, #216]	; (8003d48 <MX_GPIO_Init+0x124>)
 8003c70:	f043 0302 	orr.w	r3, r3, #2
 8003c74:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003c76:	4b34      	ldr	r3, [pc, #208]	; (8003d48 <MX_GPIO_Init+0x124>)
 8003c78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c7a:	f003 0302 	and.w	r3, r3, #2
 8003c7e:	60bb      	str	r3, [r7, #8]
 8003c80:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003c82:	4b31      	ldr	r3, [pc, #196]	; (8003d48 <MX_GPIO_Init+0x124>)
 8003c84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c86:	4a30      	ldr	r2, [pc, #192]	; (8003d48 <MX_GPIO_Init+0x124>)
 8003c88:	f043 0308 	orr.w	r3, r3, #8
 8003c8c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003c8e:	4b2e      	ldr	r3, [pc, #184]	; (8003d48 <MX_GPIO_Init+0x124>)
 8003c90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c92:	f003 0308 	and.w	r3, r3, #8
 8003c96:	607b      	str	r3, [r7, #4]
 8003c98:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|LD4_Pin, GPIO_PIN_RESET);
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	2130      	movs	r1, #48	; 0x30
 8003c9e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003ca2:	f004 f9d5 	bl	8008050 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_8, GPIO_PIN_RESET);
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	f240 1101 	movw	r1, #257	; 0x101
 8003cac:	4827      	ldr	r0, [pc, #156]	; (8003d4c <MX_GPIO_Init+0x128>)
 8003cae:	f004 f9cf 	bl	8008050 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8003cb2:	2201      	movs	r2, #1
 8003cb4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003cb8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003cbc:	f004 f9c8 	bl	8008050 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	2104      	movs	r1, #4
 8003cc4:	4822      	ldr	r0, [pc, #136]	; (8003d50 <MX_GPIO_Init+0x12c>)
 8003cc6:	f004 f9c3 	bl	8008050 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8003cca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003cce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003cd0:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8003cd4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8003cda:	f107 0314 	add.w	r3, r7, #20
 8003cde:	4619      	mov	r1, r3
 8003ce0:	481c      	ldr	r0, [pc, #112]	; (8003d54 <MX_GPIO_Init+0x130>)
 8003ce2:	f004 f83b 	bl	8007d5c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PAPin PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|LD4_Pin|GPIO_PIN_12;
 8003ce6:	f241 0330 	movw	r3, #4144	; 0x1030
 8003cea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003cec:	2301      	movs	r3, #1
 8003cee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003cf8:	f107 0314 	add.w	r3, r7, #20
 8003cfc:	4619      	mov	r1, r3
 8003cfe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003d02:	f004 f82b 	bl	8007d5c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_8;
 8003d06:	f240 1301 	movw	r3, #257	; 0x101
 8003d0a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003d0c:	2301      	movs	r3, #1
 8003d0e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d10:	2300      	movs	r3, #0
 8003d12:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d14:	2300      	movs	r3, #0
 8003d16:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003d18:	f107 0314 	add.w	r3, r7, #20
 8003d1c:	4619      	mov	r1, r3
 8003d1e:	480b      	ldr	r0, [pc, #44]	; (8003d4c <MX_GPIO_Init+0x128>)
 8003d20:	f004 f81c 	bl	8007d5c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003d24:	2304      	movs	r3, #4
 8003d26:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003d28:	2301      	movs	r3, #1
 8003d2a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d30:	2300      	movs	r3, #0
 8003d32:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003d34:	f107 0314 	add.w	r3, r7, #20
 8003d38:	4619      	mov	r1, r3
 8003d3a:	4805      	ldr	r0, [pc, #20]	; (8003d50 <MX_GPIO_Init+0x12c>)
 8003d3c:	f004 f80e 	bl	8007d5c <HAL_GPIO_Init>

}
 8003d40:	bf00      	nop
 8003d42:	3728      	adds	r7, #40	; 0x28
 8003d44:	46bd      	mov	sp, r7
 8003d46:	bd80      	pop	{r7, pc}
 8003d48:	40021000 	.word	0x40021000
 8003d4c:	48000400 	.word	0x48000400
 8003d50:	48000c00 	.word	0x48000c00
 8003d54:	48000800 	.word	0x48000800

08003d58 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003d5c:	f002 fa6c 	bl	8006238 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003d60:	f000 f81b 	bl	8003d9a <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003d64:	f7ff ff5e 	bl	8003c24 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8003d68:	f002 f826 	bl	8005db8 <MX_USART2_UART_Init>
  MX_UART4_Init();
 8003d6c:	f001 ffc4 	bl	8005cf8 <MX_UART4_Init>
  MX_USART1_UART_Init();
 8003d70:	f001 fff2 	bl	8005d58 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8003d74:	f002 f850 	bl	8005e18 <MX_USART3_UART_Init>
  MX_CAN1_Init();
 8003d78:	f7fe ff1c 	bl	8002bb4 <MX_CAN1_Init>
  MX_TIM1_Init();
 8003d7c:	f001 fcd2 	bl	8005724 <MX_TIM1_Init>
  MX_TIM2_Init();
 8003d80:	f001 fd88 	bl	8005894 <MX_TIM2_Init>
  MX_TIM3_Init();
 8003d84:	f001 fe1c 	bl	80059c0 <MX_TIM3_Init>
  MX_ADC1_Init();
 8003d88:	f7fe fa8a 	bl	80022a0 <MX_ADC1_Init>
  MX_SPI2_Init();
 8003d8c:	f001 fa86 	bl	800529c <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8003d90:	f7ff fae4 	bl	800335c <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8003d94:	f009 f817 	bl	800cdc6 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8003d98:	e7fe      	b.n	8003d98 <main+0x40>

08003d9a <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003d9a:	b580      	push	{r7, lr}
 8003d9c:	b096      	sub	sp, #88	; 0x58
 8003d9e:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003da0:	f107 0314 	add.w	r3, r7, #20
 8003da4:	2244      	movs	r2, #68	; 0x44
 8003da6:	2100      	movs	r1, #0
 8003da8:	4618      	mov	r0, r3
 8003daa:	f00b fc05 	bl	800f5b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003dae:	463b      	mov	r3, r7
 8003db0:	2200      	movs	r2, #0
 8003db2:	601a      	str	r2, [r3, #0]
 8003db4:	605a      	str	r2, [r3, #4]
 8003db6:	609a      	str	r2, [r3, #8]
 8003db8:	60da      	str	r2, [r3, #12]
 8003dba:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8003dbc:	f44f 7000 	mov.w	r0, #512	; 0x200
 8003dc0:	f004 f96c 	bl	800809c <HAL_PWREx_ControlVoltageScaling>
 8003dc4:	4603      	mov	r3, r0
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d001      	beq.n	8003dce <SystemClock_Config+0x34>
  {
    Error_Handler();
 8003dca:	f000 f849 	bl	8003e60 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003dce:	2302      	movs	r3, #2
 8003dd0:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003dd2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003dd6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003dd8:	2340      	movs	r3, #64	; 0x40
 8003dda:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003ddc:	2302      	movs	r3, #2
 8003dde:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003de0:	2302      	movs	r3, #2
 8003de2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8003de4:	2301      	movs	r3, #1
 8003de6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8003de8:	230a      	movs	r3, #10
 8003dea:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8003dec:	2307      	movs	r3, #7
 8003dee:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8003df0:	2302      	movs	r3, #2
 8003df2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8003df4:	2302      	movs	r3, #2
 8003df6:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003df8:	f107 0314 	add.w	r3, r7, #20
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	f004 f9a3 	bl	8008148 <HAL_RCC_OscConfig>
 8003e02:	4603      	mov	r3, r0
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d001      	beq.n	8003e0c <SystemClock_Config+0x72>
  {
    Error_Handler();
 8003e08:	f000 f82a 	bl	8003e60 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003e0c:	230f      	movs	r3, #15
 8003e0e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003e10:	2303      	movs	r3, #3
 8003e12:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8003e14:	2380      	movs	r3, #128	; 0x80
 8003e16:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003e18:	2300      	movs	r3, #0
 8003e1a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003e20:	463b      	mov	r3, r7
 8003e22:	2102      	movs	r1, #2
 8003e24:	4618      	mov	r0, r3
 8003e26:	f004 fda3 	bl	8008970 <HAL_RCC_ClockConfig>
 8003e2a:	4603      	mov	r3, r0
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d001      	beq.n	8003e34 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8003e30:	f000 f816 	bl	8003e60 <Error_Handler>
  }
}
 8003e34:	bf00      	nop
 8003e36:	3758      	adds	r7, #88	; 0x58
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	bd80      	pop	{r7, pc}

08003e3c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b082      	sub	sp, #8
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	4a04      	ldr	r2, [pc, #16]	; (8003e5c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d101      	bne.n	8003e52 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8003e4e:	f002 fa13 	bl	8006278 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8003e52:	bf00      	nop
 8003e54:	3708      	adds	r7, #8
 8003e56:	46bd      	mov	sp, r7
 8003e58:	bd80      	pop	{r7, pc}
 8003e5a:	bf00      	nop
 8003e5c:	40001000 	.word	0x40001000

08003e60 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003e60:	b480      	push	{r7}
 8003e62:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8003e64:	b672      	cpsid	i
}
 8003e66:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003e68:	e7fe      	b.n	8003e68 <Error_Handler+0x8>
	...

08003e6c <PID_INIT>:

    PID_Inputs->th_Dutycycle[2] =  100*((PID_Inputs->th_Current[2] * PID_Inputs->torquer_Req_Ohm[2]) / PID_Inputs->torquer_Vdd[2]);

}

void PID_INIT(PID_Inputs_struct *PID_Inputs){
 8003e6c:	b480      	push	{r7}
 8003e6e:	b085      	sub	sp, #20
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]

  for (uint8_t i = 0; i < sizeof(PID_Inputs->d_AngSpeed_Err_dt); i++) {
 8003e74:	2300      	movs	r3, #0
 8003e76:	73fb      	strb	r3, [r7, #15]
 8003e78:	e02f      	b.n	8003eda <PID_INIT+0x6e>

    PID_Inputs->N_spires[i] = N_spires[i];
 8003e7a:	7bfa      	ldrb	r2, [r7, #15]
 8003e7c:	7bfb      	ldrb	r3, [r7, #15]
 8003e7e:	491c      	ldr	r1, [pc, #112]	; (8003ef0 <PID_INIT+0x84>)
 8003e80:	0092      	lsls	r2, r2, #2
 8003e82:	440a      	add	r2, r1
 8003e84:	6812      	ldr	r2, [r2, #0]
 8003e86:	6879      	ldr	r1, [r7, #4]
 8003e88:	009b      	lsls	r3, r3, #2
 8003e8a:	440b      	add	r3, r1
 8003e8c:	3304      	adds	r3, #4
 8003e8e:	601a      	str	r2, [r3, #0]
    PID_Inputs->A_torquers[i] = A_torquers[i];
 8003e90:	7bfa      	ldrb	r2, [r7, #15]
 8003e92:	7bfb      	ldrb	r3, [r7, #15]
 8003e94:	4917      	ldr	r1, [pc, #92]	; (8003ef4 <PID_INIT+0x88>)
 8003e96:	0092      	lsls	r2, r2, #2
 8003e98:	440a      	add	r2, r1
 8003e9a:	6812      	ldr	r2, [r2, #0]
 8003e9c:	6879      	ldr	r1, [r7, #4]
 8003e9e:	3304      	adds	r3, #4
 8003ea0:	009b      	lsls	r3, r3, #2
 8003ea2:	440b      	add	r3, r1
 8003ea4:	601a      	str	r2, [r3, #0]
    PID_Inputs->torquer_Req_Ohm[i] = torquer_Req_Ohm[i];
 8003ea6:	7bfa      	ldrb	r2, [r7, #15]
 8003ea8:	7bfb      	ldrb	r3, [r7, #15]
 8003eaa:	4913      	ldr	r1, [pc, #76]	; (8003ef8 <PID_INIT+0x8c>)
 8003eac:	0092      	lsls	r2, r2, #2
 8003eae:	440a      	add	r2, r1
 8003eb0:	6812      	ldr	r2, [r2, #0]
 8003eb2:	6879      	ldr	r1, [r7, #4]
 8003eb4:	3306      	adds	r3, #6
 8003eb6:	009b      	lsls	r3, r3, #2
 8003eb8:	440b      	add	r3, r1
 8003eba:	3304      	adds	r3, #4
 8003ebc:	601a      	str	r2, [r3, #0]
    PID_Inputs->torquer_Vdd[i] = torquer_Vdd[i];
 8003ebe:	7bfa      	ldrb	r2, [r7, #15]
 8003ec0:	7bfb      	ldrb	r3, [r7, #15]
 8003ec2:	490e      	ldr	r1, [pc, #56]	; (8003efc <PID_INIT+0x90>)
 8003ec4:	0092      	lsls	r2, r2, #2
 8003ec6:	440a      	add	r2, r1
 8003ec8:	6812      	ldr	r2, [r2, #0]
 8003eca:	6879      	ldr	r1, [r7, #4]
 8003ecc:	330a      	adds	r3, #10
 8003ece:	009b      	lsls	r3, r3, #2
 8003ed0:	440b      	add	r3, r1
 8003ed2:	601a      	str	r2, [r3, #0]
  for (uint8_t i = 0; i < sizeof(PID_Inputs->d_AngSpeed_Err_dt); i++) {
 8003ed4:	7bfb      	ldrb	r3, [r7, #15]
 8003ed6:	3301      	adds	r3, #1
 8003ed8:	73fb      	strb	r3, [r7, #15]
 8003eda:	7bfb      	ldrb	r3, [r7, #15]
 8003edc:	2b0b      	cmp	r3, #11
 8003ede:	d9cc      	bls.n	8003e7a <PID_INIT+0xe>

  }


}
 8003ee0:	bf00      	nop
 8003ee2:	bf00      	nop
 8003ee4:	3714      	adds	r7, #20
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eec:	4770      	bx	lr
 8003eee:	bf00      	nop
 8003ef0:	08012834 	.word	0x08012834
 8003ef4:	08012840 	.word	0x08012840
 8003ef8:	0801284c 	.word	0x0801284c
 8003efc:	08012858 	.word	0x08012858

08003f00 <processCombinedData>:

#include "queue_structs.h"



void processCombinedData(void *event,void *strct1, CombinedDataProcessor processor) {
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b084      	sub	sp, #16
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	60f8      	str	r0, [r7, #12]
 8003f08:	60b9      	str	r1, [r7, #8]
 8003f0a:	607a      	str	r2, [r7, #4]
    processor(event,strct1);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	68b9      	ldr	r1, [r7, #8]
 8003f10:	68f8      	ldr	r0, [r7, #12]
 8003f12:	4798      	blx	r3
}
 8003f14:	bf00      	nop
 8003f16:	3710      	adds	r7, #16
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	bd80      	pop	{r7, pc}

08003f1c <receive_IMUqueue_control>:

void receive_IMUqueue_control(void *event,void *PID_struct) {
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b086      	sub	sp, #24
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
 8003f24:	6039      	str	r1, [r7, #0]

	imu_queue_struct *int_queue_struct;
	PID_Inputs_struct *int_pid_struct = (PID_Inputs_struct *)PID_struct;
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	613b      	str	r3, [r7, #16]

	if (((osEvent *)event)->status == osEventMessage)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	2b10      	cmp	r3, #16
 8003f30:	d127      	bne.n	8003f82 <receive_IMUqueue_control+0x66>
	{
		int_queue_struct = (imu_queue_struct *)((osEvent *) event)->value.p;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	685b      	ldr	r3, [r3, #4]
 8003f36:	60fb      	str	r3, [r7, #12]
#if enable_printf
		printf("Control TASK: Received IMU measured values via Queue \n");
#endif
		for(int i=0;i<3;i++){
 8003f38:	2300      	movs	r3, #0
 8003f3a:	617b      	str	r3, [r7, #20]
 8003f3c:	e01a      	b.n	8003f74 <receive_IMUqueue_control+0x58>

				int_pid_struct->angSpeed_Measured[i] = int_queue_struct->gyro_msr[i];
 8003f3e:	68fa      	ldr	r2, [r7, #12]
 8003f40:	697b      	ldr	r3, [r7, #20]
 8003f42:	009b      	lsls	r3, r3, #2
 8003f44:	4413      	add	r3, r2
 8003f46:	681a      	ldr	r2, [r3, #0]
 8003f48:	6939      	ldr	r1, [r7, #16]
 8003f4a:	697b      	ldr	r3, [r7, #20]
 8003f4c:	331c      	adds	r3, #28
 8003f4e:	009b      	lsls	r3, r3, #2
 8003f50:	440b      	add	r3, r1
 8003f52:	601a      	str	r2, [r3, #0]
#if enable_printf
				printf("Control: Giro[%d] : %f \n",i,int_pid_struct->angSpeed_Measured[i]);
#endif
				int_pid_struct->B[i] = int_queue_struct->mag_msr[i];
 8003f54:	68fa      	ldr	r2, [r7, #12]
 8003f56:	697b      	ldr	r3, [r7, #20]
 8003f58:	3302      	adds	r3, #2
 8003f5a:	009b      	lsls	r3, r3, #2
 8003f5c:	4413      	add	r3, r2
 8003f5e:	3304      	adds	r3, #4
 8003f60:	681a      	ldr	r2, [r3, #0]
 8003f62:	6939      	ldr	r1, [r7, #16]
 8003f64:	697b      	ldr	r3, [r7, #20]
 8003f66:	3352      	adds	r3, #82	; 0x52
 8003f68:	009b      	lsls	r3, r3, #2
 8003f6a:	440b      	add	r3, r1
 8003f6c:	601a      	str	r2, [r3, #0]
		for(int i=0;i<3;i++){
 8003f6e:	697b      	ldr	r3, [r7, #20]
 8003f70:	3301      	adds	r3, #1
 8003f72:	617b      	str	r3, [r7, #20]
 8003f74:	697b      	ldr	r3, [r7, #20]
 8003f76:	2b02      	cmp	r3, #2
 8003f78:	dde1      	ble.n	8003f3e <receive_IMUqueue_control+0x22>
#if enable_printf
				printf("Control: Magn Field[%d] : %f \n",i,int_pid_struct->B[i]);
#endif
		}
		free(int_queue_struct);
 8003f7a:	68f8      	ldr	r0, [r7, #12]
 8003f7c:	f00b fb06 	bl	800f58c <free>
	}
	else
	{
		printf("Control Task: Ricezione IMU fallita con status: %d \n\n", ((osEvent *)event)->status);
	}
}
 8003f80:	e005      	b.n	8003f8e <receive_IMUqueue_control+0x72>
		printf("Control Task: Ricezione IMU fallita con status: %d \n\n", ((osEvent *)event)->status);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	4619      	mov	r1, r3
 8003f88:	4803      	ldr	r0, [pc, #12]	; (8003f98 <receive_IMUqueue_control+0x7c>)
 8003f8a:	f00c f867 	bl	801005c <iprintf>
}
 8003f8e:	bf00      	nop
 8003f90:	3718      	adds	r7, #24
 8003f92:	46bd      	mov	sp, r7
 8003f94:	bd80      	pop	{r7, pc}
 8003f96:	bf00      	nop
 8003f98:	080126c8 	.word	0x080126c8

08003f9c <receive_IMUqueue_OBC>:

void receive_IMUqueue_OBC(void *event,void *attitude) {
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b084      	sub	sp, #16
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
 8003fa4:	6039      	str	r1, [r7, #0]

	imu_queue_struct *int_queue_struct;
	attitudeADCS *int_attitude_struct = (attitudeADCS *)attitude;
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	60fb      	str	r3, [r7, #12]

	if (((osEvent *)event)->status == osEventMessage)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	2b10      	cmp	r3, #16
 8003fb0:	d124      	bne.n	8003ffc <receive_IMUqueue_OBC+0x60>
	{
		int_queue_struct = (imu_queue_struct *)((osEvent *) event)->value.p;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	685b      	ldr	r3, [r3, #4]
 8003fb6:	60bb      	str	r3, [r7, #8]
#if enable_printf
		printf("OBC TASK: Received IMU measured values via Queue \n");
#endif
		int_attitude_struct->omega_x = int_queue_struct->gyro_msr[0];
 8003fb8:	68bb      	ldr	r3, [r7, #8]
 8003fba:	681a      	ldr	r2, [r3, #0]
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	3301      	adds	r3, #1
 8003fc0:	601a      	str	r2, [r3, #0]
		int_attitude_struct->omega_y = int_queue_struct->gyro_msr[1];
 8003fc2:	68bb      	ldr	r3, [r7, #8]
 8003fc4:	685a      	ldr	r2, [r3, #4]
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	3305      	adds	r3, #5
 8003fca:	601a      	str	r2, [r3, #0]
		int_attitude_struct->omega_z = int_queue_struct->gyro_msr[2];
 8003fcc:	68bb      	ldr	r3, [r7, #8]
 8003fce:	689a      	ldr	r2, [r3, #8]
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	3309      	adds	r3, #9
 8003fd4:	601a      	str	r2, [r3, #0]
		int_attitude_struct->b_x = int_queue_struct->mag_msr[0];
 8003fd6:	68bb      	ldr	r3, [r7, #8]
 8003fd8:	68da      	ldr	r2, [r3, #12]
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	330d      	adds	r3, #13
 8003fde:	601a      	str	r2, [r3, #0]
		int_attitude_struct->b_y = int_queue_struct->mag_msr[1];
 8003fe0:	68bb      	ldr	r3, [r7, #8]
 8003fe2:	691a      	ldr	r2, [r3, #16]
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	3311      	adds	r3, #17
 8003fe8:	601a      	str	r2, [r3, #0]
		int_attitude_struct->b_z = int_queue_struct->mag_msr[2];
 8003fea:	68bb      	ldr	r3, [r7, #8]
 8003fec:	695a      	ldr	r2, [r3, #20]
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	3315      	adds	r3, #21
 8003ff2:	601a      	str	r2, [r3, #0]
		printf("OBC: Giro[2] : %f \n",int_attitude_struct->omega_z);
		printf("OBC: Magn Field[0] : %f \n",int_attitude_struct->b_x);
		printf("OBC: Magn Field[1] : %f \n",int_attitude_struct->b_y);
		printf("OBC: Magn Field[2] : %f \n",int_attitude_struct->b_z);
#endif
		free(int_queue_struct);
 8003ff4:	68b8      	ldr	r0, [r7, #8]
 8003ff6:	f00b fac9 	bl	800f58c <free>
		}
		else
		{
			printf("OBC TASK:Ricezione IMU fallita con status: %d \n\n", ((osEvent *)event)->status);
		}
}
 8003ffa:	e005      	b.n	8004008 <receive_IMUqueue_OBC+0x6c>
			printf("OBC TASK:Ricezione IMU fallita con status: %d \n\n", ((osEvent *)event)->status);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4619      	mov	r1, r3
 8004002:	4803      	ldr	r0, [pc, #12]	; (8004010 <receive_IMUqueue_OBC+0x74>)
 8004004:	f00c f82a 	bl	801005c <iprintf>
}
 8004008:	bf00      	nop
 800400a:	3710      	adds	r7, #16
 800400c:	46bd      	mov	sp, r7
 800400e:	bd80      	pop	{r7, pc}
 8004010:	08012700 	.word	0x08012700

08004014 <receive_Current_Tempqueue_OBC>:
void receive_Current_Tempqueue_OBC(void *event,void *current_temp_struct)
{
 8004014:	b580      	push	{r7, lr}
 8004016:	b086      	sub	sp, #24
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
 800401c:	6039      	str	r1, [r7, #0]
	Current_Temp_Struct *int_queue_struct;
	housekeepingADCS *int_HK_struct = (housekeepingADCS *)current_temp_struct;
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	613b      	str	r3, [r7, #16]
	if (((osEvent *)event)->status == osEventMessage)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	2b10      	cmp	r3, #16
 8004028:	d133      	bne.n	8004092 <receive_Current_Tempqueue_OBC+0x7e>
	{
		int_queue_struct = (Current_Temp_Struct *)((osEvent *) event)->value.p;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	685b      	ldr	r3, [r3, #4]
 800402e:	60fb      	str	r3, [r7, #12]
#if enable_printf
		printf("OBC TASK: Received Currents and Temperatures values via Queue \n");
#endif
		for(int i=0;i<NUM_ACTUATORS+NUM_TEMP_SENS;i++)
 8004030:	2300      	movs	r3, #0
 8004032:	617b      	str	r3, [r7, #20]
 8004034:	e026      	b.n	8004084 <receive_Current_Tempqueue_OBC+0x70>
		{
			if(i<NUM_ACTUATORS){
 8004036:	697b      	ldr	r3, [r7, #20]
 8004038:	2b04      	cmp	r3, #4
 800403a:	dc0d      	bgt.n	8004058 <receive_Current_Tempqueue_OBC+0x44>
	    			int_HK_struct->current[i] = int_queue_struct->current[i];
 800403c:	68fa      	ldr	r2, [r7, #12]
 800403e:	697b      	ldr	r3, [r7, #20]
 8004040:	009b      	lsls	r3, r3, #2
 8004042:	4413      	add	r3, r2
 8004044:	6819      	ldr	r1, [r3, #0]
 8004046:	693a      	ldr	r2, [r7, #16]
 8004048:	697b      	ldr	r3, [r7, #20]
 800404a:	330c      	adds	r3, #12
 800404c:	009b      	lsls	r3, r3, #2
 800404e:	4413      	add	r3, r2
 8004050:	3301      	adds	r3, #1
 8004052:	460a      	mov	r2, r1
 8004054:	601a      	str	r2, [r3, #0]
 8004056:	e012      	b.n	800407e <receive_Current_Tempqueue_OBC+0x6a>
#if enable_printf
	    			printf("OBC Task: Actuator %d current: %f Current_Temp_buff: %f \n",i+1,int_HK_struct->current[i],int_queue_struct->current[i]);
#endif
			}
	    	else
	    		if(i<NUM_ACTUATORS+NUM_TEMP_SENS){
 8004058:	697b      	ldr	r3, [r7, #20]
 800405a:	2b0c      	cmp	r3, #12
 800405c:	dc0f      	bgt.n	800407e <receive_Current_Tempqueue_OBC+0x6a>
	    			int_HK_struct->temperature[i - NUM_ACTUATORS] = int_queue_struct->temperature[i - NUM_ACTUATORS];
 800405e:	697b      	ldr	r3, [r7, #20]
 8004060:	1f5a      	subs	r2, r3, #5
 8004062:	697b      	ldr	r3, [r7, #20]
 8004064:	3b05      	subs	r3, #5
 8004066:	68f9      	ldr	r1, [r7, #12]
 8004068:	3204      	adds	r2, #4
 800406a:	0092      	lsls	r2, r2, #2
 800406c:	440a      	add	r2, r1
 800406e:	3204      	adds	r2, #4
 8004070:	6811      	ldr	r1, [r2, #0]
 8004072:	693a      	ldr	r2, [r7, #16]
 8004074:	009b      	lsls	r3, r3, #2
 8004076:	4413      	add	r3, r2
 8004078:	3301      	adds	r3, #1
 800407a:	460a      	mov	r2, r1
 800407c:	601a      	str	r2, [r3, #0]
		for(int i=0;i<NUM_ACTUATORS+NUM_TEMP_SENS;i++)
 800407e:	697b      	ldr	r3, [r7, #20]
 8004080:	3301      	adds	r3, #1
 8004082:	617b      	str	r3, [r7, #20]
 8004084:	697b      	ldr	r3, [r7, #20]
 8004086:	2b0c      	cmp	r3, #12
 8004088:	ddd5      	ble.n	8004036 <receive_Current_Tempqueue_OBC+0x22>
#if enable_printf
	    			printf("OBC Task: Temperature n%d value: %f Current_Temp_buff: %f \n",i - 4,int_HK_struct->temperature[i - NUM_ACTUATORS],int_queue_struct->temperature[i - NUM_ACTUATORS]);
#endif
	    		}
		}
		free(int_queue_struct);
 800408a:	68f8      	ldr	r0, [r7, #12]
 800408c:	f00b fa7e 	bl	800f58c <free>
	else
	{
		printf("OBC TASK: Ricezione correnti e temperature fallita con status: %d \n\n", ((osEvent *)event)->status);
	}

}
 8004090:	e005      	b.n	800409e <receive_Current_Tempqueue_OBC+0x8a>
		printf("OBC TASK: Ricezione correnti e temperature fallita con status: %d \n\n", ((osEvent *)event)->status);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	4619      	mov	r1, r3
 8004098:	4803      	ldr	r0, [pc, #12]	; (80040a8 <receive_Current_Tempqueue_OBC+0x94>)
 800409a:	f00b ffdf 	bl	801005c <iprintf>
}
 800409e:	bf00      	nop
 80040a0:	3718      	adds	r7, #24
 80040a2:	46bd      	mov	sp, r7
 80040a4:	bd80      	pop	{r7, pc}
 80040a6:	bf00      	nop
 80040a8:	08012734 	.word	0x08012734

080040ac <receive_Attitudequeue_control>:

void receive_Attitudequeue_control(void *event,void * PID_struct)
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b086      	sub	sp, #24
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
 80040b4:	6039      	str	r1, [r7, #0]
	setAttitudeADCS *int_attitude_adcs;
	PID_Inputs_struct *int_PID_struct = (PID_Inputs_struct *)PID_struct;
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	613b      	str	r3, [r7, #16]
	if(((osEvent *)event)->status == osEventMessage)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	2b10      	cmp	r3, #16
 80040c0:	d11d      	bne.n	80040fe <receive_Attitudequeue_control+0x52>
	{	
#if enable_printf
		printf("Control TASK: Received AttitudeADCS values via Queue \n");
#endif
		int_attitude_adcs = (setAttitudeADCS *)((osEvent *) event)->value.p;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	685b      	ldr	r3, [r3, #4]
 80040c6:	60fb      	str	r3, [r7, #12]
		int_PID_struct->angSpeed_Desired[0] = int_attitude_adcs->deltaomega_x; //desired
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	f8d3 3001 	ldr.w	r3, [r3, #1]
 80040ce:	693a      	ldr	r2, [r7, #16]
 80040d0:	67d3      	str	r3, [r2, #124]	; 0x7c
		int_PID_struct->angSpeed_Desired[1] = int_attitude_adcs->deltaomega_y; //desired
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	f8d3 3005 	ldr.w	r3, [r3, #5]
 80040d8:	693a      	ldr	r2, [r7, #16]
 80040da:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
		int_PID_struct->angSpeed_Desired[2] = int_attitude_adcs->deltaomega_z; //desired
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	f8d3 3009 	ldr.w	r3, [r3, #9]
 80040e4:	693a      	ldr	r2, [r7, #16]
 80040e6:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
		for(int i=0;i<3;i++)
 80040ea:	2300      	movs	r3, #0
 80040ec:	617b      	str	r3, [r7, #20]
 80040ee:	e002      	b.n	80040f6 <receive_Attitudequeue_control+0x4a>
 80040f0:	697b      	ldr	r3, [r7, #20]
 80040f2:	3301      	adds	r3, #1
 80040f4:	617b      	str	r3, [r7, #20]
 80040f6:	697b      	ldr	r3, [r7, #20]
 80040f8:	2b02      	cmp	r3, #2
 80040fa:	ddf9      	ble.n	80040f0 <receive_Attitudequeue_control+0x44>
		//int_PID_struct->current_Desired[2]  = int_attitude_adcs->deltab_y; //desired
	}
	else{
		printf("Control Task: Ricezione AttitudeADCS fallita con status: %d \n\n", ((osEvent *)event)->status);
	}
}
 80040fc:	e005      	b.n	800410a <receive_Attitudequeue_control+0x5e>
		printf("Control Task: Ricezione AttitudeADCS fallita con status: %d \n\n", ((osEvent *)event)->status);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	4619      	mov	r1, r3
 8004104:	4803      	ldr	r0, [pc, #12]	; (8004114 <receive_Attitudequeue_control+0x68>)
 8004106:	f00b ffa9 	bl	801005c <iprintf>
}
 800410a:	bf00      	nop
 800410c:	3718      	adds	r7, #24
 800410e:	46bd      	mov	sp, r7
 8004110:	bd80      	pop	{r7, pc}
 8004112:	bf00      	nop
 8004114:	0801277c 	.word	0x0801277c

08004118 <init_tempsens_handler>:
//uint8_t WRITE_ON_MR = 0x10; //The first byte to send on DIN to CR to start Conversation in Single MODE
//uint8_t MR_FOR_SINGLE_MOD = 0x86; //The second byte to send on DIN to start Conversation in Single MODE
uint8_t READ_DATAREG = 0x38; //The byte to send on DIN to start obtain the result of Conversation on Dout
uint8_t READ_STATUSREG = 0x08; //The byte to send on DIN to the CR to obtain the content of Status Reg

void init_tempsens_handler(Temp_values *Temp_values){
 8004118:	b480      	push	{r7}
 800411a:	b083      	sub	sp, #12
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
    Temp_values->temp[0] = 0;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	f04f 0200 	mov.w	r2, #0
 8004126:	601a      	str	r2, [r3, #0]
    Temp_values->temp[1] = 0;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	f04f 0200 	mov.w	r2, #0
 800412e:	605a      	str	r2, [r3, #4]
    Temp_values->temp[2] = 0;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	f04f 0200 	mov.w	r2, #0
 8004136:	609a      	str	r2, [r3, #8]
    Temp_values->temp[3] = 0;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	f04f 0200 	mov.w	r2, #0
 800413e:	60da      	str	r2, [r3, #12]
    Temp_values->temp[4] = 0;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	f04f 0200 	mov.w	r2, #0
 8004146:	611a      	str	r2, [r3, #16]
    Temp_values->temp[5] = 0;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	f04f 0200 	mov.w	r2, #0
 800414e:	615a      	str	r2, [r3, #20]
    Temp_values->temp[6] = 0;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	f04f 0200 	mov.w	r2, #0
 8004156:	619a      	str	r2, [r3, #24]
    Temp_values->temp[7] = 0;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	f04f 0200 	mov.w	r2, #0
 800415e:	61da      	str	r2, [r3, #28]
    Temp_values->values.R[0] = 10040; //ohm
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	4a13      	ldr	r2, [pc, #76]	; (80041b0 <init_tempsens_handler+0x98>)
 8004164:	625a      	str	r2, [r3, #36]	; 0x24
    Temp_values->values.R[1] = 10020; //ohm
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	4a12      	ldr	r2, [pc, #72]	; (80041b4 <init_tempsens_handler+0x9c>)
 800416a:	629a      	str	r2, [r3, #40]	; 0x28
    Temp_values->values.R[2] = 10000; //ohm
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	4a12      	ldr	r2, [pc, #72]	; (80041b8 <init_tempsens_handler+0xa0>)
 8004170:	62da      	str	r2, [r3, #44]	; 0x2c
    Temp_values->values.R[3] = 10020; //ohm
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	4a0f      	ldr	r2, [pc, #60]	; (80041b4 <init_tempsens_handler+0x9c>)
 8004176:	631a      	str	r2, [r3, #48]	; 0x30
    Temp_values->values.R[4] = 10000; //ohm
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	4a0f      	ldr	r2, [pc, #60]	; (80041b8 <init_tempsens_handler+0xa0>)
 800417c:	635a      	str	r2, [r3, #52]	; 0x34
    Temp_values->values.R[5] = 10010; //ohm
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	4a0e      	ldr	r2, [pc, #56]	; (80041bc <init_tempsens_handler+0xa4>)
 8004182:	639a      	str	r2, [r3, #56]	; 0x38
    Temp_values->values.R[6] = 10000; //ohm
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	4a0c      	ldr	r2, [pc, #48]	; (80041b8 <init_tempsens_handler+0xa0>)
 8004188:	63da      	str	r2, [r3, #60]	; 0x3c
    Temp_values->values.R[7] = 10000; //ohm
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	4a0a      	ldr	r2, [pc, #40]	; (80041b8 <init_tempsens_handler+0xa0>)
 800418e:	641a      	str	r2, [r3, #64]	; 0x40
    Temp_values->values.R_25 = 10000; //ohm
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	4a09      	ldr	r2, [pc, #36]	; (80041b8 <init_tempsens_handler+0xa0>)
 8004194:	621a      	str	r2, [r3, #32]
    Temp_values->values.B = 3977; //k
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	4a09      	ldr	r2, [pc, #36]	; (80041c0 <init_tempsens_handler+0xa8>)
 800419a:	645a      	str	r2, [r3, #68]	; 0x44
    Temp_values->values.Vdd = 3.3; //v
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	4a09      	ldr	r2, [pc, #36]	; (80041c4 <init_tempsens_handler+0xac>)
 80041a0:	649a      	str	r2, [r3, #72]	; 0x48
}
 80041a2:	bf00      	nop
 80041a4:	370c      	adds	r7, #12
 80041a6:	46bd      	mov	sp, r7
 80041a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ac:	4770      	bx	lr
 80041ae:	bf00      	nop
 80041b0:	461ce000 	.word	0x461ce000
 80041b4:	461c9000 	.word	0x461c9000
 80041b8:	461c4000 	.word	0x461c4000
 80041bc:	461c6800 	.word	0x461c6800
 80041c0:	45789000 	.word	0x45789000
 80041c4:	40533333 	.word	0x40533333

080041c8 <select_input>:

void select_input(uint8_t sel)
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b082      	sub	sp, #8
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	4603      	mov	r3, r0
 80041d0:	71fb      	strb	r3, [r7, #7]
    //s3 must be put to 0 always,otherwise the mux would not put out the signal
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET); //s3 = 0
 80041d2:	2200      	movs	r2, #0
 80041d4:	2110      	movs	r1, #16
 80041d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80041da:	f003 ff39 	bl	8008050 <HAL_GPIO_WritePin>
    switch (sel)
 80041de:	79fb      	ldrb	r3, [r7, #7]
 80041e0:	2b07      	cmp	r3, #7
 80041e2:	f200 809b 	bhi.w	800431c <select_input+0x154>
 80041e6:	a201      	add	r2, pc, #4	; (adr r2, 80041ec <select_input+0x24>)
 80041e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041ec:	0800420d 	.word	0x0800420d
 80041f0:	0800422f 	.word	0x0800422f
 80041f4:	08004251 	.word	0x08004251
 80041f8:	08004273 	.word	0x08004273
 80041fc:	08004295 	.word	0x08004295
 8004200:	080042b7 	.word	0x080042b7
 8004204:	080042d9 	.word	0x080042d9
 8004208:	080042fb 	.word	0x080042fb
    {
    case 0:
        /* code */
        //Select Y0
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET); //s2 = 0
 800420c:	2200      	movs	r2, #0
 800420e:	2101      	movs	r1, #1
 8004210:	4846      	ldr	r0, [pc, #280]	; (800432c <select_input+0x164>)
 8004212:	f003 ff1d 	bl	8008050 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET); //s1 = 0
 8004216:	2200      	movs	r2, #0
 8004218:	2104      	movs	r1, #4
 800421a:	4845      	ldr	r0, [pc, #276]	; (8004330 <select_input+0x168>)
 800421c:	f003 ff18 	bl	8008050 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET); //s0 = 0
 8004220:	2200      	movs	r2, #0
 8004222:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004226:	4841      	ldr	r0, [pc, #260]	; (800432c <select_input+0x164>)
 8004228:	f003 ff12 	bl	8008050 <HAL_GPIO_WritePin>
        
        
        break;
 800422c:	e07a      	b.n	8004324 <select_input+0x15c>
    case 1:
        /* code */
        //Select Y1
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET); //s2 = 0
 800422e:	2200      	movs	r2, #0
 8004230:	2101      	movs	r1, #1
 8004232:	483e      	ldr	r0, [pc, #248]	; (800432c <select_input+0x164>)
 8004234:	f003 ff0c 	bl	8008050 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET); //s1 = 0
 8004238:	2200      	movs	r2, #0
 800423a:	2104      	movs	r1, #4
 800423c:	483c      	ldr	r0, [pc, #240]	; (8004330 <select_input+0x168>)
 800423e:	f003 ff07 	bl	8008050 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET); //s0 = 1
 8004242:	2201      	movs	r2, #1
 8004244:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004248:	4838      	ldr	r0, [pc, #224]	; (800432c <select_input+0x164>)
 800424a:	f003 ff01 	bl	8008050 <HAL_GPIO_WritePin>
        break;
 800424e:	e069      	b.n	8004324 <select_input+0x15c>
    case 2:
        /* code */
        //Select Y2
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET); //s2 = 0
 8004250:	2200      	movs	r2, #0
 8004252:	2101      	movs	r1, #1
 8004254:	4835      	ldr	r0, [pc, #212]	; (800432c <select_input+0x164>)
 8004256:	f003 fefb 	bl	8008050 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_SET); //s1 = 1
 800425a:	2201      	movs	r2, #1
 800425c:	2104      	movs	r1, #4
 800425e:	4834      	ldr	r0, [pc, #208]	; (8004330 <select_input+0x168>)
 8004260:	f003 fef6 	bl	8008050 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET); //s0 = 0
 8004264:	2200      	movs	r2, #0
 8004266:	f44f 7180 	mov.w	r1, #256	; 0x100
 800426a:	4830      	ldr	r0, [pc, #192]	; (800432c <select_input+0x164>)
 800426c:	f003 fef0 	bl	8008050 <HAL_GPIO_WritePin>
        break;
 8004270:	e058      	b.n	8004324 <select_input+0x15c>
    case 3:
        /* code */
        //Select Y3
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET); //s2 = 0
 8004272:	2200      	movs	r2, #0
 8004274:	2101      	movs	r1, #1
 8004276:	482d      	ldr	r0, [pc, #180]	; (800432c <select_input+0x164>)
 8004278:	f003 feea 	bl	8008050 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_SET); //s1 = 1
 800427c:	2201      	movs	r2, #1
 800427e:	2104      	movs	r1, #4
 8004280:	482b      	ldr	r0, [pc, #172]	; (8004330 <select_input+0x168>)
 8004282:	f003 fee5 	bl	8008050 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET); //s0 = 1
 8004286:	2201      	movs	r2, #1
 8004288:	f44f 7180 	mov.w	r1, #256	; 0x100
 800428c:	4827      	ldr	r0, [pc, #156]	; (800432c <select_input+0x164>)
 800428e:	f003 fedf 	bl	8008050 <HAL_GPIO_WritePin>
        break;
 8004292:	e047      	b.n	8004324 <select_input+0x15c>
    case 4:
        /* code */
        //Select Y4
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET); //s2 = 1
 8004294:	2201      	movs	r2, #1
 8004296:	2101      	movs	r1, #1
 8004298:	4824      	ldr	r0, [pc, #144]	; (800432c <select_input+0x164>)
 800429a:	f003 fed9 	bl	8008050 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET); //s1 = 0
 800429e:	2200      	movs	r2, #0
 80042a0:	2104      	movs	r1, #4
 80042a2:	4823      	ldr	r0, [pc, #140]	; (8004330 <select_input+0x168>)
 80042a4:	f003 fed4 	bl	8008050 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET); //s0 = 0
 80042a8:	2200      	movs	r2, #0
 80042aa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80042ae:	481f      	ldr	r0, [pc, #124]	; (800432c <select_input+0x164>)
 80042b0:	f003 fece 	bl	8008050 <HAL_GPIO_WritePin>
        break;
 80042b4:	e036      	b.n	8004324 <select_input+0x15c>
    case 5:
        /* code */
        //Select Y5
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET); //s2 = 1
 80042b6:	2201      	movs	r2, #1
 80042b8:	2101      	movs	r1, #1
 80042ba:	481c      	ldr	r0, [pc, #112]	; (800432c <select_input+0x164>)
 80042bc:	f003 fec8 	bl	8008050 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET); //s1 = 0
 80042c0:	2200      	movs	r2, #0
 80042c2:	2104      	movs	r1, #4
 80042c4:	481a      	ldr	r0, [pc, #104]	; (8004330 <select_input+0x168>)
 80042c6:	f003 fec3 	bl	8008050 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET); //s0 = 1
 80042ca:	2201      	movs	r2, #1
 80042cc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80042d0:	4816      	ldr	r0, [pc, #88]	; (800432c <select_input+0x164>)
 80042d2:	f003 febd 	bl	8008050 <HAL_GPIO_WritePin>
        break;
 80042d6:	e025      	b.n	8004324 <select_input+0x15c>
    case 6:
        /* code */
        //Select Y6
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET); //s2 = 1
 80042d8:	2201      	movs	r2, #1
 80042da:	2101      	movs	r1, #1
 80042dc:	4813      	ldr	r0, [pc, #76]	; (800432c <select_input+0x164>)
 80042de:	f003 feb7 	bl	8008050 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_SET); //s1 = 1
 80042e2:	2201      	movs	r2, #1
 80042e4:	2104      	movs	r1, #4
 80042e6:	4812      	ldr	r0, [pc, #72]	; (8004330 <select_input+0x168>)
 80042e8:	f003 feb2 	bl	8008050 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET); //s0 = 0
 80042ec:	2200      	movs	r2, #0
 80042ee:	f44f 7180 	mov.w	r1, #256	; 0x100
 80042f2:	480e      	ldr	r0, [pc, #56]	; (800432c <select_input+0x164>)
 80042f4:	f003 feac 	bl	8008050 <HAL_GPIO_WritePin>
        break;
 80042f8:	e014      	b.n	8004324 <select_input+0x15c>
    case 7:
        /* code */
        //Select Y7
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET); //s2 = 1
 80042fa:	2201      	movs	r2, #1
 80042fc:	2101      	movs	r1, #1
 80042fe:	480b      	ldr	r0, [pc, #44]	; (800432c <select_input+0x164>)
 8004300:	f003 fea6 	bl	8008050 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_SET); //s1 = 1
 8004304:	2201      	movs	r2, #1
 8004306:	2104      	movs	r1, #4
 8004308:	4809      	ldr	r0, [pc, #36]	; (8004330 <select_input+0x168>)
 800430a:	f003 fea1 	bl	8008050 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET); //s0 = 1
 800430e:	2201      	movs	r2, #1
 8004310:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004314:	4805      	ldr	r0, [pc, #20]	; (800432c <select_input+0x164>)
 8004316:	f003 fe9b 	bl	8008050 <HAL_GPIO_WritePin>
        break;
 800431a:	e003      	b.n	8004324 <select_input+0x15c>

    default:
        /* code */
        //Error, print that the sel value is not correct
    	printf("Error: selection signal is NOT CORRECT!!! \n");
 800431c:	4805      	ldr	r0, [pc, #20]	; (8004334 <select_input+0x16c>)
 800431e:	f00b ff23 	bl	8010168 <puts>
        break;
 8004322:	bf00      	nop
    }
}
 8004324:	bf00      	nop
 8004326:	3708      	adds	r7, #8
 8004328:	46bd      	mov	sp, r7
 800432a:	bd80      	pop	{r7, pc}
 800432c:	48000400 	.word	0x48000400
 8004330:	48000c00 	.word	0x48000c00
 8004334:	080127bc 	.word	0x080127bc

08004338 <ADC_Conversion>:

float ADC_Conversion(SPI_HandleTypeDef *spi_struct,uint8_t mode)
{
 8004338:	b580      	push	{r7, lr}
 800433a:	b088      	sub	sp, #32
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
 8004340:	460b      	mov	r3, r1
 8004342:	70fb      	strb	r3, [r7, #3]
    uint8_t spi_data[2];
    volatile uint16_t dec_data;
    //uint8_t status_reg_val;
    uint32_t time_start = 0; //ms
 8004344:	2300      	movs	r3, #0
 8004346:	61fb      	str	r3, [r7, #28]
    uint32_t timeout = 100; //ms
 8004348:	2364      	movs	r3, #100	; 0x64
 800434a:	61bb      	str	r3, [r7, #24]
    volatile float data = 0;
 800434c:	f04f 0300 	mov.w	r3, #0
 8004350:	60fb      	str	r3, [r7, #12]
    if(mode == 0) //Continuous conversion mode
 8004352:	78fb      	ldrb	r3, [r7, #3]
 8004354:	2b00      	cmp	r3, #0
 8004356:	d145      	bne.n	80043e4 <ADC_Conversion+0xac>
    {
#if enable_printf
    	printf("Continuous conversion mode \n");
#endif
    	//CS LOW: Enable communication
    	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8004358:	2200      	movs	r2, #0
 800435a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800435e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004362:	f003 fe75 	bl	8008050 <HAL_GPIO_WritePin>
    	//time_start = HAL_GetTick() + 100;
    	//while(HAL_GetTick()<time_start);
    	HAL_SPI_Transmit(spi_struct,&READ_DATAREG, 1,timeout);
 8004366:	69bb      	ldr	r3, [r7, #24]
 8004368:	2201      	movs	r2, #1
 800436a:	4959      	ldr	r1, [pc, #356]	; (80044d0 <ADC_Conversion+0x198>)
 800436c:	6878      	ldr	r0, [r7, #4]
 800436e:	f005 f956 	bl	800961e <HAL_SPI_Transmit>
    	HAL_SPI_Receive(spi_struct,spi_data, 2,timeout);
 8004372:	f107 0114 	add.w	r1, r7, #20
 8004376:	69bb      	ldr	r3, [r7, #24]
 8004378:	2202      	movs	r2, #2
 800437a:	6878      	ldr	r0, [r7, #4]
 800437c:	f005 fabd 	bl	80098fa <HAL_SPI_Receive>
    	//CS HIGH: Disable communication
    	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8004380:	2201      	movs	r2, #1
 8004382:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004386:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800438a:	f003 fe61 	bl	8008050 <HAL_GPIO_WritePin>
    	dec_data = (spi_data[0]<<8)|spi_data[1];
 800438e:	7d3b      	ldrb	r3, [r7, #20]
 8004390:	021b      	lsls	r3, r3, #8
 8004392:	b21a      	sxth	r2, r3
 8004394:	7d7b      	ldrb	r3, [r7, #21]
 8004396:	b21b      	sxth	r3, r3
 8004398:	4313      	orrs	r3, r2
 800439a:	b21b      	sxth	r3, r3
 800439c:	b29b      	uxth	r3, r3
 800439e:	827b      	strh	r3, [r7, #18]
    	data = ((float)dec_data/pow(2,N))*Vref;
 80043a0:	8a7b      	ldrh	r3, [r7, #18]
 80043a2:	b29b      	uxth	r3, r3
 80043a4:	ee07 3a90 	vmov	s15, r3
 80043a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043ac:	ee17 0a90 	vmov	r0, s15
 80043b0:	f7fc f8d2 	bl	8000558 <__aeabi_f2d>
 80043b4:	f04f 0200 	mov.w	r2, #0
 80043b8:	4b46      	ldr	r3, [pc, #280]	; (80044d4 <ADC_Conversion+0x19c>)
 80043ba:	f7fc fa4f 	bl	800085c <__aeabi_ddiv>
 80043be:	4602      	mov	r2, r0
 80043c0:	460b      	mov	r3, r1
 80043c2:	4610      	mov	r0, r2
 80043c4:	4619      	mov	r1, r3
 80043c6:	a33e      	add	r3, pc, #248	; (adr r3, 80044c0 <ADC_Conversion+0x188>)
 80043c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043cc:	f7fc f91c 	bl	8000608 <__aeabi_dmul>
 80043d0:	4602      	mov	r2, r0
 80043d2:	460b      	mov	r3, r1
 80043d4:	4610      	mov	r0, r2
 80043d6:	4619      	mov	r1, r3
 80043d8:	f7fc fbee 	bl	8000bb8 <__aeabi_d2f>
 80043dc:	4603      	mov	r3, r0
 80043de:	60fb      	str	r3, [r7, #12]
#if enable_printf
        printf("Transmitted packet and received bytes: %d, data =  %f v \n",dec_data,data);
#endif
        return data;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	e065      	b.n	80044b0 <ADC_Conversion+0x178>
    }
    else if(mode == 1) //Single conversion mode
 80043e4:	78fb      	ldrb	r3, [r7, #3]
 80043e6:	2b01      	cmp	r3, #1
 80043e8:	d157      	bne.n	800449a <ADC_Conversion+0x162>
    {
#if enable_printf
    	printf("Single conversion mode \n");
#endif
    	//CS LOW: Enable communication
    	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 80043ea:	2200      	movs	r2, #0
 80043ec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80043f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80043f4:	f003 fe2c 	bl	8008050 <HAL_GPIO_WritePin>

    	HAL_SPI_Transmit(spi_struct,single_mode_pckt, 2, timeout);
 80043f8:	69bb      	ldr	r3, [r7, #24]
 80043fa:	2202      	movs	r2, #2
 80043fc:	4936      	ldr	r1, [pc, #216]	; (80044d8 <ADC_Conversion+0x1a0>)
 80043fe:	6878      	ldr	r0, [r7, #4]
 8004400:	f005 f90d 	bl	800961e <HAL_SPI_Transmit>
    	time_start = HAL_GetTick() + 200;
 8004404:	f001 ff4c 	bl	80062a0 <HAL_GetTick>
 8004408:	4603      	mov	r3, r0
 800440a:	33c8      	adds	r3, #200	; 0xc8
 800440c:	61fb      	str	r3, [r7, #28]
    	//printf("time_start : %lu, cpu time: %lu \n",time_start,HAL_GetTick());
    	while(HAL_GetTick()<time_start);
 800440e:	bf00      	nop
 8004410:	f001 ff46 	bl	80062a0 <HAL_GetTick>
 8004414:	4602      	mov	r2, r0
 8004416:	69fb      	ldr	r3, [r7, #28]
 8004418:	4293      	cmp	r3, r2
 800441a:	d8f9      	bhi.n	8004410 <ADC_Conversion+0xd8>
    	//Get the result of conversion
    	HAL_SPI_Transmit(spi_struct,&READ_DATAREG, 1,timeout);
 800441c:	69bb      	ldr	r3, [r7, #24]
 800441e:	2201      	movs	r2, #1
 8004420:	492b      	ldr	r1, [pc, #172]	; (80044d0 <ADC_Conversion+0x198>)
 8004422:	6878      	ldr	r0, [r7, #4]
 8004424:	f005 f8fb 	bl	800961e <HAL_SPI_Transmit>
    	HAL_SPI_Receive(spi_struct,spi_data, 2,timeout);
 8004428:	f107 0114 	add.w	r1, r7, #20
 800442c:	69bb      	ldr	r3, [r7, #24]
 800442e:	2202      	movs	r2, #2
 8004430:	6878      	ldr	r0, [r7, #4]
 8004432:	f005 fa62 	bl	80098fa <HAL_SPI_Receive>
    	//HAL_SPI_TransmitReceive(spi_struct,&READ_DATAREG,spi_data,1,timeout+100);
    	//CS HIGH: Disable communication
    	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8004436:	2201      	movs	r2, #1
 8004438:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800443c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004440:	f003 fe06 	bl	8008050 <HAL_GPIO_WritePin>
    	//Process result of conversuion
   		dec_data = (spi_data[0]<<8)|spi_data[1];
 8004444:	7d3b      	ldrb	r3, [r7, #20]
 8004446:	021b      	lsls	r3, r3, #8
 8004448:	b21a      	sxth	r2, r3
 800444a:	7d7b      	ldrb	r3, [r7, #21]
 800444c:	b21b      	sxth	r3, r3
 800444e:	4313      	orrs	r3, r2
 8004450:	b21b      	sxth	r3, r3
 8004452:	b29b      	uxth	r3, r3
 8004454:	827b      	strh	r3, [r7, #18]
   		data = (((float)dec_data)/(pow(2,N)-1))*Vref;
 8004456:	8a7b      	ldrh	r3, [r7, #18]
 8004458:	b29b      	uxth	r3, r3
 800445a:	ee07 3a90 	vmov	s15, r3
 800445e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004462:	ee17 0a90 	vmov	r0, s15
 8004466:	f7fc f877 	bl	8000558 <__aeabi_f2d>
 800446a:	a317      	add	r3, pc, #92	; (adr r3, 80044c8 <ADC_Conversion+0x190>)
 800446c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004470:	f7fc f9f4 	bl	800085c <__aeabi_ddiv>
 8004474:	4602      	mov	r2, r0
 8004476:	460b      	mov	r3, r1
 8004478:	4610      	mov	r0, r2
 800447a:	4619      	mov	r1, r3
 800447c:	a310      	add	r3, pc, #64	; (adr r3, 80044c0 <ADC_Conversion+0x188>)
 800447e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004482:	f7fc f8c1 	bl	8000608 <__aeabi_dmul>
 8004486:	4602      	mov	r2, r0
 8004488:	460b      	mov	r3, r1
 800448a:	4610      	mov	r0, r2
 800448c:	4619      	mov	r1, r3
 800448e:	f7fc fb93 	bl	8000bb8 <__aeabi_d2f>
 8004492:	4603      	mov	r3, r0
 8004494:	60fb      	str	r3, [r7, #12]
#if enable_printf
   		printf("Transmitted packet and received bytes: %d, data =  %f v \n",dec_data,data);
#endif
   		return data;
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	e00a      	b.n	80044b0 <ADC_Conversion+0x178>
    }
    else if(mode == 2) //Continuous read Mode
 800449a:	78fb      	ldrb	r3, [r7, #3]
 800449c:	2b02      	cmp	r3, #2
 800449e:	d102      	bne.n	80044a6 <ADC_Conversion+0x16e>
    {
#if enable_printf
    	printf("Continuous read mode \n");
#endif
		return 1;
 80044a0:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80044a4:	e004      	b.n	80044b0 <ADC_Conversion+0x178>
    }
    else{
        //Stampa che non è stato inserito il mode corretto perchè deve essere compreso tra 0 e 2
    	printf("Error: mode value must between 0 and 2!!! \n");
 80044a6:	480d      	ldr	r0, [pc, #52]	; (80044dc <ADC_Conversion+0x1a4>)
 80044a8:	f00b fe5e 	bl	8010168 <puts>

    	return 0;
 80044ac:	f04f 0300 	mov.w	r3, #0
    }

}
 80044b0:	ee07 3a90 	vmov	s15, r3
 80044b4:	eeb0 0a67 	vmov.f32	s0, s15
 80044b8:	3720      	adds	r7, #32
 80044ba:	46bd      	mov	sp, r7
 80044bc:	bd80      	pop	{r7, pc}
 80044be:	bf00      	nop
 80044c0:	66666666 	.word	0x66666666
 80044c4:	400a6666 	.word	0x400a6666
 80044c8:	00000000 	.word	0x00000000
 80044cc:	40efffe0 	.word	0x40efffe0
 80044d0:	2000000a 	.word	0x2000000a
 80044d4:	40f00000 	.word	0x40f00000
 80044d8:	20000008 	.word	0x20000008
 80044dc:	080127e8 	.word	0x080127e8

080044e0 <voltage_to_temperature_conv>:

void voltage_to_temperature_conv(float value,Temp_values *s1,uint8_t i){
 80044e0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80044e4:	b084      	sub	sp, #16
 80044e6:	af00      	add	r7, sp, #0
 80044e8:	ed87 0a03 	vstr	s0, [r7, #12]
 80044ec:	60b8      	str	r0, [r7, #8]
 80044ee:	460b      	mov	r3, r1
 80044f0:	71fb      	strb	r3, [r7, #7]

	//printf("Value: %f, B: %f, Vdd: %f, R_25: %f, R: %f \n",value,s1->values.B,s1->values.Vdd,s1->values.R_25,s1->values.R[i]);
	s1->temp[i] = ((298.15 * s1->values.B)/(s1->values.B - (298.15*(ln(((s1->values.Vdd/value)-1)*(s1->values.R_25/s1->values.R[i])))))) - 273.15;
 80044f2:	68bb      	ldr	r3, [r7, #8]
 80044f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044f6:	4618      	mov	r0, r3
 80044f8:	f7fc f82e 	bl	8000558 <__aeabi_f2d>
 80044fc:	a330      	add	r3, pc, #192	; (adr r3, 80045c0 <voltage_to_temperature_conv+0xe0>)
 80044fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004502:	f7fc f881 	bl	8000608 <__aeabi_dmul>
 8004506:	4602      	mov	r2, r0
 8004508:	460b      	mov	r3, r1
 800450a:	4690      	mov	r8, r2
 800450c:	4699      	mov	r9, r3
 800450e:	68bb      	ldr	r3, [r7, #8]
 8004510:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004512:	4618      	mov	r0, r3
 8004514:	f7fc f820 	bl	8000558 <__aeabi_f2d>
 8004518:	4604      	mov	r4, r0
 800451a:	460d      	mov	r5, r1
 800451c:	68bb      	ldr	r3, [r7, #8]
 800451e:	edd3 6a12 	vldr	s13, [r3, #72]	; 0x48
 8004522:	ed97 7a03 	vldr	s14, [r7, #12]
 8004526:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800452a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800452e:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8004532:	68bb      	ldr	r3, [r7, #8]
 8004534:	ed93 6a08 	vldr	s12, [r3, #32]
 8004538:	79fb      	ldrb	r3, [r7, #7]
 800453a:	68ba      	ldr	r2, [r7, #8]
 800453c:	3308      	adds	r3, #8
 800453e:	009b      	lsls	r3, r3, #2
 8004540:	4413      	add	r3, r2
 8004542:	3304      	adds	r3, #4
 8004544:	edd3 6a00 	vldr	s13, [r3]
 8004548:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800454c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004550:	ee17 0a90 	vmov	r0, s15
 8004554:	f7fc f800 	bl	8000558 <__aeabi_f2d>
 8004558:	4602      	mov	r2, r0
 800455a:	460b      	mov	r3, r1
 800455c:	ec43 2b10 	vmov	d0, r2, r3
 8004560:	f00d fde2 	bl	8012128 <log>
 8004564:	ec51 0b10 	vmov	r0, r1, d0
 8004568:	a315      	add	r3, pc, #84	; (adr r3, 80045c0 <voltage_to_temperature_conv+0xe0>)
 800456a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800456e:	f7fc f84b 	bl	8000608 <__aeabi_dmul>
 8004572:	4602      	mov	r2, r0
 8004574:	460b      	mov	r3, r1
 8004576:	4620      	mov	r0, r4
 8004578:	4629      	mov	r1, r5
 800457a:	f7fb fe8d 	bl	8000298 <__aeabi_dsub>
 800457e:	4602      	mov	r2, r0
 8004580:	460b      	mov	r3, r1
 8004582:	4640      	mov	r0, r8
 8004584:	4649      	mov	r1, r9
 8004586:	f7fc f969 	bl	800085c <__aeabi_ddiv>
 800458a:	4602      	mov	r2, r0
 800458c:	460b      	mov	r3, r1
 800458e:	4610      	mov	r0, r2
 8004590:	4619      	mov	r1, r3
 8004592:	a30d      	add	r3, pc, #52	; (adr r3, 80045c8 <voltage_to_temperature_conv+0xe8>)
 8004594:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004598:	f7fb fe7e 	bl	8000298 <__aeabi_dsub>
 800459c:	4602      	mov	r2, r0
 800459e:	460b      	mov	r3, r1
 80045a0:	79fc      	ldrb	r4, [r7, #7]
 80045a2:	4610      	mov	r0, r2
 80045a4:	4619      	mov	r1, r3
 80045a6:	f7fc fb07 	bl	8000bb8 <__aeabi_d2f>
 80045aa:	4601      	mov	r1, r0
 80045ac:	68ba      	ldr	r2, [r7, #8]
 80045ae:	00a3      	lsls	r3, r4, #2
 80045b0:	4413      	add	r3, r2
 80045b2:	6019      	str	r1, [r3, #0]
	//printf("Temperature: %f \n",s1->temp[i]);
}
 80045b4:	bf00      	nop
 80045b6:	3710      	adds	r7, #16
 80045b8:	46bd      	mov	sp, r7
 80045ba:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80045be:	bf00      	nop
 80045c0:	66666666 	.word	0x66666666
 80045c4:	4072a266 	.word	0x4072a266
 80045c8:	66666666 	.word	0x66666666
 80045cc:	40711266 	.word	0x40711266

080045d0 <get_temperatures>:

void get_temperatures(SPI_HandleTypeDef *spi_struct,Temp_values *temp_struct, uint8_t counter)
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b086      	sub	sp, #24
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	60f8      	str	r0, [r7, #12]
 80045d8:	60b9      	str	r1, [r7, #8]
 80045da:	4613      	mov	r3, r2
 80045dc:	71fb      	strb	r3, [r7, #7]
	volatile float conv_result;
	switch(counter)
 80045de:	79fb      	ldrb	r3, [r7, #7]
 80045e0:	2b07      	cmp	r3, #7
 80045e2:	f200 80b3 	bhi.w	800474c <get_temperatures+0x17c>
 80045e6:	a201      	add	r2, pc, #4	; (adr r2, 80045ec <get_temperatures+0x1c>)
 80045e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045ec:	0800460d 	.word	0x0800460d
 80045f0:	08004635 	.word	0x08004635
 80045f4:	0800465d 	.word	0x0800465d
 80045f8:	08004685 	.word	0x08004685
 80045fc:	080046ad 	.word	0x080046ad
 8004600:	080046d5 	.word	0x080046d5
 8004604:	080046fd 	.word	0x080046fd
 8004608:	08004725 	.word	0x08004725
	{
		case 0:

		select_input(0);
 800460c:	2000      	movs	r0, #0
 800460e:	f7ff fddb 	bl	80041c8 <select_input>
		//Single conversion mode
		conv_result = ADC_Conversion(spi_struct,1);
 8004612:	2101      	movs	r1, #1
 8004614:	68f8      	ldr	r0, [r7, #12]
 8004616:	f7ff fe8f 	bl	8004338 <ADC_Conversion>
 800461a:	eef0 7a40 	vmov.f32	s15, s0
 800461e:	edc7 7a05 	vstr	s15, [r7, #20]
		voltage_to_temperature_conv(conv_result,temp_struct,0);
 8004622:	edd7 7a05 	vldr	s15, [r7, #20]
 8004626:	2100      	movs	r1, #0
 8004628:	68b8      	ldr	r0, [r7, #8]
 800462a:	eeb0 0a67 	vmov.f32	s0, s15
 800462e:	f7ff ff57 	bl	80044e0 <voltage_to_temperature_conv>
#if enable_printf
		printf("Sensors 1 Temp : %.2f \n",temp_struct->temp[0]);
#endif
		//HAL_Delay(100);

		break;
 8004632:	e08c      	b.n	800474e <get_temperatures+0x17e>

		case 1:

		select_input(1);
 8004634:	2001      	movs	r0, #1
 8004636:	f7ff fdc7 	bl	80041c8 <select_input>
		//Single conversion mode
		conv_result = ADC_Conversion(spi_struct,1);
 800463a:	2101      	movs	r1, #1
 800463c:	68f8      	ldr	r0, [r7, #12]
 800463e:	f7ff fe7b 	bl	8004338 <ADC_Conversion>
 8004642:	eef0 7a40 	vmov.f32	s15, s0
 8004646:	edc7 7a05 	vstr	s15, [r7, #20]
		voltage_to_temperature_conv(conv_result,temp_struct,1);
 800464a:	edd7 7a05 	vldr	s15, [r7, #20]
 800464e:	2101      	movs	r1, #1
 8004650:	68b8      	ldr	r0, [r7, #8]
 8004652:	eeb0 0a67 	vmov.f32	s0, s15
 8004656:	f7ff ff43 	bl	80044e0 <voltage_to_temperature_conv>
#if enable_printf
		printf("Sensors 2 Temp : %.2f \n",temp_struct->temp[1]);
#endif
		//HAL_Delay(100);

		break;
 800465a:	e078      	b.n	800474e <get_temperatures+0x17e>

		case 2:

		select_input(2);
 800465c:	2002      	movs	r0, #2
 800465e:	f7ff fdb3 	bl	80041c8 <select_input>
		//Single conversion mode
		conv_result = ADC_Conversion(spi_struct,1);
 8004662:	2101      	movs	r1, #1
 8004664:	68f8      	ldr	r0, [r7, #12]
 8004666:	f7ff fe67 	bl	8004338 <ADC_Conversion>
 800466a:	eef0 7a40 	vmov.f32	s15, s0
 800466e:	edc7 7a05 	vstr	s15, [r7, #20]
		voltage_to_temperature_conv(conv_result,temp_struct,2);
 8004672:	edd7 7a05 	vldr	s15, [r7, #20]
 8004676:	2102      	movs	r1, #2
 8004678:	68b8      	ldr	r0, [r7, #8]
 800467a:	eeb0 0a67 	vmov.f32	s0, s15
 800467e:	f7ff ff2f 	bl	80044e0 <voltage_to_temperature_conv>
#if enable_printf
		printf("Sensors 3 Temp : %.2f \n",temp_struct->temp[2]);
#endif
		//HAL_Delay(100);

		break;
 8004682:	e064      	b.n	800474e <get_temperatures+0x17e>

		case 3:

		select_input(3);
 8004684:	2003      	movs	r0, #3
 8004686:	f7ff fd9f 	bl	80041c8 <select_input>
		//Single conversion mode
		conv_result = ADC_Conversion(spi_struct,1);
 800468a:	2101      	movs	r1, #1
 800468c:	68f8      	ldr	r0, [r7, #12]
 800468e:	f7ff fe53 	bl	8004338 <ADC_Conversion>
 8004692:	eef0 7a40 	vmov.f32	s15, s0
 8004696:	edc7 7a05 	vstr	s15, [r7, #20]
		voltage_to_temperature_conv(conv_result,temp_struct,3);
 800469a:	edd7 7a05 	vldr	s15, [r7, #20]
 800469e:	2103      	movs	r1, #3
 80046a0:	68b8      	ldr	r0, [r7, #8]
 80046a2:	eeb0 0a67 	vmov.f32	s0, s15
 80046a6:	f7ff ff1b 	bl	80044e0 <voltage_to_temperature_conv>
#if enable_printf
		printf("Sensors 4 Temp : %.2f \n",temp_struct->temp[3]);
#endif
		//HAL_Delay(100);
		break;
 80046aa:	e050      	b.n	800474e <get_temperatures+0x17e>

		case 4:

		select_input(4);
 80046ac:	2004      	movs	r0, #4
 80046ae:	f7ff fd8b 	bl	80041c8 <select_input>
		//Single conversion mode
		conv_result = ADC_Conversion(spi_struct,1);
 80046b2:	2101      	movs	r1, #1
 80046b4:	68f8      	ldr	r0, [r7, #12]
 80046b6:	f7ff fe3f 	bl	8004338 <ADC_Conversion>
 80046ba:	eef0 7a40 	vmov.f32	s15, s0
 80046be:	edc7 7a05 	vstr	s15, [r7, #20]
		voltage_to_temperature_conv(conv_result,temp_struct,4);
 80046c2:	edd7 7a05 	vldr	s15, [r7, #20]
 80046c6:	2104      	movs	r1, #4
 80046c8:	68b8      	ldr	r0, [r7, #8]
 80046ca:	eeb0 0a67 	vmov.f32	s0, s15
 80046ce:	f7ff ff07 	bl	80044e0 <voltage_to_temperature_conv>
#if enable_printf
		printf("Sensors 5 Temp : %.2f \n",temp_struct->temp[4]);
#endif
		//HAL_Delay(100);

		break;
 80046d2:	e03c      	b.n	800474e <get_temperatures+0x17e>
		case 5:

		select_input(5);
 80046d4:	2005      	movs	r0, #5
 80046d6:	f7ff fd77 	bl	80041c8 <select_input>
		//Single conversion mode
		conv_result = ADC_Conversion(spi_struct,1);
 80046da:	2101      	movs	r1, #1
 80046dc:	68f8      	ldr	r0, [r7, #12]
 80046de:	f7ff fe2b 	bl	8004338 <ADC_Conversion>
 80046e2:	eef0 7a40 	vmov.f32	s15, s0
 80046e6:	edc7 7a05 	vstr	s15, [r7, #20]
		voltage_to_temperature_conv(conv_result,temp_struct,5);
 80046ea:	edd7 7a05 	vldr	s15, [r7, #20]
 80046ee:	2105      	movs	r1, #5
 80046f0:	68b8      	ldr	r0, [r7, #8]
 80046f2:	eeb0 0a67 	vmov.f32	s0, s15
 80046f6:	f7ff fef3 	bl	80044e0 <voltage_to_temperature_conv>
#if enable_printf
		printf("Sensors 6 Temp : %.2f \n",temp_struct->temp[5]);
#endif
		//HAL_Delay(100);

		break;
 80046fa:	e028      	b.n	800474e <get_temperatures+0x17e>

		case 6:

		select_input(6);
 80046fc:	2006      	movs	r0, #6
 80046fe:	f7ff fd63 	bl	80041c8 <select_input>
		//Single conversion mode
		conv_result = ADC_Conversion(spi_struct,1);
 8004702:	2101      	movs	r1, #1
 8004704:	68f8      	ldr	r0, [r7, #12]
 8004706:	f7ff fe17 	bl	8004338 <ADC_Conversion>
 800470a:	eef0 7a40 	vmov.f32	s15, s0
 800470e:	edc7 7a05 	vstr	s15, [r7, #20]
		voltage_to_temperature_conv(conv_result,temp_struct,6);
 8004712:	edd7 7a05 	vldr	s15, [r7, #20]
 8004716:	2106      	movs	r1, #6
 8004718:	68b8      	ldr	r0, [r7, #8]
 800471a:	eeb0 0a67 	vmov.f32	s0, s15
 800471e:	f7ff fedf 	bl	80044e0 <voltage_to_temperature_conv>
#if enable_printf
		printf("Sensors 7 Temp : %.2f \n",temp_struct->temp[6]);
#endif
		//HAL_Delay(100);

		break;
 8004722:	e014      	b.n	800474e <get_temperatures+0x17e>

		case 7:

		select_input(7);
 8004724:	2007      	movs	r0, #7
 8004726:	f7ff fd4f 	bl	80041c8 <select_input>
		//Single conversion mode
		conv_result = ADC_Conversion(spi_struct,1);
 800472a:	2101      	movs	r1, #1
 800472c:	68f8      	ldr	r0, [r7, #12]
 800472e:	f7ff fe03 	bl	8004338 <ADC_Conversion>
 8004732:	eef0 7a40 	vmov.f32	s15, s0
 8004736:	edc7 7a05 	vstr	s15, [r7, #20]
		voltage_to_temperature_conv(conv_result,temp_struct,7);
 800473a:	edd7 7a05 	vldr	s15, [r7, #20]
 800473e:	2107      	movs	r1, #7
 8004740:	68b8      	ldr	r0, [r7, #8]
 8004742:	eeb0 0a67 	vmov.f32	s0, s15
 8004746:	f7ff fecb 	bl	80044e0 <voltage_to_temperature_conv>
#if enable_printf
		printf("Sensors 8 Temp : %.2f \n",temp_struct->temp[7]);
#endif
		//HAL_Delay(100);

		break;
 800474a:	e000      	b.n	800474e <get_temperatures+0x17e>

		default:
#if enable_printf
		printf("CHECK TASK: get_temperatures -> Nothing is happening");
#endif
		break;
 800474c:	bf00      	nop

	}

}
 800474e:	bf00      	nop
 8004750:	3718      	adds	r7, #24
 8004752:	46bd      	mov	sp, r7
 8004754:	bd80      	pop	{r7, pc}
 8004756:	bf00      	nop

08004758 <num16ToNet>:
	.policy=hard,
};

// NETWORK ORDERING -----------------------------------------------------------

void num16ToNet(uint8_t net[2], uint16_t num){
 8004758:	b480      	push	{r7}
 800475a:	b083      	sub	sp, #12
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
 8004760:	460b      	mov	r3, r1
 8004762:	807b      	strh	r3, [r7, #2]
    net[0]=(uint8_t)((num>>8) & 0xFF);
 8004764:	887b      	ldrh	r3, [r7, #2]
 8004766:	0a1b      	lsrs	r3, r3, #8
 8004768:	b29b      	uxth	r3, r3
 800476a:	b2da      	uxtb	r2, r3
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	701a      	strb	r2, [r3, #0]
    net[1]=(uint8_t)(num & 0xFF);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	3301      	adds	r3, #1
 8004774:	887a      	ldrh	r2, [r7, #2]
 8004776:	b2d2      	uxtb	r2, r2
 8004778:	701a      	strb	r2, [r3, #0]
    return;
 800477a:	bf00      	nop
}
 800477c:	370c      	adds	r7, #12
 800477e:	46bd      	mov	sp, r7
 8004780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004784:	4770      	bx	lr

08004786 <netToNum16>:

uint16_t netToNum16(uint8_t net[2]){
 8004786:	b480      	push	{r7}
 8004788:	b083      	sub	sp, #12
 800478a:	af00      	add	r7, sp, #0
 800478c:	6078      	str	r0, [r7, #4]
    return ((uint16_t)net[0]<<8) | ((uint16_t)net[1]);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	781b      	ldrb	r3, [r3, #0]
 8004792:	021b      	lsls	r3, r3, #8
 8004794:	b21a      	sxth	r2, r3
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	3301      	adds	r3, #1
 800479a:	781b      	ldrb	r3, [r3, #0]
 800479c:	b21b      	sxth	r3, r3
 800479e:	4313      	orrs	r3, r2
 80047a0:	b21b      	sxth	r3, r3
 80047a2:	b29b      	uxth	r3, r3
}
 80047a4:	4618      	mov	r0, r3
 80047a6:	370c      	adds	r7, #12
 80047a8:	46bd      	mov	sp, r7
 80047aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ae:	4770      	bx	lr

080047b0 <doByteStuffing>:

// STUFFING -------------------------------------------------------------------

uint8_t doByteStuffing(circular_buffer_handle* data){
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b086      	sub	sp, #24
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
    if(data==NULL || data->buff==NULL || data->buffLen==0 || data->elemNum==0 || data->elemNum==data->buffLen) return 0;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d011      	beq.n	80047e2 <doByteStuffing+0x32>
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d00d      	beq.n	80047e2 <doByteStuffing+0x32>
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	685b      	ldr	r3, [r3, #4]
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d009      	beq.n	80047e2 <doByteStuffing+0x32>
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	689b      	ldr	r3, [r3, #8]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d005      	beq.n	80047e2 <doByteStuffing+0x32>
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	689a      	ldr	r2, [r3, #8]
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	685b      	ldr	r3, [r3, #4]
 80047de:	429a      	cmp	r2, r3
 80047e0:	d101      	bne.n	80047e6 <doByteStuffing+0x36>
 80047e2:	2300      	movs	r3, #0
 80047e4:	e038      	b.n	8004858 <doByteStuffing+0xa8>

    uint32_t elemNum=data->elemNum;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	689b      	ldr	r3, [r3, #8]
 80047ea:	617b      	str	r3, [r7, #20]

    while(elemNum){
 80047ec:	e030      	b.n	8004850 <doByteStuffing+0xa0>
        uint8_t tmpByte;
        uint32_t numByte;
        //pull byte from buffer head
        cBuffPull(data,&tmpByte,1,0);
 80047ee:	f107 010f 	add.w	r1, r7, #15
 80047f2:	2300      	movs	r3, #0
 80047f4:	2201      	movs	r2, #1
 80047f6:	6878      	ldr	r0, [r7, #4]
 80047f8:	f7fd ff56 	bl	80026a8 <cBuffPull>
        //check if character needs escaping
        if(tmpByte==FRAME_FLAG || tmpByte == ESCAPE_FLAG){
 80047fc:	7bfb      	ldrb	r3, [r7, #15]
 80047fe:	2b7e      	cmp	r3, #126	; 0x7e
 8004800:	d002      	beq.n	8004808 <doByteStuffing+0x58>
 8004802:	7bfb      	ldrb	r3, [r7, #15]
 8004804:	2b7d      	cmp	r3, #125	; 0x7d
 8004806:	d113      	bne.n	8004830 <doByteStuffing+0x80>
            uint8_t escape=ESCAPE_FLAG;
 8004808:	237d      	movs	r3, #125	; 0x7d
 800480a:	73bb      	strb	r3, [r7, #14]
            //try pushing escape flag
            numByte=cBuffPushToFill(data,&escape,1,1);
 800480c:	f107 010e 	add.w	r1, r7, #14
 8004810:	2301      	movs	r3, #1
 8004812:	2201      	movs	r2, #1
 8004814:	6878      	ldr	r0, [r7, #4]
 8004816:	f7fd ff1a 	bl	800264e <cBuffPushToFill>
 800481a:	6138      	str	r0, [r7, #16]
            if(numByte==0) return 0; //buffer is full, operation failed
 800481c:	693b      	ldr	r3, [r7, #16]
 800481e:	2b00      	cmp	r3, #0
 8004820:	d101      	bne.n	8004826 <doByteStuffing+0x76>
 8004822:	2300      	movs	r3, #0
 8004824:	e018      	b.n	8004858 <doByteStuffing+0xa8>
            //flip 5th byte bit
            tmpByte=INVERTBIT5(tmpByte);
 8004826:	7bfb      	ldrb	r3, [r7, #15]
 8004828:	f083 0320 	eor.w	r3, r3, #32
 800482c:	b2db      	uxtb	r3, r3
 800482e:	73fb      	strb	r3, [r7, #15]
        }
        //try pushing byte
        numByte=cBuffPushToFill(data,&tmpByte,1,1);
 8004830:	f107 010f 	add.w	r1, r7, #15
 8004834:	2301      	movs	r3, #1
 8004836:	2201      	movs	r2, #1
 8004838:	6878      	ldr	r0, [r7, #4]
 800483a:	f7fd ff08 	bl	800264e <cBuffPushToFill>
 800483e:	6138      	str	r0, [r7, #16]
        if(numByte==0) return 0; //buffer is full, operation failed
 8004840:	693b      	ldr	r3, [r7, #16]
 8004842:	2b00      	cmp	r3, #0
 8004844:	d101      	bne.n	800484a <doByteStuffing+0x9a>
 8004846:	2300      	movs	r3, #0
 8004848:	e006      	b.n	8004858 <doByteStuffing+0xa8>

        //decrement remaining bytes
        elemNum--;
 800484a:	697b      	ldr	r3, [r7, #20]
 800484c:	3b01      	subs	r3, #1
 800484e:	617b      	str	r3, [r7, #20]
    while(elemNum){
 8004850:	697b      	ldr	r3, [r7, #20]
 8004852:	2b00      	cmp	r3, #0
 8004854:	d1cb      	bne.n	80047ee <doByteStuffing+0x3e>
    }

    return 1;
 8004856:	2301      	movs	r3, #1
}
 8004858:	4618      	mov	r0, r3
 800485a:	3718      	adds	r7, #24
 800485c:	46bd      	mov	sp, r7
 800485e:	bd80      	pop	{r7, pc}

08004860 <undoByteStuffing>:

uint8_t undoByteStuffing(circular_buffer_handle* data){
 8004860:	b580      	push	{r7, lr}
 8004862:	b084      	sub	sp, #16
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
    if(data==NULL || data->buff==NULL || data->buffLen==0 || data->elemNum==0) return 0;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2b00      	cmp	r3, #0
 800486c:	d00b      	beq.n	8004886 <undoByteStuffing+0x26>
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	2b00      	cmp	r3, #0
 8004874:	d007      	beq.n	8004886 <undoByteStuffing+0x26>
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	685b      	ldr	r3, [r3, #4]
 800487a:	2b00      	cmp	r3, #0
 800487c:	d003      	beq.n	8004886 <undoByteStuffing+0x26>
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	689b      	ldr	r3, [r3, #8]
 8004882:	2b00      	cmp	r3, #0
 8004884:	d101      	bne.n	800488a <undoByteStuffing+0x2a>
 8004886:	2300      	movs	r3, #0
 8004888:	e044      	b.n	8004914 <undoByteStuffing+0xb4>

    uint32_t elemNum=data->elemNum;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	689b      	ldr	r3, [r3, #8]
 800488e:	60fb      	str	r3, [r7, #12]

    while(elemNum){
 8004890:	e03c      	b.n	800490c <undoByteStuffing+0xac>
        uint8_t tmpByte;
        //pull byte from buffer head
        cBuffPull(data,&tmpByte,1,0);
 8004892:	f107 010b 	add.w	r1, r7, #11
 8004896:	2300      	movs	r3, #0
 8004898:	2201      	movs	r2, #1
 800489a:	6878      	ldr	r0, [r7, #4]
 800489c:	f7fd ff04 	bl	80026a8 <cBuffPull>
        elemNum--;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	3b01      	subs	r3, #1
 80048a4:	60fb      	str	r3, [r7, #12]
        if(tmpByte == FRAME_FLAG) return 0; //error, cannot have frame flag inside payload
 80048a6:	7afb      	ldrb	r3, [r7, #11]
 80048a8:	2b7e      	cmp	r3, #126	; 0x7e
 80048aa:	d101      	bne.n	80048b0 <undoByteStuffing+0x50>
 80048ac:	2300      	movs	r3, #0
 80048ae:	e031      	b.n	8004914 <undoByteStuffing+0xb4>
        //check if it's an escape byte
        if(tmpByte == ESCAPE_FLAG){
 80048b0:	7afb      	ldrb	r3, [r7, #11]
 80048b2:	2b7d      	cmp	r3, #125	; 0x7d
 80048b4:	d123      	bne.n	80048fe <undoByteStuffing+0x9e>
			//if buffer is over we simply delete the escape flag
			//(this shouldn't happen in a properly stuffed buffer)
            if(elemNum==0) return 0;
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d101      	bne.n	80048c0 <undoByteStuffing+0x60>
 80048bc:	2300      	movs	r3, #0
 80048be:	e029      	b.n	8004914 <undoByteStuffing+0xb4>

            //pull byte from buffer head
            cBuffPull(data,&tmpByte,1,0);
 80048c0:	f107 010b 	add.w	r1, r7, #11
 80048c4:	2300      	movs	r3, #0
 80048c6:	2201      	movs	r2, #1
 80048c8:	6878      	ldr	r0, [r7, #4]
 80048ca:	f7fd feed 	bl	80026a8 <cBuffPull>
            elemNum--;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	3b01      	subs	r3, #1
 80048d2:	60fb      	str	r3, [r7, #12]

            //flip 5th byte bit
            tmpByte=INVERTBIT5(tmpByte);
 80048d4:	7afb      	ldrb	r3, [r7, #11]
 80048d6:	f083 0320 	eor.w	r3, r3, #32
 80048da:	b2db      	uxtb	r3, r3
 80048dc:	72fb      	strb	r3, [r7, #11]

            //if a 7d is encountered without escaping anything
            if(tmpByte != ESCAPE_FLAG && tmpByte != FRAME_FLAG) return 0;
 80048de:	7afb      	ldrb	r3, [r7, #11]
 80048e0:	2b7d      	cmp	r3, #125	; 0x7d
 80048e2:	d004      	beq.n	80048ee <undoByteStuffing+0x8e>
 80048e4:	7afb      	ldrb	r3, [r7, #11]
 80048e6:	2b7e      	cmp	r3, #126	; 0x7e
 80048e8:	d001      	beq.n	80048ee <undoByteStuffing+0x8e>
 80048ea:	2300      	movs	r3, #0
 80048ec:	e012      	b.n	8004914 <undoByteStuffing+0xb4>

            //push byte on tail
            cBuffPushToFill(data,&tmpByte,1,1);
 80048ee:	f107 010b 	add.w	r1, r7, #11
 80048f2:	2301      	movs	r3, #1
 80048f4:	2201      	movs	r2, #1
 80048f6:	6878      	ldr	r0, [r7, #4]
 80048f8:	f7fd fea9 	bl	800264e <cBuffPushToFill>
 80048fc:	e006      	b.n	800490c <undoByteStuffing+0xac>

        }else{
			//push byte on tail
			cBuffPushToFill(data,&tmpByte,1,1);
 80048fe:	f107 010b 	add.w	r1, r7, #11
 8004902:	2301      	movs	r3, #1
 8004904:	2201      	movs	r2, #1
 8004906:	6878      	ldr	r0, [r7, #4]
 8004908:	f7fd fea1 	bl	800264e <cBuffPushToFill>
    while(elemNum){
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	2b00      	cmp	r3, #0
 8004910:	d1bf      	bne.n	8004892 <undoByteStuffing+0x32>
		}
    }
    
    return 1;
 8004912:	2301      	movs	r3, #1
}
 8004914:	4618      	mov	r0, r3
 8004916:	3710      	adds	r7, #16
 8004918:	46bd      	mov	sp, r7
 800491a:	bd80      	pop	{r7, pc}

0800491c <computeCRCwithLUT>:
0xcb7d, 0xdb5c, 0xeb3f, 0xfb1e, 0x8bf9, 0x9bd8, 0xabbb, 0xbb9a, 0x4a75, 0x5a54, 0x6a37, 0x7a16, 0x0af1, 0x1ad0, 0x2ab3, 0x3a92,
0xfd2e, 0xed0f, 0xdd6c, 0xcd4d, 0xbdaa, 0xad8b, 0x9de8, 0x8dc9, 0x7c26, 0x6c07, 0x5c64, 0x4c45, 0x3ca2, 0x2c83, 0x1ce0, 0x0cc1,
0xef1f, 0xff3e, 0xcf5d, 0xdf7c, 0xaf9b, 0xbfba, 0x8fd9, 0x9ff8, 0x6e17, 0x7e36, 0x4e55, 0x5e74, 0x2e93, 0x3eb2, 0x0ed1, 0x1ef0,
};

uint16_t computeCRCwithLUT(circular_buffer_handle* dataBuff){
 800491c:	b580      	push	{r7, lr}
 800491e:	b086      	sub	sp, #24
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
	if(dataBuff==NULL || dataBuff->buff==NULL) return 0;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2b00      	cmp	r3, #0
 8004928:	d003      	beq.n	8004932 <computeCRCwithLUT+0x16>
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	2b00      	cmp	r3, #0
 8004930:	d101      	bne.n	8004936 <computeCRCwithLUT+0x1a>
 8004932:	2300      	movs	r3, #0
 8004934:	e02e      	b.n	8004994 <computeCRCwithLUT+0x78>

	const uint16_t initVal=CRC_INITIAL;
 8004936:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800493a:	81fb      	strh	r3, [r7, #14]

	uint16_t crc=initVal;
 800493c:	89fb      	ldrh	r3, [r7, #14]
 800493e:	82fb      	strh	r3, [r7, #22]

	for(uint32_t b=0;b<dataBuff->elemNum;b++){
 8004940:	2300      	movs	r3, #0
 8004942:	613b      	str	r3, [r7, #16]
 8004944:	e020      	b.n	8004988 <computeCRCwithLUT+0x6c>
		uint16_t byte=((uint16_t)cBuffReadByte(dataBuff,0,b));
 8004946:	693a      	ldr	r2, [r7, #16]
 8004948:	2100      	movs	r1, #0
 800494a:	6878      	ldr	r0, [r7, #4]
 800494c:	f7fe f8ae 	bl	8002aac <cBuffReadByte>
 8004950:	4603      	mov	r3, r0
 8004952:	81bb      	strh	r3, [r7, #12]

		crc=(byte<<8) ^ crc;
 8004954:	89bb      	ldrh	r3, [r7, #12]
 8004956:	021b      	lsls	r3, r3, #8
 8004958:	b21a      	sxth	r2, r3
 800495a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800495e:	4053      	eors	r3, r2
 8004960:	b21b      	sxth	r3, r3
 8004962:	82fb      	strh	r3, [r7, #22]

		crc=(crc<<8) ^ CRCLUT1021[(uint8_t) (crc>>8)];
 8004964:	8afb      	ldrh	r3, [r7, #22]
 8004966:	021b      	lsls	r3, r3, #8
 8004968:	b21a      	sxth	r2, r3
 800496a:	8afb      	ldrh	r3, [r7, #22]
 800496c:	0a1b      	lsrs	r3, r3, #8
 800496e:	b29b      	uxth	r3, r3
 8004970:	b2db      	uxtb	r3, r3
 8004972:	4619      	mov	r1, r3
 8004974:	4b09      	ldr	r3, [pc, #36]	; (800499c <computeCRCwithLUT+0x80>)
 8004976:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 800497a:	b21b      	sxth	r3, r3
 800497c:	4053      	eors	r3, r2
 800497e:	b21b      	sxth	r3, r3
 8004980:	82fb      	strh	r3, [r7, #22]
	for(uint32_t b=0;b<dataBuff->elemNum;b++){
 8004982:	693b      	ldr	r3, [r7, #16]
 8004984:	3301      	adds	r3, #1
 8004986:	613b      	str	r3, [r7, #16]
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	689b      	ldr	r3, [r3, #8]
 800498c:	693a      	ldr	r2, [r7, #16]
 800498e:	429a      	cmp	r2, r3
 8004990:	d3d9      	bcc.n	8004946 <computeCRCwithLUT+0x2a>
	}

	return crc;
 8004992:	8afb      	ldrh	r3, [r7, #22]
}
 8004994:	4618      	mov	r0, r3
 8004996:	3718      	adds	r7, #24
 8004998:	46bd      	mov	sp, r7
 800499a:	bd80      	pop	{r7, pc}
 800499c:	08012868 	.word	0x08012868

080049a0 <addCRC>:

uint8_t addCRC(circular_buffer_handle* data){
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b084      	sub	sp, #16
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
    if(data==NULL || data->buff==NULL || data->buffLen==0) return 0;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d007      	beq.n	80049be <addCRC+0x1e>
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d003      	beq.n	80049be <addCRC+0x1e>
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	685b      	ldr	r3, [r3, #4]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d101      	bne.n	80049c2 <addCRC+0x22>
 80049be:	2300      	movs	r3, #0
 80049c0:	e018      	b.n	80049f4 <addCRC+0x54>

    uint16_t CRC=computeCRCwithLUT(data);
 80049c2:	6878      	ldr	r0, [r7, #4]
 80049c4:	f7ff ffaa 	bl	800491c <computeCRCwithLUT>
 80049c8:	4603      	mov	r3, r0
 80049ca:	81fb      	strh	r3, [r7, #14]
    //append crc to frame (network order)
    uint8_t tmpCRC[2];
    num16ToNet(tmpCRC,CRC);
 80049cc:	89fa      	ldrh	r2, [r7, #14]
 80049ce:	f107 030c 	add.w	r3, r7, #12
 80049d2:	4611      	mov	r1, r2
 80049d4:	4618      	mov	r0, r3
 80049d6:	f7ff febf 	bl	8004758 <num16ToNet>
    if(cBuffPushToFill(data,tmpCRC,2,1) == 2) return 1;
 80049da:	f107 010c 	add.w	r1, r7, #12
 80049de:	2301      	movs	r3, #1
 80049e0:	2202      	movs	r2, #2
 80049e2:	6878      	ldr	r0, [r7, #4]
 80049e4:	f7fd fe33 	bl	800264e <cBuffPushToFill>
 80049e8:	4603      	mov	r3, r0
 80049ea:	2b02      	cmp	r3, #2
 80049ec:	d101      	bne.n	80049f2 <addCRC+0x52>
 80049ee:	2301      	movs	r3, #1
 80049f0:	e000      	b.n	80049f4 <addCRC+0x54>
    //else
    return 0;
 80049f2:	2300      	movs	r3, #0
}
 80049f4:	4618      	mov	r0, r3
 80049f6:	3710      	adds	r7, #16
 80049f8:	46bd      	mov	sp, r7
 80049fa:	bd80      	pop	{r7, pc}

080049fc <removeVerifyCRC>:

uint8_t removeVerifyCRC(circular_buffer_handle* data){
 80049fc:	b580      	push	{r7, lr}
 80049fe:	b084      	sub	sp, #16
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]
    if(data==NULL || data->buff==NULL || data->buffLen==0 || data->elemNum<2) return 0;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d00b      	beq.n	8004a22 <removeVerifyCRC+0x26>
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d007      	beq.n	8004a22 <removeVerifyCRC+0x26>
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	685b      	ldr	r3, [r3, #4]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d003      	beq.n	8004a22 <removeVerifyCRC+0x26>
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	689b      	ldr	r3, [r3, #8]
 8004a1e:	2b01      	cmp	r3, #1
 8004a20:	d801      	bhi.n	8004a26 <removeVerifyCRC+0x2a>
 8004a22:	2300      	movs	r3, #0
 8004a24:	e010      	b.n	8004a48 <removeVerifyCRC+0x4c>

    //compute CRC (should be 0)
    uint16_t CRC=computeCRCwithLUT(data);
 8004a26:	6878      	ldr	r0, [r7, #4]
 8004a28:	f7ff ff78 	bl	800491c <computeCRCwithLUT>
 8004a2c:	4603      	mov	r3, r0
 8004a2e:	81fb      	strh	r3, [r7, #14]
    //pull CRC bytes from buffer
    cBuffPull(data,NULL,2,1);
 8004a30:	2301      	movs	r3, #1
 8004a32:	2202      	movs	r2, #2
 8004a34:	2100      	movs	r1, #0
 8004a36:	6878      	ldr	r0, [r7, #4]
 8004a38:	f7fd fe36 	bl	80026a8 <cBuffPull>

    if(!CRC) return 1;
 8004a3c:	89fb      	ldrh	r3, [r7, #14]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d101      	bne.n	8004a46 <removeVerifyCRC+0x4a>
 8004a42:	2301      	movs	r3, #1
 8004a44:	e000      	b.n	8004a48 <removeVerifyCRC+0x4c>
    //else
    return 0;
 8004a46:	2300      	movs	r3, #0
}
 8004a48:	4618      	mov	r0, r3
 8004a4a:	3710      	adds	r7, #16
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	bd80      	pop	{r7, pc}

08004a50 <computeHash>:
 * right now it simply returns the value of the hash counter to
 * generate the hash, it can be modified to implement more robust
 * types of hashes but in our case we will only use it to identify
 * frames uniquely for acknowledges so it should be good enough
 */
uint16_t computeHash(uint8_t * hashData, uint32_t dataLen){
 8004a50:	b480      	push	{r7}
 8004a52:	b083      	sub	sp, #12
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
 8004a58:	6039      	str	r1, [r7, #0]
    return ++hashCnt;
 8004a5a:	4b07      	ldr	r3, [pc, #28]	; (8004a78 <computeHash+0x28>)
 8004a5c:	881b      	ldrh	r3, [r3, #0]
 8004a5e:	3301      	adds	r3, #1
 8004a60:	b29a      	uxth	r2, r3
 8004a62:	4b05      	ldr	r3, [pc, #20]	; (8004a78 <computeHash+0x28>)
 8004a64:	801a      	strh	r2, [r3, #0]
 8004a66:	4b04      	ldr	r3, [pc, #16]	; (8004a78 <computeHash+0x28>)
 8004a68:	881b      	ldrh	r3, [r3, #0]
}
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	370c      	adds	r7, #12
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a74:	4770      	bx	lr
 8004a76:	bf00      	nop
 8004a78:	200219ac 	.word	0x200219ac

08004a7c <frame>:
 * 
 * @param payload circular buffer handle containing the payload and inside
 *                which the frame will be built
 * @return uint8_t 0 if an error occurred (buffer too small), !0 otherwise
 */
uint8_t frame(circular_buffer_handle * payload){
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	b084      	sub	sp, #16
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
    if(payload==NULL || payload->buff==NULL) return 0;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d003      	beq.n	8004a92 <frame+0x16>
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d101      	bne.n	8004a96 <frame+0x1a>
 8004a92:	2300      	movs	r3, #0
 8004a94:	e02a      	b.n	8004aec <frame+0x70>

    //add crc to buffer
    if(!addCRC(payload)) return 0;
 8004a96:	6878      	ldr	r0, [r7, #4]
 8004a98:	f7ff ff82 	bl	80049a0 <addCRC>
 8004a9c:	4603      	mov	r3, r0
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d101      	bne.n	8004aa6 <frame+0x2a>
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	e022      	b.n	8004aec <frame+0x70>

    //perform byte stuffing
    if(!doByteStuffing(payload)) return 0;
 8004aa6:	6878      	ldr	r0, [r7, #4]
 8004aa8:	f7ff fe82 	bl	80047b0 <doByteStuffing>
 8004aac:	4603      	mov	r3, r0
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d101      	bne.n	8004ab6 <frame+0x3a>
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	e01a      	b.n	8004aec <frame+0x70>

    //add head and tail
    uint8_t flag=FRAME_FLAG;
 8004ab6:	237e      	movs	r3, #126	; 0x7e
 8004ab8:	73fb      	strb	r3, [r7, #15]
    if(!cBuffPushToFill(payload,&flag,1,0)) return 0;
 8004aba:	f107 010f 	add.w	r1, r7, #15
 8004abe:	2300      	movs	r3, #0
 8004ac0:	2201      	movs	r2, #1
 8004ac2:	6878      	ldr	r0, [r7, #4]
 8004ac4:	f7fd fdc3 	bl	800264e <cBuffPushToFill>
 8004ac8:	4603      	mov	r3, r0
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d101      	bne.n	8004ad2 <frame+0x56>
 8004ace:	2300      	movs	r3, #0
 8004ad0:	e00c      	b.n	8004aec <frame+0x70>
    if(!cBuffPushToFill(payload,&flag,1,1)) return 0;
 8004ad2:	f107 010f 	add.w	r1, r7, #15
 8004ad6:	2301      	movs	r3, #1
 8004ad8:	2201      	movs	r2, #1
 8004ada:	6878      	ldr	r0, [r7, #4]
 8004adc:	f7fd fdb7 	bl	800264e <cBuffPushToFill>
 8004ae0:	4603      	mov	r3, r0
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d101      	bne.n	8004aea <frame+0x6e>
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	e000      	b.n	8004aec <frame+0x70>

    return 1;
 8004aea:	2301      	movs	r3, #1
}
 8004aec:	4618      	mov	r0, r3
 8004aee:	3710      	adds	r7, #16
 8004af0:	46bd      	mov	sp, r7
 8004af2:	bd80      	pop	{r7, pc}

08004af4 <deframe>:
 * 
 * @param frame circular buffer handle containing the frame and inside which
 *              the payload will be written
 * @return uint8_t 0 if an error occurred, !0 otherwise
 */
uint8_t deframe(circular_buffer_handle * frame){
 8004af4:	b580      	push	{r7, lr}
 8004af6:	b084      	sub	sp, #16
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
    if(frame==NULL || frame->buff==NULL) return 0;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d003      	beq.n	8004b0a <deframe+0x16>
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d101      	bne.n	8004b0e <deframe+0x1a>
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	e034      	b.n	8004b78 <deframe+0x84>

    //remove head and tail
    uint8_t flag=0;
 8004b0e:	2300      	movs	r3, #0
 8004b10:	73fb      	strb	r3, [r7, #15]
    if(!cBuffPull(frame,&flag,1,0)) return 0;
 8004b12:	f107 010f 	add.w	r1, r7, #15
 8004b16:	2300      	movs	r3, #0
 8004b18:	2201      	movs	r2, #1
 8004b1a:	6878      	ldr	r0, [r7, #4]
 8004b1c:	f7fd fdc4 	bl	80026a8 <cBuffPull>
 8004b20:	4603      	mov	r3, r0
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d101      	bne.n	8004b2a <deframe+0x36>
 8004b26:	2300      	movs	r3, #0
 8004b28:	e026      	b.n	8004b78 <deframe+0x84>
    if(flag!=FRAME_FLAG) return 0;
 8004b2a:	7bfb      	ldrb	r3, [r7, #15]
 8004b2c:	2b7e      	cmp	r3, #126	; 0x7e
 8004b2e:	d001      	beq.n	8004b34 <deframe+0x40>
 8004b30:	2300      	movs	r3, #0
 8004b32:	e021      	b.n	8004b78 <deframe+0x84>
    if(!cBuffPull(frame,&flag,1,1)) return 0;
 8004b34:	f107 010f 	add.w	r1, r7, #15
 8004b38:	2301      	movs	r3, #1
 8004b3a:	2201      	movs	r2, #1
 8004b3c:	6878      	ldr	r0, [r7, #4]
 8004b3e:	f7fd fdb3 	bl	80026a8 <cBuffPull>
 8004b42:	4603      	mov	r3, r0
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d101      	bne.n	8004b4c <deframe+0x58>
 8004b48:	2300      	movs	r3, #0
 8004b4a:	e015      	b.n	8004b78 <deframe+0x84>
    if(flag!=FRAME_FLAG) return 0;
 8004b4c:	7bfb      	ldrb	r3, [r7, #15]
 8004b4e:	2b7e      	cmp	r3, #126	; 0x7e
 8004b50:	d001      	beq.n	8004b56 <deframe+0x62>
 8004b52:	2300      	movs	r3, #0
 8004b54:	e010      	b.n	8004b78 <deframe+0x84>

    //remove byte stuffing
    if(!undoByteStuffing(frame)) return 0;
 8004b56:	6878      	ldr	r0, [r7, #4]
 8004b58:	f7ff fe82 	bl	8004860 <undoByteStuffing>
 8004b5c:	4603      	mov	r3, r0
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d101      	bne.n	8004b66 <deframe+0x72>
 8004b62:	2300      	movs	r3, #0
 8004b64:	e008      	b.n	8004b78 <deframe+0x84>

    //remove and verify CRC
    if(!removeVerifyCRC(frame)) return 0;
 8004b66:	6878      	ldr	r0, [r7, #4]
 8004b68:	f7ff ff48 	bl	80049fc <removeVerifyCRC>
 8004b6c:	4603      	mov	r3, r0
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d101      	bne.n	8004b76 <deframe+0x82>
 8004b72:	2300      	movs	r3, #0
 8004b74:	e000      	b.n	8004b78 <deframe+0x84>

    return 1;
 8004b76:	2301      	movs	r3, #1
}
 8004b78:	4618      	mov	r0, r3
 8004b7a:	3710      	adds	r7, #16
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	bd80      	pop	{r7, pc}

08004b80 <sendFrame>:

// BASIC I/O FUNCTIONS --------------------------------------------------------
//sends a frame on line txBuff
uint8_t sendFrame(serial_line_handle* line, uint8_t frameCode, uint8_t ackWanted, uint16_t hash, uint8_t* buff, uint32_t len){
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b084      	sub	sp, #16
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
 8004b88:	4608      	mov	r0, r1
 8004b8a:	4611      	mov	r1, r2
 8004b8c:	461a      	mov	r2, r3
 8004b8e:	4603      	mov	r3, r0
 8004b90:	70fb      	strb	r3, [r7, #3]
 8004b92:	460b      	mov	r3, r1
 8004b94:	70bb      	strb	r3, [r7, #2]
 8004b96:	4613      	mov	r3, r2
 8004b98:	803b      	strh	r3, [r7, #0]
    if(line==NULL || line->txFunc==NULL) return 0;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d003      	beq.n	8004ba8 <sendFrame+0x28>
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d101      	bne.n	8004bac <sendFrame+0x2c>
 8004ba8:	2300      	movs	r3, #0
 8004baa:	e065      	b.n	8004c78 <sendFrame+0xf8>

    if(len>SDL_MAX_PAY_LEN) return 0;
 8004bac:	69fb      	ldr	r3, [r7, #28]
 8004bae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004bb2:	d901      	bls.n	8004bb8 <sendFrame+0x38>
 8004bb4:	2300      	movs	r3, #0
 8004bb6:	e05f      	b.n	8004c78 <sendFrame+0xf8>

    //initializing temporary circular buffer
    cBuffInit(&line->tmpBuff,line->tmpBuffArray,sizeof(line->tmpBuffArray),0);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	f503 5081 	add.w	r0, r3, #4128	; 0x1020
 8004bbe:	3004      	adds	r0, #4
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	f503 5181 	add.w	r1, r3, #4128	; 0x1020
 8004bc6:	3114      	adds	r1, #20
 8004bc8:	2300      	movs	r3, #0
 8004bca:	f241 020c 	movw	r2, #4108	; 0x100c
 8004bce:	f7fd fc43 	bl	8002458 <cBuffInit>

    //creating frameHeader
    frameHeader header={
 8004bd2:	78fb      	ldrb	r3, [r7, #3]
 8004bd4:	733b      	strb	r3, [r7, #12]
 8004bd6:	78bb      	ldrb	r3, [r7, #2]
 8004bd8:	737b      	strb	r3, [r7, #13]
 8004bda:	883b      	ldrh	r3, [r7, #0]
 8004bdc:	81fb      	strh	r3, [r7, #14]
        .ackWanted=ackWanted,
        .hash=hash
    };

    //network ordering header
    num16ToNet((uint8_t*)&header.hash,header.hash);
 8004bde:	89fa      	ldrh	r2, [r7, #14]
 8004be0:	f107 030c 	add.w	r3, r7, #12
 8004be4:	3302      	adds	r3, #2
 8004be6:	4611      	mov	r1, r2
 8004be8:	4618      	mov	r0, r3
 8004bea:	f7ff fdb5 	bl	8004758 <num16ToNet>

    //copying header inside circular buffer
    if(cBuffPushToFill(&line->tmpBuff,(uint8_t *)&header,sizeof(frameHeader),1)!=sizeof(frameHeader)) return 0;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	f503 5081 	add.w	r0, r3, #4128	; 0x1020
 8004bf4:	3004      	adds	r0, #4
 8004bf6:	f107 010c 	add.w	r1, r7, #12
 8004bfa:	2301      	movs	r3, #1
 8004bfc:	2204      	movs	r2, #4
 8004bfe:	f7fd fd26 	bl	800264e <cBuffPushToFill>
 8004c02:	4603      	mov	r3, r0
 8004c04:	2b04      	cmp	r3, #4
 8004c06:	d001      	beq.n	8004c0c <sendFrame+0x8c>
 8004c08:	2300      	movs	r3, #0
 8004c0a:	e035      	b.n	8004c78 <sendFrame+0xf8>

    //copying data inside circular buffer
    if(buff!=NULL) if(cBuffPushToFill(&line->tmpBuff,buff,len,1)!=len) return 0;
 8004c0c:	69bb      	ldr	r3, [r7, #24]
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d00e      	beq.n	8004c30 <sendFrame+0xb0>
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	f503 5081 	add.w	r0, r3, #4128	; 0x1020
 8004c18:	3004      	adds	r0, #4
 8004c1a:	2301      	movs	r3, #1
 8004c1c:	69fa      	ldr	r2, [r7, #28]
 8004c1e:	69b9      	ldr	r1, [r7, #24]
 8004c20:	f7fd fd15 	bl	800264e <cBuffPushToFill>
 8004c24:	4602      	mov	r2, r0
 8004c26:	69fb      	ldr	r3, [r7, #28]
 8004c28:	4293      	cmp	r3, r2
 8004c2a:	d001      	beq.n	8004c30 <sendFrame+0xb0>
 8004c2c:	2300      	movs	r3, #0
 8004c2e:	e023      	b.n	8004c78 <sendFrame+0xf8>

    //framing the payload
    if(!frame(&line->tmpBuff)) return 0;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8004c36:	3304      	adds	r3, #4
 8004c38:	4618      	mov	r0, r3
 8004c3a:	f7ff ff1f 	bl	8004a7c <frame>
 8004c3e:	4603      	mov	r3, r0
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d10b      	bne.n	8004c5c <sendFrame+0xdc>
 8004c44:	2300      	movs	r3, #0
 8004c46:	e017      	b.n	8004c78 <sendFrame+0xf8>

    //sending the payload through the line
    uint8_t byte;
    while(cBuffPull(&line->tmpBuff,&byte,1,0)){
        //if the transmission fails, return 0
        if(!line->txFunc(byte)) return 0;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	7afa      	ldrb	r2, [r7, #11]
 8004c4e:	4610      	mov	r0, r2
 8004c50:	4798      	blx	r3
 8004c52:	4603      	mov	r3, r0
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d101      	bne.n	8004c5c <sendFrame+0xdc>
 8004c58:	2300      	movs	r3, #0
 8004c5a:	e00d      	b.n	8004c78 <sendFrame+0xf8>
    while(cBuffPull(&line->tmpBuff,&byte,1,0)){
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	f503 5081 	add.w	r0, r3, #4128	; 0x1020
 8004c62:	3004      	adds	r0, #4
 8004c64:	f107 010b 	add.w	r1, r7, #11
 8004c68:	2300      	movs	r3, #0
 8004c6a:	2201      	movs	r2, #1
 8004c6c:	f7fd fd1c 	bl	80026a8 <cBuffPull>
 8004c70:	4603      	mov	r3, r0
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d1e8      	bne.n	8004c48 <sendFrame+0xc8>
    }
 
    return 1;
 8004c76:	2301      	movs	r3, #1
}
 8004c78:	4618      	mov	r0, r3
 8004c7a:	3710      	adds	r7, #16
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	bd80      	pop	{r7, pc}

08004c80 <receiveFrame>:

//receives a frame from line rxBuff, searching for a certain frameCode, if some remCodes are specified (not NULL or empty)
//it also removes those codes from rxBuff, otherwise it leaves them unchanged
//the eventually received frame will be placed inside line tmpBuff (HEADER INCLUDED!)
//returns 0 if no frame found, !0 otherwise
uint8_t receiveFrame(serial_line_handle* line, uint8_t frameCode, circular_buffer_handle* remCodes){
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b094      	sub	sp, #80	; 0x50
 8004c84:	af02      	add	r7, sp, #8
 8004c86:	60f8      	str	r0, [r7, #12]
 8004c88:	460b      	mov	r3, r1
 8004c8a:	607a      	str	r2, [r7, #4]
 8004c8c:	72fb      	strb	r3, [r7, #11]
    if(line==NULL || line->rxFunc==NULL) return 0;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d003      	beq.n	8004c9c <receiveFrame+0x1c>
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	685b      	ldr	r3, [r3, #4]
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d101      	bne.n	8004ca0 <receiveFrame+0x20>
 8004c9c:	2300      	movs	r3, #0
 8004c9e:	e0db      	b.n	8004e58 <receiveFrame+0x1d8>

    //initializing temporary circular buffer
    cBuffInit(&line->tmpBuff,line->tmpBuffArray,sizeof(line->tmpBuffArray),0);
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	f503 5081 	add.w	r0, r3, #4128	; 0x1020
 8004ca6:	3004      	adds	r0, #4
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	f503 5181 	add.w	r1, r3, #4128	; 0x1020
 8004cae:	3114      	adds	r1, #20
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	f241 020c 	movw	r2, #4108	; 0x100c
 8004cb6:	f7fd fbcf 	bl	8002458 <cBuffInit>

    //fill the rxBuffer with new bytes
    uint8_t byte;
    while(!cBuffFull(&line->rxBuff)){
 8004cba:	e011      	b.n	8004ce0 <receiveFrame+0x60>
        if(line->rxFunc(&byte)){
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	685b      	ldr	r3, [r3, #4]
 8004cc0:	f107 023b 	add.w	r2, r7, #59	; 0x3b
 8004cc4:	4610      	mov	r0, r2
 8004cc6:	4798      	blx	r3
 8004cc8:	4603      	mov	r3, r0
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d011      	beq.n	8004cf2 <receiveFrame+0x72>
            cBuffPush(&line->rxBuff,&byte,1,1);
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	f103 0008 	add.w	r0, r3, #8
 8004cd4:	f107 013b 	add.w	r1, r7, #59	; 0x3b
 8004cd8:	2301      	movs	r3, #1
 8004cda:	2201      	movs	r2, #1
 8004cdc:	f7fd fc3b 	bl	8002556 <cBuffPush>
    while(!cBuffFull(&line->rxBuff)){
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	3308      	adds	r3, #8
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	f7fd ff2a 	bl	8002b3e <cBuffFull>
 8004cea:	4603      	mov	r3, r0
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d0e5      	beq.n	8004cbc <receiveFrame+0x3c>
 8004cf0:	e000      	b.n	8004cf4 <receiveFrame+0x74>
        }else break;
 8004cf2:	bf00      	nop
    //handle to store found frames
    circular_buffer_handle frameHandle;
    //dummy buffer to perform buffer advancement
    circular_buffer_handle dummyBuff;
    //copying rxBuff into dummy buffer
    cBuffToCirc(&dummyBuff,&line->rxBuff);
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	f103 0208 	add.w	r2, r3, #8
 8004cfa:	f107 0318 	add.w	r3, r7, #24
 8004cfe:	4611      	mov	r1, r2
 8004d00:	4618      	mov	r0, r3
 8004d02:	f7fd ff34 	bl	8002b6e <cBuffToCirc>
    //we search on dummy handle, shifting it out to current found frame
    while(searchFrameAdvance(&dummyBuff,&frameHandle,&rule,SHIFTOUT_NEXT | SHIFTOUT_FAST)){
 8004d06:	e09a      	b.n	8004e3e <receiveFrame+0x1be>
        //flush tmp buffer
        cBuffFlush(&line->tmpBuff);
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8004d0e:	3304      	adds	r3, #4
 8004d10:	4618      	mov	r0, r3
 8004d12:	f7fd ff03 	bl	8002b1c <cBuffFlush>
        //copy on temporary buffer
        cBuffPushRead(&line->tmpBuff,&frameHandle,frameHandle.elemNum,1,0);
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	f503 5081 	add.w	r0, r3, #4128	; 0x1020
 8004d1c:	3004      	adds	r0, #4
 8004d1e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d20:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8004d24:	2300      	movs	r3, #0
 8004d26:	9300      	str	r3, [sp, #0]
 8004d28:	2301      	movs	r3, #1
 8004d2a:	f7fd fe31 	bl	8002990 <cBuffPushRead>
        //try deframing
        if(!deframe(&line->tmpBuff)) continue;
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8004d34:	3304      	adds	r3, #4
 8004d36:	4618      	mov	r0, r3
 8004d38:	f7ff fedc 	bl	8004af4 <deframe>
 8004d3c:	4603      	mov	r3, r0
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d078      	beq.n	8004e34 <receiveFrame+0x1b4>

        //check if it corresponds to wanted frame code
        frameHeader tmpHeader;
        uint8_t toBeCut=0; //flag to signal that frame needs to be cut from rxBuff
 8004d42:	2300      	movs	r3, #0
 8004d44:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
        uint8_t found=0; //frame found flag
 8004d48:	2300      	movs	r3, #0
 8004d4a:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
        //reading header
        if(cBuffRead(&line->tmpBuff,(uint8_t *)&tmpHeader,sizeof(frameHeader),0,0)!=sizeof(frameHeader)) continue;
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	f503 5081 	add.w	r0, r3, #4128	; 0x1020
 8004d54:	3004      	adds	r0, #4
 8004d56:	f107 0114 	add.w	r1, r7, #20
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	9300      	str	r3, [sp, #0]
 8004d5e:	2300      	movs	r3, #0
 8004d60:	2204      	movs	r2, #4
 8004d62:	f7fd fcd2 	bl	800270a <cBuffRead>
 8004d66:	4603      	mov	r3, r0
 8004d68:	2b04      	cmp	r3, #4
 8004d6a:	d165      	bne.n	8004e38 <receiveFrame+0x1b8>
        //host ordering header
        tmpHeader.hash=netToNum16((uint8_t*)&tmpHeader.hash);
 8004d6c:	f107 0314 	add.w	r3, r7, #20
 8004d70:	3302      	adds	r3, #2
 8004d72:	4618      	mov	r0, r3
 8004d74:	f7ff fd07 	bl	8004786 <netToNum16>
 8004d78:	4603      	mov	r3, r0
 8004d7a:	82fb      	strh	r3, [r7, #22]
        if(line->tmpBuff.elemNum>(SDL_MAX_PAY_LEN+sizeof(frameHeader))) continue;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d84:	f640 0204 	movw	r2, #2052	; 0x804
 8004d88:	4293      	cmp	r3, r2
 8004d8a:	d857      	bhi.n	8004e3c <receiveFrame+0x1bc>
        if(tmpHeader.code==frameCode){
 8004d8c:	7d3b      	ldrb	r3, [r7, #20]
 8004d8e:	7afa      	ldrb	r2, [r7, #11]
 8004d90:	429a      	cmp	r2, r3
 8004d92:	d106      	bne.n	8004da2 <receiveFrame+0x122>
            //frame found
            toBeCut=1;
 8004d94:	2301      	movs	r3, #1
 8004d96:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            found=1;
 8004d9a:	2301      	movs	r3, #1
 8004d9c:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8004da0:	e01b      	b.n	8004dda <receiveFrame+0x15a>
        }else{
            if(remCodes!=NULL){
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d018      	beq.n	8004dda <receiveFrame+0x15a>
                for(uint32_t c=0; c<remCodes->elemNum; c++){
 8004da8:	2300      	movs	r3, #0
 8004daa:	643b      	str	r3, [r7, #64]	; 0x40
 8004dac:	e010      	b.n	8004dd0 <receiveFrame+0x150>
                    if(cBuffReadByte(remCodes,0,c)==tmpHeader.hash){
 8004dae:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004db0:	2100      	movs	r1, #0
 8004db2:	6878      	ldr	r0, [r7, #4]
 8004db4:	f7fd fe7a 	bl	8002aac <cBuffReadByte>
 8004db8:	4603      	mov	r3, r0
 8004dba:	b29a      	uxth	r2, r3
 8004dbc:	8afb      	ldrh	r3, [r7, #22]
 8004dbe:	429a      	cmp	r2, r3
 8004dc0:	d103      	bne.n	8004dca <receiveFrame+0x14a>
                        toBeCut=1;
 8004dc2:	2301      	movs	r3, #1
 8004dc4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
                        break;
 8004dc8:	e007      	b.n	8004dda <receiveFrame+0x15a>
                for(uint32_t c=0; c<remCodes->elemNum; c++){
 8004dca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004dcc:	3301      	adds	r3, #1
 8004dce:	643b      	str	r3, [r7, #64]	; 0x40
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	689b      	ldr	r3, [r3, #8]
 8004dd4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004dd6:	429a      	cmp	r2, r3
 8004dd8:	d3e9      	bcc.n	8004dae <receiveFrame+0x12e>
                    }
                }
            }
        }

        if(toBeCut){ //if frame needs to be cut
 8004dda:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d022      	beq.n	8004e28 <receiveFrame+0x1a8>
            //we cut the found frame from buffers
            //saving the virtual index of the found frame inside rxBuff
            uint32_t frameIndx=cBuffGetVirtIndex(&line->rxBuff,frameHandle.startIndex);
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	3308      	adds	r3, #8
 8004de6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004de8:	4611      	mov	r1, r2
 8004dea:	4618      	mov	r0, r3
 8004dec:	f7fd fb54 	bl	8002498 <cBuffGetVirtIndex>
 8004df0:	63f8      	str	r0, [r7, #60]	; 0x3c
            //cutting found frame from rxBuff
            cBuffCut(&line->rxBuff,NULL,frameHandle.elemNum,0,frameIndx);
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	f103 0008 	add.w	r0, r3, #8
 8004df8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004dfa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004dfc:	9300      	str	r3, [sp, #0]
 8004dfe:	2300      	movs	r3, #0
 8004e00:	2100      	movs	r1, #0
 8004e02:	f7fd fce3 	bl	80027cc <cBuffCut>
            //reconstructing dummy buffer
            cBuffToCirc(&dummyBuff,&line->rxBuff);
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	f103 0208 	add.w	r2, r3, #8
 8004e0c:	f107 0318 	add.w	r3, r7, #24
 8004e10:	4611      	mov	r1, r2
 8004e12:	4618      	mov	r0, r3
 8004e14:	f7fd feab 	bl	8002b6e <cBuffToCirc>
            cBuffPull(&dummyBuff,NULL,frameIndx+1,0);
 8004e18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e1a:	1c5a      	adds	r2, r3, #1
 8004e1c:	f107 0018 	add.w	r0, r7, #24
 8004e20:	2300      	movs	r3, #0
 8004e22:	2100      	movs	r1, #0
 8004e24:	f7fd fc40 	bl	80026a8 <cBuffPull>
        }

        if(found) return 1;
 8004e28:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d006      	beq.n	8004e3e <receiveFrame+0x1be>
 8004e30:	2301      	movs	r3, #1
 8004e32:	e011      	b.n	8004e58 <receiveFrame+0x1d8>
        if(!deframe(&line->tmpBuff)) continue;
 8004e34:	bf00      	nop
 8004e36:	e002      	b.n	8004e3e <receiveFrame+0x1be>
        if(cBuffRead(&line->tmpBuff,(uint8_t *)&tmpHeader,sizeof(frameHeader),0,0)!=sizeof(frameHeader)) continue;
 8004e38:	bf00      	nop
 8004e3a:	e000      	b.n	8004e3e <receiveFrame+0x1be>
        if(line->tmpBuff.elemNum>(SDL_MAX_PAY_LEN+sizeof(frameHeader))) continue;
 8004e3c:	bf00      	nop
    while(searchFrameAdvance(&dummyBuff,&frameHandle,&rule,SHIFTOUT_NEXT | SHIFTOUT_FAST)){
 8004e3e:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8004e42:	f107 0018 	add.w	r0, r7, #24
 8004e46:	2314      	movs	r3, #20
 8004e48:	4a05      	ldr	r2, [pc, #20]	; (8004e60 <receiveFrame+0x1e0>)
 8004e4a:	f7fe f978 	bl	800313e <searchFrameAdvance>
 8004e4e:	4603      	mov	r3, r0
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	f47f af59 	bne.w	8004d08 <receiveFrame+0x88>
    }

    return 0;
 8004e56:	2300      	movs	r3, #0
}
 8004e58:	4618      	mov	r0, r3
 8004e5a:	3748      	adds	r7, #72	; 0x48
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	bd80      	pop	{r7, pc}
 8004e60:	2000000c 	.word	0x2000000c

08004e64 <receiveFrameAndAck>:
//receive a frame and eventually acknowledge it
//returns the length of frame if received, 0 otherwise
//searches for a frame with code frameCode, and eventually removes remCodes frames from rxBuff (if not NULL or empty)
//pushes the received code in rxFrame tail, if not NULL, ONLY pushing if there's enough space
//if there's not enough space to store the frame, the ack is not sent even if requested
uint32_t receiveFrameAndAck(serial_line_handle* line, circular_buffer_handle* rxFrame, uint8_t frameCode, circular_buffer_handle* remCodes){
 8004e64:	b580      	push	{r7, lr}
 8004e66:	b08a      	sub	sp, #40	; 0x28
 8004e68:	af02      	add	r7, sp, #8
 8004e6a:	60f8      	str	r0, [r7, #12]
 8004e6c:	60b9      	str	r1, [r7, #8]
 8004e6e:	603b      	str	r3, [r7, #0]
 8004e70:	4613      	mov	r3, r2
 8004e72:	71fb      	strb	r3, [r7, #7]
    if(line==NULL || line->rxFunc==NULL) return 0;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d003      	beq.n	8004e82 <receiveFrameAndAck+0x1e>
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	685b      	ldr	r3, [r3, #4]
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d101      	bne.n	8004e86 <receiveFrameAndAck+0x22>
 8004e82:	2300      	movs	r3, #0
 8004e84:	e05e      	b.n	8004f44 <receiveFrameAndAck+0xe0>
    
    //if frame received
    if(receiveFrame(line, frameCode,remCodes)){
 8004e86:	79fb      	ldrb	r3, [r7, #7]
 8004e88:	683a      	ldr	r2, [r7, #0]
 8004e8a:	4619      	mov	r1, r3
 8004e8c:	68f8      	ldr	r0, [r7, #12]
 8004e8e:	f7ff fef7 	bl	8004c80 <receiveFrame>
 8004e92:	4603      	mov	r3, r0
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d054      	beq.n	8004f42 <receiveFrameAndAck+0xde>
        //get header
        frameHeader tmpHeader;
        cBuffPull(&line->tmpBuff,(uint8_t *)&tmpHeader,sizeof(frameHeader),0);
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	f503 5081 	add.w	r0, r3, #4128	; 0x1020
 8004e9e:	3004      	adds	r0, #4
 8004ea0:	f107 0114 	add.w	r1, r7, #20
 8004ea4:	2300      	movs	r3, #0
 8004ea6:	2204      	movs	r2, #4
 8004ea8:	f7fd fbfe 	bl	80026a8 <cBuffPull>
        //host ordering header
        tmpHeader.hash=netToNum16((uint8_t*)&tmpHeader.hash);
 8004eac:	f107 0314 	add.w	r3, r7, #20
 8004eb0:	3302      	adds	r3, #2
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	f7ff fc67 	bl	8004786 <netToNum16>
 8004eb8:	4603      	mov	r3, r0
 8004eba:	82fb      	strh	r3, [r7, #22]

        uint8_t sendAck=1;
 8004ebc:	2301      	movs	r3, #1
 8004ebe:	77fb      	strb	r3, [r7, #31]
        uint32_t len=line->tmpBuff.elemNum;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ec6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ec8:	61bb      	str	r3, [r7, #24]
        //verify if the frame was already received
        if(tmpHeader.hash == line->lastRxHash){
 8004eca:	8afa      	ldrh	r2, [r7, #22]
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8004ed2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8004ed6:	429a      	cmp	r2, r3
 8004ed8:	d102      	bne.n	8004ee0 <receiveFrameAndAck+0x7c>
            len=0; 
 8004eda:	2300      	movs	r3, #0
 8004edc:	61bb      	str	r3, [r7, #24]
 8004ede:	e018      	b.n	8004f12 <receiveFrameAndAck+0xae>
        }else{
            if(rxFrame!=NULL){
 8004ee0:	68bb      	ldr	r3, [r7, #8]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d015      	beq.n	8004f12 <receiveFrameAndAck+0xae>
                //pushing it on buffer (if enough space)
                if((rxFrame->buffLen-rxFrame->elemNum)>=len){
 8004ee6:	68bb      	ldr	r3, [r7, #8]
 8004ee8:	685a      	ldr	r2, [r3, #4]
 8004eea:	68bb      	ldr	r3, [r7, #8]
 8004eec:	689b      	ldr	r3, [r3, #8]
 8004eee:	1ad3      	subs	r3, r2, r3
 8004ef0:	69ba      	ldr	r2, [r7, #24]
 8004ef2:	429a      	cmp	r2, r3
 8004ef4:	d80b      	bhi.n	8004f0e <receiveFrameAndAck+0xaa>
                    cBuffPushPull(rxFrame, &line->tmpBuff, len, 1,0);
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	f503 5181 	add.w	r1, r3, #4128	; 0x1020
 8004efc:	3104      	adds	r1, #4
 8004efe:	2300      	movs	r3, #0
 8004f00:	9300      	str	r3, [sp, #0]
 8004f02:	2301      	movs	r3, #1
 8004f04:	69ba      	ldr	r2, [r7, #24]
 8004f06:	68b8      	ldr	r0, [r7, #8]
 8004f08:	f7fd fd95 	bl	8002a36 <cBuffPushPull>
 8004f0c:	e001      	b.n	8004f12 <receiveFrameAndAck+0xae>
                }else sendAck=0;
 8004f0e:	2300      	movs	r3, #0
 8004f10:	77fb      	strb	r3, [r7, #31]
            }
        }

        //send ack back if needed (if ack sending fails it's considered as lost on the line, the frame is received anyway)
        if(tmpHeader.ackWanted && sendAck){ 
 8004f12:	7d7b      	ldrb	r3, [r7, #21]
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d012      	beq.n	8004f3e <receiveFrameAndAck+0xda>
 8004f18:	7ffb      	ldrb	r3, [r7, #31]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d00f      	beq.n	8004f3e <receiveFrameAndAck+0xda>
            sendFrame(line, FRMCODE_ACK, 0, tmpHeader.hash,NULL,0);
 8004f1e:	8afb      	ldrh	r3, [r7, #22]
 8004f20:	2200      	movs	r2, #0
 8004f22:	9201      	str	r2, [sp, #4]
 8004f24:	2200      	movs	r2, #0
 8004f26:	9200      	str	r2, [sp, #0]
 8004f28:	2200      	movs	r2, #0
 8004f2a:	2101      	movs	r1, #1
 8004f2c:	68f8      	ldr	r0, [r7, #12]
 8004f2e:	f7ff fe27 	bl	8004b80 <sendFrame>
            //saving last acknowledged hash
            line->lastRxHash=tmpHeader.hash;
 8004f32:	8afa      	ldrh	r2, [r7, #22]
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8004f3a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        }

        return len;
 8004f3e:	69bb      	ldr	r3, [r7, #24]
 8004f40:	e000      	b.n	8004f44 <receiveFrameAndAck+0xe0>
    }

    return 0;
 8004f42:	2300      	movs	r3, #0

}
 8004f44:	4618      	mov	r0, r3
 8004f46:	3720      	adds	r7, #32
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	bd80      	pop	{r7, pc}

08004f4c <receiveAck>:

//tries receiving a single ack with the given hash
//to be called multiple times to scan the whole buffer
uint8_t receiveAck(serial_line_handle* line, uint16_t hash){
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	b084      	sub	sp, #16
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
 8004f54:	460b      	mov	r3, r1
 8004f56:	807b      	strh	r3, [r7, #2]
    if(line==NULL || line->rxFunc==NULL) return 0;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d003      	beq.n	8004f66 <receiveAck+0x1a>
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	685b      	ldr	r3, [r3, #4]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d101      	bne.n	8004f6a <receiveAck+0x1e>
 8004f66:	2300      	movs	r3, #0
 8004f68:	e020      	b.n	8004fac <receiveAck+0x60>

    if(receiveFrame(line,FRMCODE_ACK,NULL)){
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	2101      	movs	r1, #1
 8004f6e:	6878      	ldr	r0, [r7, #4]
 8004f70:	f7ff fe86 	bl	8004c80 <receiveFrame>
 8004f74:	4603      	mov	r3, r0
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d017      	beq.n	8004faa <receiveAck+0x5e>
        //get header
        frameHeader tmpHeader;
        cBuffPull(&line->tmpBuff,(uint8_t *)&tmpHeader,sizeof(frameHeader),0);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	f503 5081 	add.w	r0, r3, #4128	; 0x1020
 8004f80:	3004      	adds	r0, #4
 8004f82:	f107 010c 	add.w	r1, r7, #12
 8004f86:	2300      	movs	r3, #0
 8004f88:	2204      	movs	r2, #4
 8004f8a:	f7fd fb8d 	bl	80026a8 <cBuffPull>
        //host ordering header
        tmpHeader.hash=netToNum16((uint8_t*)&tmpHeader.hash);
 8004f8e:	f107 030c 	add.w	r3, r7, #12
 8004f92:	3302      	adds	r3, #2
 8004f94:	4618      	mov	r0, r3
 8004f96:	f7ff fbf6 	bl	8004786 <netToNum16>
 8004f9a:	4603      	mov	r3, r0
 8004f9c:	81fb      	strh	r3, [r7, #14]
        //check if hash correct
        if(tmpHeader.hash == hash) return 1;
 8004f9e:	89fb      	ldrh	r3, [r7, #14]
 8004fa0:	887a      	ldrh	r2, [r7, #2]
 8004fa2:	429a      	cmp	r2, r3
 8004fa4:	d101      	bne.n	8004faa <receiveAck+0x5e>
 8004fa6:	2301      	movs	r3, #1
 8004fa8:	e000      	b.n	8004fac <receiveAck+0x60>
    }

    return 0;
 8004faa:	2300      	movs	r3, #0

}
 8004fac:	4618      	mov	r0, r3
 8004fae:	3710      	adds	r7, #16
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	bd80      	pop	{r7, pc}

08004fb4 <receiveInQueueAndAck>:

#ifdef SDL_ANTILOCK_DEPTH
//receives frames placing them inside anti lock queue (and eventually responding with an ack)
//returns 0 in case of failure, length of frame otherwise
uint32_t receiveInQueueAndAck(serial_line_handle* line, uint8_t frameCode, circular_buffer_handle* remCodes){
 8004fb4:	b580      	push	{r7, lr}
 8004fb6:	b086      	sub	sp, #24
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	60f8      	str	r0, [r7, #12]
 8004fbc:	460b      	mov	r3, r1
 8004fbe:	607a      	str	r2, [r7, #4]
 8004fc0:	72fb      	strb	r3, [r7, #11]
    if(line==NULL || line->rxFunc==NULL) return 0;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d003      	beq.n	8004fd0 <receiveInQueueAndAck+0x1c>
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	685b      	ldr	r3, [r3, #4]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d101      	bne.n	8004fd4 <receiveInQueueAndAck+0x20>
 8004fd0:	2300      	movs	r3, #0
 8004fd2:	e026      	b.n	8005022 <receiveInQueueAndAck+0x6e>

    //check if there's space in antiLockQueue
    if(line->alockQueue.elemNum==line->alockQueue.buffLen) return 0;
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8004fda:	f8d3 2864 	ldr.w	r2, [r3, #2148]	; 0x864
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8004fe4:	f8d3 3860 	ldr.w	r3, [r3, #2144]	; 0x860
 8004fe8:	429a      	cmp	r2, r3
 8004fea:	d101      	bne.n	8004ff0 <receiveInQueueAndAck+0x3c>
 8004fec:	2300      	movs	r3, #0
 8004fee:	e018      	b.n	8005022 <receiveInQueueAndAck+0x6e>

    //otherwise try receiving a frame
    uint32_t len=receiveFrameAndAck(line,&line->alockBuff, frameCode, remCodes);
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	f503 5101 	add.w	r1, r3, #8256	; 0x2040
 8004ff6:	310c      	adds	r1, #12
 8004ff8:	7afa      	ldrb	r2, [r7, #11]
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	68f8      	ldr	r0, [r7, #12]
 8004ffe:	f7ff ff31 	bl	8004e64 <receiveFrameAndAck>
 8005002:	4603      	mov	r3, r0
 8005004:	617b      	str	r3, [r7, #20]

    //if frame received
    if(len){
 8005006:	697b      	ldr	r3, [r7, #20]
 8005008:	2b00      	cmp	r3, #0
 800500a:	d009      	beq.n	8005020 <receiveInQueueAndAck+0x6c>
        cBuffPush(&line->alockQueue,(uint8_t*)&len,sizeof(line->tmpBuff.elemNum),1);
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	f503 4090 	add.w	r0, r3, #18432	; 0x4800
 8005012:	305c      	adds	r0, #92	; 0x5c
 8005014:	f107 0114 	add.w	r1, r7, #20
 8005018:	2301      	movs	r3, #1
 800501a:	2204      	movs	r2, #4
 800501c:	f7fd fa9b 	bl	8002556 <cBuffPush>
    }

    return len;
 8005020:	697b      	ldr	r3, [r7, #20]
}
 8005022:	4618      	mov	r0, r3
 8005024:	3718      	adds	r7, #24
 8005026:	46bd      	mov	sp, r7
 8005028:	bd80      	pop	{r7, pc}

0800502a <readFromQueue>:

//reads a frame from anti lock queue
//returns length of frame, otherwise 0
//places frame inside rxFrame (if not null), only if there's enough space
uint32_t readFromQueue(serial_line_handle* line, circular_buffer_handle* rxFrame){
 800502a:	b580      	push	{r7, lr}
 800502c:	b086      	sub	sp, #24
 800502e:	af02      	add	r7, sp, #8
 8005030:	6078      	str	r0, [r7, #4]
 8005032:	6039      	str	r1, [r7, #0]
    if(line==NULL) return 0;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2b00      	cmp	r3, #0
 8005038:	d101      	bne.n	800503e <readFromQueue+0x14>
 800503a:	2300      	movs	r3, #0
 800503c:	e030      	b.n	80050a0 <readFromQueue+0x76>

    //check if there are frames in queue
    uint32_t frameLen=0;
 800503e:	2300      	movs	r3, #0
 8005040:	60bb      	str	r3, [r7, #8]
    cBuffPull(&line->alockQueue,(uint8_t*)&frameLen,sizeof(frameLen),0);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	f503 4090 	add.w	r0, r3, #18432	; 0x4800
 8005048:	305c      	adds	r0, #92	; 0x5c
 800504a:	f107 0108 	add.w	r1, r7, #8
 800504e:	2300      	movs	r3, #0
 8005050:	2204      	movs	r2, #4
 8005052:	f7fd fb29 	bl	80026a8 <cBuffPull>

    //read frame from queue
    if(rxFrame!=NULL){
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	2b00      	cmp	r3, #0
 800505a:	d020      	beq.n	800509e <readFromQueue+0x74>
        //pushing it on buffer (if enough space)
        uint32_t len=frameLen;
 800505c:	68bb      	ldr	r3, [r7, #8]
 800505e:	60fb      	str	r3, [r7, #12]
        if((rxFrame->buffLen-rxFrame->elemNum)>=len){
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	685a      	ldr	r2, [r3, #4]
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	689b      	ldr	r3, [r3, #8]
 8005068:	1ad3      	subs	r3, r2, r3
 800506a:	68fa      	ldr	r2, [r7, #12]
 800506c:	429a      	cmp	r2, r3
 800506e:	d80b      	bhi.n	8005088 <readFromQueue+0x5e>
            cBuffPushPull(rxFrame, &line->alockBuff, len, 1,0);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	f503 5101 	add.w	r1, r3, #8256	; 0x2040
 8005076:	310c      	adds	r1, #12
 8005078:	2300      	movs	r3, #0
 800507a:	9300      	str	r3, [sp, #0]
 800507c:	2301      	movs	r3, #1
 800507e:	68fa      	ldr	r2, [r7, #12]
 8005080:	6838      	ldr	r0, [r7, #0]
 8005082:	f7fd fcd8 	bl	8002a36 <cBuffPushPull>
 8005086:	e00a      	b.n	800509e <readFromQueue+0x74>
        }else{
            //otherwise just discard the frame
            cBuffPull(&line->alockBuff,NULL,len,0);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	f503 5001 	add.w	r0, r3, #8256	; 0x2040
 800508e:	300c      	adds	r0, #12
 8005090:	2300      	movs	r3, #0
 8005092:	68fa      	ldr	r2, [r7, #12]
 8005094:	2100      	movs	r1, #0
 8005096:	f7fd fb07 	bl	80026a8 <cBuffPull>
            return 0;
 800509a:	2300      	movs	r3, #0
 800509c:	e000      	b.n	80050a0 <readFromQueue+0x76>
        }
    }

    return frameLen;
 800509e:	68bb      	ldr	r3, [r7, #8]
}
 80050a0:	4618      	mov	r0, r3
 80050a2:	3710      	adds	r7, #16
 80050a4:	46bd      	mov	sp, r7
 80050a6:	bd80      	pop	{r7, pc}

080050a8 <sdlInitLine>:
#endif

// SIMPLE DATA LINK FUNCTIONS -------------------------------------------------
void sdlInitLine(serial_line_handle* line, uint8_t (*txFunc)(uint8_t byte), uint8_t (*rxFunc)(uint8_t* byte), uint32_t timeout, uint32_t retries){
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b084      	sub	sp, #16
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	60f8      	str	r0, [r7, #12]
 80050b0:	60b9      	str	r1, [r7, #8]
 80050b2:	607a      	str	r2, [r7, #4]
 80050b4:	603b      	str	r3, [r7, #0]
    if(line==NULL) return;
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d049      	beq.n	8005150 <sdlInitLine+0xa8>

    line->txFunc=txFunc;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	68ba      	ldr	r2, [r7, #8]
 80050c0:	601a      	str	r2, [r3, #0]
    line->rxFunc=rxFunc;
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	687a      	ldr	r2, [r7, #4]
 80050c6:	605a      	str	r2, [r3, #4]
    cBuffInit(&line->rxBuff,line->rxBuffArray,sizeof(line->rxBuffArray),0);
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	f103 0008 	add.w	r0, r3, #8
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	f103 0118 	add.w	r1, r3, #24
 80050d4:	2300      	movs	r3, #0
 80050d6:	f241 020c 	movw	r2, #4108	; 0x100c
 80050da:	f7fd f9bd 	bl	8002458 <cBuffInit>
    line->timeout=timeout;
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80050e4:	461a      	mov	r2, r3
 80050e6:	683b      	ldr	r3, [r7, #0]
 80050e8:	6413      	str	r3, [r2, #64]	; 0x40
    line->retries=retries;
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80050f0:	461a      	mov	r2, r3
 80050f2:	69bb      	ldr	r3, [r7, #24]
 80050f4:	6453      	str	r3, [r2, #68]	; 0x44
    line->lastRxHash=0;
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80050fc:	2200      	movs	r2, #0
 80050fe:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    cBuffInit(&line->tmpBuff,line->tmpBuffArray,sizeof(line->tmpBuffArray),0);
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	f503 5081 	add.w	r0, r3, #4128	; 0x1020
 8005108:	3004      	adds	r0, #4
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	f503 5181 	add.w	r1, r3, #4128	; 0x1020
 8005110:	3114      	adds	r1, #20
 8005112:	2300      	movs	r3, #0
 8005114:	f241 020c 	movw	r2, #4108	; 0x100c
 8005118:	f7fd f99e 	bl	8002458 <cBuffInit>

#ifdef SDL_ANTILOCK_DEPTH
    cBuffInit(&line->alockBuff,line->alockBuffArray,sizeof(line->alockBuffArray),0);
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	f503 5001 	add.w	r0, r3, #8256	; 0x2040
 8005122:	300c      	adds	r0, #12
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	f503 5101 	add.w	r1, r3, #8256	; 0x2040
 800512a:	311c      	adds	r1, #28
 800512c:	2300      	movs	r3, #0
 800512e:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 8005132:	f7fd f991 	bl	8002458 <cBuffInit>
    cBuffInit(&line->alockQueue,line->alockQueueArray,sizeof(line->alockQueueArray),0);
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	f503 4090 	add.w	r0, r3, #18432	; 0x4800
 800513c:	305c      	adds	r0, #92	; 0x5c
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	f503 4190 	add.w	r1, r3, #18432	; 0x4800
 8005144:	316c      	adds	r1, #108	; 0x6c
 8005146:	2300      	movs	r3, #0
 8005148:	2214      	movs	r2, #20
 800514a:	f7fd f985 	bl	8002458 <cBuffInit>
 800514e:	e000      	b.n	8005152 <sdlInitLine+0xaa>
    if(line==NULL) return;
 8005150:	bf00      	nop
#endif
}
 8005152:	3710      	adds	r7, #16
 8005154:	46bd      	mov	sp, r7
 8005156:	bd80      	pop	{r7, pc}

08005158 <sdlSend>:

uint8_t sdlSend(serial_line_handle* line, uint8_t* buff, uint32_t len, uint8_t ackWanted){
 8005158:	b580      	push	{r7, lr}
 800515a:	b08a      	sub	sp, #40	; 0x28
 800515c:	af02      	add	r7, sp, #8
 800515e:	60f8      	str	r0, [r7, #12]
 8005160:	60b9      	str	r1, [r7, #8]
 8005162:	607a      	str	r2, [r7, #4]
 8005164:	70fb      	strb	r3, [r7, #3]
    if(line==NULL || line->txFunc==NULL || buff==NULL || len==0) return 0;
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	2b00      	cmp	r3, #0
 800516a:	d009      	beq.n	8005180 <sdlSend+0x28>
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	2b00      	cmp	r3, #0
 8005172:	d005      	beq.n	8005180 <sdlSend+0x28>
 8005174:	68bb      	ldr	r3, [r7, #8]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d002      	beq.n	8005180 <sdlSend+0x28>
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	2b00      	cmp	r3, #0
 800517e:	d101      	bne.n	8005184 <sdlSend+0x2c>
 8005180:	2300      	movs	r3, #0
 8005182:	e04a      	b.n	800521a <sdlSend+0xc2>

    if(len>SDL_MAX_PAY_LEN) return 0;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800518a:	d901      	bls.n	8005190 <sdlSend+0x38>
 800518c:	2300      	movs	r3, #0
 800518e:	e044      	b.n	800521a <sdlSend+0xc2>

    //generating hash
    uint16_t hash=computeHash(buff,len);
 8005190:	6879      	ldr	r1, [r7, #4]
 8005192:	68b8      	ldr	r0, [r7, #8]
 8005194:	f7ff fc5c 	bl	8004a50 <computeHash>
 8005198:	4603      	mov	r3, r0
 800519a:	837b      	strh	r3, [r7, #26]

    //try sending frame
    uint32_t retryNum=0;
 800519c:	2300      	movs	r3, #0
 800519e:	61fb      	str	r3, [r7, #28]
    do{
        retryNum++;
 80051a0:	69fb      	ldr	r3, [r7, #28]
 80051a2:	3301      	adds	r3, #1
 80051a4:	61fb      	str	r3, [r7, #28]
        
        //send data
        if(!sendFrame(line,FRMCODE_DATA,ackWanted,hash,buff,len)) continue;
 80051a6:	8b79      	ldrh	r1, [r7, #26]
 80051a8:	78fa      	ldrb	r2, [r7, #3]
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	9301      	str	r3, [sp, #4]
 80051ae:	68bb      	ldr	r3, [r7, #8]
 80051b0:	9300      	str	r3, [sp, #0]
 80051b2:	460b      	mov	r3, r1
 80051b4:	2100      	movs	r1, #0
 80051b6:	68f8      	ldr	r0, [r7, #12]
 80051b8:	f7ff fce2 	bl	8004b80 <sendFrame>
 80051bc:	4603      	mov	r3, r0
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d022      	beq.n	8005208 <sdlSend+0xb0>

        if(!ackWanted) return 1;
 80051c2:	78fb      	ldrb	r3, [r7, #3]
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d101      	bne.n	80051cc <sdlSend+0x74>
 80051c8:	2301      	movs	r3, #1
 80051ca:	e026      	b.n	800521a <sdlSend+0xc2>
#ifdef SDL_DEBUG
        __sdlTestSendCallback(line);
#endif

        //saving starting tick for timeout
        uint32_t startTick=sdlTimeTick();
 80051cc:	f7fe f874 	bl	80032b8 <sdlTimeTick>
 80051d0:	6178      	str	r0, [r7, #20]
        do{
            if(receiveAck(line,hash)) return 1;
 80051d2:	8b7b      	ldrh	r3, [r7, #26]
 80051d4:	4619      	mov	r1, r3
 80051d6:	68f8      	ldr	r0, [r7, #12]
 80051d8:	f7ff feb8 	bl	8004f4c <receiveAck>
 80051dc:	4603      	mov	r3, r0
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d001      	beq.n	80051e6 <sdlSend+0x8e>
 80051e2:	2301      	movs	r3, #1
 80051e4:	e019      	b.n	800521a <sdlSend+0xc2>

#ifdef SDL_ANTILOCK_DEPTH
        //if anti lock active, fill the queue while waiting
        receiveInQueueAndAck(line,FRMCODE_DATA,NULL);
 80051e6:	2200      	movs	r2, #0
 80051e8:	2100      	movs	r1, #0
 80051ea:	68f8      	ldr	r0, [r7, #12]
 80051ec:	f7ff fee2 	bl	8004fb4 <receiveInQueueAndAck>
#endif
        }while((sdlTimeTick()-startTick)<=line->timeout);
 80051f0:	f7fe f862 	bl	80032b8 <sdlTimeTick>
 80051f4:	4602      	mov	r2, r0
 80051f6:	697b      	ldr	r3, [r7, #20]
 80051f8:	1ad2      	subs	r2, r2, r3
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005202:	429a      	cmp	r2, r3
 8005204:	d9e5      	bls.n	80051d2 <sdlSend+0x7a>
 8005206:	e000      	b.n	800520a <sdlSend+0xb2>
        if(!sendFrame(line,FRMCODE_DATA,ackWanted,hash,buff,len)) continue;
 8005208:	bf00      	nop

    }while(retryNum<=line->retries);
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005210:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005212:	69fa      	ldr	r2, [r7, #28]
 8005214:	429a      	cmp	r2, r3
 8005216:	d9c3      	bls.n	80051a0 <sdlSend+0x48>

    return 0;
 8005218:	2300      	movs	r3, #0
}
 800521a:	4618      	mov	r0, r3
 800521c:	3720      	adds	r7, #32
 800521e:	46bd      	mov	sp, r7
 8005220:	bd80      	pop	{r7, pc}

08005222 <sdlReceive>:

uint32_t sdlReceive(serial_line_handle* line, uint8_t* buff, uint32_t len){
 8005222:	b580      	push	{r7, lr}
 8005224:	b08e      	sub	sp, #56	; 0x38
 8005226:	af00      	add	r7, sp, #0
 8005228:	60f8      	str	r0, [r7, #12]
 800522a:	60b9      	str	r1, [r7, #8]
 800522c:	607a      	str	r2, [r7, #4]
    if(line==NULL || line->rxFunc==NULL) return 0;
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	2b00      	cmp	r3, #0
 8005232:	d003      	beq.n	800523c <sdlReceive+0x1a>
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	685b      	ldr	r3, [r3, #4]
 8005238:	2b00      	cmp	r3, #0
 800523a:	d101      	bne.n	8005240 <sdlReceive+0x1e>
 800523c:	2300      	movs	r3, #0
 800523e:	e029      	b.n	8005294 <sdlReceive+0x72>

    uint32_t retVal=0;
 8005240:	2300      	movs	r3, #0
 8005242:	637b      	str	r3, [r7, #52]	; 0x34

    //temporary cBuffer
    circular_buffer_handle dummyHandle;
    cBuffInit(&dummyHandle, buff, len,0);
 8005244:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005248:	2300      	movs	r3, #0
 800524a:	687a      	ldr	r2, [r7, #4]
 800524c:	68b9      	ldr	r1, [r7, #8]
 800524e:	f7fd f903 	bl	8002458 <cBuffInit>

#ifdef SDL_ANTILOCK_DEPTH
    //try reading from queue
    retVal=readFromQueue(line, &dummyHandle);
 8005252:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005256:	4619      	mov	r1, r3
 8005258:	68f8      	ldr	r0, [r7, #12]
 800525a:	f7ff fee6 	bl	800502a <readFromQueue>
 800525e:	6378      	str	r0, [r7, #52]	; 0x34
    if(retVal) return retVal;
 8005260:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005262:	2b00      	cmp	r3, #0
 8005264:	d001      	beq.n	800526a <sdlReceive+0x48>
 8005266:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005268:	e014      	b.n	8005294 <sdlReceive+0x72>
#endif

    //otherwise try receiving a fresh frame
    uint8_t remCode[]={FRMCODE_ACK}; //we remove old acks from buffer
 800526a:	2301      	movs	r3, #1
 800526c:	f887 3020 	strb.w	r3, [r7, #32]
    circular_buffer_handle remCodes;
    cBuffInit(&remCodes,remCode,sizeof(remCode),sizeof(remCode));
 8005270:	f107 0120 	add.w	r1, r7, #32
 8005274:	f107 0010 	add.w	r0, r7, #16
 8005278:	2301      	movs	r3, #1
 800527a:	2201      	movs	r2, #1
 800527c:	f7fd f8ec 	bl	8002458 <cBuffInit>
    retVal=receiveFrameAndAck(line,&dummyHandle,FRMCODE_DATA,&remCodes);
 8005280:	f107 0310 	add.w	r3, r7, #16
 8005284:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8005288:	2200      	movs	r2, #0
 800528a:	68f8      	ldr	r0, [r7, #12]
 800528c:	f7ff fdea 	bl	8004e64 <receiveFrameAndAck>
 8005290:	6378      	str	r0, [r7, #52]	; 0x34

    return retVal;
 8005292:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005294:	4618      	mov	r0, r3
 8005296:	3738      	adds	r7, #56	; 0x38
 8005298:	46bd      	mov	sp, r7
 800529a:	bd80      	pop	{r7, pc}

0800529c <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 800529c:	b580      	push	{r7, lr}
 800529e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80052a0:	4b1b      	ldr	r3, [pc, #108]	; (8005310 <MX_SPI2_Init+0x74>)
 80052a2:	4a1c      	ldr	r2, [pc, #112]	; (8005314 <MX_SPI2_Init+0x78>)
 80052a4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80052a6:	4b1a      	ldr	r3, [pc, #104]	; (8005310 <MX_SPI2_Init+0x74>)
 80052a8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80052ac:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80052ae:	4b18      	ldr	r3, [pc, #96]	; (8005310 <MX_SPI2_Init+0x74>)
 80052b0:	2200      	movs	r2, #0
 80052b2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80052b4:	4b16      	ldr	r3, [pc, #88]	; (8005310 <MX_SPI2_Init+0x74>)
 80052b6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80052ba:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80052bc:	4b14      	ldr	r3, [pc, #80]	; (8005310 <MX_SPI2_Init+0x74>)
 80052be:	2200      	movs	r2, #0
 80052c0:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80052c2:	4b13      	ldr	r3, [pc, #76]	; (8005310 <MX_SPI2_Init+0x74>)
 80052c4:	2200      	movs	r2, #0
 80052c6:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80052c8:	4b11      	ldr	r3, [pc, #68]	; (8005310 <MX_SPI2_Init+0x74>)
 80052ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80052ce:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80052d0:	4b0f      	ldr	r3, [pc, #60]	; (8005310 <MX_SPI2_Init+0x74>)
 80052d2:	2220      	movs	r2, #32
 80052d4:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80052d6:	4b0e      	ldr	r3, [pc, #56]	; (8005310 <MX_SPI2_Init+0x74>)
 80052d8:	2200      	movs	r2, #0
 80052da:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80052dc:	4b0c      	ldr	r3, [pc, #48]	; (8005310 <MX_SPI2_Init+0x74>)
 80052de:	2200      	movs	r2, #0
 80052e0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80052e2:	4b0b      	ldr	r3, [pc, #44]	; (8005310 <MX_SPI2_Init+0x74>)
 80052e4:	2200      	movs	r2, #0
 80052e6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80052e8:	4b09      	ldr	r3, [pc, #36]	; (8005310 <MX_SPI2_Init+0x74>)
 80052ea:	2207      	movs	r2, #7
 80052ec:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80052ee:	4b08      	ldr	r3, [pc, #32]	; (8005310 <MX_SPI2_Init+0x74>)
 80052f0:	2200      	movs	r2, #0
 80052f2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80052f4:	4b06      	ldr	r3, [pc, #24]	; (8005310 <MX_SPI2_Init+0x74>)
 80052f6:	2208      	movs	r2, #8
 80052f8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80052fa:	4805      	ldr	r0, [pc, #20]	; (8005310 <MX_SPI2_Init+0x74>)
 80052fc:	f004 f8ec 	bl	80094d8 <HAL_SPI_Init>
 8005300:	4603      	mov	r3, r0
 8005302:	2b00      	cmp	r3, #0
 8005304:	d001      	beq.n	800530a <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8005306:	f7fe fdab 	bl	8003e60 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800530a:	bf00      	nop
 800530c:	bd80      	pop	{r7, pc}
 800530e:	bf00      	nop
 8005310:	200219b0 	.word	0x200219b0
 8005314:	40003800 	.word	0x40003800

08005318 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8005318:	b580      	push	{r7, lr}
 800531a:	b08a      	sub	sp, #40	; 0x28
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005320:	f107 0314 	add.w	r3, r7, #20
 8005324:	2200      	movs	r2, #0
 8005326:	601a      	str	r2, [r3, #0]
 8005328:	605a      	str	r2, [r3, #4]
 800532a:	609a      	str	r2, [r3, #8]
 800532c:	60da      	str	r2, [r3, #12]
 800532e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	4a17      	ldr	r2, [pc, #92]	; (8005394 <HAL_SPI_MspInit+0x7c>)
 8005336:	4293      	cmp	r3, r2
 8005338:	d128      	bne.n	800538c <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800533a:	4b17      	ldr	r3, [pc, #92]	; (8005398 <HAL_SPI_MspInit+0x80>)
 800533c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800533e:	4a16      	ldr	r2, [pc, #88]	; (8005398 <HAL_SPI_MspInit+0x80>)
 8005340:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005344:	6593      	str	r3, [r2, #88]	; 0x58
 8005346:	4b14      	ldr	r3, [pc, #80]	; (8005398 <HAL_SPI_MspInit+0x80>)
 8005348:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800534a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800534e:	613b      	str	r3, [r7, #16]
 8005350:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005352:	4b11      	ldr	r3, [pc, #68]	; (8005398 <HAL_SPI_MspInit+0x80>)
 8005354:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005356:	4a10      	ldr	r2, [pc, #64]	; (8005398 <HAL_SPI_MspInit+0x80>)
 8005358:	f043 0302 	orr.w	r3, r3, #2
 800535c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800535e:	4b0e      	ldr	r3, [pc, #56]	; (8005398 <HAL_SPI_MspInit+0x80>)
 8005360:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005362:	f003 0302 	and.w	r3, r3, #2
 8005366:	60fb      	str	r3, [r7, #12]
 8005368:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800536a:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800536e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005370:	2302      	movs	r3, #2
 8005372:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005374:	2300      	movs	r3, #0
 8005376:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005378:	2303      	movs	r3, #3
 800537a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800537c:	2305      	movs	r3, #5
 800537e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005380:	f107 0314 	add.w	r3, r7, #20
 8005384:	4619      	mov	r1, r3
 8005386:	4805      	ldr	r0, [pc, #20]	; (800539c <HAL_SPI_MspInit+0x84>)
 8005388:	f002 fce8 	bl	8007d5c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 800538c:	bf00      	nop
 800538e:	3728      	adds	r7, #40	; 0x28
 8005390:	46bd      	mov	sp, r7
 8005392:	bd80      	pop	{r7, pc}
 8005394:	40003800 	.word	0x40003800
 8005398:	40021000 	.word	0x40021000
 800539c:	48000400 	.word	0x48000400

080053a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80053a0:	b580      	push	{r7, lr}
 80053a2:	b082      	sub	sp, #8
 80053a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80053a6:	4b11      	ldr	r3, [pc, #68]	; (80053ec <HAL_MspInit+0x4c>)
 80053a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80053aa:	4a10      	ldr	r2, [pc, #64]	; (80053ec <HAL_MspInit+0x4c>)
 80053ac:	f043 0301 	orr.w	r3, r3, #1
 80053b0:	6613      	str	r3, [r2, #96]	; 0x60
 80053b2:	4b0e      	ldr	r3, [pc, #56]	; (80053ec <HAL_MspInit+0x4c>)
 80053b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80053b6:	f003 0301 	and.w	r3, r3, #1
 80053ba:	607b      	str	r3, [r7, #4]
 80053bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80053be:	4b0b      	ldr	r3, [pc, #44]	; (80053ec <HAL_MspInit+0x4c>)
 80053c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053c2:	4a0a      	ldr	r2, [pc, #40]	; (80053ec <HAL_MspInit+0x4c>)
 80053c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80053c8:	6593      	str	r3, [r2, #88]	; 0x58
 80053ca:	4b08      	ldr	r3, [pc, #32]	; (80053ec <HAL_MspInit+0x4c>)
 80053cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053d2:	603b      	str	r3, [r7, #0]
 80053d4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80053d6:	2200      	movs	r2, #0
 80053d8:	210f      	movs	r1, #15
 80053da:	f06f 0001 	mvn.w	r0, #1
 80053de:	f002 fc13 	bl	8007c08 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80053e2:	bf00      	nop
 80053e4:	3708      	adds	r7, #8
 80053e6:	46bd      	mov	sp, r7
 80053e8:	bd80      	pop	{r7, pc}
 80053ea:	bf00      	nop
 80053ec:	40021000 	.word	0x40021000

080053f0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80053f0:	b580      	push	{r7, lr}
 80053f2:	b08e      	sub	sp, #56	; 0x38
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80053f8:	2300      	movs	r3, #0
 80053fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80053fe:	4b34      	ldr	r3, [pc, #208]	; (80054d0 <HAL_InitTick+0xe0>)
 8005400:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005402:	4a33      	ldr	r2, [pc, #204]	; (80054d0 <HAL_InitTick+0xe0>)
 8005404:	f043 0310 	orr.w	r3, r3, #16
 8005408:	6593      	str	r3, [r2, #88]	; 0x58
 800540a:	4b31      	ldr	r3, [pc, #196]	; (80054d0 <HAL_InitTick+0xe0>)
 800540c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800540e:	f003 0310 	and.w	r3, r3, #16
 8005412:	60fb      	str	r3, [r7, #12]
 8005414:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8005416:	f107 0210 	add.w	r2, r7, #16
 800541a:	f107 0314 	add.w	r3, r7, #20
 800541e:	4611      	mov	r1, r2
 8005420:	4618      	mov	r0, r3
 8005422:	f003 fc69 	bl	8008cf8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8005426:	6a3b      	ldr	r3, [r7, #32]
 8005428:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800542a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800542c:	2b00      	cmp	r3, #0
 800542e:	d103      	bne.n	8005438 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8005430:	f003 fc36 	bl	8008ca0 <HAL_RCC_GetPCLK1Freq>
 8005434:	6378      	str	r0, [r7, #52]	; 0x34
 8005436:	e004      	b.n	8005442 <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8005438:	f003 fc32 	bl	8008ca0 <HAL_RCC_GetPCLK1Freq>
 800543c:	4603      	mov	r3, r0
 800543e:	005b      	lsls	r3, r3, #1
 8005440:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8005442:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005444:	4a23      	ldr	r2, [pc, #140]	; (80054d4 <HAL_InitTick+0xe4>)
 8005446:	fba2 2303 	umull	r2, r3, r2, r3
 800544a:	0c9b      	lsrs	r3, r3, #18
 800544c:	3b01      	subs	r3, #1
 800544e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8005450:	4b21      	ldr	r3, [pc, #132]	; (80054d8 <HAL_InitTick+0xe8>)
 8005452:	4a22      	ldr	r2, [pc, #136]	; (80054dc <HAL_InitTick+0xec>)
 8005454:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8005456:	4b20      	ldr	r3, [pc, #128]	; (80054d8 <HAL_InitTick+0xe8>)
 8005458:	f240 32e7 	movw	r2, #999	; 0x3e7
 800545c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800545e:	4a1e      	ldr	r2, [pc, #120]	; (80054d8 <HAL_InitTick+0xe8>)
 8005460:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005462:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8005464:	4b1c      	ldr	r3, [pc, #112]	; (80054d8 <HAL_InitTick+0xe8>)
 8005466:	2200      	movs	r2, #0
 8005468:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800546a:	4b1b      	ldr	r3, [pc, #108]	; (80054d8 <HAL_InitTick+0xe8>)
 800546c:	2200      	movs	r2, #0
 800546e:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005470:	4b19      	ldr	r3, [pc, #100]	; (80054d8 <HAL_InitTick+0xe8>)
 8005472:	2200      	movs	r2, #0
 8005474:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8005476:	4818      	ldr	r0, [pc, #96]	; (80054d8 <HAL_InitTick+0xe8>)
 8005478:	f004 ff3e 	bl	800a2f8 <HAL_TIM_Base_Init>
 800547c:	4603      	mov	r3, r0
 800547e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8005482:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005486:	2b00      	cmp	r3, #0
 8005488:	d11b      	bne.n	80054c2 <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 800548a:	4813      	ldr	r0, [pc, #76]	; (80054d8 <HAL_InitTick+0xe8>)
 800548c:	f004 ff8c 	bl	800a3a8 <HAL_TIM_Base_Start_IT>
 8005490:	4603      	mov	r3, r0
 8005492:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8005496:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800549a:	2b00      	cmp	r3, #0
 800549c:	d111      	bne.n	80054c2 <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800549e:	2036      	movs	r0, #54	; 0x36
 80054a0:	f002 fbce 	bl	8007c40 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2b0f      	cmp	r3, #15
 80054a8:	d808      	bhi.n	80054bc <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80054aa:	2200      	movs	r2, #0
 80054ac:	6879      	ldr	r1, [r7, #4]
 80054ae:	2036      	movs	r0, #54	; 0x36
 80054b0:	f002 fbaa 	bl	8007c08 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80054b4:	4a0a      	ldr	r2, [pc, #40]	; (80054e0 <HAL_InitTick+0xf0>)
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6013      	str	r3, [r2, #0]
 80054ba:	e002      	b.n	80054c2 <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 80054bc:	2301      	movs	r3, #1
 80054be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80054c2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80054c6:	4618      	mov	r0, r3
 80054c8:	3738      	adds	r7, #56	; 0x38
 80054ca:	46bd      	mov	sp, r7
 80054cc:	bd80      	pop	{r7, pc}
 80054ce:	bf00      	nop
 80054d0:	40021000 	.word	0x40021000
 80054d4:	431bde83 	.word	0x431bde83
 80054d8:	20021a14 	.word	0x20021a14
 80054dc:	40001000 	.word	0x40001000
 80054e0:	2000002c 	.word	0x2000002c

080054e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80054e4:	b480      	push	{r7}
 80054e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80054e8:	e7fe      	b.n	80054e8 <NMI_Handler+0x4>

080054ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80054ea:	b480      	push	{r7}
 80054ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80054ee:	e7fe      	b.n	80054ee <HardFault_Handler+0x4>

080054f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80054f0:	b480      	push	{r7}
 80054f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80054f4:	e7fe      	b.n	80054f4 <MemManage_Handler+0x4>

080054f6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80054f6:	b480      	push	{r7}
 80054f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80054fa:	e7fe      	b.n	80054fa <BusFault_Handler+0x4>

080054fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80054fc:	b480      	push	{r7}
 80054fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005500:	e7fe      	b.n	8005500 <UsageFault_Handler+0x4>

08005502 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005502:	b480      	push	{r7}
 8005504:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005506:	bf00      	nop
 8005508:	46bd      	mov	sp, r7
 800550a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550e:	4770      	bx	lr

08005510 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8005510:	b580      	push	{r7, lr}
 8005512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8005514:	4802      	ldr	r0, [pc, #8]	; (8005520 <USART1_IRQHandler+0x10>)
 8005516:	f006 f975 	bl	800b804 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800551a:	bf00      	nop
 800551c:	bd80      	pop	{r7, pc}
 800551e:	bf00      	nop
 8005520:	20021bcc 	.word	0x20021bcc

08005524 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8005524:	b580      	push	{r7, lr}
 8005526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8005528:	4802      	ldr	r0, [pc, #8]	; (8005534 <USART2_IRQHandler+0x10>)
 800552a:	f006 f96b 	bl	800b804 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800552e:	bf00      	nop
 8005530:	bd80      	pop	{r7, pc}
 8005532:	bf00      	nop
 8005534:	20021c50 	.word	0x20021c50

08005538 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8005538:	b580      	push	{r7, lr}
 800553a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800553c:	4802      	ldr	r0, [pc, #8]	; (8005548 <USART3_IRQHandler+0x10>)
 800553e:	f006 f961 	bl	800b804 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8005542:	bf00      	nop
 8005544:	bd80      	pop	{r7, pc}
 8005546:	bf00      	nop
 8005548:	20021cd4 	.word	0x20021cd4

0800554c <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 800554c:	b580      	push	{r7, lr}
 800554e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8005550:	4802      	ldr	r0, [pc, #8]	; (800555c <UART4_IRQHandler+0x10>)
 8005552:	f006 f957 	bl	800b804 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8005556:	bf00      	nop
 8005558:	bd80      	pop	{r7, pc}
 800555a:	bf00      	nop
 800555c:	20021b48 	.word	0x20021b48

08005560 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 underrun error interrupt.
  */
void TIM6_DAC_IRQHandler(void)
{
 8005560:	b580      	push	{r7, lr}
 8005562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8005564:	4802      	ldr	r0, [pc, #8]	; (8005570 <TIM6_DAC_IRQHandler+0x10>)
 8005566:	f005 f865 	bl	800a634 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800556a:	bf00      	nop
 800556c:	bd80      	pop	{r7, pc}
 800556e:	bf00      	nop
 8005570:	20021a14 	.word	0x20021a14

08005574 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005574:	b480      	push	{r7}
 8005576:	af00      	add	r7, sp, #0
	return 1;
 8005578:	2301      	movs	r3, #1
}
 800557a:	4618      	mov	r0, r3
 800557c:	46bd      	mov	sp, r7
 800557e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005582:	4770      	bx	lr

08005584 <_kill>:

int _kill(int pid, int sig)
{
 8005584:	b580      	push	{r7, lr}
 8005586:	b082      	sub	sp, #8
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
 800558c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800558e:	f009 ffcb 	bl	800f528 <__errno>
 8005592:	4603      	mov	r3, r0
 8005594:	2216      	movs	r2, #22
 8005596:	601a      	str	r2, [r3, #0]
	return -1;
 8005598:	f04f 33ff 	mov.w	r3, #4294967295
}
 800559c:	4618      	mov	r0, r3
 800559e:	3708      	adds	r7, #8
 80055a0:	46bd      	mov	sp, r7
 80055a2:	bd80      	pop	{r7, pc}

080055a4 <_exit>:

void _exit (int status)
{
 80055a4:	b580      	push	{r7, lr}
 80055a6:	b082      	sub	sp, #8
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80055ac:	f04f 31ff 	mov.w	r1, #4294967295
 80055b0:	6878      	ldr	r0, [r7, #4]
 80055b2:	f7ff ffe7 	bl	8005584 <_kill>
	while (1) {}		/* Make sure we hang here */
 80055b6:	e7fe      	b.n	80055b6 <_exit+0x12>

080055b8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80055b8:	b580      	push	{r7, lr}
 80055ba:	b086      	sub	sp, #24
 80055bc:	af00      	add	r7, sp, #0
 80055be:	60f8      	str	r0, [r7, #12]
 80055c0:	60b9      	str	r1, [r7, #8]
 80055c2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80055c4:	2300      	movs	r3, #0
 80055c6:	617b      	str	r3, [r7, #20]
 80055c8:	e00a      	b.n	80055e0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80055ca:	f3af 8000 	nop.w
 80055ce:	4601      	mov	r1, r0
 80055d0:	68bb      	ldr	r3, [r7, #8]
 80055d2:	1c5a      	adds	r2, r3, #1
 80055d4:	60ba      	str	r2, [r7, #8]
 80055d6:	b2ca      	uxtb	r2, r1
 80055d8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80055da:	697b      	ldr	r3, [r7, #20]
 80055dc:	3301      	adds	r3, #1
 80055de:	617b      	str	r3, [r7, #20]
 80055e0:	697a      	ldr	r2, [r7, #20]
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	429a      	cmp	r2, r3
 80055e6:	dbf0      	blt.n	80055ca <_read+0x12>
	}

return len;
 80055e8:	687b      	ldr	r3, [r7, #4]
}
 80055ea:	4618      	mov	r0, r3
 80055ec:	3718      	adds	r7, #24
 80055ee:	46bd      	mov	sp, r7
 80055f0:	bd80      	pop	{r7, pc}

080055f2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80055f2:	b580      	push	{r7, lr}
 80055f4:	b086      	sub	sp, #24
 80055f6:	af00      	add	r7, sp, #0
 80055f8:	60f8      	str	r0, [r7, #12]
 80055fa:	60b9      	str	r1, [r7, #8]
 80055fc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80055fe:	2300      	movs	r3, #0
 8005600:	617b      	str	r3, [r7, #20]
 8005602:	e009      	b.n	8005618 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8005604:	68bb      	ldr	r3, [r7, #8]
 8005606:	1c5a      	adds	r2, r3, #1
 8005608:	60ba      	str	r2, [r7, #8]
 800560a:	781b      	ldrb	r3, [r3, #0]
 800560c:	4618      	mov	r0, r3
 800560e:	f7fd fe5b 	bl	80032c8 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005612:	697b      	ldr	r3, [r7, #20]
 8005614:	3301      	adds	r3, #1
 8005616:	617b      	str	r3, [r7, #20]
 8005618:	697a      	ldr	r2, [r7, #20]
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	429a      	cmp	r2, r3
 800561e:	dbf1      	blt.n	8005604 <_write+0x12>
	}
	return len;
 8005620:	687b      	ldr	r3, [r7, #4]
}
 8005622:	4618      	mov	r0, r3
 8005624:	3718      	adds	r7, #24
 8005626:	46bd      	mov	sp, r7
 8005628:	bd80      	pop	{r7, pc}

0800562a <_close>:

int _close(int file)
{
 800562a:	b480      	push	{r7}
 800562c:	b083      	sub	sp, #12
 800562e:	af00      	add	r7, sp, #0
 8005630:	6078      	str	r0, [r7, #4]
	return -1;
 8005632:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005636:	4618      	mov	r0, r3
 8005638:	370c      	adds	r7, #12
 800563a:	46bd      	mov	sp, r7
 800563c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005640:	4770      	bx	lr

08005642 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005642:	b480      	push	{r7}
 8005644:	b083      	sub	sp, #12
 8005646:	af00      	add	r7, sp, #0
 8005648:	6078      	str	r0, [r7, #4]
 800564a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005652:	605a      	str	r2, [r3, #4]
	return 0;
 8005654:	2300      	movs	r3, #0
}
 8005656:	4618      	mov	r0, r3
 8005658:	370c      	adds	r7, #12
 800565a:	46bd      	mov	sp, r7
 800565c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005660:	4770      	bx	lr

08005662 <_isatty>:

int _isatty(int file)
{
 8005662:	b480      	push	{r7}
 8005664:	b083      	sub	sp, #12
 8005666:	af00      	add	r7, sp, #0
 8005668:	6078      	str	r0, [r7, #4]
	return 1;
 800566a:	2301      	movs	r3, #1
}
 800566c:	4618      	mov	r0, r3
 800566e:	370c      	adds	r7, #12
 8005670:	46bd      	mov	sp, r7
 8005672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005676:	4770      	bx	lr

08005678 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005678:	b480      	push	{r7}
 800567a:	b085      	sub	sp, #20
 800567c:	af00      	add	r7, sp, #0
 800567e:	60f8      	str	r0, [r7, #12]
 8005680:	60b9      	str	r1, [r7, #8]
 8005682:	607a      	str	r2, [r7, #4]
	return 0;
 8005684:	2300      	movs	r3, #0
}
 8005686:	4618      	mov	r0, r3
 8005688:	3714      	adds	r7, #20
 800568a:	46bd      	mov	sp, r7
 800568c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005690:	4770      	bx	lr
	...

08005694 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005694:	b580      	push	{r7, lr}
 8005696:	b086      	sub	sp, #24
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800569c:	4a14      	ldr	r2, [pc, #80]	; (80056f0 <_sbrk+0x5c>)
 800569e:	4b15      	ldr	r3, [pc, #84]	; (80056f4 <_sbrk+0x60>)
 80056a0:	1ad3      	subs	r3, r2, r3
 80056a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80056a4:	697b      	ldr	r3, [r7, #20]
 80056a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80056a8:	4b13      	ldr	r3, [pc, #76]	; (80056f8 <_sbrk+0x64>)
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d102      	bne.n	80056b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80056b0:	4b11      	ldr	r3, [pc, #68]	; (80056f8 <_sbrk+0x64>)
 80056b2:	4a12      	ldr	r2, [pc, #72]	; (80056fc <_sbrk+0x68>)
 80056b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80056b6:	4b10      	ldr	r3, [pc, #64]	; (80056f8 <_sbrk+0x64>)
 80056b8:	681a      	ldr	r2, [r3, #0]
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	4413      	add	r3, r2
 80056be:	693a      	ldr	r2, [r7, #16]
 80056c0:	429a      	cmp	r2, r3
 80056c2:	d207      	bcs.n	80056d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80056c4:	f009 ff30 	bl	800f528 <__errno>
 80056c8:	4603      	mov	r3, r0
 80056ca:	220c      	movs	r2, #12
 80056cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80056ce:	f04f 33ff 	mov.w	r3, #4294967295
 80056d2:	e009      	b.n	80056e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80056d4:	4b08      	ldr	r3, [pc, #32]	; (80056f8 <_sbrk+0x64>)
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80056da:	4b07      	ldr	r3, [pc, #28]	; (80056f8 <_sbrk+0x64>)
 80056dc:	681a      	ldr	r2, [r3, #0]
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	4413      	add	r3, r2
 80056e2:	4a05      	ldr	r2, [pc, #20]	; (80056f8 <_sbrk+0x64>)
 80056e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80056e6:	68fb      	ldr	r3, [r7, #12]
}
 80056e8:	4618      	mov	r0, r3
 80056ea:	3718      	adds	r7, #24
 80056ec:	46bd      	mov	sp, r7
 80056ee:	bd80      	pop	{r7, pc}
 80056f0:	20028000 	.word	0x20028000
 80056f4:	00000400 	.word	0x00000400
 80056f8:	20021a60 	.word	0x20021a60
 80056fc:	20021fe0 	.word	0x20021fe0

08005700 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8005700:	b480      	push	{r7}
 8005702:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8005704:	4b06      	ldr	r3, [pc, #24]	; (8005720 <SystemInit+0x20>)
 8005706:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800570a:	4a05      	ldr	r2, [pc, #20]	; (8005720 <SystemInit+0x20>)
 800570c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005710:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8005714:	bf00      	nop
 8005716:	46bd      	mov	sp, r7
 8005718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571c:	4770      	bx	lr
 800571e:	bf00      	nop
 8005720:	e000ed00 	.word	0xe000ed00

08005724 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8005724:	b580      	push	{r7, lr}
 8005726:	b09a      	sub	sp, #104	; 0x68
 8005728:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800572a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800572e:	2200      	movs	r2, #0
 8005730:	601a      	str	r2, [r3, #0]
 8005732:	605a      	str	r2, [r3, #4]
 8005734:	609a      	str	r2, [r3, #8]
 8005736:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005738:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800573c:	2200      	movs	r2, #0
 800573e:	601a      	str	r2, [r3, #0]
 8005740:	605a      	str	r2, [r3, #4]
 8005742:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005744:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005748:	2200      	movs	r2, #0
 800574a:	601a      	str	r2, [r3, #0]
 800574c:	605a      	str	r2, [r3, #4]
 800574e:	609a      	str	r2, [r3, #8]
 8005750:	60da      	str	r2, [r3, #12]
 8005752:	611a      	str	r2, [r3, #16]
 8005754:	615a      	str	r2, [r3, #20]
 8005756:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8005758:	1d3b      	adds	r3, r7, #4
 800575a:	222c      	movs	r2, #44	; 0x2c
 800575c:	2100      	movs	r1, #0
 800575e:	4618      	mov	r0, r3
 8005760:	f009 ff2a 	bl	800f5b8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8005764:	4b49      	ldr	r3, [pc, #292]	; (800588c <MX_TIM1_Init+0x168>)
 8005766:	4a4a      	ldr	r2, [pc, #296]	; (8005890 <MX_TIM1_Init+0x16c>)
 8005768:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800576a:	4b48      	ldr	r3, [pc, #288]	; (800588c <MX_TIM1_Init+0x168>)
 800576c:	2200      	movs	r2, #0
 800576e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005770:	4b46      	ldr	r3, [pc, #280]	; (800588c <MX_TIM1_Init+0x168>)
 8005772:	2200      	movs	r2, #0
 8005774:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 199;
 8005776:	4b45      	ldr	r3, [pc, #276]	; (800588c <MX_TIM1_Init+0x168>)
 8005778:	22c7      	movs	r2, #199	; 0xc7
 800577a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800577c:	4b43      	ldr	r3, [pc, #268]	; (800588c <MX_TIM1_Init+0x168>)
 800577e:	2200      	movs	r2, #0
 8005780:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8005782:	4b42      	ldr	r3, [pc, #264]	; (800588c <MX_TIM1_Init+0x168>)
 8005784:	2200      	movs	r2, #0
 8005786:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005788:	4b40      	ldr	r3, [pc, #256]	; (800588c <MX_TIM1_Init+0x168>)
 800578a:	2200      	movs	r2, #0
 800578c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800578e:	483f      	ldr	r0, [pc, #252]	; (800588c <MX_TIM1_Init+0x168>)
 8005790:	f004 fdb2 	bl	800a2f8 <HAL_TIM_Base_Init>
 8005794:	4603      	mov	r3, r0
 8005796:	2b00      	cmp	r3, #0
 8005798:	d001      	beq.n	800579e <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800579a:	f7fe fb61 	bl	8003e60 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800579e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80057a2:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80057a4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80057a8:	4619      	mov	r1, r3
 80057aa:	4838      	ldr	r0, [pc, #224]	; (800588c <MX_TIM1_Init+0x168>)
 80057ac:	f005 f976 	bl	800aa9c <HAL_TIM_ConfigClockSource>
 80057b0:	4603      	mov	r3, r0
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d001      	beq.n	80057ba <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80057b6:	f7fe fb53 	bl	8003e60 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80057ba:	4834      	ldr	r0, [pc, #208]	; (800588c <MX_TIM1_Init+0x168>)
 80057bc:	f004 fe50 	bl	800a460 <HAL_TIM_PWM_Init>
 80057c0:	4603      	mov	r3, r0
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d001      	beq.n	80057ca <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80057c6:	f7fe fb4b 	bl	8003e60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80057ca:	2300      	movs	r3, #0
 80057cc:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80057ce:	2300      	movs	r3, #0
 80057d0:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80057d2:	2300      	movs	r3, #0
 80057d4:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80057d6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80057da:	4619      	mov	r1, r3
 80057dc:	482b      	ldr	r0, [pc, #172]	; (800588c <MX_TIM1_Init+0x168>)
 80057de:	f005 fdfb 	bl	800b3d8 <HAL_TIMEx_MasterConfigSynchronization>
 80057e2:	4603      	mov	r3, r0
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d001      	beq.n	80057ec <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 80057e8:	f7fe fb3a 	bl	8003e60 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80057ec:	2360      	movs	r3, #96	; 0x60
 80057ee:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 80057f0:	2300      	movs	r3, #0
 80057f2:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80057f4:	2300      	movs	r3, #0
 80057f6:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80057f8:	2300      	movs	r3, #0
 80057fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80057fc:	2300      	movs	r3, #0
 80057fe:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8005800:	2300      	movs	r3, #0
 8005802:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8005804:	2300      	movs	r3, #0
 8005806:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005808:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800580c:	2200      	movs	r2, #0
 800580e:	4619      	mov	r1, r3
 8005810:	481e      	ldr	r0, [pc, #120]	; (800588c <MX_TIM1_Init+0x168>)
 8005812:	f005 f82f 	bl	800a874 <HAL_TIM_PWM_ConfigChannel>
 8005816:	4603      	mov	r3, r0
 8005818:	2b00      	cmp	r3, #0
 800581a:	d001      	beq.n	8005820 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 800581c:	f7fe fb20 	bl	8003e60 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8005820:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005824:	2204      	movs	r2, #4
 8005826:	4619      	mov	r1, r3
 8005828:	4818      	ldr	r0, [pc, #96]	; (800588c <MX_TIM1_Init+0x168>)
 800582a:	f005 f823 	bl	800a874 <HAL_TIM_PWM_ConfigChannel>
 800582e:	4603      	mov	r3, r0
 8005830:	2b00      	cmp	r3, #0
 8005832:	d001      	beq.n	8005838 <MX_TIM1_Init+0x114>
  {
    Error_Handler();
 8005834:	f7fe fb14 	bl	8003e60 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8005838:	2300      	movs	r3, #0
 800583a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800583c:	2300      	movs	r3, #0
 800583e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8005840:	2300      	movs	r3, #0
 8005842:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8005844:	2300      	movs	r3, #0
 8005846:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8005848:	2300      	movs	r3, #0
 800584a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800584c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005850:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8005852:	2300      	movs	r3, #0
 8005854:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8005856:	2300      	movs	r3, #0
 8005858:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800585a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800585e:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8005860:	2300      	movs	r3, #0
 8005862:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8005864:	2300      	movs	r3, #0
 8005866:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8005868:	1d3b      	adds	r3, r7, #4
 800586a:	4619      	mov	r1, r3
 800586c:	4807      	ldr	r0, [pc, #28]	; (800588c <MX_TIM1_Init+0x168>)
 800586e:	f005 fe21 	bl	800b4b4 <HAL_TIMEx_ConfigBreakDeadTime>
 8005872:	4603      	mov	r3, r0
 8005874:	2b00      	cmp	r3, #0
 8005876:	d001      	beq.n	800587c <MX_TIM1_Init+0x158>
  {
    Error_Handler();
 8005878:	f7fe faf2 	bl	8003e60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800587c:	4803      	ldr	r0, [pc, #12]	; (800588c <MX_TIM1_Init+0x168>)
 800587e:	f000 f97d 	bl	8005b7c <HAL_TIM_MspPostInit>

}
 8005882:	bf00      	nop
 8005884:	3768      	adds	r7, #104	; 0x68
 8005886:	46bd      	mov	sp, r7
 8005888:	bd80      	pop	{r7, pc}
 800588a:	bf00      	nop
 800588c:	20021a64 	.word	0x20021a64
 8005890:	40012c00 	.word	0x40012c00

08005894 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8005894:	b580      	push	{r7, lr}
 8005896:	b08e      	sub	sp, #56	; 0x38
 8005898:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800589a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800589e:	2200      	movs	r2, #0
 80058a0:	601a      	str	r2, [r3, #0]
 80058a2:	605a      	str	r2, [r3, #4]
 80058a4:	609a      	str	r2, [r3, #8]
 80058a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80058a8:	f107 031c 	add.w	r3, r7, #28
 80058ac:	2200      	movs	r2, #0
 80058ae:	601a      	str	r2, [r3, #0]
 80058b0:	605a      	str	r2, [r3, #4]
 80058b2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80058b4:	463b      	mov	r3, r7
 80058b6:	2200      	movs	r2, #0
 80058b8:	601a      	str	r2, [r3, #0]
 80058ba:	605a      	str	r2, [r3, #4]
 80058bc:	609a      	str	r2, [r3, #8]
 80058be:	60da      	str	r2, [r3, #12]
 80058c0:	611a      	str	r2, [r3, #16]
 80058c2:	615a      	str	r2, [r3, #20]
 80058c4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80058c6:	4b3d      	ldr	r3, [pc, #244]	; (80059bc <MX_TIM2_Init+0x128>)
 80058c8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80058cc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80058ce:	4b3b      	ldr	r3, [pc, #236]	; (80059bc <MX_TIM2_Init+0x128>)
 80058d0:	2200      	movs	r2, #0
 80058d2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80058d4:	4b39      	ldr	r3, [pc, #228]	; (80059bc <MX_TIM2_Init+0x128>)
 80058d6:	2200      	movs	r2, #0
 80058d8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 199;
 80058da:	4b38      	ldr	r3, [pc, #224]	; (80059bc <MX_TIM2_Init+0x128>)
 80058dc:	22c7      	movs	r2, #199	; 0xc7
 80058de:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80058e0:	4b36      	ldr	r3, [pc, #216]	; (80059bc <MX_TIM2_Init+0x128>)
 80058e2:	2200      	movs	r2, #0
 80058e4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80058e6:	4b35      	ldr	r3, [pc, #212]	; (80059bc <MX_TIM2_Init+0x128>)
 80058e8:	2200      	movs	r2, #0
 80058ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80058ec:	4833      	ldr	r0, [pc, #204]	; (80059bc <MX_TIM2_Init+0x128>)
 80058ee:	f004 fd03 	bl	800a2f8 <HAL_TIM_Base_Init>
 80058f2:	4603      	mov	r3, r0
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d001      	beq.n	80058fc <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80058f8:	f7fe fab2 	bl	8003e60 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80058fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005900:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8005902:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005906:	4619      	mov	r1, r3
 8005908:	482c      	ldr	r0, [pc, #176]	; (80059bc <MX_TIM2_Init+0x128>)
 800590a:	f005 f8c7 	bl	800aa9c <HAL_TIM_ConfigClockSource>
 800590e:	4603      	mov	r3, r0
 8005910:	2b00      	cmp	r3, #0
 8005912:	d001      	beq.n	8005918 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8005914:	f7fe faa4 	bl	8003e60 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8005918:	4828      	ldr	r0, [pc, #160]	; (80059bc <MX_TIM2_Init+0x128>)
 800591a:	f004 fda1 	bl	800a460 <HAL_TIM_PWM_Init>
 800591e:	4603      	mov	r3, r0
 8005920:	2b00      	cmp	r3, #0
 8005922:	d001      	beq.n	8005928 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8005924:	f7fe fa9c 	bl	8003e60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005928:	2300      	movs	r3, #0
 800592a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800592c:	2300      	movs	r3, #0
 800592e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8005930:	f107 031c 	add.w	r3, r7, #28
 8005934:	4619      	mov	r1, r3
 8005936:	4821      	ldr	r0, [pc, #132]	; (80059bc <MX_TIM2_Init+0x128>)
 8005938:	f005 fd4e 	bl	800b3d8 <HAL_TIMEx_MasterConfigSynchronization>
 800593c:	4603      	mov	r3, r0
 800593e:	2b00      	cmp	r3, #0
 8005940:	d001      	beq.n	8005946 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8005942:	f7fe fa8d 	bl	8003e60 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005946:	2360      	movs	r3, #96	; 0x60
 8005948:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800594a:	2300      	movs	r3, #0
 800594c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800594e:	2300      	movs	r3, #0
 8005950:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005952:	2300      	movs	r3, #0
 8005954:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005956:	463b      	mov	r3, r7
 8005958:	2200      	movs	r2, #0
 800595a:	4619      	mov	r1, r3
 800595c:	4817      	ldr	r0, [pc, #92]	; (80059bc <MX_TIM2_Init+0x128>)
 800595e:	f004 ff89 	bl	800a874 <HAL_TIM_PWM_ConfigChannel>
 8005962:	4603      	mov	r3, r0
 8005964:	2b00      	cmp	r3, #0
 8005966:	d001      	beq.n	800596c <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8005968:	f7fe fa7a 	bl	8003e60 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800596c:	463b      	mov	r3, r7
 800596e:	2204      	movs	r2, #4
 8005970:	4619      	mov	r1, r3
 8005972:	4812      	ldr	r0, [pc, #72]	; (80059bc <MX_TIM2_Init+0x128>)
 8005974:	f004 ff7e 	bl	800a874 <HAL_TIM_PWM_ConfigChannel>
 8005978:	4603      	mov	r3, r0
 800597a:	2b00      	cmp	r3, #0
 800597c:	d001      	beq.n	8005982 <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 800597e:	f7fe fa6f 	bl	8003e60 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8005982:	463b      	mov	r3, r7
 8005984:	2208      	movs	r2, #8
 8005986:	4619      	mov	r1, r3
 8005988:	480c      	ldr	r0, [pc, #48]	; (80059bc <MX_TIM2_Init+0x128>)
 800598a:	f004 ff73 	bl	800a874 <HAL_TIM_PWM_ConfigChannel>
 800598e:	4603      	mov	r3, r0
 8005990:	2b00      	cmp	r3, #0
 8005992:	d001      	beq.n	8005998 <MX_TIM2_Init+0x104>
  {
    Error_Handler();
 8005994:	f7fe fa64 	bl	8003e60 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8005998:	463b      	mov	r3, r7
 800599a:	220c      	movs	r2, #12
 800599c:	4619      	mov	r1, r3
 800599e:	4807      	ldr	r0, [pc, #28]	; (80059bc <MX_TIM2_Init+0x128>)
 80059a0:	f004 ff68 	bl	800a874 <HAL_TIM_PWM_ConfigChannel>
 80059a4:	4603      	mov	r3, r0
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d001      	beq.n	80059ae <MX_TIM2_Init+0x11a>
  {
    Error_Handler();
 80059aa:	f7fe fa59 	bl	8003e60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80059ae:	4803      	ldr	r0, [pc, #12]	; (80059bc <MX_TIM2_Init+0x128>)
 80059b0:	f000 f8e4 	bl	8005b7c <HAL_TIM_MspPostInit>

}
 80059b4:	bf00      	nop
 80059b6:	3738      	adds	r7, #56	; 0x38
 80059b8:	46bd      	mov	sp, r7
 80059ba:	bd80      	pop	{r7, pc}
 80059bc:	20021ab0 	.word	0x20021ab0

080059c0 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80059c0:	b580      	push	{r7, lr}
 80059c2:	b08e      	sub	sp, #56	; 0x38
 80059c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80059c6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80059ca:	2200      	movs	r2, #0
 80059cc:	601a      	str	r2, [r3, #0]
 80059ce:	605a      	str	r2, [r3, #4]
 80059d0:	609a      	str	r2, [r3, #8]
 80059d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80059d4:	f107 031c 	add.w	r3, r7, #28
 80059d8:	2200      	movs	r2, #0
 80059da:	601a      	str	r2, [r3, #0]
 80059dc:	605a      	str	r2, [r3, #4]
 80059de:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80059e0:	463b      	mov	r3, r7
 80059e2:	2200      	movs	r2, #0
 80059e4:	601a      	str	r2, [r3, #0]
 80059e6:	605a      	str	r2, [r3, #4]
 80059e8:	609a      	str	r2, [r3, #8]
 80059ea:	60da      	str	r2, [r3, #12]
 80059ec:	611a      	str	r2, [r3, #16]
 80059ee:	615a      	str	r2, [r3, #20]
 80059f0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80059f2:	4b3d      	ldr	r3, [pc, #244]	; (8005ae8 <MX_TIM3_Init+0x128>)
 80059f4:	4a3d      	ldr	r2, [pc, #244]	; (8005aec <MX_TIM3_Init+0x12c>)
 80059f6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80059f8:	4b3b      	ldr	r3, [pc, #236]	; (8005ae8 <MX_TIM3_Init+0x128>)
 80059fa:	2200      	movs	r2, #0
 80059fc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80059fe:	4b3a      	ldr	r3, [pc, #232]	; (8005ae8 <MX_TIM3_Init+0x128>)
 8005a00:	2200      	movs	r2, #0
 8005a02:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 199;
 8005a04:	4b38      	ldr	r3, [pc, #224]	; (8005ae8 <MX_TIM3_Init+0x128>)
 8005a06:	22c7      	movs	r2, #199	; 0xc7
 8005a08:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005a0a:	4b37      	ldr	r3, [pc, #220]	; (8005ae8 <MX_TIM3_Init+0x128>)
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005a10:	4b35      	ldr	r3, [pc, #212]	; (8005ae8 <MX_TIM3_Init+0x128>)
 8005a12:	2200      	movs	r2, #0
 8005a14:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8005a16:	4834      	ldr	r0, [pc, #208]	; (8005ae8 <MX_TIM3_Init+0x128>)
 8005a18:	f004 fc6e 	bl	800a2f8 <HAL_TIM_Base_Init>
 8005a1c:	4603      	mov	r3, r0
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d001      	beq.n	8005a26 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8005a22:	f7fe fa1d 	bl	8003e60 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005a26:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005a2a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8005a2c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005a30:	4619      	mov	r1, r3
 8005a32:	482d      	ldr	r0, [pc, #180]	; (8005ae8 <MX_TIM3_Init+0x128>)
 8005a34:	f005 f832 	bl	800aa9c <HAL_TIM_ConfigClockSource>
 8005a38:	4603      	mov	r3, r0
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d001      	beq.n	8005a42 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8005a3e:	f7fe fa0f 	bl	8003e60 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8005a42:	4829      	ldr	r0, [pc, #164]	; (8005ae8 <MX_TIM3_Init+0x128>)
 8005a44:	f004 fd0c 	bl	800a460 <HAL_TIM_PWM_Init>
 8005a48:	4603      	mov	r3, r0
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d001      	beq.n	8005a52 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8005a4e:	f7fe fa07 	bl	8003e60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005a52:	2300      	movs	r3, #0
 8005a54:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005a56:	2300      	movs	r3, #0
 8005a58:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8005a5a:	f107 031c 	add.w	r3, r7, #28
 8005a5e:	4619      	mov	r1, r3
 8005a60:	4821      	ldr	r0, [pc, #132]	; (8005ae8 <MX_TIM3_Init+0x128>)
 8005a62:	f005 fcb9 	bl	800b3d8 <HAL_TIMEx_MasterConfigSynchronization>
 8005a66:	4603      	mov	r3, r0
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d001      	beq.n	8005a70 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8005a6c:	f7fe f9f8 	bl	8003e60 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005a70:	2360      	movs	r3, #96	; 0x60
 8005a72:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8005a74:	2300      	movs	r3, #0
 8005a76:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005a78:	2300      	movs	r3, #0
 8005a7a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005a7c:	2300      	movs	r3, #0
 8005a7e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005a80:	463b      	mov	r3, r7
 8005a82:	2200      	movs	r2, #0
 8005a84:	4619      	mov	r1, r3
 8005a86:	4818      	ldr	r0, [pc, #96]	; (8005ae8 <MX_TIM3_Init+0x128>)
 8005a88:	f004 fef4 	bl	800a874 <HAL_TIM_PWM_ConfigChannel>
 8005a8c:	4603      	mov	r3, r0
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d001      	beq.n	8005a96 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8005a92:	f7fe f9e5 	bl	8003e60 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8005a96:	463b      	mov	r3, r7
 8005a98:	2204      	movs	r2, #4
 8005a9a:	4619      	mov	r1, r3
 8005a9c:	4812      	ldr	r0, [pc, #72]	; (8005ae8 <MX_TIM3_Init+0x128>)
 8005a9e:	f004 fee9 	bl	800a874 <HAL_TIM_PWM_ConfigChannel>
 8005aa2:	4603      	mov	r3, r0
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d001      	beq.n	8005aac <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8005aa8:	f7fe f9da 	bl	8003e60 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8005aac:	463b      	mov	r3, r7
 8005aae:	2208      	movs	r2, #8
 8005ab0:	4619      	mov	r1, r3
 8005ab2:	480d      	ldr	r0, [pc, #52]	; (8005ae8 <MX_TIM3_Init+0x128>)
 8005ab4:	f004 fede 	bl	800a874 <HAL_TIM_PWM_ConfigChannel>
 8005ab8:	4603      	mov	r3, r0
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d001      	beq.n	8005ac2 <MX_TIM3_Init+0x102>
  {
    Error_Handler();
 8005abe:	f7fe f9cf 	bl	8003e60 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8005ac2:	463b      	mov	r3, r7
 8005ac4:	220c      	movs	r2, #12
 8005ac6:	4619      	mov	r1, r3
 8005ac8:	4807      	ldr	r0, [pc, #28]	; (8005ae8 <MX_TIM3_Init+0x128>)
 8005aca:	f004 fed3 	bl	800a874 <HAL_TIM_PWM_ConfigChannel>
 8005ace:	4603      	mov	r3, r0
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d001      	beq.n	8005ad8 <MX_TIM3_Init+0x118>
  {
    Error_Handler();
 8005ad4:	f7fe f9c4 	bl	8003e60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8005ad8:	4803      	ldr	r0, [pc, #12]	; (8005ae8 <MX_TIM3_Init+0x128>)
 8005ada:	f000 f84f 	bl	8005b7c <HAL_TIM_MspPostInit>

}
 8005ade:	bf00      	nop
 8005ae0:	3738      	adds	r7, #56	; 0x38
 8005ae2:	46bd      	mov	sp, r7
 8005ae4:	bd80      	pop	{r7, pc}
 8005ae6:	bf00      	nop
 8005ae8:	20021afc 	.word	0x20021afc
 8005aec:	40000400 	.word	0x40000400

08005af0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8005af0:	b480      	push	{r7}
 8005af2:	b087      	sub	sp, #28
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	4a1c      	ldr	r2, [pc, #112]	; (8005b70 <HAL_TIM_Base_MspInit+0x80>)
 8005afe:	4293      	cmp	r3, r2
 8005b00:	d10c      	bne.n	8005b1c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8005b02:	4b1c      	ldr	r3, [pc, #112]	; (8005b74 <HAL_TIM_Base_MspInit+0x84>)
 8005b04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b06:	4a1b      	ldr	r2, [pc, #108]	; (8005b74 <HAL_TIM_Base_MspInit+0x84>)
 8005b08:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005b0c:	6613      	str	r3, [r2, #96]	; 0x60
 8005b0e:	4b19      	ldr	r3, [pc, #100]	; (8005b74 <HAL_TIM_Base_MspInit+0x84>)
 8005b10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b12:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005b16:	617b      	str	r3, [r7, #20]
 8005b18:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8005b1a:	e022      	b.n	8005b62 <HAL_TIM_Base_MspInit+0x72>
  else if(tim_baseHandle->Instance==TIM2)
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b24:	d10c      	bne.n	8005b40 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005b26:	4b13      	ldr	r3, [pc, #76]	; (8005b74 <HAL_TIM_Base_MspInit+0x84>)
 8005b28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b2a:	4a12      	ldr	r2, [pc, #72]	; (8005b74 <HAL_TIM_Base_MspInit+0x84>)
 8005b2c:	f043 0301 	orr.w	r3, r3, #1
 8005b30:	6593      	str	r3, [r2, #88]	; 0x58
 8005b32:	4b10      	ldr	r3, [pc, #64]	; (8005b74 <HAL_TIM_Base_MspInit+0x84>)
 8005b34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b36:	f003 0301 	and.w	r3, r3, #1
 8005b3a:	613b      	str	r3, [r7, #16]
 8005b3c:	693b      	ldr	r3, [r7, #16]
}
 8005b3e:	e010      	b.n	8005b62 <HAL_TIM_Base_MspInit+0x72>
  else if(tim_baseHandle->Instance==TIM3)
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	4a0c      	ldr	r2, [pc, #48]	; (8005b78 <HAL_TIM_Base_MspInit+0x88>)
 8005b46:	4293      	cmp	r3, r2
 8005b48:	d10b      	bne.n	8005b62 <HAL_TIM_Base_MspInit+0x72>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005b4a:	4b0a      	ldr	r3, [pc, #40]	; (8005b74 <HAL_TIM_Base_MspInit+0x84>)
 8005b4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b4e:	4a09      	ldr	r2, [pc, #36]	; (8005b74 <HAL_TIM_Base_MspInit+0x84>)
 8005b50:	f043 0302 	orr.w	r3, r3, #2
 8005b54:	6593      	str	r3, [r2, #88]	; 0x58
 8005b56:	4b07      	ldr	r3, [pc, #28]	; (8005b74 <HAL_TIM_Base_MspInit+0x84>)
 8005b58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b5a:	f003 0302 	and.w	r3, r3, #2
 8005b5e:	60fb      	str	r3, [r7, #12]
 8005b60:	68fb      	ldr	r3, [r7, #12]
}
 8005b62:	bf00      	nop
 8005b64:	371c      	adds	r7, #28
 8005b66:	46bd      	mov	sp, r7
 8005b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6c:	4770      	bx	lr
 8005b6e:	bf00      	nop
 8005b70:	40012c00 	.word	0x40012c00
 8005b74:	40021000 	.word	0x40021000
 8005b78:	40000400 	.word	0x40000400

08005b7c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8005b7c:	b580      	push	{r7, lr}
 8005b7e:	b08c      	sub	sp, #48	; 0x30
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005b84:	f107 031c 	add.w	r3, r7, #28
 8005b88:	2200      	movs	r2, #0
 8005b8a:	601a      	str	r2, [r3, #0]
 8005b8c:	605a      	str	r2, [r3, #4]
 8005b8e:	609a      	str	r2, [r3, #8]
 8005b90:	60da      	str	r2, [r3, #12]
 8005b92:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	4a52      	ldr	r2, [pc, #328]	; (8005ce4 <HAL_TIM_MspPostInit+0x168>)
 8005b9a:	4293      	cmp	r3, r2
 8005b9c:	d11e      	bne.n	8005bdc <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005b9e:	4b52      	ldr	r3, [pc, #328]	; (8005ce8 <HAL_TIM_MspPostInit+0x16c>)
 8005ba0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ba2:	4a51      	ldr	r2, [pc, #324]	; (8005ce8 <HAL_TIM_MspPostInit+0x16c>)
 8005ba4:	f043 0301 	orr.w	r3, r3, #1
 8005ba8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005baa:	4b4f      	ldr	r3, [pc, #316]	; (8005ce8 <HAL_TIM_MspPostInit+0x16c>)
 8005bac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005bae:	f003 0301 	and.w	r3, r3, #1
 8005bb2:	61bb      	str	r3, [r7, #24]
 8005bb4:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8005bb6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8005bba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005bbc:	2302      	movs	r3, #2
 8005bbe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005bc0:	2300      	movs	r3, #0
 8005bc2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005bc4:	2300      	movs	r3, #0
 8005bc6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8005bc8:	2301      	movs	r3, #1
 8005bca:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005bcc:	f107 031c 	add.w	r3, r7, #28
 8005bd0:	4619      	mov	r1, r3
 8005bd2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005bd6:	f002 f8c1 	bl	8007d5c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8005bda:	e07e      	b.n	8005cda <HAL_TIM_MspPostInit+0x15e>
  else if(timHandle->Instance==TIM2)
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005be4:	d13a      	bne.n	8005c5c <HAL_TIM_MspPostInit+0xe0>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005be6:	4b40      	ldr	r3, [pc, #256]	; (8005ce8 <HAL_TIM_MspPostInit+0x16c>)
 8005be8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005bea:	4a3f      	ldr	r2, [pc, #252]	; (8005ce8 <HAL_TIM_MspPostInit+0x16c>)
 8005bec:	f043 0301 	orr.w	r3, r3, #1
 8005bf0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005bf2:	4b3d      	ldr	r3, [pc, #244]	; (8005ce8 <HAL_TIM_MspPostInit+0x16c>)
 8005bf4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005bf6:	f003 0301 	and.w	r3, r3, #1
 8005bfa:	617b      	str	r3, [r7, #20]
 8005bfc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005bfe:	4b3a      	ldr	r3, [pc, #232]	; (8005ce8 <HAL_TIM_MspPostInit+0x16c>)
 8005c00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c02:	4a39      	ldr	r2, [pc, #228]	; (8005ce8 <HAL_TIM_MspPostInit+0x16c>)
 8005c04:	f043 0302 	orr.w	r3, r3, #2
 8005c08:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005c0a:	4b37      	ldr	r3, [pc, #220]	; (8005ce8 <HAL_TIM_MspPostInit+0x16c>)
 8005c0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c0e:	f003 0302 	and.w	r3, r3, #2
 8005c12:	613b      	str	r3, [r7, #16]
 8005c14:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8005c16:	2303      	movs	r3, #3
 8005c18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005c1a:	2302      	movs	r3, #2
 8005c1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c1e:	2300      	movs	r3, #0
 8005c20:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005c22:	2300      	movs	r3, #0
 8005c24:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8005c26:	2301      	movs	r3, #1
 8005c28:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005c2a:	f107 031c 	add.w	r3, r7, #28
 8005c2e:	4619      	mov	r1, r3
 8005c30:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005c34:	f002 f892 	bl	8007d5c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8005c38:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8005c3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005c3e:	2302      	movs	r3, #2
 8005c40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c42:	2300      	movs	r3, #0
 8005c44:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005c46:	2300      	movs	r3, #0
 8005c48:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8005c4a:	2301      	movs	r3, #1
 8005c4c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005c4e:	f107 031c 	add.w	r3, r7, #28
 8005c52:	4619      	mov	r1, r3
 8005c54:	4825      	ldr	r0, [pc, #148]	; (8005cec <HAL_TIM_MspPostInit+0x170>)
 8005c56:	f002 f881 	bl	8007d5c <HAL_GPIO_Init>
}
 8005c5a:	e03e      	b.n	8005cda <HAL_TIM_MspPostInit+0x15e>
  else if(timHandle->Instance==TIM3)
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	4a23      	ldr	r2, [pc, #140]	; (8005cf0 <HAL_TIM_MspPostInit+0x174>)
 8005c62:	4293      	cmp	r3, r2
 8005c64:	d139      	bne.n	8005cda <HAL_TIM_MspPostInit+0x15e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005c66:	4b20      	ldr	r3, [pc, #128]	; (8005ce8 <HAL_TIM_MspPostInit+0x16c>)
 8005c68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c6a:	4a1f      	ldr	r2, [pc, #124]	; (8005ce8 <HAL_TIM_MspPostInit+0x16c>)
 8005c6c:	f043 0301 	orr.w	r3, r3, #1
 8005c70:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005c72:	4b1d      	ldr	r3, [pc, #116]	; (8005ce8 <HAL_TIM_MspPostInit+0x16c>)
 8005c74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c76:	f003 0301 	and.w	r3, r3, #1
 8005c7a:	60fb      	str	r3, [r7, #12]
 8005c7c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005c7e:	4b1a      	ldr	r3, [pc, #104]	; (8005ce8 <HAL_TIM_MspPostInit+0x16c>)
 8005c80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c82:	4a19      	ldr	r2, [pc, #100]	; (8005ce8 <HAL_TIM_MspPostInit+0x16c>)
 8005c84:	f043 0304 	orr.w	r3, r3, #4
 8005c88:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005c8a:	4b17      	ldr	r3, [pc, #92]	; (8005ce8 <HAL_TIM_MspPostInit+0x16c>)
 8005c8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c8e:	f003 0304 	and.w	r3, r3, #4
 8005c92:	60bb      	str	r3, [r7, #8]
 8005c94:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005c96:	23c0      	movs	r3, #192	; 0xc0
 8005c98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005c9a:	2302      	movs	r3, #2
 8005c9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c9e:	2300      	movs	r3, #0
 8005ca0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005ca2:	2300      	movs	r3, #0
 8005ca4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8005ca6:	2302      	movs	r3, #2
 8005ca8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005caa:	f107 031c 	add.w	r3, r7, #28
 8005cae:	4619      	mov	r1, r3
 8005cb0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005cb4:	f002 f852 	bl	8007d5c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8005cb8:	f44f 7340 	mov.w	r3, #768	; 0x300
 8005cbc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005cbe:	2302      	movs	r3, #2
 8005cc0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005cc2:	2300      	movs	r3, #0
 8005cc4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005cc6:	2300      	movs	r3, #0
 8005cc8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8005cca:	2302      	movs	r3, #2
 8005ccc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005cce:	f107 031c 	add.w	r3, r7, #28
 8005cd2:	4619      	mov	r1, r3
 8005cd4:	4807      	ldr	r0, [pc, #28]	; (8005cf4 <HAL_TIM_MspPostInit+0x178>)
 8005cd6:	f002 f841 	bl	8007d5c <HAL_GPIO_Init>
}
 8005cda:	bf00      	nop
 8005cdc:	3730      	adds	r7, #48	; 0x30
 8005cde:	46bd      	mov	sp, r7
 8005ce0:	bd80      	pop	{r7, pc}
 8005ce2:	bf00      	nop
 8005ce4:	40012c00 	.word	0x40012c00
 8005ce8:	40021000 	.word	0x40021000
 8005cec:	48000400 	.word	0x48000400
 8005cf0:	40000400 	.word	0x40000400
 8005cf4:	48000800 	.word	0x48000800

08005cf8 <MX_UART4_Init>:
UART_HandleTypeDef huart2;
UART_HandleTypeDef huart3;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8005cf8:	b580      	push	{r7, lr}
 8005cfa:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8005cfc:	4b14      	ldr	r3, [pc, #80]	; (8005d50 <MX_UART4_Init+0x58>)
 8005cfe:	4a15      	ldr	r2, [pc, #84]	; (8005d54 <MX_UART4_Init+0x5c>)
 8005d00:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8005d02:	4b13      	ldr	r3, [pc, #76]	; (8005d50 <MX_UART4_Init+0x58>)
 8005d04:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005d08:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8005d0a:	4b11      	ldr	r3, [pc, #68]	; (8005d50 <MX_UART4_Init+0x58>)
 8005d0c:	2200      	movs	r2, #0
 8005d0e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8005d10:	4b0f      	ldr	r3, [pc, #60]	; (8005d50 <MX_UART4_Init+0x58>)
 8005d12:	2200      	movs	r2, #0
 8005d14:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8005d16:	4b0e      	ldr	r3, [pc, #56]	; (8005d50 <MX_UART4_Init+0x58>)
 8005d18:	2200      	movs	r2, #0
 8005d1a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8005d1c:	4b0c      	ldr	r3, [pc, #48]	; (8005d50 <MX_UART4_Init+0x58>)
 8005d1e:	220c      	movs	r2, #12
 8005d20:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8005d22:	4b0b      	ldr	r3, [pc, #44]	; (8005d50 <MX_UART4_Init+0x58>)
 8005d24:	f44f 7240 	mov.w	r2, #768	; 0x300
 8005d28:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8005d2a:	4b09      	ldr	r3, [pc, #36]	; (8005d50 <MX_UART4_Init+0x58>)
 8005d2c:	2200      	movs	r2, #0
 8005d2e:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005d30:	4b07      	ldr	r3, [pc, #28]	; (8005d50 <MX_UART4_Init+0x58>)
 8005d32:	2200      	movs	r2, #0
 8005d34:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005d36:	4b06      	ldr	r3, [pc, #24]	; (8005d50 <MX_UART4_Init+0x58>)
 8005d38:	2200      	movs	r2, #0
 8005d3a:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8005d3c:	4804      	ldr	r0, [pc, #16]	; (8005d50 <MX_UART4_Init+0x58>)
 8005d3e:	f005 fc4f 	bl	800b5e0 <HAL_UART_Init>
 8005d42:	4603      	mov	r3, r0
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d001      	beq.n	8005d4c <MX_UART4_Init+0x54>
  {
    Error_Handler();
 8005d48:	f7fe f88a 	bl	8003e60 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8005d4c:	bf00      	nop
 8005d4e:	bd80      	pop	{r7, pc}
 8005d50:	20021b48 	.word	0x20021b48
 8005d54:	40004c00 	.word	0x40004c00

08005d58 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8005d58:	b580      	push	{r7, lr}
 8005d5a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8005d5c:	4b14      	ldr	r3, [pc, #80]	; (8005db0 <MX_USART1_UART_Init+0x58>)
 8005d5e:	4a15      	ldr	r2, [pc, #84]	; (8005db4 <MX_USART1_UART_Init+0x5c>)
 8005d60:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8005d62:	4b13      	ldr	r3, [pc, #76]	; (8005db0 <MX_USART1_UART_Init+0x58>)
 8005d64:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005d68:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8005d6a:	4b11      	ldr	r3, [pc, #68]	; (8005db0 <MX_USART1_UART_Init+0x58>)
 8005d6c:	2200      	movs	r2, #0
 8005d6e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8005d70:	4b0f      	ldr	r3, [pc, #60]	; (8005db0 <MX_USART1_UART_Init+0x58>)
 8005d72:	2200      	movs	r2, #0
 8005d74:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8005d76:	4b0e      	ldr	r3, [pc, #56]	; (8005db0 <MX_USART1_UART_Init+0x58>)
 8005d78:	2200      	movs	r2, #0
 8005d7a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8005d7c:	4b0c      	ldr	r3, [pc, #48]	; (8005db0 <MX_USART1_UART_Init+0x58>)
 8005d7e:	220c      	movs	r2, #12
 8005d80:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005d82:	4b0b      	ldr	r3, [pc, #44]	; (8005db0 <MX_USART1_UART_Init+0x58>)
 8005d84:	2200      	movs	r2, #0
 8005d86:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8005d88:	4b09      	ldr	r3, [pc, #36]	; (8005db0 <MX_USART1_UART_Init+0x58>)
 8005d8a:	2200      	movs	r2, #0
 8005d8c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005d8e:	4b08      	ldr	r3, [pc, #32]	; (8005db0 <MX_USART1_UART_Init+0x58>)
 8005d90:	2200      	movs	r2, #0
 8005d92:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005d94:	4b06      	ldr	r3, [pc, #24]	; (8005db0 <MX_USART1_UART_Init+0x58>)
 8005d96:	2200      	movs	r2, #0
 8005d98:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8005d9a:	4805      	ldr	r0, [pc, #20]	; (8005db0 <MX_USART1_UART_Init+0x58>)
 8005d9c:	f005 fc20 	bl	800b5e0 <HAL_UART_Init>
 8005da0:	4603      	mov	r3, r0
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d001      	beq.n	8005daa <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8005da6:	f7fe f85b 	bl	8003e60 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8005daa:	bf00      	nop
 8005dac:	bd80      	pop	{r7, pc}
 8005dae:	bf00      	nop
 8005db0:	20021bcc 	.word	0x20021bcc
 8005db4:	40013800 	.word	0x40013800

08005db8 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8005db8:	b580      	push	{r7, lr}
 8005dba:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8005dbc:	4b14      	ldr	r3, [pc, #80]	; (8005e10 <MX_USART2_UART_Init+0x58>)
 8005dbe:	4a15      	ldr	r2, [pc, #84]	; (8005e14 <MX_USART2_UART_Init+0x5c>)
 8005dc0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8005dc2:	4b13      	ldr	r3, [pc, #76]	; (8005e10 <MX_USART2_UART_Init+0x58>)
 8005dc4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005dc8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8005dca:	4b11      	ldr	r3, [pc, #68]	; (8005e10 <MX_USART2_UART_Init+0x58>)
 8005dcc:	2200      	movs	r2, #0
 8005dce:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8005dd0:	4b0f      	ldr	r3, [pc, #60]	; (8005e10 <MX_USART2_UART_Init+0x58>)
 8005dd2:	2200      	movs	r2, #0
 8005dd4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8005dd6:	4b0e      	ldr	r3, [pc, #56]	; (8005e10 <MX_USART2_UART_Init+0x58>)
 8005dd8:	2200      	movs	r2, #0
 8005dda:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8005ddc:	4b0c      	ldr	r3, [pc, #48]	; (8005e10 <MX_USART2_UART_Init+0x58>)
 8005dde:	220c      	movs	r2, #12
 8005de0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005de2:	4b0b      	ldr	r3, [pc, #44]	; (8005e10 <MX_USART2_UART_Init+0x58>)
 8005de4:	2200      	movs	r2, #0
 8005de6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8005de8:	4b09      	ldr	r3, [pc, #36]	; (8005e10 <MX_USART2_UART_Init+0x58>)
 8005dea:	2200      	movs	r2, #0
 8005dec:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005dee:	4b08      	ldr	r3, [pc, #32]	; (8005e10 <MX_USART2_UART_Init+0x58>)
 8005df0:	2200      	movs	r2, #0
 8005df2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005df4:	4b06      	ldr	r3, [pc, #24]	; (8005e10 <MX_USART2_UART_Init+0x58>)
 8005df6:	2200      	movs	r2, #0
 8005df8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8005dfa:	4805      	ldr	r0, [pc, #20]	; (8005e10 <MX_USART2_UART_Init+0x58>)
 8005dfc:	f005 fbf0 	bl	800b5e0 <HAL_UART_Init>
 8005e00:	4603      	mov	r3, r0
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d001      	beq.n	8005e0a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8005e06:	f7fe f82b 	bl	8003e60 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8005e0a:	bf00      	nop
 8005e0c:	bd80      	pop	{r7, pc}
 8005e0e:	bf00      	nop
 8005e10:	20021c50 	.word	0x20021c50
 8005e14:	40004400 	.word	0x40004400

08005e18 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8005e18:	b580      	push	{r7, lr}
 8005e1a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8005e1c:	4b14      	ldr	r3, [pc, #80]	; (8005e70 <MX_USART3_UART_Init+0x58>)
 8005e1e:	4a15      	ldr	r2, [pc, #84]	; (8005e74 <MX_USART3_UART_Init+0x5c>)
 8005e20:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8005e22:	4b13      	ldr	r3, [pc, #76]	; (8005e70 <MX_USART3_UART_Init+0x58>)
 8005e24:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005e28:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8005e2a:	4b11      	ldr	r3, [pc, #68]	; (8005e70 <MX_USART3_UART_Init+0x58>)
 8005e2c:	2200      	movs	r2, #0
 8005e2e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8005e30:	4b0f      	ldr	r3, [pc, #60]	; (8005e70 <MX_USART3_UART_Init+0x58>)
 8005e32:	2200      	movs	r2, #0
 8005e34:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8005e36:	4b0e      	ldr	r3, [pc, #56]	; (8005e70 <MX_USART3_UART_Init+0x58>)
 8005e38:	2200      	movs	r2, #0
 8005e3a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8005e3c:	4b0c      	ldr	r3, [pc, #48]	; (8005e70 <MX_USART3_UART_Init+0x58>)
 8005e3e:	220c      	movs	r2, #12
 8005e40:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005e42:	4b0b      	ldr	r3, [pc, #44]	; (8005e70 <MX_USART3_UART_Init+0x58>)
 8005e44:	2200      	movs	r2, #0
 8005e46:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8005e48:	4b09      	ldr	r3, [pc, #36]	; (8005e70 <MX_USART3_UART_Init+0x58>)
 8005e4a:	2200      	movs	r2, #0
 8005e4c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005e4e:	4b08      	ldr	r3, [pc, #32]	; (8005e70 <MX_USART3_UART_Init+0x58>)
 8005e50:	2200      	movs	r2, #0
 8005e52:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005e54:	4b06      	ldr	r3, [pc, #24]	; (8005e70 <MX_USART3_UART_Init+0x58>)
 8005e56:	2200      	movs	r2, #0
 8005e58:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8005e5a:	4805      	ldr	r0, [pc, #20]	; (8005e70 <MX_USART3_UART_Init+0x58>)
 8005e5c:	f005 fbc0 	bl	800b5e0 <HAL_UART_Init>
 8005e60:	4603      	mov	r3, r0
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d001      	beq.n	8005e6a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8005e66:	f7fd fffb 	bl	8003e60 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8005e6a:	bf00      	nop
 8005e6c:	bd80      	pop	{r7, pc}
 8005e6e:	bf00      	nop
 8005e70:	20021cd4 	.word	0x20021cd4
 8005e74:	40004800 	.word	0x40004800

08005e78 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	b0ac      	sub	sp, #176	; 0xb0
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005e80:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8005e84:	2200      	movs	r2, #0
 8005e86:	601a      	str	r2, [r3, #0]
 8005e88:	605a      	str	r2, [r3, #4]
 8005e8a:	609a      	str	r2, [r3, #8]
 8005e8c:	60da      	str	r2, [r3, #12]
 8005e8e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005e90:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8005e94:	2268      	movs	r2, #104	; 0x68
 8005e96:	2100      	movs	r1, #0
 8005e98:	4618      	mov	r0, r3
 8005e9a:	f009 fb8d 	bl	800f5b8 <memset>
  if(uartHandle->Instance==UART4)
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	4aa1      	ldr	r2, [pc, #644]	; (8006128 <HAL_UART_MspInit+0x2b0>)
 8005ea4:	4293      	cmp	r3, r2
 8005ea6:	f040 8089 	bne.w	8005fbc <HAL_UART_MspInit+0x144>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8005eaa:	2308      	movs	r3, #8
 8005eac:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8005eae:	2300      	movs	r3, #0
 8005eb0:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005eb2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	f002 ffb0 	bl	8008e1c <HAL_RCCEx_PeriphCLKConfig>
 8005ebc:	4603      	mov	r3, r0
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d001      	beq.n	8005ec6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8005ec2:	f7fd ffcd 	bl	8003e60 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8005ec6:	4b99      	ldr	r3, [pc, #612]	; (800612c <HAL_UART_MspInit+0x2b4>)
 8005ec8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005eca:	4a98      	ldr	r2, [pc, #608]	; (800612c <HAL_UART_MspInit+0x2b4>)
 8005ecc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005ed0:	6593      	str	r3, [r2, #88]	; 0x58
 8005ed2:	4b96      	ldr	r3, [pc, #600]	; (800612c <HAL_UART_MspInit+0x2b4>)
 8005ed4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ed6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005eda:	633b      	str	r3, [r7, #48]	; 0x30
 8005edc:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005ede:	4b93      	ldr	r3, [pc, #588]	; (800612c <HAL_UART_MspInit+0x2b4>)
 8005ee0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ee2:	4a92      	ldr	r2, [pc, #584]	; (800612c <HAL_UART_MspInit+0x2b4>)
 8005ee4:	f043 0301 	orr.w	r3, r3, #1
 8005ee8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005eea:	4b90      	ldr	r3, [pc, #576]	; (800612c <HAL_UART_MspInit+0x2b4>)
 8005eec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005eee:	f003 0301 	and.w	r3, r3, #1
 8005ef2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005ef4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005ef6:	4b8d      	ldr	r3, [pc, #564]	; (800612c <HAL_UART_MspInit+0x2b4>)
 8005ef8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005efa:	4a8c      	ldr	r2, [pc, #560]	; (800612c <HAL_UART_MspInit+0x2b4>)
 8005efc:	f043 0304 	orr.w	r3, r3, #4
 8005f00:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005f02:	4b8a      	ldr	r3, [pc, #552]	; (800612c <HAL_UART_MspInit+0x2b4>)
 8005f04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f06:	f003 0304 	and.w	r3, r3, #4
 8005f0a:	62bb      	str	r3, [r7, #40]	; 0x28
 8005f0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005f0e:	4b87      	ldr	r3, [pc, #540]	; (800612c <HAL_UART_MspInit+0x2b4>)
 8005f10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f12:	4a86      	ldr	r2, [pc, #536]	; (800612c <HAL_UART_MspInit+0x2b4>)
 8005f14:	f043 0302 	orr.w	r3, r3, #2
 8005f18:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005f1a:	4b84      	ldr	r3, [pc, #528]	; (800612c <HAL_UART_MspInit+0x2b4>)
 8005f1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f1e:	f003 0302 	and.w	r3, r3, #2
 8005f22:	627b      	str	r3, [r7, #36]	; 0x24
 8005f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    PA15 (JTDI)     ------> UART4_RTS
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    PB7     ------> UART4_CTS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8005f26:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005f2a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005f2e:	2302      	movs	r3, #2
 8005f30:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f34:	2300      	movs	r3, #0
 8005f36:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005f3a:	2303      	movs	r3, #3
 8005f3c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8005f40:	2308      	movs	r3, #8
 8005f42:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005f46:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8005f4a:	4619      	mov	r1, r3
 8005f4c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005f50:	f001 ff04 	bl	8007d5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8005f54:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8005f58:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005f5c:	2302      	movs	r3, #2
 8005f5e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f62:	2300      	movs	r3, #0
 8005f64:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005f68:	2303      	movs	r3, #3
 8005f6a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8005f6e:	2308      	movs	r3, #8
 8005f70:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005f74:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8005f78:	4619      	mov	r1, r3
 8005f7a:	486d      	ldr	r0, [pc, #436]	; (8006130 <HAL_UART_MspInit+0x2b8>)
 8005f7c:	f001 feee 	bl	8007d5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8005f80:	2380      	movs	r3, #128	; 0x80
 8005f82:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005f86:	2302      	movs	r3, #2
 8005f88:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f8c:	2300      	movs	r3, #0
 8005f8e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005f92:	2303      	movs	r3, #3
 8005f94:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8005f98:	2308      	movs	r3, #8
 8005f9a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005f9e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8005fa2:	4619      	mov	r1, r3
 8005fa4:	4863      	ldr	r0, [pc, #396]	; (8006134 <HAL_UART_MspInit+0x2bc>)
 8005fa6:	f001 fed9 	bl	8007d5c <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 8005faa:	2200      	movs	r2, #0
 8005fac:	2105      	movs	r1, #5
 8005fae:	2034      	movs	r0, #52	; 0x34
 8005fb0:	f001 fe2a 	bl	8007c08 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8005fb4:	2034      	movs	r0, #52	; 0x34
 8005fb6:	f001 fe43 	bl	8007c40 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8005fba:	e109      	b.n	80061d0 <HAL_UART_MspInit+0x358>
  else if(uartHandle->Instance==USART1)
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	4a5d      	ldr	r2, [pc, #372]	; (8006138 <HAL_UART_MspInit+0x2c0>)
 8005fc2:	4293      	cmp	r3, r2
 8005fc4:	d166      	bne.n	8006094 <HAL_UART_MspInit+0x21c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8005fc6:	2301      	movs	r3, #1
 8005fc8:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8005fca:	2300      	movs	r3, #0
 8005fcc:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005fce:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8005fd2:	4618      	mov	r0, r3
 8005fd4:	f002 ff22 	bl	8008e1c <HAL_RCCEx_PeriphCLKConfig>
 8005fd8:	4603      	mov	r3, r0
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d001      	beq.n	8005fe2 <HAL_UART_MspInit+0x16a>
      Error_Handler();
 8005fde:	f7fd ff3f 	bl	8003e60 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8005fe2:	4b52      	ldr	r3, [pc, #328]	; (800612c <HAL_UART_MspInit+0x2b4>)
 8005fe4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005fe6:	4a51      	ldr	r2, [pc, #324]	; (800612c <HAL_UART_MspInit+0x2b4>)
 8005fe8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005fec:	6613      	str	r3, [r2, #96]	; 0x60
 8005fee:	4b4f      	ldr	r3, [pc, #316]	; (800612c <HAL_UART_MspInit+0x2b4>)
 8005ff0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ff2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005ff6:	623b      	str	r3, [r7, #32]
 8005ff8:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005ffa:	4b4c      	ldr	r3, [pc, #304]	; (800612c <HAL_UART_MspInit+0x2b4>)
 8005ffc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ffe:	4a4b      	ldr	r2, [pc, #300]	; (800612c <HAL_UART_MspInit+0x2b4>)
 8006000:	f043 0301 	orr.w	r3, r3, #1
 8006004:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006006:	4b49      	ldr	r3, [pc, #292]	; (800612c <HAL_UART_MspInit+0x2b4>)
 8006008:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800600a:	f003 0301 	and.w	r3, r3, #1
 800600e:	61fb      	str	r3, [r7, #28]
 8006010:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006012:	4b46      	ldr	r3, [pc, #280]	; (800612c <HAL_UART_MspInit+0x2b4>)
 8006014:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006016:	4a45      	ldr	r2, [pc, #276]	; (800612c <HAL_UART_MspInit+0x2b4>)
 8006018:	f043 0302 	orr.w	r3, r3, #2
 800601c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800601e:	4b43      	ldr	r3, [pc, #268]	; (800612c <HAL_UART_MspInit+0x2b4>)
 8006020:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006022:	f003 0302 	and.w	r3, r3, #2
 8006026:	61bb      	str	r3, [r7, #24]
 8006028:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800602a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800602e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006032:	2302      	movs	r3, #2
 8006034:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006038:	2300      	movs	r3, #0
 800603a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800603e:	2303      	movs	r3, #3
 8006040:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8006044:	2307      	movs	r3, #7
 8006046:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800604a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800604e:	4619      	mov	r1, r3
 8006050:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006054:	f001 fe82 	bl	8007d5c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8006058:	2340      	movs	r3, #64	; 0x40
 800605a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800605e:	2302      	movs	r3, #2
 8006060:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006064:	2300      	movs	r3, #0
 8006066:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800606a:	2303      	movs	r3, #3
 800606c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8006070:	2307      	movs	r3, #7
 8006072:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006076:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800607a:	4619      	mov	r1, r3
 800607c:	482d      	ldr	r0, [pc, #180]	; (8006134 <HAL_UART_MspInit+0x2bc>)
 800607e:	f001 fe6d 	bl	8007d5c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8006082:	2200      	movs	r2, #0
 8006084:	2105      	movs	r1, #5
 8006086:	2025      	movs	r0, #37	; 0x25
 8006088:	f001 fdbe 	bl	8007c08 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800608c:	2025      	movs	r0, #37	; 0x25
 800608e:	f001 fdd7 	bl	8007c40 <HAL_NVIC_EnableIRQ>
}
 8006092:	e09d      	b.n	80061d0 <HAL_UART_MspInit+0x358>
  else if(uartHandle->Instance==USART2)
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	4a28      	ldr	r2, [pc, #160]	; (800613c <HAL_UART_MspInit+0x2c4>)
 800609a:	4293      	cmp	r3, r2
 800609c:	d150      	bne.n	8006140 <HAL_UART_MspInit+0x2c8>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800609e:	2302      	movs	r3, #2
 80060a0:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80060a2:	2300      	movs	r3, #0
 80060a4:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80060a6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80060aa:	4618      	mov	r0, r3
 80060ac:	f002 feb6 	bl	8008e1c <HAL_RCCEx_PeriphCLKConfig>
 80060b0:	4603      	mov	r3, r0
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d001      	beq.n	80060ba <HAL_UART_MspInit+0x242>
      Error_Handler();
 80060b6:	f7fd fed3 	bl	8003e60 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80060ba:	4b1c      	ldr	r3, [pc, #112]	; (800612c <HAL_UART_MspInit+0x2b4>)
 80060bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060be:	4a1b      	ldr	r2, [pc, #108]	; (800612c <HAL_UART_MspInit+0x2b4>)
 80060c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80060c4:	6593      	str	r3, [r2, #88]	; 0x58
 80060c6:	4b19      	ldr	r3, [pc, #100]	; (800612c <HAL_UART_MspInit+0x2b4>)
 80060c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060ce:	617b      	str	r3, [r7, #20]
 80060d0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80060d2:	4b16      	ldr	r3, [pc, #88]	; (800612c <HAL_UART_MspInit+0x2b4>)
 80060d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80060d6:	4a15      	ldr	r2, [pc, #84]	; (800612c <HAL_UART_MspInit+0x2b4>)
 80060d8:	f043 0301 	orr.w	r3, r3, #1
 80060dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80060de:	4b13      	ldr	r3, [pc, #76]	; (800612c <HAL_UART_MspInit+0x2b4>)
 80060e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80060e2:	f003 0301 	and.w	r3, r3, #1
 80060e6:	613b      	str	r3, [r7, #16]
 80060e8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80060ea:	230c      	movs	r3, #12
 80060ec:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80060f0:	2302      	movs	r3, #2
 80060f2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80060f6:	2300      	movs	r3, #0
 80060f8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80060fc:	2303      	movs	r3, #3
 80060fe:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8006102:	2307      	movs	r3, #7
 8006104:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006108:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800610c:	4619      	mov	r1, r3
 800610e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006112:	f001 fe23 	bl	8007d5c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8006116:	2200      	movs	r2, #0
 8006118:	2105      	movs	r1, #5
 800611a:	2026      	movs	r0, #38	; 0x26
 800611c:	f001 fd74 	bl	8007c08 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8006120:	2026      	movs	r0, #38	; 0x26
 8006122:	f001 fd8d 	bl	8007c40 <HAL_NVIC_EnableIRQ>
}
 8006126:	e053      	b.n	80061d0 <HAL_UART_MspInit+0x358>
 8006128:	40004c00 	.word	0x40004c00
 800612c:	40021000 	.word	0x40021000
 8006130:	48000800 	.word	0x48000800
 8006134:	48000400 	.word	0x48000400
 8006138:	40013800 	.word	0x40013800
 800613c:	40004400 	.word	0x40004400
  else if(uartHandle->Instance==USART3)
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	4a24      	ldr	r2, [pc, #144]	; (80061d8 <HAL_UART_MspInit+0x360>)
 8006146:	4293      	cmp	r3, r2
 8006148:	d142      	bne.n	80061d0 <HAL_UART_MspInit+0x358>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800614a:	2304      	movs	r3, #4
 800614c:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800614e:	2300      	movs	r3, #0
 8006150:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8006152:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8006156:	4618      	mov	r0, r3
 8006158:	f002 fe60 	bl	8008e1c <HAL_RCCEx_PeriphCLKConfig>
 800615c:	4603      	mov	r3, r0
 800615e:	2b00      	cmp	r3, #0
 8006160:	d001      	beq.n	8006166 <HAL_UART_MspInit+0x2ee>
      Error_Handler();
 8006162:	f7fd fe7d 	bl	8003e60 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8006166:	4b1d      	ldr	r3, [pc, #116]	; (80061dc <HAL_UART_MspInit+0x364>)
 8006168:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800616a:	4a1c      	ldr	r2, [pc, #112]	; (80061dc <HAL_UART_MspInit+0x364>)
 800616c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006170:	6593      	str	r3, [r2, #88]	; 0x58
 8006172:	4b1a      	ldr	r3, [pc, #104]	; (80061dc <HAL_UART_MspInit+0x364>)
 8006174:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006176:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800617a:	60fb      	str	r3, [r7, #12]
 800617c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800617e:	4b17      	ldr	r3, [pc, #92]	; (80061dc <HAL_UART_MspInit+0x364>)
 8006180:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006182:	4a16      	ldr	r2, [pc, #88]	; (80061dc <HAL_UART_MspInit+0x364>)
 8006184:	f043 0304 	orr.w	r3, r3, #4
 8006188:	64d3      	str	r3, [r2, #76]	; 0x4c
 800618a:	4b14      	ldr	r3, [pc, #80]	; (80061dc <HAL_UART_MspInit+0x364>)
 800618c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800618e:	f003 0304 	and.w	r3, r3, #4
 8006192:	60bb      	str	r3, [r7, #8]
 8006194:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8006196:	2330      	movs	r3, #48	; 0x30
 8006198:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800619c:	2302      	movs	r3, #2
 800619e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80061a2:	2300      	movs	r3, #0
 80061a4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80061a8:	2303      	movs	r3, #3
 80061aa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80061ae:	2307      	movs	r3, #7
 80061b0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80061b4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80061b8:	4619      	mov	r1, r3
 80061ba:	4809      	ldr	r0, [pc, #36]	; (80061e0 <HAL_UART_MspInit+0x368>)
 80061bc:	f001 fdce 	bl	8007d5c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 80061c0:	2200      	movs	r2, #0
 80061c2:	2105      	movs	r1, #5
 80061c4:	2027      	movs	r0, #39	; 0x27
 80061c6:	f001 fd1f 	bl	8007c08 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80061ca:	2027      	movs	r0, #39	; 0x27
 80061cc:	f001 fd38 	bl	8007c40 <HAL_NVIC_EnableIRQ>
}
 80061d0:	bf00      	nop
 80061d2:	37b0      	adds	r7, #176	; 0xb0
 80061d4:	46bd      	mov	sp, r7
 80061d6:	bd80      	pop	{r7, pc}
 80061d8:	40004800 	.word	0x40004800
 80061dc:	40021000 	.word	0x40021000
 80061e0:	48000800 	.word	0x48000800

080061e4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80061e4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800621c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80061e8:	f7ff fa8a 	bl	8005700 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80061ec:	480c      	ldr	r0, [pc, #48]	; (8006220 <LoopForever+0x6>)
  ldr r1, =_edata
 80061ee:	490d      	ldr	r1, [pc, #52]	; (8006224 <LoopForever+0xa>)
  ldr r2, =_sidata
 80061f0:	4a0d      	ldr	r2, [pc, #52]	; (8006228 <LoopForever+0xe>)
  movs r3, #0
 80061f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80061f4:	e002      	b.n	80061fc <LoopCopyDataInit>

080061f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80061f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80061f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80061fa:	3304      	adds	r3, #4

080061fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80061fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80061fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006200:	d3f9      	bcc.n	80061f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006202:	4a0a      	ldr	r2, [pc, #40]	; (800622c <LoopForever+0x12>)
  ldr r4, =_ebss
 8006204:	4c0a      	ldr	r4, [pc, #40]	; (8006230 <LoopForever+0x16>)
  movs r3, #0
 8006206:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006208:	e001      	b.n	800620e <LoopFillZerobss>

0800620a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800620a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800620c:	3204      	adds	r2, #4

0800620e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800620e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006210:	d3fb      	bcc.n	800620a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8006212:	f009 f98f 	bl	800f534 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8006216:	f7fd fd9f 	bl	8003d58 <main>

0800621a <LoopForever>:

LoopForever:
    b LoopForever
 800621a:	e7fe      	b.n	800621a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800621c:	20028000 	.word	0x20028000
  ldr r0, =_sdata
 8006220:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006224:	20000208 	.word	0x20000208
  ldr r2, =_sidata
 8006228:	08012e9c 	.word	0x08012e9c
  ldr r2, =_sbss
 800622c:	20000208 	.word	0x20000208
  ldr r4, =_ebss
 8006230:	20021fdc 	.word	0x20021fdc

08006234 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8006234:	e7fe      	b.n	8006234 <ADC1_IRQHandler>
	...

08006238 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006238:	b580      	push	{r7, lr}
 800623a:	b082      	sub	sp, #8
 800623c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800623e:	2300      	movs	r3, #0
 8006240:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006242:	4b0c      	ldr	r3, [pc, #48]	; (8006274 <HAL_Init+0x3c>)
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	4a0b      	ldr	r2, [pc, #44]	; (8006274 <HAL_Init+0x3c>)
 8006248:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800624c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800624e:	2003      	movs	r0, #3
 8006250:	f001 fccf 	bl	8007bf2 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8006254:	200f      	movs	r0, #15
 8006256:	f7ff f8cb 	bl	80053f0 <HAL_InitTick>
 800625a:	4603      	mov	r3, r0
 800625c:	2b00      	cmp	r3, #0
 800625e:	d002      	beq.n	8006266 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8006260:	2301      	movs	r3, #1
 8006262:	71fb      	strb	r3, [r7, #7]
 8006264:	e001      	b.n	800626a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8006266:	f7ff f89b 	bl	80053a0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800626a:	79fb      	ldrb	r3, [r7, #7]
}
 800626c:	4618      	mov	r0, r3
 800626e:	3708      	adds	r7, #8
 8006270:	46bd      	mov	sp, r7
 8006272:	bd80      	pop	{r7, pc}
 8006274:	40022000 	.word	0x40022000

08006278 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006278:	b480      	push	{r7}
 800627a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800627c:	4b06      	ldr	r3, [pc, #24]	; (8006298 <HAL_IncTick+0x20>)
 800627e:	781b      	ldrb	r3, [r3, #0]
 8006280:	461a      	mov	r2, r3
 8006282:	4b06      	ldr	r3, [pc, #24]	; (800629c <HAL_IncTick+0x24>)
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	4413      	add	r3, r2
 8006288:	4a04      	ldr	r2, [pc, #16]	; (800629c <HAL_IncTick+0x24>)
 800628a:	6013      	str	r3, [r2, #0]
}
 800628c:	bf00      	nop
 800628e:	46bd      	mov	sp, r7
 8006290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006294:	4770      	bx	lr
 8006296:	bf00      	nop
 8006298:	20000030 	.word	0x20000030
 800629c:	20021d58 	.word	0x20021d58

080062a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80062a0:	b480      	push	{r7}
 80062a2:	af00      	add	r7, sp, #0
  return uwTick;
 80062a4:	4b03      	ldr	r3, [pc, #12]	; (80062b4 <HAL_GetTick+0x14>)
 80062a6:	681b      	ldr	r3, [r3, #0]
}
 80062a8:	4618      	mov	r0, r3
 80062aa:	46bd      	mov	sp, r7
 80062ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b0:	4770      	bx	lr
 80062b2:	bf00      	nop
 80062b4:	20021d58 	.word	0x20021d58

080062b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80062b8:	b580      	push	{r7, lr}
 80062ba:	b084      	sub	sp, #16
 80062bc:	af00      	add	r7, sp, #0
 80062be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80062c0:	f7ff ffee 	bl	80062a0 <HAL_GetTick>
 80062c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062d0:	d005      	beq.n	80062de <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80062d2:	4b0a      	ldr	r3, [pc, #40]	; (80062fc <HAL_Delay+0x44>)
 80062d4:	781b      	ldrb	r3, [r3, #0]
 80062d6:	461a      	mov	r2, r3
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	4413      	add	r3, r2
 80062dc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80062de:	bf00      	nop
 80062e0:	f7ff ffde 	bl	80062a0 <HAL_GetTick>
 80062e4:	4602      	mov	r2, r0
 80062e6:	68bb      	ldr	r3, [r7, #8]
 80062e8:	1ad3      	subs	r3, r2, r3
 80062ea:	68fa      	ldr	r2, [r7, #12]
 80062ec:	429a      	cmp	r2, r3
 80062ee:	d8f7      	bhi.n	80062e0 <HAL_Delay+0x28>
  {
  }
}
 80062f0:	bf00      	nop
 80062f2:	bf00      	nop
 80062f4:	3710      	adds	r7, #16
 80062f6:	46bd      	mov	sp, r7
 80062f8:	bd80      	pop	{r7, pc}
 80062fa:	bf00      	nop
 80062fc:	20000030 	.word	0x20000030

08006300 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8006300:	b480      	push	{r7}
 8006302:	b083      	sub	sp, #12
 8006304:	af00      	add	r7, sp, #0
 8006306:	6078      	str	r0, [r7, #4]
 8006308:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	689b      	ldr	r3, [r3, #8]
 800630e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8006312:	683b      	ldr	r3, [r7, #0]
 8006314:	431a      	orrs	r2, r3
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	609a      	str	r2, [r3, #8]
}
 800631a:	bf00      	nop
 800631c:	370c      	adds	r7, #12
 800631e:	46bd      	mov	sp, r7
 8006320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006324:	4770      	bx	lr

08006326 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8006326:	b480      	push	{r7}
 8006328:	b083      	sub	sp, #12
 800632a:	af00      	add	r7, sp, #0
 800632c:	6078      	str	r0, [r7, #4]
 800632e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	689b      	ldr	r3, [r3, #8]
 8006334:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8006338:	683b      	ldr	r3, [r7, #0]
 800633a:	431a      	orrs	r2, r3
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	609a      	str	r2, [r3, #8]
}
 8006340:	bf00      	nop
 8006342:	370c      	adds	r7, #12
 8006344:	46bd      	mov	sp, r7
 8006346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634a:	4770      	bx	lr

0800634c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800634c:	b480      	push	{r7}
 800634e:	b083      	sub	sp, #12
 8006350:	af00      	add	r7, sp, #0
 8006352:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	689b      	ldr	r3, [r3, #8]
 8006358:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800635c:	4618      	mov	r0, r3
 800635e:	370c      	adds	r7, #12
 8006360:	46bd      	mov	sp, r7
 8006362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006366:	4770      	bx	lr

08006368 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8006368:	b480      	push	{r7}
 800636a:	b087      	sub	sp, #28
 800636c:	af00      	add	r7, sp, #0
 800636e:	60f8      	str	r0, [r7, #12]
 8006370:	60b9      	str	r1, [r7, #8]
 8006372:	607a      	str	r2, [r7, #4]
 8006374:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	3360      	adds	r3, #96	; 0x60
 800637a:	461a      	mov	r2, r3
 800637c:	68bb      	ldr	r3, [r7, #8]
 800637e:	009b      	lsls	r3, r3, #2
 8006380:	4413      	add	r3, r2
 8006382:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8006384:	697b      	ldr	r3, [r7, #20]
 8006386:	681a      	ldr	r2, [r3, #0]
 8006388:	4b08      	ldr	r3, [pc, #32]	; (80063ac <LL_ADC_SetOffset+0x44>)
 800638a:	4013      	ands	r3, r2
 800638c:	687a      	ldr	r2, [r7, #4]
 800638e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8006392:	683a      	ldr	r2, [r7, #0]
 8006394:	430a      	orrs	r2, r1
 8006396:	4313      	orrs	r3, r2
 8006398:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800639c:	697b      	ldr	r3, [r7, #20]
 800639e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80063a0:	bf00      	nop
 80063a2:	371c      	adds	r7, #28
 80063a4:	46bd      	mov	sp, r7
 80063a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063aa:	4770      	bx	lr
 80063ac:	03fff000 	.word	0x03fff000

080063b0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80063b0:	b480      	push	{r7}
 80063b2:	b085      	sub	sp, #20
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	6078      	str	r0, [r7, #4]
 80063b8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	3360      	adds	r3, #96	; 0x60
 80063be:	461a      	mov	r2, r3
 80063c0:	683b      	ldr	r3, [r7, #0]
 80063c2:	009b      	lsls	r3, r3, #2
 80063c4:	4413      	add	r3, r2
 80063c6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80063d0:	4618      	mov	r0, r3
 80063d2:	3714      	adds	r7, #20
 80063d4:	46bd      	mov	sp, r7
 80063d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063da:	4770      	bx	lr

080063dc <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80063dc:	b480      	push	{r7}
 80063de:	b087      	sub	sp, #28
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	60f8      	str	r0, [r7, #12]
 80063e4:	60b9      	str	r1, [r7, #8]
 80063e6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	3360      	adds	r3, #96	; 0x60
 80063ec:	461a      	mov	r2, r3
 80063ee:	68bb      	ldr	r3, [r7, #8]
 80063f0:	009b      	lsls	r3, r3, #2
 80063f2:	4413      	add	r3, r2
 80063f4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80063f6:	697b      	ldr	r3, [r7, #20]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	431a      	orrs	r2, r3
 8006402:	697b      	ldr	r3, [r7, #20]
 8006404:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8006406:	bf00      	nop
 8006408:	371c      	adds	r7, #28
 800640a:	46bd      	mov	sp, r7
 800640c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006410:	4770      	bx	lr

08006412 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8006412:	b480      	push	{r7}
 8006414:	b083      	sub	sp, #12
 8006416:	af00      	add	r7, sp, #0
 8006418:	6078      	str	r0, [r7, #4]
 800641a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	695b      	ldr	r3, [r3, #20]
 8006420:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006424:	683b      	ldr	r3, [r7, #0]
 8006426:	431a      	orrs	r2, r3
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	615a      	str	r2, [r3, #20]
}
 800642c:	bf00      	nop
 800642e:	370c      	adds	r7, #12
 8006430:	46bd      	mov	sp, r7
 8006432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006436:	4770      	bx	lr

08006438 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8006438:	b480      	push	{r7}
 800643a:	b083      	sub	sp, #12
 800643c:	af00      	add	r7, sp, #0
 800643e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	68db      	ldr	r3, [r3, #12]
 8006444:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006448:	2b00      	cmp	r3, #0
 800644a:	d101      	bne.n	8006450 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800644c:	2301      	movs	r3, #1
 800644e:	e000      	b.n	8006452 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8006450:	2300      	movs	r3, #0
}
 8006452:	4618      	mov	r0, r3
 8006454:	370c      	adds	r7, #12
 8006456:	46bd      	mov	sp, r7
 8006458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645c:	4770      	bx	lr

0800645e <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800645e:	b480      	push	{r7}
 8006460:	b087      	sub	sp, #28
 8006462:	af00      	add	r7, sp, #0
 8006464:	60f8      	str	r0, [r7, #12]
 8006466:	60b9      	str	r1, [r7, #8]
 8006468:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	3330      	adds	r3, #48	; 0x30
 800646e:	461a      	mov	r2, r3
 8006470:	68bb      	ldr	r3, [r7, #8]
 8006472:	0a1b      	lsrs	r3, r3, #8
 8006474:	009b      	lsls	r3, r3, #2
 8006476:	f003 030c 	and.w	r3, r3, #12
 800647a:	4413      	add	r3, r2
 800647c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800647e:	697b      	ldr	r3, [r7, #20]
 8006480:	681a      	ldr	r2, [r3, #0]
 8006482:	68bb      	ldr	r3, [r7, #8]
 8006484:	f003 031f 	and.w	r3, r3, #31
 8006488:	211f      	movs	r1, #31
 800648a:	fa01 f303 	lsl.w	r3, r1, r3
 800648e:	43db      	mvns	r3, r3
 8006490:	401a      	ands	r2, r3
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	0e9b      	lsrs	r3, r3, #26
 8006496:	f003 011f 	and.w	r1, r3, #31
 800649a:	68bb      	ldr	r3, [r7, #8]
 800649c:	f003 031f 	and.w	r3, r3, #31
 80064a0:	fa01 f303 	lsl.w	r3, r1, r3
 80064a4:	431a      	orrs	r2, r3
 80064a6:	697b      	ldr	r3, [r7, #20]
 80064a8:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80064aa:	bf00      	nop
 80064ac:	371c      	adds	r7, #28
 80064ae:	46bd      	mov	sp, r7
 80064b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b4:	4770      	bx	lr

080064b6 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80064b6:	b480      	push	{r7}
 80064b8:	b087      	sub	sp, #28
 80064ba:	af00      	add	r7, sp, #0
 80064bc:	60f8      	str	r0, [r7, #12]
 80064be:	60b9      	str	r1, [r7, #8]
 80064c0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	3314      	adds	r3, #20
 80064c6:	461a      	mov	r2, r3
 80064c8:	68bb      	ldr	r3, [r7, #8]
 80064ca:	0e5b      	lsrs	r3, r3, #25
 80064cc:	009b      	lsls	r3, r3, #2
 80064ce:	f003 0304 	and.w	r3, r3, #4
 80064d2:	4413      	add	r3, r2
 80064d4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80064d6:	697b      	ldr	r3, [r7, #20]
 80064d8:	681a      	ldr	r2, [r3, #0]
 80064da:	68bb      	ldr	r3, [r7, #8]
 80064dc:	0d1b      	lsrs	r3, r3, #20
 80064de:	f003 031f 	and.w	r3, r3, #31
 80064e2:	2107      	movs	r1, #7
 80064e4:	fa01 f303 	lsl.w	r3, r1, r3
 80064e8:	43db      	mvns	r3, r3
 80064ea:	401a      	ands	r2, r3
 80064ec:	68bb      	ldr	r3, [r7, #8]
 80064ee:	0d1b      	lsrs	r3, r3, #20
 80064f0:	f003 031f 	and.w	r3, r3, #31
 80064f4:	6879      	ldr	r1, [r7, #4]
 80064f6:	fa01 f303 	lsl.w	r3, r1, r3
 80064fa:	431a      	orrs	r2, r3
 80064fc:	697b      	ldr	r3, [r7, #20]
 80064fe:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8006500:	bf00      	nop
 8006502:	371c      	adds	r7, #28
 8006504:	46bd      	mov	sp, r7
 8006506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800650a:	4770      	bx	lr

0800650c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800650c:	b480      	push	{r7}
 800650e:	b085      	sub	sp, #20
 8006510:	af00      	add	r7, sp, #0
 8006512:	60f8      	str	r0, [r7, #12]
 8006514:	60b9      	str	r1, [r7, #8]
 8006516:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800651e:	68bb      	ldr	r3, [r7, #8]
 8006520:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006524:	43db      	mvns	r3, r3
 8006526:	401a      	ands	r2, r3
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	f003 0318 	and.w	r3, r3, #24
 800652e:	4908      	ldr	r1, [pc, #32]	; (8006550 <LL_ADC_SetChannelSingleDiff+0x44>)
 8006530:	40d9      	lsrs	r1, r3
 8006532:	68bb      	ldr	r3, [r7, #8]
 8006534:	400b      	ands	r3, r1
 8006536:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800653a:	431a      	orrs	r2, r3
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8006542:	bf00      	nop
 8006544:	3714      	adds	r7, #20
 8006546:	46bd      	mov	sp, r7
 8006548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654c:	4770      	bx	lr
 800654e:	bf00      	nop
 8006550:	0007ffff 	.word	0x0007ffff

08006554 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8006554:	b480      	push	{r7}
 8006556:	b083      	sub	sp, #12
 8006558:	af00      	add	r7, sp, #0
 800655a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	689b      	ldr	r3, [r3, #8]
 8006560:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8006564:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006568:	687a      	ldr	r2, [r7, #4]
 800656a:	6093      	str	r3, [r2, #8]
}
 800656c:	bf00      	nop
 800656e:	370c      	adds	r7, #12
 8006570:	46bd      	mov	sp, r7
 8006572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006576:	4770      	bx	lr

08006578 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8006578:	b480      	push	{r7}
 800657a:	b083      	sub	sp, #12
 800657c:	af00      	add	r7, sp, #0
 800657e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	689b      	ldr	r3, [r3, #8]
 8006584:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006588:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800658c:	d101      	bne.n	8006592 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800658e:	2301      	movs	r3, #1
 8006590:	e000      	b.n	8006594 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8006592:	2300      	movs	r3, #0
}
 8006594:	4618      	mov	r0, r3
 8006596:	370c      	adds	r7, #12
 8006598:	46bd      	mov	sp, r7
 800659a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800659e:	4770      	bx	lr

080065a0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80065a0:	b480      	push	{r7}
 80065a2:	b083      	sub	sp, #12
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	689b      	ldr	r3, [r3, #8]
 80065ac:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80065b0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80065b4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80065bc:	bf00      	nop
 80065be:	370c      	adds	r7, #12
 80065c0:	46bd      	mov	sp, r7
 80065c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c6:	4770      	bx	lr

080065c8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80065c8:	b480      	push	{r7}
 80065ca:	b083      	sub	sp, #12
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	689b      	ldr	r3, [r3, #8]
 80065d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80065d8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80065dc:	d101      	bne.n	80065e2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80065de:	2301      	movs	r3, #1
 80065e0:	e000      	b.n	80065e4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80065e2:	2300      	movs	r3, #0
}
 80065e4:	4618      	mov	r0, r3
 80065e6:	370c      	adds	r7, #12
 80065e8:	46bd      	mov	sp, r7
 80065ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ee:	4770      	bx	lr

080065f0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80065f0:	b480      	push	{r7}
 80065f2:	b083      	sub	sp, #12
 80065f4:	af00      	add	r7, sp, #0
 80065f6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	689b      	ldr	r3, [r3, #8]
 80065fc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006600:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006604:	f043 0201 	orr.w	r2, r3, #1
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800660c:	bf00      	nop
 800660e:	370c      	adds	r7, #12
 8006610:	46bd      	mov	sp, r7
 8006612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006616:	4770      	bx	lr

08006618 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8006618:	b480      	push	{r7}
 800661a:	b083      	sub	sp, #12
 800661c:	af00      	add	r7, sp, #0
 800661e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	689b      	ldr	r3, [r3, #8]
 8006624:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006628:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800662c:	f043 0202 	orr.w	r2, r3, #2
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8006634:	bf00      	nop
 8006636:	370c      	adds	r7, #12
 8006638:	46bd      	mov	sp, r7
 800663a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663e:	4770      	bx	lr

08006640 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8006640:	b480      	push	{r7}
 8006642:	b083      	sub	sp, #12
 8006644:	af00      	add	r7, sp, #0
 8006646:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	689b      	ldr	r3, [r3, #8]
 800664c:	f003 0301 	and.w	r3, r3, #1
 8006650:	2b01      	cmp	r3, #1
 8006652:	d101      	bne.n	8006658 <LL_ADC_IsEnabled+0x18>
 8006654:	2301      	movs	r3, #1
 8006656:	e000      	b.n	800665a <LL_ADC_IsEnabled+0x1a>
 8006658:	2300      	movs	r3, #0
}
 800665a:	4618      	mov	r0, r3
 800665c:	370c      	adds	r7, #12
 800665e:	46bd      	mov	sp, r7
 8006660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006664:	4770      	bx	lr

08006666 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8006666:	b480      	push	{r7}
 8006668:	b083      	sub	sp, #12
 800666a:	af00      	add	r7, sp, #0
 800666c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	689b      	ldr	r3, [r3, #8]
 8006672:	f003 0302 	and.w	r3, r3, #2
 8006676:	2b02      	cmp	r3, #2
 8006678:	d101      	bne.n	800667e <LL_ADC_IsDisableOngoing+0x18>
 800667a:	2301      	movs	r3, #1
 800667c:	e000      	b.n	8006680 <LL_ADC_IsDisableOngoing+0x1a>
 800667e:	2300      	movs	r3, #0
}
 8006680:	4618      	mov	r0, r3
 8006682:	370c      	adds	r7, #12
 8006684:	46bd      	mov	sp, r7
 8006686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668a:	4770      	bx	lr

0800668c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800668c:	b480      	push	{r7}
 800668e:	b083      	sub	sp, #12
 8006690:	af00      	add	r7, sp, #0
 8006692:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	689b      	ldr	r3, [r3, #8]
 8006698:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800669c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80066a0:	f043 0204 	orr.w	r2, r3, #4
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80066a8:	bf00      	nop
 80066aa:	370c      	adds	r7, #12
 80066ac:	46bd      	mov	sp, r7
 80066ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b2:	4770      	bx	lr

080066b4 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 80066b4:	b480      	push	{r7}
 80066b6:	b083      	sub	sp, #12
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	689b      	ldr	r3, [r3, #8]
 80066c0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80066c4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80066c8:	f043 0210 	orr.w	r2, r3, #16
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 80066d0:	bf00      	nop
 80066d2:	370c      	adds	r7, #12
 80066d4:	46bd      	mov	sp, r7
 80066d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066da:	4770      	bx	lr

080066dc <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80066dc:	b480      	push	{r7}
 80066de:	b083      	sub	sp, #12
 80066e0:	af00      	add	r7, sp, #0
 80066e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	689b      	ldr	r3, [r3, #8]
 80066e8:	f003 0304 	and.w	r3, r3, #4
 80066ec:	2b04      	cmp	r3, #4
 80066ee:	d101      	bne.n	80066f4 <LL_ADC_REG_IsConversionOngoing+0x18>
 80066f0:	2301      	movs	r3, #1
 80066f2:	e000      	b.n	80066f6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80066f4:	2300      	movs	r3, #0
}
 80066f6:	4618      	mov	r0, r3
 80066f8:	370c      	adds	r7, #12
 80066fa:	46bd      	mov	sp, r7
 80066fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006700:	4770      	bx	lr

08006702 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8006702:	b480      	push	{r7}
 8006704:	b083      	sub	sp, #12
 8006706:	af00      	add	r7, sp, #0
 8006708:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	689b      	ldr	r3, [r3, #8]
 800670e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006712:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006716:	f043 0220 	orr.w	r2, r3, #32
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 800671e:	bf00      	nop
 8006720:	370c      	adds	r7, #12
 8006722:	46bd      	mov	sp, r7
 8006724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006728:	4770      	bx	lr

0800672a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800672a:	b480      	push	{r7}
 800672c:	b083      	sub	sp, #12
 800672e:	af00      	add	r7, sp, #0
 8006730:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	689b      	ldr	r3, [r3, #8]
 8006736:	f003 0308 	and.w	r3, r3, #8
 800673a:	2b08      	cmp	r3, #8
 800673c:	d101      	bne.n	8006742 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800673e:	2301      	movs	r3, #1
 8006740:	e000      	b.n	8006744 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8006742:	2300      	movs	r3, #0
}
 8006744:	4618      	mov	r0, r3
 8006746:	370c      	adds	r7, #12
 8006748:	46bd      	mov	sp, r7
 800674a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674e:	4770      	bx	lr

08006750 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8006750:	b580      	push	{r7, lr}
 8006752:	b088      	sub	sp, #32
 8006754:	af00      	add	r7, sp, #0
 8006756:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006758:	2300      	movs	r3, #0
 800675a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800675c:	2300      	movs	r3, #0
 800675e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	2b00      	cmp	r3, #0
 8006764:	d101      	bne.n	800676a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8006766:	2301      	movs	r3, #1
 8006768:	e12f      	b.n	80069ca <HAL_ADC_Init+0x27a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	691b      	ldr	r3, [r3, #16]
 800676e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006774:	2b00      	cmp	r3, #0
 8006776:	d109      	bne.n	800678c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8006778:	6878      	ldr	r0, [r7, #4]
 800677a:	f7fb fde9 	bl	8002350 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	2200      	movs	r2, #0
 8006782:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	2200      	movs	r2, #0
 8006788:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	4618      	mov	r0, r3
 8006792:	f7ff fef1 	bl	8006578 <LL_ADC_IsDeepPowerDownEnabled>
 8006796:	4603      	mov	r3, r0
 8006798:	2b00      	cmp	r3, #0
 800679a:	d004      	beq.n	80067a6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	4618      	mov	r0, r3
 80067a2:	f7ff fed7 	bl	8006554 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	4618      	mov	r0, r3
 80067ac:	f7ff ff0c 	bl	80065c8 <LL_ADC_IsInternalRegulatorEnabled>
 80067b0:	4603      	mov	r3, r0
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d115      	bne.n	80067e2 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	4618      	mov	r0, r3
 80067bc:	f7ff fef0 	bl	80065a0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80067c0:	4b84      	ldr	r3, [pc, #528]	; (80069d4 <HAL_ADC_Init+0x284>)
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	099b      	lsrs	r3, r3, #6
 80067c6:	4a84      	ldr	r2, [pc, #528]	; (80069d8 <HAL_ADC_Init+0x288>)
 80067c8:	fba2 2303 	umull	r2, r3, r2, r3
 80067cc:	099b      	lsrs	r3, r3, #6
 80067ce:	3301      	adds	r3, #1
 80067d0:	005b      	lsls	r3, r3, #1
 80067d2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80067d4:	e002      	b.n	80067dc <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80067d6:	68bb      	ldr	r3, [r7, #8]
 80067d8:	3b01      	subs	r3, #1
 80067da:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80067dc:	68bb      	ldr	r3, [r7, #8]
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d1f9      	bne.n	80067d6 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	4618      	mov	r0, r3
 80067e8:	f7ff feee 	bl	80065c8 <LL_ADC_IsInternalRegulatorEnabled>
 80067ec:	4603      	mov	r3, r0
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d10d      	bne.n	800680e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067f6:	f043 0210 	orr.w	r2, r3, #16
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006802:	f043 0201 	orr.w	r2, r3, #1
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800680a:	2301      	movs	r3, #1
 800680c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	4618      	mov	r0, r3
 8006814:	f7ff ff62 	bl	80066dc <LL_ADC_REG_IsConversionOngoing>
 8006818:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800681e:	f003 0310 	and.w	r3, r3, #16
 8006822:	2b00      	cmp	r3, #0
 8006824:	f040 80c8 	bne.w	80069b8 <HAL_ADC_Init+0x268>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8006828:	697b      	ldr	r3, [r7, #20]
 800682a:	2b00      	cmp	r3, #0
 800682c:	f040 80c4 	bne.w	80069b8 <HAL_ADC_Init+0x268>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006834:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8006838:	f043 0202 	orr.w	r2, r3, #2
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	4618      	mov	r0, r3
 8006846:	f7ff fefb 	bl	8006640 <LL_ADC_IsEnabled>
 800684a:	4603      	mov	r3, r0
 800684c:	2b00      	cmp	r3, #0
 800684e:	d10b      	bne.n	8006868 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006850:	4862      	ldr	r0, [pc, #392]	; (80069dc <HAL_ADC_Init+0x28c>)
 8006852:	f7ff fef5 	bl	8006640 <LL_ADC_IsEnabled>
 8006856:	4603      	mov	r3, r0
 8006858:	2b00      	cmp	r3, #0
 800685a:	d105      	bne.n	8006868 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	685b      	ldr	r3, [r3, #4]
 8006860:	4619      	mov	r1, r3
 8006862:	485f      	ldr	r0, [pc, #380]	; (80069e0 <HAL_ADC_Init+0x290>)
 8006864:	f7ff fd4c 	bl	8006300 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	7e5b      	ldrb	r3, [r3, #25]
 800686c:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8006872:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8006878:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800687e:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006886:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8006888:	4313      	orrs	r3, r2
 800688a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006892:	2b01      	cmp	r3, #1
 8006894:	d106      	bne.n	80068a4 <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800689a:	3b01      	subs	r3, #1
 800689c:	045b      	lsls	r3, r3, #17
 800689e:	69ba      	ldr	r2, [r7, #24]
 80068a0:	4313      	orrs	r3, r2
 80068a2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d009      	beq.n	80068c0 <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068b0:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068b8:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80068ba:	69ba      	ldr	r2, [r7, #24]
 80068bc:	4313      	orrs	r3, r2
 80068be:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	68da      	ldr	r2, [r3, #12]
 80068c6:	4b47      	ldr	r3, [pc, #284]	; (80069e4 <HAL_ADC_Init+0x294>)
 80068c8:	4013      	ands	r3, r2
 80068ca:	687a      	ldr	r2, [r7, #4]
 80068cc:	6812      	ldr	r2, [r2, #0]
 80068ce:	69b9      	ldr	r1, [r7, #24]
 80068d0:	430b      	orrs	r3, r1
 80068d2:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	4618      	mov	r0, r3
 80068da:	f7ff feff 	bl	80066dc <LL_ADC_REG_IsConversionOngoing>
 80068de:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	4618      	mov	r0, r3
 80068e6:	f7ff ff20 	bl	800672a <LL_ADC_INJ_IsConversionOngoing>
 80068ea:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80068ec:	693b      	ldr	r3, [r7, #16]
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d140      	bne.n	8006974 <HAL_ADC_Init+0x224>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d13d      	bne.n	8006974 <HAL_ADC_Init+0x224>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	7e1b      	ldrb	r3, [r3, #24]
 8006900:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8006902:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800690a:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800690c:	4313      	orrs	r3, r2
 800690e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	68db      	ldr	r3, [r3, #12]
 8006916:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800691a:	f023 0306 	bic.w	r3, r3, #6
 800691e:	687a      	ldr	r2, [r7, #4]
 8006920:	6812      	ldr	r2, [r2, #0]
 8006922:	69b9      	ldr	r1, [r7, #24]
 8006924:	430b      	orrs	r3, r1
 8006926:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800692e:	2b01      	cmp	r3, #1
 8006930:	d118      	bne.n	8006964 <HAL_ADC_Init+0x214>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	691b      	ldr	r3, [r3, #16]
 8006938:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800693c:	f023 0304 	bic.w	r3, r3, #4
 8006940:	687a      	ldr	r2, [r7, #4]
 8006942:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8006944:	687a      	ldr	r2, [r7, #4]
 8006946:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8006948:	4311      	orrs	r1, r2
 800694a:	687a      	ldr	r2, [r7, #4]
 800694c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800694e:	4311      	orrs	r1, r2
 8006950:	687a      	ldr	r2, [r7, #4]
 8006952:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006954:	430a      	orrs	r2, r1
 8006956:	431a      	orrs	r2, r3
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	f042 0201 	orr.w	r2, r2, #1
 8006960:	611a      	str	r2, [r3, #16]
 8006962:	e007      	b.n	8006974 <HAL_ADC_Init+0x224>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	691a      	ldr	r2, [r3, #16]
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	f022 0201 	bic.w	r2, r2, #1
 8006972:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	691b      	ldr	r3, [r3, #16]
 8006978:	2b01      	cmp	r3, #1
 800697a:	d10c      	bne.n	8006996 <HAL_ADC_Init+0x246>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006982:	f023 010f 	bic.w	r1, r3, #15
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	69db      	ldr	r3, [r3, #28]
 800698a:	1e5a      	subs	r2, r3, #1
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	430a      	orrs	r2, r1
 8006992:	631a      	str	r2, [r3, #48]	; 0x30
 8006994:	e007      	b.n	80069a6 <HAL_ADC_Init+0x256>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	f022 020f 	bic.w	r2, r2, #15
 80069a4:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069aa:	f023 0303 	bic.w	r3, r3, #3
 80069ae:	f043 0201 	orr.w	r2, r3, #1
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	659a      	str	r2, [r3, #88]	; 0x58
 80069b6:	e007      	b.n	80069c8 <HAL_ADC_Init+0x278>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069bc:	f043 0210 	orr.w	r2, r3, #16
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80069c4:	2301      	movs	r3, #1
 80069c6:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80069c8:	7ffb      	ldrb	r3, [r7, #31]
}
 80069ca:	4618      	mov	r0, r3
 80069cc:	3720      	adds	r7, #32
 80069ce:	46bd      	mov	sp, r7
 80069d0:	bd80      	pop	{r7, pc}
 80069d2:	bf00      	nop
 80069d4:	20000028 	.word	0x20000028
 80069d8:	053e2d63 	.word	0x053e2d63
 80069dc:	50040000 	.word	0x50040000
 80069e0:	50040300 	.word	0x50040300
 80069e4:	fff0c007 	.word	0xfff0c007

080069e8 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80069e8:	b580      	push	{r7, lr}
 80069ea:	b084      	sub	sp, #16
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	4618      	mov	r0, r3
 80069f6:	f7ff fe71 	bl	80066dc <LL_ADC_REG_IsConversionOngoing>
 80069fa:	4603      	mov	r3, r0
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d14f      	bne.n	8006aa0 <HAL_ADC_Start+0xb8>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8006a06:	2b01      	cmp	r3, #1
 8006a08:	d101      	bne.n	8006a0e <HAL_ADC_Start+0x26>
 8006a0a:	2302      	movs	r3, #2
 8006a0c:	e04b      	b.n	8006aa6 <HAL_ADC_Start+0xbe>
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	2201      	movs	r2, #1
 8006a12:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8006a16:	6878      	ldr	r0, [r7, #4]
 8006a18:	f000 fdd0 	bl	80075bc <ADC_Enable>
 8006a1c:	4603      	mov	r3, r0
 8006a1e:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8006a20:	7bfb      	ldrb	r3, [r7, #15]
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d137      	bne.n	8006a96 <HAL_ADC_Start+0xae>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a2a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006a2e:	f023 0301 	bic.w	r3, r3, #1
 8006a32:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	659a      	str	r2, [r3, #88]	; 0x58
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a3e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006a42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a46:	d106      	bne.n	8006a56 <HAL_ADC_Start+0x6e>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a4c:	f023 0206 	bic.w	r2, r3, #6
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	65da      	str	r2, [r3, #92]	; 0x5c
 8006a54:	e002      	b.n	8006a5c <HAL_ADC_Start+0x74>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	2200      	movs	r2, #0
 8006a5a:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	221c      	movs	r2, #28
 8006a62:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	2200      	movs	r2, #0
 8006a68:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }

      }
#else
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	68db      	ldr	r3, [r3, #12]
 8006a72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d007      	beq.n	8006a8a <HAL_ADC_Start+0xa2>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a7e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8006a82:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	4618      	mov	r0, r3
 8006a90:	f7ff fdfc 	bl	800668c <LL_ADC_REG_StartConversion>
 8006a94:	e006      	b.n	8006aa4 <HAL_ADC_Start+0xbc>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	2200      	movs	r2, #0
 8006a9a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8006a9e:	e001      	b.n	8006aa4 <HAL_ADC_Start+0xbc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8006aa0:	2302      	movs	r3, #2
 8006aa2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 8006aa4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006aa6:	4618      	mov	r0, r3
 8006aa8:	3710      	adds	r7, #16
 8006aaa:	46bd      	mov	sp, r7
 8006aac:	bd80      	pop	{r7, pc}

08006aae <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8006aae:	b580      	push	{r7, lr}
 8006ab0:	b084      	sub	sp, #16
 8006ab2:	af00      	add	r7, sp, #0
 8006ab4:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8006abc:	2b01      	cmp	r3, #1
 8006abe:	d101      	bne.n	8006ac4 <HAL_ADC_Stop+0x16>
 8006ac0:	2302      	movs	r3, #2
 8006ac2:	e023      	b.n	8006b0c <HAL_ADC_Stop+0x5e>
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	2201      	movs	r2, #1
 8006ac8:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8006acc:	2103      	movs	r1, #3
 8006ace:	6878      	ldr	r0, [r7, #4]
 8006ad0:	f000 fcb8 	bl	8007444 <ADC_ConversionStop>
 8006ad4:	4603      	mov	r3, r0
 8006ad6:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8006ad8:	7bfb      	ldrb	r3, [r7, #15]
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d111      	bne.n	8006b02 <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8006ade:	6878      	ldr	r0, [r7, #4]
 8006ae0:	f000 fdf2 	bl	80076c8 <ADC_Disable>
 8006ae4:	4603      	mov	r3, r0
 8006ae6:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8006ae8:	7bfb      	ldrb	r3, [r7, #15]
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d109      	bne.n	8006b02 <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006af2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8006af6:	f023 0301 	bic.w	r3, r3, #1
 8006afa:	f043 0201 	orr.w	r2, r3, #1
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	2200      	movs	r2, #0
 8006b06:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8006b0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b0c:	4618      	mov	r0, r3
 8006b0e:	3710      	adds	r7, #16
 8006b10:	46bd      	mov	sp, r7
 8006b12:	bd80      	pop	{r7, pc}

08006b14 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8006b14:	b580      	push	{r7, lr}
 8006b16:	b086      	sub	sp, #24
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	6078      	str	r0, [r7, #4]
 8006b1c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	695b      	ldr	r3, [r3, #20]
 8006b22:	2b08      	cmp	r3, #8
 8006b24:	d102      	bne.n	8006b2c <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8006b26:	2308      	movs	r3, #8
 8006b28:	617b      	str	r3, [r7, #20]
 8006b2a:	e010      	b.n	8006b4e <HAL_ADC_PollForConversion+0x3a>
        tmp_Flag_End = (ADC_FLAG_EOC);
      }
    }
#else
    /* Check ADC DMA mode */
    if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	68db      	ldr	r3, [r3, #12]
 8006b32:	f003 0301 	and.w	r3, r3, #1
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d007      	beq.n	8006b4a <HAL_ADC_PollForConversion+0x36>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b3e:	f043 0220 	orr.w	r2, r3, #32
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8006b46:	2301      	movs	r3, #1
 8006b48:	e06f      	b.n	8006c2a <HAL_ADC_PollForConversion+0x116>
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 8006b4a:	2304      	movs	r3, #4
 8006b4c:	617b      	str	r3, [r7, #20]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8006b4e:	f7ff fba7 	bl	80062a0 <HAL_GetTick>
 8006b52:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8006b54:	e021      	b.n	8006b9a <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8006b56:	683b      	ldr	r3, [r7, #0]
 8006b58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b5c:	d01d      	beq.n	8006b9a <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8006b5e:	f7ff fb9f 	bl	80062a0 <HAL_GetTick>
 8006b62:	4602      	mov	r2, r0
 8006b64:	693b      	ldr	r3, [r7, #16]
 8006b66:	1ad3      	subs	r3, r2, r3
 8006b68:	683a      	ldr	r2, [r7, #0]
 8006b6a:	429a      	cmp	r2, r3
 8006b6c:	d302      	bcc.n	8006b74 <HAL_ADC_PollForConversion+0x60>
 8006b6e:	683b      	ldr	r3, [r7, #0]
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d112      	bne.n	8006b9a <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	681a      	ldr	r2, [r3, #0]
 8006b7a:	697b      	ldr	r3, [r7, #20]
 8006b7c:	4013      	ands	r3, r2
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d10b      	bne.n	8006b9a <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b86:	f043 0204 	orr.w	r2, r3, #4
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	659a      	str	r2, [r3, #88]	; 0x58

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	2200      	movs	r2, #0
 8006b92:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

          return HAL_TIMEOUT;
 8006b96:	2303      	movs	r3, #3
 8006b98:	e047      	b.n	8006c2a <HAL_ADC_PollForConversion+0x116>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	681a      	ldr	r2, [r3, #0]
 8006ba0:	697b      	ldr	r3, [r7, #20]
 8006ba2:	4013      	ands	r3, r2
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d0d6      	beq.n	8006b56 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006bac:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	659a      	str	r2, [r3, #88]	; 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	4618      	mov	r0, r3
 8006bba:	f7ff fc3d 	bl	8006438 <LL_ADC_REG_IsTriggerSourceSWStart>
 8006bbe:	4603      	mov	r3, r0
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d01c      	beq.n	8006bfe <HAL_ADC_PollForConversion+0xea>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	7e5b      	ldrb	r3, [r3, #25]
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d118      	bne.n	8006bfe <HAL_ADC_PollForConversion+0xea>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	f003 0308 	and.w	r3, r3, #8
 8006bd6:	2b08      	cmp	r3, #8
 8006bd8:	d111      	bne.n	8006bfe <HAL_ADC_PollForConversion+0xea>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006bde:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	659a      	str	r2, [r3, #88]	; 0x58

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006bea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d105      	bne.n	8006bfe <HAL_ADC_PollForConversion+0xea>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006bf6:	f043 0201 	orr.w	r2, r3, #1
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	659a      	str	r2, [r3, #88]	; 0x58
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
  }
#else
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	68db      	ldr	r3, [r3, #12]
 8006c04:	60fb      	str	r3, [r7, #12]
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8006c06:	697b      	ldr	r3, [r7, #20]
 8006c08:	2b08      	cmp	r3, #8
 8006c0a:	d104      	bne.n	8006c16 <HAL_ADC_PollForConversion+0x102>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	2208      	movs	r2, #8
 8006c12:	601a      	str	r2, [r3, #0]
 8006c14:	e008      	b.n	8006c28 <HAL_ADC_PollForConversion+0x114>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d103      	bne.n	8006c28 <HAL_ADC_PollForConversion+0x114>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	220c      	movs	r2, #12
 8006c26:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8006c28:	2300      	movs	r3, #0
}
 8006c2a:	4618      	mov	r0, r3
 8006c2c:	3718      	adds	r7, #24
 8006c2e:	46bd      	mov	sp, r7
 8006c30:	bd80      	pop	{r7, pc}

08006c32 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8006c32:	b480      	push	{r7}
 8006c34:	b083      	sub	sp, #12
 8006c36:	af00      	add	r7, sp, #0
 8006c38:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8006c40:	4618      	mov	r0, r3
 8006c42:	370c      	adds	r7, #12
 8006c44:	46bd      	mov	sp, r7
 8006c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4a:	4770      	bx	lr

08006c4c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8006c4c:	b580      	push	{r7, lr}
 8006c4e:	b0b6      	sub	sp, #216	; 0xd8
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	6078      	str	r0, [r7, #4]
 8006c54:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006c56:	2300      	movs	r3, #0
 8006c58:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8006c5c:	2300      	movs	r3, #0
 8006c5e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8006c66:	2b01      	cmp	r3, #1
 8006c68:	d101      	bne.n	8006c6e <HAL_ADC_ConfigChannel+0x22>
 8006c6a:	2302      	movs	r3, #2
 8006c6c:	e3d5      	b.n	800741a <HAL_ADC_ConfigChannel+0x7ce>
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	2201      	movs	r2, #1
 8006c72:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	4618      	mov	r0, r3
 8006c7c:	f7ff fd2e 	bl	80066dc <LL_ADC_REG_IsConversionOngoing>
 8006c80:	4603      	mov	r3, r0
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	f040 83ba 	bne.w	80073fc <HAL_ADC_ConfigChannel+0x7b0>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8006c88:	683b      	ldr	r3, [r7, #0]
 8006c8a:	685b      	ldr	r3, [r3, #4]
 8006c8c:	2b05      	cmp	r3, #5
 8006c8e:	d824      	bhi.n	8006cda <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8006c90:	683b      	ldr	r3, [r7, #0]
 8006c92:	685b      	ldr	r3, [r3, #4]
 8006c94:	3b02      	subs	r3, #2
 8006c96:	2b03      	cmp	r3, #3
 8006c98:	d81b      	bhi.n	8006cd2 <HAL_ADC_ConfigChannel+0x86>
 8006c9a:	a201      	add	r2, pc, #4	; (adr r2, 8006ca0 <HAL_ADC_ConfigChannel+0x54>)
 8006c9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ca0:	08006cb1 	.word	0x08006cb1
 8006ca4:	08006cb9 	.word	0x08006cb9
 8006ca8:	08006cc1 	.word	0x08006cc1
 8006cac:	08006cc9 	.word	0x08006cc9
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8006cb0:	683b      	ldr	r3, [r7, #0]
 8006cb2:	220c      	movs	r2, #12
 8006cb4:	605a      	str	r2, [r3, #4]
          break;
 8006cb6:	e011      	b.n	8006cdc <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8006cb8:	683b      	ldr	r3, [r7, #0]
 8006cba:	2212      	movs	r2, #18
 8006cbc:	605a      	str	r2, [r3, #4]
          break;
 8006cbe:	e00d      	b.n	8006cdc <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8006cc0:	683b      	ldr	r3, [r7, #0]
 8006cc2:	2218      	movs	r2, #24
 8006cc4:	605a      	str	r2, [r3, #4]
          break;
 8006cc6:	e009      	b.n	8006cdc <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8006cc8:	683b      	ldr	r3, [r7, #0]
 8006cca:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006cce:	605a      	str	r2, [r3, #4]
          break;
 8006cd0:	e004      	b.n	8006cdc <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8006cd2:	683b      	ldr	r3, [r7, #0]
 8006cd4:	2206      	movs	r2, #6
 8006cd6:	605a      	str	r2, [r3, #4]
          break;
 8006cd8:	e000      	b.n	8006cdc <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8006cda:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	6818      	ldr	r0, [r3, #0]
 8006ce0:	683b      	ldr	r3, [r7, #0]
 8006ce2:	6859      	ldr	r1, [r3, #4]
 8006ce4:	683b      	ldr	r3, [r7, #0]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	461a      	mov	r2, r3
 8006cea:	f7ff fbb8 	bl	800645e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	4618      	mov	r0, r3
 8006cf4:	f7ff fcf2 	bl	80066dc <LL_ADC_REG_IsConversionOngoing>
 8006cf8:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	4618      	mov	r0, r3
 8006d02:	f7ff fd12 	bl	800672a <LL_ADC_INJ_IsConversionOngoing>
 8006d06:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8006d0a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	f040 81c1 	bne.w	8007096 <HAL_ADC_ConfigChannel+0x44a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8006d14:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	f040 81bc 	bne.w	8007096 <HAL_ADC_ConfigChannel+0x44a>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8006d1e:	683b      	ldr	r3, [r7, #0]
 8006d20:	689b      	ldr	r3, [r3, #8]
 8006d22:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006d26:	d10f      	bne.n	8006d48 <HAL_ADC_ConfigChannel+0xfc>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	6818      	ldr	r0, [r3, #0]
 8006d2c:	683b      	ldr	r3, [r7, #0]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	2200      	movs	r2, #0
 8006d32:	4619      	mov	r1, r3
 8006d34:	f7ff fbbf 	bl	80064b6 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8006d40:	4618      	mov	r0, r3
 8006d42:	f7ff fb66 	bl	8006412 <LL_ADC_SetSamplingTimeCommonConfig>
 8006d46:	e00e      	b.n	8006d66 <HAL_ADC_ConfigChannel+0x11a>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	6818      	ldr	r0, [r3, #0]
 8006d4c:	683b      	ldr	r3, [r7, #0]
 8006d4e:	6819      	ldr	r1, [r3, #0]
 8006d50:	683b      	ldr	r3, [r7, #0]
 8006d52:	689b      	ldr	r3, [r3, #8]
 8006d54:	461a      	mov	r2, r3
 8006d56:	f7ff fbae 	bl	80064b6 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	2100      	movs	r1, #0
 8006d60:	4618      	mov	r0, r3
 8006d62:	f7ff fb56 	bl	8006412 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8006d66:	683b      	ldr	r3, [r7, #0]
 8006d68:	695a      	ldr	r2, [r3, #20]
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	68db      	ldr	r3, [r3, #12]
 8006d70:	08db      	lsrs	r3, r3, #3
 8006d72:	f003 0303 	and.w	r3, r3, #3
 8006d76:	005b      	lsls	r3, r3, #1
 8006d78:	fa02 f303 	lsl.w	r3, r2, r3
 8006d7c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8006d80:	683b      	ldr	r3, [r7, #0]
 8006d82:	691b      	ldr	r3, [r3, #16]
 8006d84:	2b04      	cmp	r3, #4
 8006d86:	d00a      	beq.n	8006d9e <HAL_ADC_ConfigChannel+0x152>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	6818      	ldr	r0, [r3, #0]
 8006d8c:	683b      	ldr	r3, [r7, #0]
 8006d8e:	6919      	ldr	r1, [r3, #16]
 8006d90:	683b      	ldr	r3, [r7, #0]
 8006d92:	681a      	ldr	r2, [r3, #0]
 8006d94:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006d98:	f7ff fae6 	bl	8006368 <LL_ADC_SetOffset>
 8006d9c:	e17b      	b.n	8007096 <HAL_ADC_ConfigChannel+0x44a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	2100      	movs	r1, #0
 8006da4:	4618      	mov	r0, r3
 8006da6:	f7ff fb03 	bl	80063b0 <LL_ADC_GetOffsetChannel>
 8006daa:	4603      	mov	r3, r0
 8006dac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d10a      	bne.n	8006dca <HAL_ADC_ConfigChannel+0x17e>
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	2100      	movs	r1, #0
 8006dba:	4618      	mov	r0, r3
 8006dbc:	f7ff faf8 	bl	80063b0 <LL_ADC_GetOffsetChannel>
 8006dc0:	4603      	mov	r3, r0
 8006dc2:	0e9b      	lsrs	r3, r3, #26
 8006dc4:	f003 021f 	and.w	r2, r3, #31
 8006dc8:	e01e      	b.n	8006e08 <HAL_ADC_ConfigChannel+0x1bc>
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	2100      	movs	r1, #0
 8006dd0:	4618      	mov	r0, r3
 8006dd2:	f7ff faed 	bl	80063b0 <LL_ADC_GetOffsetChannel>
 8006dd6:	4603      	mov	r3, r0
 8006dd8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006ddc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006de0:	fa93 f3a3 	rbit	r3, r3
 8006de4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8006de8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006dec:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8006df0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d101      	bne.n	8006dfc <HAL_ADC_ConfigChannel+0x1b0>
  {
    return 32U;
 8006df8:	2320      	movs	r3, #32
 8006dfa:	e004      	b.n	8006e06 <HAL_ADC_ConfigChannel+0x1ba>
  }
  return __builtin_clz(value);
 8006dfc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006e00:	fab3 f383 	clz	r3, r3
 8006e04:	b2db      	uxtb	r3, r3
 8006e06:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8006e08:	683b      	ldr	r3, [r7, #0]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d105      	bne.n	8006e20 <HAL_ADC_ConfigChannel+0x1d4>
 8006e14:	683b      	ldr	r3, [r7, #0]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	0e9b      	lsrs	r3, r3, #26
 8006e1a:	f003 031f 	and.w	r3, r3, #31
 8006e1e:	e018      	b.n	8006e52 <HAL_ADC_ConfigChannel+0x206>
 8006e20:	683b      	ldr	r3, [r7, #0]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006e28:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006e2c:	fa93 f3a3 	rbit	r3, r3
 8006e30:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8006e34:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006e38:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8006e3c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d101      	bne.n	8006e48 <HAL_ADC_ConfigChannel+0x1fc>
    return 32U;
 8006e44:	2320      	movs	r3, #32
 8006e46:	e004      	b.n	8006e52 <HAL_ADC_ConfigChannel+0x206>
  return __builtin_clz(value);
 8006e48:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006e4c:	fab3 f383 	clz	r3, r3
 8006e50:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8006e52:	429a      	cmp	r2, r3
 8006e54:	d106      	bne.n	8006e64 <HAL_ADC_ConfigChannel+0x218>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	2200      	movs	r2, #0
 8006e5c:	2100      	movs	r1, #0
 8006e5e:	4618      	mov	r0, r3
 8006e60:	f7ff fabc 	bl	80063dc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	2101      	movs	r1, #1
 8006e6a:	4618      	mov	r0, r3
 8006e6c:	f7ff faa0 	bl	80063b0 <LL_ADC_GetOffsetChannel>
 8006e70:	4603      	mov	r3, r0
 8006e72:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d10a      	bne.n	8006e90 <HAL_ADC_ConfigChannel+0x244>
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	2101      	movs	r1, #1
 8006e80:	4618      	mov	r0, r3
 8006e82:	f7ff fa95 	bl	80063b0 <LL_ADC_GetOffsetChannel>
 8006e86:	4603      	mov	r3, r0
 8006e88:	0e9b      	lsrs	r3, r3, #26
 8006e8a:	f003 021f 	and.w	r2, r3, #31
 8006e8e:	e01e      	b.n	8006ece <HAL_ADC_ConfigChannel+0x282>
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	2101      	movs	r1, #1
 8006e96:	4618      	mov	r0, r3
 8006e98:	f7ff fa8a 	bl	80063b0 <LL_ADC_GetOffsetChannel>
 8006e9c:	4603      	mov	r3, r0
 8006e9e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006ea2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006ea6:	fa93 f3a3 	rbit	r3, r3
 8006eaa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8006eae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006eb2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8006eb6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d101      	bne.n	8006ec2 <HAL_ADC_ConfigChannel+0x276>
    return 32U;
 8006ebe:	2320      	movs	r3, #32
 8006ec0:	e004      	b.n	8006ecc <HAL_ADC_ConfigChannel+0x280>
  return __builtin_clz(value);
 8006ec2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006ec6:	fab3 f383 	clz	r3, r3
 8006eca:	b2db      	uxtb	r3, r3
 8006ecc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8006ece:	683b      	ldr	r3, [r7, #0]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d105      	bne.n	8006ee6 <HAL_ADC_ConfigChannel+0x29a>
 8006eda:	683b      	ldr	r3, [r7, #0]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	0e9b      	lsrs	r3, r3, #26
 8006ee0:	f003 031f 	and.w	r3, r3, #31
 8006ee4:	e018      	b.n	8006f18 <HAL_ADC_ConfigChannel+0x2cc>
 8006ee6:	683b      	ldr	r3, [r7, #0]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006eee:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006ef2:	fa93 f3a3 	rbit	r3, r3
 8006ef6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8006efa:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006efe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8006f02:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d101      	bne.n	8006f0e <HAL_ADC_ConfigChannel+0x2c2>
    return 32U;
 8006f0a:	2320      	movs	r3, #32
 8006f0c:	e004      	b.n	8006f18 <HAL_ADC_ConfigChannel+0x2cc>
  return __builtin_clz(value);
 8006f0e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006f12:	fab3 f383 	clz	r3, r3
 8006f16:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8006f18:	429a      	cmp	r2, r3
 8006f1a:	d106      	bne.n	8006f2a <HAL_ADC_ConfigChannel+0x2de>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	2200      	movs	r2, #0
 8006f22:	2101      	movs	r1, #1
 8006f24:	4618      	mov	r0, r3
 8006f26:	f7ff fa59 	bl	80063dc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	2102      	movs	r1, #2
 8006f30:	4618      	mov	r0, r3
 8006f32:	f7ff fa3d 	bl	80063b0 <LL_ADC_GetOffsetChannel>
 8006f36:	4603      	mov	r3, r0
 8006f38:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d10a      	bne.n	8006f56 <HAL_ADC_ConfigChannel+0x30a>
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	2102      	movs	r1, #2
 8006f46:	4618      	mov	r0, r3
 8006f48:	f7ff fa32 	bl	80063b0 <LL_ADC_GetOffsetChannel>
 8006f4c:	4603      	mov	r3, r0
 8006f4e:	0e9b      	lsrs	r3, r3, #26
 8006f50:	f003 021f 	and.w	r2, r3, #31
 8006f54:	e01e      	b.n	8006f94 <HAL_ADC_ConfigChannel+0x348>
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	2102      	movs	r1, #2
 8006f5c:	4618      	mov	r0, r3
 8006f5e:	f7ff fa27 	bl	80063b0 <LL_ADC_GetOffsetChannel>
 8006f62:	4603      	mov	r3, r0
 8006f64:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006f68:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006f6c:	fa93 f3a3 	rbit	r3, r3
 8006f70:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8006f74:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006f78:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8006f7c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d101      	bne.n	8006f88 <HAL_ADC_ConfigChannel+0x33c>
    return 32U;
 8006f84:	2320      	movs	r3, #32
 8006f86:	e004      	b.n	8006f92 <HAL_ADC_ConfigChannel+0x346>
  return __builtin_clz(value);
 8006f88:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006f8c:	fab3 f383 	clz	r3, r3
 8006f90:	b2db      	uxtb	r3, r3
 8006f92:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8006f94:	683b      	ldr	r3, [r7, #0]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d105      	bne.n	8006fac <HAL_ADC_ConfigChannel+0x360>
 8006fa0:	683b      	ldr	r3, [r7, #0]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	0e9b      	lsrs	r3, r3, #26
 8006fa6:	f003 031f 	and.w	r3, r3, #31
 8006faa:	e016      	b.n	8006fda <HAL_ADC_ConfigChannel+0x38e>
 8006fac:	683b      	ldr	r3, [r7, #0]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006fb4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006fb8:	fa93 f3a3 	rbit	r3, r3
 8006fbc:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8006fbe:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006fc0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8006fc4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d101      	bne.n	8006fd0 <HAL_ADC_ConfigChannel+0x384>
    return 32U;
 8006fcc:	2320      	movs	r3, #32
 8006fce:	e004      	b.n	8006fda <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 8006fd0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006fd4:	fab3 f383 	clz	r3, r3
 8006fd8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8006fda:	429a      	cmp	r2, r3
 8006fdc:	d106      	bne.n	8006fec <HAL_ADC_ConfigChannel+0x3a0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	2200      	movs	r2, #0
 8006fe4:	2102      	movs	r1, #2
 8006fe6:	4618      	mov	r0, r3
 8006fe8:	f7ff f9f8 	bl	80063dc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	2103      	movs	r1, #3
 8006ff2:	4618      	mov	r0, r3
 8006ff4:	f7ff f9dc 	bl	80063b0 <LL_ADC_GetOffsetChannel>
 8006ff8:	4603      	mov	r3, r0
 8006ffa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d10a      	bne.n	8007018 <HAL_ADC_ConfigChannel+0x3cc>
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	2103      	movs	r1, #3
 8007008:	4618      	mov	r0, r3
 800700a:	f7ff f9d1 	bl	80063b0 <LL_ADC_GetOffsetChannel>
 800700e:	4603      	mov	r3, r0
 8007010:	0e9b      	lsrs	r3, r3, #26
 8007012:	f003 021f 	and.w	r2, r3, #31
 8007016:	e017      	b.n	8007048 <HAL_ADC_ConfigChannel+0x3fc>
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	2103      	movs	r1, #3
 800701e:	4618      	mov	r0, r3
 8007020:	f7ff f9c6 	bl	80063b0 <LL_ADC_GetOffsetChannel>
 8007024:	4603      	mov	r3, r0
 8007026:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007028:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800702a:	fa93 f3a3 	rbit	r3, r3
 800702e:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8007030:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007032:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8007034:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007036:	2b00      	cmp	r3, #0
 8007038:	d101      	bne.n	800703e <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 800703a:	2320      	movs	r3, #32
 800703c:	e003      	b.n	8007046 <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 800703e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007040:	fab3 f383 	clz	r3, r3
 8007044:	b2db      	uxtb	r3, r3
 8007046:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8007048:	683b      	ldr	r3, [r7, #0]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007050:	2b00      	cmp	r3, #0
 8007052:	d105      	bne.n	8007060 <HAL_ADC_ConfigChannel+0x414>
 8007054:	683b      	ldr	r3, [r7, #0]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	0e9b      	lsrs	r3, r3, #26
 800705a:	f003 031f 	and.w	r3, r3, #31
 800705e:	e011      	b.n	8007084 <HAL_ADC_ConfigChannel+0x438>
 8007060:	683b      	ldr	r3, [r7, #0]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007066:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007068:	fa93 f3a3 	rbit	r3, r3
 800706c:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 800706e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007070:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8007072:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007074:	2b00      	cmp	r3, #0
 8007076:	d101      	bne.n	800707c <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 8007078:	2320      	movs	r3, #32
 800707a:	e003      	b.n	8007084 <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 800707c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800707e:	fab3 f383 	clz	r3, r3
 8007082:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8007084:	429a      	cmp	r2, r3
 8007086:	d106      	bne.n	8007096 <HAL_ADC_ConfigChannel+0x44a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	2200      	movs	r2, #0
 800708e:	2103      	movs	r1, #3
 8007090:	4618      	mov	r0, r3
 8007092:	f7ff f9a3 	bl	80063dc <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	4618      	mov	r0, r3
 800709c:	f7ff fad0 	bl	8006640 <LL_ADC_IsEnabled>
 80070a0:	4603      	mov	r3, r0
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	f040 8140 	bne.w	8007328 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	6818      	ldr	r0, [r3, #0]
 80070ac:	683b      	ldr	r3, [r7, #0]
 80070ae:	6819      	ldr	r1, [r3, #0]
 80070b0:	683b      	ldr	r3, [r7, #0]
 80070b2:	68db      	ldr	r3, [r3, #12]
 80070b4:	461a      	mov	r2, r3
 80070b6:	f7ff fa29 	bl	800650c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80070ba:	683b      	ldr	r3, [r7, #0]
 80070bc:	68db      	ldr	r3, [r3, #12]
 80070be:	4a8f      	ldr	r2, [pc, #572]	; (80072fc <HAL_ADC_ConfigChannel+0x6b0>)
 80070c0:	4293      	cmp	r3, r2
 80070c2:	f040 8131 	bne.w	8007328 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80070ca:	683b      	ldr	r3, [r7, #0]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d10b      	bne.n	80070ee <HAL_ADC_ConfigChannel+0x4a2>
 80070d6:	683b      	ldr	r3, [r7, #0]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	0e9b      	lsrs	r3, r3, #26
 80070dc:	3301      	adds	r3, #1
 80070de:	f003 031f 	and.w	r3, r3, #31
 80070e2:	2b09      	cmp	r3, #9
 80070e4:	bf94      	ite	ls
 80070e6:	2301      	movls	r3, #1
 80070e8:	2300      	movhi	r3, #0
 80070ea:	b2db      	uxtb	r3, r3
 80070ec:	e019      	b.n	8007122 <HAL_ADC_ConfigChannel+0x4d6>
 80070ee:	683b      	ldr	r3, [r7, #0]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80070f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80070f6:	fa93 f3a3 	rbit	r3, r3
 80070fa:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80070fc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80070fe:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8007100:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007102:	2b00      	cmp	r3, #0
 8007104:	d101      	bne.n	800710a <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 8007106:	2320      	movs	r3, #32
 8007108:	e003      	b.n	8007112 <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 800710a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800710c:	fab3 f383 	clz	r3, r3
 8007110:	b2db      	uxtb	r3, r3
 8007112:	3301      	adds	r3, #1
 8007114:	f003 031f 	and.w	r3, r3, #31
 8007118:	2b09      	cmp	r3, #9
 800711a:	bf94      	ite	ls
 800711c:	2301      	movls	r3, #1
 800711e:	2300      	movhi	r3, #0
 8007120:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8007122:	2b00      	cmp	r3, #0
 8007124:	d079      	beq.n	800721a <HAL_ADC_ConfigChannel+0x5ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8007126:	683b      	ldr	r3, [r7, #0]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800712e:	2b00      	cmp	r3, #0
 8007130:	d107      	bne.n	8007142 <HAL_ADC_ConfigChannel+0x4f6>
 8007132:	683b      	ldr	r3, [r7, #0]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	0e9b      	lsrs	r3, r3, #26
 8007138:	3301      	adds	r3, #1
 800713a:	069b      	lsls	r3, r3, #26
 800713c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8007140:	e015      	b.n	800716e <HAL_ADC_ConfigChannel+0x522>
 8007142:	683b      	ldr	r3, [r7, #0]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007148:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800714a:	fa93 f3a3 	rbit	r3, r3
 800714e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8007150:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007152:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8007154:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007156:	2b00      	cmp	r3, #0
 8007158:	d101      	bne.n	800715e <HAL_ADC_ConfigChannel+0x512>
    return 32U;
 800715a:	2320      	movs	r3, #32
 800715c:	e003      	b.n	8007166 <HAL_ADC_ConfigChannel+0x51a>
  return __builtin_clz(value);
 800715e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007160:	fab3 f383 	clz	r3, r3
 8007164:	b2db      	uxtb	r3, r3
 8007166:	3301      	adds	r3, #1
 8007168:	069b      	lsls	r3, r3, #26
 800716a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800716e:	683b      	ldr	r3, [r7, #0]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007176:	2b00      	cmp	r3, #0
 8007178:	d109      	bne.n	800718e <HAL_ADC_ConfigChannel+0x542>
 800717a:	683b      	ldr	r3, [r7, #0]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	0e9b      	lsrs	r3, r3, #26
 8007180:	3301      	adds	r3, #1
 8007182:	f003 031f 	and.w	r3, r3, #31
 8007186:	2101      	movs	r1, #1
 8007188:	fa01 f303 	lsl.w	r3, r1, r3
 800718c:	e017      	b.n	80071be <HAL_ADC_ConfigChannel+0x572>
 800718e:	683b      	ldr	r3, [r7, #0]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007194:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007196:	fa93 f3a3 	rbit	r3, r3
 800719a:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 800719c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800719e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80071a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d101      	bne.n	80071aa <HAL_ADC_ConfigChannel+0x55e>
    return 32U;
 80071a6:	2320      	movs	r3, #32
 80071a8:	e003      	b.n	80071b2 <HAL_ADC_ConfigChannel+0x566>
  return __builtin_clz(value);
 80071aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80071ac:	fab3 f383 	clz	r3, r3
 80071b0:	b2db      	uxtb	r3, r3
 80071b2:	3301      	adds	r3, #1
 80071b4:	f003 031f 	and.w	r3, r3, #31
 80071b8:	2101      	movs	r1, #1
 80071ba:	fa01 f303 	lsl.w	r3, r1, r3
 80071be:	ea42 0103 	orr.w	r1, r2, r3
 80071c2:	683b      	ldr	r3, [r7, #0]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d10a      	bne.n	80071e4 <HAL_ADC_ConfigChannel+0x598>
 80071ce:	683b      	ldr	r3, [r7, #0]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	0e9b      	lsrs	r3, r3, #26
 80071d4:	3301      	adds	r3, #1
 80071d6:	f003 021f 	and.w	r2, r3, #31
 80071da:	4613      	mov	r3, r2
 80071dc:	005b      	lsls	r3, r3, #1
 80071de:	4413      	add	r3, r2
 80071e0:	051b      	lsls	r3, r3, #20
 80071e2:	e018      	b.n	8007216 <HAL_ADC_ConfigChannel+0x5ca>
 80071e4:	683b      	ldr	r3, [r7, #0]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80071ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071ec:	fa93 f3a3 	rbit	r3, r3
 80071f0:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80071f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071f4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80071f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d101      	bne.n	8007200 <HAL_ADC_ConfigChannel+0x5b4>
    return 32U;
 80071fc:	2320      	movs	r3, #32
 80071fe:	e003      	b.n	8007208 <HAL_ADC_ConfigChannel+0x5bc>
  return __builtin_clz(value);
 8007200:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007202:	fab3 f383 	clz	r3, r3
 8007206:	b2db      	uxtb	r3, r3
 8007208:	3301      	adds	r3, #1
 800720a:	f003 021f 	and.w	r2, r3, #31
 800720e:	4613      	mov	r3, r2
 8007210:	005b      	lsls	r3, r3, #1
 8007212:	4413      	add	r3, r2
 8007214:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8007216:	430b      	orrs	r3, r1
 8007218:	e081      	b.n	800731e <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800721a:	683b      	ldr	r3, [r7, #0]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007222:	2b00      	cmp	r3, #0
 8007224:	d107      	bne.n	8007236 <HAL_ADC_ConfigChannel+0x5ea>
 8007226:	683b      	ldr	r3, [r7, #0]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	0e9b      	lsrs	r3, r3, #26
 800722c:	3301      	adds	r3, #1
 800722e:	069b      	lsls	r3, r3, #26
 8007230:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8007234:	e015      	b.n	8007262 <HAL_ADC_ConfigChannel+0x616>
 8007236:	683b      	ldr	r3, [r7, #0]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800723c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800723e:	fa93 f3a3 	rbit	r3, r3
 8007242:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8007244:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007246:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8007248:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800724a:	2b00      	cmp	r3, #0
 800724c:	d101      	bne.n	8007252 <HAL_ADC_ConfigChannel+0x606>
    return 32U;
 800724e:	2320      	movs	r3, #32
 8007250:	e003      	b.n	800725a <HAL_ADC_ConfigChannel+0x60e>
  return __builtin_clz(value);
 8007252:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007254:	fab3 f383 	clz	r3, r3
 8007258:	b2db      	uxtb	r3, r3
 800725a:	3301      	adds	r3, #1
 800725c:	069b      	lsls	r3, r3, #26
 800725e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8007262:	683b      	ldr	r3, [r7, #0]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800726a:	2b00      	cmp	r3, #0
 800726c:	d109      	bne.n	8007282 <HAL_ADC_ConfigChannel+0x636>
 800726e:	683b      	ldr	r3, [r7, #0]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	0e9b      	lsrs	r3, r3, #26
 8007274:	3301      	adds	r3, #1
 8007276:	f003 031f 	and.w	r3, r3, #31
 800727a:	2101      	movs	r1, #1
 800727c:	fa01 f303 	lsl.w	r3, r1, r3
 8007280:	e017      	b.n	80072b2 <HAL_ADC_ConfigChannel+0x666>
 8007282:	683b      	ldr	r3, [r7, #0]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007288:	6a3b      	ldr	r3, [r7, #32]
 800728a:	fa93 f3a3 	rbit	r3, r3
 800728e:	61fb      	str	r3, [r7, #28]
  return result;
 8007290:	69fb      	ldr	r3, [r7, #28]
 8007292:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8007294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007296:	2b00      	cmp	r3, #0
 8007298:	d101      	bne.n	800729e <HAL_ADC_ConfigChannel+0x652>
    return 32U;
 800729a:	2320      	movs	r3, #32
 800729c:	e003      	b.n	80072a6 <HAL_ADC_ConfigChannel+0x65a>
  return __builtin_clz(value);
 800729e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072a0:	fab3 f383 	clz	r3, r3
 80072a4:	b2db      	uxtb	r3, r3
 80072a6:	3301      	adds	r3, #1
 80072a8:	f003 031f 	and.w	r3, r3, #31
 80072ac:	2101      	movs	r1, #1
 80072ae:	fa01 f303 	lsl.w	r3, r1, r3
 80072b2:	ea42 0103 	orr.w	r1, r2, r3
 80072b6:	683b      	ldr	r3, [r7, #0]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d10d      	bne.n	80072de <HAL_ADC_ConfigChannel+0x692>
 80072c2:	683b      	ldr	r3, [r7, #0]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	0e9b      	lsrs	r3, r3, #26
 80072c8:	3301      	adds	r3, #1
 80072ca:	f003 021f 	and.w	r2, r3, #31
 80072ce:	4613      	mov	r3, r2
 80072d0:	005b      	lsls	r3, r3, #1
 80072d2:	4413      	add	r3, r2
 80072d4:	3b1e      	subs	r3, #30
 80072d6:	051b      	lsls	r3, r3, #20
 80072d8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80072dc:	e01e      	b.n	800731c <HAL_ADC_ConfigChannel+0x6d0>
 80072de:	683b      	ldr	r3, [r7, #0]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80072e4:	697b      	ldr	r3, [r7, #20]
 80072e6:	fa93 f3a3 	rbit	r3, r3
 80072ea:	613b      	str	r3, [r7, #16]
  return result;
 80072ec:	693b      	ldr	r3, [r7, #16]
 80072ee:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80072f0:	69bb      	ldr	r3, [r7, #24]
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d104      	bne.n	8007300 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 80072f6:	2320      	movs	r3, #32
 80072f8:	e006      	b.n	8007308 <HAL_ADC_ConfigChannel+0x6bc>
 80072fa:	bf00      	nop
 80072fc:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8007300:	69bb      	ldr	r3, [r7, #24]
 8007302:	fab3 f383 	clz	r3, r3
 8007306:	b2db      	uxtb	r3, r3
 8007308:	3301      	adds	r3, #1
 800730a:	f003 021f 	and.w	r2, r3, #31
 800730e:	4613      	mov	r3, r2
 8007310:	005b      	lsls	r3, r3, #1
 8007312:	4413      	add	r3, r2
 8007314:	3b1e      	subs	r3, #30
 8007316:	051b      	lsls	r3, r3, #20
 8007318:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800731c:	430b      	orrs	r3, r1
 800731e:	683a      	ldr	r2, [r7, #0]
 8007320:	6892      	ldr	r2, [r2, #8]
 8007322:	4619      	mov	r1, r3
 8007324:	f7ff f8c7 	bl	80064b6 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8007328:	683b      	ldr	r3, [r7, #0]
 800732a:	681a      	ldr	r2, [r3, #0]
 800732c:	4b3d      	ldr	r3, [pc, #244]	; (8007424 <HAL_ADC_ConfigChannel+0x7d8>)
 800732e:	4013      	ands	r3, r2
 8007330:	2b00      	cmp	r3, #0
 8007332:	d06c      	beq.n	800740e <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8007334:	483c      	ldr	r0, [pc, #240]	; (8007428 <HAL_ADC_ConfigChannel+0x7dc>)
 8007336:	f7ff f809 	bl	800634c <LL_ADC_GetCommonPathInternalCh>
 800733a:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800733e:	683b      	ldr	r3, [r7, #0]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	4a3a      	ldr	r2, [pc, #232]	; (800742c <HAL_ADC_ConfigChannel+0x7e0>)
 8007344:	4293      	cmp	r3, r2
 8007346:	d127      	bne.n	8007398 <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8007348:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800734c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007350:	2b00      	cmp	r3, #0
 8007352:	d121      	bne.n	8007398 <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	4a35      	ldr	r2, [pc, #212]	; (8007430 <HAL_ADC_ConfigChannel+0x7e4>)
 800735a:	4293      	cmp	r3, r2
 800735c:	d157      	bne.n	800740e <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800735e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007362:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007366:	4619      	mov	r1, r3
 8007368:	482f      	ldr	r0, [pc, #188]	; (8007428 <HAL_ADC_ConfigChannel+0x7dc>)
 800736a:	f7fe ffdc 	bl	8006326 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800736e:	4b31      	ldr	r3, [pc, #196]	; (8007434 <HAL_ADC_ConfigChannel+0x7e8>)
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	099b      	lsrs	r3, r3, #6
 8007374:	4a30      	ldr	r2, [pc, #192]	; (8007438 <HAL_ADC_ConfigChannel+0x7ec>)
 8007376:	fba2 2303 	umull	r2, r3, r2, r3
 800737a:	099b      	lsrs	r3, r3, #6
 800737c:	1c5a      	adds	r2, r3, #1
 800737e:	4613      	mov	r3, r2
 8007380:	005b      	lsls	r3, r3, #1
 8007382:	4413      	add	r3, r2
 8007384:	009b      	lsls	r3, r3, #2
 8007386:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8007388:	e002      	b.n	8007390 <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	3b01      	subs	r3, #1
 800738e:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	2b00      	cmp	r3, #0
 8007394:	d1f9      	bne.n	800738a <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8007396:	e03a      	b.n	800740e <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8007398:	683b      	ldr	r3, [r7, #0]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	4a27      	ldr	r2, [pc, #156]	; (800743c <HAL_ADC_ConfigChannel+0x7f0>)
 800739e:	4293      	cmp	r3, r2
 80073a0:	d113      	bne.n	80073ca <HAL_ADC_ConfigChannel+0x77e>
 80073a2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80073a6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d10d      	bne.n	80073ca <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	4a1f      	ldr	r2, [pc, #124]	; (8007430 <HAL_ADC_ConfigChannel+0x7e4>)
 80073b4:	4293      	cmp	r3, r2
 80073b6:	d12a      	bne.n	800740e <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80073b8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80073bc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80073c0:	4619      	mov	r1, r3
 80073c2:	4819      	ldr	r0, [pc, #100]	; (8007428 <HAL_ADC_ConfigChannel+0x7dc>)
 80073c4:	f7fe ffaf 	bl	8006326 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80073c8:	e021      	b.n	800740e <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80073ca:	683b      	ldr	r3, [r7, #0]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	4a1c      	ldr	r2, [pc, #112]	; (8007440 <HAL_ADC_ConfigChannel+0x7f4>)
 80073d0:	4293      	cmp	r3, r2
 80073d2:	d11c      	bne.n	800740e <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80073d4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80073d8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d116      	bne.n	800740e <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	4a12      	ldr	r2, [pc, #72]	; (8007430 <HAL_ADC_ConfigChannel+0x7e4>)
 80073e6:	4293      	cmp	r3, r2
 80073e8:	d111      	bne.n	800740e <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80073ea:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80073ee:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80073f2:	4619      	mov	r1, r3
 80073f4:	480c      	ldr	r0, [pc, #48]	; (8007428 <HAL_ADC_ConfigChannel+0x7dc>)
 80073f6:	f7fe ff96 	bl	8006326 <LL_ADC_SetCommonPathInternalCh>
 80073fa:	e008      	b.n	800740e <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007400:	f043 0220 	orr.w	r2, r3, #32
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8007408:	2301      	movs	r3, #1
 800740a:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	2200      	movs	r2, #0
 8007412:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8007416:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800741a:	4618      	mov	r0, r3
 800741c:	37d8      	adds	r7, #216	; 0xd8
 800741e:	46bd      	mov	sp, r7
 8007420:	bd80      	pop	{r7, pc}
 8007422:	bf00      	nop
 8007424:	80080000 	.word	0x80080000
 8007428:	50040300 	.word	0x50040300
 800742c:	c7520000 	.word	0xc7520000
 8007430:	50040000 	.word	0x50040000
 8007434:	20000028 	.word	0x20000028
 8007438:	053e2d63 	.word	0x053e2d63
 800743c:	cb840000 	.word	0xcb840000
 8007440:	80000001 	.word	0x80000001

08007444 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8007444:	b580      	push	{r7, lr}
 8007446:	b088      	sub	sp, #32
 8007448:	af00      	add	r7, sp, #0
 800744a:	6078      	str	r0, [r7, #4]
 800744c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 800744e:	2300      	movs	r3, #0
 8007450:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8007452:	683b      	ldr	r3, [r7, #0]
 8007454:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	4618      	mov	r0, r3
 800745c:	f7ff f93e 	bl	80066dc <LL_ADC_REG_IsConversionOngoing>
 8007460:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	4618      	mov	r0, r3
 8007468:	f7ff f95f 	bl	800672a <LL_ADC_INJ_IsConversionOngoing>
 800746c:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 800746e:	693b      	ldr	r3, [r7, #16]
 8007470:	2b00      	cmp	r3, #0
 8007472:	d103      	bne.n	800747c <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	2b00      	cmp	r3, #0
 8007478:	f000 8098 	beq.w	80075ac <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	68db      	ldr	r3, [r3, #12]
 8007482:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007486:	2b00      	cmp	r3, #0
 8007488:	d02a      	beq.n	80074e0 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	7e5b      	ldrb	r3, [r3, #25]
 800748e:	2b01      	cmp	r3, #1
 8007490:	d126      	bne.n	80074e0 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	7e1b      	ldrb	r3, [r3, #24]
 8007496:	2b01      	cmp	r3, #1
 8007498:	d122      	bne.n	80074e0 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 800749a:	2301      	movs	r3, #1
 800749c:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800749e:	e014      	b.n	80074ca <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 80074a0:	69fb      	ldr	r3, [r7, #28]
 80074a2:	4a45      	ldr	r2, [pc, #276]	; (80075b8 <ADC_ConversionStop+0x174>)
 80074a4:	4293      	cmp	r3, r2
 80074a6:	d90d      	bls.n	80074c4 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80074ac:	f043 0210 	orr.w	r2, r3, #16
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80074b8:	f043 0201 	orr.w	r2, r3, #1
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 80074c0:	2301      	movs	r3, #1
 80074c2:	e074      	b.n	80075ae <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 80074c4:	69fb      	ldr	r3, [r7, #28]
 80074c6:	3301      	adds	r3, #1
 80074c8:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074d4:	2b40      	cmp	r3, #64	; 0x40
 80074d6:	d1e3      	bne.n	80074a0 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	2240      	movs	r2, #64	; 0x40
 80074de:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 80074e0:	69bb      	ldr	r3, [r7, #24]
 80074e2:	2b02      	cmp	r3, #2
 80074e4:	d014      	beq.n	8007510 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	4618      	mov	r0, r3
 80074ec:	f7ff f8f6 	bl	80066dc <LL_ADC_REG_IsConversionOngoing>
 80074f0:	4603      	mov	r3, r0
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d00c      	beq.n	8007510 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	4618      	mov	r0, r3
 80074fc:	f7ff f8b3 	bl	8006666 <LL_ADC_IsDisableOngoing>
 8007500:	4603      	mov	r3, r0
 8007502:	2b00      	cmp	r3, #0
 8007504:	d104      	bne.n	8007510 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	4618      	mov	r0, r3
 800750c:	f7ff f8d2 	bl	80066b4 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8007510:	69bb      	ldr	r3, [r7, #24]
 8007512:	2b01      	cmp	r3, #1
 8007514:	d014      	beq.n	8007540 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	4618      	mov	r0, r3
 800751c:	f7ff f905 	bl	800672a <LL_ADC_INJ_IsConversionOngoing>
 8007520:	4603      	mov	r3, r0
 8007522:	2b00      	cmp	r3, #0
 8007524:	d00c      	beq.n	8007540 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	4618      	mov	r0, r3
 800752c:	f7ff f89b 	bl	8006666 <LL_ADC_IsDisableOngoing>
 8007530:	4603      	mov	r3, r0
 8007532:	2b00      	cmp	r3, #0
 8007534:	d104      	bne.n	8007540 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	4618      	mov	r0, r3
 800753c:	f7ff f8e1 	bl	8006702 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8007540:	69bb      	ldr	r3, [r7, #24]
 8007542:	2b02      	cmp	r3, #2
 8007544:	d005      	beq.n	8007552 <ADC_ConversionStop+0x10e>
 8007546:	69bb      	ldr	r3, [r7, #24]
 8007548:	2b03      	cmp	r3, #3
 800754a:	d105      	bne.n	8007558 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 800754c:	230c      	movs	r3, #12
 800754e:	617b      	str	r3, [r7, #20]
        break;
 8007550:	e005      	b.n	800755e <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8007552:	2308      	movs	r3, #8
 8007554:	617b      	str	r3, [r7, #20]
        break;
 8007556:	e002      	b.n	800755e <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8007558:	2304      	movs	r3, #4
 800755a:	617b      	str	r3, [r7, #20]
        break;
 800755c:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 800755e:	f7fe fe9f 	bl	80062a0 <HAL_GetTick>
 8007562:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8007564:	e01b      	b.n	800759e <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8007566:	f7fe fe9b 	bl	80062a0 <HAL_GetTick>
 800756a:	4602      	mov	r2, r0
 800756c:	68bb      	ldr	r3, [r7, #8]
 800756e:	1ad3      	subs	r3, r2, r3
 8007570:	2b05      	cmp	r3, #5
 8007572:	d914      	bls.n	800759e <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	689a      	ldr	r2, [r3, #8]
 800757a:	697b      	ldr	r3, [r7, #20]
 800757c:	4013      	ands	r3, r2
 800757e:	2b00      	cmp	r3, #0
 8007580:	d00d      	beq.n	800759e <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007586:	f043 0210 	orr.w	r2, r3, #16
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007592:	f043 0201 	orr.w	r2, r3, #1
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 800759a:	2301      	movs	r3, #1
 800759c:	e007      	b.n	80075ae <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	689a      	ldr	r2, [r3, #8]
 80075a4:	697b      	ldr	r3, [r7, #20]
 80075a6:	4013      	ands	r3, r2
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d1dc      	bne.n	8007566 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 80075ac:	2300      	movs	r3, #0
}
 80075ae:	4618      	mov	r0, r3
 80075b0:	3720      	adds	r7, #32
 80075b2:	46bd      	mov	sp, r7
 80075b4:	bd80      	pop	{r7, pc}
 80075b6:	bf00      	nop
 80075b8:	a33fffff 	.word	0xa33fffff

080075bc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80075bc:	b580      	push	{r7, lr}
 80075be:	b084      	sub	sp, #16
 80075c0:	af00      	add	r7, sp, #0
 80075c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80075c4:	2300      	movs	r3, #0
 80075c6:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	4618      	mov	r0, r3
 80075ce:	f7ff f837 	bl	8006640 <LL_ADC_IsEnabled>
 80075d2:	4603      	mov	r3, r0
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d169      	bne.n	80076ac <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	689a      	ldr	r2, [r3, #8]
 80075de:	4b36      	ldr	r3, [pc, #216]	; (80076b8 <ADC_Enable+0xfc>)
 80075e0:	4013      	ands	r3, r2
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d00d      	beq.n	8007602 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80075ea:	f043 0210 	orr.w	r2, r3, #16
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80075f6:	f043 0201 	orr.w	r2, r3, #1
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 80075fe:	2301      	movs	r3, #1
 8007600:	e055      	b.n	80076ae <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	4618      	mov	r0, r3
 8007608:	f7fe fff2 	bl	80065f0 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 800760c:	482b      	ldr	r0, [pc, #172]	; (80076bc <ADC_Enable+0x100>)
 800760e:	f7fe fe9d 	bl	800634c <LL_ADC_GetCommonPathInternalCh>
 8007612:	4603      	mov	r3, r0
 8007614:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007618:	2b00      	cmp	r3, #0
 800761a:	d013      	beq.n	8007644 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800761c:	4b28      	ldr	r3, [pc, #160]	; (80076c0 <ADC_Enable+0x104>)
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	099b      	lsrs	r3, r3, #6
 8007622:	4a28      	ldr	r2, [pc, #160]	; (80076c4 <ADC_Enable+0x108>)
 8007624:	fba2 2303 	umull	r2, r3, r2, r3
 8007628:	099b      	lsrs	r3, r3, #6
 800762a:	1c5a      	adds	r2, r3, #1
 800762c:	4613      	mov	r3, r2
 800762e:	005b      	lsls	r3, r3, #1
 8007630:	4413      	add	r3, r2
 8007632:	009b      	lsls	r3, r3, #2
 8007634:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8007636:	e002      	b.n	800763e <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8007638:	68bb      	ldr	r3, [r7, #8]
 800763a:	3b01      	subs	r3, #1
 800763c:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 800763e:	68bb      	ldr	r3, [r7, #8]
 8007640:	2b00      	cmp	r3, #0
 8007642:	d1f9      	bne.n	8007638 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8007644:	f7fe fe2c 	bl	80062a0 <HAL_GetTick>
 8007648:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800764a:	e028      	b.n	800769e <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	4618      	mov	r0, r3
 8007652:	f7fe fff5 	bl	8006640 <LL_ADC_IsEnabled>
 8007656:	4603      	mov	r3, r0
 8007658:	2b00      	cmp	r3, #0
 800765a:	d104      	bne.n	8007666 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	4618      	mov	r0, r3
 8007662:	f7fe ffc5 	bl	80065f0 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8007666:	f7fe fe1b 	bl	80062a0 <HAL_GetTick>
 800766a:	4602      	mov	r2, r0
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	1ad3      	subs	r3, r2, r3
 8007670:	2b02      	cmp	r3, #2
 8007672:	d914      	bls.n	800769e <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	f003 0301 	and.w	r3, r3, #1
 800767e:	2b01      	cmp	r3, #1
 8007680:	d00d      	beq.n	800769e <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007686:	f043 0210 	orr.w	r2, r3, #16
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007692:	f043 0201 	orr.w	r2, r3, #1
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 800769a:	2301      	movs	r3, #1
 800769c:	e007      	b.n	80076ae <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	f003 0301 	and.w	r3, r3, #1
 80076a8:	2b01      	cmp	r3, #1
 80076aa:	d1cf      	bne.n	800764c <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80076ac:	2300      	movs	r3, #0
}
 80076ae:	4618      	mov	r0, r3
 80076b0:	3710      	adds	r7, #16
 80076b2:	46bd      	mov	sp, r7
 80076b4:	bd80      	pop	{r7, pc}
 80076b6:	bf00      	nop
 80076b8:	8000003f 	.word	0x8000003f
 80076bc:	50040300 	.word	0x50040300
 80076c0:	20000028 	.word	0x20000028
 80076c4:	053e2d63 	.word	0x053e2d63

080076c8 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80076c8:	b580      	push	{r7, lr}
 80076ca:	b084      	sub	sp, #16
 80076cc:	af00      	add	r7, sp, #0
 80076ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	4618      	mov	r0, r3
 80076d6:	f7fe ffc6 	bl	8006666 <LL_ADC_IsDisableOngoing>
 80076da:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	4618      	mov	r0, r3
 80076e2:	f7fe ffad 	bl	8006640 <LL_ADC_IsEnabled>
 80076e6:	4603      	mov	r3, r0
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d047      	beq.n	800777c <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d144      	bne.n	800777c <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	689b      	ldr	r3, [r3, #8]
 80076f8:	f003 030d 	and.w	r3, r3, #13
 80076fc:	2b01      	cmp	r3, #1
 80076fe:	d10c      	bne.n	800771a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	4618      	mov	r0, r3
 8007706:	f7fe ff87 	bl	8006618 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	2203      	movs	r2, #3
 8007710:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8007712:	f7fe fdc5 	bl	80062a0 <HAL_GetTick>
 8007716:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8007718:	e029      	b.n	800776e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800771e:	f043 0210 	orr.w	r2, r3, #16
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800772a:	f043 0201 	orr.w	r2, r3, #1
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 8007732:	2301      	movs	r3, #1
 8007734:	e023      	b.n	800777e <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8007736:	f7fe fdb3 	bl	80062a0 <HAL_GetTick>
 800773a:	4602      	mov	r2, r0
 800773c:	68bb      	ldr	r3, [r7, #8]
 800773e:	1ad3      	subs	r3, r2, r3
 8007740:	2b02      	cmp	r3, #2
 8007742:	d914      	bls.n	800776e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	689b      	ldr	r3, [r3, #8]
 800774a:	f003 0301 	and.w	r3, r3, #1
 800774e:	2b00      	cmp	r3, #0
 8007750:	d00d      	beq.n	800776e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007756:	f043 0210 	orr.w	r2, r3, #16
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007762:	f043 0201 	orr.w	r2, r3, #1
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 800776a:	2301      	movs	r3, #1
 800776c:	e007      	b.n	800777e <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	689b      	ldr	r3, [r3, #8]
 8007774:	f003 0301 	and.w	r3, r3, #1
 8007778:	2b00      	cmp	r3, #0
 800777a:	d1dc      	bne.n	8007736 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800777c:	2300      	movs	r3, #0
}
 800777e:	4618      	mov	r0, r3
 8007780:	3710      	adds	r7, #16
 8007782:	46bd      	mov	sp, r7
 8007784:	bd80      	pop	{r7, pc}

08007786 <LL_ADC_StartCalibration>:
{
 8007786:	b480      	push	{r7}
 8007788:	b083      	sub	sp, #12
 800778a:	af00      	add	r7, sp, #0
 800778c:	6078      	str	r0, [r7, #4]
 800778e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	689b      	ldr	r3, [r3, #8]
 8007794:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8007798:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800779c:	683a      	ldr	r2, [r7, #0]
 800779e:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80077a2:	4313      	orrs	r3, r2
 80077a4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	609a      	str	r2, [r3, #8]
}
 80077ac:	bf00      	nop
 80077ae:	370c      	adds	r7, #12
 80077b0:	46bd      	mov	sp, r7
 80077b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b6:	4770      	bx	lr

080077b8 <LL_ADC_IsCalibrationOnGoing>:
{
 80077b8:	b480      	push	{r7}
 80077ba:	b083      	sub	sp, #12
 80077bc:	af00      	add	r7, sp, #0
 80077be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	689b      	ldr	r3, [r3, #8]
 80077c4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80077c8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80077cc:	d101      	bne.n	80077d2 <LL_ADC_IsCalibrationOnGoing+0x1a>
 80077ce:	2301      	movs	r3, #1
 80077d0:	e000      	b.n	80077d4 <LL_ADC_IsCalibrationOnGoing+0x1c>
 80077d2:	2300      	movs	r3, #0
}
 80077d4:	4618      	mov	r0, r3
 80077d6:	370c      	adds	r7, #12
 80077d8:	46bd      	mov	sp, r7
 80077da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077de:	4770      	bx	lr

080077e0 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 80077e0:	b580      	push	{r7, lr}
 80077e2:	b084      	sub	sp, #16
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	6078      	str	r0, [r7, #4]
 80077e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80077ea:	2300      	movs	r3, #0
 80077ec:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80077f4:	2b01      	cmp	r3, #1
 80077f6:	d101      	bne.n	80077fc <HAL_ADCEx_Calibration_Start+0x1c>
 80077f8:	2302      	movs	r3, #2
 80077fa:	e04d      	b.n	8007898 <HAL_ADCEx_Calibration_Start+0xb8>
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	2201      	movs	r2, #1
 8007800:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8007804:	6878      	ldr	r0, [r7, #4]
 8007806:	f7ff ff5f 	bl	80076c8 <ADC_Disable>
 800780a:	4603      	mov	r3, r0
 800780c:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800780e:	7bfb      	ldrb	r3, [r7, #15]
 8007810:	2b00      	cmp	r3, #0
 8007812:	d136      	bne.n	8007882 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007818:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800781c:	f023 0302 	bic.w	r3, r3, #2
 8007820:	f043 0202 	orr.w	r2, r3, #2
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	659a      	str	r2, [r3, #88]	; 0x58
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	6839      	ldr	r1, [r7, #0]
 800782e:	4618      	mov	r0, r3
 8007830:	f7ff ffa9 	bl	8007786 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8007834:	e014      	b.n	8007860 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8007836:	68bb      	ldr	r3, [r7, #8]
 8007838:	3301      	adds	r3, #1
 800783a:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 800783c:	68bb      	ldr	r3, [r7, #8]
 800783e:	f5b3 2f91 	cmp.w	r3, #296960	; 0x48800
 8007842:	d30d      	bcc.n	8007860 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007848:	f023 0312 	bic.w	r3, r3, #18
 800784c:	f043 0210 	orr.w	r2, r3, #16
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	659a      	str	r2, [r3, #88]	; 0x58
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	2200      	movs	r2, #0
 8007858:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        return HAL_ERROR;
 800785c:	2301      	movs	r3, #1
 800785e:	e01b      	b.n	8007898 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	4618      	mov	r0, r3
 8007866:	f7ff ffa7 	bl	80077b8 <LL_ADC_IsCalibrationOnGoing>
 800786a:	4603      	mov	r3, r0
 800786c:	2b00      	cmp	r3, #0
 800786e:	d1e2      	bne.n	8007836 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007874:	f023 0303 	bic.w	r3, r3, #3
 8007878:	f043 0201 	orr.w	r2, r3, #1
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	659a      	str	r2, [r3, #88]	; 0x58
 8007880:	e005      	b.n	800788e <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007886:	f043 0210 	orr.w	r2, r3, #16
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	659a      	str	r2, [r3, #88]	; 0x58
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	2200      	movs	r2, #0
 8007892:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8007896:	7bfb      	ldrb	r3, [r7, #15]
}
 8007898:	4618      	mov	r0, r3
 800789a:	3710      	adds	r7, #16
 800789c:	46bd      	mov	sp, r7
 800789e:	bd80      	pop	{r7, pc}

080078a0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80078a0:	b580      	push	{r7, lr}
 80078a2:	b084      	sub	sp, #16
 80078a4:	af00      	add	r7, sp, #0
 80078a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d101      	bne.n	80078b2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80078ae:	2301      	movs	r3, #1
 80078b0:	e0ed      	b.n	8007a8e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80078b8:	b2db      	uxtb	r3, r3
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d102      	bne.n	80078c4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80078be:	6878      	ldr	r0, [r7, #4]
 80078c0:	f7fb f9ae 	bl	8002c20 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	681a      	ldr	r2, [r3, #0]
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	f042 0201 	orr.w	r2, r2, #1
 80078d2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80078d4:	f7fe fce4 	bl	80062a0 <HAL_GetTick>
 80078d8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80078da:	e012      	b.n	8007902 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80078dc:	f7fe fce0 	bl	80062a0 <HAL_GetTick>
 80078e0:	4602      	mov	r2, r0
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	1ad3      	subs	r3, r2, r3
 80078e6:	2b0a      	cmp	r3, #10
 80078e8:	d90b      	bls.n	8007902 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078ee:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	2205      	movs	r2, #5
 80078fa:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80078fe:	2301      	movs	r3, #1
 8007900:	e0c5      	b.n	8007a8e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	685b      	ldr	r3, [r3, #4]
 8007908:	f003 0301 	and.w	r3, r3, #1
 800790c:	2b00      	cmp	r3, #0
 800790e:	d0e5      	beq.n	80078dc <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	681a      	ldr	r2, [r3, #0]
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	f022 0202 	bic.w	r2, r2, #2
 800791e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007920:	f7fe fcbe 	bl	80062a0 <HAL_GetTick>
 8007924:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8007926:	e012      	b.n	800794e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8007928:	f7fe fcba 	bl	80062a0 <HAL_GetTick>
 800792c:	4602      	mov	r2, r0
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	1ad3      	subs	r3, r2, r3
 8007932:	2b0a      	cmp	r3, #10
 8007934:	d90b      	bls.n	800794e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800793a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	2205      	movs	r2, #5
 8007946:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800794a:	2301      	movs	r3, #1
 800794c:	e09f      	b.n	8007a8e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	685b      	ldr	r3, [r3, #4]
 8007954:	f003 0302 	and.w	r3, r3, #2
 8007958:	2b00      	cmp	r3, #0
 800795a:	d1e5      	bne.n	8007928 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	7e1b      	ldrb	r3, [r3, #24]
 8007960:	2b01      	cmp	r3, #1
 8007962:	d108      	bne.n	8007976 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	681a      	ldr	r2, [r3, #0]
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007972:	601a      	str	r2, [r3, #0]
 8007974:	e007      	b.n	8007986 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	681a      	ldr	r2, [r3, #0]
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007984:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	7e5b      	ldrb	r3, [r3, #25]
 800798a:	2b01      	cmp	r3, #1
 800798c:	d108      	bne.n	80079a0 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	681a      	ldr	r2, [r3, #0]
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800799c:	601a      	str	r2, [r3, #0]
 800799e:	e007      	b.n	80079b0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	681a      	ldr	r2, [r3, #0]
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80079ae:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	7e9b      	ldrb	r3, [r3, #26]
 80079b4:	2b01      	cmp	r3, #1
 80079b6:	d108      	bne.n	80079ca <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	681a      	ldr	r2, [r3, #0]
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	f042 0220 	orr.w	r2, r2, #32
 80079c6:	601a      	str	r2, [r3, #0]
 80079c8:	e007      	b.n	80079da <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	681a      	ldr	r2, [r3, #0]
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	f022 0220 	bic.w	r2, r2, #32
 80079d8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	7edb      	ldrb	r3, [r3, #27]
 80079de:	2b01      	cmp	r3, #1
 80079e0:	d108      	bne.n	80079f4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	681a      	ldr	r2, [r3, #0]
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	f022 0210 	bic.w	r2, r2, #16
 80079f0:	601a      	str	r2, [r3, #0]
 80079f2:	e007      	b.n	8007a04 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	681a      	ldr	r2, [r3, #0]
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	f042 0210 	orr.w	r2, r2, #16
 8007a02:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	7f1b      	ldrb	r3, [r3, #28]
 8007a08:	2b01      	cmp	r3, #1
 8007a0a:	d108      	bne.n	8007a1e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	681a      	ldr	r2, [r3, #0]
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	f042 0208 	orr.w	r2, r2, #8
 8007a1a:	601a      	str	r2, [r3, #0]
 8007a1c:	e007      	b.n	8007a2e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	681a      	ldr	r2, [r3, #0]
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	f022 0208 	bic.w	r2, r2, #8
 8007a2c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	7f5b      	ldrb	r3, [r3, #29]
 8007a32:	2b01      	cmp	r3, #1
 8007a34:	d108      	bne.n	8007a48 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	681a      	ldr	r2, [r3, #0]
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	f042 0204 	orr.w	r2, r2, #4
 8007a44:	601a      	str	r2, [r3, #0]
 8007a46:	e007      	b.n	8007a58 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	681a      	ldr	r2, [r3, #0]
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	f022 0204 	bic.w	r2, r2, #4
 8007a56:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	689a      	ldr	r2, [r3, #8]
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	68db      	ldr	r3, [r3, #12]
 8007a60:	431a      	orrs	r2, r3
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	691b      	ldr	r3, [r3, #16]
 8007a66:	431a      	orrs	r2, r3
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	695b      	ldr	r3, [r3, #20]
 8007a6c:	ea42 0103 	orr.w	r1, r2, r3
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	685b      	ldr	r3, [r3, #4]
 8007a74:	1e5a      	subs	r2, r3, #1
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	430a      	orrs	r2, r1
 8007a7c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	2200      	movs	r2, #0
 8007a82:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	2201      	movs	r2, #1
 8007a88:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8007a8c:	2300      	movs	r3, #0
}
 8007a8e:	4618      	mov	r0, r3
 8007a90:	3710      	adds	r7, #16
 8007a92:	46bd      	mov	sp, r7
 8007a94:	bd80      	pop	{r7, pc}
	...

08007a98 <__NVIC_SetPriorityGrouping>:
{
 8007a98:	b480      	push	{r7}
 8007a9a:	b085      	sub	sp, #20
 8007a9c:	af00      	add	r7, sp, #0
 8007a9e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	f003 0307 	and.w	r3, r3, #7
 8007aa6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007aa8:	4b0c      	ldr	r3, [pc, #48]	; (8007adc <__NVIC_SetPriorityGrouping+0x44>)
 8007aaa:	68db      	ldr	r3, [r3, #12]
 8007aac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007aae:	68ba      	ldr	r2, [r7, #8]
 8007ab0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007ab4:	4013      	ands	r3, r2
 8007ab6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007abc:	68bb      	ldr	r3, [r7, #8]
 8007abe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007ac0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8007ac4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007ac8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007aca:	4a04      	ldr	r2, [pc, #16]	; (8007adc <__NVIC_SetPriorityGrouping+0x44>)
 8007acc:	68bb      	ldr	r3, [r7, #8]
 8007ace:	60d3      	str	r3, [r2, #12]
}
 8007ad0:	bf00      	nop
 8007ad2:	3714      	adds	r7, #20
 8007ad4:	46bd      	mov	sp, r7
 8007ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ada:	4770      	bx	lr
 8007adc:	e000ed00 	.word	0xe000ed00

08007ae0 <__NVIC_GetPriorityGrouping>:
{
 8007ae0:	b480      	push	{r7}
 8007ae2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007ae4:	4b04      	ldr	r3, [pc, #16]	; (8007af8 <__NVIC_GetPriorityGrouping+0x18>)
 8007ae6:	68db      	ldr	r3, [r3, #12]
 8007ae8:	0a1b      	lsrs	r3, r3, #8
 8007aea:	f003 0307 	and.w	r3, r3, #7
}
 8007aee:	4618      	mov	r0, r3
 8007af0:	46bd      	mov	sp, r7
 8007af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af6:	4770      	bx	lr
 8007af8:	e000ed00 	.word	0xe000ed00

08007afc <__NVIC_EnableIRQ>:
{
 8007afc:	b480      	push	{r7}
 8007afe:	b083      	sub	sp, #12
 8007b00:	af00      	add	r7, sp, #0
 8007b02:	4603      	mov	r3, r0
 8007b04:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007b06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	db0b      	blt.n	8007b26 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007b0e:	79fb      	ldrb	r3, [r7, #7]
 8007b10:	f003 021f 	and.w	r2, r3, #31
 8007b14:	4907      	ldr	r1, [pc, #28]	; (8007b34 <__NVIC_EnableIRQ+0x38>)
 8007b16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007b1a:	095b      	lsrs	r3, r3, #5
 8007b1c:	2001      	movs	r0, #1
 8007b1e:	fa00 f202 	lsl.w	r2, r0, r2
 8007b22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8007b26:	bf00      	nop
 8007b28:	370c      	adds	r7, #12
 8007b2a:	46bd      	mov	sp, r7
 8007b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b30:	4770      	bx	lr
 8007b32:	bf00      	nop
 8007b34:	e000e100 	.word	0xe000e100

08007b38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007b38:	b480      	push	{r7}
 8007b3a:	b083      	sub	sp, #12
 8007b3c:	af00      	add	r7, sp, #0
 8007b3e:	4603      	mov	r3, r0
 8007b40:	6039      	str	r1, [r7, #0]
 8007b42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007b44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	db0a      	blt.n	8007b62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007b4c:	683b      	ldr	r3, [r7, #0]
 8007b4e:	b2da      	uxtb	r2, r3
 8007b50:	490c      	ldr	r1, [pc, #48]	; (8007b84 <__NVIC_SetPriority+0x4c>)
 8007b52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007b56:	0112      	lsls	r2, r2, #4
 8007b58:	b2d2      	uxtb	r2, r2
 8007b5a:	440b      	add	r3, r1
 8007b5c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007b60:	e00a      	b.n	8007b78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007b62:	683b      	ldr	r3, [r7, #0]
 8007b64:	b2da      	uxtb	r2, r3
 8007b66:	4908      	ldr	r1, [pc, #32]	; (8007b88 <__NVIC_SetPriority+0x50>)
 8007b68:	79fb      	ldrb	r3, [r7, #7]
 8007b6a:	f003 030f 	and.w	r3, r3, #15
 8007b6e:	3b04      	subs	r3, #4
 8007b70:	0112      	lsls	r2, r2, #4
 8007b72:	b2d2      	uxtb	r2, r2
 8007b74:	440b      	add	r3, r1
 8007b76:	761a      	strb	r2, [r3, #24]
}
 8007b78:	bf00      	nop
 8007b7a:	370c      	adds	r7, #12
 8007b7c:	46bd      	mov	sp, r7
 8007b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b82:	4770      	bx	lr
 8007b84:	e000e100 	.word	0xe000e100
 8007b88:	e000ed00 	.word	0xe000ed00

08007b8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007b8c:	b480      	push	{r7}
 8007b8e:	b089      	sub	sp, #36	; 0x24
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	60f8      	str	r0, [r7, #12]
 8007b94:	60b9      	str	r1, [r7, #8]
 8007b96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	f003 0307 	and.w	r3, r3, #7
 8007b9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007ba0:	69fb      	ldr	r3, [r7, #28]
 8007ba2:	f1c3 0307 	rsb	r3, r3, #7
 8007ba6:	2b04      	cmp	r3, #4
 8007ba8:	bf28      	it	cs
 8007baa:	2304      	movcs	r3, #4
 8007bac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007bae:	69fb      	ldr	r3, [r7, #28]
 8007bb0:	3304      	adds	r3, #4
 8007bb2:	2b06      	cmp	r3, #6
 8007bb4:	d902      	bls.n	8007bbc <NVIC_EncodePriority+0x30>
 8007bb6:	69fb      	ldr	r3, [r7, #28]
 8007bb8:	3b03      	subs	r3, #3
 8007bba:	e000      	b.n	8007bbe <NVIC_EncodePriority+0x32>
 8007bbc:	2300      	movs	r3, #0
 8007bbe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007bc0:	f04f 32ff 	mov.w	r2, #4294967295
 8007bc4:	69bb      	ldr	r3, [r7, #24]
 8007bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8007bca:	43da      	mvns	r2, r3
 8007bcc:	68bb      	ldr	r3, [r7, #8]
 8007bce:	401a      	ands	r2, r3
 8007bd0:	697b      	ldr	r3, [r7, #20]
 8007bd2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007bd4:	f04f 31ff 	mov.w	r1, #4294967295
 8007bd8:	697b      	ldr	r3, [r7, #20]
 8007bda:	fa01 f303 	lsl.w	r3, r1, r3
 8007bde:	43d9      	mvns	r1, r3
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007be4:	4313      	orrs	r3, r2
         );
}
 8007be6:	4618      	mov	r0, r3
 8007be8:	3724      	adds	r7, #36	; 0x24
 8007bea:	46bd      	mov	sp, r7
 8007bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf0:	4770      	bx	lr

08007bf2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007bf2:	b580      	push	{r7, lr}
 8007bf4:	b082      	sub	sp, #8
 8007bf6:	af00      	add	r7, sp, #0
 8007bf8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007bfa:	6878      	ldr	r0, [r7, #4]
 8007bfc:	f7ff ff4c 	bl	8007a98 <__NVIC_SetPriorityGrouping>
}
 8007c00:	bf00      	nop
 8007c02:	3708      	adds	r7, #8
 8007c04:	46bd      	mov	sp, r7
 8007c06:	bd80      	pop	{r7, pc}

08007c08 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007c08:	b580      	push	{r7, lr}
 8007c0a:	b086      	sub	sp, #24
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	4603      	mov	r3, r0
 8007c10:	60b9      	str	r1, [r7, #8]
 8007c12:	607a      	str	r2, [r7, #4]
 8007c14:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8007c16:	2300      	movs	r3, #0
 8007c18:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8007c1a:	f7ff ff61 	bl	8007ae0 <__NVIC_GetPriorityGrouping>
 8007c1e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007c20:	687a      	ldr	r2, [r7, #4]
 8007c22:	68b9      	ldr	r1, [r7, #8]
 8007c24:	6978      	ldr	r0, [r7, #20]
 8007c26:	f7ff ffb1 	bl	8007b8c <NVIC_EncodePriority>
 8007c2a:	4602      	mov	r2, r0
 8007c2c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007c30:	4611      	mov	r1, r2
 8007c32:	4618      	mov	r0, r3
 8007c34:	f7ff ff80 	bl	8007b38 <__NVIC_SetPriority>
}
 8007c38:	bf00      	nop
 8007c3a:	3718      	adds	r7, #24
 8007c3c:	46bd      	mov	sp, r7
 8007c3e:	bd80      	pop	{r7, pc}

08007c40 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007c40:	b580      	push	{r7, lr}
 8007c42:	b082      	sub	sp, #8
 8007c44:	af00      	add	r7, sp, #0
 8007c46:	4603      	mov	r3, r0
 8007c48:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007c4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007c4e:	4618      	mov	r0, r3
 8007c50:	f7ff ff54 	bl	8007afc <__NVIC_EnableIRQ>
}
 8007c54:	bf00      	nop
 8007c56:	3708      	adds	r7, #8
 8007c58:	46bd      	mov	sp, r7
 8007c5a:	bd80      	pop	{r7, pc}

08007c5c <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8007c5c:	b480      	push	{r7}
 8007c5e:	b085      	sub	sp, #20
 8007c60:	af00      	add	r7, sp, #0
 8007c62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007c64:	2300      	movs	r3, #0
 8007c66:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8007c6e:	b2db      	uxtb	r3, r3
 8007c70:	2b02      	cmp	r3, #2
 8007c72:	d008      	beq.n	8007c86 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	2204      	movs	r2, #4
 8007c78:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	2200      	movs	r2, #0
 8007c7e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8007c82:	2301      	movs	r3, #1
 8007c84:	e022      	b.n	8007ccc <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	681a      	ldr	r2, [r3, #0]
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	f022 020e 	bic.w	r2, r2, #14
 8007c94:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	681a      	ldr	r2, [r3, #0]
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	f022 0201 	bic.w	r2, r2, #1
 8007ca4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007caa:	f003 021c 	and.w	r2, r3, #28
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cb2:	2101      	movs	r1, #1
 8007cb4:	fa01 f202 	lsl.w	r2, r1, r2
 8007cb8:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	2201      	movs	r2, #1
 8007cbe:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	2200      	movs	r2, #0
 8007cc6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8007cca:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8007ccc:	4618      	mov	r0, r3
 8007cce:	3714      	adds	r7, #20
 8007cd0:	46bd      	mov	sp, r7
 8007cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd6:	4770      	bx	lr

08007cd8 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007cd8:	b580      	push	{r7, lr}
 8007cda:	b084      	sub	sp, #16
 8007cdc:	af00      	add	r7, sp, #0
 8007cde:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007ce0:	2300      	movs	r3, #0
 8007ce2:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8007cea:	b2db      	uxtb	r3, r3
 8007cec:	2b02      	cmp	r3, #2
 8007cee:	d005      	beq.n	8007cfc <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	2204      	movs	r2, #4
 8007cf4:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8007cf6:	2301      	movs	r3, #1
 8007cf8:	73fb      	strb	r3, [r7, #15]
 8007cfa:	e029      	b.n	8007d50 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	681a      	ldr	r2, [r3, #0]
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	f022 020e 	bic.w	r2, r2, #14
 8007d0a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	681a      	ldr	r2, [r3, #0]
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	f022 0201 	bic.w	r2, r2, #1
 8007d1a:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d20:	f003 021c 	and.w	r2, r3, #28
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d28:	2101      	movs	r1, #1
 8007d2a:	fa01 f202 	lsl.w	r2, r1, r2
 8007d2e:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	2201      	movs	r2, #1
 8007d34:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	2200      	movs	r2, #0
 8007d3c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d003      	beq.n	8007d50 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d4c:	6878      	ldr	r0, [r7, #4]
 8007d4e:	4798      	blx	r3
    }
  }
  return status;
 8007d50:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d52:	4618      	mov	r0, r3
 8007d54:	3710      	adds	r7, #16
 8007d56:	46bd      	mov	sp, r7
 8007d58:	bd80      	pop	{r7, pc}
	...

08007d5c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007d5c:	b480      	push	{r7}
 8007d5e:	b087      	sub	sp, #28
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	6078      	str	r0, [r7, #4]
 8007d64:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8007d66:	2300      	movs	r3, #0
 8007d68:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007d6a:	e154      	b.n	8008016 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8007d6c:	683b      	ldr	r3, [r7, #0]
 8007d6e:	681a      	ldr	r2, [r3, #0]
 8007d70:	2101      	movs	r1, #1
 8007d72:	697b      	ldr	r3, [r7, #20]
 8007d74:	fa01 f303 	lsl.w	r3, r1, r3
 8007d78:	4013      	ands	r3, r2
 8007d7a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	f000 8146 	beq.w	8008010 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007d84:	683b      	ldr	r3, [r7, #0]
 8007d86:	685b      	ldr	r3, [r3, #4]
 8007d88:	f003 0303 	and.w	r3, r3, #3
 8007d8c:	2b01      	cmp	r3, #1
 8007d8e:	d005      	beq.n	8007d9c <HAL_GPIO_Init+0x40>
 8007d90:	683b      	ldr	r3, [r7, #0]
 8007d92:	685b      	ldr	r3, [r3, #4]
 8007d94:	f003 0303 	and.w	r3, r3, #3
 8007d98:	2b02      	cmp	r3, #2
 8007d9a:	d130      	bne.n	8007dfe <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	689b      	ldr	r3, [r3, #8]
 8007da0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8007da2:	697b      	ldr	r3, [r7, #20]
 8007da4:	005b      	lsls	r3, r3, #1
 8007da6:	2203      	movs	r2, #3
 8007da8:	fa02 f303 	lsl.w	r3, r2, r3
 8007dac:	43db      	mvns	r3, r3
 8007dae:	693a      	ldr	r2, [r7, #16]
 8007db0:	4013      	ands	r3, r2
 8007db2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8007db4:	683b      	ldr	r3, [r7, #0]
 8007db6:	68da      	ldr	r2, [r3, #12]
 8007db8:	697b      	ldr	r3, [r7, #20]
 8007dba:	005b      	lsls	r3, r3, #1
 8007dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8007dc0:	693a      	ldr	r2, [r7, #16]
 8007dc2:	4313      	orrs	r3, r2
 8007dc4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	693a      	ldr	r2, [r7, #16]
 8007dca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	685b      	ldr	r3, [r3, #4]
 8007dd0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007dd2:	2201      	movs	r2, #1
 8007dd4:	697b      	ldr	r3, [r7, #20]
 8007dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8007dda:	43db      	mvns	r3, r3
 8007ddc:	693a      	ldr	r2, [r7, #16]
 8007dde:	4013      	ands	r3, r2
 8007de0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007de2:	683b      	ldr	r3, [r7, #0]
 8007de4:	685b      	ldr	r3, [r3, #4]
 8007de6:	091b      	lsrs	r3, r3, #4
 8007de8:	f003 0201 	and.w	r2, r3, #1
 8007dec:	697b      	ldr	r3, [r7, #20]
 8007dee:	fa02 f303 	lsl.w	r3, r2, r3
 8007df2:	693a      	ldr	r2, [r7, #16]
 8007df4:	4313      	orrs	r3, r2
 8007df6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	693a      	ldr	r2, [r7, #16]
 8007dfc:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007dfe:	683b      	ldr	r3, [r7, #0]
 8007e00:	685b      	ldr	r3, [r3, #4]
 8007e02:	f003 0303 	and.w	r3, r3, #3
 8007e06:	2b03      	cmp	r3, #3
 8007e08:	d017      	beq.n	8007e3a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	68db      	ldr	r3, [r3, #12]
 8007e0e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007e10:	697b      	ldr	r3, [r7, #20]
 8007e12:	005b      	lsls	r3, r3, #1
 8007e14:	2203      	movs	r2, #3
 8007e16:	fa02 f303 	lsl.w	r3, r2, r3
 8007e1a:	43db      	mvns	r3, r3
 8007e1c:	693a      	ldr	r2, [r7, #16]
 8007e1e:	4013      	ands	r3, r2
 8007e20:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007e22:	683b      	ldr	r3, [r7, #0]
 8007e24:	689a      	ldr	r2, [r3, #8]
 8007e26:	697b      	ldr	r3, [r7, #20]
 8007e28:	005b      	lsls	r3, r3, #1
 8007e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8007e2e:	693a      	ldr	r2, [r7, #16]
 8007e30:	4313      	orrs	r3, r2
 8007e32:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	693a      	ldr	r2, [r7, #16]
 8007e38:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007e3a:	683b      	ldr	r3, [r7, #0]
 8007e3c:	685b      	ldr	r3, [r3, #4]
 8007e3e:	f003 0303 	and.w	r3, r3, #3
 8007e42:	2b02      	cmp	r3, #2
 8007e44:	d123      	bne.n	8007e8e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8007e46:	697b      	ldr	r3, [r7, #20]
 8007e48:	08da      	lsrs	r2, r3, #3
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	3208      	adds	r2, #8
 8007e4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e52:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8007e54:	697b      	ldr	r3, [r7, #20]
 8007e56:	f003 0307 	and.w	r3, r3, #7
 8007e5a:	009b      	lsls	r3, r3, #2
 8007e5c:	220f      	movs	r2, #15
 8007e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8007e62:	43db      	mvns	r3, r3
 8007e64:	693a      	ldr	r2, [r7, #16]
 8007e66:	4013      	ands	r3, r2
 8007e68:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8007e6a:	683b      	ldr	r3, [r7, #0]
 8007e6c:	691a      	ldr	r2, [r3, #16]
 8007e6e:	697b      	ldr	r3, [r7, #20]
 8007e70:	f003 0307 	and.w	r3, r3, #7
 8007e74:	009b      	lsls	r3, r3, #2
 8007e76:	fa02 f303 	lsl.w	r3, r2, r3
 8007e7a:	693a      	ldr	r2, [r7, #16]
 8007e7c:	4313      	orrs	r3, r2
 8007e7e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8007e80:	697b      	ldr	r3, [r7, #20]
 8007e82:	08da      	lsrs	r2, r3, #3
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	3208      	adds	r2, #8
 8007e88:	6939      	ldr	r1, [r7, #16]
 8007e8a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8007e94:	697b      	ldr	r3, [r7, #20]
 8007e96:	005b      	lsls	r3, r3, #1
 8007e98:	2203      	movs	r2, #3
 8007e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8007e9e:	43db      	mvns	r3, r3
 8007ea0:	693a      	ldr	r2, [r7, #16]
 8007ea2:	4013      	ands	r3, r2
 8007ea4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8007ea6:	683b      	ldr	r3, [r7, #0]
 8007ea8:	685b      	ldr	r3, [r3, #4]
 8007eaa:	f003 0203 	and.w	r2, r3, #3
 8007eae:	697b      	ldr	r3, [r7, #20]
 8007eb0:	005b      	lsls	r3, r3, #1
 8007eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8007eb6:	693a      	ldr	r2, [r7, #16]
 8007eb8:	4313      	orrs	r3, r2
 8007eba:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	693a      	ldr	r2, [r7, #16]
 8007ec0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8007ec2:	683b      	ldr	r3, [r7, #0]
 8007ec4:	685b      	ldr	r3, [r3, #4]
 8007ec6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	f000 80a0 	beq.w	8008010 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007ed0:	4b58      	ldr	r3, [pc, #352]	; (8008034 <HAL_GPIO_Init+0x2d8>)
 8007ed2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007ed4:	4a57      	ldr	r2, [pc, #348]	; (8008034 <HAL_GPIO_Init+0x2d8>)
 8007ed6:	f043 0301 	orr.w	r3, r3, #1
 8007eda:	6613      	str	r3, [r2, #96]	; 0x60
 8007edc:	4b55      	ldr	r3, [pc, #340]	; (8008034 <HAL_GPIO_Init+0x2d8>)
 8007ede:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007ee0:	f003 0301 	and.w	r3, r3, #1
 8007ee4:	60bb      	str	r3, [r7, #8]
 8007ee6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8007ee8:	4a53      	ldr	r2, [pc, #332]	; (8008038 <HAL_GPIO_Init+0x2dc>)
 8007eea:	697b      	ldr	r3, [r7, #20]
 8007eec:	089b      	lsrs	r3, r3, #2
 8007eee:	3302      	adds	r3, #2
 8007ef0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007ef4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8007ef6:	697b      	ldr	r3, [r7, #20]
 8007ef8:	f003 0303 	and.w	r3, r3, #3
 8007efc:	009b      	lsls	r3, r3, #2
 8007efe:	220f      	movs	r2, #15
 8007f00:	fa02 f303 	lsl.w	r3, r2, r3
 8007f04:	43db      	mvns	r3, r3
 8007f06:	693a      	ldr	r2, [r7, #16]
 8007f08:	4013      	ands	r3, r2
 8007f0a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8007f12:	d019      	beq.n	8007f48 <HAL_GPIO_Init+0x1ec>
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	4a49      	ldr	r2, [pc, #292]	; (800803c <HAL_GPIO_Init+0x2e0>)
 8007f18:	4293      	cmp	r3, r2
 8007f1a:	d013      	beq.n	8007f44 <HAL_GPIO_Init+0x1e8>
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	4a48      	ldr	r2, [pc, #288]	; (8008040 <HAL_GPIO_Init+0x2e4>)
 8007f20:	4293      	cmp	r3, r2
 8007f22:	d00d      	beq.n	8007f40 <HAL_GPIO_Init+0x1e4>
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	4a47      	ldr	r2, [pc, #284]	; (8008044 <HAL_GPIO_Init+0x2e8>)
 8007f28:	4293      	cmp	r3, r2
 8007f2a:	d007      	beq.n	8007f3c <HAL_GPIO_Init+0x1e0>
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	4a46      	ldr	r2, [pc, #280]	; (8008048 <HAL_GPIO_Init+0x2ec>)
 8007f30:	4293      	cmp	r3, r2
 8007f32:	d101      	bne.n	8007f38 <HAL_GPIO_Init+0x1dc>
 8007f34:	2304      	movs	r3, #4
 8007f36:	e008      	b.n	8007f4a <HAL_GPIO_Init+0x1ee>
 8007f38:	2307      	movs	r3, #7
 8007f3a:	e006      	b.n	8007f4a <HAL_GPIO_Init+0x1ee>
 8007f3c:	2303      	movs	r3, #3
 8007f3e:	e004      	b.n	8007f4a <HAL_GPIO_Init+0x1ee>
 8007f40:	2302      	movs	r3, #2
 8007f42:	e002      	b.n	8007f4a <HAL_GPIO_Init+0x1ee>
 8007f44:	2301      	movs	r3, #1
 8007f46:	e000      	b.n	8007f4a <HAL_GPIO_Init+0x1ee>
 8007f48:	2300      	movs	r3, #0
 8007f4a:	697a      	ldr	r2, [r7, #20]
 8007f4c:	f002 0203 	and.w	r2, r2, #3
 8007f50:	0092      	lsls	r2, r2, #2
 8007f52:	4093      	lsls	r3, r2
 8007f54:	693a      	ldr	r2, [r7, #16]
 8007f56:	4313      	orrs	r3, r2
 8007f58:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8007f5a:	4937      	ldr	r1, [pc, #220]	; (8008038 <HAL_GPIO_Init+0x2dc>)
 8007f5c:	697b      	ldr	r3, [r7, #20]
 8007f5e:	089b      	lsrs	r3, r3, #2
 8007f60:	3302      	adds	r3, #2
 8007f62:	693a      	ldr	r2, [r7, #16]
 8007f64:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007f68:	4b38      	ldr	r3, [pc, #224]	; (800804c <HAL_GPIO_Init+0x2f0>)
 8007f6a:	689b      	ldr	r3, [r3, #8]
 8007f6c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	43db      	mvns	r3, r3
 8007f72:	693a      	ldr	r2, [r7, #16]
 8007f74:	4013      	ands	r3, r2
 8007f76:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8007f78:	683b      	ldr	r3, [r7, #0]
 8007f7a:	685b      	ldr	r3, [r3, #4]
 8007f7c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d003      	beq.n	8007f8c <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8007f84:	693a      	ldr	r2, [r7, #16]
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	4313      	orrs	r3, r2
 8007f8a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8007f8c:	4a2f      	ldr	r2, [pc, #188]	; (800804c <HAL_GPIO_Init+0x2f0>)
 8007f8e:	693b      	ldr	r3, [r7, #16]
 8007f90:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8007f92:	4b2e      	ldr	r3, [pc, #184]	; (800804c <HAL_GPIO_Init+0x2f0>)
 8007f94:	68db      	ldr	r3, [r3, #12]
 8007f96:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	43db      	mvns	r3, r3
 8007f9c:	693a      	ldr	r2, [r7, #16]
 8007f9e:	4013      	ands	r3, r2
 8007fa0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8007fa2:	683b      	ldr	r3, [r7, #0]
 8007fa4:	685b      	ldr	r3, [r3, #4]
 8007fa6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d003      	beq.n	8007fb6 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8007fae:	693a      	ldr	r2, [r7, #16]
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	4313      	orrs	r3, r2
 8007fb4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8007fb6:	4a25      	ldr	r2, [pc, #148]	; (800804c <HAL_GPIO_Init+0x2f0>)
 8007fb8:	693b      	ldr	r3, [r7, #16]
 8007fba:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8007fbc:	4b23      	ldr	r3, [pc, #140]	; (800804c <HAL_GPIO_Init+0x2f0>)
 8007fbe:	685b      	ldr	r3, [r3, #4]
 8007fc0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	43db      	mvns	r3, r3
 8007fc6:	693a      	ldr	r2, [r7, #16]
 8007fc8:	4013      	ands	r3, r2
 8007fca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8007fcc:	683b      	ldr	r3, [r7, #0]
 8007fce:	685b      	ldr	r3, [r3, #4]
 8007fd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d003      	beq.n	8007fe0 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8007fd8:	693a      	ldr	r2, [r7, #16]
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	4313      	orrs	r3, r2
 8007fde:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8007fe0:	4a1a      	ldr	r2, [pc, #104]	; (800804c <HAL_GPIO_Init+0x2f0>)
 8007fe2:	693b      	ldr	r3, [r7, #16]
 8007fe4:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8007fe6:	4b19      	ldr	r3, [pc, #100]	; (800804c <HAL_GPIO_Init+0x2f0>)
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	43db      	mvns	r3, r3
 8007ff0:	693a      	ldr	r2, [r7, #16]
 8007ff2:	4013      	ands	r3, r2
 8007ff4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8007ff6:	683b      	ldr	r3, [r7, #0]
 8007ff8:	685b      	ldr	r3, [r3, #4]
 8007ffa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d003      	beq.n	800800a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8008002:	693a      	ldr	r2, [r7, #16]
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	4313      	orrs	r3, r2
 8008008:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800800a:	4a10      	ldr	r2, [pc, #64]	; (800804c <HAL_GPIO_Init+0x2f0>)
 800800c:	693b      	ldr	r3, [r7, #16]
 800800e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8008010:	697b      	ldr	r3, [r7, #20]
 8008012:	3301      	adds	r3, #1
 8008014:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008016:	683b      	ldr	r3, [r7, #0]
 8008018:	681a      	ldr	r2, [r3, #0]
 800801a:	697b      	ldr	r3, [r7, #20]
 800801c:	fa22 f303 	lsr.w	r3, r2, r3
 8008020:	2b00      	cmp	r3, #0
 8008022:	f47f aea3 	bne.w	8007d6c <HAL_GPIO_Init+0x10>
  }
}
 8008026:	bf00      	nop
 8008028:	bf00      	nop
 800802a:	371c      	adds	r7, #28
 800802c:	46bd      	mov	sp, r7
 800802e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008032:	4770      	bx	lr
 8008034:	40021000 	.word	0x40021000
 8008038:	40010000 	.word	0x40010000
 800803c:	48000400 	.word	0x48000400
 8008040:	48000800 	.word	0x48000800
 8008044:	48000c00 	.word	0x48000c00
 8008048:	48001000 	.word	0x48001000
 800804c:	40010400 	.word	0x40010400

08008050 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008050:	b480      	push	{r7}
 8008052:	b083      	sub	sp, #12
 8008054:	af00      	add	r7, sp, #0
 8008056:	6078      	str	r0, [r7, #4]
 8008058:	460b      	mov	r3, r1
 800805a:	807b      	strh	r3, [r7, #2]
 800805c:	4613      	mov	r3, r2
 800805e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8008060:	787b      	ldrb	r3, [r7, #1]
 8008062:	2b00      	cmp	r3, #0
 8008064:	d003      	beq.n	800806e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8008066:	887a      	ldrh	r2, [r7, #2]
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800806c:	e002      	b.n	8008074 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800806e:	887a      	ldrh	r2, [r7, #2]
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	629a      	str	r2, [r3, #40]	; 0x28
}
 8008074:	bf00      	nop
 8008076:	370c      	adds	r7, #12
 8008078:	46bd      	mov	sp, r7
 800807a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800807e:	4770      	bx	lr

08008080 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8008080:	b480      	push	{r7}
 8008082:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8008084:	4b04      	ldr	r3, [pc, #16]	; (8008098 <HAL_PWREx_GetVoltageRange+0x18>)
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800808c:	4618      	mov	r0, r3
 800808e:	46bd      	mov	sp, r7
 8008090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008094:	4770      	bx	lr
 8008096:	bf00      	nop
 8008098:	40007000 	.word	0x40007000

0800809c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800809c:	b480      	push	{r7}
 800809e:	b085      	sub	sp, #20
 80080a0:	af00      	add	r7, sp, #0
 80080a2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80080aa:	d130      	bne.n	800810e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80080ac:	4b23      	ldr	r3, [pc, #140]	; (800813c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80080b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80080b8:	d038      	beq.n	800812c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80080ba:	4b20      	ldr	r3, [pc, #128]	; (800813c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80080c2:	4a1e      	ldr	r2, [pc, #120]	; (800813c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80080c4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80080c8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80080ca:	4b1d      	ldr	r3, [pc, #116]	; (8008140 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	2232      	movs	r2, #50	; 0x32
 80080d0:	fb02 f303 	mul.w	r3, r2, r3
 80080d4:	4a1b      	ldr	r2, [pc, #108]	; (8008144 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80080d6:	fba2 2303 	umull	r2, r3, r2, r3
 80080da:	0c9b      	lsrs	r3, r3, #18
 80080dc:	3301      	adds	r3, #1
 80080de:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80080e0:	e002      	b.n	80080e8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	3b01      	subs	r3, #1
 80080e6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80080e8:	4b14      	ldr	r3, [pc, #80]	; (800813c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80080ea:	695b      	ldr	r3, [r3, #20]
 80080ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80080f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80080f4:	d102      	bne.n	80080fc <HAL_PWREx_ControlVoltageScaling+0x60>
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d1f2      	bne.n	80080e2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80080fc:	4b0f      	ldr	r3, [pc, #60]	; (800813c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80080fe:	695b      	ldr	r3, [r3, #20]
 8008100:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008104:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008108:	d110      	bne.n	800812c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800810a:	2303      	movs	r3, #3
 800810c:	e00f      	b.n	800812e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800810e:	4b0b      	ldr	r3, [pc, #44]	; (800813c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008116:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800811a:	d007      	beq.n	800812c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800811c:	4b07      	ldr	r3, [pc, #28]	; (800813c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8008124:	4a05      	ldr	r2, [pc, #20]	; (800813c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8008126:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800812a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800812c:	2300      	movs	r3, #0
}
 800812e:	4618      	mov	r0, r3
 8008130:	3714      	adds	r7, #20
 8008132:	46bd      	mov	sp, r7
 8008134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008138:	4770      	bx	lr
 800813a:	bf00      	nop
 800813c:	40007000 	.word	0x40007000
 8008140:	20000028 	.word	0x20000028
 8008144:	431bde83 	.word	0x431bde83

08008148 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008148:	b580      	push	{r7, lr}
 800814a:	b088      	sub	sp, #32
 800814c:	af00      	add	r7, sp, #0
 800814e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	2b00      	cmp	r3, #0
 8008154:	d102      	bne.n	800815c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8008156:	2301      	movs	r3, #1
 8008158:	f000 bc02 	b.w	8008960 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800815c:	4b96      	ldr	r3, [pc, #600]	; (80083b8 <HAL_RCC_OscConfig+0x270>)
 800815e:	689b      	ldr	r3, [r3, #8]
 8008160:	f003 030c 	and.w	r3, r3, #12
 8008164:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008166:	4b94      	ldr	r3, [pc, #592]	; (80083b8 <HAL_RCC_OscConfig+0x270>)
 8008168:	68db      	ldr	r3, [r3, #12]
 800816a:	f003 0303 	and.w	r3, r3, #3
 800816e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	f003 0310 	and.w	r3, r3, #16
 8008178:	2b00      	cmp	r3, #0
 800817a:	f000 80e4 	beq.w	8008346 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800817e:	69bb      	ldr	r3, [r7, #24]
 8008180:	2b00      	cmp	r3, #0
 8008182:	d007      	beq.n	8008194 <HAL_RCC_OscConfig+0x4c>
 8008184:	69bb      	ldr	r3, [r7, #24]
 8008186:	2b0c      	cmp	r3, #12
 8008188:	f040 808b 	bne.w	80082a2 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800818c:	697b      	ldr	r3, [r7, #20]
 800818e:	2b01      	cmp	r3, #1
 8008190:	f040 8087 	bne.w	80082a2 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8008194:	4b88      	ldr	r3, [pc, #544]	; (80083b8 <HAL_RCC_OscConfig+0x270>)
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	f003 0302 	and.w	r3, r3, #2
 800819c:	2b00      	cmp	r3, #0
 800819e:	d005      	beq.n	80081ac <HAL_RCC_OscConfig+0x64>
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	699b      	ldr	r3, [r3, #24]
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d101      	bne.n	80081ac <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80081a8:	2301      	movs	r3, #1
 80081aa:	e3d9      	b.n	8008960 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	6a1a      	ldr	r2, [r3, #32]
 80081b0:	4b81      	ldr	r3, [pc, #516]	; (80083b8 <HAL_RCC_OscConfig+0x270>)
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	f003 0308 	and.w	r3, r3, #8
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d004      	beq.n	80081c6 <HAL_RCC_OscConfig+0x7e>
 80081bc:	4b7e      	ldr	r3, [pc, #504]	; (80083b8 <HAL_RCC_OscConfig+0x270>)
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80081c4:	e005      	b.n	80081d2 <HAL_RCC_OscConfig+0x8a>
 80081c6:	4b7c      	ldr	r3, [pc, #496]	; (80083b8 <HAL_RCC_OscConfig+0x270>)
 80081c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80081cc:	091b      	lsrs	r3, r3, #4
 80081ce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80081d2:	4293      	cmp	r3, r2
 80081d4:	d223      	bcs.n	800821e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	6a1b      	ldr	r3, [r3, #32]
 80081da:	4618      	mov	r0, r3
 80081dc:	f000 fdbe 	bl	8008d5c <RCC_SetFlashLatencyFromMSIRange>
 80081e0:	4603      	mov	r3, r0
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d001      	beq.n	80081ea <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80081e6:	2301      	movs	r3, #1
 80081e8:	e3ba      	b.n	8008960 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80081ea:	4b73      	ldr	r3, [pc, #460]	; (80083b8 <HAL_RCC_OscConfig+0x270>)
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	4a72      	ldr	r2, [pc, #456]	; (80083b8 <HAL_RCC_OscConfig+0x270>)
 80081f0:	f043 0308 	orr.w	r3, r3, #8
 80081f4:	6013      	str	r3, [r2, #0]
 80081f6:	4b70      	ldr	r3, [pc, #448]	; (80083b8 <HAL_RCC_OscConfig+0x270>)
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	6a1b      	ldr	r3, [r3, #32]
 8008202:	496d      	ldr	r1, [pc, #436]	; (80083b8 <HAL_RCC_OscConfig+0x270>)
 8008204:	4313      	orrs	r3, r2
 8008206:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8008208:	4b6b      	ldr	r3, [pc, #428]	; (80083b8 <HAL_RCC_OscConfig+0x270>)
 800820a:	685b      	ldr	r3, [r3, #4]
 800820c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	69db      	ldr	r3, [r3, #28]
 8008214:	021b      	lsls	r3, r3, #8
 8008216:	4968      	ldr	r1, [pc, #416]	; (80083b8 <HAL_RCC_OscConfig+0x270>)
 8008218:	4313      	orrs	r3, r2
 800821a:	604b      	str	r3, [r1, #4]
 800821c:	e025      	b.n	800826a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800821e:	4b66      	ldr	r3, [pc, #408]	; (80083b8 <HAL_RCC_OscConfig+0x270>)
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	4a65      	ldr	r2, [pc, #404]	; (80083b8 <HAL_RCC_OscConfig+0x270>)
 8008224:	f043 0308 	orr.w	r3, r3, #8
 8008228:	6013      	str	r3, [r2, #0]
 800822a:	4b63      	ldr	r3, [pc, #396]	; (80083b8 <HAL_RCC_OscConfig+0x270>)
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	6a1b      	ldr	r3, [r3, #32]
 8008236:	4960      	ldr	r1, [pc, #384]	; (80083b8 <HAL_RCC_OscConfig+0x270>)
 8008238:	4313      	orrs	r3, r2
 800823a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800823c:	4b5e      	ldr	r3, [pc, #376]	; (80083b8 <HAL_RCC_OscConfig+0x270>)
 800823e:	685b      	ldr	r3, [r3, #4]
 8008240:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	69db      	ldr	r3, [r3, #28]
 8008248:	021b      	lsls	r3, r3, #8
 800824a:	495b      	ldr	r1, [pc, #364]	; (80083b8 <HAL_RCC_OscConfig+0x270>)
 800824c:	4313      	orrs	r3, r2
 800824e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8008250:	69bb      	ldr	r3, [r7, #24]
 8008252:	2b00      	cmp	r3, #0
 8008254:	d109      	bne.n	800826a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	6a1b      	ldr	r3, [r3, #32]
 800825a:	4618      	mov	r0, r3
 800825c:	f000 fd7e 	bl	8008d5c <RCC_SetFlashLatencyFromMSIRange>
 8008260:	4603      	mov	r3, r0
 8008262:	2b00      	cmp	r3, #0
 8008264:	d001      	beq.n	800826a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8008266:	2301      	movs	r3, #1
 8008268:	e37a      	b.n	8008960 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800826a:	f000 fc81 	bl	8008b70 <HAL_RCC_GetSysClockFreq>
 800826e:	4602      	mov	r2, r0
 8008270:	4b51      	ldr	r3, [pc, #324]	; (80083b8 <HAL_RCC_OscConfig+0x270>)
 8008272:	689b      	ldr	r3, [r3, #8]
 8008274:	091b      	lsrs	r3, r3, #4
 8008276:	f003 030f 	and.w	r3, r3, #15
 800827a:	4950      	ldr	r1, [pc, #320]	; (80083bc <HAL_RCC_OscConfig+0x274>)
 800827c:	5ccb      	ldrb	r3, [r1, r3]
 800827e:	f003 031f 	and.w	r3, r3, #31
 8008282:	fa22 f303 	lsr.w	r3, r2, r3
 8008286:	4a4e      	ldr	r2, [pc, #312]	; (80083c0 <HAL_RCC_OscConfig+0x278>)
 8008288:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800828a:	4b4e      	ldr	r3, [pc, #312]	; (80083c4 <HAL_RCC_OscConfig+0x27c>)
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	4618      	mov	r0, r3
 8008290:	f7fd f8ae 	bl	80053f0 <HAL_InitTick>
 8008294:	4603      	mov	r3, r0
 8008296:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8008298:	7bfb      	ldrb	r3, [r7, #15]
 800829a:	2b00      	cmp	r3, #0
 800829c:	d052      	beq.n	8008344 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800829e:	7bfb      	ldrb	r3, [r7, #15]
 80082a0:	e35e      	b.n	8008960 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	699b      	ldr	r3, [r3, #24]
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d032      	beq.n	8008310 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80082aa:	4b43      	ldr	r3, [pc, #268]	; (80083b8 <HAL_RCC_OscConfig+0x270>)
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	4a42      	ldr	r2, [pc, #264]	; (80083b8 <HAL_RCC_OscConfig+0x270>)
 80082b0:	f043 0301 	orr.w	r3, r3, #1
 80082b4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80082b6:	f7fd fff3 	bl	80062a0 <HAL_GetTick>
 80082ba:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80082bc:	e008      	b.n	80082d0 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80082be:	f7fd ffef 	bl	80062a0 <HAL_GetTick>
 80082c2:	4602      	mov	r2, r0
 80082c4:	693b      	ldr	r3, [r7, #16]
 80082c6:	1ad3      	subs	r3, r2, r3
 80082c8:	2b02      	cmp	r3, #2
 80082ca:	d901      	bls.n	80082d0 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80082cc:	2303      	movs	r3, #3
 80082ce:	e347      	b.n	8008960 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80082d0:	4b39      	ldr	r3, [pc, #228]	; (80083b8 <HAL_RCC_OscConfig+0x270>)
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	f003 0302 	and.w	r3, r3, #2
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d0f0      	beq.n	80082be <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80082dc:	4b36      	ldr	r3, [pc, #216]	; (80083b8 <HAL_RCC_OscConfig+0x270>)
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	4a35      	ldr	r2, [pc, #212]	; (80083b8 <HAL_RCC_OscConfig+0x270>)
 80082e2:	f043 0308 	orr.w	r3, r3, #8
 80082e6:	6013      	str	r3, [r2, #0]
 80082e8:	4b33      	ldr	r3, [pc, #204]	; (80083b8 <HAL_RCC_OscConfig+0x270>)
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	6a1b      	ldr	r3, [r3, #32]
 80082f4:	4930      	ldr	r1, [pc, #192]	; (80083b8 <HAL_RCC_OscConfig+0x270>)
 80082f6:	4313      	orrs	r3, r2
 80082f8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80082fa:	4b2f      	ldr	r3, [pc, #188]	; (80083b8 <HAL_RCC_OscConfig+0x270>)
 80082fc:	685b      	ldr	r3, [r3, #4]
 80082fe:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	69db      	ldr	r3, [r3, #28]
 8008306:	021b      	lsls	r3, r3, #8
 8008308:	492b      	ldr	r1, [pc, #172]	; (80083b8 <HAL_RCC_OscConfig+0x270>)
 800830a:	4313      	orrs	r3, r2
 800830c:	604b      	str	r3, [r1, #4]
 800830e:	e01a      	b.n	8008346 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8008310:	4b29      	ldr	r3, [pc, #164]	; (80083b8 <HAL_RCC_OscConfig+0x270>)
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	4a28      	ldr	r2, [pc, #160]	; (80083b8 <HAL_RCC_OscConfig+0x270>)
 8008316:	f023 0301 	bic.w	r3, r3, #1
 800831a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800831c:	f7fd ffc0 	bl	80062a0 <HAL_GetTick>
 8008320:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8008322:	e008      	b.n	8008336 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8008324:	f7fd ffbc 	bl	80062a0 <HAL_GetTick>
 8008328:	4602      	mov	r2, r0
 800832a:	693b      	ldr	r3, [r7, #16]
 800832c:	1ad3      	subs	r3, r2, r3
 800832e:	2b02      	cmp	r3, #2
 8008330:	d901      	bls.n	8008336 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8008332:	2303      	movs	r3, #3
 8008334:	e314      	b.n	8008960 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8008336:	4b20      	ldr	r3, [pc, #128]	; (80083b8 <HAL_RCC_OscConfig+0x270>)
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	f003 0302 	and.w	r3, r3, #2
 800833e:	2b00      	cmp	r3, #0
 8008340:	d1f0      	bne.n	8008324 <HAL_RCC_OscConfig+0x1dc>
 8008342:	e000      	b.n	8008346 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8008344:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	f003 0301 	and.w	r3, r3, #1
 800834e:	2b00      	cmp	r3, #0
 8008350:	d073      	beq.n	800843a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8008352:	69bb      	ldr	r3, [r7, #24]
 8008354:	2b08      	cmp	r3, #8
 8008356:	d005      	beq.n	8008364 <HAL_RCC_OscConfig+0x21c>
 8008358:	69bb      	ldr	r3, [r7, #24]
 800835a:	2b0c      	cmp	r3, #12
 800835c:	d10e      	bne.n	800837c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800835e:	697b      	ldr	r3, [r7, #20]
 8008360:	2b03      	cmp	r3, #3
 8008362:	d10b      	bne.n	800837c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008364:	4b14      	ldr	r3, [pc, #80]	; (80083b8 <HAL_RCC_OscConfig+0x270>)
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800836c:	2b00      	cmp	r3, #0
 800836e:	d063      	beq.n	8008438 <HAL_RCC_OscConfig+0x2f0>
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	685b      	ldr	r3, [r3, #4]
 8008374:	2b00      	cmp	r3, #0
 8008376:	d15f      	bne.n	8008438 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8008378:	2301      	movs	r3, #1
 800837a:	e2f1      	b.n	8008960 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	685b      	ldr	r3, [r3, #4]
 8008380:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008384:	d106      	bne.n	8008394 <HAL_RCC_OscConfig+0x24c>
 8008386:	4b0c      	ldr	r3, [pc, #48]	; (80083b8 <HAL_RCC_OscConfig+0x270>)
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	4a0b      	ldr	r2, [pc, #44]	; (80083b8 <HAL_RCC_OscConfig+0x270>)
 800838c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008390:	6013      	str	r3, [r2, #0]
 8008392:	e025      	b.n	80083e0 <HAL_RCC_OscConfig+0x298>
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	685b      	ldr	r3, [r3, #4]
 8008398:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800839c:	d114      	bne.n	80083c8 <HAL_RCC_OscConfig+0x280>
 800839e:	4b06      	ldr	r3, [pc, #24]	; (80083b8 <HAL_RCC_OscConfig+0x270>)
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	4a05      	ldr	r2, [pc, #20]	; (80083b8 <HAL_RCC_OscConfig+0x270>)
 80083a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80083a8:	6013      	str	r3, [r2, #0]
 80083aa:	4b03      	ldr	r3, [pc, #12]	; (80083b8 <HAL_RCC_OscConfig+0x270>)
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	4a02      	ldr	r2, [pc, #8]	; (80083b8 <HAL_RCC_OscConfig+0x270>)
 80083b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80083b4:	6013      	str	r3, [r2, #0]
 80083b6:	e013      	b.n	80083e0 <HAL_RCC_OscConfig+0x298>
 80083b8:	40021000 	.word	0x40021000
 80083bc:	08012a68 	.word	0x08012a68
 80083c0:	20000028 	.word	0x20000028
 80083c4:	2000002c 	.word	0x2000002c
 80083c8:	4ba0      	ldr	r3, [pc, #640]	; (800864c <HAL_RCC_OscConfig+0x504>)
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	4a9f      	ldr	r2, [pc, #636]	; (800864c <HAL_RCC_OscConfig+0x504>)
 80083ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80083d2:	6013      	str	r3, [r2, #0]
 80083d4:	4b9d      	ldr	r3, [pc, #628]	; (800864c <HAL_RCC_OscConfig+0x504>)
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	4a9c      	ldr	r2, [pc, #624]	; (800864c <HAL_RCC_OscConfig+0x504>)
 80083da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80083de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	685b      	ldr	r3, [r3, #4]
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d013      	beq.n	8008410 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80083e8:	f7fd ff5a 	bl	80062a0 <HAL_GetTick>
 80083ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80083ee:	e008      	b.n	8008402 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80083f0:	f7fd ff56 	bl	80062a0 <HAL_GetTick>
 80083f4:	4602      	mov	r2, r0
 80083f6:	693b      	ldr	r3, [r7, #16]
 80083f8:	1ad3      	subs	r3, r2, r3
 80083fa:	2b64      	cmp	r3, #100	; 0x64
 80083fc:	d901      	bls.n	8008402 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80083fe:	2303      	movs	r3, #3
 8008400:	e2ae      	b.n	8008960 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008402:	4b92      	ldr	r3, [pc, #584]	; (800864c <HAL_RCC_OscConfig+0x504>)
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800840a:	2b00      	cmp	r3, #0
 800840c:	d0f0      	beq.n	80083f0 <HAL_RCC_OscConfig+0x2a8>
 800840e:	e014      	b.n	800843a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008410:	f7fd ff46 	bl	80062a0 <HAL_GetTick>
 8008414:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8008416:	e008      	b.n	800842a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008418:	f7fd ff42 	bl	80062a0 <HAL_GetTick>
 800841c:	4602      	mov	r2, r0
 800841e:	693b      	ldr	r3, [r7, #16]
 8008420:	1ad3      	subs	r3, r2, r3
 8008422:	2b64      	cmp	r3, #100	; 0x64
 8008424:	d901      	bls.n	800842a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8008426:	2303      	movs	r3, #3
 8008428:	e29a      	b.n	8008960 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800842a:	4b88      	ldr	r3, [pc, #544]	; (800864c <HAL_RCC_OscConfig+0x504>)
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008432:	2b00      	cmp	r3, #0
 8008434:	d1f0      	bne.n	8008418 <HAL_RCC_OscConfig+0x2d0>
 8008436:	e000      	b.n	800843a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008438:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	f003 0302 	and.w	r3, r3, #2
 8008442:	2b00      	cmp	r3, #0
 8008444:	d060      	beq.n	8008508 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8008446:	69bb      	ldr	r3, [r7, #24]
 8008448:	2b04      	cmp	r3, #4
 800844a:	d005      	beq.n	8008458 <HAL_RCC_OscConfig+0x310>
 800844c:	69bb      	ldr	r3, [r7, #24]
 800844e:	2b0c      	cmp	r3, #12
 8008450:	d119      	bne.n	8008486 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8008452:	697b      	ldr	r3, [r7, #20]
 8008454:	2b02      	cmp	r3, #2
 8008456:	d116      	bne.n	8008486 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008458:	4b7c      	ldr	r3, [pc, #496]	; (800864c <HAL_RCC_OscConfig+0x504>)
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008460:	2b00      	cmp	r3, #0
 8008462:	d005      	beq.n	8008470 <HAL_RCC_OscConfig+0x328>
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	68db      	ldr	r3, [r3, #12]
 8008468:	2b00      	cmp	r3, #0
 800846a:	d101      	bne.n	8008470 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800846c:	2301      	movs	r3, #1
 800846e:	e277      	b.n	8008960 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008470:	4b76      	ldr	r3, [pc, #472]	; (800864c <HAL_RCC_OscConfig+0x504>)
 8008472:	685b      	ldr	r3, [r3, #4]
 8008474:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	691b      	ldr	r3, [r3, #16]
 800847c:	061b      	lsls	r3, r3, #24
 800847e:	4973      	ldr	r1, [pc, #460]	; (800864c <HAL_RCC_OscConfig+0x504>)
 8008480:	4313      	orrs	r3, r2
 8008482:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008484:	e040      	b.n	8008508 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	68db      	ldr	r3, [r3, #12]
 800848a:	2b00      	cmp	r3, #0
 800848c:	d023      	beq.n	80084d6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800848e:	4b6f      	ldr	r3, [pc, #444]	; (800864c <HAL_RCC_OscConfig+0x504>)
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	4a6e      	ldr	r2, [pc, #440]	; (800864c <HAL_RCC_OscConfig+0x504>)
 8008494:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008498:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800849a:	f7fd ff01 	bl	80062a0 <HAL_GetTick>
 800849e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80084a0:	e008      	b.n	80084b4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80084a2:	f7fd fefd 	bl	80062a0 <HAL_GetTick>
 80084a6:	4602      	mov	r2, r0
 80084a8:	693b      	ldr	r3, [r7, #16]
 80084aa:	1ad3      	subs	r3, r2, r3
 80084ac:	2b02      	cmp	r3, #2
 80084ae:	d901      	bls.n	80084b4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80084b0:	2303      	movs	r3, #3
 80084b2:	e255      	b.n	8008960 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80084b4:	4b65      	ldr	r3, [pc, #404]	; (800864c <HAL_RCC_OscConfig+0x504>)
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d0f0      	beq.n	80084a2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80084c0:	4b62      	ldr	r3, [pc, #392]	; (800864c <HAL_RCC_OscConfig+0x504>)
 80084c2:	685b      	ldr	r3, [r3, #4]
 80084c4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	691b      	ldr	r3, [r3, #16]
 80084cc:	061b      	lsls	r3, r3, #24
 80084ce:	495f      	ldr	r1, [pc, #380]	; (800864c <HAL_RCC_OscConfig+0x504>)
 80084d0:	4313      	orrs	r3, r2
 80084d2:	604b      	str	r3, [r1, #4]
 80084d4:	e018      	b.n	8008508 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80084d6:	4b5d      	ldr	r3, [pc, #372]	; (800864c <HAL_RCC_OscConfig+0x504>)
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	4a5c      	ldr	r2, [pc, #368]	; (800864c <HAL_RCC_OscConfig+0x504>)
 80084dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80084e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80084e2:	f7fd fedd 	bl	80062a0 <HAL_GetTick>
 80084e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80084e8:	e008      	b.n	80084fc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80084ea:	f7fd fed9 	bl	80062a0 <HAL_GetTick>
 80084ee:	4602      	mov	r2, r0
 80084f0:	693b      	ldr	r3, [r7, #16]
 80084f2:	1ad3      	subs	r3, r2, r3
 80084f4:	2b02      	cmp	r3, #2
 80084f6:	d901      	bls.n	80084fc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80084f8:	2303      	movs	r3, #3
 80084fa:	e231      	b.n	8008960 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80084fc:	4b53      	ldr	r3, [pc, #332]	; (800864c <HAL_RCC_OscConfig+0x504>)
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008504:	2b00      	cmp	r3, #0
 8008506:	d1f0      	bne.n	80084ea <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	f003 0308 	and.w	r3, r3, #8
 8008510:	2b00      	cmp	r3, #0
 8008512:	d03c      	beq.n	800858e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	695b      	ldr	r3, [r3, #20]
 8008518:	2b00      	cmp	r3, #0
 800851a:	d01c      	beq.n	8008556 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800851c:	4b4b      	ldr	r3, [pc, #300]	; (800864c <HAL_RCC_OscConfig+0x504>)
 800851e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008522:	4a4a      	ldr	r2, [pc, #296]	; (800864c <HAL_RCC_OscConfig+0x504>)
 8008524:	f043 0301 	orr.w	r3, r3, #1
 8008528:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800852c:	f7fd feb8 	bl	80062a0 <HAL_GetTick>
 8008530:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008532:	e008      	b.n	8008546 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008534:	f7fd feb4 	bl	80062a0 <HAL_GetTick>
 8008538:	4602      	mov	r2, r0
 800853a:	693b      	ldr	r3, [r7, #16]
 800853c:	1ad3      	subs	r3, r2, r3
 800853e:	2b02      	cmp	r3, #2
 8008540:	d901      	bls.n	8008546 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8008542:	2303      	movs	r3, #3
 8008544:	e20c      	b.n	8008960 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008546:	4b41      	ldr	r3, [pc, #260]	; (800864c <HAL_RCC_OscConfig+0x504>)
 8008548:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800854c:	f003 0302 	and.w	r3, r3, #2
 8008550:	2b00      	cmp	r3, #0
 8008552:	d0ef      	beq.n	8008534 <HAL_RCC_OscConfig+0x3ec>
 8008554:	e01b      	b.n	800858e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008556:	4b3d      	ldr	r3, [pc, #244]	; (800864c <HAL_RCC_OscConfig+0x504>)
 8008558:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800855c:	4a3b      	ldr	r2, [pc, #236]	; (800864c <HAL_RCC_OscConfig+0x504>)
 800855e:	f023 0301 	bic.w	r3, r3, #1
 8008562:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008566:	f7fd fe9b 	bl	80062a0 <HAL_GetTick>
 800856a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800856c:	e008      	b.n	8008580 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800856e:	f7fd fe97 	bl	80062a0 <HAL_GetTick>
 8008572:	4602      	mov	r2, r0
 8008574:	693b      	ldr	r3, [r7, #16]
 8008576:	1ad3      	subs	r3, r2, r3
 8008578:	2b02      	cmp	r3, #2
 800857a:	d901      	bls.n	8008580 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800857c:	2303      	movs	r3, #3
 800857e:	e1ef      	b.n	8008960 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008580:	4b32      	ldr	r3, [pc, #200]	; (800864c <HAL_RCC_OscConfig+0x504>)
 8008582:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008586:	f003 0302 	and.w	r3, r3, #2
 800858a:	2b00      	cmp	r3, #0
 800858c:	d1ef      	bne.n	800856e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	f003 0304 	and.w	r3, r3, #4
 8008596:	2b00      	cmp	r3, #0
 8008598:	f000 80a6 	beq.w	80086e8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800859c:	2300      	movs	r3, #0
 800859e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80085a0:	4b2a      	ldr	r3, [pc, #168]	; (800864c <HAL_RCC_OscConfig+0x504>)
 80085a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80085a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d10d      	bne.n	80085c8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80085ac:	4b27      	ldr	r3, [pc, #156]	; (800864c <HAL_RCC_OscConfig+0x504>)
 80085ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80085b0:	4a26      	ldr	r2, [pc, #152]	; (800864c <HAL_RCC_OscConfig+0x504>)
 80085b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80085b6:	6593      	str	r3, [r2, #88]	; 0x58
 80085b8:	4b24      	ldr	r3, [pc, #144]	; (800864c <HAL_RCC_OscConfig+0x504>)
 80085ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80085bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80085c0:	60bb      	str	r3, [r7, #8]
 80085c2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80085c4:	2301      	movs	r3, #1
 80085c6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80085c8:	4b21      	ldr	r3, [pc, #132]	; (8008650 <HAL_RCC_OscConfig+0x508>)
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d118      	bne.n	8008606 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80085d4:	4b1e      	ldr	r3, [pc, #120]	; (8008650 <HAL_RCC_OscConfig+0x508>)
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	4a1d      	ldr	r2, [pc, #116]	; (8008650 <HAL_RCC_OscConfig+0x508>)
 80085da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80085de:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80085e0:	f7fd fe5e 	bl	80062a0 <HAL_GetTick>
 80085e4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80085e6:	e008      	b.n	80085fa <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80085e8:	f7fd fe5a 	bl	80062a0 <HAL_GetTick>
 80085ec:	4602      	mov	r2, r0
 80085ee:	693b      	ldr	r3, [r7, #16]
 80085f0:	1ad3      	subs	r3, r2, r3
 80085f2:	2b02      	cmp	r3, #2
 80085f4:	d901      	bls.n	80085fa <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80085f6:	2303      	movs	r3, #3
 80085f8:	e1b2      	b.n	8008960 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80085fa:	4b15      	ldr	r3, [pc, #84]	; (8008650 <HAL_RCC_OscConfig+0x508>)
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008602:	2b00      	cmp	r3, #0
 8008604:	d0f0      	beq.n	80085e8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	689b      	ldr	r3, [r3, #8]
 800860a:	2b01      	cmp	r3, #1
 800860c:	d108      	bne.n	8008620 <HAL_RCC_OscConfig+0x4d8>
 800860e:	4b0f      	ldr	r3, [pc, #60]	; (800864c <HAL_RCC_OscConfig+0x504>)
 8008610:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008614:	4a0d      	ldr	r2, [pc, #52]	; (800864c <HAL_RCC_OscConfig+0x504>)
 8008616:	f043 0301 	orr.w	r3, r3, #1
 800861a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800861e:	e029      	b.n	8008674 <HAL_RCC_OscConfig+0x52c>
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	689b      	ldr	r3, [r3, #8]
 8008624:	2b05      	cmp	r3, #5
 8008626:	d115      	bne.n	8008654 <HAL_RCC_OscConfig+0x50c>
 8008628:	4b08      	ldr	r3, [pc, #32]	; (800864c <HAL_RCC_OscConfig+0x504>)
 800862a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800862e:	4a07      	ldr	r2, [pc, #28]	; (800864c <HAL_RCC_OscConfig+0x504>)
 8008630:	f043 0304 	orr.w	r3, r3, #4
 8008634:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8008638:	4b04      	ldr	r3, [pc, #16]	; (800864c <HAL_RCC_OscConfig+0x504>)
 800863a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800863e:	4a03      	ldr	r2, [pc, #12]	; (800864c <HAL_RCC_OscConfig+0x504>)
 8008640:	f043 0301 	orr.w	r3, r3, #1
 8008644:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8008648:	e014      	b.n	8008674 <HAL_RCC_OscConfig+0x52c>
 800864a:	bf00      	nop
 800864c:	40021000 	.word	0x40021000
 8008650:	40007000 	.word	0x40007000
 8008654:	4b9a      	ldr	r3, [pc, #616]	; (80088c0 <HAL_RCC_OscConfig+0x778>)
 8008656:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800865a:	4a99      	ldr	r2, [pc, #612]	; (80088c0 <HAL_RCC_OscConfig+0x778>)
 800865c:	f023 0301 	bic.w	r3, r3, #1
 8008660:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8008664:	4b96      	ldr	r3, [pc, #600]	; (80088c0 <HAL_RCC_OscConfig+0x778>)
 8008666:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800866a:	4a95      	ldr	r2, [pc, #596]	; (80088c0 <HAL_RCC_OscConfig+0x778>)
 800866c:	f023 0304 	bic.w	r3, r3, #4
 8008670:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	689b      	ldr	r3, [r3, #8]
 8008678:	2b00      	cmp	r3, #0
 800867a:	d016      	beq.n	80086aa <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800867c:	f7fd fe10 	bl	80062a0 <HAL_GetTick>
 8008680:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008682:	e00a      	b.n	800869a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008684:	f7fd fe0c 	bl	80062a0 <HAL_GetTick>
 8008688:	4602      	mov	r2, r0
 800868a:	693b      	ldr	r3, [r7, #16]
 800868c:	1ad3      	subs	r3, r2, r3
 800868e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008692:	4293      	cmp	r3, r2
 8008694:	d901      	bls.n	800869a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8008696:	2303      	movs	r3, #3
 8008698:	e162      	b.n	8008960 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800869a:	4b89      	ldr	r3, [pc, #548]	; (80088c0 <HAL_RCC_OscConfig+0x778>)
 800869c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80086a0:	f003 0302 	and.w	r3, r3, #2
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d0ed      	beq.n	8008684 <HAL_RCC_OscConfig+0x53c>
 80086a8:	e015      	b.n	80086d6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80086aa:	f7fd fdf9 	bl	80062a0 <HAL_GetTick>
 80086ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80086b0:	e00a      	b.n	80086c8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80086b2:	f7fd fdf5 	bl	80062a0 <HAL_GetTick>
 80086b6:	4602      	mov	r2, r0
 80086b8:	693b      	ldr	r3, [r7, #16]
 80086ba:	1ad3      	subs	r3, r2, r3
 80086bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80086c0:	4293      	cmp	r3, r2
 80086c2:	d901      	bls.n	80086c8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80086c4:	2303      	movs	r3, #3
 80086c6:	e14b      	b.n	8008960 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80086c8:	4b7d      	ldr	r3, [pc, #500]	; (80088c0 <HAL_RCC_OscConfig+0x778>)
 80086ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80086ce:	f003 0302 	and.w	r3, r3, #2
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d1ed      	bne.n	80086b2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80086d6:	7ffb      	ldrb	r3, [r7, #31]
 80086d8:	2b01      	cmp	r3, #1
 80086da:	d105      	bne.n	80086e8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80086dc:	4b78      	ldr	r3, [pc, #480]	; (80088c0 <HAL_RCC_OscConfig+0x778>)
 80086de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80086e0:	4a77      	ldr	r2, [pc, #476]	; (80088c0 <HAL_RCC_OscConfig+0x778>)
 80086e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80086e6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	f003 0320 	and.w	r3, r3, #32
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d03c      	beq.n	800876e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d01c      	beq.n	8008736 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80086fc:	4b70      	ldr	r3, [pc, #448]	; (80088c0 <HAL_RCC_OscConfig+0x778>)
 80086fe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008702:	4a6f      	ldr	r2, [pc, #444]	; (80088c0 <HAL_RCC_OscConfig+0x778>)
 8008704:	f043 0301 	orr.w	r3, r3, #1
 8008708:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800870c:	f7fd fdc8 	bl	80062a0 <HAL_GetTick>
 8008710:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8008712:	e008      	b.n	8008726 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008714:	f7fd fdc4 	bl	80062a0 <HAL_GetTick>
 8008718:	4602      	mov	r2, r0
 800871a:	693b      	ldr	r3, [r7, #16]
 800871c:	1ad3      	subs	r3, r2, r3
 800871e:	2b02      	cmp	r3, #2
 8008720:	d901      	bls.n	8008726 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8008722:	2303      	movs	r3, #3
 8008724:	e11c      	b.n	8008960 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8008726:	4b66      	ldr	r3, [pc, #408]	; (80088c0 <HAL_RCC_OscConfig+0x778>)
 8008728:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800872c:	f003 0302 	and.w	r3, r3, #2
 8008730:	2b00      	cmp	r3, #0
 8008732:	d0ef      	beq.n	8008714 <HAL_RCC_OscConfig+0x5cc>
 8008734:	e01b      	b.n	800876e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8008736:	4b62      	ldr	r3, [pc, #392]	; (80088c0 <HAL_RCC_OscConfig+0x778>)
 8008738:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800873c:	4a60      	ldr	r2, [pc, #384]	; (80088c0 <HAL_RCC_OscConfig+0x778>)
 800873e:	f023 0301 	bic.w	r3, r3, #1
 8008742:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008746:	f7fd fdab 	bl	80062a0 <HAL_GetTick>
 800874a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800874c:	e008      	b.n	8008760 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800874e:	f7fd fda7 	bl	80062a0 <HAL_GetTick>
 8008752:	4602      	mov	r2, r0
 8008754:	693b      	ldr	r3, [r7, #16]
 8008756:	1ad3      	subs	r3, r2, r3
 8008758:	2b02      	cmp	r3, #2
 800875a:	d901      	bls.n	8008760 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800875c:	2303      	movs	r3, #3
 800875e:	e0ff      	b.n	8008960 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8008760:	4b57      	ldr	r3, [pc, #348]	; (80088c0 <HAL_RCC_OscConfig+0x778>)
 8008762:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008766:	f003 0302 	and.w	r3, r3, #2
 800876a:	2b00      	cmp	r3, #0
 800876c:	d1ef      	bne.n	800874e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008772:	2b00      	cmp	r3, #0
 8008774:	f000 80f3 	beq.w	800895e <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800877c:	2b02      	cmp	r3, #2
 800877e:	f040 80c9 	bne.w	8008914 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8008782:	4b4f      	ldr	r3, [pc, #316]	; (80088c0 <HAL_RCC_OscConfig+0x778>)
 8008784:	68db      	ldr	r3, [r3, #12]
 8008786:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8008788:	697b      	ldr	r3, [r7, #20]
 800878a:	f003 0203 	and.w	r2, r3, #3
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008792:	429a      	cmp	r2, r3
 8008794:	d12c      	bne.n	80087f0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8008796:	697b      	ldr	r3, [r7, #20]
 8008798:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087a0:	3b01      	subs	r3, #1
 80087a2:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80087a4:	429a      	cmp	r2, r3
 80087a6:	d123      	bne.n	80087f0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80087a8:	697b      	ldr	r3, [r7, #20]
 80087aa:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80087b2:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80087b4:	429a      	cmp	r2, r3
 80087b6:	d11b      	bne.n	80087f0 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80087b8:	697b      	ldr	r3, [r7, #20]
 80087ba:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087c2:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80087c4:	429a      	cmp	r2, r3
 80087c6:	d113      	bne.n	80087f0 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80087c8:	697b      	ldr	r3, [r7, #20]
 80087ca:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80087d2:	085b      	lsrs	r3, r3, #1
 80087d4:	3b01      	subs	r3, #1
 80087d6:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80087d8:	429a      	cmp	r2, r3
 80087da:	d109      	bne.n	80087f0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80087dc:	697b      	ldr	r3, [r7, #20]
 80087de:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087e6:	085b      	lsrs	r3, r3, #1
 80087e8:	3b01      	subs	r3, #1
 80087ea:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80087ec:	429a      	cmp	r2, r3
 80087ee:	d06b      	beq.n	80088c8 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80087f0:	69bb      	ldr	r3, [r7, #24]
 80087f2:	2b0c      	cmp	r3, #12
 80087f4:	d062      	beq.n	80088bc <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80087f6:	4b32      	ldr	r3, [pc, #200]	; (80088c0 <HAL_RCC_OscConfig+0x778>)
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d001      	beq.n	8008806 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8008802:	2301      	movs	r3, #1
 8008804:	e0ac      	b.n	8008960 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8008806:	4b2e      	ldr	r3, [pc, #184]	; (80088c0 <HAL_RCC_OscConfig+0x778>)
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	4a2d      	ldr	r2, [pc, #180]	; (80088c0 <HAL_RCC_OscConfig+0x778>)
 800880c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008810:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8008812:	f7fd fd45 	bl	80062a0 <HAL_GetTick>
 8008816:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008818:	e008      	b.n	800882c <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800881a:	f7fd fd41 	bl	80062a0 <HAL_GetTick>
 800881e:	4602      	mov	r2, r0
 8008820:	693b      	ldr	r3, [r7, #16]
 8008822:	1ad3      	subs	r3, r2, r3
 8008824:	2b02      	cmp	r3, #2
 8008826:	d901      	bls.n	800882c <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8008828:	2303      	movs	r3, #3
 800882a:	e099      	b.n	8008960 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800882c:	4b24      	ldr	r3, [pc, #144]	; (80088c0 <HAL_RCC_OscConfig+0x778>)
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008834:	2b00      	cmp	r3, #0
 8008836:	d1f0      	bne.n	800881a <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008838:	4b21      	ldr	r3, [pc, #132]	; (80088c0 <HAL_RCC_OscConfig+0x778>)
 800883a:	68da      	ldr	r2, [r3, #12]
 800883c:	4b21      	ldr	r3, [pc, #132]	; (80088c4 <HAL_RCC_OscConfig+0x77c>)
 800883e:	4013      	ands	r3, r2
 8008840:	687a      	ldr	r2, [r7, #4]
 8008842:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8008844:	687a      	ldr	r2, [r7, #4]
 8008846:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8008848:	3a01      	subs	r2, #1
 800884a:	0112      	lsls	r2, r2, #4
 800884c:	4311      	orrs	r1, r2
 800884e:	687a      	ldr	r2, [r7, #4]
 8008850:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8008852:	0212      	lsls	r2, r2, #8
 8008854:	4311      	orrs	r1, r2
 8008856:	687a      	ldr	r2, [r7, #4]
 8008858:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800885a:	0852      	lsrs	r2, r2, #1
 800885c:	3a01      	subs	r2, #1
 800885e:	0552      	lsls	r2, r2, #21
 8008860:	4311      	orrs	r1, r2
 8008862:	687a      	ldr	r2, [r7, #4]
 8008864:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8008866:	0852      	lsrs	r2, r2, #1
 8008868:	3a01      	subs	r2, #1
 800886a:	0652      	lsls	r2, r2, #25
 800886c:	4311      	orrs	r1, r2
 800886e:	687a      	ldr	r2, [r7, #4]
 8008870:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008872:	06d2      	lsls	r2, r2, #27
 8008874:	430a      	orrs	r2, r1
 8008876:	4912      	ldr	r1, [pc, #72]	; (80088c0 <HAL_RCC_OscConfig+0x778>)
 8008878:	4313      	orrs	r3, r2
 800887a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800887c:	4b10      	ldr	r3, [pc, #64]	; (80088c0 <HAL_RCC_OscConfig+0x778>)
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	4a0f      	ldr	r2, [pc, #60]	; (80088c0 <HAL_RCC_OscConfig+0x778>)
 8008882:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008886:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8008888:	4b0d      	ldr	r3, [pc, #52]	; (80088c0 <HAL_RCC_OscConfig+0x778>)
 800888a:	68db      	ldr	r3, [r3, #12]
 800888c:	4a0c      	ldr	r2, [pc, #48]	; (80088c0 <HAL_RCC_OscConfig+0x778>)
 800888e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008892:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8008894:	f7fd fd04 	bl	80062a0 <HAL_GetTick>
 8008898:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800889a:	e008      	b.n	80088ae <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800889c:	f7fd fd00 	bl	80062a0 <HAL_GetTick>
 80088a0:	4602      	mov	r2, r0
 80088a2:	693b      	ldr	r3, [r7, #16]
 80088a4:	1ad3      	subs	r3, r2, r3
 80088a6:	2b02      	cmp	r3, #2
 80088a8:	d901      	bls.n	80088ae <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80088aa:	2303      	movs	r3, #3
 80088ac:	e058      	b.n	8008960 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80088ae:	4b04      	ldr	r3, [pc, #16]	; (80088c0 <HAL_RCC_OscConfig+0x778>)
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d0f0      	beq.n	800889c <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80088ba:	e050      	b.n	800895e <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80088bc:	2301      	movs	r3, #1
 80088be:	e04f      	b.n	8008960 <HAL_RCC_OscConfig+0x818>
 80088c0:	40021000 	.word	0x40021000
 80088c4:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80088c8:	4b27      	ldr	r3, [pc, #156]	; (8008968 <HAL_RCC_OscConfig+0x820>)
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d144      	bne.n	800895e <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80088d4:	4b24      	ldr	r3, [pc, #144]	; (8008968 <HAL_RCC_OscConfig+0x820>)
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	4a23      	ldr	r2, [pc, #140]	; (8008968 <HAL_RCC_OscConfig+0x820>)
 80088da:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80088de:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80088e0:	4b21      	ldr	r3, [pc, #132]	; (8008968 <HAL_RCC_OscConfig+0x820>)
 80088e2:	68db      	ldr	r3, [r3, #12]
 80088e4:	4a20      	ldr	r2, [pc, #128]	; (8008968 <HAL_RCC_OscConfig+0x820>)
 80088e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80088ea:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80088ec:	f7fd fcd8 	bl	80062a0 <HAL_GetTick>
 80088f0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80088f2:	e008      	b.n	8008906 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80088f4:	f7fd fcd4 	bl	80062a0 <HAL_GetTick>
 80088f8:	4602      	mov	r2, r0
 80088fa:	693b      	ldr	r3, [r7, #16]
 80088fc:	1ad3      	subs	r3, r2, r3
 80088fe:	2b02      	cmp	r3, #2
 8008900:	d901      	bls.n	8008906 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8008902:	2303      	movs	r3, #3
 8008904:	e02c      	b.n	8008960 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008906:	4b18      	ldr	r3, [pc, #96]	; (8008968 <HAL_RCC_OscConfig+0x820>)
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800890e:	2b00      	cmp	r3, #0
 8008910:	d0f0      	beq.n	80088f4 <HAL_RCC_OscConfig+0x7ac>
 8008912:	e024      	b.n	800895e <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8008914:	69bb      	ldr	r3, [r7, #24]
 8008916:	2b0c      	cmp	r3, #12
 8008918:	d01f      	beq.n	800895a <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800891a:	4b13      	ldr	r3, [pc, #76]	; (8008968 <HAL_RCC_OscConfig+0x820>)
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	4a12      	ldr	r2, [pc, #72]	; (8008968 <HAL_RCC_OscConfig+0x820>)
 8008920:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008924:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008926:	f7fd fcbb 	bl	80062a0 <HAL_GetTick>
 800892a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800892c:	e008      	b.n	8008940 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800892e:	f7fd fcb7 	bl	80062a0 <HAL_GetTick>
 8008932:	4602      	mov	r2, r0
 8008934:	693b      	ldr	r3, [r7, #16]
 8008936:	1ad3      	subs	r3, r2, r3
 8008938:	2b02      	cmp	r3, #2
 800893a:	d901      	bls.n	8008940 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 800893c:	2303      	movs	r3, #3
 800893e:	e00f      	b.n	8008960 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008940:	4b09      	ldr	r3, [pc, #36]	; (8008968 <HAL_RCC_OscConfig+0x820>)
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008948:	2b00      	cmp	r3, #0
 800894a:	d1f0      	bne.n	800892e <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 800894c:	4b06      	ldr	r3, [pc, #24]	; (8008968 <HAL_RCC_OscConfig+0x820>)
 800894e:	68da      	ldr	r2, [r3, #12]
 8008950:	4905      	ldr	r1, [pc, #20]	; (8008968 <HAL_RCC_OscConfig+0x820>)
 8008952:	4b06      	ldr	r3, [pc, #24]	; (800896c <HAL_RCC_OscConfig+0x824>)
 8008954:	4013      	ands	r3, r2
 8008956:	60cb      	str	r3, [r1, #12]
 8008958:	e001      	b.n	800895e <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800895a:	2301      	movs	r3, #1
 800895c:	e000      	b.n	8008960 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 800895e:	2300      	movs	r3, #0
}
 8008960:	4618      	mov	r0, r3
 8008962:	3720      	adds	r7, #32
 8008964:	46bd      	mov	sp, r7
 8008966:	bd80      	pop	{r7, pc}
 8008968:	40021000 	.word	0x40021000
 800896c:	feeefffc 	.word	0xfeeefffc

08008970 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008970:	b580      	push	{r7, lr}
 8008972:	b084      	sub	sp, #16
 8008974:	af00      	add	r7, sp, #0
 8008976:	6078      	str	r0, [r7, #4]
 8008978:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	2b00      	cmp	r3, #0
 800897e:	d101      	bne.n	8008984 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008980:	2301      	movs	r3, #1
 8008982:	e0e7      	b.n	8008b54 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008984:	4b75      	ldr	r3, [pc, #468]	; (8008b5c <HAL_RCC_ClockConfig+0x1ec>)
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	f003 0307 	and.w	r3, r3, #7
 800898c:	683a      	ldr	r2, [r7, #0]
 800898e:	429a      	cmp	r2, r3
 8008990:	d910      	bls.n	80089b4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008992:	4b72      	ldr	r3, [pc, #456]	; (8008b5c <HAL_RCC_ClockConfig+0x1ec>)
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	f023 0207 	bic.w	r2, r3, #7
 800899a:	4970      	ldr	r1, [pc, #448]	; (8008b5c <HAL_RCC_ClockConfig+0x1ec>)
 800899c:	683b      	ldr	r3, [r7, #0]
 800899e:	4313      	orrs	r3, r2
 80089a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80089a2:	4b6e      	ldr	r3, [pc, #440]	; (8008b5c <HAL_RCC_ClockConfig+0x1ec>)
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	f003 0307 	and.w	r3, r3, #7
 80089aa:	683a      	ldr	r2, [r7, #0]
 80089ac:	429a      	cmp	r2, r3
 80089ae:	d001      	beq.n	80089b4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80089b0:	2301      	movs	r3, #1
 80089b2:	e0cf      	b.n	8008b54 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	f003 0302 	and.w	r3, r3, #2
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d010      	beq.n	80089e2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	689a      	ldr	r2, [r3, #8]
 80089c4:	4b66      	ldr	r3, [pc, #408]	; (8008b60 <HAL_RCC_ClockConfig+0x1f0>)
 80089c6:	689b      	ldr	r3, [r3, #8]
 80089c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80089cc:	429a      	cmp	r2, r3
 80089ce:	d908      	bls.n	80089e2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80089d0:	4b63      	ldr	r3, [pc, #396]	; (8008b60 <HAL_RCC_ClockConfig+0x1f0>)
 80089d2:	689b      	ldr	r3, [r3, #8]
 80089d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	689b      	ldr	r3, [r3, #8]
 80089dc:	4960      	ldr	r1, [pc, #384]	; (8008b60 <HAL_RCC_ClockConfig+0x1f0>)
 80089de:	4313      	orrs	r3, r2
 80089e0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	f003 0301 	and.w	r3, r3, #1
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d04c      	beq.n	8008a88 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	685b      	ldr	r3, [r3, #4]
 80089f2:	2b03      	cmp	r3, #3
 80089f4:	d107      	bne.n	8008a06 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80089f6:	4b5a      	ldr	r3, [pc, #360]	; (8008b60 <HAL_RCC_ClockConfig+0x1f0>)
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d121      	bne.n	8008a46 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8008a02:	2301      	movs	r3, #1
 8008a04:	e0a6      	b.n	8008b54 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	685b      	ldr	r3, [r3, #4]
 8008a0a:	2b02      	cmp	r3, #2
 8008a0c:	d107      	bne.n	8008a1e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008a0e:	4b54      	ldr	r3, [pc, #336]	; (8008b60 <HAL_RCC_ClockConfig+0x1f0>)
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d115      	bne.n	8008a46 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8008a1a:	2301      	movs	r3, #1
 8008a1c:	e09a      	b.n	8008b54 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	685b      	ldr	r3, [r3, #4]
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d107      	bne.n	8008a36 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8008a26:	4b4e      	ldr	r3, [pc, #312]	; (8008b60 <HAL_RCC_ClockConfig+0x1f0>)
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	f003 0302 	and.w	r3, r3, #2
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d109      	bne.n	8008a46 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8008a32:	2301      	movs	r3, #1
 8008a34:	e08e      	b.n	8008b54 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008a36:	4b4a      	ldr	r3, [pc, #296]	; (8008b60 <HAL_RCC_ClockConfig+0x1f0>)
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d101      	bne.n	8008a46 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8008a42:	2301      	movs	r3, #1
 8008a44:	e086      	b.n	8008b54 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008a46:	4b46      	ldr	r3, [pc, #280]	; (8008b60 <HAL_RCC_ClockConfig+0x1f0>)
 8008a48:	689b      	ldr	r3, [r3, #8]
 8008a4a:	f023 0203 	bic.w	r2, r3, #3
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	685b      	ldr	r3, [r3, #4]
 8008a52:	4943      	ldr	r1, [pc, #268]	; (8008b60 <HAL_RCC_ClockConfig+0x1f0>)
 8008a54:	4313      	orrs	r3, r2
 8008a56:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008a58:	f7fd fc22 	bl	80062a0 <HAL_GetTick>
 8008a5c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008a5e:	e00a      	b.n	8008a76 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008a60:	f7fd fc1e 	bl	80062a0 <HAL_GetTick>
 8008a64:	4602      	mov	r2, r0
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	1ad3      	subs	r3, r2, r3
 8008a6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8008a6e:	4293      	cmp	r3, r2
 8008a70:	d901      	bls.n	8008a76 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8008a72:	2303      	movs	r3, #3
 8008a74:	e06e      	b.n	8008b54 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008a76:	4b3a      	ldr	r3, [pc, #232]	; (8008b60 <HAL_RCC_ClockConfig+0x1f0>)
 8008a78:	689b      	ldr	r3, [r3, #8]
 8008a7a:	f003 020c 	and.w	r2, r3, #12
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	685b      	ldr	r3, [r3, #4]
 8008a82:	009b      	lsls	r3, r3, #2
 8008a84:	429a      	cmp	r2, r3
 8008a86:	d1eb      	bne.n	8008a60 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	f003 0302 	and.w	r3, r3, #2
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d010      	beq.n	8008ab6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	689a      	ldr	r2, [r3, #8]
 8008a98:	4b31      	ldr	r3, [pc, #196]	; (8008b60 <HAL_RCC_ClockConfig+0x1f0>)
 8008a9a:	689b      	ldr	r3, [r3, #8]
 8008a9c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008aa0:	429a      	cmp	r2, r3
 8008aa2:	d208      	bcs.n	8008ab6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008aa4:	4b2e      	ldr	r3, [pc, #184]	; (8008b60 <HAL_RCC_ClockConfig+0x1f0>)
 8008aa6:	689b      	ldr	r3, [r3, #8]
 8008aa8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	689b      	ldr	r3, [r3, #8]
 8008ab0:	492b      	ldr	r1, [pc, #172]	; (8008b60 <HAL_RCC_ClockConfig+0x1f0>)
 8008ab2:	4313      	orrs	r3, r2
 8008ab4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008ab6:	4b29      	ldr	r3, [pc, #164]	; (8008b5c <HAL_RCC_ClockConfig+0x1ec>)
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	f003 0307 	and.w	r3, r3, #7
 8008abe:	683a      	ldr	r2, [r7, #0]
 8008ac0:	429a      	cmp	r2, r3
 8008ac2:	d210      	bcs.n	8008ae6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008ac4:	4b25      	ldr	r3, [pc, #148]	; (8008b5c <HAL_RCC_ClockConfig+0x1ec>)
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	f023 0207 	bic.w	r2, r3, #7
 8008acc:	4923      	ldr	r1, [pc, #140]	; (8008b5c <HAL_RCC_ClockConfig+0x1ec>)
 8008ace:	683b      	ldr	r3, [r7, #0]
 8008ad0:	4313      	orrs	r3, r2
 8008ad2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008ad4:	4b21      	ldr	r3, [pc, #132]	; (8008b5c <HAL_RCC_ClockConfig+0x1ec>)
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	f003 0307 	and.w	r3, r3, #7
 8008adc:	683a      	ldr	r2, [r7, #0]
 8008ade:	429a      	cmp	r2, r3
 8008ae0:	d001      	beq.n	8008ae6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8008ae2:	2301      	movs	r3, #1
 8008ae4:	e036      	b.n	8008b54 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	f003 0304 	and.w	r3, r3, #4
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d008      	beq.n	8008b04 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008af2:	4b1b      	ldr	r3, [pc, #108]	; (8008b60 <HAL_RCC_ClockConfig+0x1f0>)
 8008af4:	689b      	ldr	r3, [r3, #8]
 8008af6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	68db      	ldr	r3, [r3, #12]
 8008afe:	4918      	ldr	r1, [pc, #96]	; (8008b60 <HAL_RCC_ClockConfig+0x1f0>)
 8008b00:	4313      	orrs	r3, r2
 8008b02:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	f003 0308 	and.w	r3, r3, #8
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d009      	beq.n	8008b24 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008b10:	4b13      	ldr	r3, [pc, #76]	; (8008b60 <HAL_RCC_ClockConfig+0x1f0>)
 8008b12:	689b      	ldr	r3, [r3, #8]
 8008b14:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	691b      	ldr	r3, [r3, #16]
 8008b1c:	00db      	lsls	r3, r3, #3
 8008b1e:	4910      	ldr	r1, [pc, #64]	; (8008b60 <HAL_RCC_ClockConfig+0x1f0>)
 8008b20:	4313      	orrs	r3, r2
 8008b22:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8008b24:	f000 f824 	bl	8008b70 <HAL_RCC_GetSysClockFreq>
 8008b28:	4602      	mov	r2, r0
 8008b2a:	4b0d      	ldr	r3, [pc, #52]	; (8008b60 <HAL_RCC_ClockConfig+0x1f0>)
 8008b2c:	689b      	ldr	r3, [r3, #8]
 8008b2e:	091b      	lsrs	r3, r3, #4
 8008b30:	f003 030f 	and.w	r3, r3, #15
 8008b34:	490b      	ldr	r1, [pc, #44]	; (8008b64 <HAL_RCC_ClockConfig+0x1f4>)
 8008b36:	5ccb      	ldrb	r3, [r1, r3]
 8008b38:	f003 031f 	and.w	r3, r3, #31
 8008b3c:	fa22 f303 	lsr.w	r3, r2, r3
 8008b40:	4a09      	ldr	r2, [pc, #36]	; (8008b68 <HAL_RCC_ClockConfig+0x1f8>)
 8008b42:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8008b44:	4b09      	ldr	r3, [pc, #36]	; (8008b6c <HAL_RCC_ClockConfig+0x1fc>)
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	4618      	mov	r0, r3
 8008b4a:	f7fc fc51 	bl	80053f0 <HAL_InitTick>
 8008b4e:	4603      	mov	r3, r0
 8008b50:	72fb      	strb	r3, [r7, #11]

  return status;
 8008b52:	7afb      	ldrb	r3, [r7, #11]
}
 8008b54:	4618      	mov	r0, r3
 8008b56:	3710      	adds	r7, #16
 8008b58:	46bd      	mov	sp, r7
 8008b5a:	bd80      	pop	{r7, pc}
 8008b5c:	40022000 	.word	0x40022000
 8008b60:	40021000 	.word	0x40021000
 8008b64:	08012a68 	.word	0x08012a68
 8008b68:	20000028 	.word	0x20000028
 8008b6c:	2000002c 	.word	0x2000002c

08008b70 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008b70:	b480      	push	{r7}
 8008b72:	b089      	sub	sp, #36	; 0x24
 8008b74:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8008b76:	2300      	movs	r3, #0
 8008b78:	61fb      	str	r3, [r7, #28]
 8008b7a:	2300      	movs	r3, #0
 8008b7c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008b7e:	4b3e      	ldr	r3, [pc, #248]	; (8008c78 <HAL_RCC_GetSysClockFreq+0x108>)
 8008b80:	689b      	ldr	r3, [r3, #8]
 8008b82:	f003 030c 	and.w	r3, r3, #12
 8008b86:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008b88:	4b3b      	ldr	r3, [pc, #236]	; (8008c78 <HAL_RCC_GetSysClockFreq+0x108>)
 8008b8a:	68db      	ldr	r3, [r3, #12]
 8008b8c:	f003 0303 	and.w	r3, r3, #3
 8008b90:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8008b92:	693b      	ldr	r3, [r7, #16]
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d005      	beq.n	8008ba4 <HAL_RCC_GetSysClockFreq+0x34>
 8008b98:	693b      	ldr	r3, [r7, #16]
 8008b9a:	2b0c      	cmp	r3, #12
 8008b9c:	d121      	bne.n	8008be2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	2b01      	cmp	r3, #1
 8008ba2:	d11e      	bne.n	8008be2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8008ba4:	4b34      	ldr	r3, [pc, #208]	; (8008c78 <HAL_RCC_GetSysClockFreq+0x108>)
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	f003 0308 	and.w	r3, r3, #8
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d107      	bne.n	8008bc0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8008bb0:	4b31      	ldr	r3, [pc, #196]	; (8008c78 <HAL_RCC_GetSysClockFreq+0x108>)
 8008bb2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008bb6:	0a1b      	lsrs	r3, r3, #8
 8008bb8:	f003 030f 	and.w	r3, r3, #15
 8008bbc:	61fb      	str	r3, [r7, #28]
 8008bbe:	e005      	b.n	8008bcc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8008bc0:	4b2d      	ldr	r3, [pc, #180]	; (8008c78 <HAL_RCC_GetSysClockFreq+0x108>)
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	091b      	lsrs	r3, r3, #4
 8008bc6:	f003 030f 	and.w	r3, r3, #15
 8008bca:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8008bcc:	4a2b      	ldr	r2, [pc, #172]	; (8008c7c <HAL_RCC_GetSysClockFreq+0x10c>)
 8008bce:	69fb      	ldr	r3, [r7, #28]
 8008bd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008bd4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8008bd6:	693b      	ldr	r3, [r7, #16]
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d10d      	bne.n	8008bf8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8008bdc:	69fb      	ldr	r3, [r7, #28]
 8008bde:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8008be0:	e00a      	b.n	8008bf8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8008be2:	693b      	ldr	r3, [r7, #16]
 8008be4:	2b04      	cmp	r3, #4
 8008be6:	d102      	bne.n	8008bee <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8008be8:	4b25      	ldr	r3, [pc, #148]	; (8008c80 <HAL_RCC_GetSysClockFreq+0x110>)
 8008bea:	61bb      	str	r3, [r7, #24]
 8008bec:	e004      	b.n	8008bf8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8008bee:	693b      	ldr	r3, [r7, #16]
 8008bf0:	2b08      	cmp	r3, #8
 8008bf2:	d101      	bne.n	8008bf8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8008bf4:	4b23      	ldr	r3, [pc, #140]	; (8008c84 <HAL_RCC_GetSysClockFreq+0x114>)
 8008bf6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8008bf8:	693b      	ldr	r3, [r7, #16]
 8008bfa:	2b0c      	cmp	r3, #12
 8008bfc:	d134      	bne.n	8008c68 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8008bfe:	4b1e      	ldr	r3, [pc, #120]	; (8008c78 <HAL_RCC_GetSysClockFreq+0x108>)
 8008c00:	68db      	ldr	r3, [r3, #12]
 8008c02:	f003 0303 	and.w	r3, r3, #3
 8008c06:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8008c08:	68bb      	ldr	r3, [r7, #8]
 8008c0a:	2b02      	cmp	r3, #2
 8008c0c:	d003      	beq.n	8008c16 <HAL_RCC_GetSysClockFreq+0xa6>
 8008c0e:	68bb      	ldr	r3, [r7, #8]
 8008c10:	2b03      	cmp	r3, #3
 8008c12:	d003      	beq.n	8008c1c <HAL_RCC_GetSysClockFreq+0xac>
 8008c14:	e005      	b.n	8008c22 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8008c16:	4b1a      	ldr	r3, [pc, #104]	; (8008c80 <HAL_RCC_GetSysClockFreq+0x110>)
 8008c18:	617b      	str	r3, [r7, #20]
      break;
 8008c1a:	e005      	b.n	8008c28 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8008c1c:	4b19      	ldr	r3, [pc, #100]	; (8008c84 <HAL_RCC_GetSysClockFreq+0x114>)
 8008c1e:	617b      	str	r3, [r7, #20]
      break;
 8008c20:	e002      	b.n	8008c28 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8008c22:	69fb      	ldr	r3, [r7, #28]
 8008c24:	617b      	str	r3, [r7, #20]
      break;
 8008c26:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8008c28:	4b13      	ldr	r3, [pc, #76]	; (8008c78 <HAL_RCC_GetSysClockFreq+0x108>)
 8008c2a:	68db      	ldr	r3, [r3, #12]
 8008c2c:	091b      	lsrs	r3, r3, #4
 8008c2e:	f003 0307 	and.w	r3, r3, #7
 8008c32:	3301      	adds	r3, #1
 8008c34:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8008c36:	4b10      	ldr	r3, [pc, #64]	; (8008c78 <HAL_RCC_GetSysClockFreq+0x108>)
 8008c38:	68db      	ldr	r3, [r3, #12]
 8008c3a:	0a1b      	lsrs	r3, r3, #8
 8008c3c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008c40:	697a      	ldr	r2, [r7, #20]
 8008c42:	fb03 f202 	mul.w	r2, r3, r2
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c4c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8008c4e:	4b0a      	ldr	r3, [pc, #40]	; (8008c78 <HAL_RCC_GetSysClockFreq+0x108>)
 8008c50:	68db      	ldr	r3, [r3, #12]
 8008c52:	0e5b      	lsrs	r3, r3, #25
 8008c54:	f003 0303 	and.w	r3, r3, #3
 8008c58:	3301      	adds	r3, #1
 8008c5a:	005b      	lsls	r3, r3, #1
 8008c5c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8008c5e:	697a      	ldr	r2, [r7, #20]
 8008c60:	683b      	ldr	r3, [r7, #0]
 8008c62:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c66:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8008c68:	69bb      	ldr	r3, [r7, #24]
}
 8008c6a:	4618      	mov	r0, r3
 8008c6c:	3724      	adds	r7, #36	; 0x24
 8008c6e:	46bd      	mov	sp, r7
 8008c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c74:	4770      	bx	lr
 8008c76:	bf00      	nop
 8008c78:	40021000 	.word	0x40021000
 8008c7c:	08012a80 	.word	0x08012a80
 8008c80:	00f42400 	.word	0x00f42400
 8008c84:	007a1200 	.word	0x007a1200

08008c88 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008c88:	b480      	push	{r7}
 8008c8a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008c8c:	4b03      	ldr	r3, [pc, #12]	; (8008c9c <HAL_RCC_GetHCLKFreq+0x14>)
 8008c8e:	681b      	ldr	r3, [r3, #0]
}
 8008c90:	4618      	mov	r0, r3
 8008c92:	46bd      	mov	sp, r7
 8008c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c98:	4770      	bx	lr
 8008c9a:	bf00      	nop
 8008c9c:	20000028 	.word	0x20000028

08008ca0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008ca0:	b580      	push	{r7, lr}
 8008ca2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8008ca4:	f7ff fff0 	bl	8008c88 <HAL_RCC_GetHCLKFreq>
 8008ca8:	4602      	mov	r2, r0
 8008caa:	4b06      	ldr	r3, [pc, #24]	; (8008cc4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008cac:	689b      	ldr	r3, [r3, #8]
 8008cae:	0a1b      	lsrs	r3, r3, #8
 8008cb0:	f003 0307 	and.w	r3, r3, #7
 8008cb4:	4904      	ldr	r1, [pc, #16]	; (8008cc8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8008cb6:	5ccb      	ldrb	r3, [r1, r3]
 8008cb8:	f003 031f 	and.w	r3, r3, #31
 8008cbc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008cc0:	4618      	mov	r0, r3
 8008cc2:	bd80      	pop	{r7, pc}
 8008cc4:	40021000 	.word	0x40021000
 8008cc8:	08012a78 	.word	0x08012a78

08008ccc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008ccc:	b580      	push	{r7, lr}
 8008cce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8008cd0:	f7ff ffda 	bl	8008c88 <HAL_RCC_GetHCLKFreq>
 8008cd4:	4602      	mov	r2, r0
 8008cd6:	4b06      	ldr	r3, [pc, #24]	; (8008cf0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008cd8:	689b      	ldr	r3, [r3, #8]
 8008cda:	0adb      	lsrs	r3, r3, #11
 8008cdc:	f003 0307 	and.w	r3, r3, #7
 8008ce0:	4904      	ldr	r1, [pc, #16]	; (8008cf4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8008ce2:	5ccb      	ldrb	r3, [r1, r3]
 8008ce4:	f003 031f 	and.w	r3, r3, #31
 8008ce8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008cec:	4618      	mov	r0, r3
 8008cee:	bd80      	pop	{r7, pc}
 8008cf0:	40021000 	.word	0x40021000
 8008cf4:	08012a78 	.word	0x08012a78

08008cf8 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8008cf8:	b480      	push	{r7}
 8008cfa:	b083      	sub	sp, #12
 8008cfc:	af00      	add	r7, sp, #0
 8008cfe:	6078      	str	r0, [r7, #4]
 8008d00:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	220f      	movs	r2, #15
 8008d06:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8008d08:	4b12      	ldr	r3, [pc, #72]	; (8008d54 <HAL_RCC_GetClockConfig+0x5c>)
 8008d0a:	689b      	ldr	r3, [r3, #8]
 8008d0c:	f003 0203 	and.w	r2, r3, #3
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8008d14:	4b0f      	ldr	r3, [pc, #60]	; (8008d54 <HAL_RCC_GetClockConfig+0x5c>)
 8008d16:	689b      	ldr	r3, [r3, #8]
 8008d18:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8008d20:	4b0c      	ldr	r3, [pc, #48]	; (8008d54 <HAL_RCC_GetClockConfig+0x5c>)
 8008d22:	689b      	ldr	r3, [r3, #8]
 8008d24:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8008d2c:	4b09      	ldr	r3, [pc, #36]	; (8008d54 <HAL_RCC_GetClockConfig+0x5c>)
 8008d2e:	689b      	ldr	r3, [r3, #8]
 8008d30:	08db      	lsrs	r3, r3, #3
 8008d32:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8008d3a:	4b07      	ldr	r3, [pc, #28]	; (8008d58 <HAL_RCC_GetClockConfig+0x60>)
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	f003 0207 	and.w	r2, r3, #7
 8008d42:	683b      	ldr	r3, [r7, #0]
 8008d44:	601a      	str	r2, [r3, #0]
}
 8008d46:	bf00      	nop
 8008d48:	370c      	adds	r7, #12
 8008d4a:	46bd      	mov	sp, r7
 8008d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d50:	4770      	bx	lr
 8008d52:	bf00      	nop
 8008d54:	40021000 	.word	0x40021000
 8008d58:	40022000 	.word	0x40022000

08008d5c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8008d5c:	b580      	push	{r7, lr}
 8008d5e:	b086      	sub	sp, #24
 8008d60:	af00      	add	r7, sp, #0
 8008d62:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8008d64:	2300      	movs	r3, #0
 8008d66:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8008d68:	4b2a      	ldr	r3, [pc, #168]	; (8008e14 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008d6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d003      	beq.n	8008d7c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8008d74:	f7ff f984 	bl	8008080 <HAL_PWREx_GetVoltageRange>
 8008d78:	6178      	str	r0, [r7, #20]
 8008d7a:	e014      	b.n	8008da6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8008d7c:	4b25      	ldr	r3, [pc, #148]	; (8008e14 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008d7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d80:	4a24      	ldr	r2, [pc, #144]	; (8008e14 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008d82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008d86:	6593      	str	r3, [r2, #88]	; 0x58
 8008d88:	4b22      	ldr	r3, [pc, #136]	; (8008e14 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008d8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008d90:	60fb      	str	r3, [r7, #12]
 8008d92:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8008d94:	f7ff f974 	bl	8008080 <HAL_PWREx_GetVoltageRange>
 8008d98:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8008d9a:	4b1e      	ldr	r3, [pc, #120]	; (8008e14 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008d9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d9e:	4a1d      	ldr	r2, [pc, #116]	; (8008e14 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008da0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008da4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8008da6:	697b      	ldr	r3, [r7, #20]
 8008da8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008dac:	d10b      	bne.n	8008dc6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	2b80      	cmp	r3, #128	; 0x80
 8008db2:	d919      	bls.n	8008de8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	2ba0      	cmp	r3, #160	; 0xa0
 8008db8:	d902      	bls.n	8008dc0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8008dba:	2302      	movs	r3, #2
 8008dbc:	613b      	str	r3, [r7, #16]
 8008dbe:	e013      	b.n	8008de8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8008dc0:	2301      	movs	r3, #1
 8008dc2:	613b      	str	r3, [r7, #16]
 8008dc4:	e010      	b.n	8008de8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	2b80      	cmp	r3, #128	; 0x80
 8008dca:	d902      	bls.n	8008dd2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8008dcc:	2303      	movs	r3, #3
 8008dce:	613b      	str	r3, [r7, #16]
 8008dd0:	e00a      	b.n	8008de8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	2b80      	cmp	r3, #128	; 0x80
 8008dd6:	d102      	bne.n	8008dde <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8008dd8:	2302      	movs	r3, #2
 8008dda:	613b      	str	r3, [r7, #16]
 8008ddc:	e004      	b.n	8008de8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	2b70      	cmp	r3, #112	; 0x70
 8008de2:	d101      	bne.n	8008de8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8008de4:	2301      	movs	r3, #1
 8008de6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8008de8:	4b0b      	ldr	r3, [pc, #44]	; (8008e18 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	f023 0207 	bic.w	r2, r3, #7
 8008df0:	4909      	ldr	r1, [pc, #36]	; (8008e18 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8008df2:	693b      	ldr	r3, [r7, #16]
 8008df4:	4313      	orrs	r3, r2
 8008df6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8008df8:	4b07      	ldr	r3, [pc, #28]	; (8008e18 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	f003 0307 	and.w	r3, r3, #7
 8008e00:	693a      	ldr	r2, [r7, #16]
 8008e02:	429a      	cmp	r2, r3
 8008e04:	d001      	beq.n	8008e0a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8008e06:	2301      	movs	r3, #1
 8008e08:	e000      	b.n	8008e0c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8008e0a:	2300      	movs	r3, #0
}
 8008e0c:	4618      	mov	r0, r3
 8008e0e:	3718      	adds	r7, #24
 8008e10:	46bd      	mov	sp, r7
 8008e12:	bd80      	pop	{r7, pc}
 8008e14:	40021000 	.word	0x40021000
 8008e18:	40022000 	.word	0x40022000

08008e1c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008e1c:	b580      	push	{r7, lr}
 8008e1e:	b086      	sub	sp, #24
 8008e20:	af00      	add	r7, sp, #0
 8008e22:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008e24:	2300      	movs	r3, #0
 8008e26:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008e28:	2300      	movs	r3, #0
 8008e2a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d031      	beq.n	8008e9c <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008e3c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8008e40:	d01a      	beq.n	8008e78 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8008e42:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8008e46:	d814      	bhi.n	8008e72 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d009      	beq.n	8008e60 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8008e4c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008e50:	d10f      	bne.n	8008e72 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8008e52:	4b5d      	ldr	r3, [pc, #372]	; (8008fc8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008e54:	68db      	ldr	r3, [r3, #12]
 8008e56:	4a5c      	ldr	r2, [pc, #368]	; (8008fc8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008e58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008e5c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8008e5e:	e00c      	b.n	8008e7a <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	3304      	adds	r3, #4
 8008e64:	2100      	movs	r1, #0
 8008e66:	4618      	mov	r0, r3
 8008e68:	f000 fa44 	bl	80092f4 <RCCEx_PLLSAI1_Config>
 8008e6c:	4603      	mov	r3, r0
 8008e6e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8008e70:	e003      	b.n	8008e7a <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008e72:	2301      	movs	r3, #1
 8008e74:	74fb      	strb	r3, [r7, #19]
      break;
 8008e76:	e000      	b.n	8008e7a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8008e78:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008e7a:	7cfb      	ldrb	r3, [r7, #19]
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d10b      	bne.n	8008e98 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008e80:	4b51      	ldr	r3, [pc, #324]	; (8008fc8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008e82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008e86:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008e8e:	494e      	ldr	r1, [pc, #312]	; (8008fc8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008e90:	4313      	orrs	r3, r2
 8008e92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8008e96:	e001      	b.n	8008e9c <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e98:	7cfb      	ldrb	r3, [r7, #19]
 8008e9a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	f000 809e 	beq.w	8008fe6 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008eaa:	2300      	movs	r3, #0
 8008eac:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8008eae:	4b46      	ldr	r3, [pc, #280]	; (8008fc8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008eb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008eb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d101      	bne.n	8008ebe <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8008eba:	2301      	movs	r3, #1
 8008ebc:	e000      	b.n	8008ec0 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8008ebe:	2300      	movs	r3, #0
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d00d      	beq.n	8008ee0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008ec4:	4b40      	ldr	r3, [pc, #256]	; (8008fc8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008ec6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ec8:	4a3f      	ldr	r2, [pc, #252]	; (8008fc8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008eca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008ece:	6593      	str	r3, [r2, #88]	; 0x58
 8008ed0:	4b3d      	ldr	r3, [pc, #244]	; (8008fc8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008ed2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ed4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008ed8:	60bb      	str	r3, [r7, #8]
 8008eda:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008edc:	2301      	movs	r3, #1
 8008ede:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008ee0:	4b3a      	ldr	r3, [pc, #232]	; (8008fcc <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	4a39      	ldr	r2, [pc, #228]	; (8008fcc <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8008ee6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008eea:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008eec:	f7fd f9d8 	bl	80062a0 <HAL_GetTick>
 8008ef0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8008ef2:	e009      	b.n	8008f08 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008ef4:	f7fd f9d4 	bl	80062a0 <HAL_GetTick>
 8008ef8:	4602      	mov	r2, r0
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	1ad3      	subs	r3, r2, r3
 8008efe:	2b02      	cmp	r3, #2
 8008f00:	d902      	bls.n	8008f08 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8008f02:	2303      	movs	r3, #3
 8008f04:	74fb      	strb	r3, [r7, #19]
        break;
 8008f06:	e005      	b.n	8008f14 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8008f08:	4b30      	ldr	r3, [pc, #192]	; (8008fcc <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d0ef      	beq.n	8008ef4 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8008f14:	7cfb      	ldrb	r3, [r7, #19]
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d15a      	bne.n	8008fd0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8008f1a:	4b2b      	ldr	r3, [pc, #172]	; (8008fc8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008f1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008f20:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008f24:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8008f26:	697b      	ldr	r3, [r7, #20]
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d01e      	beq.n	8008f6a <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008f30:	697a      	ldr	r2, [r7, #20]
 8008f32:	429a      	cmp	r2, r3
 8008f34:	d019      	beq.n	8008f6a <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8008f36:	4b24      	ldr	r3, [pc, #144]	; (8008fc8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008f38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008f3c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008f40:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008f42:	4b21      	ldr	r3, [pc, #132]	; (8008fc8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008f44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008f48:	4a1f      	ldr	r2, [pc, #124]	; (8008fc8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008f4a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008f4e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008f52:	4b1d      	ldr	r3, [pc, #116]	; (8008fc8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008f54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008f58:	4a1b      	ldr	r2, [pc, #108]	; (8008fc8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008f5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008f5e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8008f62:	4a19      	ldr	r2, [pc, #100]	; (8008fc8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008f64:	697b      	ldr	r3, [r7, #20]
 8008f66:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8008f6a:	697b      	ldr	r3, [r7, #20]
 8008f6c:	f003 0301 	and.w	r3, r3, #1
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d016      	beq.n	8008fa2 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008f74:	f7fd f994 	bl	80062a0 <HAL_GetTick>
 8008f78:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008f7a:	e00b      	b.n	8008f94 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008f7c:	f7fd f990 	bl	80062a0 <HAL_GetTick>
 8008f80:	4602      	mov	r2, r0
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	1ad3      	subs	r3, r2, r3
 8008f86:	f241 3288 	movw	r2, #5000	; 0x1388
 8008f8a:	4293      	cmp	r3, r2
 8008f8c:	d902      	bls.n	8008f94 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8008f8e:	2303      	movs	r3, #3
 8008f90:	74fb      	strb	r3, [r7, #19]
            break;
 8008f92:	e006      	b.n	8008fa2 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008f94:	4b0c      	ldr	r3, [pc, #48]	; (8008fc8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008f96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008f9a:	f003 0302 	and.w	r3, r3, #2
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d0ec      	beq.n	8008f7c <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8008fa2:	7cfb      	ldrb	r3, [r7, #19]
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d10b      	bne.n	8008fc0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008fa8:	4b07      	ldr	r3, [pc, #28]	; (8008fc8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008faa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008fae:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008fb6:	4904      	ldr	r1, [pc, #16]	; (8008fc8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008fb8:	4313      	orrs	r3, r2
 8008fba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8008fbe:	e009      	b.n	8008fd4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008fc0:	7cfb      	ldrb	r3, [r7, #19]
 8008fc2:	74bb      	strb	r3, [r7, #18]
 8008fc4:	e006      	b.n	8008fd4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8008fc6:	bf00      	nop
 8008fc8:	40021000 	.word	0x40021000
 8008fcc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008fd0:	7cfb      	ldrb	r3, [r7, #19]
 8008fd2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008fd4:	7c7b      	ldrb	r3, [r7, #17]
 8008fd6:	2b01      	cmp	r3, #1
 8008fd8:	d105      	bne.n	8008fe6 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008fda:	4b9e      	ldr	r3, [pc, #632]	; (8009254 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8008fdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008fde:	4a9d      	ldr	r2, [pc, #628]	; (8009254 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8008fe0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008fe4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	f003 0301 	and.w	r3, r3, #1
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d00a      	beq.n	8009008 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008ff2:	4b98      	ldr	r3, [pc, #608]	; (8009254 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8008ff4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008ff8:	f023 0203 	bic.w	r2, r3, #3
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	6a1b      	ldr	r3, [r3, #32]
 8009000:	4994      	ldr	r1, [pc, #592]	; (8009254 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8009002:	4313      	orrs	r3, r2
 8009004:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	f003 0302 	and.w	r3, r3, #2
 8009010:	2b00      	cmp	r3, #0
 8009012:	d00a      	beq.n	800902a <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8009014:	4b8f      	ldr	r3, [pc, #572]	; (8009254 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8009016:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800901a:	f023 020c 	bic.w	r2, r3, #12
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009022:	498c      	ldr	r1, [pc, #560]	; (8009254 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8009024:	4313      	orrs	r3, r2
 8009026:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	f003 0304 	and.w	r3, r3, #4
 8009032:	2b00      	cmp	r3, #0
 8009034:	d00a      	beq.n	800904c <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8009036:	4b87      	ldr	r3, [pc, #540]	; (8009254 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8009038:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800903c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009044:	4983      	ldr	r1, [pc, #524]	; (8009254 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8009046:	4313      	orrs	r3, r2
 8009048:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	f003 0308 	and.w	r3, r3, #8
 8009054:	2b00      	cmp	r3, #0
 8009056:	d00a      	beq.n	800906e <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8009058:	4b7e      	ldr	r3, [pc, #504]	; (8009254 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800905a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800905e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009066:	497b      	ldr	r1, [pc, #492]	; (8009254 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8009068:	4313      	orrs	r3, r2
 800906a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	f003 0320 	and.w	r3, r3, #32
 8009076:	2b00      	cmp	r3, #0
 8009078:	d00a      	beq.n	8009090 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800907a:	4b76      	ldr	r3, [pc, #472]	; (8009254 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800907c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009080:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009088:	4972      	ldr	r1, [pc, #456]	; (8009254 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800908a:	4313      	orrs	r3, r2
 800908c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009098:	2b00      	cmp	r3, #0
 800909a:	d00a      	beq.n	80090b2 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800909c:	4b6d      	ldr	r3, [pc, #436]	; (8009254 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800909e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80090a2:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80090aa:	496a      	ldr	r1, [pc, #424]	; (8009254 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80090ac:	4313      	orrs	r3, r2
 80090ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d00a      	beq.n	80090d4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80090be:	4b65      	ldr	r3, [pc, #404]	; (8009254 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80090c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80090c4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80090cc:	4961      	ldr	r1, [pc, #388]	; (8009254 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80090ce:	4313      	orrs	r3, r2
 80090d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d00a      	beq.n	80090f6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80090e0:	4b5c      	ldr	r3, [pc, #368]	; (8009254 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80090e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80090e6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80090ee:	4959      	ldr	r1, [pc, #356]	; (8009254 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80090f0:	4313      	orrs	r3, r2
 80090f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d00a      	beq.n	8009118 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8009102:	4b54      	ldr	r3, [pc, #336]	; (8009254 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8009104:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009108:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009110:	4950      	ldr	r1, [pc, #320]	; (8009254 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8009112:	4313      	orrs	r3, r2
 8009114:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009120:	2b00      	cmp	r3, #0
 8009122:	d00a      	beq.n	800913a <HAL_RCCEx_PeriphCLKConfig+0x31e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8009124:	4b4b      	ldr	r3, [pc, #300]	; (8009254 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8009126:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800912a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009132:	4948      	ldr	r1, [pc, #288]	; (8009254 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8009134:	4313      	orrs	r3, r2
 8009136:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009142:	2b00      	cmp	r3, #0
 8009144:	d00a      	beq.n	800915c <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009146:	4b43      	ldr	r3, [pc, #268]	; (8009254 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8009148:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800914c:	f023 0203 	bic.w	r2, r3, #3
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009154:	493f      	ldr	r1, [pc, #252]	; (8009254 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8009156:	4313      	orrs	r3, r2
 8009158:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009164:	2b00      	cmp	r3, #0
 8009166:	d028      	beq.n	80091ba <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009168:	4b3a      	ldr	r3, [pc, #232]	; (8009254 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800916a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800916e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009176:	4937      	ldr	r1, [pc, #220]	; (8009254 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8009178:	4313      	orrs	r3, r2
 800917a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009182:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009186:	d106      	bne.n	8009196 <HAL_RCCEx_PeriphCLKConfig+0x37a>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009188:	4b32      	ldr	r3, [pc, #200]	; (8009254 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800918a:	68db      	ldr	r3, [r3, #12]
 800918c:	4a31      	ldr	r2, [pc, #196]	; (8009254 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800918e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009192:	60d3      	str	r3, [r2, #12]
 8009194:	e011      	b.n	80091ba <HAL_RCCEx_PeriphCLKConfig+0x39e>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800919a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800919e:	d10c      	bne.n	80091ba <HAL_RCCEx_PeriphCLKConfig+0x39e>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	3304      	adds	r3, #4
 80091a4:	2101      	movs	r1, #1
 80091a6:	4618      	mov	r0, r3
 80091a8:	f000 f8a4 	bl	80092f4 <RCCEx_PLLSAI1_Config>
 80091ac:	4603      	mov	r3, r0
 80091ae:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80091b0:	7cfb      	ldrb	r3, [r7, #19]
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d001      	beq.n	80091ba <HAL_RCCEx_PeriphCLKConfig+0x39e>
        {
          /* set overall return value */
          status = ret;
 80091b6:	7cfb      	ldrb	r3, [r7, #19]
 80091b8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d028      	beq.n	8009218 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80091c6:	4b23      	ldr	r3, [pc, #140]	; (8009254 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80091c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80091cc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80091d4:	491f      	ldr	r1, [pc, #124]	; (8009254 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80091d6:	4313      	orrs	r3, r2
 80091d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80091e0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80091e4:	d106      	bne.n	80091f4 <HAL_RCCEx_PeriphCLKConfig+0x3d8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80091e6:	4b1b      	ldr	r3, [pc, #108]	; (8009254 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80091e8:	68db      	ldr	r3, [r3, #12]
 80091ea:	4a1a      	ldr	r2, [pc, #104]	; (8009254 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80091ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80091f0:	60d3      	str	r3, [r2, #12]
 80091f2:	e011      	b.n	8009218 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80091f8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80091fc:	d10c      	bne.n	8009218 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	3304      	adds	r3, #4
 8009202:	2101      	movs	r1, #1
 8009204:	4618      	mov	r0, r3
 8009206:	f000 f875 	bl	80092f4 <RCCEx_PLLSAI1_Config>
 800920a:	4603      	mov	r3, r0
 800920c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800920e:	7cfb      	ldrb	r3, [r7, #19]
 8009210:	2b00      	cmp	r3, #0
 8009212:	d001      	beq.n	8009218 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
      {
        /* set overall return value */
        status = ret;
 8009214:	7cfb      	ldrb	r3, [r7, #19]
 8009216:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009220:	2b00      	cmp	r3, #0
 8009222:	d02b      	beq.n	800927c <HAL_RCCEx_PeriphCLKConfig+0x460>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009224:	4b0b      	ldr	r3, [pc, #44]	; (8009254 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8009226:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800922a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009232:	4908      	ldr	r1, [pc, #32]	; (8009254 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8009234:	4313      	orrs	r3, r2
 8009236:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800923e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009242:	d109      	bne.n	8009258 <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009244:	4b03      	ldr	r3, [pc, #12]	; (8009254 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8009246:	68db      	ldr	r3, [r3, #12]
 8009248:	4a02      	ldr	r2, [pc, #8]	; (8009254 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800924a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800924e:	60d3      	str	r3, [r2, #12]
 8009250:	e014      	b.n	800927c <HAL_RCCEx_PeriphCLKConfig+0x460>
 8009252:	bf00      	nop
 8009254:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800925c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009260:	d10c      	bne.n	800927c <HAL_RCCEx_PeriphCLKConfig+0x460>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	3304      	adds	r3, #4
 8009266:	2101      	movs	r1, #1
 8009268:	4618      	mov	r0, r3
 800926a:	f000 f843 	bl	80092f4 <RCCEx_PLLSAI1_Config>
 800926e:	4603      	mov	r3, r0
 8009270:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8009272:	7cfb      	ldrb	r3, [r7, #19]
 8009274:	2b00      	cmp	r3, #0
 8009276:	d001      	beq.n	800927c <HAL_RCCEx_PeriphCLKConfig+0x460>
      {
        /* set overall return value */
        status = ret;
 8009278:	7cfb      	ldrb	r3, [r7, #19]
 800927a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009284:	2b00      	cmp	r3, #0
 8009286:	d01c      	beq.n	80092c2 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009288:	4b19      	ldr	r3, [pc, #100]	; (80092f0 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 800928a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800928e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009296:	4916      	ldr	r1, [pc, #88]	; (80092f0 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8009298:	4313      	orrs	r3, r2
 800929a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80092a2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80092a6:	d10c      	bne.n	80092c2 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	3304      	adds	r3, #4
 80092ac:	2102      	movs	r1, #2
 80092ae:	4618      	mov	r0, r3
 80092b0:	f000 f820 	bl	80092f4 <RCCEx_PLLSAI1_Config>
 80092b4:	4603      	mov	r3, r0
 80092b6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80092b8:	7cfb      	ldrb	r3, [r7, #19]
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d001      	beq.n	80092c2 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
      {
        /* set overall return value */
        status = ret;
 80092be:	7cfb      	ldrb	r3, [r7, #19]
 80092c0:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d00a      	beq.n	80092e4 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80092ce:	4b08      	ldr	r3, [pc, #32]	; (80092f0 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 80092d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80092d4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80092dc:	4904      	ldr	r1, [pc, #16]	; (80092f0 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 80092de:	4313      	orrs	r3, r2
 80092e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80092e4:	7cbb      	ldrb	r3, [r7, #18]
}
 80092e6:	4618      	mov	r0, r3
 80092e8:	3718      	adds	r7, #24
 80092ea:	46bd      	mov	sp, r7
 80092ec:	bd80      	pop	{r7, pc}
 80092ee:	bf00      	nop
 80092f0:	40021000 	.word	0x40021000

080092f4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80092f4:	b580      	push	{r7, lr}
 80092f6:	b084      	sub	sp, #16
 80092f8:	af00      	add	r7, sp, #0
 80092fa:	6078      	str	r0, [r7, #4]
 80092fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80092fe:	2300      	movs	r3, #0
 8009300:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8009302:	4b74      	ldr	r3, [pc, #464]	; (80094d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8009304:	68db      	ldr	r3, [r3, #12]
 8009306:	f003 0303 	and.w	r3, r3, #3
 800930a:	2b00      	cmp	r3, #0
 800930c:	d018      	beq.n	8009340 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800930e:	4b71      	ldr	r3, [pc, #452]	; (80094d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8009310:	68db      	ldr	r3, [r3, #12]
 8009312:	f003 0203 	and.w	r2, r3, #3
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	429a      	cmp	r2, r3
 800931c:	d10d      	bne.n	800933a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	681b      	ldr	r3, [r3, #0]
       ||
 8009322:	2b00      	cmp	r3, #0
 8009324:	d009      	beq.n	800933a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8009326:	4b6b      	ldr	r3, [pc, #428]	; (80094d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8009328:	68db      	ldr	r3, [r3, #12]
 800932a:	091b      	lsrs	r3, r3, #4
 800932c:	f003 0307 	and.w	r3, r3, #7
 8009330:	1c5a      	adds	r2, r3, #1
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	685b      	ldr	r3, [r3, #4]
       ||
 8009336:	429a      	cmp	r2, r3
 8009338:	d047      	beq.n	80093ca <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800933a:	2301      	movs	r3, #1
 800933c:	73fb      	strb	r3, [r7, #15]
 800933e:	e044      	b.n	80093ca <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	2b03      	cmp	r3, #3
 8009346:	d018      	beq.n	800937a <RCCEx_PLLSAI1_Config+0x86>
 8009348:	2b03      	cmp	r3, #3
 800934a:	d825      	bhi.n	8009398 <RCCEx_PLLSAI1_Config+0xa4>
 800934c:	2b01      	cmp	r3, #1
 800934e:	d002      	beq.n	8009356 <RCCEx_PLLSAI1_Config+0x62>
 8009350:	2b02      	cmp	r3, #2
 8009352:	d009      	beq.n	8009368 <RCCEx_PLLSAI1_Config+0x74>
 8009354:	e020      	b.n	8009398 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8009356:	4b5f      	ldr	r3, [pc, #380]	; (80094d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	f003 0302 	and.w	r3, r3, #2
 800935e:	2b00      	cmp	r3, #0
 8009360:	d11d      	bne.n	800939e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8009362:	2301      	movs	r3, #1
 8009364:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009366:	e01a      	b.n	800939e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8009368:	4b5a      	ldr	r3, [pc, #360]	; (80094d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009370:	2b00      	cmp	r3, #0
 8009372:	d116      	bne.n	80093a2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8009374:	2301      	movs	r3, #1
 8009376:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009378:	e013      	b.n	80093a2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800937a:	4b56      	ldr	r3, [pc, #344]	; (80094d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009382:	2b00      	cmp	r3, #0
 8009384:	d10f      	bne.n	80093a6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8009386:	4b53      	ldr	r3, [pc, #332]	; (80094d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800938e:	2b00      	cmp	r3, #0
 8009390:	d109      	bne.n	80093a6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8009392:	2301      	movs	r3, #1
 8009394:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8009396:	e006      	b.n	80093a6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8009398:	2301      	movs	r3, #1
 800939a:	73fb      	strb	r3, [r7, #15]
      break;
 800939c:	e004      	b.n	80093a8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800939e:	bf00      	nop
 80093a0:	e002      	b.n	80093a8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80093a2:	bf00      	nop
 80093a4:	e000      	b.n	80093a8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80093a6:	bf00      	nop
    }

    if(status == HAL_OK)
 80093a8:	7bfb      	ldrb	r3, [r7, #15]
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d10d      	bne.n	80093ca <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80093ae:	4b49      	ldr	r3, [pc, #292]	; (80094d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80093b0:	68db      	ldr	r3, [r3, #12]
 80093b2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	6819      	ldr	r1, [r3, #0]
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	685b      	ldr	r3, [r3, #4]
 80093be:	3b01      	subs	r3, #1
 80093c0:	011b      	lsls	r3, r3, #4
 80093c2:	430b      	orrs	r3, r1
 80093c4:	4943      	ldr	r1, [pc, #268]	; (80094d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80093c6:	4313      	orrs	r3, r2
 80093c8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80093ca:	7bfb      	ldrb	r3, [r7, #15]
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d17c      	bne.n	80094ca <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80093d0:	4b40      	ldr	r3, [pc, #256]	; (80094d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	4a3f      	ldr	r2, [pc, #252]	; (80094d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80093d6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80093da:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80093dc:	f7fc ff60 	bl	80062a0 <HAL_GetTick>
 80093e0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80093e2:	e009      	b.n	80093f8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80093e4:	f7fc ff5c 	bl	80062a0 <HAL_GetTick>
 80093e8:	4602      	mov	r2, r0
 80093ea:	68bb      	ldr	r3, [r7, #8]
 80093ec:	1ad3      	subs	r3, r2, r3
 80093ee:	2b02      	cmp	r3, #2
 80093f0:	d902      	bls.n	80093f8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80093f2:	2303      	movs	r3, #3
 80093f4:	73fb      	strb	r3, [r7, #15]
        break;
 80093f6:	e005      	b.n	8009404 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80093f8:	4b36      	ldr	r3, [pc, #216]	; (80094d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009400:	2b00      	cmp	r3, #0
 8009402:	d1ef      	bne.n	80093e4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8009404:	7bfb      	ldrb	r3, [r7, #15]
 8009406:	2b00      	cmp	r3, #0
 8009408:	d15f      	bne.n	80094ca <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800940a:	683b      	ldr	r3, [r7, #0]
 800940c:	2b00      	cmp	r3, #0
 800940e:	d110      	bne.n	8009432 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8009410:	4b30      	ldr	r3, [pc, #192]	; (80094d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8009412:	691b      	ldr	r3, [r3, #16]
 8009414:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8009418:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800941c:	687a      	ldr	r2, [r7, #4]
 800941e:	6892      	ldr	r2, [r2, #8]
 8009420:	0211      	lsls	r1, r2, #8
 8009422:	687a      	ldr	r2, [r7, #4]
 8009424:	68d2      	ldr	r2, [r2, #12]
 8009426:	06d2      	lsls	r2, r2, #27
 8009428:	430a      	orrs	r2, r1
 800942a:	492a      	ldr	r1, [pc, #168]	; (80094d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800942c:	4313      	orrs	r3, r2
 800942e:	610b      	str	r3, [r1, #16]
 8009430:	e027      	b.n	8009482 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8009432:	683b      	ldr	r3, [r7, #0]
 8009434:	2b01      	cmp	r3, #1
 8009436:	d112      	bne.n	800945e <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8009438:	4b26      	ldr	r3, [pc, #152]	; (80094d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800943a:	691b      	ldr	r3, [r3, #16]
 800943c:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8009440:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8009444:	687a      	ldr	r2, [r7, #4]
 8009446:	6892      	ldr	r2, [r2, #8]
 8009448:	0211      	lsls	r1, r2, #8
 800944a:	687a      	ldr	r2, [r7, #4]
 800944c:	6912      	ldr	r2, [r2, #16]
 800944e:	0852      	lsrs	r2, r2, #1
 8009450:	3a01      	subs	r2, #1
 8009452:	0552      	lsls	r2, r2, #21
 8009454:	430a      	orrs	r2, r1
 8009456:	491f      	ldr	r1, [pc, #124]	; (80094d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8009458:	4313      	orrs	r3, r2
 800945a:	610b      	str	r3, [r1, #16]
 800945c:	e011      	b.n	8009482 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800945e:	4b1d      	ldr	r3, [pc, #116]	; (80094d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8009460:	691b      	ldr	r3, [r3, #16]
 8009462:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8009466:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800946a:	687a      	ldr	r2, [r7, #4]
 800946c:	6892      	ldr	r2, [r2, #8]
 800946e:	0211      	lsls	r1, r2, #8
 8009470:	687a      	ldr	r2, [r7, #4]
 8009472:	6952      	ldr	r2, [r2, #20]
 8009474:	0852      	lsrs	r2, r2, #1
 8009476:	3a01      	subs	r2, #1
 8009478:	0652      	lsls	r2, r2, #25
 800947a:	430a      	orrs	r2, r1
 800947c:	4915      	ldr	r1, [pc, #84]	; (80094d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800947e:	4313      	orrs	r3, r2
 8009480:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8009482:	4b14      	ldr	r3, [pc, #80]	; (80094d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	4a13      	ldr	r2, [pc, #76]	; (80094d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8009488:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800948c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800948e:	f7fc ff07 	bl	80062a0 <HAL_GetTick>
 8009492:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8009494:	e009      	b.n	80094aa <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8009496:	f7fc ff03 	bl	80062a0 <HAL_GetTick>
 800949a:	4602      	mov	r2, r0
 800949c:	68bb      	ldr	r3, [r7, #8]
 800949e:	1ad3      	subs	r3, r2, r3
 80094a0:	2b02      	cmp	r3, #2
 80094a2:	d902      	bls.n	80094aa <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80094a4:	2303      	movs	r3, #3
 80094a6:	73fb      	strb	r3, [r7, #15]
          break;
 80094a8:	e005      	b.n	80094b6 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80094aa:	4b0a      	ldr	r3, [pc, #40]	; (80094d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d0ef      	beq.n	8009496 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80094b6:	7bfb      	ldrb	r3, [r7, #15]
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d106      	bne.n	80094ca <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80094bc:	4b05      	ldr	r3, [pc, #20]	; (80094d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80094be:	691a      	ldr	r2, [r3, #16]
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	699b      	ldr	r3, [r3, #24]
 80094c4:	4903      	ldr	r1, [pc, #12]	; (80094d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80094c6:	4313      	orrs	r3, r2
 80094c8:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80094ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80094cc:	4618      	mov	r0, r3
 80094ce:	3710      	adds	r7, #16
 80094d0:	46bd      	mov	sp, r7
 80094d2:	bd80      	pop	{r7, pc}
 80094d4:	40021000 	.word	0x40021000

080094d8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80094d8:	b580      	push	{r7, lr}
 80094da:	b084      	sub	sp, #16
 80094dc:	af00      	add	r7, sp, #0
 80094de:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d101      	bne.n	80094ea <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80094e6:	2301      	movs	r3, #1
 80094e8:	e095      	b.n	8009616 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d108      	bne.n	8009504 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	685b      	ldr	r3, [r3, #4]
 80094f6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80094fa:	d009      	beq.n	8009510 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	2200      	movs	r2, #0
 8009500:	61da      	str	r2, [r3, #28]
 8009502:	e005      	b.n	8009510 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	2200      	movs	r2, #0
 8009508:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	2200      	movs	r2, #0
 800950e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	2200      	movs	r2, #0
 8009514:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800951c:	b2db      	uxtb	r3, r3
 800951e:	2b00      	cmp	r3, #0
 8009520:	d106      	bne.n	8009530 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	2200      	movs	r2, #0
 8009526:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800952a:	6878      	ldr	r0, [r7, #4]
 800952c:	f7fb fef4 	bl	8005318 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	2202      	movs	r2, #2
 8009534:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	681a      	ldr	r2, [r3, #0]
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009546:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	68db      	ldr	r3, [r3, #12]
 800954c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009550:	d902      	bls.n	8009558 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8009552:	2300      	movs	r3, #0
 8009554:	60fb      	str	r3, [r7, #12]
 8009556:	e002      	b.n	800955e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8009558:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800955c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	68db      	ldr	r3, [r3, #12]
 8009562:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8009566:	d007      	beq.n	8009578 <HAL_SPI_Init+0xa0>
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	68db      	ldr	r3, [r3, #12]
 800956c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009570:	d002      	beq.n	8009578 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	2200      	movs	r2, #0
 8009576:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	685b      	ldr	r3, [r3, #4]
 800957c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	689b      	ldr	r3, [r3, #8]
 8009584:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8009588:	431a      	orrs	r2, r3
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	691b      	ldr	r3, [r3, #16]
 800958e:	f003 0302 	and.w	r3, r3, #2
 8009592:	431a      	orrs	r2, r3
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	695b      	ldr	r3, [r3, #20]
 8009598:	f003 0301 	and.w	r3, r3, #1
 800959c:	431a      	orrs	r2, r3
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	699b      	ldr	r3, [r3, #24]
 80095a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80095a6:	431a      	orrs	r2, r3
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	69db      	ldr	r3, [r3, #28]
 80095ac:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80095b0:	431a      	orrs	r2, r3
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	6a1b      	ldr	r3, [r3, #32]
 80095b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80095ba:	ea42 0103 	orr.w	r1, r2, r3
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095c2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	430a      	orrs	r2, r1
 80095cc:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	699b      	ldr	r3, [r3, #24]
 80095d2:	0c1b      	lsrs	r3, r3, #16
 80095d4:	f003 0204 	and.w	r2, r3, #4
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095dc:	f003 0310 	and.w	r3, r3, #16
 80095e0:	431a      	orrs	r2, r3
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80095e6:	f003 0308 	and.w	r3, r3, #8
 80095ea:	431a      	orrs	r2, r3
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	68db      	ldr	r3, [r3, #12]
 80095f0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80095f4:	ea42 0103 	orr.w	r1, r2, r3
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	430a      	orrs	r2, r1
 8009604:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	2200      	movs	r2, #0
 800960a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	2201      	movs	r2, #1
 8009610:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8009614:	2300      	movs	r3, #0
}
 8009616:	4618      	mov	r0, r3
 8009618:	3710      	adds	r7, #16
 800961a:	46bd      	mov	sp, r7
 800961c:	bd80      	pop	{r7, pc}

0800961e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800961e:	b580      	push	{r7, lr}
 8009620:	b088      	sub	sp, #32
 8009622:	af00      	add	r7, sp, #0
 8009624:	60f8      	str	r0, [r7, #12]
 8009626:	60b9      	str	r1, [r7, #8]
 8009628:	603b      	str	r3, [r7, #0]
 800962a:	4613      	mov	r3, r2
 800962c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800962e:	2300      	movs	r3, #0
 8009630:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8009638:	2b01      	cmp	r3, #1
 800963a:	d101      	bne.n	8009640 <HAL_SPI_Transmit+0x22>
 800963c:	2302      	movs	r3, #2
 800963e:	e158      	b.n	80098f2 <HAL_SPI_Transmit+0x2d4>
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	2201      	movs	r2, #1
 8009644:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009648:	f7fc fe2a 	bl	80062a0 <HAL_GetTick>
 800964c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800964e:	88fb      	ldrh	r3, [r7, #6]
 8009650:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8009658:	b2db      	uxtb	r3, r3
 800965a:	2b01      	cmp	r3, #1
 800965c:	d002      	beq.n	8009664 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800965e:	2302      	movs	r3, #2
 8009660:	77fb      	strb	r3, [r7, #31]
    goto error;
 8009662:	e13d      	b.n	80098e0 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8009664:	68bb      	ldr	r3, [r7, #8]
 8009666:	2b00      	cmp	r3, #0
 8009668:	d002      	beq.n	8009670 <HAL_SPI_Transmit+0x52>
 800966a:	88fb      	ldrh	r3, [r7, #6]
 800966c:	2b00      	cmp	r3, #0
 800966e:	d102      	bne.n	8009676 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8009670:	2301      	movs	r3, #1
 8009672:	77fb      	strb	r3, [r7, #31]
    goto error;
 8009674:	e134      	b.n	80098e0 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	2203      	movs	r2, #3
 800967a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	2200      	movs	r2, #0
 8009682:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	68ba      	ldr	r2, [r7, #8]
 8009688:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	88fa      	ldrh	r2, [r7, #6]
 800968e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	88fa      	ldrh	r2, [r7, #6]
 8009694:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	2200      	movs	r2, #0
 800969a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	2200      	movs	r2, #0
 80096a0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	2200      	movs	r2, #0
 80096a8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	2200      	movs	r2, #0
 80096b0:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	2200      	movs	r2, #0
 80096b6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	689b      	ldr	r3, [r3, #8]
 80096bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80096c0:	d10f      	bne.n	80096e2 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	681a      	ldr	r2, [r3, #0]
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80096d0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	681a      	ldr	r2, [r3, #0]
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80096e0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80096ec:	2b40      	cmp	r3, #64	; 0x40
 80096ee:	d007      	beq.n	8009700 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	681a      	ldr	r2, [r3, #0]
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80096fe:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	68db      	ldr	r3, [r3, #12]
 8009704:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009708:	d94b      	bls.n	80097a2 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	685b      	ldr	r3, [r3, #4]
 800970e:	2b00      	cmp	r3, #0
 8009710:	d002      	beq.n	8009718 <HAL_SPI_Transmit+0xfa>
 8009712:	8afb      	ldrh	r3, [r7, #22]
 8009714:	2b01      	cmp	r3, #1
 8009716:	d13e      	bne.n	8009796 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800971c:	881a      	ldrh	r2, [r3, #0]
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009728:	1c9a      	adds	r2, r3, #2
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009732:	b29b      	uxth	r3, r3
 8009734:	3b01      	subs	r3, #1
 8009736:	b29a      	uxth	r2, r3
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800973c:	e02b      	b.n	8009796 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	689b      	ldr	r3, [r3, #8]
 8009744:	f003 0302 	and.w	r3, r3, #2
 8009748:	2b02      	cmp	r3, #2
 800974a:	d112      	bne.n	8009772 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009750:	881a      	ldrh	r2, [r3, #0]
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800975c:	1c9a      	adds	r2, r3, #2
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009766:	b29b      	uxth	r3, r3
 8009768:	3b01      	subs	r3, #1
 800976a:	b29a      	uxth	r2, r3
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009770:	e011      	b.n	8009796 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009772:	f7fc fd95 	bl	80062a0 <HAL_GetTick>
 8009776:	4602      	mov	r2, r0
 8009778:	69bb      	ldr	r3, [r7, #24]
 800977a:	1ad3      	subs	r3, r2, r3
 800977c:	683a      	ldr	r2, [r7, #0]
 800977e:	429a      	cmp	r2, r3
 8009780:	d803      	bhi.n	800978a <HAL_SPI_Transmit+0x16c>
 8009782:	683b      	ldr	r3, [r7, #0]
 8009784:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009788:	d102      	bne.n	8009790 <HAL_SPI_Transmit+0x172>
 800978a:	683b      	ldr	r3, [r7, #0]
 800978c:	2b00      	cmp	r3, #0
 800978e:	d102      	bne.n	8009796 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8009790:	2303      	movs	r3, #3
 8009792:	77fb      	strb	r3, [r7, #31]
          goto error;
 8009794:	e0a4      	b.n	80098e0 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800979a:	b29b      	uxth	r3, r3
 800979c:	2b00      	cmp	r3, #0
 800979e:	d1ce      	bne.n	800973e <HAL_SPI_Transmit+0x120>
 80097a0:	e07c      	b.n	800989c <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	685b      	ldr	r3, [r3, #4]
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d002      	beq.n	80097b0 <HAL_SPI_Transmit+0x192>
 80097aa:	8afb      	ldrh	r3, [r7, #22]
 80097ac:	2b01      	cmp	r3, #1
 80097ae:	d170      	bne.n	8009892 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80097b4:	b29b      	uxth	r3, r3
 80097b6:	2b01      	cmp	r3, #1
 80097b8:	d912      	bls.n	80097e0 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097be:	881a      	ldrh	r2, [r3, #0]
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097ca:	1c9a      	adds	r2, r3, #2
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80097d4:	b29b      	uxth	r3, r3
 80097d6:	3b02      	subs	r3, #2
 80097d8:	b29a      	uxth	r2, r3
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	87da      	strh	r2, [r3, #62]	; 0x3e
 80097de:	e058      	b.n	8009892 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	330c      	adds	r3, #12
 80097ea:	7812      	ldrb	r2, [r2, #0]
 80097ec:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097f2:	1c5a      	adds	r2, r3, #1
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80097fc:	b29b      	uxth	r3, r3
 80097fe:	3b01      	subs	r3, #1
 8009800:	b29a      	uxth	r2, r3
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8009806:	e044      	b.n	8009892 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	689b      	ldr	r3, [r3, #8]
 800980e:	f003 0302 	and.w	r3, r3, #2
 8009812:	2b02      	cmp	r3, #2
 8009814:	d12b      	bne.n	800986e <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800981a:	b29b      	uxth	r3, r3
 800981c:	2b01      	cmp	r3, #1
 800981e:	d912      	bls.n	8009846 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009824:	881a      	ldrh	r2, [r3, #0]
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009830:	1c9a      	adds	r2, r3, #2
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800983a:	b29b      	uxth	r3, r3
 800983c:	3b02      	subs	r3, #2
 800983e:	b29a      	uxth	r2, r3
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009844:	e025      	b.n	8009892 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	330c      	adds	r3, #12
 8009850:	7812      	ldrb	r2, [r2, #0]
 8009852:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009858:	1c5a      	adds	r2, r3, #1
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009862:	b29b      	uxth	r3, r3
 8009864:	3b01      	subs	r3, #1
 8009866:	b29a      	uxth	r2, r3
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800986c:	e011      	b.n	8009892 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800986e:	f7fc fd17 	bl	80062a0 <HAL_GetTick>
 8009872:	4602      	mov	r2, r0
 8009874:	69bb      	ldr	r3, [r7, #24]
 8009876:	1ad3      	subs	r3, r2, r3
 8009878:	683a      	ldr	r2, [r7, #0]
 800987a:	429a      	cmp	r2, r3
 800987c:	d803      	bhi.n	8009886 <HAL_SPI_Transmit+0x268>
 800987e:	683b      	ldr	r3, [r7, #0]
 8009880:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009884:	d102      	bne.n	800988c <HAL_SPI_Transmit+0x26e>
 8009886:	683b      	ldr	r3, [r7, #0]
 8009888:	2b00      	cmp	r3, #0
 800988a:	d102      	bne.n	8009892 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 800988c:	2303      	movs	r3, #3
 800988e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8009890:	e026      	b.n	80098e0 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009896:	b29b      	uxth	r3, r3
 8009898:	2b00      	cmp	r3, #0
 800989a:	d1b5      	bne.n	8009808 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800989c:	69ba      	ldr	r2, [r7, #24]
 800989e:	6839      	ldr	r1, [r7, #0]
 80098a0:	68f8      	ldr	r0, [r7, #12]
 80098a2:	f000 fce3 	bl	800a26c <SPI_EndRxTxTransaction>
 80098a6:	4603      	mov	r3, r0
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d002      	beq.n	80098b2 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	2220      	movs	r2, #32
 80098b0:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	689b      	ldr	r3, [r3, #8]
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d10a      	bne.n	80098d0 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80098ba:	2300      	movs	r3, #0
 80098bc:	613b      	str	r3, [r7, #16]
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	68db      	ldr	r3, [r3, #12]
 80098c4:	613b      	str	r3, [r7, #16]
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	689b      	ldr	r3, [r3, #8]
 80098cc:	613b      	str	r3, [r7, #16]
 80098ce:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d002      	beq.n	80098de <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 80098d8:	2301      	movs	r3, #1
 80098da:	77fb      	strb	r3, [r7, #31]
 80098dc:	e000      	b.n	80098e0 <HAL_SPI_Transmit+0x2c2>
  }

error:
 80098de:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	2201      	movs	r2, #1
 80098e4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	2200      	movs	r2, #0
 80098ec:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80098f0:	7ffb      	ldrb	r3, [r7, #31]
}
 80098f2:	4618      	mov	r0, r3
 80098f4:	3720      	adds	r7, #32
 80098f6:	46bd      	mov	sp, r7
 80098f8:	bd80      	pop	{r7, pc}

080098fa <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80098fa:	b580      	push	{r7, lr}
 80098fc:	b088      	sub	sp, #32
 80098fe:	af02      	add	r7, sp, #8
 8009900:	60f8      	str	r0, [r7, #12]
 8009902:	60b9      	str	r1, [r7, #8]
 8009904:	603b      	str	r3, [r7, #0]
 8009906:	4613      	mov	r3, r2
 8009908:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800990a:	2300      	movs	r3, #0
 800990c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	685b      	ldr	r3, [r3, #4]
 8009912:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009916:	d112      	bne.n	800993e <HAL_SPI_Receive+0x44>
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	689b      	ldr	r3, [r3, #8]
 800991c:	2b00      	cmp	r3, #0
 800991e:	d10e      	bne.n	800993e <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	2204      	movs	r2, #4
 8009924:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8009928:	88fa      	ldrh	r2, [r7, #6]
 800992a:	683b      	ldr	r3, [r7, #0]
 800992c:	9300      	str	r3, [sp, #0]
 800992e:	4613      	mov	r3, r2
 8009930:	68ba      	ldr	r2, [r7, #8]
 8009932:	68b9      	ldr	r1, [r7, #8]
 8009934:	68f8      	ldr	r0, [r7, #12]
 8009936:	f000 f910 	bl	8009b5a <HAL_SPI_TransmitReceive>
 800993a:	4603      	mov	r3, r0
 800993c:	e109      	b.n	8009b52 <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8009944:	2b01      	cmp	r3, #1
 8009946:	d101      	bne.n	800994c <HAL_SPI_Receive+0x52>
 8009948:	2302      	movs	r3, #2
 800994a:	e102      	b.n	8009b52 <HAL_SPI_Receive+0x258>
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	2201      	movs	r2, #1
 8009950:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009954:	f7fc fca4 	bl	80062a0 <HAL_GetTick>
 8009958:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8009960:	b2db      	uxtb	r3, r3
 8009962:	2b01      	cmp	r3, #1
 8009964:	d002      	beq.n	800996c <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8009966:	2302      	movs	r3, #2
 8009968:	75fb      	strb	r3, [r7, #23]
    goto error;
 800996a:	e0e9      	b.n	8009b40 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 800996c:	68bb      	ldr	r3, [r7, #8]
 800996e:	2b00      	cmp	r3, #0
 8009970:	d002      	beq.n	8009978 <HAL_SPI_Receive+0x7e>
 8009972:	88fb      	ldrh	r3, [r7, #6]
 8009974:	2b00      	cmp	r3, #0
 8009976:	d102      	bne.n	800997e <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8009978:	2301      	movs	r3, #1
 800997a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800997c:	e0e0      	b.n	8009b40 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	2204      	movs	r2, #4
 8009982:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	2200      	movs	r2, #0
 800998a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	68ba      	ldr	r2, [r7, #8]
 8009990:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	88fa      	ldrh	r2, [r7, #6]
 8009996:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	88fa      	ldrh	r2, [r7, #6]
 800999e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	2200      	movs	r2, #0
 80099a6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	2200      	movs	r2, #0
 80099ac:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	2200      	movs	r2, #0
 80099b2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	2200      	movs	r2, #0
 80099b8:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	2200      	movs	r2, #0
 80099be:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	68db      	ldr	r3, [r3, #12]
 80099c4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80099c8:	d908      	bls.n	80099dc <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	685a      	ldr	r2, [r3, #4]
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80099d8:	605a      	str	r2, [r3, #4]
 80099da:	e007      	b.n	80099ec <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	685a      	ldr	r2, [r3, #4]
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80099ea:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	689b      	ldr	r3, [r3, #8]
 80099f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80099f4:	d10f      	bne.n	8009a16 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	681a      	ldr	r2, [r3, #0]
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009a04:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	681a      	ldr	r2, [r3, #0]
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8009a14:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a20:	2b40      	cmp	r3, #64	; 0x40
 8009a22:	d007      	beq.n	8009a34 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	681a      	ldr	r2, [r3, #0]
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009a32:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	68db      	ldr	r3, [r3, #12]
 8009a38:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009a3c:	d867      	bhi.n	8009b0e <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8009a3e:	e030      	b.n	8009aa2 <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	689b      	ldr	r3, [r3, #8]
 8009a46:	f003 0301 	and.w	r3, r3, #1
 8009a4a:	2b01      	cmp	r3, #1
 8009a4c:	d117      	bne.n	8009a7e <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	f103 020c 	add.w	r2, r3, #12
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a5a:	7812      	ldrb	r2, [r2, #0]
 8009a5c:	b2d2      	uxtb	r2, r2
 8009a5e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a64:	1c5a      	adds	r2, r3, #1
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009a70:	b29b      	uxth	r3, r3
 8009a72:	3b01      	subs	r3, #1
 8009a74:	b29a      	uxth	r2, r3
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8009a7c:	e011      	b.n	8009aa2 <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009a7e:	f7fc fc0f 	bl	80062a0 <HAL_GetTick>
 8009a82:	4602      	mov	r2, r0
 8009a84:	693b      	ldr	r3, [r7, #16]
 8009a86:	1ad3      	subs	r3, r2, r3
 8009a88:	683a      	ldr	r2, [r7, #0]
 8009a8a:	429a      	cmp	r2, r3
 8009a8c:	d803      	bhi.n	8009a96 <HAL_SPI_Receive+0x19c>
 8009a8e:	683b      	ldr	r3, [r7, #0]
 8009a90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a94:	d102      	bne.n	8009a9c <HAL_SPI_Receive+0x1a2>
 8009a96:	683b      	ldr	r3, [r7, #0]
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	d102      	bne.n	8009aa2 <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8009a9c:	2303      	movs	r3, #3
 8009a9e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8009aa0:	e04e      	b.n	8009b40 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009aa8:	b29b      	uxth	r3, r3
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d1c8      	bne.n	8009a40 <HAL_SPI_Receive+0x146>
 8009aae:	e034      	b.n	8009b1a <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	689b      	ldr	r3, [r3, #8]
 8009ab6:	f003 0301 	and.w	r3, r3, #1
 8009aba:	2b01      	cmp	r3, #1
 8009abc:	d115      	bne.n	8009aea <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	68da      	ldr	r2, [r3, #12]
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ac8:	b292      	uxth	r2, r2
 8009aca:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ad0:	1c9a      	adds	r2, r3, #2
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009adc:	b29b      	uxth	r3, r3
 8009ade:	3b01      	subs	r3, #1
 8009ae0:	b29a      	uxth	r2, r3
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8009ae8:	e011      	b.n	8009b0e <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009aea:	f7fc fbd9 	bl	80062a0 <HAL_GetTick>
 8009aee:	4602      	mov	r2, r0
 8009af0:	693b      	ldr	r3, [r7, #16]
 8009af2:	1ad3      	subs	r3, r2, r3
 8009af4:	683a      	ldr	r2, [r7, #0]
 8009af6:	429a      	cmp	r2, r3
 8009af8:	d803      	bhi.n	8009b02 <HAL_SPI_Receive+0x208>
 8009afa:	683b      	ldr	r3, [r7, #0]
 8009afc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b00:	d102      	bne.n	8009b08 <HAL_SPI_Receive+0x20e>
 8009b02:	683b      	ldr	r3, [r7, #0]
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d102      	bne.n	8009b0e <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8009b08:	2303      	movs	r3, #3
 8009b0a:	75fb      	strb	r3, [r7, #23]
          goto error;
 8009b0c:	e018      	b.n	8009b40 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009b14:	b29b      	uxth	r3, r3
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d1ca      	bne.n	8009ab0 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009b1a:	693a      	ldr	r2, [r7, #16]
 8009b1c:	6839      	ldr	r1, [r7, #0]
 8009b1e:	68f8      	ldr	r0, [r7, #12]
 8009b20:	f000 fb4c 	bl	800a1bc <SPI_EndRxTransaction>
 8009b24:	4603      	mov	r3, r0
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d002      	beq.n	8009b30 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	2220      	movs	r2, #32
 8009b2e:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d002      	beq.n	8009b3e <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8009b38:	2301      	movs	r3, #1
 8009b3a:	75fb      	strb	r3, [r7, #23]
 8009b3c:	e000      	b.n	8009b40 <HAL_SPI_Receive+0x246>
  }

error :
 8009b3e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	2201      	movs	r2, #1
 8009b44:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	2200      	movs	r2, #0
 8009b4c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8009b50:	7dfb      	ldrb	r3, [r7, #23]
}
 8009b52:	4618      	mov	r0, r3
 8009b54:	3718      	adds	r7, #24
 8009b56:	46bd      	mov	sp, r7
 8009b58:	bd80      	pop	{r7, pc}

08009b5a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8009b5a:	b580      	push	{r7, lr}
 8009b5c:	b08a      	sub	sp, #40	; 0x28
 8009b5e:	af00      	add	r7, sp, #0
 8009b60:	60f8      	str	r0, [r7, #12]
 8009b62:	60b9      	str	r1, [r7, #8]
 8009b64:	607a      	str	r2, [r7, #4]
 8009b66:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8009b68:	2301      	movs	r3, #1
 8009b6a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8009b6c:	2300      	movs	r3, #0
 8009b6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8009b78:	2b01      	cmp	r3, #1
 8009b7a:	d101      	bne.n	8009b80 <HAL_SPI_TransmitReceive+0x26>
 8009b7c:	2302      	movs	r3, #2
 8009b7e:	e1fb      	b.n	8009f78 <HAL_SPI_TransmitReceive+0x41e>
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	2201      	movs	r2, #1
 8009b84:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009b88:	f7fc fb8a 	bl	80062a0 <HAL_GetTick>
 8009b8c:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8009b94:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	685b      	ldr	r3, [r3, #4]
 8009b9a:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8009b9c:	887b      	ldrh	r3, [r7, #2]
 8009b9e:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8009ba0:	887b      	ldrh	r3, [r7, #2]
 8009ba2:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8009ba4:	7efb      	ldrb	r3, [r7, #27]
 8009ba6:	2b01      	cmp	r3, #1
 8009ba8:	d00e      	beq.n	8009bc8 <HAL_SPI_TransmitReceive+0x6e>
 8009baa:	697b      	ldr	r3, [r7, #20]
 8009bac:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009bb0:	d106      	bne.n	8009bc0 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	689b      	ldr	r3, [r3, #8]
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d102      	bne.n	8009bc0 <HAL_SPI_TransmitReceive+0x66>
 8009bba:	7efb      	ldrb	r3, [r7, #27]
 8009bbc:	2b04      	cmp	r3, #4
 8009bbe:	d003      	beq.n	8009bc8 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8009bc0:	2302      	movs	r3, #2
 8009bc2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8009bc6:	e1cd      	b.n	8009f64 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8009bc8:	68bb      	ldr	r3, [r7, #8]
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d005      	beq.n	8009bda <HAL_SPI_TransmitReceive+0x80>
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d002      	beq.n	8009bda <HAL_SPI_TransmitReceive+0x80>
 8009bd4:	887b      	ldrh	r3, [r7, #2]
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d103      	bne.n	8009be2 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8009bda:	2301      	movs	r3, #1
 8009bdc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8009be0:	e1c0      	b.n	8009f64 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8009be8:	b2db      	uxtb	r3, r3
 8009bea:	2b04      	cmp	r3, #4
 8009bec:	d003      	beq.n	8009bf6 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	2205      	movs	r2, #5
 8009bf2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	2200      	movs	r2, #0
 8009bfa:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	687a      	ldr	r2, [r7, #4]
 8009c00:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	887a      	ldrh	r2, [r7, #2]
 8009c06:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	887a      	ldrh	r2, [r7, #2]
 8009c0e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	68ba      	ldr	r2, [r7, #8]
 8009c16:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	887a      	ldrh	r2, [r7, #2]
 8009c1c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	887a      	ldrh	r2, [r7, #2]
 8009c22:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	2200      	movs	r2, #0
 8009c28:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	2200      	movs	r2, #0
 8009c2e:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	68db      	ldr	r3, [r3, #12]
 8009c34:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009c38:	d802      	bhi.n	8009c40 <HAL_SPI_TransmitReceive+0xe6>
 8009c3a:	8a3b      	ldrh	r3, [r7, #16]
 8009c3c:	2b01      	cmp	r3, #1
 8009c3e:	d908      	bls.n	8009c52 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	685a      	ldr	r2, [r3, #4]
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8009c4e:	605a      	str	r2, [r3, #4]
 8009c50:	e007      	b.n	8009c62 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	685a      	ldr	r2, [r3, #4]
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009c60:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c6c:	2b40      	cmp	r3, #64	; 0x40
 8009c6e:	d007      	beq.n	8009c80 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	681a      	ldr	r2, [r3, #0]
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009c7e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	68db      	ldr	r3, [r3, #12]
 8009c84:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009c88:	d97c      	bls.n	8009d84 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	685b      	ldr	r3, [r3, #4]
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d002      	beq.n	8009c98 <HAL_SPI_TransmitReceive+0x13e>
 8009c92:	8a7b      	ldrh	r3, [r7, #18]
 8009c94:	2b01      	cmp	r3, #1
 8009c96:	d169      	bne.n	8009d6c <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c9c:	881a      	ldrh	r2, [r3, #0]
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ca8:	1c9a      	adds	r2, r3, #2
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009cb2:	b29b      	uxth	r3, r3
 8009cb4:	3b01      	subs	r3, #1
 8009cb6:	b29a      	uxth	r2, r3
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009cbc:	e056      	b.n	8009d6c <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	689b      	ldr	r3, [r3, #8]
 8009cc4:	f003 0302 	and.w	r3, r3, #2
 8009cc8:	2b02      	cmp	r3, #2
 8009cca:	d11b      	bne.n	8009d04 <HAL_SPI_TransmitReceive+0x1aa>
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009cd0:	b29b      	uxth	r3, r3
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	d016      	beq.n	8009d04 <HAL_SPI_TransmitReceive+0x1aa>
 8009cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cd8:	2b01      	cmp	r3, #1
 8009cda:	d113      	bne.n	8009d04 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ce0:	881a      	ldrh	r2, [r3, #0]
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009cec:	1c9a      	adds	r2, r3, #2
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009cf6:	b29b      	uxth	r3, r3
 8009cf8:	3b01      	subs	r3, #1
 8009cfa:	b29a      	uxth	r2, r3
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009d00:	2300      	movs	r3, #0
 8009d02:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	689b      	ldr	r3, [r3, #8]
 8009d0a:	f003 0301 	and.w	r3, r3, #1
 8009d0e:	2b01      	cmp	r3, #1
 8009d10:	d11c      	bne.n	8009d4c <HAL_SPI_TransmitReceive+0x1f2>
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009d18:	b29b      	uxth	r3, r3
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d016      	beq.n	8009d4c <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	68da      	ldr	r2, [r3, #12]
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d28:	b292      	uxth	r2, r2
 8009d2a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d30:	1c9a      	adds	r2, r3, #2
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009d3c:	b29b      	uxth	r3, r3
 8009d3e:	3b01      	subs	r3, #1
 8009d40:	b29a      	uxth	r2, r3
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009d48:	2301      	movs	r3, #1
 8009d4a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8009d4c:	f7fc faa8 	bl	80062a0 <HAL_GetTick>
 8009d50:	4602      	mov	r2, r0
 8009d52:	69fb      	ldr	r3, [r7, #28]
 8009d54:	1ad3      	subs	r3, r2, r3
 8009d56:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009d58:	429a      	cmp	r2, r3
 8009d5a:	d807      	bhi.n	8009d6c <HAL_SPI_TransmitReceive+0x212>
 8009d5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d62:	d003      	beq.n	8009d6c <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8009d64:	2303      	movs	r3, #3
 8009d66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8009d6a:	e0fb      	b.n	8009f64 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009d70:	b29b      	uxth	r3, r3
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d1a3      	bne.n	8009cbe <HAL_SPI_TransmitReceive+0x164>
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009d7c:	b29b      	uxth	r3, r3
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d19d      	bne.n	8009cbe <HAL_SPI_TransmitReceive+0x164>
 8009d82:	e0df      	b.n	8009f44 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	685b      	ldr	r3, [r3, #4]
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d003      	beq.n	8009d94 <HAL_SPI_TransmitReceive+0x23a>
 8009d8c:	8a7b      	ldrh	r3, [r7, #18]
 8009d8e:	2b01      	cmp	r3, #1
 8009d90:	f040 80cb 	bne.w	8009f2a <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8009d94:	68fb      	ldr	r3, [r7, #12]
 8009d96:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009d98:	b29b      	uxth	r3, r3
 8009d9a:	2b01      	cmp	r3, #1
 8009d9c:	d912      	bls.n	8009dc4 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009da2:	881a      	ldrh	r2, [r3, #0]
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009dae:	1c9a      	adds	r2, r3, #2
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009db8:	b29b      	uxth	r3, r3
 8009dba:	3b02      	subs	r3, #2
 8009dbc:	b29a      	uxth	r2, r3
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009dc2:	e0b2      	b.n	8009f2a <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	330c      	adds	r3, #12
 8009dce:	7812      	ldrb	r2, [r2, #0]
 8009dd0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009dd6:	1c5a      	adds	r2, r3, #1
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009de0:	b29b      	uxth	r3, r3
 8009de2:	3b01      	subs	r3, #1
 8009de4:	b29a      	uxth	r2, r3
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009dea:	e09e      	b.n	8009f2a <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	689b      	ldr	r3, [r3, #8]
 8009df2:	f003 0302 	and.w	r3, r3, #2
 8009df6:	2b02      	cmp	r3, #2
 8009df8:	d134      	bne.n	8009e64 <HAL_SPI_TransmitReceive+0x30a>
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009dfe:	b29b      	uxth	r3, r3
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d02f      	beq.n	8009e64 <HAL_SPI_TransmitReceive+0x30a>
 8009e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e06:	2b01      	cmp	r3, #1
 8009e08:	d12c      	bne.n	8009e64 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009e0e:	b29b      	uxth	r3, r3
 8009e10:	2b01      	cmp	r3, #1
 8009e12:	d912      	bls.n	8009e3a <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e18:	881a      	ldrh	r2, [r3, #0]
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e24:	1c9a      	adds	r2, r3, #2
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009e2e:	b29b      	uxth	r3, r3
 8009e30:	3b02      	subs	r3, #2
 8009e32:	b29a      	uxth	r2, r3
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009e38:	e012      	b.n	8009e60 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	330c      	adds	r3, #12
 8009e44:	7812      	ldrb	r2, [r2, #0]
 8009e46:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e4c:	1c5a      	adds	r2, r3, #1
 8009e4e:	68fb      	ldr	r3, [r7, #12]
 8009e50:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009e56:	b29b      	uxth	r3, r3
 8009e58:	3b01      	subs	r3, #1
 8009e5a:	b29a      	uxth	r2, r3
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009e60:	2300      	movs	r3, #0
 8009e62:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	689b      	ldr	r3, [r3, #8]
 8009e6a:	f003 0301 	and.w	r3, r3, #1
 8009e6e:	2b01      	cmp	r3, #1
 8009e70:	d148      	bne.n	8009f04 <HAL_SPI_TransmitReceive+0x3aa>
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009e78:	b29b      	uxth	r3, r3
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d042      	beq.n	8009f04 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009e84:	b29b      	uxth	r3, r3
 8009e86:	2b01      	cmp	r3, #1
 8009e88:	d923      	bls.n	8009ed2 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	68da      	ldr	r2, [r3, #12]
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e94:	b292      	uxth	r2, r2
 8009e96:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e9c:	1c9a      	adds	r2, r3, #2
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009ea8:	b29b      	uxth	r3, r3
 8009eaa:	3b02      	subs	r3, #2
 8009eac:	b29a      	uxth	r2, r3
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009eba:	b29b      	uxth	r3, r3
 8009ebc:	2b01      	cmp	r3, #1
 8009ebe:	d81f      	bhi.n	8009f00 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	685a      	ldr	r2, [r3, #4]
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009ece:	605a      	str	r2, [r3, #4]
 8009ed0:	e016      	b.n	8009f00 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	f103 020c 	add.w	r2, r3, #12
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ede:	7812      	ldrb	r2, [r2, #0]
 8009ee0:	b2d2      	uxtb	r2, r2
 8009ee2:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ee8:	1c5a      	adds	r2, r3, #1
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8009eee:	68fb      	ldr	r3, [r7, #12]
 8009ef0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009ef4:	b29b      	uxth	r3, r3
 8009ef6:	3b01      	subs	r3, #1
 8009ef8:	b29a      	uxth	r2, r3
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009f00:	2301      	movs	r3, #1
 8009f02:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8009f04:	f7fc f9cc 	bl	80062a0 <HAL_GetTick>
 8009f08:	4602      	mov	r2, r0
 8009f0a:	69fb      	ldr	r3, [r7, #28]
 8009f0c:	1ad3      	subs	r3, r2, r3
 8009f0e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009f10:	429a      	cmp	r2, r3
 8009f12:	d803      	bhi.n	8009f1c <HAL_SPI_TransmitReceive+0x3c2>
 8009f14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f1a:	d102      	bne.n	8009f22 <HAL_SPI_TransmitReceive+0x3c8>
 8009f1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d103      	bne.n	8009f2a <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8009f22:	2303      	movs	r3, #3
 8009f24:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8009f28:	e01c      	b.n	8009f64 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009f2e:	b29b      	uxth	r3, r3
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	f47f af5b 	bne.w	8009dec <HAL_SPI_TransmitReceive+0x292>
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009f3c:	b29b      	uxth	r3, r3
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	f47f af54 	bne.w	8009dec <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009f44:	69fa      	ldr	r2, [r7, #28]
 8009f46:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009f48:	68f8      	ldr	r0, [r7, #12]
 8009f4a:	f000 f98f 	bl	800a26c <SPI_EndRxTxTransaction>
 8009f4e:	4603      	mov	r3, r0
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d006      	beq.n	8009f62 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8009f54:	2301      	movs	r3, #1
 8009f56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	2220      	movs	r2, #32
 8009f5e:	661a      	str	r2, [r3, #96]	; 0x60
 8009f60:	e000      	b.n	8009f64 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8009f62:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	2201      	movs	r2, #1
 8009f68:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	2200      	movs	r2, #0
 8009f70:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8009f74:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8009f78:	4618      	mov	r0, r3
 8009f7a:	3728      	adds	r7, #40	; 0x28
 8009f7c:	46bd      	mov	sp, r7
 8009f7e:	bd80      	pop	{r7, pc}

08009f80 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009f80:	b580      	push	{r7, lr}
 8009f82:	b088      	sub	sp, #32
 8009f84:	af00      	add	r7, sp, #0
 8009f86:	60f8      	str	r0, [r7, #12]
 8009f88:	60b9      	str	r1, [r7, #8]
 8009f8a:	603b      	str	r3, [r7, #0]
 8009f8c:	4613      	mov	r3, r2
 8009f8e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8009f90:	f7fc f986 	bl	80062a0 <HAL_GetTick>
 8009f94:	4602      	mov	r2, r0
 8009f96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f98:	1a9b      	subs	r3, r3, r2
 8009f9a:	683a      	ldr	r2, [r7, #0]
 8009f9c:	4413      	add	r3, r2
 8009f9e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8009fa0:	f7fc f97e 	bl	80062a0 <HAL_GetTick>
 8009fa4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8009fa6:	4b39      	ldr	r3, [pc, #228]	; (800a08c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	015b      	lsls	r3, r3, #5
 8009fac:	0d1b      	lsrs	r3, r3, #20
 8009fae:	69fa      	ldr	r2, [r7, #28]
 8009fb0:	fb02 f303 	mul.w	r3, r2, r3
 8009fb4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009fb6:	e054      	b.n	800a062 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009fb8:	683b      	ldr	r3, [r7, #0]
 8009fba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009fbe:	d050      	beq.n	800a062 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009fc0:	f7fc f96e 	bl	80062a0 <HAL_GetTick>
 8009fc4:	4602      	mov	r2, r0
 8009fc6:	69bb      	ldr	r3, [r7, #24]
 8009fc8:	1ad3      	subs	r3, r2, r3
 8009fca:	69fa      	ldr	r2, [r7, #28]
 8009fcc:	429a      	cmp	r2, r3
 8009fce:	d902      	bls.n	8009fd6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8009fd0:	69fb      	ldr	r3, [r7, #28]
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d13d      	bne.n	800a052 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	685a      	ldr	r2, [r3, #4]
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009fe4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	685b      	ldr	r3, [r3, #4]
 8009fea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009fee:	d111      	bne.n	800a014 <SPI_WaitFlagStateUntilTimeout+0x94>
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	689b      	ldr	r3, [r3, #8]
 8009ff4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009ff8:	d004      	beq.n	800a004 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	689b      	ldr	r3, [r3, #8]
 8009ffe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a002:	d107      	bne.n	800a014 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	681a      	ldr	r2, [r3, #0]
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a012:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a018:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a01c:	d10f      	bne.n	800a03e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	681a      	ldr	r2, [r3, #0]
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a02c:	601a      	str	r2, [r3, #0]
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	681a      	ldr	r2, [r3, #0]
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a03c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	2201      	movs	r2, #1
 800a042:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	2200      	movs	r2, #0
 800a04a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800a04e:	2303      	movs	r3, #3
 800a050:	e017      	b.n	800a082 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800a052:	697b      	ldr	r3, [r7, #20]
 800a054:	2b00      	cmp	r3, #0
 800a056:	d101      	bne.n	800a05c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800a058:	2300      	movs	r3, #0
 800a05a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800a05c:	697b      	ldr	r3, [r7, #20]
 800a05e:	3b01      	subs	r3, #1
 800a060:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	689a      	ldr	r2, [r3, #8]
 800a068:	68bb      	ldr	r3, [r7, #8]
 800a06a:	4013      	ands	r3, r2
 800a06c:	68ba      	ldr	r2, [r7, #8]
 800a06e:	429a      	cmp	r2, r3
 800a070:	bf0c      	ite	eq
 800a072:	2301      	moveq	r3, #1
 800a074:	2300      	movne	r3, #0
 800a076:	b2db      	uxtb	r3, r3
 800a078:	461a      	mov	r2, r3
 800a07a:	79fb      	ldrb	r3, [r7, #7]
 800a07c:	429a      	cmp	r2, r3
 800a07e:	d19b      	bne.n	8009fb8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800a080:	2300      	movs	r3, #0
}
 800a082:	4618      	mov	r0, r3
 800a084:	3720      	adds	r7, #32
 800a086:	46bd      	mov	sp, r7
 800a088:	bd80      	pop	{r7, pc}
 800a08a:	bf00      	nop
 800a08c:	20000028 	.word	0x20000028

0800a090 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800a090:	b580      	push	{r7, lr}
 800a092:	b08a      	sub	sp, #40	; 0x28
 800a094:	af00      	add	r7, sp, #0
 800a096:	60f8      	str	r0, [r7, #12]
 800a098:	60b9      	str	r1, [r7, #8]
 800a09a:	607a      	str	r2, [r7, #4]
 800a09c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800a09e:	2300      	movs	r3, #0
 800a0a0:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800a0a2:	f7fc f8fd 	bl	80062a0 <HAL_GetTick>
 800a0a6:	4602      	mov	r2, r0
 800a0a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0aa:	1a9b      	subs	r3, r3, r2
 800a0ac:	683a      	ldr	r2, [r7, #0]
 800a0ae:	4413      	add	r3, r2
 800a0b0:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800a0b2:	f7fc f8f5 	bl	80062a0 <HAL_GetTick>
 800a0b6:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	330c      	adds	r3, #12
 800a0be:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800a0c0:	4b3d      	ldr	r3, [pc, #244]	; (800a1b8 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800a0c2:	681a      	ldr	r2, [r3, #0]
 800a0c4:	4613      	mov	r3, r2
 800a0c6:	009b      	lsls	r3, r3, #2
 800a0c8:	4413      	add	r3, r2
 800a0ca:	00da      	lsls	r2, r3, #3
 800a0cc:	1ad3      	subs	r3, r2, r3
 800a0ce:	0d1b      	lsrs	r3, r3, #20
 800a0d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a0d2:	fb02 f303 	mul.w	r3, r2, r3
 800a0d6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800a0d8:	e060      	b.n	800a19c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800a0da:	68bb      	ldr	r3, [r7, #8]
 800a0dc:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800a0e0:	d107      	bne.n	800a0f2 <SPI_WaitFifoStateUntilTimeout+0x62>
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d104      	bne.n	800a0f2 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800a0e8:	69fb      	ldr	r3, [r7, #28]
 800a0ea:	781b      	ldrb	r3, [r3, #0]
 800a0ec:	b2db      	uxtb	r3, r3
 800a0ee:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800a0f0:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800a0f2:	683b      	ldr	r3, [r7, #0]
 800a0f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a0f8:	d050      	beq.n	800a19c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800a0fa:	f7fc f8d1 	bl	80062a0 <HAL_GetTick>
 800a0fe:	4602      	mov	r2, r0
 800a100:	6a3b      	ldr	r3, [r7, #32]
 800a102:	1ad3      	subs	r3, r2, r3
 800a104:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a106:	429a      	cmp	r2, r3
 800a108:	d902      	bls.n	800a110 <SPI_WaitFifoStateUntilTimeout+0x80>
 800a10a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d13d      	bne.n	800a18c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	685a      	ldr	r2, [r3, #4]
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800a11e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	685b      	ldr	r3, [r3, #4]
 800a124:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a128:	d111      	bne.n	800a14e <SPI_WaitFifoStateUntilTimeout+0xbe>
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	689b      	ldr	r3, [r3, #8]
 800a12e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a132:	d004      	beq.n	800a13e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a134:	68fb      	ldr	r3, [r7, #12]
 800a136:	689b      	ldr	r3, [r3, #8]
 800a138:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a13c:	d107      	bne.n	800a14e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	681a      	ldr	r2, [r3, #0]
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a14c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a152:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a156:	d10f      	bne.n	800a178 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	681a      	ldr	r2, [r3, #0]
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a166:	601a      	str	r2, [r3, #0]
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	681a      	ldr	r2, [r3, #0]
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a176:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800a178:	68fb      	ldr	r3, [r7, #12]
 800a17a:	2201      	movs	r2, #1
 800a17c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	2200      	movs	r2, #0
 800a184:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800a188:	2303      	movs	r3, #3
 800a18a:	e010      	b.n	800a1ae <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800a18c:	69bb      	ldr	r3, [r7, #24]
 800a18e:	2b00      	cmp	r3, #0
 800a190:	d101      	bne.n	800a196 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800a192:	2300      	movs	r3, #0
 800a194:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800a196:	69bb      	ldr	r3, [r7, #24]
 800a198:	3b01      	subs	r3, #1
 800a19a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	689a      	ldr	r2, [r3, #8]
 800a1a2:	68bb      	ldr	r3, [r7, #8]
 800a1a4:	4013      	ands	r3, r2
 800a1a6:	687a      	ldr	r2, [r7, #4]
 800a1a8:	429a      	cmp	r2, r3
 800a1aa:	d196      	bne.n	800a0da <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800a1ac:	2300      	movs	r3, #0
}
 800a1ae:	4618      	mov	r0, r3
 800a1b0:	3728      	adds	r7, #40	; 0x28
 800a1b2:	46bd      	mov	sp, r7
 800a1b4:	bd80      	pop	{r7, pc}
 800a1b6:	bf00      	nop
 800a1b8:	20000028 	.word	0x20000028

0800a1bc <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800a1bc:	b580      	push	{r7, lr}
 800a1be:	b086      	sub	sp, #24
 800a1c0:	af02      	add	r7, sp, #8
 800a1c2:	60f8      	str	r0, [r7, #12]
 800a1c4:	60b9      	str	r1, [r7, #8]
 800a1c6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	685b      	ldr	r3, [r3, #4]
 800a1cc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a1d0:	d111      	bne.n	800a1f6 <SPI_EndRxTransaction+0x3a>
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	689b      	ldr	r3, [r3, #8]
 800a1d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a1da:	d004      	beq.n	800a1e6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	689b      	ldr	r3, [r3, #8]
 800a1e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a1e4:	d107      	bne.n	800a1f6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	681a      	ldr	r2, [r3, #0]
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a1f4:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	9300      	str	r3, [sp, #0]
 800a1fa:	68bb      	ldr	r3, [r7, #8]
 800a1fc:	2200      	movs	r2, #0
 800a1fe:	2180      	movs	r1, #128	; 0x80
 800a200:	68f8      	ldr	r0, [r7, #12]
 800a202:	f7ff febd 	bl	8009f80 <SPI_WaitFlagStateUntilTimeout>
 800a206:	4603      	mov	r3, r0
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d007      	beq.n	800a21c <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a210:	f043 0220 	orr.w	r2, r3, #32
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800a218:	2303      	movs	r3, #3
 800a21a:	e023      	b.n	800a264 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	685b      	ldr	r3, [r3, #4]
 800a220:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a224:	d11d      	bne.n	800a262 <SPI_EndRxTransaction+0xa6>
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	689b      	ldr	r3, [r3, #8]
 800a22a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a22e:	d004      	beq.n	800a23a <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	689b      	ldr	r3, [r3, #8]
 800a234:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a238:	d113      	bne.n	800a262 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	9300      	str	r3, [sp, #0]
 800a23e:	68bb      	ldr	r3, [r7, #8]
 800a240:	2200      	movs	r2, #0
 800a242:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800a246:	68f8      	ldr	r0, [r7, #12]
 800a248:	f7ff ff22 	bl	800a090 <SPI_WaitFifoStateUntilTimeout>
 800a24c:	4603      	mov	r3, r0
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d007      	beq.n	800a262 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a256:	f043 0220 	orr.w	r2, r3, #32
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800a25e:	2303      	movs	r3, #3
 800a260:	e000      	b.n	800a264 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800a262:	2300      	movs	r3, #0
}
 800a264:	4618      	mov	r0, r3
 800a266:	3710      	adds	r7, #16
 800a268:	46bd      	mov	sp, r7
 800a26a:	bd80      	pop	{r7, pc}

0800a26c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800a26c:	b580      	push	{r7, lr}
 800a26e:	b086      	sub	sp, #24
 800a270:	af02      	add	r7, sp, #8
 800a272:	60f8      	str	r0, [r7, #12]
 800a274:	60b9      	str	r1, [r7, #8]
 800a276:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	9300      	str	r3, [sp, #0]
 800a27c:	68bb      	ldr	r3, [r7, #8]
 800a27e:	2200      	movs	r2, #0
 800a280:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800a284:	68f8      	ldr	r0, [r7, #12]
 800a286:	f7ff ff03 	bl	800a090 <SPI_WaitFifoStateUntilTimeout>
 800a28a:	4603      	mov	r3, r0
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	d007      	beq.n	800a2a0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a294:	f043 0220 	orr.w	r2, r3, #32
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800a29c:	2303      	movs	r3, #3
 800a29e:	e027      	b.n	800a2f0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	9300      	str	r3, [sp, #0]
 800a2a4:	68bb      	ldr	r3, [r7, #8]
 800a2a6:	2200      	movs	r2, #0
 800a2a8:	2180      	movs	r1, #128	; 0x80
 800a2aa:	68f8      	ldr	r0, [r7, #12]
 800a2ac:	f7ff fe68 	bl	8009f80 <SPI_WaitFlagStateUntilTimeout>
 800a2b0:	4603      	mov	r3, r0
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d007      	beq.n	800a2c6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a2b6:	68fb      	ldr	r3, [r7, #12]
 800a2b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a2ba:	f043 0220 	orr.w	r2, r3, #32
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800a2c2:	2303      	movs	r3, #3
 800a2c4:	e014      	b.n	800a2f0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	9300      	str	r3, [sp, #0]
 800a2ca:	68bb      	ldr	r3, [r7, #8]
 800a2cc:	2200      	movs	r2, #0
 800a2ce:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800a2d2:	68f8      	ldr	r0, [r7, #12]
 800a2d4:	f7ff fedc 	bl	800a090 <SPI_WaitFifoStateUntilTimeout>
 800a2d8:	4603      	mov	r3, r0
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	d007      	beq.n	800a2ee <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a2e2:	f043 0220 	orr.w	r2, r3, #32
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800a2ea:	2303      	movs	r3, #3
 800a2ec:	e000      	b.n	800a2f0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800a2ee:	2300      	movs	r3, #0
}
 800a2f0:	4618      	mov	r0, r3
 800a2f2:	3710      	adds	r7, #16
 800a2f4:	46bd      	mov	sp, r7
 800a2f6:	bd80      	pop	{r7, pc}

0800a2f8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a2f8:	b580      	push	{r7, lr}
 800a2fa:	b082      	sub	sp, #8
 800a2fc:	af00      	add	r7, sp, #0
 800a2fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	2b00      	cmp	r3, #0
 800a304:	d101      	bne.n	800a30a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a306:	2301      	movs	r3, #1
 800a308:	e049      	b.n	800a39e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a310:	b2db      	uxtb	r3, r3
 800a312:	2b00      	cmp	r3, #0
 800a314:	d106      	bne.n	800a324 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	2200      	movs	r2, #0
 800a31a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a31e:	6878      	ldr	r0, [r7, #4]
 800a320:	f7fb fbe6 	bl	8005af0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	2202      	movs	r2, #2
 800a328:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	681a      	ldr	r2, [r3, #0]
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	3304      	adds	r3, #4
 800a334:	4619      	mov	r1, r3
 800a336:	4610      	mov	r0, r2
 800a338:	f000 fca2 	bl	800ac80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	2201      	movs	r2, #1
 800a340:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	2201      	movs	r2, #1
 800a348:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	2201      	movs	r2, #1
 800a350:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	2201      	movs	r2, #1
 800a358:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	2201      	movs	r2, #1
 800a360:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	2201      	movs	r2, #1
 800a368:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	2201      	movs	r2, #1
 800a370:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	2201      	movs	r2, #1
 800a378:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	2201      	movs	r2, #1
 800a380:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	2201      	movs	r2, #1
 800a388:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	2201      	movs	r2, #1
 800a390:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	2201      	movs	r2, #1
 800a398:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a39c:	2300      	movs	r3, #0
}
 800a39e:	4618      	mov	r0, r3
 800a3a0:	3708      	adds	r7, #8
 800a3a2:	46bd      	mov	sp, r7
 800a3a4:	bd80      	pop	{r7, pc}
	...

0800a3a8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a3a8:	b480      	push	{r7}
 800a3aa:	b085      	sub	sp, #20
 800a3ac:	af00      	add	r7, sp, #0
 800a3ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a3b6:	b2db      	uxtb	r3, r3
 800a3b8:	2b01      	cmp	r3, #1
 800a3ba:	d001      	beq.n	800a3c0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a3bc:	2301      	movs	r3, #1
 800a3be:	e040      	b.n	800a442 <HAL_TIM_Base_Start_IT+0x9a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	2202      	movs	r2, #2
 800a3c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	68da      	ldr	r2, [r3, #12]
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	f042 0201 	orr.w	r2, r2, #1
 800a3d6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	4a1c      	ldr	r2, [pc, #112]	; (800a450 <HAL_TIM_Base_Start_IT+0xa8>)
 800a3de:	4293      	cmp	r3, r2
 800a3e0:	d00e      	beq.n	800a400 <HAL_TIM_Base_Start_IT+0x58>
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a3ea:	d009      	beq.n	800a400 <HAL_TIM_Base_Start_IT+0x58>
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	4a18      	ldr	r2, [pc, #96]	; (800a454 <HAL_TIM_Base_Start_IT+0xac>)
 800a3f2:	4293      	cmp	r3, r2
 800a3f4:	d004      	beq.n	800a400 <HAL_TIM_Base_Start_IT+0x58>
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	4a17      	ldr	r2, [pc, #92]	; (800a458 <HAL_TIM_Base_Start_IT+0xb0>)
 800a3fc:	4293      	cmp	r3, r2
 800a3fe:	d115      	bne.n	800a42c <HAL_TIM_Base_Start_IT+0x84>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	689a      	ldr	r2, [r3, #8]
 800a406:	4b15      	ldr	r3, [pc, #84]	; (800a45c <HAL_TIM_Base_Start_IT+0xb4>)
 800a408:	4013      	ands	r3, r2
 800a40a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	2b06      	cmp	r3, #6
 800a410:	d015      	beq.n	800a43e <HAL_TIM_Base_Start_IT+0x96>
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a418:	d011      	beq.n	800a43e <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	681a      	ldr	r2, [r3, #0]
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	f042 0201 	orr.w	r2, r2, #1
 800a428:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a42a:	e008      	b.n	800a43e <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	681a      	ldr	r2, [r3, #0]
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	f042 0201 	orr.w	r2, r2, #1
 800a43a:	601a      	str	r2, [r3, #0]
 800a43c:	e000      	b.n	800a440 <HAL_TIM_Base_Start_IT+0x98>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a43e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a440:	2300      	movs	r3, #0
}
 800a442:	4618      	mov	r0, r3
 800a444:	3714      	adds	r7, #20
 800a446:	46bd      	mov	sp, r7
 800a448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a44c:	4770      	bx	lr
 800a44e:	bf00      	nop
 800a450:	40012c00 	.word	0x40012c00
 800a454:	40000400 	.word	0x40000400
 800a458:	40014000 	.word	0x40014000
 800a45c:	00010007 	.word	0x00010007

0800a460 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a460:	b580      	push	{r7, lr}
 800a462:	b082      	sub	sp, #8
 800a464:	af00      	add	r7, sp, #0
 800a466:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d101      	bne.n	800a472 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a46e:	2301      	movs	r3, #1
 800a470:	e049      	b.n	800a506 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a478:	b2db      	uxtb	r3, r3
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d106      	bne.n	800a48c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	2200      	movs	r2, #0
 800a482:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a486:	6878      	ldr	r0, [r7, #4]
 800a488:	f000 f841 	bl	800a50e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	2202      	movs	r2, #2
 800a490:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	681a      	ldr	r2, [r3, #0]
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	3304      	adds	r3, #4
 800a49c:	4619      	mov	r1, r3
 800a49e:	4610      	mov	r0, r2
 800a4a0:	f000 fbee 	bl	800ac80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	2201      	movs	r2, #1
 800a4a8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	2201      	movs	r2, #1
 800a4b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	2201      	movs	r2, #1
 800a4b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	2201      	movs	r2, #1
 800a4c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	2201      	movs	r2, #1
 800a4c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	2201      	movs	r2, #1
 800a4d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	2201      	movs	r2, #1
 800a4d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	2201      	movs	r2, #1
 800a4e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	2201      	movs	r2, #1
 800a4e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	2201      	movs	r2, #1
 800a4f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	2201      	movs	r2, #1
 800a4f8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	2201      	movs	r2, #1
 800a500:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a504:	2300      	movs	r3, #0
}
 800a506:	4618      	mov	r0, r3
 800a508:	3708      	adds	r7, #8
 800a50a:	46bd      	mov	sp, r7
 800a50c:	bd80      	pop	{r7, pc}

0800a50e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800a50e:	b480      	push	{r7}
 800a510:	b083      	sub	sp, #12
 800a512:	af00      	add	r7, sp, #0
 800a514:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800a516:	bf00      	nop
 800a518:	370c      	adds	r7, #12
 800a51a:	46bd      	mov	sp, r7
 800a51c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a520:	4770      	bx	lr
	...

0800a524 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a524:	b580      	push	{r7, lr}
 800a526:	b082      	sub	sp, #8
 800a528:	af00      	add	r7, sp, #0
 800a52a:	6078      	str	r0, [r7, #4]
 800a52c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	2200      	movs	r2, #0
 800a534:	6839      	ldr	r1, [r7, #0]
 800a536:	4618      	mov	r0, r3
 800a538:	f000 ff28 	bl	800b38c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	4a39      	ldr	r2, [pc, #228]	; (800a628 <HAL_TIM_PWM_Stop+0x104>)
 800a542:	4293      	cmp	r3, r2
 800a544:	d009      	beq.n	800a55a <HAL_TIM_PWM_Stop+0x36>
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	4a38      	ldr	r2, [pc, #224]	; (800a62c <HAL_TIM_PWM_Stop+0x108>)
 800a54c:	4293      	cmp	r3, r2
 800a54e:	d004      	beq.n	800a55a <HAL_TIM_PWM_Stop+0x36>
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	4a36      	ldr	r2, [pc, #216]	; (800a630 <HAL_TIM_PWM_Stop+0x10c>)
 800a556:	4293      	cmp	r3, r2
 800a558:	d101      	bne.n	800a55e <HAL_TIM_PWM_Stop+0x3a>
 800a55a:	2301      	movs	r3, #1
 800a55c:	e000      	b.n	800a560 <HAL_TIM_PWM_Stop+0x3c>
 800a55e:	2300      	movs	r3, #0
 800a560:	2b00      	cmp	r3, #0
 800a562:	d017      	beq.n	800a594 <HAL_TIM_PWM_Stop+0x70>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	6a1a      	ldr	r2, [r3, #32]
 800a56a:	f241 1311 	movw	r3, #4369	; 0x1111
 800a56e:	4013      	ands	r3, r2
 800a570:	2b00      	cmp	r3, #0
 800a572:	d10f      	bne.n	800a594 <HAL_TIM_PWM_Stop+0x70>
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	6a1a      	ldr	r2, [r3, #32]
 800a57a:	f240 4344 	movw	r3, #1092	; 0x444
 800a57e:	4013      	ands	r3, r2
 800a580:	2b00      	cmp	r3, #0
 800a582:	d107      	bne.n	800a594 <HAL_TIM_PWM_Stop+0x70>
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800a592:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	6a1a      	ldr	r2, [r3, #32]
 800a59a:	f241 1311 	movw	r3, #4369	; 0x1111
 800a59e:	4013      	ands	r3, r2
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	d10f      	bne.n	800a5c4 <HAL_TIM_PWM_Stop+0xa0>
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	6a1a      	ldr	r2, [r3, #32]
 800a5aa:	f240 4344 	movw	r3, #1092	; 0x444
 800a5ae:	4013      	ands	r3, r2
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	d107      	bne.n	800a5c4 <HAL_TIM_PWM_Stop+0xa0>
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	681a      	ldr	r2, [r3, #0]
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	f022 0201 	bic.w	r2, r2, #1
 800a5c2:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800a5c4:	683b      	ldr	r3, [r7, #0]
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d104      	bne.n	800a5d4 <HAL_TIM_PWM_Stop+0xb0>
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	2201      	movs	r2, #1
 800a5ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a5d2:	e023      	b.n	800a61c <HAL_TIM_PWM_Stop+0xf8>
 800a5d4:	683b      	ldr	r3, [r7, #0]
 800a5d6:	2b04      	cmp	r3, #4
 800a5d8:	d104      	bne.n	800a5e4 <HAL_TIM_PWM_Stop+0xc0>
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	2201      	movs	r2, #1
 800a5de:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a5e2:	e01b      	b.n	800a61c <HAL_TIM_PWM_Stop+0xf8>
 800a5e4:	683b      	ldr	r3, [r7, #0]
 800a5e6:	2b08      	cmp	r3, #8
 800a5e8:	d104      	bne.n	800a5f4 <HAL_TIM_PWM_Stop+0xd0>
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	2201      	movs	r2, #1
 800a5ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a5f2:	e013      	b.n	800a61c <HAL_TIM_PWM_Stop+0xf8>
 800a5f4:	683b      	ldr	r3, [r7, #0]
 800a5f6:	2b0c      	cmp	r3, #12
 800a5f8:	d104      	bne.n	800a604 <HAL_TIM_PWM_Stop+0xe0>
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	2201      	movs	r2, #1
 800a5fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a602:	e00b      	b.n	800a61c <HAL_TIM_PWM_Stop+0xf8>
 800a604:	683b      	ldr	r3, [r7, #0]
 800a606:	2b10      	cmp	r3, #16
 800a608:	d104      	bne.n	800a614 <HAL_TIM_PWM_Stop+0xf0>
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	2201      	movs	r2, #1
 800a60e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a612:	e003      	b.n	800a61c <HAL_TIM_PWM_Stop+0xf8>
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	2201      	movs	r2, #1
 800a618:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 800a61c:	2300      	movs	r3, #0
}
 800a61e:	4618      	mov	r0, r3
 800a620:	3708      	adds	r7, #8
 800a622:	46bd      	mov	sp, r7
 800a624:	bd80      	pop	{r7, pc}
 800a626:	bf00      	nop
 800a628:	40012c00 	.word	0x40012c00
 800a62c:	40014000 	.word	0x40014000
 800a630:	40014400 	.word	0x40014400

0800a634 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a634:	b580      	push	{r7, lr}
 800a636:	b082      	sub	sp, #8
 800a638:	af00      	add	r7, sp, #0
 800a63a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	691b      	ldr	r3, [r3, #16]
 800a642:	f003 0302 	and.w	r3, r3, #2
 800a646:	2b02      	cmp	r3, #2
 800a648:	d122      	bne.n	800a690 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	68db      	ldr	r3, [r3, #12]
 800a650:	f003 0302 	and.w	r3, r3, #2
 800a654:	2b02      	cmp	r3, #2
 800a656:	d11b      	bne.n	800a690 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	f06f 0202 	mvn.w	r2, #2
 800a660:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	2201      	movs	r2, #1
 800a666:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	699b      	ldr	r3, [r3, #24]
 800a66e:	f003 0303 	and.w	r3, r3, #3
 800a672:	2b00      	cmp	r3, #0
 800a674:	d003      	beq.n	800a67e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a676:	6878      	ldr	r0, [r7, #4]
 800a678:	f000 fae3 	bl	800ac42 <HAL_TIM_IC_CaptureCallback>
 800a67c:	e005      	b.n	800a68a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a67e:	6878      	ldr	r0, [r7, #4]
 800a680:	f000 fad5 	bl	800ac2e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a684:	6878      	ldr	r0, [r7, #4]
 800a686:	f000 fae6 	bl	800ac56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	2200      	movs	r2, #0
 800a68e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	691b      	ldr	r3, [r3, #16]
 800a696:	f003 0304 	and.w	r3, r3, #4
 800a69a:	2b04      	cmp	r3, #4
 800a69c:	d122      	bne.n	800a6e4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	68db      	ldr	r3, [r3, #12]
 800a6a4:	f003 0304 	and.w	r3, r3, #4
 800a6a8:	2b04      	cmp	r3, #4
 800a6aa:	d11b      	bne.n	800a6e4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	f06f 0204 	mvn.w	r2, #4
 800a6b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	2202      	movs	r2, #2
 800a6ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	699b      	ldr	r3, [r3, #24]
 800a6c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d003      	beq.n	800a6d2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a6ca:	6878      	ldr	r0, [r7, #4]
 800a6cc:	f000 fab9 	bl	800ac42 <HAL_TIM_IC_CaptureCallback>
 800a6d0:	e005      	b.n	800a6de <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a6d2:	6878      	ldr	r0, [r7, #4]
 800a6d4:	f000 faab 	bl	800ac2e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a6d8:	6878      	ldr	r0, [r7, #4]
 800a6da:	f000 fabc 	bl	800ac56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	2200      	movs	r2, #0
 800a6e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	691b      	ldr	r3, [r3, #16]
 800a6ea:	f003 0308 	and.w	r3, r3, #8
 800a6ee:	2b08      	cmp	r3, #8
 800a6f0:	d122      	bne.n	800a738 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	68db      	ldr	r3, [r3, #12]
 800a6f8:	f003 0308 	and.w	r3, r3, #8
 800a6fc:	2b08      	cmp	r3, #8
 800a6fe:	d11b      	bne.n	800a738 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	f06f 0208 	mvn.w	r2, #8
 800a708:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	2204      	movs	r2, #4
 800a70e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	69db      	ldr	r3, [r3, #28]
 800a716:	f003 0303 	and.w	r3, r3, #3
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	d003      	beq.n	800a726 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a71e:	6878      	ldr	r0, [r7, #4]
 800a720:	f000 fa8f 	bl	800ac42 <HAL_TIM_IC_CaptureCallback>
 800a724:	e005      	b.n	800a732 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a726:	6878      	ldr	r0, [r7, #4]
 800a728:	f000 fa81 	bl	800ac2e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a72c:	6878      	ldr	r0, [r7, #4]
 800a72e:	f000 fa92 	bl	800ac56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	2200      	movs	r2, #0
 800a736:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	691b      	ldr	r3, [r3, #16]
 800a73e:	f003 0310 	and.w	r3, r3, #16
 800a742:	2b10      	cmp	r3, #16
 800a744:	d122      	bne.n	800a78c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	68db      	ldr	r3, [r3, #12]
 800a74c:	f003 0310 	and.w	r3, r3, #16
 800a750:	2b10      	cmp	r3, #16
 800a752:	d11b      	bne.n	800a78c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	f06f 0210 	mvn.w	r2, #16
 800a75c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	2208      	movs	r2, #8
 800a762:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	69db      	ldr	r3, [r3, #28]
 800a76a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a76e:	2b00      	cmp	r3, #0
 800a770:	d003      	beq.n	800a77a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a772:	6878      	ldr	r0, [r7, #4]
 800a774:	f000 fa65 	bl	800ac42 <HAL_TIM_IC_CaptureCallback>
 800a778:	e005      	b.n	800a786 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a77a:	6878      	ldr	r0, [r7, #4]
 800a77c:	f000 fa57 	bl	800ac2e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a780:	6878      	ldr	r0, [r7, #4]
 800a782:	f000 fa68 	bl	800ac56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	2200      	movs	r2, #0
 800a78a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	691b      	ldr	r3, [r3, #16]
 800a792:	f003 0301 	and.w	r3, r3, #1
 800a796:	2b01      	cmp	r3, #1
 800a798:	d10e      	bne.n	800a7b8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	68db      	ldr	r3, [r3, #12]
 800a7a0:	f003 0301 	and.w	r3, r3, #1
 800a7a4:	2b01      	cmp	r3, #1
 800a7a6:	d107      	bne.n	800a7b8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	f06f 0201 	mvn.w	r2, #1
 800a7b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a7b2:	6878      	ldr	r0, [r7, #4]
 800a7b4:	f7f9 fb42 	bl	8003e3c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	691b      	ldr	r3, [r3, #16]
 800a7be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a7c2:	2b80      	cmp	r3, #128	; 0x80
 800a7c4:	d10e      	bne.n	800a7e4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	68db      	ldr	r3, [r3, #12]
 800a7cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a7d0:	2b80      	cmp	r3, #128	; 0x80
 800a7d2:	d107      	bne.n	800a7e4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a7dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a7de:	6878      	ldr	r0, [r7, #4]
 800a7e0:	f000 feea 	bl	800b5b8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	691b      	ldr	r3, [r3, #16]
 800a7ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a7ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a7f2:	d10e      	bne.n	800a812 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	68db      	ldr	r3, [r3, #12]
 800a7fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a7fe:	2b80      	cmp	r3, #128	; 0x80
 800a800:	d107      	bne.n	800a812 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800a80a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a80c:	6878      	ldr	r0, [r7, #4]
 800a80e:	f000 fedd 	bl	800b5cc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	691b      	ldr	r3, [r3, #16]
 800a818:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a81c:	2b40      	cmp	r3, #64	; 0x40
 800a81e:	d10e      	bne.n	800a83e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	68db      	ldr	r3, [r3, #12]
 800a826:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a82a:	2b40      	cmp	r3, #64	; 0x40
 800a82c:	d107      	bne.n	800a83e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a836:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a838:	6878      	ldr	r0, [r7, #4]
 800a83a:	f000 fa16 	bl	800ac6a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	691b      	ldr	r3, [r3, #16]
 800a844:	f003 0320 	and.w	r3, r3, #32
 800a848:	2b20      	cmp	r3, #32
 800a84a:	d10e      	bne.n	800a86a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	68db      	ldr	r3, [r3, #12]
 800a852:	f003 0320 	and.w	r3, r3, #32
 800a856:	2b20      	cmp	r3, #32
 800a858:	d107      	bne.n	800a86a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	f06f 0220 	mvn.w	r2, #32
 800a862:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a864:	6878      	ldr	r0, [r7, #4]
 800a866:	f000 fe9d 	bl	800b5a4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a86a:	bf00      	nop
 800a86c:	3708      	adds	r7, #8
 800a86e:	46bd      	mov	sp, r7
 800a870:	bd80      	pop	{r7, pc}
	...

0800a874 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a874:	b580      	push	{r7, lr}
 800a876:	b086      	sub	sp, #24
 800a878:	af00      	add	r7, sp, #0
 800a87a:	60f8      	str	r0, [r7, #12]
 800a87c:	60b9      	str	r1, [r7, #8]
 800a87e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a880:	2300      	movs	r3, #0
 800a882:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a884:	68fb      	ldr	r3, [r7, #12]
 800a886:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a88a:	2b01      	cmp	r3, #1
 800a88c:	d101      	bne.n	800a892 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800a88e:	2302      	movs	r3, #2
 800a890:	e0ff      	b.n	800aa92 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800a892:	68fb      	ldr	r3, [r7, #12]
 800a894:	2201      	movs	r2, #1
 800a896:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	2b14      	cmp	r3, #20
 800a89e:	f200 80f0 	bhi.w	800aa82 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800a8a2:	a201      	add	r2, pc, #4	; (adr r2, 800a8a8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800a8a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8a8:	0800a8fd 	.word	0x0800a8fd
 800a8ac:	0800aa83 	.word	0x0800aa83
 800a8b0:	0800aa83 	.word	0x0800aa83
 800a8b4:	0800aa83 	.word	0x0800aa83
 800a8b8:	0800a93d 	.word	0x0800a93d
 800a8bc:	0800aa83 	.word	0x0800aa83
 800a8c0:	0800aa83 	.word	0x0800aa83
 800a8c4:	0800aa83 	.word	0x0800aa83
 800a8c8:	0800a97f 	.word	0x0800a97f
 800a8cc:	0800aa83 	.word	0x0800aa83
 800a8d0:	0800aa83 	.word	0x0800aa83
 800a8d4:	0800aa83 	.word	0x0800aa83
 800a8d8:	0800a9bf 	.word	0x0800a9bf
 800a8dc:	0800aa83 	.word	0x0800aa83
 800a8e0:	0800aa83 	.word	0x0800aa83
 800a8e4:	0800aa83 	.word	0x0800aa83
 800a8e8:	0800aa01 	.word	0x0800aa01
 800a8ec:	0800aa83 	.word	0x0800aa83
 800a8f0:	0800aa83 	.word	0x0800aa83
 800a8f4:	0800aa83 	.word	0x0800aa83
 800a8f8:	0800aa41 	.word	0x0800aa41
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a8fc:	68fb      	ldr	r3, [r7, #12]
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	68b9      	ldr	r1, [r7, #8]
 800a902:	4618      	mov	r0, r3
 800a904:	f000 fa2a 	bl	800ad5c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a908:	68fb      	ldr	r3, [r7, #12]
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	699a      	ldr	r2, [r3, #24]
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	f042 0208 	orr.w	r2, r2, #8
 800a916:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a918:	68fb      	ldr	r3, [r7, #12]
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	699a      	ldr	r2, [r3, #24]
 800a91e:	68fb      	ldr	r3, [r7, #12]
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	f022 0204 	bic.w	r2, r2, #4
 800a926:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a928:	68fb      	ldr	r3, [r7, #12]
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	6999      	ldr	r1, [r3, #24]
 800a92e:	68bb      	ldr	r3, [r7, #8]
 800a930:	691a      	ldr	r2, [r3, #16]
 800a932:	68fb      	ldr	r3, [r7, #12]
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	430a      	orrs	r2, r1
 800a938:	619a      	str	r2, [r3, #24]
      break;
 800a93a:	e0a5      	b.n	800aa88 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a93c:	68fb      	ldr	r3, [r7, #12]
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	68b9      	ldr	r1, [r7, #8]
 800a942:	4618      	mov	r0, r3
 800a944:	f000 fa86 	bl	800ae54 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a948:	68fb      	ldr	r3, [r7, #12]
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	699a      	ldr	r2, [r3, #24]
 800a94e:	68fb      	ldr	r3, [r7, #12]
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a956:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a958:	68fb      	ldr	r3, [r7, #12]
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	699a      	ldr	r2, [r3, #24]
 800a95e:	68fb      	ldr	r3, [r7, #12]
 800a960:	681b      	ldr	r3, [r3, #0]
 800a962:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a966:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a968:	68fb      	ldr	r3, [r7, #12]
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	6999      	ldr	r1, [r3, #24]
 800a96e:	68bb      	ldr	r3, [r7, #8]
 800a970:	691b      	ldr	r3, [r3, #16]
 800a972:	021a      	lsls	r2, r3, #8
 800a974:	68fb      	ldr	r3, [r7, #12]
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	430a      	orrs	r2, r1
 800a97a:	619a      	str	r2, [r3, #24]
      break;
 800a97c:	e084      	b.n	800aa88 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a97e:	68fb      	ldr	r3, [r7, #12]
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	68b9      	ldr	r1, [r7, #8]
 800a984:	4618      	mov	r0, r3
 800a986:	f000 fadf 	bl	800af48 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a98a:	68fb      	ldr	r3, [r7, #12]
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	69da      	ldr	r2, [r3, #28]
 800a990:	68fb      	ldr	r3, [r7, #12]
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	f042 0208 	orr.w	r2, r2, #8
 800a998:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a99a:	68fb      	ldr	r3, [r7, #12]
 800a99c:	681b      	ldr	r3, [r3, #0]
 800a99e:	69da      	ldr	r2, [r3, #28]
 800a9a0:	68fb      	ldr	r3, [r7, #12]
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	f022 0204 	bic.w	r2, r2, #4
 800a9a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a9aa:	68fb      	ldr	r3, [r7, #12]
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	69d9      	ldr	r1, [r3, #28]
 800a9b0:	68bb      	ldr	r3, [r7, #8]
 800a9b2:	691a      	ldr	r2, [r3, #16]
 800a9b4:	68fb      	ldr	r3, [r7, #12]
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	430a      	orrs	r2, r1
 800a9ba:	61da      	str	r2, [r3, #28]
      break;
 800a9bc:	e064      	b.n	800aa88 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a9be:	68fb      	ldr	r3, [r7, #12]
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	68b9      	ldr	r1, [r7, #8]
 800a9c4:	4618      	mov	r0, r3
 800a9c6:	f000 fb37 	bl	800b038 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a9ca:	68fb      	ldr	r3, [r7, #12]
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	69da      	ldr	r2, [r3, #28]
 800a9d0:	68fb      	ldr	r3, [r7, #12]
 800a9d2:	681b      	ldr	r3, [r3, #0]
 800a9d4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a9d8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a9da:	68fb      	ldr	r3, [r7, #12]
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	69da      	ldr	r2, [r3, #28]
 800a9e0:	68fb      	ldr	r3, [r7, #12]
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a9e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a9ea:	68fb      	ldr	r3, [r7, #12]
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	69d9      	ldr	r1, [r3, #28]
 800a9f0:	68bb      	ldr	r3, [r7, #8]
 800a9f2:	691b      	ldr	r3, [r3, #16]
 800a9f4:	021a      	lsls	r2, r3, #8
 800a9f6:	68fb      	ldr	r3, [r7, #12]
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	430a      	orrs	r2, r1
 800a9fc:	61da      	str	r2, [r3, #28]
      break;
 800a9fe:	e043      	b.n	800aa88 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800aa00:	68fb      	ldr	r3, [r7, #12]
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	68b9      	ldr	r1, [r7, #8]
 800aa06:	4618      	mov	r0, r3
 800aa08:	f000 fb74 	bl	800b0f4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800aa0c:	68fb      	ldr	r3, [r7, #12]
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800aa12:	68fb      	ldr	r3, [r7, #12]
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	f042 0208 	orr.w	r2, r2, #8
 800aa1a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800aa1c:	68fb      	ldr	r3, [r7, #12]
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800aa22:	68fb      	ldr	r3, [r7, #12]
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	f022 0204 	bic.w	r2, r2, #4
 800aa2a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800aa2c:	68fb      	ldr	r3, [r7, #12]
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800aa32:	68bb      	ldr	r3, [r7, #8]
 800aa34:	691a      	ldr	r2, [r3, #16]
 800aa36:	68fb      	ldr	r3, [r7, #12]
 800aa38:	681b      	ldr	r3, [r3, #0]
 800aa3a:	430a      	orrs	r2, r1
 800aa3c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800aa3e:	e023      	b.n	800aa88 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800aa40:	68fb      	ldr	r3, [r7, #12]
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	68b9      	ldr	r1, [r7, #8]
 800aa46:	4618      	mov	r0, r3
 800aa48:	f000 fbac 	bl	800b1a4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800aa4c:	68fb      	ldr	r3, [r7, #12]
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800aa52:	68fb      	ldr	r3, [r7, #12]
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800aa5a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800aa62:	68fb      	ldr	r3, [r7, #12]
 800aa64:	681b      	ldr	r3, [r3, #0]
 800aa66:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800aa6a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800aa6c:	68fb      	ldr	r3, [r7, #12]
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800aa72:	68bb      	ldr	r3, [r7, #8]
 800aa74:	691b      	ldr	r3, [r3, #16]
 800aa76:	021a      	lsls	r2, r3, #8
 800aa78:	68fb      	ldr	r3, [r7, #12]
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	430a      	orrs	r2, r1
 800aa7e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800aa80:	e002      	b.n	800aa88 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800aa82:	2301      	movs	r3, #1
 800aa84:	75fb      	strb	r3, [r7, #23]
      break;
 800aa86:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800aa88:	68fb      	ldr	r3, [r7, #12]
 800aa8a:	2200      	movs	r2, #0
 800aa8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800aa90:	7dfb      	ldrb	r3, [r7, #23]
}
 800aa92:	4618      	mov	r0, r3
 800aa94:	3718      	adds	r7, #24
 800aa96:	46bd      	mov	sp, r7
 800aa98:	bd80      	pop	{r7, pc}
 800aa9a:	bf00      	nop

0800aa9c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800aa9c:	b580      	push	{r7, lr}
 800aa9e:	b084      	sub	sp, #16
 800aaa0:	af00      	add	r7, sp, #0
 800aaa2:	6078      	str	r0, [r7, #4]
 800aaa4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800aaa6:	2300      	movs	r3, #0
 800aaa8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800aab0:	2b01      	cmp	r3, #1
 800aab2:	d101      	bne.n	800aab8 <HAL_TIM_ConfigClockSource+0x1c>
 800aab4:	2302      	movs	r3, #2
 800aab6:	e0b6      	b.n	800ac26 <HAL_TIM_ConfigClockSource+0x18a>
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	2201      	movs	r2, #1
 800aabc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	2202      	movs	r2, #2
 800aac4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	689b      	ldr	r3, [r3, #8]
 800aace:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800aad0:	68bb      	ldr	r3, [r7, #8]
 800aad2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800aad6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800aada:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800aadc:	68bb      	ldr	r3, [r7, #8]
 800aade:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800aae2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	68ba      	ldr	r2, [r7, #8]
 800aaea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800aaec:	683b      	ldr	r3, [r7, #0]
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800aaf4:	d03e      	beq.n	800ab74 <HAL_TIM_ConfigClockSource+0xd8>
 800aaf6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800aafa:	f200 8087 	bhi.w	800ac0c <HAL_TIM_ConfigClockSource+0x170>
 800aafe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ab02:	f000 8086 	beq.w	800ac12 <HAL_TIM_ConfigClockSource+0x176>
 800ab06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ab0a:	d87f      	bhi.n	800ac0c <HAL_TIM_ConfigClockSource+0x170>
 800ab0c:	2b70      	cmp	r3, #112	; 0x70
 800ab0e:	d01a      	beq.n	800ab46 <HAL_TIM_ConfigClockSource+0xaa>
 800ab10:	2b70      	cmp	r3, #112	; 0x70
 800ab12:	d87b      	bhi.n	800ac0c <HAL_TIM_ConfigClockSource+0x170>
 800ab14:	2b60      	cmp	r3, #96	; 0x60
 800ab16:	d050      	beq.n	800abba <HAL_TIM_ConfigClockSource+0x11e>
 800ab18:	2b60      	cmp	r3, #96	; 0x60
 800ab1a:	d877      	bhi.n	800ac0c <HAL_TIM_ConfigClockSource+0x170>
 800ab1c:	2b50      	cmp	r3, #80	; 0x50
 800ab1e:	d03c      	beq.n	800ab9a <HAL_TIM_ConfigClockSource+0xfe>
 800ab20:	2b50      	cmp	r3, #80	; 0x50
 800ab22:	d873      	bhi.n	800ac0c <HAL_TIM_ConfigClockSource+0x170>
 800ab24:	2b40      	cmp	r3, #64	; 0x40
 800ab26:	d058      	beq.n	800abda <HAL_TIM_ConfigClockSource+0x13e>
 800ab28:	2b40      	cmp	r3, #64	; 0x40
 800ab2a:	d86f      	bhi.n	800ac0c <HAL_TIM_ConfigClockSource+0x170>
 800ab2c:	2b30      	cmp	r3, #48	; 0x30
 800ab2e:	d064      	beq.n	800abfa <HAL_TIM_ConfigClockSource+0x15e>
 800ab30:	2b30      	cmp	r3, #48	; 0x30
 800ab32:	d86b      	bhi.n	800ac0c <HAL_TIM_ConfigClockSource+0x170>
 800ab34:	2b20      	cmp	r3, #32
 800ab36:	d060      	beq.n	800abfa <HAL_TIM_ConfigClockSource+0x15e>
 800ab38:	2b20      	cmp	r3, #32
 800ab3a:	d867      	bhi.n	800ac0c <HAL_TIM_ConfigClockSource+0x170>
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d05c      	beq.n	800abfa <HAL_TIM_ConfigClockSource+0x15e>
 800ab40:	2b10      	cmp	r3, #16
 800ab42:	d05a      	beq.n	800abfa <HAL_TIM_ConfigClockSource+0x15e>
 800ab44:	e062      	b.n	800ac0c <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	6818      	ldr	r0, [r3, #0]
 800ab4a:	683b      	ldr	r3, [r7, #0]
 800ab4c:	6899      	ldr	r1, [r3, #8]
 800ab4e:	683b      	ldr	r3, [r7, #0]
 800ab50:	685a      	ldr	r2, [r3, #4]
 800ab52:	683b      	ldr	r3, [r7, #0]
 800ab54:	68db      	ldr	r3, [r3, #12]
 800ab56:	f000 fbf9 	bl	800b34c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	681b      	ldr	r3, [r3, #0]
 800ab5e:	689b      	ldr	r3, [r3, #8]
 800ab60:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800ab62:	68bb      	ldr	r3, [r7, #8]
 800ab64:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800ab68:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	68ba      	ldr	r2, [r7, #8]
 800ab70:	609a      	str	r2, [r3, #8]
      break;
 800ab72:	e04f      	b.n	800ac14 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	6818      	ldr	r0, [r3, #0]
 800ab78:	683b      	ldr	r3, [r7, #0]
 800ab7a:	6899      	ldr	r1, [r3, #8]
 800ab7c:	683b      	ldr	r3, [r7, #0]
 800ab7e:	685a      	ldr	r2, [r3, #4]
 800ab80:	683b      	ldr	r3, [r7, #0]
 800ab82:	68db      	ldr	r3, [r3, #12]
 800ab84:	f000 fbe2 	bl	800b34c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	681b      	ldr	r3, [r3, #0]
 800ab8c:	689a      	ldr	r2, [r3, #8]
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800ab96:	609a      	str	r2, [r3, #8]
      break;
 800ab98:	e03c      	b.n	800ac14 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	6818      	ldr	r0, [r3, #0]
 800ab9e:	683b      	ldr	r3, [r7, #0]
 800aba0:	6859      	ldr	r1, [r3, #4]
 800aba2:	683b      	ldr	r3, [r7, #0]
 800aba4:	68db      	ldr	r3, [r3, #12]
 800aba6:	461a      	mov	r2, r3
 800aba8:	f000 fb56 	bl	800b258 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	2150      	movs	r1, #80	; 0x50
 800abb2:	4618      	mov	r0, r3
 800abb4:	f000 fbaf 	bl	800b316 <TIM_ITRx_SetConfig>
      break;
 800abb8:	e02c      	b.n	800ac14 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	6818      	ldr	r0, [r3, #0]
 800abbe:	683b      	ldr	r3, [r7, #0]
 800abc0:	6859      	ldr	r1, [r3, #4]
 800abc2:	683b      	ldr	r3, [r7, #0]
 800abc4:	68db      	ldr	r3, [r3, #12]
 800abc6:	461a      	mov	r2, r3
 800abc8:	f000 fb75 	bl	800b2b6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	2160      	movs	r1, #96	; 0x60
 800abd2:	4618      	mov	r0, r3
 800abd4:	f000 fb9f 	bl	800b316 <TIM_ITRx_SetConfig>
      break;
 800abd8:	e01c      	b.n	800ac14 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	6818      	ldr	r0, [r3, #0]
 800abde:	683b      	ldr	r3, [r7, #0]
 800abe0:	6859      	ldr	r1, [r3, #4]
 800abe2:	683b      	ldr	r3, [r7, #0]
 800abe4:	68db      	ldr	r3, [r3, #12]
 800abe6:	461a      	mov	r2, r3
 800abe8:	f000 fb36 	bl	800b258 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	2140      	movs	r1, #64	; 0x40
 800abf2:	4618      	mov	r0, r3
 800abf4:	f000 fb8f 	bl	800b316 <TIM_ITRx_SetConfig>
      break;
 800abf8:	e00c      	b.n	800ac14 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	681a      	ldr	r2, [r3, #0]
 800abfe:	683b      	ldr	r3, [r7, #0]
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	4619      	mov	r1, r3
 800ac04:	4610      	mov	r0, r2
 800ac06:	f000 fb86 	bl	800b316 <TIM_ITRx_SetConfig>
      break;
 800ac0a:	e003      	b.n	800ac14 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800ac0c:	2301      	movs	r3, #1
 800ac0e:	73fb      	strb	r3, [r7, #15]
      break;
 800ac10:	e000      	b.n	800ac14 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800ac12:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	2201      	movs	r2, #1
 800ac18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	2200      	movs	r2, #0
 800ac20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800ac24:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac26:	4618      	mov	r0, r3
 800ac28:	3710      	adds	r7, #16
 800ac2a:	46bd      	mov	sp, r7
 800ac2c:	bd80      	pop	{r7, pc}

0800ac2e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ac2e:	b480      	push	{r7}
 800ac30:	b083      	sub	sp, #12
 800ac32:	af00      	add	r7, sp, #0
 800ac34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800ac36:	bf00      	nop
 800ac38:	370c      	adds	r7, #12
 800ac3a:	46bd      	mov	sp, r7
 800ac3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac40:	4770      	bx	lr

0800ac42 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800ac42:	b480      	push	{r7}
 800ac44:	b083      	sub	sp, #12
 800ac46:	af00      	add	r7, sp, #0
 800ac48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800ac4a:	bf00      	nop
 800ac4c:	370c      	adds	r7, #12
 800ac4e:	46bd      	mov	sp, r7
 800ac50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac54:	4770      	bx	lr

0800ac56 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800ac56:	b480      	push	{r7}
 800ac58:	b083      	sub	sp, #12
 800ac5a:	af00      	add	r7, sp, #0
 800ac5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800ac5e:	bf00      	nop
 800ac60:	370c      	adds	r7, #12
 800ac62:	46bd      	mov	sp, r7
 800ac64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac68:	4770      	bx	lr

0800ac6a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800ac6a:	b480      	push	{r7}
 800ac6c:	b083      	sub	sp, #12
 800ac6e:	af00      	add	r7, sp, #0
 800ac70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800ac72:	bf00      	nop
 800ac74:	370c      	adds	r7, #12
 800ac76:	46bd      	mov	sp, r7
 800ac78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac7c:	4770      	bx	lr
	...

0800ac80 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800ac80:	b480      	push	{r7}
 800ac82:	b085      	sub	sp, #20
 800ac84:	af00      	add	r7, sp, #0
 800ac86:	6078      	str	r0, [r7, #4]
 800ac88:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	4a2e      	ldr	r2, [pc, #184]	; (800ad4c <TIM_Base_SetConfig+0xcc>)
 800ac94:	4293      	cmp	r3, r2
 800ac96:	d007      	beq.n	800aca8 <TIM_Base_SetConfig+0x28>
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ac9e:	d003      	beq.n	800aca8 <TIM_Base_SetConfig+0x28>
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	4a2b      	ldr	r2, [pc, #172]	; (800ad50 <TIM_Base_SetConfig+0xd0>)
 800aca4:	4293      	cmp	r3, r2
 800aca6:	d108      	bne.n	800acba <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800aca8:	68fb      	ldr	r3, [r7, #12]
 800acaa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800acae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800acb0:	683b      	ldr	r3, [r7, #0]
 800acb2:	685b      	ldr	r3, [r3, #4]
 800acb4:	68fa      	ldr	r2, [r7, #12]
 800acb6:	4313      	orrs	r3, r2
 800acb8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	4a23      	ldr	r2, [pc, #140]	; (800ad4c <TIM_Base_SetConfig+0xcc>)
 800acbe:	4293      	cmp	r3, r2
 800acc0:	d00f      	beq.n	800ace2 <TIM_Base_SetConfig+0x62>
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800acc8:	d00b      	beq.n	800ace2 <TIM_Base_SetConfig+0x62>
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	4a20      	ldr	r2, [pc, #128]	; (800ad50 <TIM_Base_SetConfig+0xd0>)
 800acce:	4293      	cmp	r3, r2
 800acd0:	d007      	beq.n	800ace2 <TIM_Base_SetConfig+0x62>
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	4a1f      	ldr	r2, [pc, #124]	; (800ad54 <TIM_Base_SetConfig+0xd4>)
 800acd6:	4293      	cmp	r3, r2
 800acd8:	d003      	beq.n	800ace2 <TIM_Base_SetConfig+0x62>
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	4a1e      	ldr	r2, [pc, #120]	; (800ad58 <TIM_Base_SetConfig+0xd8>)
 800acde:	4293      	cmp	r3, r2
 800ace0:	d108      	bne.n	800acf4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ace2:	68fb      	ldr	r3, [r7, #12]
 800ace4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ace8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800acea:	683b      	ldr	r3, [r7, #0]
 800acec:	68db      	ldr	r3, [r3, #12]
 800acee:	68fa      	ldr	r2, [r7, #12]
 800acf0:	4313      	orrs	r3, r2
 800acf2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800acf4:	68fb      	ldr	r3, [r7, #12]
 800acf6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800acfa:	683b      	ldr	r3, [r7, #0]
 800acfc:	695b      	ldr	r3, [r3, #20]
 800acfe:	4313      	orrs	r3, r2
 800ad00:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	68fa      	ldr	r2, [r7, #12]
 800ad06:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ad08:	683b      	ldr	r3, [r7, #0]
 800ad0a:	689a      	ldr	r2, [r3, #8]
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ad10:	683b      	ldr	r3, [r7, #0]
 800ad12:	681a      	ldr	r2, [r3, #0]
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	4a0c      	ldr	r2, [pc, #48]	; (800ad4c <TIM_Base_SetConfig+0xcc>)
 800ad1c:	4293      	cmp	r3, r2
 800ad1e:	d007      	beq.n	800ad30 <TIM_Base_SetConfig+0xb0>
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	4a0c      	ldr	r2, [pc, #48]	; (800ad54 <TIM_Base_SetConfig+0xd4>)
 800ad24:	4293      	cmp	r3, r2
 800ad26:	d003      	beq.n	800ad30 <TIM_Base_SetConfig+0xb0>
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	4a0b      	ldr	r2, [pc, #44]	; (800ad58 <TIM_Base_SetConfig+0xd8>)
 800ad2c:	4293      	cmp	r3, r2
 800ad2e:	d103      	bne.n	800ad38 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ad30:	683b      	ldr	r3, [r7, #0]
 800ad32:	691a      	ldr	r2, [r3, #16]
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	2201      	movs	r2, #1
 800ad3c:	615a      	str	r2, [r3, #20]
}
 800ad3e:	bf00      	nop
 800ad40:	3714      	adds	r7, #20
 800ad42:	46bd      	mov	sp, r7
 800ad44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad48:	4770      	bx	lr
 800ad4a:	bf00      	nop
 800ad4c:	40012c00 	.word	0x40012c00
 800ad50:	40000400 	.word	0x40000400
 800ad54:	40014000 	.word	0x40014000
 800ad58:	40014400 	.word	0x40014400

0800ad5c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ad5c:	b480      	push	{r7}
 800ad5e:	b087      	sub	sp, #28
 800ad60:	af00      	add	r7, sp, #0
 800ad62:	6078      	str	r0, [r7, #4]
 800ad64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	6a1b      	ldr	r3, [r3, #32]
 800ad6a:	f023 0201 	bic.w	r2, r3, #1
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	6a1b      	ldr	r3, [r3, #32]
 800ad76:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	685b      	ldr	r3, [r3, #4]
 800ad7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	699b      	ldr	r3, [r3, #24]
 800ad82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800ad84:	68fb      	ldr	r3, [r7, #12]
 800ad86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ad8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ad8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800ad90:	68fb      	ldr	r3, [r7, #12]
 800ad92:	f023 0303 	bic.w	r3, r3, #3
 800ad96:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ad98:	683b      	ldr	r3, [r7, #0]
 800ad9a:	681b      	ldr	r3, [r3, #0]
 800ad9c:	68fa      	ldr	r2, [r7, #12]
 800ad9e:	4313      	orrs	r3, r2
 800ada0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800ada2:	697b      	ldr	r3, [r7, #20]
 800ada4:	f023 0302 	bic.w	r3, r3, #2
 800ada8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800adaa:	683b      	ldr	r3, [r7, #0]
 800adac:	689b      	ldr	r3, [r3, #8]
 800adae:	697a      	ldr	r2, [r7, #20]
 800adb0:	4313      	orrs	r3, r2
 800adb2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	4a24      	ldr	r2, [pc, #144]	; (800ae48 <TIM_OC1_SetConfig+0xec>)
 800adb8:	4293      	cmp	r3, r2
 800adba:	d007      	beq.n	800adcc <TIM_OC1_SetConfig+0x70>
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	4a23      	ldr	r2, [pc, #140]	; (800ae4c <TIM_OC1_SetConfig+0xf0>)
 800adc0:	4293      	cmp	r3, r2
 800adc2:	d003      	beq.n	800adcc <TIM_OC1_SetConfig+0x70>
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	4a22      	ldr	r2, [pc, #136]	; (800ae50 <TIM_OC1_SetConfig+0xf4>)
 800adc8:	4293      	cmp	r3, r2
 800adca:	d10c      	bne.n	800ade6 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800adcc:	697b      	ldr	r3, [r7, #20]
 800adce:	f023 0308 	bic.w	r3, r3, #8
 800add2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800add4:	683b      	ldr	r3, [r7, #0]
 800add6:	68db      	ldr	r3, [r3, #12]
 800add8:	697a      	ldr	r2, [r7, #20]
 800adda:	4313      	orrs	r3, r2
 800addc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800adde:	697b      	ldr	r3, [r7, #20]
 800ade0:	f023 0304 	bic.w	r3, r3, #4
 800ade4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	4a17      	ldr	r2, [pc, #92]	; (800ae48 <TIM_OC1_SetConfig+0xec>)
 800adea:	4293      	cmp	r3, r2
 800adec:	d007      	beq.n	800adfe <TIM_OC1_SetConfig+0xa2>
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	4a16      	ldr	r2, [pc, #88]	; (800ae4c <TIM_OC1_SetConfig+0xf0>)
 800adf2:	4293      	cmp	r3, r2
 800adf4:	d003      	beq.n	800adfe <TIM_OC1_SetConfig+0xa2>
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	4a15      	ldr	r2, [pc, #84]	; (800ae50 <TIM_OC1_SetConfig+0xf4>)
 800adfa:	4293      	cmp	r3, r2
 800adfc:	d111      	bne.n	800ae22 <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800adfe:	693b      	ldr	r3, [r7, #16]
 800ae00:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ae04:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800ae06:	693b      	ldr	r3, [r7, #16]
 800ae08:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800ae0c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800ae0e:	683b      	ldr	r3, [r7, #0]
 800ae10:	695b      	ldr	r3, [r3, #20]
 800ae12:	693a      	ldr	r2, [r7, #16]
 800ae14:	4313      	orrs	r3, r2
 800ae16:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800ae18:	683b      	ldr	r3, [r7, #0]
 800ae1a:	699b      	ldr	r3, [r3, #24]
 800ae1c:	693a      	ldr	r2, [r7, #16]
 800ae1e:	4313      	orrs	r3, r2
 800ae20:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	693a      	ldr	r2, [r7, #16]
 800ae26:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	68fa      	ldr	r2, [r7, #12]
 800ae2c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800ae2e:	683b      	ldr	r3, [r7, #0]
 800ae30:	685a      	ldr	r2, [r3, #4]
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	697a      	ldr	r2, [r7, #20]
 800ae3a:	621a      	str	r2, [r3, #32]
}
 800ae3c:	bf00      	nop
 800ae3e:	371c      	adds	r7, #28
 800ae40:	46bd      	mov	sp, r7
 800ae42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae46:	4770      	bx	lr
 800ae48:	40012c00 	.word	0x40012c00
 800ae4c:	40014000 	.word	0x40014000
 800ae50:	40014400 	.word	0x40014400

0800ae54 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ae54:	b480      	push	{r7}
 800ae56:	b087      	sub	sp, #28
 800ae58:	af00      	add	r7, sp, #0
 800ae5a:	6078      	str	r0, [r7, #4]
 800ae5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	6a1b      	ldr	r3, [r3, #32]
 800ae62:	f023 0210 	bic.w	r2, r3, #16
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	6a1b      	ldr	r3, [r3, #32]
 800ae6e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	685b      	ldr	r3, [r3, #4]
 800ae74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	699b      	ldr	r3, [r3, #24]
 800ae7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800ae7c:	68fb      	ldr	r3, [r7, #12]
 800ae7e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800ae82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ae86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800ae88:	68fb      	ldr	r3, [r7, #12]
 800ae8a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ae8e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ae90:	683b      	ldr	r3, [r7, #0]
 800ae92:	681b      	ldr	r3, [r3, #0]
 800ae94:	021b      	lsls	r3, r3, #8
 800ae96:	68fa      	ldr	r2, [r7, #12]
 800ae98:	4313      	orrs	r3, r2
 800ae9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800ae9c:	697b      	ldr	r3, [r7, #20]
 800ae9e:	f023 0320 	bic.w	r3, r3, #32
 800aea2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800aea4:	683b      	ldr	r3, [r7, #0]
 800aea6:	689b      	ldr	r3, [r3, #8]
 800aea8:	011b      	lsls	r3, r3, #4
 800aeaa:	697a      	ldr	r2, [r7, #20]
 800aeac:	4313      	orrs	r3, r2
 800aeae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	4a22      	ldr	r2, [pc, #136]	; (800af3c <TIM_OC2_SetConfig+0xe8>)
 800aeb4:	4293      	cmp	r3, r2
 800aeb6:	d10d      	bne.n	800aed4 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800aeb8:	697b      	ldr	r3, [r7, #20]
 800aeba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800aebe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800aec0:	683b      	ldr	r3, [r7, #0]
 800aec2:	68db      	ldr	r3, [r3, #12]
 800aec4:	011b      	lsls	r3, r3, #4
 800aec6:	697a      	ldr	r2, [r7, #20]
 800aec8:	4313      	orrs	r3, r2
 800aeca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800aecc:	697b      	ldr	r3, [r7, #20]
 800aece:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800aed2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	4a19      	ldr	r2, [pc, #100]	; (800af3c <TIM_OC2_SetConfig+0xe8>)
 800aed8:	4293      	cmp	r3, r2
 800aeda:	d007      	beq.n	800aeec <TIM_OC2_SetConfig+0x98>
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	4a18      	ldr	r2, [pc, #96]	; (800af40 <TIM_OC2_SetConfig+0xec>)
 800aee0:	4293      	cmp	r3, r2
 800aee2:	d003      	beq.n	800aeec <TIM_OC2_SetConfig+0x98>
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	4a17      	ldr	r2, [pc, #92]	; (800af44 <TIM_OC2_SetConfig+0xf0>)
 800aee8:	4293      	cmp	r3, r2
 800aeea:	d113      	bne.n	800af14 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800aeec:	693b      	ldr	r3, [r7, #16]
 800aeee:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800aef2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800aef4:	693b      	ldr	r3, [r7, #16]
 800aef6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800aefa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800aefc:	683b      	ldr	r3, [r7, #0]
 800aefe:	695b      	ldr	r3, [r3, #20]
 800af00:	009b      	lsls	r3, r3, #2
 800af02:	693a      	ldr	r2, [r7, #16]
 800af04:	4313      	orrs	r3, r2
 800af06:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800af08:	683b      	ldr	r3, [r7, #0]
 800af0a:	699b      	ldr	r3, [r3, #24]
 800af0c:	009b      	lsls	r3, r3, #2
 800af0e:	693a      	ldr	r2, [r7, #16]
 800af10:	4313      	orrs	r3, r2
 800af12:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	693a      	ldr	r2, [r7, #16]
 800af18:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	68fa      	ldr	r2, [r7, #12]
 800af1e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800af20:	683b      	ldr	r3, [r7, #0]
 800af22:	685a      	ldr	r2, [r3, #4]
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	697a      	ldr	r2, [r7, #20]
 800af2c:	621a      	str	r2, [r3, #32]
}
 800af2e:	bf00      	nop
 800af30:	371c      	adds	r7, #28
 800af32:	46bd      	mov	sp, r7
 800af34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af38:	4770      	bx	lr
 800af3a:	bf00      	nop
 800af3c:	40012c00 	.word	0x40012c00
 800af40:	40014000 	.word	0x40014000
 800af44:	40014400 	.word	0x40014400

0800af48 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800af48:	b480      	push	{r7}
 800af4a:	b087      	sub	sp, #28
 800af4c:	af00      	add	r7, sp, #0
 800af4e:	6078      	str	r0, [r7, #4]
 800af50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	6a1b      	ldr	r3, [r3, #32]
 800af56:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	6a1b      	ldr	r3, [r3, #32]
 800af62:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	685b      	ldr	r3, [r3, #4]
 800af68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	69db      	ldr	r3, [r3, #28]
 800af6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800af70:	68fb      	ldr	r3, [r7, #12]
 800af72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800af76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800af7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800af7c:	68fb      	ldr	r3, [r7, #12]
 800af7e:	f023 0303 	bic.w	r3, r3, #3
 800af82:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800af84:	683b      	ldr	r3, [r7, #0]
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	68fa      	ldr	r2, [r7, #12]
 800af8a:	4313      	orrs	r3, r2
 800af8c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800af8e:	697b      	ldr	r3, [r7, #20]
 800af90:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800af94:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800af96:	683b      	ldr	r3, [r7, #0]
 800af98:	689b      	ldr	r3, [r3, #8]
 800af9a:	021b      	lsls	r3, r3, #8
 800af9c:	697a      	ldr	r2, [r7, #20]
 800af9e:	4313      	orrs	r3, r2
 800afa0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	4a21      	ldr	r2, [pc, #132]	; (800b02c <TIM_OC3_SetConfig+0xe4>)
 800afa6:	4293      	cmp	r3, r2
 800afa8:	d10d      	bne.n	800afc6 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800afaa:	697b      	ldr	r3, [r7, #20]
 800afac:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800afb0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800afb2:	683b      	ldr	r3, [r7, #0]
 800afb4:	68db      	ldr	r3, [r3, #12]
 800afb6:	021b      	lsls	r3, r3, #8
 800afb8:	697a      	ldr	r2, [r7, #20]
 800afba:	4313      	orrs	r3, r2
 800afbc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800afbe:	697b      	ldr	r3, [r7, #20]
 800afc0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800afc4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	4a18      	ldr	r2, [pc, #96]	; (800b02c <TIM_OC3_SetConfig+0xe4>)
 800afca:	4293      	cmp	r3, r2
 800afcc:	d007      	beq.n	800afde <TIM_OC3_SetConfig+0x96>
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	4a17      	ldr	r2, [pc, #92]	; (800b030 <TIM_OC3_SetConfig+0xe8>)
 800afd2:	4293      	cmp	r3, r2
 800afd4:	d003      	beq.n	800afde <TIM_OC3_SetConfig+0x96>
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	4a16      	ldr	r2, [pc, #88]	; (800b034 <TIM_OC3_SetConfig+0xec>)
 800afda:	4293      	cmp	r3, r2
 800afdc:	d113      	bne.n	800b006 <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800afde:	693b      	ldr	r3, [r7, #16]
 800afe0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800afe4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800afe6:	693b      	ldr	r3, [r7, #16]
 800afe8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800afec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800afee:	683b      	ldr	r3, [r7, #0]
 800aff0:	695b      	ldr	r3, [r3, #20]
 800aff2:	011b      	lsls	r3, r3, #4
 800aff4:	693a      	ldr	r2, [r7, #16]
 800aff6:	4313      	orrs	r3, r2
 800aff8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800affa:	683b      	ldr	r3, [r7, #0]
 800affc:	699b      	ldr	r3, [r3, #24]
 800affe:	011b      	lsls	r3, r3, #4
 800b000:	693a      	ldr	r2, [r7, #16]
 800b002:	4313      	orrs	r3, r2
 800b004:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	693a      	ldr	r2, [r7, #16]
 800b00a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	68fa      	ldr	r2, [r7, #12]
 800b010:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b012:	683b      	ldr	r3, [r7, #0]
 800b014:	685a      	ldr	r2, [r3, #4]
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	697a      	ldr	r2, [r7, #20]
 800b01e:	621a      	str	r2, [r3, #32]
}
 800b020:	bf00      	nop
 800b022:	371c      	adds	r7, #28
 800b024:	46bd      	mov	sp, r7
 800b026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b02a:	4770      	bx	lr
 800b02c:	40012c00 	.word	0x40012c00
 800b030:	40014000 	.word	0x40014000
 800b034:	40014400 	.word	0x40014400

0800b038 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b038:	b480      	push	{r7}
 800b03a:	b087      	sub	sp, #28
 800b03c:	af00      	add	r7, sp, #0
 800b03e:	6078      	str	r0, [r7, #4]
 800b040:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	6a1b      	ldr	r3, [r3, #32]
 800b046:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	6a1b      	ldr	r3, [r3, #32]
 800b052:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	685b      	ldr	r3, [r3, #4]
 800b058:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	69db      	ldr	r3, [r3, #28]
 800b05e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b060:	68fb      	ldr	r3, [r7, #12]
 800b062:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b066:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b06a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b06c:	68fb      	ldr	r3, [r7, #12]
 800b06e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b072:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b074:	683b      	ldr	r3, [r7, #0]
 800b076:	681b      	ldr	r3, [r3, #0]
 800b078:	021b      	lsls	r3, r3, #8
 800b07a:	68fa      	ldr	r2, [r7, #12]
 800b07c:	4313      	orrs	r3, r2
 800b07e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b080:	693b      	ldr	r3, [r7, #16]
 800b082:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b086:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b088:	683b      	ldr	r3, [r7, #0]
 800b08a:	689b      	ldr	r3, [r3, #8]
 800b08c:	031b      	lsls	r3, r3, #12
 800b08e:	693a      	ldr	r2, [r7, #16]
 800b090:	4313      	orrs	r3, r2
 800b092:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	4a14      	ldr	r2, [pc, #80]	; (800b0e8 <TIM_OC4_SetConfig+0xb0>)
 800b098:	4293      	cmp	r3, r2
 800b09a:	d007      	beq.n	800b0ac <TIM_OC4_SetConfig+0x74>
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	4a13      	ldr	r2, [pc, #76]	; (800b0ec <TIM_OC4_SetConfig+0xb4>)
 800b0a0:	4293      	cmp	r3, r2
 800b0a2:	d003      	beq.n	800b0ac <TIM_OC4_SetConfig+0x74>
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	4a12      	ldr	r2, [pc, #72]	; (800b0f0 <TIM_OC4_SetConfig+0xb8>)
 800b0a8:	4293      	cmp	r3, r2
 800b0aa:	d109      	bne.n	800b0c0 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b0ac:	697b      	ldr	r3, [r7, #20]
 800b0ae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b0b2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b0b4:	683b      	ldr	r3, [r7, #0]
 800b0b6:	695b      	ldr	r3, [r3, #20]
 800b0b8:	019b      	lsls	r3, r3, #6
 800b0ba:	697a      	ldr	r2, [r7, #20]
 800b0bc:	4313      	orrs	r3, r2
 800b0be:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	697a      	ldr	r2, [r7, #20]
 800b0c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	68fa      	ldr	r2, [r7, #12]
 800b0ca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b0cc:	683b      	ldr	r3, [r7, #0]
 800b0ce:	685a      	ldr	r2, [r3, #4]
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	693a      	ldr	r2, [r7, #16]
 800b0d8:	621a      	str	r2, [r3, #32]
}
 800b0da:	bf00      	nop
 800b0dc:	371c      	adds	r7, #28
 800b0de:	46bd      	mov	sp, r7
 800b0e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0e4:	4770      	bx	lr
 800b0e6:	bf00      	nop
 800b0e8:	40012c00 	.word	0x40012c00
 800b0ec:	40014000 	.word	0x40014000
 800b0f0:	40014400 	.word	0x40014400

0800b0f4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800b0f4:	b480      	push	{r7}
 800b0f6:	b087      	sub	sp, #28
 800b0f8:	af00      	add	r7, sp, #0
 800b0fa:	6078      	str	r0, [r7, #4]
 800b0fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	6a1b      	ldr	r3, [r3, #32]
 800b102:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	6a1b      	ldr	r3, [r3, #32]
 800b10e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	685b      	ldr	r3, [r3, #4]
 800b114:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b11a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800b11c:	68fb      	ldr	r3, [r7, #12]
 800b11e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b122:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b126:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b128:	683b      	ldr	r3, [r7, #0]
 800b12a:	681b      	ldr	r3, [r3, #0]
 800b12c:	68fa      	ldr	r2, [r7, #12]
 800b12e:	4313      	orrs	r3, r2
 800b130:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800b132:	693b      	ldr	r3, [r7, #16]
 800b134:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800b138:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800b13a:	683b      	ldr	r3, [r7, #0]
 800b13c:	689b      	ldr	r3, [r3, #8]
 800b13e:	041b      	lsls	r3, r3, #16
 800b140:	693a      	ldr	r2, [r7, #16]
 800b142:	4313      	orrs	r3, r2
 800b144:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	4a13      	ldr	r2, [pc, #76]	; (800b198 <TIM_OC5_SetConfig+0xa4>)
 800b14a:	4293      	cmp	r3, r2
 800b14c:	d007      	beq.n	800b15e <TIM_OC5_SetConfig+0x6a>
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	4a12      	ldr	r2, [pc, #72]	; (800b19c <TIM_OC5_SetConfig+0xa8>)
 800b152:	4293      	cmp	r3, r2
 800b154:	d003      	beq.n	800b15e <TIM_OC5_SetConfig+0x6a>
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	4a11      	ldr	r2, [pc, #68]	; (800b1a0 <TIM_OC5_SetConfig+0xac>)
 800b15a:	4293      	cmp	r3, r2
 800b15c:	d109      	bne.n	800b172 <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800b15e:	697b      	ldr	r3, [r7, #20]
 800b160:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b164:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800b166:	683b      	ldr	r3, [r7, #0]
 800b168:	695b      	ldr	r3, [r3, #20]
 800b16a:	021b      	lsls	r3, r3, #8
 800b16c:	697a      	ldr	r2, [r7, #20]
 800b16e:	4313      	orrs	r3, r2
 800b170:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	697a      	ldr	r2, [r7, #20]
 800b176:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	68fa      	ldr	r2, [r7, #12]
 800b17c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800b17e:	683b      	ldr	r3, [r7, #0]
 800b180:	685a      	ldr	r2, [r3, #4]
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	693a      	ldr	r2, [r7, #16]
 800b18a:	621a      	str	r2, [r3, #32]
}
 800b18c:	bf00      	nop
 800b18e:	371c      	adds	r7, #28
 800b190:	46bd      	mov	sp, r7
 800b192:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b196:	4770      	bx	lr
 800b198:	40012c00 	.word	0x40012c00
 800b19c:	40014000 	.word	0x40014000
 800b1a0:	40014400 	.word	0x40014400

0800b1a4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800b1a4:	b480      	push	{r7}
 800b1a6:	b087      	sub	sp, #28
 800b1a8:	af00      	add	r7, sp, #0
 800b1aa:	6078      	str	r0, [r7, #4]
 800b1ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	6a1b      	ldr	r3, [r3, #32]
 800b1b2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	6a1b      	ldr	r3, [r3, #32]
 800b1be:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	685b      	ldr	r3, [r3, #4]
 800b1c4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b1ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800b1cc:	68fb      	ldr	r3, [r7, #12]
 800b1ce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b1d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b1d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b1d8:	683b      	ldr	r3, [r7, #0]
 800b1da:	681b      	ldr	r3, [r3, #0]
 800b1dc:	021b      	lsls	r3, r3, #8
 800b1de:	68fa      	ldr	r2, [r7, #12]
 800b1e0:	4313      	orrs	r3, r2
 800b1e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800b1e4:	693b      	ldr	r3, [r7, #16]
 800b1e6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b1ea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800b1ec:	683b      	ldr	r3, [r7, #0]
 800b1ee:	689b      	ldr	r3, [r3, #8]
 800b1f0:	051b      	lsls	r3, r3, #20
 800b1f2:	693a      	ldr	r2, [r7, #16]
 800b1f4:	4313      	orrs	r3, r2
 800b1f6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	4a14      	ldr	r2, [pc, #80]	; (800b24c <TIM_OC6_SetConfig+0xa8>)
 800b1fc:	4293      	cmp	r3, r2
 800b1fe:	d007      	beq.n	800b210 <TIM_OC6_SetConfig+0x6c>
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	4a13      	ldr	r2, [pc, #76]	; (800b250 <TIM_OC6_SetConfig+0xac>)
 800b204:	4293      	cmp	r3, r2
 800b206:	d003      	beq.n	800b210 <TIM_OC6_SetConfig+0x6c>
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	4a12      	ldr	r2, [pc, #72]	; (800b254 <TIM_OC6_SetConfig+0xb0>)
 800b20c:	4293      	cmp	r3, r2
 800b20e:	d109      	bne.n	800b224 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800b210:	697b      	ldr	r3, [r7, #20]
 800b212:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b216:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800b218:	683b      	ldr	r3, [r7, #0]
 800b21a:	695b      	ldr	r3, [r3, #20]
 800b21c:	029b      	lsls	r3, r3, #10
 800b21e:	697a      	ldr	r2, [r7, #20]
 800b220:	4313      	orrs	r3, r2
 800b222:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	697a      	ldr	r2, [r7, #20]
 800b228:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	68fa      	ldr	r2, [r7, #12]
 800b22e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800b230:	683b      	ldr	r3, [r7, #0]
 800b232:	685a      	ldr	r2, [r3, #4]
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	693a      	ldr	r2, [r7, #16]
 800b23c:	621a      	str	r2, [r3, #32]
}
 800b23e:	bf00      	nop
 800b240:	371c      	adds	r7, #28
 800b242:	46bd      	mov	sp, r7
 800b244:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b248:	4770      	bx	lr
 800b24a:	bf00      	nop
 800b24c:	40012c00 	.word	0x40012c00
 800b250:	40014000 	.word	0x40014000
 800b254:	40014400 	.word	0x40014400

0800b258 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b258:	b480      	push	{r7}
 800b25a:	b087      	sub	sp, #28
 800b25c:	af00      	add	r7, sp, #0
 800b25e:	60f8      	str	r0, [r7, #12]
 800b260:	60b9      	str	r1, [r7, #8]
 800b262:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b264:	68fb      	ldr	r3, [r7, #12]
 800b266:	6a1b      	ldr	r3, [r3, #32]
 800b268:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b26a:	68fb      	ldr	r3, [r7, #12]
 800b26c:	6a1b      	ldr	r3, [r3, #32]
 800b26e:	f023 0201 	bic.w	r2, r3, #1
 800b272:	68fb      	ldr	r3, [r7, #12]
 800b274:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b276:	68fb      	ldr	r3, [r7, #12]
 800b278:	699b      	ldr	r3, [r3, #24]
 800b27a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b27c:	693b      	ldr	r3, [r7, #16]
 800b27e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b282:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	011b      	lsls	r3, r3, #4
 800b288:	693a      	ldr	r2, [r7, #16]
 800b28a:	4313      	orrs	r3, r2
 800b28c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b28e:	697b      	ldr	r3, [r7, #20]
 800b290:	f023 030a 	bic.w	r3, r3, #10
 800b294:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b296:	697a      	ldr	r2, [r7, #20]
 800b298:	68bb      	ldr	r3, [r7, #8]
 800b29a:	4313      	orrs	r3, r2
 800b29c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b29e:	68fb      	ldr	r3, [r7, #12]
 800b2a0:	693a      	ldr	r2, [r7, #16]
 800b2a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b2a4:	68fb      	ldr	r3, [r7, #12]
 800b2a6:	697a      	ldr	r2, [r7, #20]
 800b2a8:	621a      	str	r2, [r3, #32]
}
 800b2aa:	bf00      	nop
 800b2ac:	371c      	adds	r7, #28
 800b2ae:	46bd      	mov	sp, r7
 800b2b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2b4:	4770      	bx	lr

0800b2b6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b2b6:	b480      	push	{r7}
 800b2b8:	b087      	sub	sp, #28
 800b2ba:	af00      	add	r7, sp, #0
 800b2bc:	60f8      	str	r0, [r7, #12]
 800b2be:	60b9      	str	r1, [r7, #8]
 800b2c0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b2c2:	68fb      	ldr	r3, [r7, #12]
 800b2c4:	6a1b      	ldr	r3, [r3, #32]
 800b2c6:	f023 0210 	bic.w	r2, r3, #16
 800b2ca:	68fb      	ldr	r3, [r7, #12]
 800b2cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b2ce:	68fb      	ldr	r3, [r7, #12]
 800b2d0:	699b      	ldr	r3, [r3, #24]
 800b2d2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b2d4:	68fb      	ldr	r3, [r7, #12]
 800b2d6:	6a1b      	ldr	r3, [r3, #32]
 800b2d8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b2da:	697b      	ldr	r3, [r7, #20]
 800b2dc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b2e0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	031b      	lsls	r3, r3, #12
 800b2e6:	697a      	ldr	r2, [r7, #20]
 800b2e8:	4313      	orrs	r3, r2
 800b2ea:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b2ec:	693b      	ldr	r3, [r7, #16]
 800b2ee:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800b2f2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b2f4:	68bb      	ldr	r3, [r7, #8]
 800b2f6:	011b      	lsls	r3, r3, #4
 800b2f8:	693a      	ldr	r2, [r7, #16]
 800b2fa:	4313      	orrs	r3, r2
 800b2fc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b2fe:	68fb      	ldr	r3, [r7, #12]
 800b300:	697a      	ldr	r2, [r7, #20]
 800b302:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b304:	68fb      	ldr	r3, [r7, #12]
 800b306:	693a      	ldr	r2, [r7, #16]
 800b308:	621a      	str	r2, [r3, #32]
}
 800b30a:	bf00      	nop
 800b30c:	371c      	adds	r7, #28
 800b30e:	46bd      	mov	sp, r7
 800b310:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b314:	4770      	bx	lr

0800b316 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b316:	b480      	push	{r7}
 800b318:	b085      	sub	sp, #20
 800b31a:	af00      	add	r7, sp, #0
 800b31c:	6078      	str	r0, [r7, #4]
 800b31e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	689b      	ldr	r3, [r3, #8]
 800b324:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b326:	68fb      	ldr	r3, [r7, #12]
 800b328:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b32c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b32e:	683a      	ldr	r2, [r7, #0]
 800b330:	68fb      	ldr	r3, [r7, #12]
 800b332:	4313      	orrs	r3, r2
 800b334:	f043 0307 	orr.w	r3, r3, #7
 800b338:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	68fa      	ldr	r2, [r7, #12]
 800b33e:	609a      	str	r2, [r3, #8]
}
 800b340:	bf00      	nop
 800b342:	3714      	adds	r7, #20
 800b344:	46bd      	mov	sp, r7
 800b346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b34a:	4770      	bx	lr

0800b34c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b34c:	b480      	push	{r7}
 800b34e:	b087      	sub	sp, #28
 800b350:	af00      	add	r7, sp, #0
 800b352:	60f8      	str	r0, [r7, #12]
 800b354:	60b9      	str	r1, [r7, #8]
 800b356:	607a      	str	r2, [r7, #4]
 800b358:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b35a:	68fb      	ldr	r3, [r7, #12]
 800b35c:	689b      	ldr	r3, [r3, #8]
 800b35e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b360:	697b      	ldr	r3, [r7, #20]
 800b362:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b366:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b368:	683b      	ldr	r3, [r7, #0]
 800b36a:	021a      	lsls	r2, r3, #8
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	431a      	orrs	r2, r3
 800b370:	68bb      	ldr	r3, [r7, #8]
 800b372:	4313      	orrs	r3, r2
 800b374:	697a      	ldr	r2, [r7, #20]
 800b376:	4313      	orrs	r3, r2
 800b378:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b37a:	68fb      	ldr	r3, [r7, #12]
 800b37c:	697a      	ldr	r2, [r7, #20]
 800b37e:	609a      	str	r2, [r3, #8]
}
 800b380:	bf00      	nop
 800b382:	371c      	adds	r7, #28
 800b384:	46bd      	mov	sp, r7
 800b386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b38a:	4770      	bx	lr

0800b38c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800b38c:	b480      	push	{r7}
 800b38e:	b087      	sub	sp, #28
 800b390:	af00      	add	r7, sp, #0
 800b392:	60f8      	str	r0, [r7, #12]
 800b394:	60b9      	str	r1, [r7, #8]
 800b396:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b398:	68bb      	ldr	r3, [r7, #8]
 800b39a:	f003 031f 	and.w	r3, r3, #31
 800b39e:	2201      	movs	r2, #1
 800b3a0:	fa02 f303 	lsl.w	r3, r2, r3
 800b3a4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800b3a6:	68fb      	ldr	r3, [r7, #12]
 800b3a8:	6a1a      	ldr	r2, [r3, #32]
 800b3aa:	697b      	ldr	r3, [r7, #20]
 800b3ac:	43db      	mvns	r3, r3
 800b3ae:	401a      	ands	r2, r3
 800b3b0:	68fb      	ldr	r3, [r7, #12]
 800b3b2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b3b4:	68fb      	ldr	r3, [r7, #12]
 800b3b6:	6a1a      	ldr	r2, [r3, #32]
 800b3b8:	68bb      	ldr	r3, [r7, #8]
 800b3ba:	f003 031f 	and.w	r3, r3, #31
 800b3be:	6879      	ldr	r1, [r7, #4]
 800b3c0:	fa01 f303 	lsl.w	r3, r1, r3
 800b3c4:	431a      	orrs	r2, r3
 800b3c6:	68fb      	ldr	r3, [r7, #12]
 800b3c8:	621a      	str	r2, [r3, #32]
}
 800b3ca:	bf00      	nop
 800b3cc:	371c      	adds	r7, #28
 800b3ce:	46bd      	mov	sp, r7
 800b3d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3d4:	4770      	bx	lr
	...

0800b3d8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b3d8:	b480      	push	{r7}
 800b3da:	b085      	sub	sp, #20
 800b3dc:	af00      	add	r7, sp, #0
 800b3de:	6078      	str	r0, [r7, #4]
 800b3e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b3e8:	2b01      	cmp	r3, #1
 800b3ea:	d101      	bne.n	800b3f0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b3ec:	2302      	movs	r3, #2
 800b3ee:	e054      	b.n	800b49a <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	2201      	movs	r2, #1
 800b3f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	2202      	movs	r2, #2
 800b3fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	681b      	ldr	r3, [r3, #0]
 800b404:	685b      	ldr	r3, [r3, #4]
 800b406:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	681b      	ldr	r3, [r3, #0]
 800b40c:	689b      	ldr	r3, [r3, #8]
 800b40e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	681b      	ldr	r3, [r3, #0]
 800b414:	4a24      	ldr	r2, [pc, #144]	; (800b4a8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800b416:	4293      	cmp	r3, r2
 800b418:	d108      	bne.n	800b42c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b41a:	68fb      	ldr	r3, [r7, #12]
 800b41c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800b420:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b422:	683b      	ldr	r3, [r7, #0]
 800b424:	685b      	ldr	r3, [r3, #4]
 800b426:	68fa      	ldr	r2, [r7, #12]
 800b428:	4313      	orrs	r3, r2
 800b42a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b42c:	68fb      	ldr	r3, [r7, #12]
 800b42e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b432:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b434:	683b      	ldr	r3, [r7, #0]
 800b436:	681b      	ldr	r3, [r3, #0]
 800b438:	68fa      	ldr	r2, [r7, #12]
 800b43a:	4313      	orrs	r3, r2
 800b43c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	681b      	ldr	r3, [r3, #0]
 800b442:	68fa      	ldr	r2, [r7, #12]
 800b444:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	681b      	ldr	r3, [r3, #0]
 800b44a:	4a17      	ldr	r2, [pc, #92]	; (800b4a8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800b44c:	4293      	cmp	r3, r2
 800b44e:	d00e      	beq.n	800b46e <HAL_TIMEx_MasterConfigSynchronization+0x96>
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	681b      	ldr	r3, [r3, #0]
 800b454:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b458:	d009      	beq.n	800b46e <HAL_TIMEx_MasterConfigSynchronization+0x96>
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	681b      	ldr	r3, [r3, #0]
 800b45e:	4a13      	ldr	r2, [pc, #76]	; (800b4ac <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800b460:	4293      	cmp	r3, r2
 800b462:	d004      	beq.n	800b46e <HAL_TIMEx_MasterConfigSynchronization+0x96>
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	681b      	ldr	r3, [r3, #0]
 800b468:	4a11      	ldr	r2, [pc, #68]	; (800b4b0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800b46a:	4293      	cmp	r3, r2
 800b46c:	d10c      	bne.n	800b488 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b46e:	68bb      	ldr	r3, [r7, #8]
 800b470:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b474:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b476:	683b      	ldr	r3, [r7, #0]
 800b478:	689b      	ldr	r3, [r3, #8]
 800b47a:	68ba      	ldr	r2, [r7, #8]
 800b47c:	4313      	orrs	r3, r2
 800b47e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	681b      	ldr	r3, [r3, #0]
 800b484:	68ba      	ldr	r2, [r7, #8]
 800b486:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	2201      	movs	r2, #1
 800b48c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	2200      	movs	r2, #0
 800b494:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b498:	2300      	movs	r3, #0
}
 800b49a:	4618      	mov	r0, r3
 800b49c:	3714      	adds	r7, #20
 800b49e:	46bd      	mov	sp, r7
 800b4a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4a4:	4770      	bx	lr
 800b4a6:	bf00      	nop
 800b4a8:	40012c00 	.word	0x40012c00
 800b4ac:	40000400 	.word	0x40000400
 800b4b0:	40014000 	.word	0x40014000

0800b4b4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800b4b4:	b480      	push	{r7}
 800b4b6:	b085      	sub	sp, #20
 800b4b8:	af00      	add	r7, sp, #0
 800b4ba:	6078      	str	r0, [r7, #4]
 800b4bc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800b4be:	2300      	movs	r3, #0
 800b4c0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b4c8:	2b01      	cmp	r3, #1
 800b4ca:	d101      	bne.n	800b4d0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800b4cc:	2302      	movs	r3, #2
 800b4ce:	e060      	b.n	800b592 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	2201      	movs	r2, #1
 800b4d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800b4d8:	68fb      	ldr	r3, [r7, #12]
 800b4da:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800b4de:	683b      	ldr	r3, [r7, #0]
 800b4e0:	68db      	ldr	r3, [r3, #12]
 800b4e2:	4313      	orrs	r3, r2
 800b4e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800b4e6:	68fb      	ldr	r3, [r7, #12]
 800b4e8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b4ec:	683b      	ldr	r3, [r7, #0]
 800b4ee:	689b      	ldr	r3, [r3, #8]
 800b4f0:	4313      	orrs	r3, r2
 800b4f2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800b4f4:	68fb      	ldr	r3, [r7, #12]
 800b4f6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800b4fa:	683b      	ldr	r3, [r7, #0]
 800b4fc:	685b      	ldr	r3, [r3, #4]
 800b4fe:	4313      	orrs	r3, r2
 800b500:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800b502:	68fb      	ldr	r3, [r7, #12]
 800b504:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800b508:	683b      	ldr	r3, [r7, #0]
 800b50a:	681b      	ldr	r3, [r3, #0]
 800b50c:	4313      	orrs	r3, r2
 800b50e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800b510:	68fb      	ldr	r3, [r7, #12]
 800b512:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b516:	683b      	ldr	r3, [r7, #0]
 800b518:	691b      	ldr	r3, [r3, #16]
 800b51a:	4313      	orrs	r3, r2
 800b51c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800b51e:	68fb      	ldr	r3, [r7, #12]
 800b520:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800b524:	683b      	ldr	r3, [r7, #0]
 800b526:	695b      	ldr	r3, [r3, #20]
 800b528:	4313      	orrs	r3, r2
 800b52a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800b52c:	68fb      	ldr	r3, [r7, #12]
 800b52e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800b532:	683b      	ldr	r3, [r7, #0]
 800b534:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b536:	4313      	orrs	r3, r2
 800b538:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800b53a:	68fb      	ldr	r3, [r7, #12]
 800b53c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800b540:	683b      	ldr	r3, [r7, #0]
 800b542:	699b      	ldr	r3, [r3, #24]
 800b544:	041b      	lsls	r3, r3, #16
 800b546:	4313      	orrs	r3, r2
 800b548:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	681b      	ldr	r3, [r3, #0]
 800b54e:	4a14      	ldr	r2, [pc, #80]	; (800b5a0 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 800b550:	4293      	cmp	r3, r2
 800b552:	d115      	bne.n	800b580 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800b554:	68fb      	ldr	r3, [r7, #12]
 800b556:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800b55a:	683b      	ldr	r3, [r7, #0]
 800b55c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b55e:	051b      	lsls	r3, r3, #20
 800b560:	4313      	orrs	r3, r2
 800b562:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800b564:	68fb      	ldr	r3, [r7, #12]
 800b566:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800b56a:	683b      	ldr	r3, [r7, #0]
 800b56c:	69db      	ldr	r3, [r3, #28]
 800b56e:	4313      	orrs	r3, r2
 800b570:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800b572:	68fb      	ldr	r3, [r7, #12]
 800b574:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800b578:	683b      	ldr	r3, [r7, #0]
 800b57a:	6a1b      	ldr	r3, [r3, #32]
 800b57c:	4313      	orrs	r3, r2
 800b57e:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	681b      	ldr	r3, [r3, #0]
 800b584:	68fa      	ldr	r2, [r7, #12]
 800b586:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	2200      	movs	r2, #0
 800b58c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b590:	2300      	movs	r3, #0
}
 800b592:	4618      	mov	r0, r3
 800b594:	3714      	adds	r7, #20
 800b596:	46bd      	mov	sp, r7
 800b598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b59c:	4770      	bx	lr
 800b59e:	bf00      	nop
 800b5a0:	40012c00 	.word	0x40012c00

0800b5a4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b5a4:	b480      	push	{r7}
 800b5a6:	b083      	sub	sp, #12
 800b5a8:	af00      	add	r7, sp, #0
 800b5aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b5ac:	bf00      	nop
 800b5ae:	370c      	adds	r7, #12
 800b5b0:	46bd      	mov	sp, r7
 800b5b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5b6:	4770      	bx	lr

0800b5b8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b5b8:	b480      	push	{r7}
 800b5ba:	b083      	sub	sp, #12
 800b5bc:	af00      	add	r7, sp, #0
 800b5be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b5c0:	bf00      	nop
 800b5c2:	370c      	adds	r7, #12
 800b5c4:	46bd      	mov	sp, r7
 800b5c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ca:	4770      	bx	lr

0800b5cc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800b5cc:	b480      	push	{r7}
 800b5ce:	b083      	sub	sp, #12
 800b5d0:	af00      	add	r7, sp, #0
 800b5d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800b5d4:	bf00      	nop
 800b5d6:	370c      	adds	r7, #12
 800b5d8:	46bd      	mov	sp, r7
 800b5da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5de:	4770      	bx	lr

0800b5e0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b5e0:	b580      	push	{r7, lr}
 800b5e2:	b082      	sub	sp, #8
 800b5e4:	af00      	add	r7, sp, #0
 800b5e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	2b00      	cmp	r3, #0
 800b5ec:	d101      	bne.n	800b5f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b5ee:	2301      	movs	r3, #1
 800b5f0:	e040      	b.n	800b674 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b5f6:	2b00      	cmp	r3, #0
 800b5f8:	d106      	bne.n	800b608 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	2200      	movs	r2, #0
 800b5fe:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b602:	6878      	ldr	r0, [r7, #4]
 800b604:	f7fa fc38 	bl	8005e78 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	2224      	movs	r2, #36	; 0x24
 800b60c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	681b      	ldr	r3, [r3, #0]
 800b612:	681a      	ldr	r2, [r3, #0]
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	681b      	ldr	r3, [r3, #0]
 800b618:	f022 0201 	bic.w	r2, r2, #1
 800b61c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b61e:	6878      	ldr	r0, [r7, #4]
 800b620:	f000 fbde 	bl	800bde0 <UART_SetConfig>
 800b624:	4603      	mov	r3, r0
 800b626:	2b01      	cmp	r3, #1
 800b628:	d101      	bne.n	800b62e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800b62a:	2301      	movs	r3, #1
 800b62c:	e022      	b.n	800b674 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b632:	2b00      	cmp	r3, #0
 800b634:	d002      	beq.n	800b63c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800b636:	6878      	ldr	r0, [r7, #4]
 800b638:	f000 fe58 	bl	800c2ec <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	681b      	ldr	r3, [r3, #0]
 800b640:	685a      	ldr	r2, [r3, #4]
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	681b      	ldr	r3, [r3, #0]
 800b646:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b64a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	681b      	ldr	r3, [r3, #0]
 800b650:	689a      	ldr	r2, [r3, #8]
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	681b      	ldr	r3, [r3, #0]
 800b656:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b65a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	681b      	ldr	r3, [r3, #0]
 800b660:	681a      	ldr	r2, [r3, #0]
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	681b      	ldr	r3, [r3, #0]
 800b666:	f042 0201 	orr.w	r2, r2, #1
 800b66a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b66c:	6878      	ldr	r0, [r7, #4]
 800b66e:	f000 fedf 	bl	800c430 <UART_CheckIdleState>
 800b672:	4603      	mov	r3, r0
}
 800b674:	4618      	mov	r0, r3
 800b676:	3708      	adds	r7, #8
 800b678:	46bd      	mov	sp, r7
 800b67a:	bd80      	pop	{r7, pc}

0800b67c <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800b67c:	b480      	push	{r7}
 800b67e:	b08b      	sub	sp, #44	; 0x2c
 800b680:	af00      	add	r7, sp, #0
 800b682:	60f8      	str	r0, [r7, #12]
 800b684:	60b9      	str	r1, [r7, #8]
 800b686:	4613      	mov	r3, r2
 800b688:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b68a:	68fb      	ldr	r3, [r7, #12]
 800b68c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b68e:	2b20      	cmp	r3, #32
 800b690:	d156      	bne.n	800b740 <HAL_UART_Transmit_IT+0xc4>
  {
    if ((pData == NULL) || (Size == 0U))
 800b692:	68bb      	ldr	r3, [r7, #8]
 800b694:	2b00      	cmp	r3, #0
 800b696:	d002      	beq.n	800b69e <HAL_UART_Transmit_IT+0x22>
 800b698:	88fb      	ldrh	r3, [r7, #6]
 800b69a:	2b00      	cmp	r3, #0
 800b69c:	d101      	bne.n	800b6a2 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 800b69e:	2301      	movs	r3, #1
 800b6a0:	e04f      	b.n	800b742 <HAL_UART_Transmit_IT+0xc6>
    }

    __HAL_LOCK(huart);
 800b6a2:	68fb      	ldr	r3, [r7, #12]
 800b6a4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800b6a8:	2b01      	cmp	r3, #1
 800b6aa:	d101      	bne.n	800b6b0 <HAL_UART_Transmit_IT+0x34>
 800b6ac:	2302      	movs	r3, #2
 800b6ae:	e048      	b.n	800b742 <HAL_UART_Transmit_IT+0xc6>
 800b6b0:	68fb      	ldr	r3, [r7, #12]
 800b6b2:	2201      	movs	r2, #1
 800b6b4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 800b6b8:	68fb      	ldr	r3, [r7, #12]
 800b6ba:	68ba      	ldr	r2, [r7, #8]
 800b6bc:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800b6be:	68fb      	ldr	r3, [r7, #12]
 800b6c0:	88fa      	ldrh	r2, [r7, #6]
 800b6c2:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800b6c6:	68fb      	ldr	r3, [r7, #12]
 800b6c8:	88fa      	ldrh	r2, [r7, #6]
 800b6ca:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 800b6ce:	68fb      	ldr	r3, [r7, #12]
 800b6d0:	2200      	movs	r2, #0
 800b6d2:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b6d4:	68fb      	ldr	r3, [r7, #12]
 800b6d6:	2200      	movs	r2, #0
 800b6d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b6dc:	68fb      	ldr	r3, [r7, #12]
 800b6de:	2221      	movs	r2, #33	; 0x21
 800b6e0:	679a      	str	r2, [r3, #120]	; 0x78
      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b6e2:	68fb      	ldr	r3, [r7, #12]
 800b6e4:	689b      	ldr	r3, [r3, #8]
 800b6e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b6ea:	d107      	bne.n	800b6fc <HAL_UART_Transmit_IT+0x80>
 800b6ec:	68fb      	ldr	r3, [r7, #12]
 800b6ee:	691b      	ldr	r3, [r3, #16]
 800b6f0:	2b00      	cmp	r3, #0
 800b6f2:	d103      	bne.n	800b6fc <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 800b6f4:	68fb      	ldr	r3, [r7, #12]
 800b6f6:	4a16      	ldr	r2, [pc, #88]	; (800b750 <HAL_UART_Transmit_IT+0xd4>)
 800b6f8:	669a      	str	r2, [r3, #104]	; 0x68
 800b6fa:	e002      	b.n	800b702 <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 800b6fc:	68fb      	ldr	r3, [r7, #12]
 800b6fe:	4a15      	ldr	r2, [pc, #84]	; (800b754 <HAL_UART_Transmit_IT+0xd8>)
 800b700:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 800b702:	68fb      	ldr	r3, [r7, #12]
 800b704:	2200      	movs	r2, #0
 800b706:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800b70a:	68fb      	ldr	r3, [r7, #12]
 800b70c:	681b      	ldr	r3, [r3, #0]
 800b70e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b710:	697b      	ldr	r3, [r7, #20]
 800b712:	e853 3f00 	ldrex	r3, [r3]
 800b716:	613b      	str	r3, [r7, #16]
   return(result);
 800b718:	693b      	ldr	r3, [r7, #16]
 800b71a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b71e:	627b      	str	r3, [r7, #36]	; 0x24
 800b720:	68fb      	ldr	r3, [r7, #12]
 800b722:	681b      	ldr	r3, [r3, #0]
 800b724:	461a      	mov	r2, r3
 800b726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b728:	623b      	str	r3, [r7, #32]
 800b72a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b72c:	69f9      	ldr	r1, [r7, #28]
 800b72e:	6a3a      	ldr	r2, [r7, #32]
 800b730:	e841 2300 	strex	r3, r2, [r1]
 800b734:	61bb      	str	r3, [r7, #24]
   return(result);
 800b736:	69bb      	ldr	r3, [r7, #24]
 800b738:	2b00      	cmp	r3, #0
 800b73a:	d1e6      	bne.n	800b70a <HAL_UART_Transmit_IT+0x8e>
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 800b73c:	2300      	movs	r3, #0
 800b73e:	e000      	b.n	800b742 <HAL_UART_Transmit_IT+0xc6>
  }
  else
  {
    return HAL_BUSY;
 800b740:	2302      	movs	r3, #2
  }
}
 800b742:	4618      	mov	r0, r3
 800b744:	372c      	adds	r7, #44	; 0x2c
 800b746:	46bd      	mov	sp, r7
 800b748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b74c:	4770      	bx	lr
 800b74e:	bf00      	nop
 800b750:	0800c98b 	.word	0x0800c98b
 800b754:	0800c8d3 	.word	0x0800c8d3

0800b758 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b758:	b580      	push	{r7, lr}
 800b75a:	b08a      	sub	sp, #40	; 0x28
 800b75c:	af00      	add	r7, sp, #0
 800b75e:	60f8      	str	r0, [r7, #12]
 800b760:	60b9      	str	r1, [r7, #8]
 800b762:	4613      	mov	r3, r2
 800b764:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b766:	68fb      	ldr	r3, [r7, #12]
 800b768:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b76a:	2b20      	cmp	r3, #32
 800b76c:	d142      	bne.n	800b7f4 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 800b76e:	68bb      	ldr	r3, [r7, #8]
 800b770:	2b00      	cmp	r3, #0
 800b772:	d002      	beq.n	800b77a <HAL_UART_Receive_IT+0x22>
 800b774:	88fb      	ldrh	r3, [r7, #6]
 800b776:	2b00      	cmp	r3, #0
 800b778:	d101      	bne.n	800b77e <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 800b77a:	2301      	movs	r3, #1
 800b77c:	e03b      	b.n	800b7f6 <HAL_UART_Receive_IT+0x9e>
    }

    __HAL_LOCK(huart);
 800b77e:	68fb      	ldr	r3, [r7, #12]
 800b780:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800b784:	2b01      	cmp	r3, #1
 800b786:	d101      	bne.n	800b78c <HAL_UART_Receive_IT+0x34>
 800b788:	2302      	movs	r3, #2
 800b78a:	e034      	b.n	800b7f6 <HAL_UART_Receive_IT+0x9e>
 800b78c:	68fb      	ldr	r3, [r7, #12]
 800b78e:	2201      	movs	r2, #1
 800b790:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b794:	68fb      	ldr	r3, [r7, #12]
 800b796:	2200      	movs	r2, #0
 800b798:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800b79a:	68fb      	ldr	r3, [r7, #12]
 800b79c:	681b      	ldr	r3, [r3, #0]
 800b79e:	4a18      	ldr	r2, [pc, #96]	; (800b800 <HAL_UART_Receive_IT+0xa8>)
 800b7a0:	4293      	cmp	r3, r2
 800b7a2:	d01f      	beq.n	800b7e4 <HAL_UART_Receive_IT+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800b7a4:	68fb      	ldr	r3, [r7, #12]
 800b7a6:	681b      	ldr	r3, [r3, #0]
 800b7a8:	685b      	ldr	r3, [r3, #4]
 800b7aa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b7ae:	2b00      	cmp	r3, #0
 800b7b0:	d018      	beq.n	800b7e4 <HAL_UART_Receive_IT+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800b7b2:	68fb      	ldr	r3, [r7, #12]
 800b7b4:	681b      	ldr	r3, [r3, #0]
 800b7b6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7b8:	697b      	ldr	r3, [r7, #20]
 800b7ba:	e853 3f00 	ldrex	r3, [r3]
 800b7be:	613b      	str	r3, [r7, #16]
   return(result);
 800b7c0:	693b      	ldr	r3, [r7, #16]
 800b7c2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800b7c6:	627b      	str	r3, [r7, #36]	; 0x24
 800b7c8:	68fb      	ldr	r3, [r7, #12]
 800b7ca:	681b      	ldr	r3, [r3, #0]
 800b7cc:	461a      	mov	r2, r3
 800b7ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7d0:	623b      	str	r3, [r7, #32]
 800b7d2:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7d4:	69f9      	ldr	r1, [r7, #28]
 800b7d6:	6a3a      	ldr	r2, [r7, #32]
 800b7d8:	e841 2300 	strex	r3, r2, [r1]
 800b7dc:	61bb      	str	r3, [r7, #24]
   return(result);
 800b7de:	69bb      	ldr	r3, [r7, #24]
 800b7e0:	2b00      	cmp	r3, #0
 800b7e2:	d1e6      	bne.n	800b7b2 <HAL_UART_Receive_IT+0x5a>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800b7e4:	88fb      	ldrh	r3, [r7, #6]
 800b7e6:	461a      	mov	r2, r3
 800b7e8:	68b9      	ldr	r1, [r7, #8]
 800b7ea:	68f8      	ldr	r0, [r7, #12]
 800b7ec:	f000 ff2e 	bl	800c64c <UART_Start_Receive_IT>
 800b7f0:	4603      	mov	r3, r0
 800b7f2:	e000      	b.n	800b7f6 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 800b7f4:	2302      	movs	r3, #2
  }
}
 800b7f6:	4618      	mov	r0, r3
 800b7f8:	3728      	adds	r7, #40	; 0x28
 800b7fa:	46bd      	mov	sp, r7
 800b7fc:	bd80      	pop	{r7, pc}
 800b7fe:	bf00      	nop
 800b800:	40008000 	.word	0x40008000

0800b804 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b804:	b580      	push	{r7, lr}
 800b806:	b0ba      	sub	sp, #232	; 0xe8
 800b808:	af00      	add	r7, sp, #0
 800b80a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	681b      	ldr	r3, [r3, #0]
 800b810:	69db      	ldr	r3, [r3, #28]
 800b812:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	681b      	ldr	r3, [r3, #0]
 800b81a:	681b      	ldr	r3, [r3, #0]
 800b81c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	681b      	ldr	r3, [r3, #0]
 800b824:	689b      	ldr	r3, [r3, #8]
 800b826:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800b82a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800b82e:	f640 030f 	movw	r3, #2063	; 0x80f
 800b832:	4013      	ands	r3, r2
 800b834:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800b838:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	d115      	bne.n	800b86c <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800b840:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b844:	f003 0320 	and.w	r3, r3, #32
 800b848:	2b00      	cmp	r3, #0
 800b84a:	d00f      	beq.n	800b86c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800b84c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b850:	f003 0320 	and.w	r3, r3, #32
 800b854:	2b00      	cmp	r3, #0
 800b856:	d009      	beq.n	800b86c <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b85c:	2b00      	cmp	r3, #0
 800b85e:	f000 82a6 	beq.w	800bdae <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b866:	6878      	ldr	r0, [r7, #4]
 800b868:	4798      	blx	r3
      }
      return;
 800b86a:	e2a0      	b.n	800bdae <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 800b86c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b870:	2b00      	cmp	r3, #0
 800b872:	f000 8117 	beq.w	800baa4 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800b876:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b87a:	f003 0301 	and.w	r3, r3, #1
 800b87e:	2b00      	cmp	r3, #0
 800b880:	d106      	bne.n	800b890 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800b882:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800b886:	4b85      	ldr	r3, [pc, #532]	; (800ba9c <HAL_UART_IRQHandler+0x298>)
 800b888:	4013      	ands	r3, r2
 800b88a:	2b00      	cmp	r3, #0
 800b88c:	f000 810a 	beq.w	800baa4 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b890:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b894:	f003 0301 	and.w	r3, r3, #1
 800b898:	2b00      	cmp	r3, #0
 800b89a:	d011      	beq.n	800b8c0 <HAL_UART_IRQHandler+0xbc>
 800b89c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b8a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b8a4:	2b00      	cmp	r3, #0
 800b8a6:	d00b      	beq.n	800b8c0 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	681b      	ldr	r3, [r3, #0]
 800b8ac:	2201      	movs	r2, #1
 800b8ae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b8b6:	f043 0201 	orr.w	r2, r3, #1
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b8c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b8c4:	f003 0302 	and.w	r3, r3, #2
 800b8c8:	2b00      	cmp	r3, #0
 800b8ca:	d011      	beq.n	800b8f0 <HAL_UART_IRQHandler+0xec>
 800b8cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b8d0:	f003 0301 	and.w	r3, r3, #1
 800b8d4:	2b00      	cmp	r3, #0
 800b8d6:	d00b      	beq.n	800b8f0 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	681b      	ldr	r3, [r3, #0]
 800b8dc:	2202      	movs	r2, #2
 800b8de:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b8e6:	f043 0204 	orr.w	r2, r3, #4
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b8f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b8f4:	f003 0304 	and.w	r3, r3, #4
 800b8f8:	2b00      	cmp	r3, #0
 800b8fa:	d011      	beq.n	800b920 <HAL_UART_IRQHandler+0x11c>
 800b8fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b900:	f003 0301 	and.w	r3, r3, #1
 800b904:	2b00      	cmp	r3, #0
 800b906:	d00b      	beq.n	800b920 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	681b      	ldr	r3, [r3, #0]
 800b90c:	2204      	movs	r2, #4
 800b90e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b916:	f043 0202 	orr.w	r2, r3, #2
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 800b920:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b924:	f003 0308 	and.w	r3, r3, #8
 800b928:	2b00      	cmp	r3, #0
 800b92a:	d017      	beq.n	800b95c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800b92c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b930:	f003 0320 	and.w	r3, r3, #32
 800b934:	2b00      	cmp	r3, #0
 800b936:	d105      	bne.n	800b944 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800b938:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b93c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800b940:	2b00      	cmp	r3, #0
 800b942:	d00b      	beq.n	800b95c <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	681b      	ldr	r3, [r3, #0]
 800b948:	2208      	movs	r2, #8
 800b94a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b952:	f043 0208 	orr.w	r2, r3, #8
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800b95c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b960:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b964:	2b00      	cmp	r3, #0
 800b966:	d012      	beq.n	800b98e <HAL_UART_IRQHandler+0x18a>
 800b968:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b96c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b970:	2b00      	cmp	r3, #0
 800b972:	d00c      	beq.n	800b98e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	681b      	ldr	r3, [r3, #0]
 800b978:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b97c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b984:	f043 0220 	orr.w	r2, r3, #32
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b994:	2b00      	cmp	r3, #0
 800b996:	f000 820c 	beq.w	800bdb2 <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800b99a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b99e:	f003 0320 	and.w	r3, r3, #32
 800b9a2:	2b00      	cmp	r3, #0
 800b9a4:	d00d      	beq.n	800b9c2 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800b9a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b9aa:	f003 0320 	and.w	r3, r3, #32
 800b9ae:	2b00      	cmp	r3, #0
 800b9b0:	d007      	beq.n	800b9c2 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b9b6:	2b00      	cmp	r3, #0
 800b9b8:	d003      	beq.n	800b9c2 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b9be:	6878      	ldr	r0, [r7, #4]
 800b9c0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b9c8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	689b      	ldr	r3, [r3, #8]
 800b9d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b9d6:	2b40      	cmp	r3, #64	; 0x40
 800b9d8:	d005      	beq.n	800b9e6 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800b9da:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b9de:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b9e2:	2b00      	cmp	r3, #0
 800b9e4:	d04f      	beq.n	800ba86 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b9e6:	6878      	ldr	r0, [r7, #4]
 800b9e8:	f000 fefa 	bl	800c7e0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	681b      	ldr	r3, [r3, #0]
 800b9f0:	689b      	ldr	r3, [r3, #8]
 800b9f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b9f6:	2b40      	cmp	r3, #64	; 0x40
 800b9f8:	d141      	bne.n	800ba7e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	681b      	ldr	r3, [r3, #0]
 800b9fe:	3308      	adds	r3, #8
 800ba00:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba04:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800ba08:	e853 3f00 	ldrex	r3, [r3]
 800ba0c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800ba10:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800ba14:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ba18:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	681b      	ldr	r3, [r3, #0]
 800ba20:	3308      	adds	r3, #8
 800ba22:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800ba26:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800ba2a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba2e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800ba32:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800ba36:	e841 2300 	strex	r3, r2, [r1]
 800ba3a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800ba3e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800ba42:	2b00      	cmp	r3, #0
 800ba44:	d1d9      	bne.n	800b9fa <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	d013      	beq.n	800ba76 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ba52:	4a13      	ldr	r2, [pc, #76]	; (800baa0 <HAL_UART_IRQHandler+0x29c>)
 800ba54:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ba5a:	4618      	mov	r0, r3
 800ba5c:	f7fc f93c 	bl	8007cd8 <HAL_DMA_Abort_IT>
 800ba60:	4603      	mov	r3, r0
 800ba62:	2b00      	cmp	r3, #0
 800ba64:	d017      	beq.n	800ba96 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ba6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba6c:	687a      	ldr	r2, [r7, #4]
 800ba6e:	6f12      	ldr	r2, [r2, #112]	; 0x70
 800ba70:	4610      	mov	r0, r2
 800ba72:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ba74:	e00f      	b.n	800ba96 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800ba76:	6878      	ldr	r0, [r7, #4]
 800ba78:	f7f5 ff5a 	bl	8001930 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ba7c:	e00b      	b.n	800ba96 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800ba7e:	6878      	ldr	r0, [r7, #4]
 800ba80:	f7f5 ff56 	bl	8001930 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ba84:	e007      	b.n	800ba96 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800ba86:	6878      	ldr	r0, [r7, #4]
 800ba88:	f7f5 ff52 	bl	8001930 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	2200      	movs	r2, #0
 800ba90:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 800ba94:	e18d      	b.n	800bdb2 <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ba96:	bf00      	nop
    return;
 800ba98:	e18b      	b.n	800bdb2 <HAL_UART_IRQHandler+0x5ae>
 800ba9a:	bf00      	nop
 800ba9c:	04000120 	.word	0x04000120
 800baa0:	0800c8a7 	.word	0x0800c8a7

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800baa8:	2b01      	cmp	r3, #1
 800baaa:	f040 8146 	bne.w	800bd3a <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800baae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bab2:	f003 0310 	and.w	r3, r3, #16
 800bab6:	2b00      	cmp	r3, #0
 800bab8:	f000 813f 	beq.w	800bd3a <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800babc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bac0:	f003 0310 	and.w	r3, r3, #16
 800bac4:	2b00      	cmp	r3, #0
 800bac6:	f000 8138 	beq.w	800bd3a <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	681b      	ldr	r3, [r3, #0]
 800bace:	2210      	movs	r2, #16
 800bad0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	681b      	ldr	r3, [r3, #0]
 800bad6:	689b      	ldr	r3, [r3, #8]
 800bad8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800badc:	2b40      	cmp	r3, #64	; 0x40
 800bade:	f040 80b4 	bne.w	800bc4a <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bae6:	681b      	ldr	r3, [r3, #0]
 800bae8:	685b      	ldr	r3, [r3, #4]
 800baea:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800baee:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800baf2:	2b00      	cmp	r3, #0
 800baf4:	f000 815f 	beq.w	800bdb6 <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800bafe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800bb02:	429a      	cmp	r2, r3
 800bb04:	f080 8157 	bcs.w	800bdb6 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800bb0e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bb16:	681b      	ldr	r3, [r3, #0]
 800bb18:	681b      	ldr	r3, [r3, #0]
 800bb1a:	f003 0320 	and.w	r3, r3, #32
 800bb1e:	2b00      	cmp	r3, #0
 800bb20:	f040 8085 	bne.w	800bc2e <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	681b      	ldr	r3, [r3, #0]
 800bb28:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb2c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800bb30:	e853 3f00 	ldrex	r3, [r3]
 800bb34:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800bb38:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800bb3c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bb40:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	681b      	ldr	r3, [r3, #0]
 800bb48:	461a      	mov	r2, r3
 800bb4a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800bb4e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800bb52:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb56:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800bb5a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800bb5e:	e841 2300 	strex	r3, r2, [r1]
 800bb62:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800bb66:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bb6a:	2b00      	cmp	r3, #0
 800bb6c:	d1da      	bne.n	800bb24 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	681b      	ldr	r3, [r3, #0]
 800bb72:	3308      	adds	r3, #8
 800bb74:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb76:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bb78:	e853 3f00 	ldrex	r3, [r3]
 800bb7c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800bb7e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800bb80:	f023 0301 	bic.w	r3, r3, #1
 800bb84:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	681b      	ldr	r3, [r3, #0]
 800bb8c:	3308      	adds	r3, #8
 800bb8e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800bb92:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800bb96:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb98:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800bb9a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800bb9e:	e841 2300 	strex	r3, r2, [r1]
 800bba2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800bba4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	d1e1      	bne.n	800bb6e <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	681b      	ldr	r3, [r3, #0]
 800bbae:	3308      	adds	r3, #8
 800bbb0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bbb2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bbb4:	e853 3f00 	ldrex	r3, [r3]
 800bbb8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800bbba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bbbc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bbc0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	681b      	ldr	r3, [r3, #0]
 800bbc8:	3308      	adds	r3, #8
 800bbca:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800bbce:	66fa      	str	r2, [r7, #108]	; 0x6c
 800bbd0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bbd2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800bbd4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800bbd6:	e841 2300 	strex	r3, r2, [r1]
 800bbda:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800bbdc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bbde:	2b00      	cmp	r3, #0
 800bbe0:	d1e3      	bne.n	800bbaa <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	2220      	movs	r2, #32
 800bbe6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	2200      	movs	r2, #0
 800bbec:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	681b      	ldr	r3, [r3, #0]
 800bbf2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bbf4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bbf6:	e853 3f00 	ldrex	r3, [r3]
 800bbfa:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800bbfc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bbfe:	f023 0310 	bic.w	r3, r3, #16
 800bc02:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	681b      	ldr	r3, [r3, #0]
 800bc0a:	461a      	mov	r2, r3
 800bc0c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800bc10:	65bb      	str	r3, [r7, #88]	; 0x58
 800bc12:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc14:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800bc16:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800bc18:	e841 2300 	strex	r3, r2, [r1]
 800bc1c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800bc1e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bc20:	2b00      	cmp	r3, #0
 800bc22:	d1e4      	bne.n	800bbee <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bc28:	4618      	mov	r0, r3
 800bc2a:	f7fc f817 	bl	8007c5c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800bc3a:	b29b      	uxth	r3, r3
 800bc3c:	1ad3      	subs	r3, r2, r3
 800bc3e:	b29b      	uxth	r3, r3
 800bc40:	4619      	mov	r1, r3
 800bc42:	6878      	ldr	r0, [r7, #4]
 800bc44:	f000 f8c0 	bl	800bdc8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800bc48:	e0b5      	b.n	800bdb6 <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800bc56:	b29b      	uxth	r3, r3
 800bc58:	1ad3      	subs	r3, r2, r3
 800bc5a:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800bc64:	b29b      	uxth	r3, r3
 800bc66:	2b00      	cmp	r3, #0
 800bc68:	f000 80a7 	beq.w	800bdba <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 800bc6c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800bc70:	2b00      	cmp	r3, #0
 800bc72:	f000 80a2 	beq.w	800bdba <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	681b      	ldr	r3, [r3, #0]
 800bc7a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc7e:	e853 3f00 	ldrex	r3, [r3]
 800bc82:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800bc84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc86:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800bc8a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	681b      	ldr	r3, [r3, #0]
 800bc92:	461a      	mov	r2, r3
 800bc94:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800bc98:	647b      	str	r3, [r7, #68]	; 0x44
 800bc9a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc9c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800bc9e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bca0:	e841 2300 	strex	r3, r2, [r1]
 800bca4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800bca6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bca8:	2b00      	cmp	r3, #0
 800bcaa:	d1e4      	bne.n	800bc76 <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	681b      	ldr	r3, [r3, #0]
 800bcb0:	3308      	adds	r3, #8
 800bcb2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bcb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcb6:	e853 3f00 	ldrex	r3, [r3]
 800bcba:	623b      	str	r3, [r7, #32]
   return(result);
 800bcbc:	6a3b      	ldr	r3, [r7, #32]
 800bcbe:	f023 0301 	bic.w	r3, r3, #1
 800bcc2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	681b      	ldr	r3, [r3, #0]
 800bcca:	3308      	adds	r3, #8
 800bccc:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800bcd0:	633a      	str	r2, [r7, #48]	; 0x30
 800bcd2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bcd4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bcd6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bcd8:	e841 2300 	strex	r3, r2, [r1]
 800bcdc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800bcde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bce0:	2b00      	cmp	r3, #0
 800bce2:	d1e3      	bne.n	800bcac <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	2220      	movs	r2, #32
 800bce8:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	2200      	movs	r2, #0
 800bcee:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	2200      	movs	r2, #0
 800bcf4:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	681b      	ldr	r3, [r3, #0]
 800bcfa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bcfc:	693b      	ldr	r3, [r7, #16]
 800bcfe:	e853 3f00 	ldrex	r3, [r3]
 800bd02:	60fb      	str	r3, [r7, #12]
   return(result);
 800bd04:	68fb      	ldr	r3, [r7, #12]
 800bd06:	f023 0310 	bic.w	r3, r3, #16
 800bd0a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	681b      	ldr	r3, [r3, #0]
 800bd12:	461a      	mov	r2, r3
 800bd14:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800bd18:	61fb      	str	r3, [r7, #28]
 800bd1a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd1c:	69b9      	ldr	r1, [r7, #24]
 800bd1e:	69fa      	ldr	r2, [r7, #28]
 800bd20:	e841 2300 	strex	r3, r2, [r1]
 800bd24:	617b      	str	r3, [r7, #20]
   return(result);
 800bd26:	697b      	ldr	r3, [r7, #20]
 800bd28:	2b00      	cmp	r3, #0
 800bd2a:	d1e4      	bne.n	800bcf6 <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800bd2c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800bd30:	4619      	mov	r1, r3
 800bd32:	6878      	ldr	r0, [r7, #4]
 800bd34:	f000 f848 	bl	800bdc8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800bd38:	e03f      	b.n	800bdba <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800bd3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bd3e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800bd42:	2b00      	cmp	r3, #0
 800bd44:	d00e      	beq.n	800bd64 <HAL_UART_IRQHandler+0x560>
 800bd46:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bd4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800bd4e:	2b00      	cmp	r3, #0
 800bd50:	d008      	beq.n	800bd64 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	681b      	ldr	r3, [r3, #0]
 800bd56:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800bd5a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800bd5c:	6878      	ldr	r0, [r7, #4]
 800bd5e:	f000 fffe 	bl	800cd5e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800bd62:	e02d      	b.n	800bdc0 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 800bd64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bd68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bd6c:	2b00      	cmp	r3, #0
 800bd6e:	d00e      	beq.n	800bd8e <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800bd70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bd74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	d008      	beq.n	800bd8e <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bd80:	2b00      	cmp	r3, #0
 800bd82:	d01c      	beq.n	800bdbe <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bd88:	6878      	ldr	r0, [r7, #4]
 800bd8a:	4798      	blx	r3
    }
    return;
 800bd8c:	e017      	b.n	800bdbe <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800bd8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bd92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bd96:	2b00      	cmp	r3, #0
 800bd98:	d012      	beq.n	800bdc0 <HAL_UART_IRQHandler+0x5bc>
 800bd9a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bd9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bda2:	2b00      	cmp	r3, #0
 800bda4:	d00c      	beq.n	800bdc0 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 800bda6:	6878      	ldr	r0, [r7, #4]
 800bda8:	f000 fe4f 	bl	800ca4a <UART_EndTransmit_IT>
    return;
 800bdac:	e008      	b.n	800bdc0 <HAL_UART_IRQHandler+0x5bc>
      return;
 800bdae:	bf00      	nop
 800bdb0:	e006      	b.n	800bdc0 <HAL_UART_IRQHandler+0x5bc>
    return;
 800bdb2:	bf00      	nop
 800bdb4:	e004      	b.n	800bdc0 <HAL_UART_IRQHandler+0x5bc>
      return;
 800bdb6:	bf00      	nop
 800bdb8:	e002      	b.n	800bdc0 <HAL_UART_IRQHandler+0x5bc>
      return;
 800bdba:	bf00      	nop
 800bdbc:	e000      	b.n	800bdc0 <HAL_UART_IRQHandler+0x5bc>
    return;
 800bdbe:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 800bdc0:	37e8      	adds	r7, #232	; 0xe8
 800bdc2:	46bd      	mov	sp, r7
 800bdc4:	bd80      	pop	{r7, pc}
 800bdc6:	bf00      	nop

0800bdc8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800bdc8:	b480      	push	{r7}
 800bdca:	b083      	sub	sp, #12
 800bdcc:	af00      	add	r7, sp, #0
 800bdce:	6078      	str	r0, [r7, #4]
 800bdd0:	460b      	mov	r3, r1
 800bdd2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800bdd4:	bf00      	nop
 800bdd6:	370c      	adds	r7, #12
 800bdd8:	46bd      	mov	sp, r7
 800bdda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdde:	4770      	bx	lr

0800bde0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800bde0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800bde4:	b08a      	sub	sp, #40	; 0x28
 800bde6:	af00      	add	r7, sp, #0
 800bde8:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800bdea:	2300      	movs	r3, #0
 800bdec:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800bdf0:	68fb      	ldr	r3, [r7, #12]
 800bdf2:	689a      	ldr	r2, [r3, #8]
 800bdf4:	68fb      	ldr	r3, [r7, #12]
 800bdf6:	691b      	ldr	r3, [r3, #16]
 800bdf8:	431a      	orrs	r2, r3
 800bdfa:	68fb      	ldr	r3, [r7, #12]
 800bdfc:	695b      	ldr	r3, [r3, #20]
 800bdfe:	431a      	orrs	r2, r3
 800be00:	68fb      	ldr	r3, [r7, #12]
 800be02:	69db      	ldr	r3, [r3, #28]
 800be04:	4313      	orrs	r3, r2
 800be06:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800be08:	68fb      	ldr	r3, [r7, #12]
 800be0a:	681b      	ldr	r3, [r3, #0]
 800be0c:	681a      	ldr	r2, [r3, #0]
 800be0e:	4ba5      	ldr	r3, [pc, #660]	; (800c0a4 <UART_SetConfig+0x2c4>)
 800be10:	4013      	ands	r3, r2
 800be12:	68fa      	ldr	r2, [r7, #12]
 800be14:	6812      	ldr	r2, [r2, #0]
 800be16:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800be18:	430b      	orrs	r3, r1
 800be1a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800be1c:	68fb      	ldr	r3, [r7, #12]
 800be1e:	681b      	ldr	r3, [r3, #0]
 800be20:	685b      	ldr	r3, [r3, #4]
 800be22:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800be26:	68fb      	ldr	r3, [r7, #12]
 800be28:	68da      	ldr	r2, [r3, #12]
 800be2a:	68fb      	ldr	r3, [r7, #12]
 800be2c:	681b      	ldr	r3, [r3, #0]
 800be2e:	430a      	orrs	r2, r1
 800be30:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800be32:	68fb      	ldr	r3, [r7, #12]
 800be34:	699b      	ldr	r3, [r3, #24]
 800be36:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800be38:	68fb      	ldr	r3, [r7, #12]
 800be3a:	681b      	ldr	r3, [r3, #0]
 800be3c:	4a9a      	ldr	r2, [pc, #616]	; (800c0a8 <UART_SetConfig+0x2c8>)
 800be3e:	4293      	cmp	r3, r2
 800be40:	d004      	beq.n	800be4c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800be42:	68fb      	ldr	r3, [r7, #12]
 800be44:	6a1b      	ldr	r3, [r3, #32]
 800be46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800be48:	4313      	orrs	r3, r2
 800be4a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800be4c:	68fb      	ldr	r3, [r7, #12]
 800be4e:	681b      	ldr	r3, [r3, #0]
 800be50:	689b      	ldr	r3, [r3, #8]
 800be52:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800be56:	68fb      	ldr	r3, [r7, #12]
 800be58:	681b      	ldr	r3, [r3, #0]
 800be5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800be5c:	430a      	orrs	r2, r1
 800be5e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800be60:	68fb      	ldr	r3, [r7, #12]
 800be62:	681b      	ldr	r3, [r3, #0]
 800be64:	4a91      	ldr	r2, [pc, #580]	; (800c0ac <UART_SetConfig+0x2cc>)
 800be66:	4293      	cmp	r3, r2
 800be68:	d126      	bne.n	800beb8 <UART_SetConfig+0xd8>
 800be6a:	4b91      	ldr	r3, [pc, #580]	; (800c0b0 <UART_SetConfig+0x2d0>)
 800be6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800be70:	f003 0303 	and.w	r3, r3, #3
 800be74:	2b03      	cmp	r3, #3
 800be76:	d81b      	bhi.n	800beb0 <UART_SetConfig+0xd0>
 800be78:	a201      	add	r2, pc, #4	; (adr r2, 800be80 <UART_SetConfig+0xa0>)
 800be7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be7e:	bf00      	nop
 800be80:	0800be91 	.word	0x0800be91
 800be84:	0800bea1 	.word	0x0800bea1
 800be88:	0800be99 	.word	0x0800be99
 800be8c:	0800bea9 	.word	0x0800bea9
 800be90:	2301      	movs	r3, #1
 800be92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800be96:	e0d6      	b.n	800c046 <UART_SetConfig+0x266>
 800be98:	2302      	movs	r3, #2
 800be9a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800be9e:	e0d2      	b.n	800c046 <UART_SetConfig+0x266>
 800bea0:	2304      	movs	r3, #4
 800bea2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800bea6:	e0ce      	b.n	800c046 <UART_SetConfig+0x266>
 800bea8:	2308      	movs	r3, #8
 800beaa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800beae:	e0ca      	b.n	800c046 <UART_SetConfig+0x266>
 800beb0:	2310      	movs	r3, #16
 800beb2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800beb6:	e0c6      	b.n	800c046 <UART_SetConfig+0x266>
 800beb8:	68fb      	ldr	r3, [r7, #12]
 800beba:	681b      	ldr	r3, [r3, #0]
 800bebc:	4a7d      	ldr	r2, [pc, #500]	; (800c0b4 <UART_SetConfig+0x2d4>)
 800bebe:	4293      	cmp	r3, r2
 800bec0:	d138      	bne.n	800bf34 <UART_SetConfig+0x154>
 800bec2:	4b7b      	ldr	r3, [pc, #492]	; (800c0b0 <UART_SetConfig+0x2d0>)
 800bec4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bec8:	f003 030c 	and.w	r3, r3, #12
 800becc:	2b0c      	cmp	r3, #12
 800bece:	d82d      	bhi.n	800bf2c <UART_SetConfig+0x14c>
 800bed0:	a201      	add	r2, pc, #4	; (adr r2, 800bed8 <UART_SetConfig+0xf8>)
 800bed2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bed6:	bf00      	nop
 800bed8:	0800bf0d 	.word	0x0800bf0d
 800bedc:	0800bf2d 	.word	0x0800bf2d
 800bee0:	0800bf2d 	.word	0x0800bf2d
 800bee4:	0800bf2d 	.word	0x0800bf2d
 800bee8:	0800bf1d 	.word	0x0800bf1d
 800beec:	0800bf2d 	.word	0x0800bf2d
 800bef0:	0800bf2d 	.word	0x0800bf2d
 800bef4:	0800bf2d 	.word	0x0800bf2d
 800bef8:	0800bf15 	.word	0x0800bf15
 800befc:	0800bf2d 	.word	0x0800bf2d
 800bf00:	0800bf2d 	.word	0x0800bf2d
 800bf04:	0800bf2d 	.word	0x0800bf2d
 800bf08:	0800bf25 	.word	0x0800bf25
 800bf0c:	2300      	movs	r3, #0
 800bf0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800bf12:	e098      	b.n	800c046 <UART_SetConfig+0x266>
 800bf14:	2302      	movs	r3, #2
 800bf16:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800bf1a:	e094      	b.n	800c046 <UART_SetConfig+0x266>
 800bf1c:	2304      	movs	r3, #4
 800bf1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800bf22:	e090      	b.n	800c046 <UART_SetConfig+0x266>
 800bf24:	2308      	movs	r3, #8
 800bf26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800bf2a:	e08c      	b.n	800c046 <UART_SetConfig+0x266>
 800bf2c:	2310      	movs	r3, #16
 800bf2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800bf32:	e088      	b.n	800c046 <UART_SetConfig+0x266>
 800bf34:	68fb      	ldr	r3, [r7, #12]
 800bf36:	681b      	ldr	r3, [r3, #0]
 800bf38:	4a5f      	ldr	r2, [pc, #380]	; (800c0b8 <UART_SetConfig+0x2d8>)
 800bf3a:	4293      	cmp	r3, r2
 800bf3c:	d125      	bne.n	800bf8a <UART_SetConfig+0x1aa>
 800bf3e:	4b5c      	ldr	r3, [pc, #368]	; (800c0b0 <UART_SetConfig+0x2d0>)
 800bf40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bf44:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800bf48:	2b30      	cmp	r3, #48	; 0x30
 800bf4a:	d016      	beq.n	800bf7a <UART_SetConfig+0x19a>
 800bf4c:	2b30      	cmp	r3, #48	; 0x30
 800bf4e:	d818      	bhi.n	800bf82 <UART_SetConfig+0x1a2>
 800bf50:	2b20      	cmp	r3, #32
 800bf52:	d00a      	beq.n	800bf6a <UART_SetConfig+0x18a>
 800bf54:	2b20      	cmp	r3, #32
 800bf56:	d814      	bhi.n	800bf82 <UART_SetConfig+0x1a2>
 800bf58:	2b00      	cmp	r3, #0
 800bf5a:	d002      	beq.n	800bf62 <UART_SetConfig+0x182>
 800bf5c:	2b10      	cmp	r3, #16
 800bf5e:	d008      	beq.n	800bf72 <UART_SetConfig+0x192>
 800bf60:	e00f      	b.n	800bf82 <UART_SetConfig+0x1a2>
 800bf62:	2300      	movs	r3, #0
 800bf64:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800bf68:	e06d      	b.n	800c046 <UART_SetConfig+0x266>
 800bf6a:	2302      	movs	r3, #2
 800bf6c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800bf70:	e069      	b.n	800c046 <UART_SetConfig+0x266>
 800bf72:	2304      	movs	r3, #4
 800bf74:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800bf78:	e065      	b.n	800c046 <UART_SetConfig+0x266>
 800bf7a:	2308      	movs	r3, #8
 800bf7c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800bf80:	e061      	b.n	800c046 <UART_SetConfig+0x266>
 800bf82:	2310      	movs	r3, #16
 800bf84:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800bf88:	e05d      	b.n	800c046 <UART_SetConfig+0x266>
 800bf8a:	68fb      	ldr	r3, [r7, #12]
 800bf8c:	681b      	ldr	r3, [r3, #0]
 800bf8e:	4a4b      	ldr	r2, [pc, #300]	; (800c0bc <UART_SetConfig+0x2dc>)
 800bf90:	4293      	cmp	r3, r2
 800bf92:	d125      	bne.n	800bfe0 <UART_SetConfig+0x200>
 800bf94:	4b46      	ldr	r3, [pc, #280]	; (800c0b0 <UART_SetConfig+0x2d0>)
 800bf96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bf9a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800bf9e:	2bc0      	cmp	r3, #192	; 0xc0
 800bfa0:	d016      	beq.n	800bfd0 <UART_SetConfig+0x1f0>
 800bfa2:	2bc0      	cmp	r3, #192	; 0xc0
 800bfa4:	d818      	bhi.n	800bfd8 <UART_SetConfig+0x1f8>
 800bfa6:	2b80      	cmp	r3, #128	; 0x80
 800bfa8:	d00a      	beq.n	800bfc0 <UART_SetConfig+0x1e0>
 800bfaa:	2b80      	cmp	r3, #128	; 0x80
 800bfac:	d814      	bhi.n	800bfd8 <UART_SetConfig+0x1f8>
 800bfae:	2b00      	cmp	r3, #0
 800bfb0:	d002      	beq.n	800bfb8 <UART_SetConfig+0x1d8>
 800bfb2:	2b40      	cmp	r3, #64	; 0x40
 800bfb4:	d008      	beq.n	800bfc8 <UART_SetConfig+0x1e8>
 800bfb6:	e00f      	b.n	800bfd8 <UART_SetConfig+0x1f8>
 800bfb8:	2300      	movs	r3, #0
 800bfba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800bfbe:	e042      	b.n	800c046 <UART_SetConfig+0x266>
 800bfc0:	2302      	movs	r3, #2
 800bfc2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800bfc6:	e03e      	b.n	800c046 <UART_SetConfig+0x266>
 800bfc8:	2304      	movs	r3, #4
 800bfca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800bfce:	e03a      	b.n	800c046 <UART_SetConfig+0x266>
 800bfd0:	2308      	movs	r3, #8
 800bfd2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800bfd6:	e036      	b.n	800c046 <UART_SetConfig+0x266>
 800bfd8:	2310      	movs	r3, #16
 800bfda:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800bfde:	e032      	b.n	800c046 <UART_SetConfig+0x266>
 800bfe0:	68fb      	ldr	r3, [r7, #12]
 800bfe2:	681b      	ldr	r3, [r3, #0]
 800bfe4:	4a30      	ldr	r2, [pc, #192]	; (800c0a8 <UART_SetConfig+0x2c8>)
 800bfe6:	4293      	cmp	r3, r2
 800bfe8:	d12a      	bne.n	800c040 <UART_SetConfig+0x260>
 800bfea:	4b31      	ldr	r3, [pc, #196]	; (800c0b0 <UART_SetConfig+0x2d0>)
 800bfec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bff0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800bff4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800bff8:	d01a      	beq.n	800c030 <UART_SetConfig+0x250>
 800bffa:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800bffe:	d81b      	bhi.n	800c038 <UART_SetConfig+0x258>
 800c000:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c004:	d00c      	beq.n	800c020 <UART_SetConfig+0x240>
 800c006:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c00a:	d815      	bhi.n	800c038 <UART_SetConfig+0x258>
 800c00c:	2b00      	cmp	r3, #0
 800c00e:	d003      	beq.n	800c018 <UART_SetConfig+0x238>
 800c010:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c014:	d008      	beq.n	800c028 <UART_SetConfig+0x248>
 800c016:	e00f      	b.n	800c038 <UART_SetConfig+0x258>
 800c018:	2300      	movs	r3, #0
 800c01a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800c01e:	e012      	b.n	800c046 <UART_SetConfig+0x266>
 800c020:	2302      	movs	r3, #2
 800c022:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800c026:	e00e      	b.n	800c046 <UART_SetConfig+0x266>
 800c028:	2304      	movs	r3, #4
 800c02a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800c02e:	e00a      	b.n	800c046 <UART_SetConfig+0x266>
 800c030:	2308      	movs	r3, #8
 800c032:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800c036:	e006      	b.n	800c046 <UART_SetConfig+0x266>
 800c038:	2310      	movs	r3, #16
 800c03a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800c03e:	e002      	b.n	800c046 <UART_SetConfig+0x266>
 800c040:	2310      	movs	r3, #16
 800c042:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800c046:	68fb      	ldr	r3, [r7, #12]
 800c048:	681b      	ldr	r3, [r3, #0]
 800c04a:	4a17      	ldr	r2, [pc, #92]	; (800c0a8 <UART_SetConfig+0x2c8>)
 800c04c:	4293      	cmp	r3, r2
 800c04e:	f040 808b 	bne.w	800c168 <UART_SetConfig+0x388>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800c052:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800c056:	2b08      	cmp	r3, #8
 800c058:	d834      	bhi.n	800c0c4 <UART_SetConfig+0x2e4>
 800c05a:	a201      	add	r2, pc, #4	; (adr r2, 800c060 <UART_SetConfig+0x280>)
 800c05c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c060:	0800c085 	.word	0x0800c085
 800c064:	0800c0c5 	.word	0x0800c0c5
 800c068:	0800c08d 	.word	0x0800c08d
 800c06c:	0800c0c5 	.word	0x0800c0c5
 800c070:	0800c093 	.word	0x0800c093
 800c074:	0800c0c5 	.word	0x0800c0c5
 800c078:	0800c0c5 	.word	0x0800c0c5
 800c07c:	0800c0c5 	.word	0x0800c0c5
 800c080:	0800c09b 	.word	0x0800c09b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c084:	f7fc fe0c 	bl	8008ca0 <HAL_RCC_GetPCLK1Freq>
 800c088:	61f8      	str	r0, [r7, #28]
        break;
 800c08a:	e021      	b.n	800c0d0 <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c08c:	4b0c      	ldr	r3, [pc, #48]	; (800c0c0 <UART_SetConfig+0x2e0>)
 800c08e:	61fb      	str	r3, [r7, #28]
        break;
 800c090:	e01e      	b.n	800c0d0 <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c092:	f7fc fd6d 	bl	8008b70 <HAL_RCC_GetSysClockFreq>
 800c096:	61f8      	str	r0, [r7, #28]
        break;
 800c098:	e01a      	b.n	800c0d0 <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c09a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c09e:	61fb      	str	r3, [r7, #28]
        break;
 800c0a0:	e016      	b.n	800c0d0 <UART_SetConfig+0x2f0>
 800c0a2:	bf00      	nop
 800c0a4:	efff69f3 	.word	0xefff69f3
 800c0a8:	40008000 	.word	0x40008000
 800c0ac:	40013800 	.word	0x40013800
 800c0b0:	40021000 	.word	0x40021000
 800c0b4:	40004400 	.word	0x40004400
 800c0b8:	40004800 	.word	0x40004800
 800c0bc:	40004c00 	.word	0x40004c00
 800c0c0:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800c0c4:	2300      	movs	r3, #0
 800c0c6:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800c0c8:	2301      	movs	r3, #1
 800c0ca:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800c0ce:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800c0d0:	69fb      	ldr	r3, [r7, #28]
 800c0d2:	2b00      	cmp	r3, #0
 800c0d4:	f000 80fa 	beq.w	800c2cc <UART_SetConfig+0x4ec>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800c0d8:	68fb      	ldr	r3, [r7, #12]
 800c0da:	685a      	ldr	r2, [r3, #4]
 800c0dc:	4613      	mov	r3, r2
 800c0de:	005b      	lsls	r3, r3, #1
 800c0e0:	4413      	add	r3, r2
 800c0e2:	69fa      	ldr	r2, [r7, #28]
 800c0e4:	429a      	cmp	r2, r3
 800c0e6:	d305      	bcc.n	800c0f4 <UART_SetConfig+0x314>
          (pclk > (4096U * huart->Init.BaudRate)))
 800c0e8:	68fb      	ldr	r3, [r7, #12]
 800c0ea:	685b      	ldr	r3, [r3, #4]
 800c0ec:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800c0ee:	69fa      	ldr	r2, [r7, #28]
 800c0f0:	429a      	cmp	r2, r3
 800c0f2:	d903      	bls.n	800c0fc <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 800c0f4:	2301      	movs	r3, #1
 800c0f6:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800c0fa:	e0e7      	b.n	800c2cc <UART_SetConfig+0x4ec>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800c0fc:	69fb      	ldr	r3, [r7, #28]
 800c0fe:	2200      	movs	r2, #0
 800c100:	461c      	mov	r4, r3
 800c102:	4615      	mov	r5, r2
 800c104:	f04f 0200 	mov.w	r2, #0
 800c108:	f04f 0300 	mov.w	r3, #0
 800c10c:	022b      	lsls	r3, r5, #8
 800c10e:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800c112:	0222      	lsls	r2, r4, #8
 800c114:	68f9      	ldr	r1, [r7, #12]
 800c116:	6849      	ldr	r1, [r1, #4]
 800c118:	0849      	lsrs	r1, r1, #1
 800c11a:	2000      	movs	r0, #0
 800c11c:	4688      	mov	r8, r1
 800c11e:	4681      	mov	r9, r0
 800c120:	eb12 0a08 	adds.w	sl, r2, r8
 800c124:	eb43 0b09 	adc.w	fp, r3, r9
 800c128:	68fb      	ldr	r3, [r7, #12]
 800c12a:	685b      	ldr	r3, [r3, #4]
 800c12c:	2200      	movs	r2, #0
 800c12e:	603b      	str	r3, [r7, #0]
 800c130:	607a      	str	r2, [r7, #4]
 800c132:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c136:	4650      	mov	r0, sl
 800c138:	4659      	mov	r1, fp
 800c13a:	f7f4 fd8d 	bl	8000c58 <__aeabi_uldivmod>
 800c13e:	4602      	mov	r2, r0
 800c140:	460b      	mov	r3, r1
 800c142:	4613      	mov	r3, r2
 800c144:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800c146:	69bb      	ldr	r3, [r7, #24]
 800c148:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c14c:	d308      	bcc.n	800c160 <UART_SetConfig+0x380>
 800c14e:	69bb      	ldr	r3, [r7, #24]
 800c150:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c154:	d204      	bcs.n	800c160 <UART_SetConfig+0x380>
        {
          huart->Instance->BRR = usartdiv;
 800c156:	68fb      	ldr	r3, [r7, #12]
 800c158:	681b      	ldr	r3, [r3, #0]
 800c15a:	69ba      	ldr	r2, [r7, #24]
 800c15c:	60da      	str	r2, [r3, #12]
 800c15e:	e0b5      	b.n	800c2cc <UART_SetConfig+0x4ec>
        }
        else
        {
          ret = HAL_ERROR;
 800c160:	2301      	movs	r3, #1
 800c162:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800c166:	e0b1      	b.n	800c2cc <UART_SetConfig+0x4ec>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c168:	68fb      	ldr	r3, [r7, #12]
 800c16a:	69db      	ldr	r3, [r3, #28]
 800c16c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c170:	d15d      	bne.n	800c22e <UART_SetConfig+0x44e>
  {
    switch (clocksource)
 800c172:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800c176:	2b08      	cmp	r3, #8
 800c178:	d827      	bhi.n	800c1ca <UART_SetConfig+0x3ea>
 800c17a:	a201      	add	r2, pc, #4	; (adr r2, 800c180 <UART_SetConfig+0x3a0>)
 800c17c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c180:	0800c1a5 	.word	0x0800c1a5
 800c184:	0800c1ad 	.word	0x0800c1ad
 800c188:	0800c1b5 	.word	0x0800c1b5
 800c18c:	0800c1cb 	.word	0x0800c1cb
 800c190:	0800c1bb 	.word	0x0800c1bb
 800c194:	0800c1cb 	.word	0x0800c1cb
 800c198:	0800c1cb 	.word	0x0800c1cb
 800c19c:	0800c1cb 	.word	0x0800c1cb
 800c1a0:	0800c1c3 	.word	0x0800c1c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c1a4:	f7fc fd7c 	bl	8008ca0 <HAL_RCC_GetPCLK1Freq>
 800c1a8:	61f8      	str	r0, [r7, #28]
        break;
 800c1aa:	e014      	b.n	800c1d6 <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c1ac:	f7fc fd8e 	bl	8008ccc <HAL_RCC_GetPCLK2Freq>
 800c1b0:	61f8      	str	r0, [r7, #28]
        break;
 800c1b2:	e010      	b.n	800c1d6 <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c1b4:	4b4c      	ldr	r3, [pc, #304]	; (800c2e8 <UART_SetConfig+0x508>)
 800c1b6:	61fb      	str	r3, [r7, #28]
        break;
 800c1b8:	e00d      	b.n	800c1d6 <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c1ba:	f7fc fcd9 	bl	8008b70 <HAL_RCC_GetSysClockFreq>
 800c1be:	61f8      	str	r0, [r7, #28]
        break;
 800c1c0:	e009      	b.n	800c1d6 <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c1c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c1c6:	61fb      	str	r3, [r7, #28]
        break;
 800c1c8:	e005      	b.n	800c1d6 <UART_SetConfig+0x3f6>
      default:
        pclk = 0U;
 800c1ca:	2300      	movs	r3, #0
 800c1cc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800c1ce:	2301      	movs	r3, #1
 800c1d0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800c1d4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800c1d6:	69fb      	ldr	r3, [r7, #28]
 800c1d8:	2b00      	cmp	r3, #0
 800c1da:	d077      	beq.n	800c2cc <UART_SetConfig+0x4ec>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800c1dc:	69fb      	ldr	r3, [r7, #28]
 800c1de:	005a      	lsls	r2, r3, #1
 800c1e0:	68fb      	ldr	r3, [r7, #12]
 800c1e2:	685b      	ldr	r3, [r3, #4]
 800c1e4:	085b      	lsrs	r3, r3, #1
 800c1e6:	441a      	add	r2, r3
 800c1e8:	68fb      	ldr	r3, [r7, #12]
 800c1ea:	685b      	ldr	r3, [r3, #4]
 800c1ec:	fbb2 f3f3 	udiv	r3, r2, r3
 800c1f0:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c1f2:	69bb      	ldr	r3, [r7, #24]
 800c1f4:	2b0f      	cmp	r3, #15
 800c1f6:	d916      	bls.n	800c226 <UART_SetConfig+0x446>
 800c1f8:	69bb      	ldr	r3, [r7, #24]
 800c1fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c1fe:	d212      	bcs.n	800c226 <UART_SetConfig+0x446>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c200:	69bb      	ldr	r3, [r7, #24]
 800c202:	b29b      	uxth	r3, r3
 800c204:	f023 030f 	bic.w	r3, r3, #15
 800c208:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c20a:	69bb      	ldr	r3, [r7, #24]
 800c20c:	085b      	lsrs	r3, r3, #1
 800c20e:	b29b      	uxth	r3, r3
 800c210:	f003 0307 	and.w	r3, r3, #7
 800c214:	b29a      	uxth	r2, r3
 800c216:	8afb      	ldrh	r3, [r7, #22]
 800c218:	4313      	orrs	r3, r2
 800c21a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800c21c:	68fb      	ldr	r3, [r7, #12]
 800c21e:	681b      	ldr	r3, [r3, #0]
 800c220:	8afa      	ldrh	r2, [r7, #22]
 800c222:	60da      	str	r2, [r3, #12]
 800c224:	e052      	b.n	800c2cc <UART_SetConfig+0x4ec>
      }
      else
      {
        ret = HAL_ERROR;
 800c226:	2301      	movs	r3, #1
 800c228:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800c22c:	e04e      	b.n	800c2cc <UART_SetConfig+0x4ec>
      }
    }
  }
  else
  {
    switch (clocksource)
 800c22e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800c232:	2b08      	cmp	r3, #8
 800c234:	d827      	bhi.n	800c286 <UART_SetConfig+0x4a6>
 800c236:	a201      	add	r2, pc, #4	; (adr r2, 800c23c <UART_SetConfig+0x45c>)
 800c238:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c23c:	0800c261 	.word	0x0800c261
 800c240:	0800c269 	.word	0x0800c269
 800c244:	0800c271 	.word	0x0800c271
 800c248:	0800c287 	.word	0x0800c287
 800c24c:	0800c277 	.word	0x0800c277
 800c250:	0800c287 	.word	0x0800c287
 800c254:	0800c287 	.word	0x0800c287
 800c258:	0800c287 	.word	0x0800c287
 800c25c:	0800c27f 	.word	0x0800c27f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c260:	f7fc fd1e 	bl	8008ca0 <HAL_RCC_GetPCLK1Freq>
 800c264:	61f8      	str	r0, [r7, #28]
        break;
 800c266:	e014      	b.n	800c292 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c268:	f7fc fd30 	bl	8008ccc <HAL_RCC_GetPCLK2Freq>
 800c26c:	61f8      	str	r0, [r7, #28]
        break;
 800c26e:	e010      	b.n	800c292 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c270:	4b1d      	ldr	r3, [pc, #116]	; (800c2e8 <UART_SetConfig+0x508>)
 800c272:	61fb      	str	r3, [r7, #28]
        break;
 800c274:	e00d      	b.n	800c292 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c276:	f7fc fc7b 	bl	8008b70 <HAL_RCC_GetSysClockFreq>
 800c27a:	61f8      	str	r0, [r7, #28]
        break;
 800c27c:	e009      	b.n	800c292 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c27e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c282:	61fb      	str	r3, [r7, #28]
        break;
 800c284:	e005      	b.n	800c292 <UART_SetConfig+0x4b2>
      default:
        pclk = 0U;
 800c286:	2300      	movs	r3, #0
 800c288:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800c28a:	2301      	movs	r3, #1
 800c28c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800c290:	bf00      	nop
    }

    if (pclk != 0U)
 800c292:	69fb      	ldr	r3, [r7, #28]
 800c294:	2b00      	cmp	r3, #0
 800c296:	d019      	beq.n	800c2cc <UART_SetConfig+0x4ec>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800c298:	68fb      	ldr	r3, [r7, #12]
 800c29a:	685b      	ldr	r3, [r3, #4]
 800c29c:	085a      	lsrs	r2, r3, #1
 800c29e:	69fb      	ldr	r3, [r7, #28]
 800c2a0:	441a      	add	r2, r3
 800c2a2:	68fb      	ldr	r3, [r7, #12]
 800c2a4:	685b      	ldr	r3, [r3, #4]
 800c2a6:	fbb2 f3f3 	udiv	r3, r2, r3
 800c2aa:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c2ac:	69bb      	ldr	r3, [r7, #24]
 800c2ae:	2b0f      	cmp	r3, #15
 800c2b0:	d909      	bls.n	800c2c6 <UART_SetConfig+0x4e6>
 800c2b2:	69bb      	ldr	r3, [r7, #24]
 800c2b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c2b8:	d205      	bcs.n	800c2c6 <UART_SetConfig+0x4e6>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800c2ba:	69bb      	ldr	r3, [r7, #24]
 800c2bc:	b29a      	uxth	r2, r3
 800c2be:	68fb      	ldr	r3, [r7, #12]
 800c2c0:	681b      	ldr	r3, [r3, #0]
 800c2c2:	60da      	str	r2, [r3, #12]
 800c2c4:	e002      	b.n	800c2cc <UART_SetConfig+0x4ec>
      }
      else
      {
        ret = HAL_ERROR;
 800c2c6:	2301      	movs	r3, #1
 800c2c8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800c2cc:	68fb      	ldr	r3, [r7, #12]
 800c2ce:	2200      	movs	r2, #0
 800c2d0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800c2d2:	68fb      	ldr	r3, [r7, #12]
 800c2d4:	2200      	movs	r2, #0
 800c2d6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800c2d8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 800c2dc:	4618      	mov	r0, r3
 800c2de:	3728      	adds	r7, #40	; 0x28
 800c2e0:	46bd      	mov	sp, r7
 800c2e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c2e6:	bf00      	nop
 800c2e8:	00f42400 	.word	0x00f42400

0800c2ec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800c2ec:	b480      	push	{r7}
 800c2ee:	b083      	sub	sp, #12
 800c2f0:	af00      	add	r7, sp, #0
 800c2f2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c2f8:	f003 0301 	and.w	r3, r3, #1
 800c2fc:	2b00      	cmp	r3, #0
 800c2fe:	d00a      	beq.n	800c316 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	681b      	ldr	r3, [r3, #0]
 800c304:	685b      	ldr	r3, [r3, #4]
 800c306:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	681b      	ldr	r3, [r3, #0]
 800c312:	430a      	orrs	r2, r1
 800c314:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c31a:	f003 0302 	and.w	r3, r3, #2
 800c31e:	2b00      	cmp	r3, #0
 800c320:	d00a      	beq.n	800c338 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	681b      	ldr	r3, [r3, #0]
 800c326:	685b      	ldr	r3, [r3, #4]
 800c328:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	681b      	ldr	r3, [r3, #0]
 800c334:	430a      	orrs	r2, r1
 800c336:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c33c:	f003 0304 	and.w	r3, r3, #4
 800c340:	2b00      	cmp	r3, #0
 800c342:	d00a      	beq.n	800c35a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	681b      	ldr	r3, [r3, #0]
 800c348:	685b      	ldr	r3, [r3, #4]
 800c34a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	681b      	ldr	r3, [r3, #0]
 800c356:	430a      	orrs	r2, r1
 800c358:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c35e:	f003 0308 	and.w	r3, r3, #8
 800c362:	2b00      	cmp	r3, #0
 800c364:	d00a      	beq.n	800c37c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	681b      	ldr	r3, [r3, #0]
 800c36a:	685b      	ldr	r3, [r3, #4]
 800c36c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	681b      	ldr	r3, [r3, #0]
 800c378:	430a      	orrs	r2, r1
 800c37a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c380:	f003 0310 	and.w	r3, r3, #16
 800c384:	2b00      	cmp	r3, #0
 800c386:	d00a      	beq.n	800c39e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	681b      	ldr	r3, [r3, #0]
 800c38c:	689b      	ldr	r3, [r3, #8]
 800c38e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	681b      	ldr	r3, [r3, #0]
 800c39a:	430a      	orrs	r2, r1
 800c39c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c3a2:	f003 0320 	and.w	r3, r3, #32
 800c3a6:	2b00      	cmp	r3, #0
 800c3a8:	d00a      	beq.n	800c3c0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	681b      	ldr	r3, [r3, #0]
 800c3ae:	689b      	ldr	r3, [r3, #8]
 800c3b0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	681b      	ldr	r3, [r3, #0]
 800c3bc:	430a      	orrs	r2, r1
 800c3be:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c3c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c3c8:	2b00      	cmp	r3, #0
 800c3ca:	d01a      	beq.n	800c402 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	681b      	ldr	r3, [r3, #0]
 800c3d0:	685b      	ldr	r3, [r3, #4]
 800c3d2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	681b      	ldr	r3, [r3, #0]
 800c3de:	430a      	orrs	r2, r1
 800c3e0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c3e6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c3ea:	d10a      	bne.n	800c402 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	681b      	ldr	r3, [r3, #0]
 800c3f0:	685b      	ldr	r3, [r3, #4]
 800c3f2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	681b      	ldr	r3, [r3, #0]
 800c3fe:	430a      	orrs	r2, r1
 800c400:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c406:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c40a:	2b00      	cmp	r3, #0
 800c40c:	d00a      	beq.n	800c424 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	681b      	ldr	r3, [r3, #0]
 800c412:	685b      	ldr	r3, [r3, #4]
 800c414:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	681b      	ldr	r3, [r3, #0]
 800c420:	430a      	orrs	r2, r1
 800c422:	605a      	str	r2, [r3, #4]
  }
}
 800c424:	bf00      	nop
 800c426:	370c      	adds	r7, #12
 800c428:	46bd      	mov	sp, r7
 800c42a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c42e:	4770      	bx	lr

0800c430 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800c430:	b580      	push	{r7, lr}
 800c432:	b086      	sub	sp, #24
 800c434:	af02      	add	r7, sp, #8
 800c436:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	2200      	movs	r2, #0
 800c43c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800c440:	f7f9 ff2e 	bl	80062a0 <HAL_GetTick>
 800c444:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	681b      	ldr	r3, [r3, #0]
 800c44a:	681b      	ldr	r3, [r3, #0]
 800c44c:	f003 0308 	and.w	r3, r3, #8
 800c450:	2b08      	cmp	r3, #8
 800c452:	d10e      	bne.n	800c472 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c454:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c458:	9300      	str	r3, [sp, #0]
 800c45a:	68fb      	ldr	r3, [r7, #12]
 800c45c:	2200      	movs	r2, #0
 800c45e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800c462:	6878      	ldr	r0, [r7, #4]
 800c464:	f000 f82d 	bl	800c4c2 <UART_WaitOnFlagUntilTimeout>
 800c468:	4603      	mov	r3, r0
 800c46a:	2b00      	cmp	r3, #0
 800c46c:	d001      	beq.n	800c472 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c46e:	2303      	movs	r3, #3
 800c470:	e023      	b.n	800c4ba <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	681b      	ldr	r3, [r3, #0]
 800c476:	681b      	ldr	r3, [r3, #0]
 800c478:	f003 0304 	and.w	r3, r3, #4
 800c47c:	2b04      	cmp	r3, #4
 800c47e:	d10e      	bne.n	800c49e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c480:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c484:	9300      	str	r3, [sp, #0]
 800c486:	68fb      	ldr	r3, [r7, #12]
 800c488:	2200      	movs	r2, #0
 800c48a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800c48e:	6878      	ldr	r0, [r7, #4]
 800c490:	f000 f817 	bl	800c4c2 <UART_WaitOnFlagUntilTimeout>
 800c494:	4603      	mov	r3, r0
 800c496:	2b00      	cmp	r3, #0
 800c498:	d001      	beq.n	800c49e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c49a:	2303      	movs	r3, #3
 800c49c:	e00d      	b.n	800c4ba <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	2220      	movs	r2, #32
 800c4a2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	2220      	movs	r2, #32
 800c4a8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	2200      	movs	r2, #0
 800c4ae:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	2200      	movs	r2, #0
 800c4b4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800c4b8:	2300      	movs	r3, #0
}
 800c4ba:	4618      	mov	r0, r3
 800c4bc:	3710      	adds	r7, #16
 800c4be:	46bd      	mov	sp, r7
 800c4c0:	bd80      	pop	{r7, pc}

0800c4c2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c4c2:	b580      	push	{r7, lr}
 800c4c4:	b09c      	sub	sp, #112	; 0x70
 800c4c6:	af00      	add	r7, sp, #0
 800c4c8:	60f8      	str	r0, [r7, #12]
 800c4ca:	60b9      	str	r1, [r7, #8]
 800c4cc:	603b      	str	r3, [r7, #0]
 800c4ce:	4613      	mov	r3, r2
 800c4d0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c4d2:	e0a5      	b.n	800c620 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c4d4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c4d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c4da:	f000 80a1 	beq.w	800c620 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c4de:	f7f9 fedf 	bl	80062a0 <HAL_GetTick>
 800c4e2:	4602      	mov	r2, r0
 800c4e4:	683b      	ldr	r3, [r7, #0]
 800c4e6:	1ad3      	subs	r3, r2, r3
 800c4e8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800c4ea:	429a      	cmp	r2, r3
 800c4ec:	d302      	bcc.n	800c4f4 <UART_WaitOnFlagUntilTimeout+0x32>
 800c4ee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c4f0:	2b00      	cmp	r3, #0
 800c4f2:	d13e      	bne.n	800c572 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800c4f4:	68fb      	ldr	r3, [r7, #12]
 800c4f6:	681b      	ldr	r3, [r3, #0]
 800c4f8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c4fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c4fc:	e853 3f00 	ldrex	r3, [r3]
 800c500:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800c502:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c504:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800c508:	667b      	str	r3, [r7, #100]	; 0x64
 800c50a:	68fb      	ldr	r3, [r7, #12]
 800c50c:	681b      	ldr	r3, [r3, #0]
 800c50e:	461a      	mov	r2, r3
 800c510:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c512:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c514:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c516:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800c518:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800c51a:	e841 2300 	strex	r3, r2, [r1]
 800c51e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800c520:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c522:	2b00      	cmp	r3, #0
 800c524:	d1e6      	bne.n	800c4f4 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c526:	68fb      	ldr	r3, [r7, #12]
 800c528:	681b      	ldr	r3, [r3, #0]
 800c52a:	3308      	adds	r3, #8
 800c52c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c52e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c530:	e853 3f00 	ldrex	r3, [r3]
 800c534:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c536:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c538:	f023 0301 	bic.w	r3, r3, #1
 800c53c:	663b      	str	r3, [r7, #96]	; 0x60
 800c53e:	68fb      	ldr	r3, [r7, #12]
 800c540:	681b      	ldr	r3, [r3, #0]
 800c542:	3308      	adds	r3, #8
 800c544:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c546:	64ba      	str	r2, [r7, #72]	; 0x48
 800c548:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c54a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c54c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c54e:	e841 2300 	strex	r3, r2, [r1]
 800c552:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800c554:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c556:	2b00      	cmp	r3, #0
 800c558:	d1e5      	bne.n	800c526 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800c55a:	68fb      	ldr	r3, [r7, #12]
 800c55c:	2220      	movs	r2, #32
 800c55e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800c560:	68fb      	ldr	r3, [r7, #12]
 800c562:	2220      	movs	r2, #32
 800c564:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800c566:	68fb      	ldr	r3, [r7, #12]
 800c568:	2200      	movs	r2, #0
 800c56a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800c56e:	2303      	movs	r3, #3
 800c570:	e067      	b.n	800c642 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800c572:	68fb      	ldr	r3, [r7, #12]
 800c574:	681b      	ldr	r3, [r3, #0]
 800c576:	681b      	ldr	r3, [r3, #0]
 800c578:	f003 0304 	and.w	r3, r3, #4
 800c57c:	2b00      	cmp	r3, #0
 800c57e:	d04f      	beq.n	800c620 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c580:	68fb      	ldr	r3, [r7, #12]
 800c582:	681b      	ldr	r3, [r3, #0]
 800c584:	69db      	ldr	r3, [r3, #28]
 800c586:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c58a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c58e:	d147      	bne.n	800c620 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c590:	68fb      	ldr	r3, [r7, #12]
 800c592:	681b      	ldr	r3, [r3, #0]
 800c594:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c598:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800c59a:	68fb      	ldr	r3, [r7, #12]
 800c59c:	681b      	ldr	r3, [r3, #0]
 800c59e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5a2:	e853 3f00 	ldrex	r3, [r3]
 800c5a6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c5a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5aa:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800c5ae:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c5b0:	68fb      	ldr	r3, [r7, #12]
 800c5b2:	681b      	ldr	r3, [r3, #0]
 800c5b4:	461a      	mov	r2, r3
 800c5b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c5b8:	637b      	str	r3, [r7, #52]	; 0x34
 800c5ba:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c5bc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c5be:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c5c0:	e841 2300 	strex	r3, r2, [r1]
 800c5c4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800c5c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5c8:	2b00      	cmp	r3, #0
 800c5ca:	d1e6      	bne.n	800c59a <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c5cc:	68fb      	ldr	r3, [r7, #12]
 800c5ce:	681b      	ldr	r3, [r3, #0]
 800c5d0:	3308      	adds	r3, #8
 800c5d2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5d4:	697b      	ldr	r3, [r7, #20]
 800c5d6:	e853 3f00 	ldrex	r3, [r3]
 800c5da:	613b      	str	r3, [r7, #16]
   return(result);
 800c5dc:	693b      	ldr	r3, [r7, #16]
 800c5de:	f023 0301 	bic.w	r3, r3, #1
 800c5e2:	66bb      	str	r3, [r7, #104]	; 0x68
 800c5e4:	68fb      	ldr	r3, [r7, #12]
 800c5e6:	681b      	ldr	r3, [r3, #0]
 800c5e8:	3308      	adds	r3, #8
 800c5ea:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800c5ec:	623a      	str	r2, [r7, #32]
 800c5ee:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c5f0:	69f9      	ldr	r1, [r7, #28]
 800c5f2:	6a3a      	ldr	r2, [r7, #32]
 800c5f4:	e841 2300 	strex	r3, r2, [r1]
 800c5f8:	61bb      	str	r3, [r7, #24]
   return(result);
 800c5fa:	69bb      	ldr	r3, [r7, #24]
 800c5fc:	2b00      	cmp	r3, #0
 800c5fe:	d1e5      	bne.n	800c5cc <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800c600:	68fb      	ldr	r3, [r7, #12]
 800c602:	2220      	movs	r2, #32
 800c604:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800c606:	68fb      	ldr	r3, [r7, #12]
 800c608:	2220      	movs	r2, #32
 800c60a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c60c:	68fb      	ldr	r3, [r7, #12]
 800c60e:	2220      	movs	r2, #32
 800c610:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c614:	68fb      	ldr	r3, [r7, #12]
 800c616:	2200      	movs	r2, #0
 800c618:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800c61c:	2303      	movs	r3, #3
 800c61e:	e010      	b.n	800c642 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c620:	68fb      	ldr	r3, [r7, #12]
 800c622:	681b      	ldr	r3, [r3, #0]
 800c624:	69da      	ldr	r2, [r3, #28]
 800c626:	68bb      	ldr	r3, [r7, #8]
 800c628:	4013      	ands	r3, r2
 800c62a:	68ba      	ldr	r2, [r7, #8]
 800c62c:	429a      	cmp	r2, r3
 800c62e:	bf0c      	ite	eq
 800c630:	2301      	moveq	r3, #1
 800c632:	2300      	movne	r3, #0
 800c634:	b2db      	uxtb	r3, r3
 800c636:	461a      	mov	r2, r3
 800c638:	79fb      	ldrb	r3, [r7, #7]
 800c63a:	429a      	cmp	r2, r3
 800c63c:	f43f af4a 	beq.w	800c4d4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c640:	2300      	movs	r3, #0
}
 800c642:	4618      	mov	r0, r3
 800c644:	3770      	adds	r7, #112	; 0x70
 800c646:	46bd      	mov	sp, r7
 800c648:	bd80      	pop	{r7, pc}
	...

0800c64c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c64c:	b480      	push	{r7}
 800c64e:	b097      	sub	sp, #92	; 0x5c
 800c650:	af00      	add	r7, sp, #0
 800c652:	60f8      	str	r0, [r7, #12]
 800c654:	60b9      	str	r1, [r7, #8]
 800c656:	4613      	mov	r3, r2
 800c658:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800c65a:	68fb      	ldr	r3, [r7, #12]
 800c65c:	68ba      	ldr	r2, [r7, #8]
 800c65e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 800c660:	68fb      	ldr	r3, [r7, #12]
 800c662:	88fa      	ldrh	r2, [r7, #6]
 800c664:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 800c668:	68fb      	ldr	r3, [r7, #12]
 800c66a:	88fa      	ldrh	r2, [r7, #6]
 800c66c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 800c670:	68fb      	ldr	r3, [r7, #12]
 800c672:	2200      	movs	r2, #0
 800c674:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800c676:	68fb      	ldr	r3, [r7, #12]
 800c678:	689b      	ldr	r3, [r3, #8]
 800c67a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c67e:	d10e      	bne.n	800c69e <UART_Start_Receive_IT+0x52>
 800c680:	68fb      	ldr	r3, [r7, #12]
 800c682:	691b      	ldr	r3, [r3, #16]
 800c684:	2b00      	cmp	r3, #0
 800c686:	d105      	bne.n	800c694 <UART_Start_Receive_IT+0x48>
 800c688:	68fb      	ldr	r3, [r7, #12]
 800c68a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800c68e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800c692:	e02d      	b.n	800c6f0 <UART_Start_Receive_IT+0xa4>
 800c694:	68fb      	ldr	r3, [r7, #12]
 800c696:	22ff      	movs	r2, #255	; 0xff
 800c698:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800c69c:	e028      	b.n	800c6f0 <UART_Start_Receive_IT+0xa4>
 800c69e:	68fb      	ldr	r3, [r7, #12]
 800c6a0:	689b      	ldr	r3, [r3, #8]
 800c6a2:	2b00      	cmp	r3, #0
 800c6a4:	d10d      	bne.n	800c6c2 <UART_Start_Receive_IT+0x76>
 800c6a6:	68fb      	ldr	r3, [r7, #12]
 800c6a8:	691b      	ldr	r3, [r3, #16]
 800c6aa:	2b00      	cmp	r3, #0
 800c6ac:	d104      	bne.n	800c6b8 <UART_Start_Receive_IT+0x6c>
 800c6ae:	68fb      	ldr	r3, [r7, #12]
 800c6b0:	22ff      	movs	r2, #255	; 0xff
 800c6b2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800c6b6:	e01b      	b.n	800c6f0 <UART_Start_Receive_IT+0xa4>
 800c6b8:	68fb      	ldr	r3, [r7, #12]
 800c6ba:	227f      	movs	r2, #127	; 0x7f
 800c6bc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800c6c0:	e016      	b.n	800c6f0 <UART_Start_Receive_IT+0xa4>
 800c6c2:	68fb      	ldr	r3, [r7, #12]
 800c6c4:	689b      	ldr	r3, [r3, #8]
 800c6c6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c6ca:	d10d      	bne.n	800c6e8 <UART_Start_Receive_IT+0x9c>
 800c6cc:	68fb      	ldr	r3, [r7, #12]
 800c6ce:	691b      	ldr	r3, [r3, #16]
 800c6d0:	2b00      	cmp	r3, #0
 800c6d2:	d104      	bne.n	800c6de <UART_Start_Receive_IT+0x92>
 800c6d4:	68fb      	ldr	r3, [r7, #12]
 800c6d6:	227f      	movs	r2, #127	; 0x7f
 800c6d8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800c6dc:	e008      	b.n	800c6f0 <UART_Start_Receive_IT+0xa4>
 800c6de:	68fb      	ldr	r3, [r7, #12]
 800c6e0:	223f      	movs	r2, #63	; 0x3f
 800c6e2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800c6e6:	e003      	b.n	800c6f0 <UART_Start_Receive_IT+0xa4>
 800c6e8:	68fb      	ldr	r3, [r7, #12]
 800c6ea:	2200      	movs	r2, #0
 800c6ec:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c6f0:	68fb      	ldr	r3, [r7, #12]
 800c6f2:	2200      	movs	r2, #0
 800c6f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800c6f8:	68fb      	ldr	r3, [r7, #12]
 800c6fa:	2222      	movs	r2, #34	; 0x22
 800c6fc:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c6fe:	68fb      	ldr	r3, [r7, #12]
 800c700:	681b      	ldr	r3, [r3, #0]
 800c702:	3308      	adds	r3, #8
 800c704:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c706:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c708:	e853 3f00 	ldrex	r3, [r3]
 800c70c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c70e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c710:	f043 0301 	orr.w	r3, r3, #1
 800c714:	657b      	str	r3, [r7, #84]	; 0x54
 800c716:	68fb      	ldr	r3, [r7, #12]
 800c718:	681b      	ldr	r3, [r3, #0]
 800c71a:	3308      	adds	r3, #8
 800c71c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c71e:	64ba      	str	r2, [r7, #72]	; 0x48
 800c720:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c722:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c724:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c726:	e841 2300 	strex	r3, r2, [r1]
 800c72a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800c72c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c72e:	2b00      	cmp	r3, #0
 800c730:	d1e5      	bne.n	800c6fe <UART_Start_Receive_IT+0xb2>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c732:	68fb      	ldr	r3, [r7, #12]
 800c734:	689b      	ldr	r3, [r3, #8]
 800c736:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c73a:	d107      	bne.n	800c74c <UART_Start_Receive_IT+0x100>
 800c73c:	68fb      	ldr	r3, [r7, #12]
 800c73e:	691b      	ldr	r3, [r3, #16]
 800c740:	2b00      	cmp	r3, #0
 800c742:	d103      	bne.n	800c74c <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800c744:	68fb      	ldr	r3, [r7, #12]
 800c746:	4a24      	ldr	r2, [pc, #144]	; (800c7d8 <UART_Start_Receive_IT+0x18c>)
 800c748:	665a      	str	r2, [r3, #100]	; 0x64
 800c74a:	e002      	b.n	800c752 <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800c74c:	68fb      	ldr	r3, [r7, #12]
 800c74e:	4a23      	ldr	r2, [pc, #140]	; (800c7dc <UART_Start_Receive_IT+0x190>)
 800c750:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 800c752:	68fb      	ldr	r3, [r7, #12]
 800c754:	2200      	movs	r2, #0
 800c756:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800c75a:	68fb      	ldr	r3, [r7, #12]
 800c75c:	691b      	ldr	r3, [r3, #16]
 800c75e:	2b00      	cmp	r3, #0
 800c760:	d019      	beq.n	800c796 <UART_Start_Receive_IT+0x14a>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800c762:	68fb      	ldr	r3, [r7, #12]
 800c764:	681b      	ldr	r3, [r3, #0]
 800c766:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c768:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c76a:	e853 3f00 	ldrex	r3, [r3]
 800c76e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c772:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800c776:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c778:	68fb      	ldr	r3, [r7, #12]
 800c77a:	681b      	ldr	r3, [r3, #0]
 800c77c:	461a      	mov	r2, r3
 800c77e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c780:	637b      	str	r3, [r7, #52]	; 0x34
 800c782:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c784:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c786:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c788:	e841 2300 	strex	r3, r2, [r1]
 800c78c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800c78e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c790:	2b00      	cmp	r3, #0
 800c792:	d1e6      	bne.n	800c762 <UART_Start_Receive_IT+0x116>
 800c794:	e018      	b.n	800c7c8 <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800c796:	68fb      	ldr	r3, [r7, #12]
 800c798:	681b      	ldr	r3, [r3, #0]
 800c79a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c79c:	697b      	ldr	r3, [r7, #20]
 800c79e:	e853 3f00 	ldrex	r3, [r3]
 800c7a2:	613b      	str	r3, [r7, #16]
   return(result);
 800c7a4:	693b      	ldr	r3, [r7, #16]
 800c7a6:	f043 0320 	orr.w	r3, r3, #32
 800c7aa:	653b      	str	r3, [r7, #80]	; 0x50
 800c7ac:	68fb      	ldr	r3, [r7, #12]
 800c7ae:	681b      	ldr	r3, [r3, #0]
 800c7b0:	461a      	mov	r2, r3
 800c7b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c7b4:	623b      	str	r3, [r7, #32]
 800c7b6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c7b8:	69f9      	ldr	r1, [r7, #28]
 800c7ba:	6a3a      	ldr	r2, [r7, #32]
 800c7bc:	e841 2300 	strex	r3, r2, [r1]
 800c7c0:	61bb      	str	r3, [r7, #24]
   return(result);
 800c7c2:	69bb      	ldr	r3, [r7, #24]
 800c7c4:	2b00      	cmp	r3, #0
 800c7c6:	d1e6      	bne.n	800c796 <UART_Start_Receive_IT+0x14a>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 800c7c8:	2300      	movs	r3, #0
}
 800c7ca:	4618      	mov	r0, r3
 800c7cc:	375c      	adds	r7, #92	; 0x5c
 800c7ce:	46bd      	mov	sp, r7
 800c7d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7d4:	4770      	bx	lr
 800c7d6:	bf00      	nop
 800c7d8:	0800cbff 	.word	0x0800cbff
 800c7dc:	0800ca9f 	.word	0x0800ca9f

0800c7e0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c7e0:	b480      	push	{r7}
 800c7e2:	b095      	sub	sp, #84	; 0x54
 800c7e4:	af00      	add	r7, sp, #0
 800c7e6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	681b      	ldr	r3, [r3, #0]
 800c7ec:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c7ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c7f0:	e853 3f00 	ldrex	r3, [r3]
 800c7f4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800c7f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7f8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c7fc:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	681b      	ldr	r3, [r3, #0]
 800c802:	461a      	mov	r2, r3
 800c804:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c806:	643b      	str	r3, [r7, #64]	; 0x40
 800c808:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c80a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c80c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c80e:	e841 2300 	strex	r3, r2, [r1]
 800c812:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c814:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c816:	2b00      	cmp	r3, #0
 800c818:	d1e6      	bne.n	800c7e8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	681b      	ldr	r3, [r3, #0]
 800c81e:	3308      	adds	r3, #8
 800c820:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c822:	6a3b      	ldr	r3, [r7, #32]
 800c824:	e853 3f00 	ldrex	r3, [r3]
 800c828:	61fb      	str	r3, [r7, #28]
   return(result);
 800c82a:	69fb      	ldr	r3, [r7, #28]
 800c82c:	f023 0301 	bic.w	r3, r3, #1
 800c830:	64bb      	str	r3, [r7, #72]	; 0x48
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	681b      	ldr	r3, [r3, #0]
 800c836:	3308      	adds	r3, #8
 800c838:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c83a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c83c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c83e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c840:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c842:	e841 2300 	strex	r3, r2, [r1]
 800c846:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c84a:	2b00      	cmp	r3, #0
 800c84c:	d1e5      	bne.n	800c81a <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c852:	2b01      	cmp	r3, #1
 800c854:	d118      	bne.n	800c888 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	681b      	ldr	r3, [r3, #0]
 800c85a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c85c:	68fb      	ldr	r3, [r7, #12]
 800c85e:	e853 3f00 	ldrex	r3, [r3]
 800c862:	60bb      	str	r3, [r7, #8]
   return(result);
 800c864:	68bb      	ldr	r3, [r7, #8]
 800c866:	f023 0310 	bic.w	r3, r3, #16
 800c86a:	647b      	str	r3, [r7, #68]	; 0x44
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	681b      	ldr	r3, [r3, #0]
 800c870:	461a      	mov	r2, r3
 800c872:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c874:	61bb      	str	r3, [r7, #24]
 800c876:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c878:	6979      	ldr	r1, [r7, #20]
 800c87a:	69ba      	ldr	r2, [r7, #24]
 800c87c:	e841 2300 	strex	r3, r2, [r1]
 800c880:	613b      	str	r3, [r7, #16]
   return(result);
 800c882:	693b      	ldr	r3, [r7, #16]
 800c884:	2b00      	cmp	r3, #0
 800c886:	d1e6      	bne.n	800c856 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	2220      	movs	r2, #32
 800c88c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	2200      	movs	r2, #0
 800c892:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	2200      	movs	r2, #0
 800c898:	665a      	str	r2, [r3, #100]	; 0x64
}
 800c89a:	bf00      	nop
 800c89c:	3754      	adds	r7, #84	; 0x54
 800c89e:	46bd      	mov	sp, r7
 800c8a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8a4:	4770      	bx	lr

0800c8a6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c8a6:	b580      	push	{r7, lr}
 800c8a8:	b084      	sub	sp, #16
 800c8aa:	af00      	add	r7, sp, #0
 800c8ac:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c8b2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800c8b4:	68fb      	ldr	r3, [r7, #12]
 800c8b6:	2200      	movs	r2, #0
 800c8b8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800c8bc:	68fb      	ldr	r3, [r7, #12]
 800c8be:	2200      	movs	r2, #0
 800c8c0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c8c4:	68f8      	ldr	r0, [r7, #12]
 800c8c6:	f7f5 f833 	bl	8001930 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c8ca:	bf00      	nop
 800c8cc:	3710      	adds	r7, #16
 800c8ce:	46bd      	mov	sp, r7
 800c8d0:	bd80      	pop	{r7, pc}

0800c8d2 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800c8d2:	b480      	push	{r7}
 800c8d4:	b08f      	sub	sp, #60	; 0x3c
 800c8d6:	af00      	add	r7, sp, #0
 800c8d8:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c8de:	2b21      	cmp	r3, #33	; 0x21
 800c8e0:	d14d      	bne.n	800c97e <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800c8e8:	b29b      	uxth	r3, r3
 800c8ea:	2b00      	cmp	r3, #0
 800c8ec:	d132      	bne.n	800c954 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	681b      	ldr	r3, [r3, #0]
 800c8f2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c8f4:	6a3b      	ldr	r3, [r7, #32]
 800c8f6:	e853 3f00 	ldrex	r3, [r3]
 800c8fa:	61fb      	str	r3, [r7, #28]
   return(result);
 800c8fc:	69fb      	ldr	r3, [r7, #28]
 800c8fe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c902:	637b      	str	r3, [r7, #52]	; 0x34
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	681b      	ldr	r3, [r3, #0]
 800c908:	461a      	mov	r2, r3
 800c90a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c90c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c90e:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c910:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c912:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c914:	e841 2300 	strex	r3, r2, [r1]
 800c918:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c91a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c91c:	2b00      	cmp	r3, #0
 800c91e:	d1e6      	bne.n	800c8ee <UART_TxISR_8BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	681b      	ldr	r3, [r3, #0]
 800c924:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c926:	68fb      	ldr	r3, [r7, #12]
 800c928:	e853 3f00 	ldrex	r3, [r3]
 800c92c:	60bb      	str	r3, [r7, #8]
   return(result);
 800c92e:	68bb      	ldr	r3, [r7, #8]
 800c930:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c934:	633b      	str	r3, [r7, #48]	; 0x30
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	681b      	ldr	r3, [r3, #0]
 800c93a:	461a      	mov	r2, r3
 800c93c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c93e:	61bb      	str	r3, [r7, #24]
 800c940:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c942:	6979      	ldr	r1, [r7, #20]
 800c944:	69ba      	ldr	r2, [r7, #24]
 800c946:	e841 2300 	strex	r3, r2, [r1]
 800c94a:	613b      	str	r3, [r7, #16]
   return(result);
 800c94c:	693b      	ldr	r3, [r7, #16]
 800c94e:	2b00      	cmp	r3, #0
 800c950:	d1e6      	bne.n	800c920 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800c952:	e014      	b.n	800c97e <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c958:	781a      	ldrb	r2, [r3, #0]
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	681b      	ldr	r3, [r3, #0]
 800c95e:	b292      	uxth	r2, r2
 800c960:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c966:	1c5a      	adds	r2, r3, #1
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800c972:	b29b      	uxth	r3, r3
 800c974:	3b01      	subs	r3, #1
 800c976:	b29a      	uxth	r2, r3
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800c97e:	bf00      	nop
 800c980:	373c      	adds	r7, #60	; 0x3c
 800c982:	46bd      	mov	sp, r7
 800c984:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c988:	4770      	bx	lr

0800c98a <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800c98a:	b480      	push	{r7}
 800c98c:	b091      	sub	sp, #68	; 0x44
 800c98e:	af00      	add	r7, sp, #0
 800c990:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c996:	2b21      	cmp	r3, #33	; 0x21
 800c998:	d151      	bne.n	800ca3e <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800c9a0:	b29b      	uxth	r3, r3
 800c9a2:	2b00      	cmp	r3, #0
 800c9a4:	d132      	bne.n	800ca0c <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	681b      	ldr	r3, [r3, #0]
 800c9aa:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c9ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9ae:	e853 3f00 	ldrex	r3, [r3]
 800c9b2:	623b      	str	r3, [r7, #32]
   return(result);
 800c9b4:	6a3b      	ldr	r3, [r7, #32]
 800c9b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c9ba:	63bb      	str	r3, [r7, #56]	; 0x38
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	681b      	ldr	r3, [r3, #0]
 800c9c0:	461a      	mov	r2, r3
 800c9c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9c4:	633b      	str	r3, [r7, #48]	; 0x30
 800c9c6:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c9c8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c9ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c9cc:	e841 2300 	strex	r3, r2, [r1]
 800c9d0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c9d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9d4:	2b00      	cmp	r3, #0
 800c9d6:	d1e6      	bne.n	800c9a6 <UART_TxISR_16BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	681b      	ldr	r3, [r3, #0]
 800c9dc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c9de:	693b      	ldr	r3, [r7, #16]
 800c9e0:	e853 3f00 	ldrex	r3, [r3]
 800c9e4:	60fb      	str	r3, [r7, #12]
   return(result);
 800c9e6:	68fb      	ldr	r3, [r7, #12]
 800c9e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c9ec:	637b      	str	r3, [r7, #52]	; 0x34
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	681b      	ldr	r3, [r3, #0]
 800c9f2:	461a      	mov	r2, r3
 800c9f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c9f6:	61fb      	str	r3, [r7, #28]
 800c9f8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c9fa:	69b9      	ldr	r1, [r7, #24]
 800c9fc:	69fa      	ldr	r2, [r7, #28]
 800c9fe:	e841 2300 	strex	r3, r2, [r1]
 800ca02:	617b      	str	r3, [r7, #20]
   return(result);
 800ca04:	697b      	ldr	r3, [r7, #20]
 800ca06:	2b00      	cmp	r3, #0
 800ca08:	d1e6      	bne.n	800c9d8 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800ca0a:	e018      	b.n	800ca3e <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ca10:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800ca12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ca14:	881a      	ldrh	r2, [r3, #0]
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	681b      	ldr	r3, [r3, #0]
 800ca1a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ca1e:	b292      	uxth	r2, r2
 800ca20:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ca26:	1c9a      	adds	r2, r3, #2
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800ca32:	b29b      	uxth	r3, r3
 800ca34:	3b01      	subs	r3, #1
 800ca36:	b29a      	uxth	r2, r3
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800ca3e:	bf00      	nop
 800ca40:	3744      	adds	r7, #68	; 0x44
 800ca42:	46bd      	mov	sp, r7
 800ca44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca48:	4770      	bx	lr

0800ca4a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800ca4a:	b580      	push	{r7, lr}
 800ca4c:	b088      	sub	sp, #32
 800ca4e:	af00      	add	r7, sp, #0
 800ca50:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	681b      	ldr	r3, [r3, #0]
 800ca56:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca58:	68fb      	ldr	r3, [r7, #12]
 800ca5a:	e853 3f00 	ldrex	r3, [r3]
 800ca5e:	60bb      	str	r3, [r7, #8]
   return(result);
 800ca60:	68bb      	ldr	r3, [r7, #8]
 800ca62:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ca66:	61fb      	str	r3, [r7, #28]
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	681b      	ldr	r3, [r3, #0]
 800ca6c:	461a      	mov	r2, r3
 800ca6e:	69fb      	ldr	r3, [r7, #28]
 800ca70:	61bb      	str	r3, [r7, #24]
 800ca72:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca74:	6979      	ldr	r1, [r7, #20]
 800ca76:	69ba      	ldr	r2, [r7, #24]
 800ca78:	e841 2300 	strex	r3, r2, [r1]
 800ca7c:	613b      	str	r3, [r7, #16]
   return(result);
 800ca7e:	693b      	ldr	r3, [r7, #16]
 800ca80:	2b00      	cmp	r3, #0
 800ca82:	d1e6      	bne.n	800ca52 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	2220      	movs	r2, #32
 800ca88:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	2200      	movs	r2, #0
 800ca8e:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800ca90:	6878      	ldr	r0, [r7, #4]
 800ca92:	f7f4 ffff 	bl	8001a94 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ca96:	bf00      	nop
 800ca98:	3720      	adds	r7, #32
 800ca9a:	46bd      	mov	sp, r7
 800ca9c:	bd80      	pop	{r7, pc}

0800ca9e <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800ca9e:	b580      	push	{r7, lr}
 800caa0:	b096      	sub	sp, #88	; 0x58
 800caa2:	af00      	add	r7, sp, #0
 800caa4:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800caac:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cab4:	2b22      	cmp	r3, #34	; 0x22
 800cab6:	f040 8094 	bne.w	800cbe2 <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	681b      	ldr	r3, [r3, #0]
 800cabe:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800cac0:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800cac4:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800cac8:	b2d9      	uxtb	r1, r3
 800caca:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800cace:	b2da      	uxtb	r2, r3
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cad4:	400a      	ands	r2, r1
 800cad6:	b2d2      	uxtb	r2, r2
 800cad8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cade:	1c5a      	adds	r2, r3, #1
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800caea:	b29b      	uxth	r3, r3
 800caec:	3b01      	subs	r3, #1
 800caee:	b29a      	uxth	r2, r3
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800cafc:	b29b      	uxth	r3, r3
 800cafe:	2b00      	cmp	r3, #0
 800cb00:	d179      	bne.n	800cbf6 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	681b      	ldr	r3, [r3, #0]
 800cb06:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb0a:	e853 3f00 	ldrex	r3, [r3]
 800cb0e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800cb10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb12:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800cb16:	653b      	str	r3, [r7, #80]	; 0x50
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	681b      	ldr	r3, [r3, #0]
 800cb1c:	461a      	mov	r2, r3
 800cb1e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cb20:	647b      	str	r3, [r7, #68]	; 0x44
 800cb22:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb24:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800cb26:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800cb28:	e841 2300 	strex	r3, r2, [r1]
 800cb2c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800cb2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cb30:	2b00      	cmp	r3, #0
 800cb32:	d1e6      	bne.n	800cb02 <UART_RxISR_8BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	681b      	ldr	r3, [r3, #0]
 800cb38:	3308      	adds	r3, #8
 800cb3a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb3e:	e853 3f00 	ldrex	r3, [r3]
 800cb42:	623b      	str	r3, [r7, #32]
   return(result);
 800cb44:	6a3b      	ldr	r3, [r7, #32]
 800cb46:	f023 0301 	bic.w	r3, r3, #1
 800cb4a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	681b      	ldr	r3, [r3, #0]
 800cb50:	3308      	adds	r3, #8
 800cb52:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800cb54:	633a      	str	r2, [r7, #48]	; 0x30
 800cb56:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb58:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800cb5a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cb5c:	e841 2300 	strex	r3, r2, [r1]
 800cb60:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800cb62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb64:	2b00      	cmp	r3, #0
 800cb66:	d1e5      	bne.n	800cb34 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	2220      	movs	r2, #32
 800cb6c:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	2200      	movs	r2, #0
 800cb72:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cb78:	2b01      	cmp	r3, #1
 800cb7a:	d12e      	bne.n	800cbda <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	2200      	movs	r2, #0
 800cb80:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	681b      	ldr	r3, [r3, #0]
 800cb86:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb88:	693b      	ldr	r3, [r7, #16]
 800cb8a:	e853 3f00 	ldrex	r3, [r3]
 800cb8e:	60fb      	str	r3, [r7, #12]
   return(result);
 800cb90:	68fb      	ldr	r3, [r7, #12]
 800cb92:	f023 0310 	bic.w	r3, r3, #16
 800cb96:	64bb      	str	r3, [r7, #72]	; 0x48
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	681b      	ldr	r3, [r3, #0]
 800cb9c:	461a      	mov	r2, r3
 800cb9e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cba0:	61fb      	str	r3, [r7, #28]
 800cba2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cba4:	69b9      	ldr	r1, [r7, #24]
 800cba6:	69fa      	ldr	r2, [r7, #28]
 800cba8:	e841 2300 	strex	r3, r2, [r1]
 800cbac:	617b      	str	r3, [r7, #20]
   return(result);
 800cbae:	697b      	ldr	r3, [r7, #20]
 800cbb0:	2b00      	cmp	r3, #0
 800cbb2:	d1e6      	bne.n	800cb82 <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	681b      	ldr	r3, [r3, #0]
 800cbb8:	69db      	ldr	r3, [r3, #28]
 800cbba:	f003 0310 	and.w	r3, r3, #16
 800cbbe:	2b10      	cmp	r3, #16
 800cbc0:	d103      	bne.n	800cbca <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	681b      	ldr	r3, [r3, #0]
 800cbc6:	2210      	movs	r2, #16
 800cbc8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800cbd0:	4619      	mov	r1, r3
 800cbd2:	6878      	ldr	r0, [r7, #4]
 800cbd4:	f7ff f8f8 	bl	800bdc8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800cbd8:	e00d      	b.n	800cbf6 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800cbda:	6878      	ldr	r0, [r7, #4]
 800cbdc:	f7f4 fee0 	bl	80019a0 <HAL_UART_RxCpltCallback>
}
 800cbe0:	e009      	b.n	800cbf6 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	681b      	ldr	r3, [r3, #0]
 800cbe6:	8b1b      	ldrh	r3, [r3, #24]
 800cbe8:	b29a      	uxth	r2, r3
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	681b      	ldr	r3, [r3, #0]
 800cbee:	f042 0208 	orr.w	r2, r2, #8
 800cbf2:	b292      	uxth	r2, r2
 800cbf4:	831a      	strh	r2, [r3, #24]
}
 800cbf6:	bf00      	nop
 800cbf8:	3758      	adds	r7, #88	; 0x58
 800cbfa:	46bd      	mov	sp, r7
 800cbfc:	bd80      	pop	{r7, pc}

0800cbfe <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800cbfe:	b580      	push	{r7, lr}
 800cc00:	b096      	sub	sp, #88	; 0x58
 800cc02:	af00      	add	r7, sp, #0
 800cc04:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800cc0c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cc14:	2b22      	cmp	r3, #34	; 0x22
 800cc16:	f040 8094 	bne.w	800cd42 <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	681b      	ldr	r3, [r3, #0]
 800cc1e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800cc20:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cc28:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800cc2a:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800cc2e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800cc32:	4013      	ands	r3, r2
 800cc34:	b29a      	uxth	r2, r3
 800cc36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cc38:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cc3e:	1c9a      	adds	r2, r3, #2
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800cc4a:	b29b      	uxth	r3, r3
 800cc4c:	3b01      	subs	r3, #1
 800cc4e:	b29a      	uxth	r2, r3
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800cc5c:	b29b      	uxth	r3, r3
 800cc5e:	2b00      	cmp	r3, #0
 800cc60:	d179      	bne.n	800cd56 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	681b      	ldr	r3, [r3, #0]
 800cc66:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc6a:	e853 3f00 	ldrex	r3, [r3]
 800cc6e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800cc70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc72:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800cc76:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	681b      	ldr	r3, [r3, #0]
 800cc7c:	461a      	mov	r2, r3
 800cc7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cc80:	643b      	str	r3, [r7, #64]	; 0x40
 800cc82:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc84:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800cc86:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800cc88:	e841 2300 	strex	r3, r2, [r1]
 800cc8c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800cc8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc90:	2b00      	cmp	r3, #0
 800cc92:	d1e6      	bne.n	800cc62 <UART_RxISR_16BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	681b      	ldr	r3, [r3, #0]
 800cc98:	3308      	adds	r3, #8
 800cc9a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc9c:	6a3b      	ldr	r3, [r7, #32]
 800cc9e:	e853 3f00 	ldrex	r3, [r3]
 800cca2:	61fb      	str	r3, [r7, #28]
   return(result);
 800cca4:	69fb      	ldr	r3, [r7, #28]
 800cca6:	f023 0301 	bic.w	r3, r3, #1
 800ccaa:	64bb      	str	r3, [r7, #72]	; 0x48
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	681b      	ldr	r3, [r3, #0]
 800ccb0:	3308      	adds	r3, #8
 800ccb2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ccb4:	62fa      	str	r2, [r7, #44]	; 0x2c
 800ccb6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ccb8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ccba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ccbc:	e841 2300 	strex	r3, r2, [r1]
 800ccc0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ccc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccc4:	2b00      	cmp	r3, #0
 800ccc6:	d1e5      	bne.n	800cc94 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	2220      	movs	r2, #32
 800cccc:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	2200      	movs	r2, #0
 800ccd2:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ccd8:	2b01      	cmp	r3, #1
 800ccda:	d12e      	bne.n	800cd3a <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	2200      	movs	r2, #0
 800cce0:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	681b      	ldr	r3, [r3, #0]
 800cce6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cce8:	68fb      	ldr	r3, [r7, #12]
 800ccea:	e853 3f00 	ldrex	r3, [r3]
 800ccee:	60bb      	str	r3, [r7, #8]
   return(result);
 800ccf0:	68bb      	ldr	r3, [r7, #8]
 800ccf2:	f023 0310 	bic.w	r3, r3, #16
 800ccf6:	647b      	str	r3, [r7, #68]	; 0x44
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	681b      	ldr	r3, [r3, #0]
 800ccfc:	461a      	mov	r2, r3
 800ccfe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cd00:	61bb      	str	r3, [r7, #24]
 800cd02:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd04:	6979      	ldr	r1, [r7, #20]
 800cd06:	69ba      	ldr	r2, [r7, #24]
 800cd08:	e841 2300 	strex	r3, r2, [r1]
 800cd0c:	613b      	str	r3, [r7, #16]
   return(result);
 800cd0e:	693b      	ldr	r3, [r7, #16]
 800cd10:	2b00      	cmp	r3, #0
 800cd12:	d1e6      	bne.n	800cce2 <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	681b      	ldr	r3, [r3, #0]
 800cd18:	69db      	ldr	r3, [r3, #28]
 800cd1a:	f003 0310 	and.w	r3, r3, #16
 800cd1e:	2b10      	cmp	r3, #16
 800cd20:	d103      	bne.n	800cd2a <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	681b      	ldr	r3, [r3, #0]
 800cd26:	2210      	movs	r2, #16
 800cd28:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800cd30:	4619      	mov	r1, r3
 800cd32:	6878      	ldr	r0, [r7, #4]
 800cd34:	f7ff f848 	bl	800bdc8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800cd38:	e00d      	b.n	800cd56 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800cd3a:	6878      	ldr	r0, [r7, #4]
 800cd3c:	f7f4 fe30 	bl	80019a0 <HAL_UART_RxCpltCallback>
}
 800cd40:	e009      	b.n	800cd56 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	681b      	ldr	r3, [r3, #0]
 800cd46:	8b1b      	ldrh	r3, [r3, #24]
 800cd48:	b29a      	uxth	r2, r3
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	681b      	ldr	r3, [r3, #0]
 800cd4e:	f042 0208 	orr.w	r2, r2, #8
 800cd52:	b292      	uxth	r2, r2
 800cd54:	831a      	strh	r2, [r3, #24]
}
 800cd56:	bf00      	nop
 800cd58:	3758      	adds	r7, #88	; 0x58
 800cd5a:	46bd      	mov	sp, r7
 800cd5c:	bd80      	pop	{r7, pc}

0800cd5e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800cd5e:	b480      	push	{r7}
 800cd60:	b083      	sub	sp, #12
 800cd62:	af00      	add	r7, sp, #0
 800cd64:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800cd66:	bf00      	nop
 800cd68:	370c      	adds	r7, #12
 800cd6a:	46bd      	mov	sp, r7
 800cd6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd70:	4770      	bx	lr

0800cd72 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800cd72:	b480      	push	{r7}
 800cd74:	b085      	sub	sp, #20
 800cd76:	af00      	add	r7, sp, #0
 800cd78:	4603      	mov	r3, r0
 800cd7a:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800cd7c:	2300      	movs	r3, #0
 800cd7e:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800cd80:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800cd84:	2b84      	cmp	r3, #132	; 0x84
 800cd86:	d005      	beq.n	800cd94 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800cd88:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800cd8c:	68fb      	ldr	r3, [r7, #12]
 800cd8e:	4413      	add	r3, r2
 800cd90:	3303      	adds	r3, #3
 800cd92:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800cd94:	68fb      	ldr	r3, [r7, #12]
}
 800cd96:	4618      	mov	r0, r3
 800cd98:	3714      	adds	r7, #20
 800cd9a:	46bd      	mov	sp, r7
 800cd9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cda0:	4770      	bx	lr

0800cda2 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800cda2:	b480      	push	{r7}
 800cda4:	b083      	sub	sp, #12
 800cda6:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cda8:	f3ef 8305 	mrs	r3, IPSR
 800cdac:	607b      	str	r3, [r7, #4]
  return(result);
 800cdae:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800cdb0:	2b00      	cmp	r3, #0
 800cdb2:	bf14      	ite	ne
 800cdb4:	2301      	movne	r3, #1
 800cdb6:	2300      	moveq	r3, #0
 800cdb8:	b2db      	uxtb	r3, r3
}
 800cdba:	4618      	mov	r0, r3
 800cdbc:	370c      	adds	r7, #12
 800cdbe:	46bd      	mov	sp, r7
 800cdc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdc4:	4770      	bx	lr

0800cdc6 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800cdc6:	b580      	push	{r7, lr}
 800cdc8:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800cdca:	f001 f90f 	bl	800dfec <vTaskStartScheduler>
  
  return osOK;
 800cdce:	2300      	movs	r3, #0
}
 800cdd0:	4618      	mov	r0, r3
 800cdd2:	bd80      	pop	{r7, pc}

0800cdd4 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800cdd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cdd6:	b089      	sub	sp, #36	; 0x24
 800cdd8:	af04      	add	r7, sp, #16
 800cdda:	6078      	str	r0, [r7, #4]
 800cddc:	6039      	str	r1, [r7, #0]
      return NULL;
    } 
  }
#elif( configSUPPORT_STATIC_ALLOCATION == 1 )

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	685c      	ldr	r4, [r3, #4]
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	681d      	ldr	r5, [r3, #0]
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	691e      	ldr	r6, [r3, #16]
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800cdf0:	4618      	mov	r0, r3
 800cdf2:	f7ff ffbe 	bl	800cd72 <makeFreeRtosPriority>
 800cdf6:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	695b      	ldr	r3, [r3, #20]
 800cdfc:	687a      	ldr	r2, [r7, #4]
 800cdfe:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800ce00:	9202      	str	r2, [sp, #8]
 800ce02:	9301      	str	r3, [sp, #4]
 800ce04:	9100      	str	r1, [sp, #0]
 800ce06:	683b      	ldr	r3, [r7, #0]
 800ce08:	4632      	mov	r2, r6
 800ce0a:	4629      	mov	r1, r5
 800ce0c:	4620      	mov	r0, r4
 800ce0e:	f000 ff6f 	bl	800dcf0 <xTaskCreateStatic>
 800ce12:	60f8      	str	r0, [r7, #12]
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800ce14:	68fb      	ldr	r3, [r7, #12]
}
 800ce16:	4618      	mov	r0, r3
 800ce18:	3714      	adds	r7, #20
 800ce1a:	46bd      	mov	sp, r7
 800ce1c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ce1e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800ce1e:	b580      	push	{r7, lr}
 800ce20:	b084      	sub	sp, #16
 800ce22:	af00      	add	r7, sp, #0
 800ce24:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800ce2a:	68fb      	ldr	r3, [r7, #12]
 800ce2c:	2b00      	cmp	r3, #0
 800ce2e:	d001      	beq.n	800ce34 <osDelay+0x16>
 800ce30:	68fb      	ldr	r3, [r7, #12]
 800ce32:	e000      	b.n	800ce36 <osDelay+0x18>
 800ce34:	2301      	movs	r3, #1
 800ce36:	4618      	mov	r0, r3
 800ce38:	f001 f8a4 	bl	800df84 <vTaskDelay>
  
  return osOK;
 800ce3c:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800ce3e:	4618      	mov	r0, r3
 800ce40:	3710      	adds	r7, #16
 800ce42:	46bd      	mov	sp, r7
 800ce44:	bd80      	pop	{r7, pc}

0800ce46 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800ce46:	b580      	push	{r7, lr}
 800ce48:	b084      	sub	sp, #16
 800ce4a:	af02      	add	r7, sp, #8
 800ce4c:	6078      	str	r0, [r7, #4]
 800ce4e:	6039      	str	r1, [r7, #0]
      return NULL;
#endif    
    }
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 ) // configSUPPORT_DYNAMIC_ALLOCATION == 0
  if(count == 1) {
 800ce50:	683b      	ldr	r3, [r7, #0]
 800ce52:	2b01      	cmp	r3, #1
 800ce54:	d10a      	bne.n	800ce6c <osSemaphoreCreate+0x26>
    return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	685b      	ldr	r3, [r3, #4]
 800ce5a:	2203      	movs	r2, #3
 800ce5c:	9200      	str	r2, [sp, #0]
 800ce5e:	2200      	movs	r2, #0
 800ce60:	2100      	movs	r1, #0
 800ce62:	2001      	movs	r0, #1
 800ce64:	f000 f9ee 	bl	800d244 <xQueueGenericCreateStatic>
 800ce68:	4603      	mov	r3, r0
 800ce6a:	e000      	b.n	800ce6e <osSemaphoreCreate+0x28>
  else
  {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 800ce6c:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 800ce6e:	4618      	mov	r0, r3
 800ce70:	3708      	adds	r7, #8
 800ce72:	46bd      	mov	sp, r7
 800ce74:	bd80      	pop	{r7, pc}

0800ce76 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800ce76:	b590      	push	{r4, r7, lr}
 800ce78:	b085      	sub	sp, #20
 800ce7a:	af02      	add	r7, sp, #8
 800ce7c:	6078      	str	r0, [r7, #4]
 800ce7e:	6039      	str	r1, [r7, #0]
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	6818      	ldr	r0, [r3, #0]
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	6859      	ldr	r1, [r3, #4]
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	689a      	ldr	r2, [r3, #8]
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	68db      	ldr	r3, [r3, #12]
 800ce90:	2400      	movs	r4, #0
 800ce92:	9400      	str	r4, [sp, #0]
 800ce94:	f000 f9d6 	bl	800d244 <xQueueGenericCreateStatic>
 800ce98:	4603      	mov	r3, r0
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800ce9a:	4618      	mov	r0, r3
 800ce9c:	370c      	adds	r7, #12
 800ce9e:	46bd      	mov	sp, r7
 800cea0:	bd90      	pop	{r4, r7, pc}
	...

0800cea4 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800cea4:	b580      	push	{r7, lr}
 800cea6:	b086      	sub	sp, #24
 800cea8:	af00      	add	r7, sp, #0
 800ceaa:	60f8      	str	r0, [r7, #12]
 800ceac:	60b9      	str	r1, [r7, #8]
 800ceae:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800ceb0:	2300      	movs	r3, #0
 800ceb2:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800ceb8:	697b      	ldr	r3, [r7, #20]
 800ceba:	2b00      	cmp	r3, #0
 800cebc:	d101      	bne.n	800cec2 <osMessagePut+0x1e>
    ticks = 1;
 800cebe:	2301      	movs	r3, #1
 800cec0:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800cec2:	f7ff ff6e 	bl	800cda2 <inHandlerMode>
 800cec6:	4603      	mov	r3, r0
 800cec8:	2b00      	cmp	r3, #0
 800ceca:	d018      	beq.n	800cefe <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800cecc:	f107 0210 	add.w	r2, r7, #16
 800ced0:	f107 0108 	add.w	r1, r7, #8
 800ced4:	2300      	movs	r3, #0
 800ced6:	68f8      	ldr	r0, [r7, #12]
 800ced8:	f000 fb7a 	bl	800d5d0 <xQueueGenericSendFromISR>
 800cedc:	4603      	mov	r3, r0
 800cede:	2b01      	cmp	r3, #1
 800cee0:	d001      	beq.n	800cee6 <osMessagePut+0x42>
      return osErrorOS;
 800cee2:	23ff      	movs	r3, #255	; 0xff
 800cee4:	e018      	b.n	800cf18 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800cee6:	693b      	ldr	r3, [r7, #16]
 800cee8:	2b00      	cmp	r3, #0
 800ceea:	d014      	beq.n	800cf16 <osMessagePut+0x72>
 800ceec:	4b0c      	ldr	r3, [pc, #48]	; (800cf20 <osMessagePut+0x7c>)
 800ceee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cef2:	601a      	str	r2, [r3, #0]
 800cef4:	f3bf 8f4f 	dsb	sy
 800cef8:	f3bf 8f6f 	isb	sy
 800cefc:	e00b      	b.n	800cf16 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800cefe:	f107 0108 	add.w	r1, r7, #8
 800cf02:	2300      	movs	r3, #0
 800cf04:	697a      	ldr	r2, [r7, #20]
 800cf06:	68f8      	ldr	r0, [r7, #12]
 800cf08:	f000 fa64 	bl	800d3d4 <xQueueGenericSend>
 800cf0c:	4603      	mov	r3, r0
 800cf0e:	2b01      	cmp	r3, #1
 800cf10:	d001      	beq.n	800cf16 <osMessagePut+0x72>
      return osErrorOS;
 800cf12:	23ff      	movs	r3, #255	; 0xff
 800cf14:	e000      	b.n	800cf18 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800cf16:	2300      	movs	r3, #0
}
 800cf18:	4618      	mov	r0, r3
 800cf1a:	3718      	adds	r7, #24
 800cf1c:	46bd      	mov	sp, r7
 800cf1e:	bd80      	pop	{r7, pc}
 800cf20:	e000ed04 	.word	0xe000ed04

0800cf24 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800cf24:	b590      	push	{r4, r7, lr}
 800cf26:	b08b      	sub	sp, #44	; 0x2c
 800cf28:	af00      	add	r7, sp, #0
 800cf2a:	60f8      	str	r0, [r7, #12]
 800cf2c:	60b9      	str	r1, [r7, #8]
 800cf2e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800cf30:	68bb      	ldr	r3, [r7, #8]
 800cf32:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800cf34:	2300      	movs	r3, #0
 800cf36:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800cf38:	68bb      	ldr	r3, [r7, #8]
 800cf3a:	2b00      	cmp	r3, #0
 800cf3c:	d10a      	bne.n	800cf54 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800cf3e:	2380      	movs	r3, #128	; 0x80
 800cf40:	617b      	str	r3, [r7, #20]
    return event;
 800cf42:	68fb      	ldr	r3, [r7, #12]
 800cf44:	461c      	mov	r4, r3
 800cf46:	f107 0314 	add.w	r3, r7, #20
 800cf4a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800cf4e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800cf52:	e054      	b.n	800cffe <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800cf54:	2300      	movs	r3, #0
 800cf56:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800cf58:	2300      	movs	r3, #0
 800cf5a:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cf62:	d103      	bne.n	800cf6c <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800cf64:	f04f 33ff 	mov.w	r3, #4294967295
 800cf68:	627b      	str	r3, [r7, #36]	; 0x24
 800cf6a:	e009      	b.n	800cf80 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	2b00      	cmp	r3, #0
 800cf70:	d006      	beq.n	800cf80 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800cf76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf78:	2b00      	cmp	r3, #0
 800cf7a:	d101      	bne.n	800cf80 <osMessageGet+0x5c>
      ticks = 1;
 800cf7c:	2301      	movs	r3, #1
 800cf7e:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 800cf80:	f7ff ff0f 	bl	800cda2 <inHandlerMode>
 800cf84:	4603      	mov	r3, r0
 800cf86:	2b00      	cmp	r3, #0
 800cf88:	d01c      	beq.n	800cfc4 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800cf8a:	f107 0220 	add.w	r2, r7, #32
 800cf8e:	f107 0314 	add.w	r3, r7, #20
 800cf92:	3304      	adds	r3, #4
 800cf94:	4619      	mov	r1, r3
 800cf96:	68b8      	ldr	r0, [r7, #8]
 800cf98:	f000 fc96 	bl	800d8c8 <xQueueReceiveFromISR>
 800cf9c:	4603      	mov	r3, r0
 800cf9e:	2b01      	cmp	r3, #1
 800cfa0:	d102      	bne.n	800cfa8 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800cfa2:	2310      	movs	r3, #16
 800cfa4:	617b      	str	r3, [r7, #20]
 800cfa6:	e001      	b.n	800cfac <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800cfa8:	2300      	movs	r3, #0
 800cfaa:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800cfac:	6a3b      	ldr	r3, [r7, #32]
 800cfae:	2b00      	cmp	r3, #0
 800cfb0:	d01d      	beq.n	800cfee <osMessageGet+0xca>
 800cfb2:	4b15      	ldr	r3, [pc, #84]	; (800d008 <osMessageGet+0xe4>)
 800cfb4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cfb8:	601a      	str	r2, [r3, #0]
 800cfba:	f3bf 8f4f 	dsb	sy
 800cfbe:	f3bf 8f6f 	isb	sy
 800cfc2:	e014      	b.n	800cfee <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800cfc4:	f107 0314 	add.w	r3, r7, #20
 800cfc8:	3304      	adds	r3, #4
 800cfca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cfcc:	4619      	mov	r1, r3
 800cfce:	68b8      	ldr	r0, [r7, #8]
 800cfd0:	f000 fb9a 	bl	800d708 <xQueueReceive>
 800cfd4:	4603      	mov	r3, r0
 800cfd6:	2b01      	cmp	r3, #1
 800cfd8:	d102      	bne.n	800cfe0 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800cfda:	2310      	movs	r3, #16
 800cfdc:	617b      	str	r3, [r7, #20]
 800cfde:	e006      	b.n	800cfee <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800cfe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfe2:	2b00      	cmp	r3, #0
 800cfe4:	d101      	bne.n	800cfea <osMessageGet+0xc6>
 800cfe6:	2300      	movs	r3, #0
 800cfe8:	e000      	b.n	800cfec <osMessageGet+0xc8>
 800cfea:	2340      	movs	r3, #64	; 0x40
 800cfec:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800cfee:	68fb      	ldr	r3, [r7, #12]
 800cff0:	461c      	mov	r4, r3
 800cff2:	f107 0314 	add.w	r3, r7, #20
 800cff6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800cffa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800cffe:	68f8      	ldr	r0, [r7, #12]
 800d000:	372c      	adds	r7, #44	; 0x2c
 800d002:	46bd      	mov	sp, r7
 800d004:	bd90      	pop	{r4, r7, pc}
 800d006:	bf00      	nop
 800d008:	e000ed04 	.word	0xe000ed04

0800d00c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800d00c:	b480      	push	{r7}
 800d00e:	b083      	sub	sp, #12
 800d010:	af00      	add	r7, sp, #0
 800d012:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	f103 0208 	add.w	r2, r3, #8
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	f04f 32ff 	mov.w	r2, #4294967295
 800d024:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	f103 0208 	add.w	r2, r3, #8
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	f103 0208 	add.w	r2, r3, #8
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	2200      	movs	r2, #0
 800d03e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800d040:	bf00      	nop
 800d042:	370c      	adds	r7, #12
 800d044:	46bd      	mov	sp, r7
 800d046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d04a:	4770      	bx	lr

0800d04c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800d04c:	b480      	push	{r7}
 800d04e:	b083      	sub	sp, #12
 800d050:	af00      	add	r7, sp, #0
 800d052:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	2200      	movs	r2, #0
 800d058:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800d05a:	bf00      	nop
 800d05c:	370c      	adds	r7, #12
 800d05e:	46bd      	mov	sp, r7
 800d060:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d064:	4770      	bx	lr

0800d066 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d066:	b480      	push	{r7}
 800d068:	b085      	sub	sp, #20
 800d06a:	af00      	add	r7, sp, #0
 800d06c:	6078      	str	r0, [r7, #4]
 800d06e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	685b      	ldr	r3, [r3, #4]
 800d074:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800d076:	683b      	ldr	r3, [r7, #0]
 800d078:	68fa      	ldr	r2, [r7, #12]
 800d07a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800d07c:	68fb      	ldr	r3, [r7, #12]
 800d07e:	689a      	ldr	r2, [r3, #8]
 800d080:	683b      	ldr	r3, [r7, #0]
 800d082:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800d084:	68fb      	ldr	r3, [r7, #12]
 800d086:	689b      	ldr	r3, [r3, #8]
 800d088:	683a      	ldr	r2, [r7, #0]
 800d08a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800d08c:	68fb      	ldr	r3, [r7, #12]
 800d08e:	683a      	ldr	r2, [r7, #0]
 800d090:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800d092:	683b      	ldr	r3, [r7, #0]
 800d094:	687a      	ldr	r2, [r7, #4]
 800d096:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	681b      	ldr	r3, [r3, #0]
 800d09c:	1c5a      	adds	r2, r3, #1
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	601a      	str	r2, [r3, #0]
}
 800d0a2:	bf00      	nop
 800d0a4:	3714      	adds	r7, #20
 800d0a6:	46bd      	mov	sp, r7
 800d0a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0ac:	4770      	bx	lr

0800d0ae <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d0ae:	b480      	push	{r7}
 800d0b0:	b085      	sub	sp, #20
 800d0b2:	af00      	add	r7, sp, #0
 800d0b4:	6078      	str	r0, [r7, #4]
 800d0b6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800d0b8:	683b      	ldr	r3, [r7, #0]
 800d0ba:	681b      	ldr	r3, [r3, #0]
 800d0bc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800d0be:	68bb      	ldr	r3, [r7, #8]
 800d0c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d0c4:	d103      	bne.n	800d0ce <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	691b      	ldr	r3, [r3, #16]
 800d0ca:	60fb      	str	r3, [r7, #12]
 800d0cc:	e00c      	b.n	800d0e8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	3308      	adds	r3, #8
 800d0d2:	60fb      	str	r3, [r7, #12]
 800d0d4:	e002      	b.n	800d0dc <vListInsert+0x2e>
 800d0d6:	68fb      	ldr	r3, [r7, #12]
 800d0d8:	685b      	ldr	r3, [r3, #4]
 800d0da:	60fb      	str	r3, [r7, #12]
 800d0dc:	68fb      	ldr	r3, [r7, #12]
 800d0de:	685b      	ldr	r3, [r3, #4]
 800d0e0:	681b      	ldr	r3, [r3, #0]
 800d0e2:	68ba      	ldr	r2, [r7, #8]
 800d0e4:	429a      	cmp	r2, r3
 800d0e6:	d2f6      	bcs.n	800d0d6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800d0e8:	68fb      	ldr	r3, [r7, #12]
 800d0ea:	685a      	ldr	r2, [r3, #4]
 800d0ec:	683b      	ldr	r3, [r7, #0]
 800d0ee:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800d0f0:	683b      	ldr	r3, [r7, #0]
 800d0f2:	685b      	ldr	r3, [r3, #4]
 800d0f4:	683a      	ldr	r2, [r7, #0]
 800d0f6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800d0f8:	683b      	ldr	r3, [r7, #0]
 800d0fa:	68fa      	ldr	r2, [r7, #12]
 800d0fc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800d0fe:	68fb      	ldr	r3, [r7, #12]
 800d100:	683a      	ldr	r2, [r7, #0]
 800d102:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800d104:	683b      	ldr	r3, [r7, #0]
 800d106:	687a      	ldr	r2, [r7, #4]
 800d108:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	681b      	ldr	r3, [r3, #0]
 800d10e:	1c5a      	adds	r2, r3, #1
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	601a      	str	r2, [r3, #0]
}
 800d114:	bf00      	nop
 800d116:	3714      	adds	r7, #20
 800d118:	46bd      	mov	sp, r7
 800d11a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d11e:	4770      	bx	lr

0800d120 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800d120:	b480      	push	{r7}
 800d122:	b085      	sub	sp, #20
 800d124:	af00      	add	r7, sp, #0
 800d126:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	691b      	ldr	r3, [r3, #16]
 800d12c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	685b      	ldr	r3, [r3, #4]
 800d132:	687a      	ldr	r2, [r7, #4]
 800d134:	6892      	ldr	r2, [r2, #8]
 800d136:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	689b      	ldr	r3, [r3, #8]
 800d13c:	687a      	ldr	r2, [r7, #4]
 800d13e:	6852      	ldr	r2, [r2, #4]
 800d140:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800d142:	68fb      	ldr	r3, [r7, #12]
 800d144:	685b      	ldr	r3, [r3, #4]
 800d146:	687a      	ldr	r2, [r7, #4]
 800d148:	429a      	cmp	r2, r3
 800d14a:	d103      	bne.n	800d154 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	689a      	ldr	r2, [r3, #8]
 800d150:	68fb      	ldr	r3, [r7, #12]
 800d152:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	2200      	movs	r2, #0
 800d158:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800d15a:	68fb      	ldr	r3, [r7, #12]
 800d15c:	681b      	ldr	r3, [r3, #0]
 800d15e:	1e5a      	subs	r2, r3, #1
 800d160:	68fb      	ldr	r3, [r7, #12]
 800d162:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800d164:	68fb      	ldr	r3, [r7, #12]
 800d166:	681b      	ldr	r3, [r3, #0]
}
 800d168:	4618      	mov	r0, r3
 800d16a:	3714      	adds	r7, #20
 800d16c:	46bd      	mov	sp, r7
 800d16e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d172:	4770      	bx	lr

0800d174 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800d174:	b580      	push	{r7, lr}
 800d176:	b084      	sub	sp, #16
 800d178:	af00      	add	r7, sp, #0
 800d17a:	6078      	str	r0, [r7, #4]
 800d17c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800d182:	68fb      	ldr	r3, [r7, #12]
 800d184:	2b00      	cmp	r3, #0
 800d186:	d10a      	bne.n	800d19e <xQueueGenericReset+0x2a>
	__asm volatile
 800d188:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d18c:	f383 8811 	msr	BASEPRI, r3
 800d190:	f3bf 8f6f 	isb	sy
 800d194:	f3bf 8f4f 	dsb	sy
 800d198:	60bb      	str	r3, [r7, #8]
}
 800d19a:	bf00      	nop
 800d19c:	e7fe      	b.n	800d19c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800d19e:	f002 f8a1 	bl	800f2e4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d1a2:	68fb      	ldr	r3, [r7, #12]
 800d1a4:	681a      	ldr	r2, [r3, #0]
 800d1a6:	68fb      	ldr	r3, [r7, #12]
 800d1a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d1aa:	68f9      	ldr	r1, [r7, #12]
 800d1ac:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800d1ae:	fb01 f303 	mul.w	r3, r1, r3
 800d1b2:	441a      	add	r2, r3
 800d1b4:	68fb      	ldr	r3, [r7, #12]
 800d1b6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800d1b8:	68fb      	ldr	r3, [r7, #12]
 800d1ba:	2200      	movs	r2, #0
 800d1bc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800d1be:	68fb      	ldr	r3, [r7, #12]
 800d1c0:	681a      	ldr	r2, [r3, #0]
 800d1c2:	68fb      	ldr	r3, [r7, #12]
 800d1c4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d1c6:	68fb      	ldr	r3, [r7, #12]
 800d1c8:	681a      	ldr	r2, [r3, #0]
 800d1ca:	68fb      	ldr	r3, [r7, #12]
 800d1cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d1ce:	3b01      	subs	r3, #1
 800d1d0:	68f9      	ldr	r1, [r7, #12]
 800d1d2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800d1d4:	fb01 f303 	mul.w	r3, r1, r3
 800d1d8:	441a      	add	r2, r3
 800d1da:	68fb      	ldr	r3, [r7, #12]
 800d1dc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800d1de:	68fb      	ldr	r3, [r7, #12]
 800d1e0:	22ff      	movs	r2, #255	; 0xff
 800d1e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800d1e6:	68fb      	ldr	r3, [r7, #12]
 800d1e8:	22ff      	movs	r2, #255	; 0xff
 800d1ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800d1ee:	683b      	ldr	r3, [r7, #0]
 800d1f0:	2b00      	cmp	r3, #0
 800d1f2:	d114      	bne.n	800d21e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d1f4:	68fb      	ldr	r3, [r7, #12]
 800d1f6:	691b      	ldr	r3, [r3, #16]
 800d1f8:	2b00      	cmp	r3, #0
 800d1fa:	d01a      	beq.n	800d232 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d1fc:	68fb      	ldr	r3, [r7, #12]
 800d1fe:	3310      	adds	r3, #16
 800d200:	4618      	mov	r0, r3
 800d202:	f001 f977 	bl	800e4f4 <xTaskRemoveFromEventList>
 800d206:	4603      	mov	r3, r0
 800d208:	2b00      	cmp	r3, #0
 800d20a:	d012      	beq.n	800d232 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800d20c:	4b0c      	ldr	r3, [pc, #48]	; (800d240 <xQueueGenericReset+0xcc>)
 800d20e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d212:	601a      	str	r2, [r3, #0]
 800d214:	f3bf 8f4f 	dsb	sy
 800d218:	f3bf 8f6f 	isb	sy
 800d21c:	e009      	b.n	800d232 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800d21e:	68fb      	ldr	r3, [r7, #12]
 800d220:	3310      	adds	r3, #16
 800d222:	4618      	mov	r0, r3
 800d224:	f7ff fef2 	bl	800d00c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800d228:	68fb      	ldr	r3, [r7, #12]
 800d22a:	3324      	adds	r3, #36	; 0x24
 800d22c:	4618      	mov	r0, r3
 800d22e:	f7ff feed 	bl	800d00c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800d232:	f002 f887 	bl	800f344 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800d236:	2301      	movs	r3, #1
}
 800d238:	4618      	mov	r0, r3
 800d23a:	3710      	adds	r7, #16
 800d23c:	46bd      	mov	sp, r7
 800d23e:	bd80      	pop	{r7, pc}
 800d240:	e000ed04 	.word	0xe000ed04

0800d244 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800d244:	b580      	push	{r7, lr}
 800d246:	b08e      	sub	sp, #56	; 0x38
 800d248:	af02      	add	r7, sp, #8
 800d24a:	60f8      	str	r0, [r7, #12]
 800d24c:	60b9      	str	r1, [r7, #8]
 800d24e:	607a      	str	r2, [r7, #4]
 800d250:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d252:	68fb      	ldr	r3, [r7, #12]
 800d254:	2b00      	cmp	r3, #0
 800d256:	d10a      	bne.n	800d26e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800d258:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d25c:	f383 8811 	msr	BASEPRI, r3
 800d260:	f3bf 8f6f 	isb	sy
 800d264:	f3bf 8f4f 	dsb	sy
 800d268:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800d26a:	bf00      	nop
 800d26c:	e7fe      	b.n	800d26c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800d26e:	683b      	ldr	r3, [r7, #0]
 800d270:	2b00      	cmp	r3, #0
 800d272:	d10a      	bne.n	800d28a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800d274:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d278:	f383 8811 	msr	BASEPRI, r3
 800d27c:	f3bf 8f6f 	isb	sy
 800d280:	f3bf 8f4f 	dsb	sy
 800d284:	627b      	str	r3, [r7, #36]	; 0x24
}
 800d286:	bf00      	nop
 800d288:	e7fe      	b.n	800d288 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	2b00      	cmp	r3, #0
 800d28e:	d002      	beq.n	800d296 <xQueueGenericCreateStatic+0x52>
 800d290:	68bb      	ldr	r3, [r7, #8]
 800d292:	2b00      	cmp	r3, #0
 800d294:	d001      	beq.n	800d29a <xQueueGenericCreateStatic+0x56>
 800d296:	2301      	movs	r3, #1
 800d298:	e000      	b.n	800d29c <xQueueGenericCreateStatic+0x58>
 800d29a:	2300      	movs	r3, #0
 800d29c:	2b00      	cmp	r3, #0
 800d29e:	d10a      	bne.n	800d2b6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800d2a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2a4:	f383 8811 	msr	BASEPRI, r3
 800d2a8:	f3bf 8f6f 	isb	sy
 800d2ac:	f3bf 8f4f 	dsb	sy
 800d2b0:	623b      	str	r3, [r7, #32]
}
 800d2b2:	bf00      	nop
 800d2b4:	e7fe      	b.n	800d2b4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	2b00      	cmp	r3, #0
 800d2ba:	d102      	bne.n	800d2c2 <xQueueGenericCreateStatic+0x7e>
 800d2bc:	68bb      	ldr	r3, [r7, #8]
 800d2be:	2b00      	cmp	r3, #0
 800d2c0:	d101      	bne.n	800d2c6 <xQueueGenericCreateStatic+0x82>
 800d2c2:	2301      	movs	r3, #1
 800d2c4:	e000      	b.n	800d2c8 <xQueueGenericCreateStatic+0x84>
 800d2c6:	2300      	movs	r3, #0
 800d2c8:	2b00      	cmp	r3, #0
 800d2ca:	d10a      	bne.n	800d2e2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800d2cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2d0:	f383 8811 	msr	BASEPRI, r3
 800d2d4:	f3bf 8f6f 	isb	sy
 800d2d8:	f3bf 8f4f 	dsb	sy
 800d2dc:	61fb      	str	r3, [r7, #28]
}
 800d2de:	bf00      	nop
 800d2e0:	e7fe      	b.n	800d2e0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800d2e2:	2348      	movs	r3, #72	; 0x48
 800d2e4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800d2e6:	697b      	ldr	r3, [r7, #20]
 800d2e8:	2b48      	cmp	r3, #72	; 0x48
 800d2ea:	d00a      	beq.n	800d302 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800d2ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2f0:	f383 8811 	msr	BASEPRI, r3
 800d2f4:	f3bf 8f6f 	isb	sy
 800d2f8:	f3bf 8f4f 	dsb	sy
 800d2fc:	61bb      	str	r3, [r7, #24]
}
 800d2fe:	bf00      	nop
 800d300:	e7fe      	b.n	800d300 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800d302:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d304:	683b      	ldr	r3, [r7, #0]
 800d306:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800d308:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d30a:	2b00      	cmp	r3, #0
 800d30c:	d009      	beq.n	800d322 <xQueueGenericCreateStatic+0xde>
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800d30e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800d312:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d314:	9300      	str	r3, [sp, #0]
 800d316:	4613      	mov	r3, r2
 800d318:	687a      	ldr	r2, [r7, #4]
 800d31a:	68b9      	ldr	r1, [r7, #8]
 800d31c:	68f8      	ldr	r0, [r7, #12]
 800d31e:	f000 f805 	bl	800d32c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800d322:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800d324:	4618      	mov	r0, r3
 800d326:	3730      	adds	r7, #48	; 0x30
 800d328:	46bd      	mov	sp, r7
 800d32a:	bd80      	pop	{r7, pc}

0800d32c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800d32c:	b580      	push	{r7, lr}
 800d32e:	b084      	sub	sp, #16
 800d330:	af00      	add	r7, sp, #0
 800d332:	60f8      	str	r0, [r7, #12]
 800d334:	60b9      	str	r1, [r7, #8]
 800d336:	607a      	str	r2, [r7, #4]
 800d338:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800d33a:	68bb      	ldr	r3, [r7, #8]
 800d33c:	2b00      	cmp	r3, #0
 800d33e:	d103      	bne.n	800d348 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800d340:	69bb      	ldr	r3, [r7, #24]
 800d342:	69ba      	ldr	r2, [r7, #24]
 800d344:	601a      	str	r2, [r3, #0]
 800d346:	e002      	b.n	800d34e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800d348:	69bb      	ldr	r3, [r7, #24]
 800d34a:	687a      	ldr	r2, [r7, #4]
 800d34c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800d34e:	69bb      	ldr	r3, [r7, #24]
 800d350:	68fa      	ldr	r2, [r7, #12]
 800d352:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800d354:	69bb      	ldr	r3, [r7, #24]
 800d356:	68ba      	ldr	r2, [r7, #8]
 800d358:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800d35a:	2101      	movs	r1, #1
 800d35c:	69b8      	ldr	r0, [r7, #24]
 800d35e:	f7ff ff09 	bl	800d174 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800d362:	bf00      	nop
 800d364:	3710      	adds	r7, #16
 800d366:	46bd      	mov	sp, r7
 800d368:	bd80      	pop	{r7, pc}

0800d36a <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800d36a:	b580      	push	{r7, lr}
 800d36c:	b082      	sub	sp, #8
 800d36e:	af00      	add	r7, sp, #0
 800d370:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800d372:	687b      	ldr	r3, [r7, #4]
 800d374:	2b00      	cmp	r3, #0
 800d376:	d00e      	beq.n	800d396 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	2200      	movs	r2, #0
 800d37c:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	2200      	movs	r2, #0
 800d382:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	2200      	movs	r2, #0
 800d388:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800d38a:	2300      	movs	r3, #0
 800d38c:	2200      	movs	r2, #0
 800d38e:	2100      	movs	r1, #0
 800d390:	6878      	ldr	r0, [r7, #4]
 800d392:	f000 f81f 	bl	800d3d4 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800d396:	bf00      	nop
 800d398:	3708      	adds	r7, #8
 800d39a:	46bd      	mov	sp, r7
 800d39c:	bd80      	pop	{r7, pc}

0800d39e <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800d39e:	b580      	push	{r7, lr}
 800d3a0:	b088      	sub	sp, #32
 800d3a2:	af02      	add	r7, sp, #8
 800d3a4:	4603      	mov	r3, r0
 800d3a6:	6039      	str	r1, [r7, #0]
 800d3a8:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800d3aa:	2301      	movs	r3, #1
 800d3ac:	617b      	str	r3, [r7, #20]
 800d3ae:	2300      	movs	r3, #0
 800d3b0:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800d3b2:	79fb      	ldrb	r3, [r7, #7]
 800d3b4:	9300      	str	r3, [sp, #0]
 800d3b6:	683b      	ldr	r3, [r7, #0]
 800d3b8:	2200      	movs	r2, #0
 800d3ba:	6939      	ldr	r1, [r7, #16]
 800d3bc:	6978      	ldr	r0, [r7, #20]
 800d3be:	f7ff ff41 	bl	800d244 <xQueueGenericCreateStatic>
 800d3c2:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800d3c4:	68f8      	ldr	r0, [r7, #12]
 800d3c6:	f7ff ffd0 	bl	800d36a <prvInitialiseMutex>

		return xNewQueue;
 800d3ca:	68fb      	ldr	r3, [r7, #12]
	}
 800d3cc:	4618      	mov	r0, r3
 800d3ce:	3718      	adds	r7, #24
 800d3d0:	46bd      	mov	sp, r7
 800d3d2:	bd80      	pop	{r7, pc}

0800d3d4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800d3d4:	b580      	push	{r7, lr}
 800d3d6:	b08e      	sub	sp, #56	; 0x38
 800d3d8:	af00      	add	r7, sp, #0
 800d3da:	60f8      	str	r0, [r7, #12]
 800d3dc:	60b9      	str	r1, [r7, #8]
 800d3de:	607a      	str	r2, [r7, #4]
 800d3e0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800d3e2:	2300      	movs	r3, #0
 800d3e4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d3e6:	68fb      	ldr	r3, [r7, #12]
 800d3e8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800d3ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3ec:	2b00      	cmp	r3, #0
 800d3ee:	d10a      	bne.n	800d406 <xQueueGenericSend+0x32>
	__asm volatile
 800d3f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3f4:	f383 8811 	msr	BASEPRI, r3
 800d3f8:	f3bf 8f6f 	isb	sy
 800d3fc:	f3bf 8f4f 	dsb	sy
 800d400:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800d402:	bf00      	nop
 800d404:	e7fe      	b.n	800d404 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d406:	68bb      	ldr	r3, [r7, #8]
 800d408:	2b00      	cmp	r3, #0
 800d40a:	d103      	bne.n	800d414 <xQueueGenericSend+0x40>
 800d40c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d40e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d410:	2b00      	cmp	r3, #0
 800d412:	d101      	bne.n	800d418 <xQueueGenericSend+0x44>
 800d414:	2301      	movs	r3, #1
 800d416:	e000      	b.n	800d41a <xQueueGenericSend+0x46>
 800d418:	2300      	movs	r3, #0
 800d41a:	2b00      	cmp	r3, #0
 800d41c:	d10a      	bne.n	800d434 <xQueueGenericSend+0x60>
	__asm volatile
 800d41e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d422:	f383 8811 	msr	BASEPRI, r3
 800d426:	f3bf 8f6f 	isb	sy
 800d42a:	f3bf 8f4f 	dsb	sy
 800d42e:	627b      	str	r3, [r7, #36]	; 0x24
}
 800d430:	bf00      	nop
 800d432:	e7fe      	b.n	800d432 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d434:	683b      	ldr	r3, [r7, #0]
 800d436:	2b02      	cmp	r3, #2
 800d438:	d103      	bne.n	800d442 <xQueueGenericSend+0x6e>
 800d43a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d43c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d43e:	2b01      	cmp	r3, #1
 800d440:	d101      	bne.n	800d446 <xQueueGenericSend+0x72>
 800d442:	2301      	movs	r3, #1
 800d444:	e000      	b.n	800d448 <xQueueGenericSend+0x74>
 800d446:	2300      	movs	r3, #0
 800d448:	2b00      	cmp	r3, #0
 800d44a:	d10a      	bne.n	800d462 <xQueueGenericSend+0x8e>
	__asm volatile
 800d44c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d450:	f383 8811 	msr	BASEPRI, r3
 800d454:	f3bf 8f6f 	isb	sy
 800d458:	f3bf 8f4f 	dsb	sy
 800d45c:	623b      	str	r3, [r7, #32]
}
 800d45e:	bf00      	nop
 800d460:	e7fe      	b.n	800d460 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d462:	f001 f9dd 	bl	800e820 <xTaskGetSchedulerState>
 800d466:	4603      	mov	r3, r0
 800d468:	2b00      	cmp	r3, #0
 800d46a:	d102      	bne.n	800d472 <xQueueGenericSend+0x9e>
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	2b00      	cmp	r3, #0
 800d470:	d101      	bne.n	800d476 <xQueueGenericSend+0xa2>
 800d472:	2301      	movs	r3, #1
 800d474:	e000      	b.n	800d478 <xQueueGenericSend+0xa4>
 800d476:	2300      	movs	r3, #0
 800d478:	2b00      	cmp	r3, #0
 800d47a:	d10a      	bne.n	800d492 <xQueueGenericSend+0xbe>
	__asm volatile
 800d47c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d480:	f383 8811 	msr	BASEPRI, r3
 800d484:	f3bf 8f6f 	isb	sy
 800d488:	f3bf 8f4f 	dsb	sy
 800d48c:	61fb      	str	r3, [r7, #28]
}
 800d48e:	bf00      	nop
 800d490:	e7fe      	b.n	800d490 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d492:	f001 ff27 	bl	800f2e4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d496:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d498:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d49a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d49c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d49e:	429a      	cmp	r2, r3
 800d4a0:	d302      	bcc.n	800d4a8 <xQueueGenericSend+0xd4>
 800d4a2:	683b      	ldr	r3, [r7, #0]
 800d4a4:	2b02      	cmp	r3, #2
 800d4a6:	d129      	bne.n	800d4fc <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d4a8:	683a      	ldr	r2, [r7, #0]
 800d4aa:	68b9      	ldr	r1, [r7, #8]
 800d4ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d4ae:	f000 fa8b 	bl	800d9c8 <prvCopyDataToQueue>
 800d4b2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d4b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d4b8:	2b00      	cmp	r3, #0
 800d4ba:	d010      	beq.n	800d4de <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d4bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4be:	3324      	adds	r3, #36	; 0x24
 800d4c0:	4618      	mov	r0, r3
 800d4c2:	f001 f817 	bl	800e4f4 <xTaskRemoveFromEventList>
 800d4c6:	4603      	mov	r3, r0
 800d4c8:	2b00      	cmp	r3, #0
 800d4ca:	d013      	beq.n	800d4f4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800d4cc:	4b3f      	ldr	r3, [pc, #252]	; (800d5cc <xQueueGenericSend+0x1f8>)
 800d4ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d4d2:	601a      	str	r2, [r3, #0]
 800d4d4:	f3bf 8f4f 	dsb	sy
 800d4d8:	f3bf 8f6f 	isb	sy
 800d4dc:	e00a      	b.n	800d4f4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800d4de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4e0:	2b00      	cmp	r3, #0
 800d4e2:	d007      	beq.n	800d4f4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800d4e4:	4b39      	ldr	r3, [pc, #228]	; (800d5cc <xQueueGenericSend+0x1f8>)
 800d4e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d4ea:	601a      	str	r2, [r3, #0]
 800d4ec:	f3bf 8f4f 	dsb	sy
 800d4f0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800d4f4:	f001 ff26 	bl	800f344 <vPortExitCritical>
				return pdPASS;
 800d4f8:	2301      	movs	r3, #1
 800d4fa:	e063      	b.n	800d5c4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	2b00      	cmp	r3, #0
 800d500:	d103      	bne.n	800d50a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d502:	f001 ff1f 	bl	800f344 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800d506:	2300      	movs	r3, #0
 800d508:	e05c      	b.n	800d5c4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d50a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d50c:	2b00      	cmp	r3, #0
 800d50e:	d106      	bne.n	800d51e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d510:	f107 0314 	add.w	r3, r7, #20
 800d514:	4618      	mov	r0, r3
 800d516:	f001 f84f 	bl	800e5b8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d51a:	2301      	movs	r3, #1
 800d51c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d51e:	f001 ff11 	bl	800f344 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d522:	f000 fdc9 	bl	800e0b8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d526:	f001 fedd 	bl	800f2e4 <vPortEnterCritical>
 800d52a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d52c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d530:	b25b      	sxtb	r3, r3
 800d532:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d536:	d103      	bne.n	800d540 <xQueueGenericSend+0x16c>
 800d538:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d53a:	2200      	movs	r2, #0
 800d53c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d540:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d542:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d546:	b25b      	sxtb	r3, r3
 800d548:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d54c:	d103      	bne.n	800d556 <xQueueGenericSend+0x182>
 800d54e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d550:	2200      	movs	r2, #0
 800d552:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d556:	f001 fef5 	bl	800f344 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d55a:	1d3a      	adds	r2, r7, #4
 800d55c:	f107 0314 	add.w	r3, r7, #20
 800d560:	4611      	mov	r1, r2
 800d562:	4618      	mov	r0, r3
 800d564:	f001 f83e 	bl	800e5e4 <xTaskCheckForTimeOut>
 800d568:	4603      	mov	r3, r0
 800d56a:	2b00      	cmp	r3, #0
 800d56c:	d124      	bne.n	800d5b8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800d56e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d570:	f000 fb22 	bl	800dbb8 <prvIsQueueFull>
 800d574:	4603      	mov	r3, r0
 800d576:	2b00      	cmp	r3, #0
 800d578:	d018      	beq.n	800d5ac <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800d57a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d57c:	3310      	adds	r3, #16
 800d57e:	687a      	ldr	r2, [r7, #4]
 800d580:	4611      	mov	r1, r2
 800d582:	4618      	mov	r0, r3
 800d584:	f000 ff66 	bl	800e454 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800d588:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d58a:	f000 faad 	bl	800dae8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800d58e:	f000 fda1 	bl	800e0d4 <xTaskResumeAll>
 800d592:	4603      	mov	r3, r0
 800d594:	2b00      	cmp	r3, #0
 800d596:	f47f af7c 	bne.w	800d492 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800d59a:	4b0c      	ldr	r3, [pc, #48]	; (800d5cc <xQueueGenericSend+0x1f8>)
 800d59c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d5a0:	601a      	str	r2, [r3, #0]
 800d5a2:	f3bf 8f4f 	dsb	sy
 800d5a6:	f3bf 8f6f 	isb	sy
 800d5aa:	e772      	b.n	800d492 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800d5ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d5ae:	f000 fa9b 	bl	800dae8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d5b2:	f000 fd8f 	bl	800e0d4 <xTaskResumeAll>
 800d5b6:	e76c      	b.n	800d492 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800d5b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d5ba:	f000 fa95 	bl	800dae8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d5be:	f000 fd89 	bl	800e0d4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800d5c2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800d5c4:	4618      	mov	r0, r3
 800d5c6:	3738      	adds	r7, #56	; 0x38
 800d5c8:	46bd      	mov	sp, r7
 800d5ca:	bd80      	pop	{r7, pc}
 800d5cc:	e000ed04 	.word	0xe000ed04

0800d5d0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800d5d0:	b580      	push	{r7, lr}
 800d5d2:	b090      	sub	sp, #64	; 0x40
 800d5d4:	af00      	add	r7, sp, #0
 800d5d6:	60f8      	str	r0, [r7, #12]
 800d5d8:	60b9      	str	r1, [r7, #8]
 800d5da:	607a      	str	r2, [r7, #4]
 800d5dc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d5de:	68fb      	ldr	r3, [r7, #12]
 800d5e0:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800d5e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5e4:	2b00      	cmp	r3, #0
 800d5e6:	d10a      	bne.n	800d5fe <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800d5e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5ec:	f383 8811 	msr	BASEPRI, r3
 800d5f0:	f3bf 8f6f 	isb	sy
 800d5f4:	f3bf 8f4f 	dsb	sy
 800d5f8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800d5fa:	bf00      	nop
 800d5fc:	e7fe      	b.n	800d5fc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d5fe:	68bb      	ldr	r3, [r7, #8]
 800d600:	2b00      	cmp	r3, #0
 800d602:	d103      	bne.n	800d60c <xQueueGenericSendFromISR+0x3c>
 800d604:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d608:	2b00      	cmp	r3, #0
 800d60a:	d101      	bne.n	800d610 <xQueueGenericSendFromISR+0x40>
 800d60c:	2301      	movs	r3, #1
 800d60e:	e000      	b.n	800d612 <xQueueGenericSendFromISR+0x42>
 800d610:	2300      	movs	r3, #0
 800d612:	2b00      	cmp	r3, #0
 800d614:	d10a      	bne.n	800d62c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800d616:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d61a:	f383 8811 	msr	BASEPRI, r3
 800d61e:	f3bf 8f6f 	isb	sy
 800d622:	f3bf 8f4f 	dsb	sy
 800d626:	627b      	str	r3, [r7, #36]	; 0x24
}
 800d628:	bf00      	nop
 800d62a:	e7fe      	b.n	800d62a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d62c:	683b      	ldr	r3, [r7, #0]
 800d62e:	2b02      	cmp	r3, #2
 800d630:	d103      	bne.n	800d63a <xQueueGenericSendFromISR+0x6a>
 800d632:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d634:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d636:	2b01      	cmp	r3, #1
 800d638:	d101      	bne.n	800d63e <xQueueGenericSendFromISR+0x6e>
 800d63a:	2301      	movs	r3, #1
 800d63c:	e000      	b.n	800d640 <xQueueGenericSendFromISR+0x70>
 800d63e:	2300      	movs	r3, #0
 800d640:	2b00      	cmp	r3, #0
 800d642:	d10a      	bne.n	800d65a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800d644:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d648:	f383 8811 	msr	BASEPRI, r3
 800d64c:	f3bf 8f6f 	isb	sy
 800d650:	f3bf 8f4f 	dsb	sy
 800d654:	623b      	str	r3, [r7, #32]
}
 800d656:	bf00      	nop
 800d658:	e7fe      	b.n	800d658 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d65a:	f001 ff25 	bl	800f4a8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800d65e:	f3ef 8211 	mrs	r2, BASEPRI
 800d662:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d666:	f383 8811 	msr	BASEPRI, r3
 800d66a:	f3bf 8f6f 	isb	sy
 800d66e:	f3bf 8f4f 	dsb	sy
 800d672:	61fa      	str	r2, [r7, #28]
 800d674:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800d676:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d678:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d67a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d67c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d67e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d680:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d682:	429a      	cmp	r2, r3
 800d684:	d302      	bcc.n	800d68c <xQueueGenericSendFromISR+0xbc>
 800d686:	683b      	ldr	r3, [r7, #0]
 800d688:	2b02      	cmp	r3, #2
 800d68a:	d12f      	bne.n	800d6ec <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800d68c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d68e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d692:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d696:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d698:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d69a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d69c:	683a      	ldr	r2, [r7, #0]
 800d69e:	68b9      	ldr	r1, [r7, #8]
 800d6a0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d6a2:	f000 f991 	bl	800d9c8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800d6a6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800d6aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d6ae:	d112      	bne.n	800d6d6 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d6b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d6b4:	2b00      	cmp	r3, #0
 800d6b6:	d016      	beq.n	800d6e6 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d6b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6ba:	3324      	adds	r3, #36	; 0x24
 800d6bc:	4618      	mov	r0, r3
 800d6be:	f000 ff19 	bl	800e4f4 <xTaskRemoveFromEventList>
 800d6c2:	4603      	mov	r3, r0
 800d6c4:	2b00      	cmp	r3, #0
 800d6c6:	d00e      	beq.n	800d6e6 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	2b00      	cmp	r3, #0
 800d6cc:	d00b      	beq.n	800d6e6 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	2201      	movs	r2, #1
 800d6d2:	601a      	str	r2, [r3, #0]
 800d6d4:	e007      	b.n	800d6e6 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800d6d6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800d6da:	3301      	adds	r3, #1
 800d6dc:	b2db      	uxtb	r3, r3
 800d6de:	b25a      	sxtb	r2, r3
 800d6e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800d6e6:	2301      	movs	r3, #1
 800d6e8:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800d6ea:	e001      	b.n	800d6f0 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800d6ec:	2300      	movs	r3, #0
 800d6ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d6f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d6f2:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800d6f4:	697b      	ldr	r3, [r7, #20]
 800d6f6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800d6fa:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d6fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800d6fe:	4618      	mov	r0, r3
 800d700:	3740      	adds	r7, #64	; 0x40
 800d702:	46bd      	mov	sp, r7
 800d704:	bd80      	pop	{r7, pc}
	...

0800d708 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800d708:	b580      	push	{r7, lr}
 800d70a:	b08c      	sub	sp, #48	; 0x30
 800d70c:	af00      	add	r7, sp, #0
 800d70e:	60f8      	str	r0, [r7, #12]
 800d710:	60b9      	str	r1, [r7, #8]
 800d712:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800d714:	2300      	movs	r3, #0
 800d716:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d718:	68fb      	ldr	r3, [r7, #12]
 800d71a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d71c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d71e:	2b00      	cmp	r3, #0
 800d720:	d10a      	bne.n	800d738 <xQueueReceive+0x30>
	__asm volatile
 800d722:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d726:	f383 8811 	msr	BASEPRI, r3
 800d72a:	f3bf 8f6f 	isb	sy
 800d72e:	f3bf 8f4f 	dsb	sy
 800d732:	623b      	str	r3, [r7, #32]
}
 800d734:	bf00      	nop
 800d736:	e7fe      	b.n	800d736 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d738:	68bb      	ldr	r3, [r7, #8]
 800d73a:	2b00      	cmp	r3, #0
 800d73c:	d103      	bne.n	800d746 <xQueueReceive+0x3e>
 800d73e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d742:	2b00      	cmp	r3, #0
 800d744:	d101      	bne.n	800d74a <xQueueReceive+0x42>
 800d746:	2301      	movs	r3, #1
 800d748:	e000      	b.n	800d74c <xQueueReceive+0x44>
 800d74a:	2300      	movs	r3, #0
 800d74c:	2b00      	cmp	r3, #0
 800d74e:	d10a      	bne.n	800d766 <xQueueReceive+0x5e>
	__asm volatile
 800d750:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d754:	f383 8811 	msr	BASEPRI, r3
 800d758:	f3bf 8f6f 	isb	sy
 800d75c:	f3bf 8f4f 	dsb	sy
 800d760:	61fb      	str	r3, [r7, #28]
}
 800d762:	bf00      	nop
 800d764:	e7fe      	b.n	800d764 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d766:	f001 f85b 	bl	800e820 <xTaskGetSchedulerState>
 800d76a:	4603      	mov	r3, r0
 800d76c:	2b00      	cmp	r3, #0
 800d76e:	d102      	bne.n	800d776 <xQueueReceive+0x6e>
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	2b00      	cmp	r3, #0
 800d774:	d101      	bne.n	800d77a <xQueueReceive+0x72>
 800d776:	2301      	movs	r3, #1
 800d778:	e000      	b.n	800d77c <xQueueReceive+0x74>
 800d77a:	2300      	movs	r3, #0
 800d77c:	2b00      	cmp	r3, #0
 800d77e:	d10a      	bne.n	800d796 <xQueueReceive+0x8e>
	__asm volatile
 800d780:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d784:	f383 8811 	msr	BASEPRI, r3
 800d788:	f3bf 8f6f 	isb	sy
 800d78c:	f3bf 8f4f 	dsb	sy
 800d790:	61bb      	str	r3, [r7, #24]
}
 800d792:	bf00      	nop
 800d794:	e7fe      	b.n	800d794 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d796:	f001 fda5 	bl	800f2e4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d79a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d79c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d79e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d7a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7a2:	2b00      	cmp	r3, #0
 800d7a4:	d01f      	beq.n	800d7e6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d7a6:	68b9      	ldr	r1, [r7, #8]
 800d7a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d7aa:	f000 f977 	bl	800da9c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d7ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7b0:	1e5a      	subs	r2, r3, #1
 800d7b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7b4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d7b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7b8:	691b      	ldr	r3, [r3, #16]
 800d7ba:	2b00      	cmp	r3, #0
 800d7bc:	d00f      	beq.n	800d7de <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d7be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7c0:	3310      	adds	r3, #16
 800d7c2:	4618      	mov	r0, r3
 800d7c4:	f000 fe96 	bl	800e4f4 <xTaskRemoveFromEventList>
 800d7c8:	4603      	mov	r3, r0
 800d7ca:	2b00      	cmp	r3, #0
 800d7cc:	d007      	beq.n	800d7de <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d7ce:	4b3d      	ldr	r3, [pc, #244]	; (800d8c4 <xQueueReceive+0x1bc>)
 800d7d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d7d4:	601a      	str	r2, [r3, #0]
 800d7d6:	f3bf 8f4f 	dsb	sy
 800d7da:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d7de:	f001 fdb1 	bl	800f344 <vPortExitCritical>
				return pdPASS;
 800d7e2:	2301      	movs	r3, #1
 800d7e4:	e069      	b.n	800d8ba <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d7e6:	687b      	ldr	r3, [r7, #4]
 800d7e8:	2b00      	cmp	r3, #0
 800d7ea:	d103      	bne.n	800d7f4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d7ec:	f001 fdaa 	bl	800f344 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d7f0:	2300      	movs	r3, #0
 800d7f2:	e062      	b.n	800d8ba <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d7f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7f6:	2b00      	cmp	r3, #0
 800d7f8:	d106      	bne.n	800d808 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d7fa:	f107 0310 	add.w	r3, r7, #16
 800d7fe:	4618      	mov	r0, r3
 800d800:	f000 feda 	bl	800e5b8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d804:	2301      	movs	r3, #1
 800d806:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d808:	f001 fd9c 	bl	800f344 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d80c:	f000 fc54 	bl	800e0b8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d810:	f001 fd68 	bl	800f2e4 <vPortEnterCritical>
 800d814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d816:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d81a:	b25b      	sxtb	r3, r3
 800d81c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d820:	d103      	bne.n	800d82a <xQueueReceive+0x122>
 800d822:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d824:	2200      	movs	r2, #0
 800d826:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d82a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d82c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d830:	b25b      	sxtb	r3, r3
 800d832:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d836:	d103      	bne.n	800d840 <xQueueReceive+0x138>
 800d838:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d83a:	2200      	movs	r2, #0
 800d83c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d840:	f001 fd80 	bl	800f344 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d844:	1d3a      	adds	r2, r7, #4
 800d846:	f107 0310 	add.w	r3, r7, #16
 800d84a:	4611      	mov	r1, r2
 800d84c:	4618      	mov	r0, r3
 800d84e:	f000 fec9 	bl	800e5e4 <xTaskCheckForTimeOut>
 800d852:	4603      	mov	r3, r0
 800d854:	2b00      	cmp	r3, #0
 800d856:	d123      	bne.n	800d8a0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d858:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d85a:	f000 f997 	bl	800db8c <prvIsQueueEmpty>
 800d85e:	4603      	mov	r3, r0
 800d860:	2b00      	cmp	r3, #0
 800d862:	d017      	beq.n	800d894 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d864:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d866:	3324      	adds	r3, #36	; 0x24
 800d868:	687a      	ldr	r2, [r7, #4]
 800d86a:	4611      	mov	r1, r2
 800d86c:	4618      	mov	r0, r3
 800d86e:	f000 fdf1 	bl	800e454 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d872:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d874:	f000 f938 	bl	800dae8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d878:	f000 fc2c 	bl	800e0d4 <xTaskResumeAll>
 800d87c:	4603      	mov	r3, r0
 800d87e:	2b00      	cmp	r3, #0
 800d880:	d189      	bne.n	800d796 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800d882:	4b10      	ldr	r3, [pc, #64]	; (800d8c4 <xQueueReceive+0x1bc>)
 800d884:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d888:	601a      	str	r2, [r3, #0]
 800d88a:	f3bf 8f4f 	dsb	sy
 800d88e:	f3bf 8f6f 	isb	sy
 800d892:	e780      	b.n	800d796 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800d894:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d896:	f000 f927 	bl	800dae8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d89a:	f000 fc1b 	bl	800e0d4 <xTaskResumeAll>
 800d89e:	e77a      	b.n	800d796 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800d8a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d8a2:	f000 f921 	bl	800dae8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d8a6:	f000 fc15 	bl	800e0d4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d8aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d8ac:	f000 f96e 	bl	800db8c <prvIsQueueEmpty>
 800d8b0:	4603      	mov	r3, r0
 800d8b2:	2b00      	cmp	r3, #0
 800d8b4:	f43f af6f 	beq.w	800d796 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d8b8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d8ba:	4618      	mov	r0, r3
 800d8bc:	3730      	adds	r7, #48	; 0x30
 800d8be:	46bd      	mov	sp, r7
 800d8c0:	bd80      	pop	{r7, pc}
 800d8c2:	bf00      	nop
 800d8c4:	e000ed04 	.word	0xe000ed04

0800d8c8 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800d8c8:	b580      	push	{r7, lr}
 800d8ca:	b08e      	sub	sp, #56	; 0x38
 800d8cc:	af00      	add	r7, sp, #0
 800d8ce:	60f8      	str	r0, [r7, #12]
 800d8d0:	60b9      	str	r1, [r7, #8]
 800d8d2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d8d4:	68fb      	ldr	r3, [r7, #12]
 800d8d6:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800d8d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8da:	2b00      	cmp	r3, #0
 800d8dc:	d10a      	bne.n	800d8f4 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800d8de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8e2:	f383 8811 	msr	BASEPRI, r3
 800d8e6:	f3bf 8f6f 	isb	sy
 800d8ea:	f3bf 8f4f 	dsb	sy
 800d8ee:	623b      	str	r3, [r7, #32]
}
 800d8f0:	bf00      	nop
 800d8f2:	e7fe      	b.n	800d8f2 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d8f4:	68bb      	ldr	r3, [r7, #8]
 800d8f6:	2b00      	cmp	r3, #0
 800d8f8:	d103      	bne.n	800d902 <xQueueReceiveFromISR+0x3a>
 800d8fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d8fe:	2b00      	cmp	r3, #0
 800d900:	d101      	bne.n	800d906 <xQueueReceiveFromISR+0x3e>
 800d902:	2301      	movs	r3, #1
 800d904:	e000      	b.n	800d908 <xQueueReceiveFromISR+0x40>
 800d906:	2300      	movs	r3, #0
 800d908:	2b00      	cmp	r3, #0
 800d90a:	d10a      	bne.n	800d922 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800d90c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d910:	f383 8811 	msr	BASEPRI, r3
 800d914:	f3bf 8f6f 	isb	sy
 800d918:	f3bf 8f4f 	dsb	sy
 800d91c:	61fb      	str	r3, [r7, #28]
}
 800d91e:	bf00      	nop
 800d920:	e7fe      	b.n	800d920 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d922:	f001 fdc1 	bl	800f4a8 <vPortValidateInterruptPriority>
	__asm volatile
 800d926:	f3ef 8211 	mrs	r2, BASEPRI
 800d92a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d92e:	f383 8811 	msr	BASEPRI, r3
 800d932:	f3bf 8f6f 	isb	sy
 800d936:	f3bf 8f4f 	dsb	sy
 800d93a:	61ba      	str	r2, [r7, #24]
 800d93c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800d93e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d940:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d942:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d944:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d946:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d948:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d94a:	2b00      	cmp	r3, #0
 800d94c:	d02f      	beq.n	800d9ae <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800d94e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d950:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d954:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d958:	68b9      	ldr	r1, [r7, #8]
 800d95a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d95c:	f000 f89e 	bl	800da9c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d960:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d962:	1e5a      	subs	r2, r3, #1
 800d964:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d966:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800d968:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d96c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d970:	d112      	bne.n	800d998 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d972:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d974:	691b      	ldr	r3, [r3, #16]
 800d976:	2b00      	cmp	r3, #0
 800d978:	d016      	beq.n	800d9a8 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d97a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d97c:	3310      	adds	r3, #16
 800d97e:	4618      	mov	r0, r3
 800d980:	f000 fdb8 	bl	800e4f4 <xTaskRemoveFromEventList>
 800d984:	4603      	mov	r3, r0
 800d986:	2b00      	cmp	r3, #0
 800d988:	d00e      	beq.n	800d9a8 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800d98a:	687b      	ldr	r3, [r7, #4]
 800d98c:	2b00      	cmp	r3, #0
 800d98e:	d00b      	beq.n	800d9a8 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800d990:	687b      	ldr	r3, [r7, #4]
 800d992:	2201      	movs	r2, #1
 800d994:	601a      	str	r2, [r3, #0]
 800d996:	e007      	b.n	800d9a8 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800d998:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d99c:	3301      	adds	r3, #1
 800d99e:	b2db      	uxtb	r3, r3
 800d9a0:	b25a      	sxtb	r2, r3
 800d9a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800d9a8:	2301      	movs	r3, #1
 800d9aa:	637b      	str	r3, [r7, #52]	; 0x34
 800d9ac:	e001      	b.n	800d9b2 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800d9ae:	2300      	movs	r3, #0
 800d9b0:	637b      	str	r3, [r7, #52]	; 0x34
 800d9b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9b4:	613b      	str	r3, [r7, #16]
	__asm volatile
 800d9b6:	693b      	ldr	r3, [r7, #16]
 800d9b8:	f383 8811 	msr	BASEPRI, r3
}
 800d9bc:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d9be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800d9c0:	4618      	mov	r0, r3
 800d9c2:	3738      	adds	r7, #56	; 0x38
 800d9c4:	46bd      	mov	sp, r7
 800d9c6:	bd80      	pop	{r7, pc}

0800d9c8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800d9c8:	b580      	push	{r7, lr}
 800d9ca:	b086      	sub	sp, #24
 800d9cc:	af00      	add	r7, sp, #0
 800d9ce:	60f8      	str	r0, [r7, #12]
 800d9d0:	60b9      	str	r1, [r7, #8]
 800d9d2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800d9d4:	2300      	movs	r3, #0
 800d9d6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d9d8:	68fb      	ldr	r3, [r7, #12]
 800d9da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d9dc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800d9de:	68fb      	ldr	r3, [r7, #12]
 800d9e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d9e2:	2b00      	cmp	r3, #0
 800d9e4:	d10d      	bne.n	800da02 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d9e6:	68fb      	ldr	r3, [r7, #12]
 800d9e8:	681b      	ldr	r3, [r3, #0]
 800d9ea:	2b00      	cmp	r3, #0
 800d9ec:	d14d      	bne.n	800da8a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d9ee:	68fb      	ldr	r3, [r7, #12]
 800d9f0:	689b      	ldr	r3, [r3, #8]
 800d9f2:	4618      	mov	r0, r3
 800d9f4:	f000 ff32 	bl	800e85c <xTaskPriorityDisinherit>
 800d9f8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800d9fa:	68fb      	ldr	r3, [r7, #12]
 800d9fc:	2200      	movs	r2, #0
 800d9fe:	609a      	str	r2, [r3, #8]
 800da00:	e043      	b.n	800da8a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	2b00      	cmp	r3, #0
 800da06:	d119      	bne.n	800da3c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800da08:	68fb      	ldr	r3, [r7, #12]
 800da0a:	6858      	ldr	r0, [r3, #4]
 800da0c:	68fb      	ldr	r3, [r7, #12]
 800da0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800da10:	461a      	mov	r2, r3
 800da12:	68b9      	ldr	r1, [r7, #8]
 800da14:	f001 fdc2 	bl	800f59c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800da18:	68fb      	ldr	r3, [r7, #12]
 800da1a:	685a      	ldr	r2, [r3, #4]
 800da1c:	68fb      	ldr	r3, [r7, #12]
 800da1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800da20:	441a      	add	r2, r3
 800da22:	68fb      	ldr	r3, [r7, #12]
 800da24:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800da26:	68fb      	ldr	r3, [r7, #12]
 800da28:	685a      	ldr	r2, [r3, #4]
 800da2a:	68fb      	ldr	r3, [r7, #12]
 800da2c:	689b      	ldr	r3, [r3, #8]
 800da2e:	429a      	cmp	r2, r3
 800da30:	d32b      	bcc.n	800da8a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800da32:	68fb      	ldr	r3, [r7, #12]
 800da34:	681a      	ldr	r2, [r3, #0]
 800da36:	68fb      	ldr	r3, [r7, #12]
 800da38:	605a      	str	r2, [r3, #4]
 800da3a:	e026      	b.n	800da8a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800da3c:	68fb      	ldr	r3, [r7, #12]
 800da3e:	68d8      	ldr	r0, [r3, #12]
 800da40:	68fb      	ldr	r3, [r7, #12]
 800da42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800da44:	461a      	mov	r2, r3
 800da46:	68b9      	ldr	r1, [r7, #8]
 800da48:	f001 fda8 	bl	800f59c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800da4c:	68fb      	ldr	r3, [r7, #12]
 800da4e:	68da      	ldr	r2, [r3, #12]
 800da50:	68fb      	ldr	r3, [r7, #12]
 800da52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800da54:	425b      	negs	r3, r3
 800da56:	441a      	add	r2, r3
 800da58:	68fb      	ldr	r3, [r7, #12]
 800da5a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800da5c:	68fb      	ldr	r3, [r7, #12]
 800da5e:	68da      	ldr	r2, [r3, #12]
 800da60:	68fb      	ldr	r3, [r7, #12]
 800da62:	681b      	ldr	r3, [r3, #0]
 800da64:	429a      	cmp	r2, r3
 800da66:	d207      	bcs.n	800da78 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800da68:	68fb      	ldr	r3, [r7, #12]
 800da6a:	689a      	ldr	r2, [r3, #8]
 800da6c:	68fb      	ldr	r3, [r7, #12]
 800da6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800da70:	425b      	negs	r3, r3
 800da72:	441a      	add	r2, r3
 800da74:	68fb      	ldr	r3, [r7, #12]
 800da76:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	2b02      	cmp	r3, #2
 800da7c:	d105      	bne.n	800da8a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800da7e:	693b      	ldr	r3, [r7, #16]
 800da80:	2b00      	cmp	r3, #0
 800da82:	d002      	beq.n	800da8a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800da84:	693b      	ldr	r3, [r7, #16]
 800da86:	3b01      	subs	r3, #1
 800da88:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800da8a:	693b      	ldr	r3, [r7, #16]
 800da8c:	1c5a      	adds	r2, r3, #1
 800da8e:	68fb      	ldr	r3, [r7, #12]
 800da90:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800da92:	697b      	ldr	r3, [r7, #20]
}
 800da94:	4618      	mov	r0, r3
 800da96:	3718      	adds	r7, #24
 800da98:	46bd      	mov	sp, r7
 800da9a:	bd80      	pop	{r7, pc}

0800da9c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800da9c:	b580      	push	{r7, lr}
 800da9e:	b082      	sub	sp, #8
 800daa0:	af00      	add	r7, sp, #0
 800daa2:	6078      	str	r0, [r7, #4]
 800daa4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800daaa:	2b00      	cmp	r3, #0
 800daac:	d018      	beq.n	800dae0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	68da      	ldr	r2, [r3, #12]
 800dab2:	687b      	ldr	r3, [r7, #4]
 800dab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dab6:	441a      	add	r2, r3
 800dab8:	687b      	ldr	r3, [r7, #4]
 800daba:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	68da      	ldr	r2, [r3, #12]
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	689b      	ldr	r3, [r3, #8]
 800dac4:	429a      	cmp	r2, r3
 800dac6:	d303      	bcc.n	800dad0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	681a      	ldr	r2, [r3, #0]
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800dad0:	687b      	ldr	r3, [r7, #4]
 800dad2:	68d9      	ldr	r1, [r3, #12]
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dad8:	461a      	mov	r2, r3
 800dada:	6838      	ldr	r0, [r7, #0]
 800dadc:	f001 fd5e 	bl	800f59c <memcpy>
	}
}
 800dae0:	bf00      	nop
 800dae2:	3708      	adds	r7, #8
 800dae4:	46bd      	mov	sp, r7
 800dae6:	bd80      	pop	{r7, pc}

0800dae8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800dae8:	b580      	push	{r7, lr}
 800daea:	b084      	sub	sp, #16
 800daec:	af00      	add	r7, sp, #0
 800daee:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800daf0:	f001 fbf8 	bl	800f2e4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800daf4:	687b      	ldr	r3, [r7, #4]
 800daf6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800dafa:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800dafc:	e011      	b.n	800db22 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db02:	2b00      	cmp	r3, #0
 800db04:	d012      	beq.n	800db2c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800db06:	687b      	ldr	r3, [r7, #4]
 800db08:	3324      	adds	r3, #36	; 0x24
 800db0a:	4618      	mov	r0, r3
 800db0c:	f000 fcf2 	bl	800e4f4 <xTaskRemoveFromEventList>
 800db10:	4603      	mov	r3, r0
 800db12:	2b00      	cmp	r3, #0
 800db14:	d001      	beq.n	800db1a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800db16:	f000 fdc7 	bl	800e6a8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800db1a:	7bfb      	ldrb	r3, [r7, #15]
 800db1c:	3b01      	subs	r3, #1
 800db1e:	b2db      	uxtb	r3, r3
 800db20:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800db22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800db26:	2b00      	cmp	r3, #0
 800db28:	dce9      	bgt.n	800dafe <prvUnlockQueue+0x16>
 800db2a:	e000      	b.n	800db2e <prvUnlockQueue+0x46>
					break;
 800db2c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800db2e:	687b      	ldr	r3, [r7, #4]
 800db30:	22ff      	movs	r2, #255	; 0xff
 800db32:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800db36:	f001 fc05 	bl	800f344 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800db3a:	f001 fbd3 	bl	800f2e4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800db44:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800db46:	e011      	b.n	800db6c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	691b      	ldr	r3, [r3, #16]
 800db4c:	2b00      	cmp	r3, #0
 800db4e:	d012      	beq.n	800db76 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	3310      	adds	r3, #16
 800db54:	4618      	mov	r0, r3
 800db56:	f000 fccd 	bl	800e4f4 <xTaskRemoveFromEventList>
 800db5a:	4603      	mov	r3, r0
 800db5c:	2b00      	cmp	r3, #0
 800db5e:	d001      	beq.n	800db64 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800db60:	f000 fda2 	bl	800e6a8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800db64:	7bbb      	ldrb	r3, [r7, #14]
 800db66:	3b01      	subs	r3, #1
 800db68:	b2db      	uxtb	r3, r3
 800db6a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800db6c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800db70:	2b00      	cmp	r3, #0
 800db72:	dce9      	bgt.n	800db48 <prvUnlockQueue+0x60>
 800db74:	e000      	b.n	800db78 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800db76:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800db78:	687b      	ldr	r3, [r7, #4]
 800db7a:	22ff      	movs	r2, #255	; 0xff
 800db7c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800db80:	f001 fbe0 	bl	800f344 <vPortExitCritical>
}
 800db84:	bf00      	nop
 800db86:	3710      	adds	r7, #16
 800db88:	46bd      	mov	sp, r7
 800db8a:	bd80      	pop	{r7, pc}

0800db8c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800db8c:	b580      	push	{r7, lr}
 800db8e:	b084      	sub	sp, #16
 800db90:	af00      	add	r7, sp, #0
 800db92:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800db94:	f001 fba6 	bl	800f2e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800db9c:	2b00      	cmp	r3, #0
 800db9e:	d102      	bne.n	800dba6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800dba0:	2301      	movs	r3, #1
 800dba2:	60fb      	str	r3, [r7, #12]
 800dba4:	e001      	b.n	800dbaa <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800dba6:	2300      	movs	r3, #0
 800dba8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800dbaa:	f001 fbcb 	bl	800f344 <vPortExitCritical>

	return xReturn;
 800dbae:	68fb      	ldr	r3, [r7, #12]
}
 800dbb0:	4618      	mov	r0, r3
 800dbb2:	3710      	adds	r7, #16
 800dbb4:	46bd      	mov	sp, r7
 800dbb6:	bd80      	pop	{r7, pc}

0800dbb8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800dbb8:	b580      	push	{r7, lr}
 800dbba:	b084      	sub	sp, #16
 800dbbc:	af00      	add	r7, sp, #0
 800dbbe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800dbc0:	f001 fb90 	bl	800f2e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dbcc:	429a      	cmp	r2, r3
 800dbce:	d102      	bne.n	800dbd6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800dbd0:	2301      	movs	r3, #1
 800dbd2:	60fb      	str	r3, [r7, #12]
 800dbd4:	e001      	b.n	800dbda <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800dbd6:	2300      	movs	r3, #0
 800dbd8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800dbda:	f001 fbb3 	bl	800f344 <vPortExitCritical>

	return xReturn;
 800dbde:	68fb      	ldr	r3, [r7, #12]
}
 800dbe0:	4618      	mov	r0, r3
 800dbe2:	3710      	adds	r7, #16
 800dbe4:	46bd      	mov	sp, r7
 800dbe6:	bd80      	pop	{r7, pc}

0800dbe8 <xQueueIsQueueFullFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueIsQueueFullFromISR( const QueueHandle_t xQueue )
{
 800dbe8:	b480      	push	{r7}
 800dbea:	b087      	sub	sp, #28
 800dbec:	af00      	add	r7, sp, #0
 800dbee:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;
Queue_t * const pxQueue = xQueue;
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	613b      	str	r3, [r7, #16]

	configASSERT( pxQueue );
 800dbf4:	693b      	ldr	r3, [r7, #16]
 800dbf6:	2b00      	cmp	r3, #0
 800dbf8:	d10a      	bne.n	800dc10 <xQueueIsQueueFullFromISR+0x28>
	__asm volatile
 800dbfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dbfe:	f383 8811 	msr	BASEPRI, r3
 800dc02:	f3bf 8f6f 	isb	sy
 800dc06:	f3bf 8f4f 	dsb	sy
 800dc0a:	60fb      	str	r3, [r7, #12]
}
 800dc0c:	bf00      	nop
 800dc0e:	e7fe      	b.n	800dc0e <xQueueIsQueueFullFromISR+0x26>
	if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800dc10:	693b      	ldr	r3, [r7, #16]
 800dc12:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dc14:	693b      	ldr	r3, [r7, #16]
 800dc16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dc18:	429a      	cmp	r2, r3
 800dc1a:	d102      	bne.n	800dc22 <xQueueIsQueueFullFromISR+0x3a>
	{
		xReturn = pdTRUE;
 800dc1c:	2301      	movs	r3, #1
 800dc1e:	617b      	str	r3, [r7, #20]
 800dc20:	e001      	b.n	800dc26 <xQueueIsQueueFullFromISR+0x3e>
	}
	else
	{
		xReturn = pdFALSE;
 800dc22:	2300      	movs	r3, #0
 800dc24:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800dc26:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800dc28:	4618      	mov	r0, r3
 800dc2a:	371c      	adds	r7, #28
 800dc2c:	46bd      	mov	sp, r7
 800dc2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc32:	4770      	bx	lr

0800dc34 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800dc34:	b480      	push	{r7}
 800dc36:	b085      	sub	sp, #20
 800dc38:	af00      	add	r7, sp, #0
 800dc3a:	6078      	str	r0, [r7, #4]
 800dc3c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800dc3e:	2300      	movs	r3, #0
 800dc40:	60fb      	str	r3, [r7, #12]
 800dc42:	e014      	b.n	800dc6e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800dc44:	4a0f      	ldr	r2, [pc, #60]	; (800dc84 <vQueueAddToRegistry+0x50>)
 800dc46:	68fb      	ldr	r3, [r7, #12]
 800dc48:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800dc4c:	2b00      	cmp	r3, #0
 800dc4e:	d10b      	bne.n	800dc68 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800dc50:	490c      	ldr	r1, [pc, #48]	; (800dc84 <vQueueAddToRegistry+0x50>)
 800dc52:	68fb      	ldr	r3, [r7, #12]
 800dc54:	683a      	ldr	r2, [r7, #0]
 800dc56:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800dc5a:	4a0a      	ldr	r2, [pc, #40]	; (800dc84 <vQueueAddToRegistry+0x50>)
 800dc5c:	68fb      	ldr	r3, [r7, #12]
 800dc5e:	00db      	lsls	r3, r3, #3
 800dc60:	4413      	add	r3, r2
 800dc62:	687a      	ldr	r2, [r7, #4]
 800dc64:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800dc66:	e006      	b.n	800dc76 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800dc68:	68fb      	ldr	r3, [r7, #12]
 800dc6a:	3301      	adds	r3, #1
 800dc6c:	60fb      	str	r3, [r7, #12]
 800dc6e:	68fb      	ldr	r3, [r7, #12]
 800dc70:	2b07      	cmp	r3, #7
 800dc72:	d9e7      	bls.n	800dc44 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800dc74:	bf00      	nop
 800dc76:	bf00      	nop
 800dc78:	3714      	adds	r7, #20
 800dc7a:	46bd      	mov	sp, r7
 800dc7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc80:	4770      	bx	lr
 800dc82:	bf00      	nop
 800dc84:	20021d5c 	.word	0x20021d5c

0800dc88 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800dc88:	b580      	push	{r7, lr}
 800dc8a:	b086      	sub	sp, #24
 800dc8c:	af00      	add	r7, sp, #0
 800dc8e:	60f8      	str	r0, [r7, #12]
 800dc90:	60b9      	str	r1, [r7, #8]
 800dc92:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800dc94:	68fb      	ldr	r3, [r7, #12]
 800dc96:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800dc98:	f001 fb24 	bl	800f2e4 <vPortEnterCritical>
 800dc9c:	697b      	ldr	r3, [r7, #20]
 800dc9e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800dca2:	b25b      	sxtb	r3, r3
 800dca4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dca8:	d103      	bne.n	800dcb2 <vQueueWaitForMessageRestricted+0x2a>
 800dcaa:	697b      	ldr	r3, [r7, #20]
 800dcac:	2200      	movs	r2, #0
 800dcae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800dcb2:	697b      	ldr	r3, [r7, #20]
 800dcb4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800dcb8:	b25b      	sxtb	r3, r3
 800dcba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dcbe:	d103      	bne.n	800dcc8 <vQueueWaitForMessageRestricted+0x40>
 800dcc0:	697b      	ldr	r3, [r7, #20]
 800dcc2:	2200      	movs	r2, #0
 800dcc4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800dcc8:	f001 fb3c 	bl	800f344 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800dccc:	697b      	ldr	r3, [r7, #20]
 800dcce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dcd0:	2b00      	cmp	r3, #0
 800dcd2:	d106      	bne.n	800dce2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800dcd4:	697b      	ldr	r3, [r7, #20]
 800dcd6:	3324      	adds	r3, #36	; 0x24
 800dcd8:	687a      	ldr	r2, [r7, #4]
 800dcda:	68b9      	ldr	r1, [r7, #8]
 800dcdc:	4618      	mov	r0, r3
 800dcde:	f000 fbdd 	bl	800e49c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800dce2:	6978      	ldr	r0, [r7, #20]
 800dce4:	f7ff ff00 	bl	800dae8 <prvUnlockQueue>
	}
 800dce8:	bf00      	nop
 800dcea:	3718      	adds	r7, #24
 800dcec:	46bd      	mov	sp, r7
 800dcee:	bd80      	pop	{r7, pc}

0800dcf0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800dcf0:	b580      	push	{r7, lr}
 800dcf2:	b08e      	sub	sp, #56	; 0x38
 800dcf4:	af04      	add	r7, sp, #16
 800dcf6:	60f8      	str	r0, [r7, #12]
 800dcf8:	60b9      	str	r1, [r7, #8]
 800dcfa:	607a      	str	r2, [r7, #4]
 800dcfc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800dcfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dd00:	2b00      	cmp	r3, #0
 800dd02:	d10a      	bne.n	800dd1a <xTaskCreateStatic+0x2a>
	__asm volatile
 800dd04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd08:	f383 8811 	msr	BASEPRI, r3
 800dd0c:	f3bf 8f6f 	isb	sy
 800dd10:	f3bf 8f4f 	dsb	sy
 800dd14:	623b      	str	r3, [r7, #32]
}
 800dd16:	bf00      	nop
 800dd18:	e7fe      	b.n	800dd18 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800dd1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd1c:	2b00      	cmp	r3, #0
 800dd1e:	d10a      	bne.n	800dd36 <xTaskCreateStatic+0x46>
	__asm volatile
 800dd20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd24:	f383 8811 	msr	BASEPRI, r3
 800dd28:	f3bf 8f6f 	isb	sy
 800dd2c:	f3bf 8f4f 	dsb	sy
 800dd30:	61fb      	str	r3, [r7, #28]
}
 800dd32:	bf00      	nop
 800dd34:	e7fe      	b.n	800dd34 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800dd36:	2354      	movs	r3, #84	; 0x54
 800dd38:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800dd3a:	693b      	ldr	r3, [r7, #16]
 800dd3c:	2b54      	cmp	r3, #84	; 0x54
 800dd3e:	d00a      	beq.n	800dd56 <xTaskCreateStatic+0x66>
	__asm volatile
 800dd40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd44:	f383 8811 	msr	BASEPRI, r3
 800dd48:	f3bf 8f6f 	isb	sy
 800dd4c:	f3bf 8f4f 	dsb	sy
 800dd50:	61bb      	str	r3, [r7, #24]
}
 800dd52:	bf00      	nop
 800dd54:	e7fe      	b.n	800dd54 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800dd56:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800dd58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd5a:	2b00      	cmp	r3, #0
 800dd5c:	d01a      	beq.n	800dd94 <xTaskCreateStatic+0xa4>
 800dd5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dd60:	2b00      	cmp	r3, #0
 800dd62:	d017      	beq.n	800dd94 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800dd64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd66:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800dd68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd6a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800dd6c:	631a      	str	r2, [r3, #48]	; 0x30
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800dd6e:	2300      	movs	r3, #0
 800dd70:	9303      	str	r3, [sp, #12]
 800dd72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd74:	9302      	str	r3, [sp, #8]
 800dd76:	f107 0314 	add.w	r3, r7, #20
 800dd7a:	9301      	str	r3, [sp, #4]
 800dd7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd7e:	9300      	str	r3, [sp, #0]
 800dd80:	683b      	ldr	r3, [r7, #0]
 800dd82:	687a      	ldr	r2, [r7, #4]
 800dd84:	68b9      	ldr	r1, [r7, #8]
 800dd86:	68f8      	ldr	r0, [r7, #12]
 800dd88:	f000 f80b 	bl	800dda2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800dd8c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800dd8e:	f000 f88f 	bl	800deb0 <prvAddNewTaskToReadyList>
 800dd92:	e001      	b.n	800dd98 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 800dd94:	2300      	movs	r3, #0
 800dd96:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800dd98:	697b      	ldr	r3, [r7, #20]
	}
 800dd9a:	4618      	mov	r0, r3
 800dd9c:	3728      	adds	r7, #40	; 0x28
 800dd9e:	46bd      	mov	sp, r7
 800dda0:	bd80      	pop	{r7, pc}

0800dda2 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800dda2:	b580      	push	{r7, lr}
 800dda4:	b088      	sub	sp, #32
 800dda6:	af00      	add	r7, sp, #0
 800dda8:	60f8      	str	r0, [r7, #12]
 800ddaa:	60b9      	str	r1, [r7, #8]
 800ddac:	607a      	str	r2, [r7, #4]
 800ddae:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800ddb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ddb2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ddb4:	687b      	ldr	r3, [r7, #4]
 800ddb6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800ddba:	3b01      	subs	r3, #1
 800ddbc:	009b      	lsls	r3, r3, #2
 800ddbe:	4413      	add	r3, r2
 800ddc0:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800ddc2:	69bb      	ldr	r3, [r7, #24]
 800ddc4:	f023 0307 	bic.w	r3, r3, #7
 800ddc8:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800ddca:	69bb      	ldr	r3, [r7, #24]
 800ddcc:	f003 0307 	and.w	r3, r3, #7
 800ddd0:	2b00      	cmp	r3, #0
 800ddd2:	d00a      	beq.n	800ddea <prvInitialiseNewTask+0x48>
	__asm volatile
 800ddd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ddd8:	f383 8811 	msr	BASEPRI, r3
 800dddc:	f3bf 8f6f 	isb	sy
 800dde0:	f3bf 8f4f 	dsb	sy
 800dde4:	617b      	str	r3, [r7, #20]
}
 800dde6:	bf00      	nop
 800dde8:	e7fe      	b.n	800dde8 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800ddea:	68bb      	ldr	r3, [r7, #8]
 800ddec:	2b00      	cmp	r3, #0
 800ddee:	d01f      	beq.n	800de30 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ddf0:	2300      	movs	r3, #0
 800ddf2:	61fb      	str	r3, [r7, #28]
 800ddf4:	e012      	b.n	800de1c <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800ddf6:	68ba      	ldr	r2, [r7, #8]
 800ddf8:	69fb      	ldr	r3, [r7, #28]
 800ddfa:	4413      	add	r3, r2
 800ddfc:	7819      	ldrb	r1, [r3, #0]
 800ddfe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800de00:	69fb      	ldr	r3, [r7, #28]
 800de02:	4413      	add	r3, r2
 800de04:	3334      	adds	r3, #52	; 0x34
 800de06:	460a      	mov	r2, r1
 800de08:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800de0a:	68ba      	ldr	r2, [r7, #8]
 800de0c:	69fb      	ldr	r3, [r7, #28]
 800de0e:	4413      	add	r3, r2
 800de10:	781b      	ldrb	r3, [r3, #0]
 800de12:	2b00      	cmp	r3, #0
 800de14:	d006      	beq.n	800de24 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800de16:	69fb      	ldr	r3, [r7, #28]
 800de18:	3301      	adds	r3, #1
 800de1a:	61fb      	str	r3, [r7, #28]
 800de1c:	69fb      	ldr	r3, [r7, #28]
 800de1e:	2b0f      	cmp	r3, #15
 800de20:	d9e9      	bls.n	800ddf6 <prvInitialiseNewTask+0x54>
 800de22:	e000      	b.n	800de26 <prvInitialiseNewTask+0x84>
			{
				break;
 800de24:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800de26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de28:	2200      	movs	r2, #0
 800de2a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800de2e:	e003      	b.n	800de38 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800de30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de32:	2200      	movs	r2, #0
 800de34:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800de38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de3a:	2b06      	cmp	r3, #6
 800de3c:	d901      	bls.n	800de42 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800de3e:	2306      	movs	r3, #6
 800de40:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800de42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de44:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800de46:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800de48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de4a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800de4c:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800de4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de50:	2200      	movs	r2, #0
 800de52:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800de54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de56:	3304      	adds	r3, #4
 800de58:	4618      	mov	r0, r3
 800de5a:	f7ff f8f7 	bl	800d04c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800de5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de60:	3318      	adds	r3, #24
 800de62:	4618      	mov	r0, r3
 800de64:	f7ff f8f2 	bl	800d04c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800de68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de6a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800de6c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800de6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de70:	f1c3 0207 	rsb	r2, r3, #7
 800de74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de76:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800de78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de7a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800de7c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800de7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de80:	2200      	movs	r2, #0
 800de82:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800de84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de86:	2200      	movs	r2, #0
 800de88:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800de8c:	683a      	ldr	r2, [r7, #0]
 800de8e:	68f9      	ldr	r1, [r7, #12]
 800de90:	69b8      	ldr	r0, [r7, #24]
 800de92:	f001 f8f7 	bl	800f084 <pxPortInitialiseStack>
 800de96:	4602      	mov	r2, r0
 800de98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de9a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800de9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de9e:	2b00      	cmp	r3, #0
 800dea0:	d002      	beq.n	800dea8 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800dea2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dea4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dea6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800dea8:	bf00      	nop
 800deaa:	3720      	adds	r7, #32
 800deac:	46bd      	mov	sp, r7
 800deae:	bd80      	pop	{r7, pc}

0800deb0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800deb0:	b580      	push	{r7, lr}
 800deb2:	b082      	sub	sp, #8
 800deb4:	af00      	add	r7, sp, #0
 800deb6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800deb8:	f001 fa14 	bl	800f2e4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800debc:	4b2a      	ldr	r3, [pc, #168]	; (800df68 <prvAddNewTaskToReadyList+0xb8>)
 800debe:	681b      	ldr	r3, [r3, #0]
 800dec0:	3301      	adds	r3, #1
 800dec2:	4a29      	ldr	r2, [pc, #164]	; (800df68 <prvAddNewTaskToReadyList+0xb8>)
 800dec4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800dec6:	4b29      	ldr	r3, [pc, #164]	; (800df6c <prvAddNewTaskToReadyList+0xbc>)
 800dec8:	681b      	ldr	r3, [r3, #0]
 800deca:	2b00      	cmp	r3, #0
 800decc:	d109      	bne.n	800dee2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800dece:	4a27      	ldr	r2, [pc, #156]	; (800df6c <prvAddNewTaskToReadyList+0xbc>)
 800ded0:	687b      	ldr	r3, [r7, #4]
 800ded2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800ded4:	4b24      	ldr	r3, [pc, #144]	; (800df68 <prvAddNewTaskToReadyList+0xb8>)
 800ded6:	681b      	ldr	r3, [r3, #0]
 800ded8:	2b01      	cmp	r3, #1
 800deda:	d110      	bne.n	800defe <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800dedc:	f000 fc08 	bl	800e6f0 <prvInitialiseTaskLists>
 800dee0:	e00d      	b.n	800defe <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800dee2:	4b23      	ldr	r3, [pc, #140]	; (800df70 <prvAddNewTaskToReadyList+0xc0>)
 800dee4:	681b      	ldr	r3, [r3, #0]
 800dee6:	2b00      	cmp	r3, #0
 800dee8:	d109      	bne.n	800defe <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800deea:	4b20      	ldr	r3, [pc, #128]	; (800df6c <prvAddNewTaskToReadyList+0xbc>)
 800deec:	681b      	ldr	r3, [r3, #0]
 800deee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800def0:	687b      	ldr	r3, [r7, #4]
 800def2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800def4:	429a      	cmp	r2, r3
 800def6:	d802      	bhi.n	800defe <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800def8:	4a1c      	ldr	r2, [pc, #112]	; (800df6c <prvAddNewTaskToReadyList+0xbc>)
 800defa:	687b      	ldr	r3, [r7, #4]
 800defc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800defe:	4b1d      	ldr	r3, [pc, #116]	; (800df74 <prvAddNewTaskToReadyList+0xc4>)
 800df00:	681b      	ldr	r3, [r3, #0]
 800df02:	3301      	adds	r3, #1
 800df04:	4a1b      	ldr	r2, [pc, #108]	; (800df74 <prvAddNewTaskToReadyList+0xc4>)
 800df06:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800df08:	687b      	ldr	r3, [r7, #4]
 800df0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df0c:	2201      	movs	r2, #1
 800df0e:	409a      	lsls	r2, r3
 800df10:	4b19      	ldr	r3, [pc, #100]	; (800df78 <prvAddNewTaskToReadyList+0xc8>)
 800df12:	681b      	ldr	r3, [r3, #0]
 800df14:	4313      	orrs	r3, r2
 800df16:	4a18      	ldr	r2, [pc, #96]	; (800df78 <prvAddNewTaskToReadyList+0xc8>)
 800df18:	6013      	str	r3, [r2, #0]
 800df1a:	687b      	ldr	r3, [r7, #4]
 800df1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800df1e:	4613      	mov	r3, r2
 800df20:	009b      	lsls	r3, r3, #2
 800df22:	4413      	add	r3, r2
 800df24:	009b      	lsls	r3, r3, #2
 800df26:	4a15      	ldr	r2, [pc, #84]	; (800df7c <prvAddNewTaskToReadyList+0xcc>)
 800df28:	441a      	add	r2, r3
 800df2a:	687b      	ldr	r3, [r7, #4]
 800df2c:	3304      	adds	r3, #4
 800df2e:	4619      	mov	r1, r3
 800df30:	4610      	mov	r0, r2
 800df32:	f7ff f898 	bl	800d066 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800df36:	f001 fa05 	bl	800f344 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800df3a:	4b0d      	ldr	r3, [pc, #52]	; (800df70 <prvAddNewTaskToReadyList+0xc0>)
 800df3c:	681b      	ldr	r3, [r3, #0]
 800df3e:	2b00      	cmp	r3, #0
 800df40:	d00e      	beq.n	800df60 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800df42:	4b0a      	ldr	r3, [pc, #40]	; (800df6c <prvAddNewTaskToReadyList+0xbc>)
 800df44:	681b      	ldr	r3, [r3, #0]
 800df46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800df48:	687b      	ldr	r3, [r7, #4]
 800df4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df4c:	429a      	cmp	r2, r3
 800df4e:	d207      	bcs.n	800df60 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800df50:	4b0b      	ldr	r3, [pc, #44]	; (800df80 <prvAddNewTaskToReadyList+0xd0>)
 800df52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800df56:	601a      	str	r2, [r3, #0]
 800df58:	f3bf 8f4f 	dsb	sy
 800df5c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800df60:	bf00      	nop
 800df62:	3708      	adds	r7, #8
 800df64:	46bd      	mov	sp, r7
 800df66:	bd80      	pop	{r7, pc}
 800df68:	20021e9c 	.word	0x20021e9c
 800df6c:	20021d9c 	.word	0x20021d9c
 800df70:	20021ea8 	.word	0x20021ea8
 800df74:	20021eb8 	.word	0x20021eb8
 800df78:	20021ea4 	.word	0x20021ea4
 800df7c:	20021da0 	.word	0x20021da0
 800df80:	e000ed04 	.word	0xe000ed04

0800df84 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800df84:	b580      	push	{r7, lr}
 800df86:	b084      	sub	sp, #16
 800df88:	af00      	add	r7, sp, #0
 800df8a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800df8c:	2300      	movs	r3, #0
 800df8e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800df90:	687b      	ldr	r3, [r7, #4]
 800df92:	2b00      	cmp	r3, #0
 800df94:	d017      	beq.n	800dfc6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800df96:	4b13      	ldr	r3, [pc, #76]	; (800dfe4 <vTaskDelay+0x60>)
 800df98:	681b      	ldr	r3, [r3, #0]
 800df9a:	2b00      	cmp	r3, #0
 800df9c:	d00a      	beq.n	800dfb4 <vTaskDelay+0x30>
	__asm volatile
 800df9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dfa2:	f383 8811 	msr	BASEPRI, r3
 800dfa6:	f3bf 8f6f 	isb	sy
 800dfaa:	f3bf 8f4f 	dsb	sy
 800dfae:	60bb      	str	r3, [r7, #8]
}
 800dfb0:	bf00      	nop
 800dfb2:	e7fe      	b.n	800dfb2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800dfb4:	f000 f880 	bl	800e0b8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800dfb8:	2100      	movs	r1, #0
 800dfba:	6878      	ldr	r0, [r7, #4]
 800dfbc:	f000 fcd4 	bl	800e968 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800dfc0:	f000 f888 	bl	800e0d4 <xTaskResumeAll>
 800dfc4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800dfc6:	68fb      	ldr	r3, [r7, #12]
 800dfc8:	2b00      	cmp	r3, #0
 800dfca:	d107      	bne.n	800dfdc <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800dfcc:	4b06      	ldr	r3, [pc, #24]	; (800dfe8 <vTaskDelay+0x64>)
 800dfce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dfd2:	601a      	str	r2, [r3, #0]
 800dfd4:	f3bf 8f4f 	dsb	sy
 800dfd8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800dfdc:	bf00      	nop
 800dfde:	3710      	adds	r7, #16
 800dfe0:	46bd      	mov	sp, r7
 800dfe2:	bd80      	pop	{r7, pc}
 800dfe4:	20021ec4 	.word	0x20021ec4
 800dfe8:	e000ed04 	.word	0xe000ed04

0800dfec <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800dfec:	b580      	push	{r7, lr}
 800dfee:	b08a      	sub	sp, #40	; 0x28
 800dff0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800dff2:	2300      	movs	r3, #0
 800dff4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800dff6:	2300      	movs	r3, #0
 800dff8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800dffa:	463a      	mov	r2, r7
 800dffc:	1d39      	adds	r1, r7, #4
 800dffe:	f107 0308 	add.w	r3, r7, #8
 800e002:	4618      	mov	r0, r3
 800e004:	f7f5 f976 	bl	80032f4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800e008:	6839      	ldr	r1, [r7, #0]
 800e00a:	687b      	ldr	r3, [r7, #4]
 800e00c:	68ba      	ldr	r2, [r7, #8]
 800e00e:	9202      	str	r2, [sp, #8]
 800e010:	9301      	str	r3, [sp, #4]
 800e012:	2300      	movs	r3, #0
 800e014:	9300      	str	r3, [sp, #0]
 800e016:	2300      	movs	r3, #0
 800e018:	460a      	mov	r2, r1
 800e01a:	4921      	ldr	r1, [pc, #132]	; (800e0a0 <vTaskStartScheduler+0xb4>)
 800e01c:	4821      	ldr	r0, [pc, #132]	; (800e0a4 <vTaskStartScheduler+0xb8>)
 800e01e:	f7ff fe67 	bl	800dcf0 <xTaskCreateStatic>
 800e022:	4603      	mov	r3, r0
 800e024:	4a20      	ldr	r2, [pc, #128]	; (800e0a8 <vTaskStartScheduler+0xbc>)
 800e026:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800e028:	4b1f      	ldr	r3, [pc, #124]	; (800e0a8 <vTaskStartScheduler+0xbc>)
 800e02a:	681b      	ldr	r3, [r3, #0]
 800e02c:	2b00      	cmp	r3, #0
 800e02e:	d002      	beq.n	800e036 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800e030:	2301      	movs	r3, #1
 800e032:	617b      	str	r3, [r7, #20]
 800e034:	e001      	b.n	800e03a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800e036:	2300      	movs	r3, #0
 800e038:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800e03a:	697b      	ldr	r3, [r7, #20]
 800e03c:	2b01      	cmp	r3, #1
 800e03e:	d102      	bne.n	800e046 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800e040:	f000 fcf8 	bl	800ea34 <xTimerCreateTimerTask>
 800e044:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800e046:	697b      	ldr	r3, [r7, #20]
 800e048:	2b01      	cmp	r3, #1
 800e04a:	d116      	bne.n	800e07a <vTaskStartScheduler+0x8e>
	__asm volatile
 800e04c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e050:	f383 8811 	msr	BASEPRI, r3
 800e054:	f3bf 8f6f 	isb	sy
 800e058:	f3bf 8f4f 	dsb	sy
 800e05c:	613b      	str	r3, [r7, #16]
}
 800e05e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800e060:	4b12      	ldr	r3, [pc, #72]	; (800e0ac <vTaskStartScheduler+0xc0>)
 800e062:	f04f 32ff 	mov.w	r2, #4294967295
 800e066:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800e068:	4b11      	ldr	r3, [pc, #68]	; (800e0b0 <vTaskStartScheduler+0xc4>)
 800e06a:	2201      	movs	r2, #1
 800e06c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800e06e:	4b11      	ldr	r3, [pc, #68]	; (800e0b4 <vTaskStartScheduler+0xc8>)
 800e070:	2200      	movs	r2, #0
 800e072:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800e074:	f001 f894 	bl	800f1a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800e078:	e00e      	b.n	800e098 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800e07a:	697b      	ldr	r3, [r7, #20]
 800e07c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e080:	d10a      	bne.n	800e098 <vTaskStartScheduler+0xac>
	__asm volatile
 800e082:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e086:	f383 8811 	msr	BASEPRI, r3
 800e08a:	f3bf 8f6f 	isb	sy
 800e08e:	f3bf 8f4f 	dsb	sy
 800e092:	60fb      	str	r3, [r7, #12]
}
 800e094:	bf00      	nop
 800e096:	e7fe      	b.n	800e096 <vTaskStartScheduler+0xaa>
}
 800e098:	bf00      	nop
 800e09a:	3718      	adds	r7, #24
 800e09c:	46bd      	mov	sp, r7
 800e09e:	bd80      	pop	{r7, pc}
 800e0a0:	08012814 	.word	0x08012814
 800e0a4:	0800e6c1 	.word	0x0800e6c1
 800e0a8:	20021ec0 	.word	0x20021ec0
 800e0ac:	20021ebc 	.word	0x20021ebc
 800e0b0:	20021ea8 	.word	0x20021ea8
 800e0b4:	20021ea0 	.word	0x20021ea0

0800e0b8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800e0b8:	b480      	push	{r7}
 800e0ba:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800e0bc:	4b04      	ldr	r3, [pc, #16]	; (800e0d0 <vTaskSuspendAll+0x18>)
 800e0be:	681b      	ldr	r3, [r3, #0]
 800e0c0:	3301      	adds	r3, #1
 800e0c2:	4a03      	ldr	r2, [pc, #12]	; (800e0d0 <vTaskSuspendAll+0x18>)
 800e0c4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800e0c6:	bf00      	nop
 800e0c8:	46bd      	mov	sp, r7
 800e0ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0ce:	4770      	bx	lr
 800e0d0:	20021ec4 	.word	0x20021ec4

0800e0d4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800e0d4:	b580      	push	{r7, lr}
 800e0d6:	b084      	sub	sp, #16
 800e0d8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800e0da:	2300      	movs	r3, #0
 800e0dc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800e0de:	2300      	movs	r3, #0
 800e0e0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800e0e2:	4b41      	ldr	r3, [pc, #260]	; (800e1e8 <xTaskResumeAll+0x114>)
 800e0e4:	681b      	ldr	r3, [r3, #0]
 800e0e6:	2b00      	cmp	r3, #0
 800e0e8:	d10a      	bne.n	800e100 <xTaskResumeAll+0x2c>
	__asm volatile
 800e0ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e0ee:	f383 8811 	msr	BASEPRI, r3
 800e0f2:	f3bf 8f6f 	isb	sy
 800e0f6:	f3bf 8f4f 	dsb	sy
 800e0fa:	603b      	str	r3, [r7, #0]
}
 800e0fc:	bf00      	nop
 800e0fe:	e7fe      	b.n	800e0fe <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800e100:	f001 f8f0 	bl	800f2e4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800e104:	4b38      	ldr	r3, [pc, #224]	; (800e1e8 <xTaskResumeAll+0x114>)
 800e106:	681b      	ldr	r3, [r3, #0]
 800e108:	3b01      	subs	r3, #1
 800e10a:	4a37      	ldr	r2, [pc, #220]	; (800e1e8 <xTaskResumeAll+0x114>)
 800e10c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e10e:	4b36      	ldr	r3, [pc, #216]	; (800e1e8 <xTaskResumeAll+0x114>)
 800e110:	681b      	ldr	r3, [r3, #0]
 800e112:	2b00      	cmp	r3, #0
 800e114:	d161      	bne.n	800e1da <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800e116:	4b35      	ldr	r3, [pc, #212]	; (800e1ec <xTaskResumeAll+0x118>)
 800e118:	681b      	ldr	r3, [r3, #0]
 800e11a:	2b00      	cmp	r3, #0
 800e11c:	d05d      	beq.n	800e1da <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e11e:	e02e      	b.n	800e17e <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e120:	4b33      	ldr	r3, [pc, #204]	; (800e1f0 <xTaskResumeAll+0x11c>)
 800e122:	68db      	ldr	r3, [r3, #12]
 800e124:	68db      	ldr	r3, [r3, #12]
 800e126:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e128:	68fb      	ldr	r3, [r7, #12]
 800e12a:	3318      	adds	r3, #24
 800e12c:	4618      	mov	r0, r3
 800e12e:	f7fe fff7 	bl	800d120 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e132:	68fb      	ldr	r3, [r7, #12]
 800e134:	3304      	adds	r3, #4
 800e136:	4618      	mov	r0, r3
 800e138:	f7fe fff2 	bl	800d120 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800e13c:	68fb      	ldr	r3, [r7, #12]
 800e13e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e140:	2201      	movs	r2, #1
 800e142:	409a      	lsls	r2, r3
 800e144:	4b2b      	ldr	r3, [pc, #172]	; (800e1f4 <xTaskResumeAll+0x120>)
 800e146:	681b      	ldr	r3, [r3, #0]
 800e148:	4313      	orrs	r3, r2
 800e14a:	4a2a      	ldr	r2, [pc, #168]	; (800e1f4 <xTaskResumeAll+0x120>)
 800e14c:	6013      	str	r3, [r2, #0]
 800e14e:	68fb      	ldr	r3, [r7, #12]
 800e150:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e152:	4613      	mov	r3, r2
 800e154:	009b      	lsls	r3, r3, #2
 800e156:	4413      	add	r3, r2
 800e158:	009b      	lsls	r3, r3, #2
 800e15a:	4a27      	ldr	r2, [pc, #156]	; (800e1f8 <xTaskResumeAll+0x124>)
 800e15c:	441a      	add	r2, r3
 800e15e:	68fb      	ldr	r3, [r7, #12]
 800e160:	3304      	adds	r3, #4
 800e162:	4619      	mov	r1, r3
 800e164:	4610      	mov	r0, r2
 800e166:	f7fe ff7e 	bl	800d066 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e16a:	68fb      	ldr	r3, [r7, #12]
 800e16c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e16e:	4b23      	ldr	r3, [pc, #140]	; (800e1fc <xTaskResumeAll+0x128>)
 800e170:	681b      	ldr	r3, [r3, #0]
 800e172:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e174:	429a      	cmp	r2, r3
 800e176:	d302      	bcc.n	800e17e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800e178:	4b21      	ldr	r3, [pc, #132]	; (800e200 <xTaskResumeAll+0x12c>)
 800e17a:	2201      	movs	r2, #1
 800e17c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e17e:	4b1c      	ldr	r3, [pc, #112]	; (800e1f0 <xTaskResumeAll+0x11c>)
 800e180:	681b      	ldr	r3, [r3, #0]
 800e182:	2b00      	cmp	r3, #0
 800e184:	d1cc      	bne.n	800e120 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800e186:	68fb      	ldr	r3, [r7, #12]
 800e188:	2b00      	cmp	r3, #0
 800e18a:	d001      	beq.n	800e190 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800e18c:	f000 fb28 	bl	800e7e0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800e190:	4b1c      	ldr	r3, [pc, #112]	; (800e204 <xTaskResumeAll+0x130>)
 800e192:	681b      	ldr	r3, [r3, #0]
 800e194:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800e196:	687b      	ldr	r3, [r7, #4]
 800e198:	2b00      	cmp	r3, #0
 800e19a:	d010      	beq.n	800e1be <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800e19c:	f000 f846 	bl	800e22c <xTaskIncrementTick>
 800e1a0:	4603      	mov	r3, r0
 800e1a2:	2b00      	cmp	r3, #0
 800e1a4:	d002      	beq.n	800e1ac <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800e1a6:	4b16      	ldr	r3, [pc, #88]	; (800e200 <xTaskResumeAll+0x12c>)
 800e1a8:	2201      	movs	r2, #1
 800e1aa:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800e1ac:	687b      	ldr	r3, [r7, #4]
 800e1ae:	3b01      	subs	r3, #1
 800e1b0:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800e1b2:	687b      	ldr	r3, [r7, #4]
 800e1b4:	2b00      	cmp	r3, #0
 800e1b6:	d1f1      	bne.n	800e19c <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800e1b8:	4b12      	ldr	r3, [pc, #72]	; (800e204 <xTaskResumeAll+0x130>)
 800e1ba:	2200      	movs	r2, #0
 800e1bc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800e1be:	4b10      	ldr	r3, [pc, #64]	; (800e200 <xTaskResumeAll+0x12c>)
 800e1c0:	681b      	ldr	r3, [r3, #0]
 800e1c2:	2b00      	cmp	r3, #0
 800e1c4:	d009      	beq.n	800e1da <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800e1c6:	2301      	movs	r3, #1
 800e1c8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800e1ca:	4b0f      	ldr	r3, [pc, #60]	; (800e208 <xTaskResumeAll+0x134>)
 800e1cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e1d0:	601a      	str	r2, [r3, #0]
 800e1d2:	f3bf 8f4f 	dsb	sy
 800e1d6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e1da:	f001 f8b3 	bl	800f344 <vPortExitCritical>

	return xAlreadyYielded;
 800e1de:	68bb      	ldr	r3, [r7, #8]
}
 800e1e0:	4618      	mov	r0, r3
 800e1e2:	3710      	adds	r7, #16
 800e1e4:	46bd      	mov	sp, r7
 800e1e6:	bd80      	pop	{r7, pc}
 800e1e8:	20021ec4 	.word	0x20021ec4
 800e1ec:	20021e9c 	.word	0x20021e9c
 800e1f0:	20021e5c 	.word	0x20021e5c
 800e1f4:	20021ea4 	.word	0x20021ea4
 800e1f8:	20021da0 	.word	0x20021da0
 800e1fc:	20021d9c 	.word	0x20021d9c
 800e200:	20021eb0 	.word	0x20021eb0
 800e204:	20021eac 	.word	0x20021eac
 800e208:	e000ed04 	.word	0xe000ed04

0800e20c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800e20c:	b480      	push	{r7}
 800e20e:	b083      	sub	sp, #12
 800e210:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800e212:	4b05      	ldr	r3, [pc, #20]	; (800e228 <xTaskGetTickCount+0x1c>)
 800e214:	681b      	ldr	r3, [r3, #0]
 800e216:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800e218:	687b      	ldr	r3, [r7, #4]
}
 800e21a:	4618      	mov	r0, r3
 800e21c:	370c      	adds	r7, #12
 800e21e:	46bd      	mov	sp, r7
 800e220:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e224:	4770      	bx	lr
 800e226:	bf00      	nop
 800e228:	20021ea0 	.word	0x20021ea0

0800e22c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800e22c:	b580      	push	{r7, lr}
 800e22e:	b086      	sub	sp, #24
 800e230:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800e232:	2300      	movs	r3, #0
 800e234:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e236:	4b4e      	ldr	r3, [pc, #312]	; (800e370 <xTaskIncrementTick+0x144>)
 800e238:	681b      	ldr	r3, [r3, #0]
 800e23a:	2b00      	cmp	r3, #0
 800e23c:	f040 808e 	bne.w	800e35c <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800e240:	4b4c      	ldr	r3, [pc, #304]	; (800e374 <xTaskIncrementTick+0x148>)
 800e242:	681b      	ldr	r3, [r3, #0]
 800e244:	3301      	adds	r3, #1
 800e246:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800e248:	4a4a      	ldr	r2, [pc, #296]	; (800e374 <xTaskIncrementTick+0x148>)
 800e24a:	693b      	ldr	r3, [r7, #16]
 800e24c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800e24e:	693b      	ldr	r3, [r7, #16]
 800e250:	2b00      	cmp	r3, #0
 800e252:	d120      	bne.n	800e296 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800e254:	4b48      	ldr	r3, [pc, #288]	; (800e378 <xTaskIncrementTick+0x14c>)
 800e256:	681b      	ldr	r3, [r3, #0]
 800e258:	681b      	ldr	r3, [r3, #0]
 800e25a:	2b00      	cmp	r3, #0
 800e25c:	d00a      	beq.n	800e274 <xTaskIncrementTick+0x48>
	__asm volatile
 800e25e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e262:	f383 8811 	msr	BASEPRI, r3
 800e266:	f3bf 8f6f 	isb	sy
 800e26a:	f3bf 8f4f 	dsb	sy
 800e26e:	603b      	str	r3, [r7, #0]
}
 800e270:	bf00      	nop
 800e272:	e7fe      	b.n	800e272 <xTaskIncrementTick+0x46>
 800e274:	4b40      	ldr	r3, [pc, #256]	; (800e378 <xTaskIncrementTick+0x14c>)
 800e276:	681b      	ldr	r3, [r3, #0]
 800e278:	60fb      	str	r3, [r7, #12]
 800e27a:	4b40      	ldr	r3, [pc, #256]	; (800e37c <xTaskIncrementTick+0x150>)
 800e27c:	681b      	ldr	r3, [r3, #0]
 800e27e:	4a3e      	ldr	r2, [pc, #248]	; (800e378 <xTaskIncrementTick+0x14c>)
 800e280:	6013      	str	r3, [r2, #0]
 800e282:	4a3e      	ldr	r2, [pc, #248]	; (800e37c <xTaskIncrementTick+0x150>)
 800e284:	68fb      	ldr	r3, [r7, #12]
 800e286:	6013      	str	r3, [r2, #0]
 800e288:	4b3d      	ldr	r3, [pc, #244]	; (800e380 <xTaskIncrementTick+0x154>)
 800e28a:	681b      	ldr	r3, [r3, #0]
 800e28c:	3301      	adds	r3, #1
 800e28e:	4a3c      	ldr	r2, [pc, #240]	; (800e380 <xTaskIncrementTick+0x154>)
 800e290:	6013      	str	r3, [r2, #0]
 800e292:	f000 faa5 	bl	800e7e0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800e296:	4b3b      	ldr	r3, [pc, #236]	; (800e384 <xTaskIncrementTick+0x158>)
 800e298:	681b      	ldr	r3, [r3, #0]
 800e29a:	693a      	ldr	r2, [r7, #16]
 800e29c:	429a      	cmp	r2, r3
 800e29e:	d348      	bcc.n	800e332 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e2a0:	4b35      	ldr	r3, [pc, #212]	; (800e378 <xTaskIncrementTick+0x14c>)
 800e2a2:	681b      	ldr	r3, [r3, #0]
 800e2a4:	681b      	ldr	r3, [r3, #0]
 800e2a6:	2b00      	cmp	r3, #0
 800e2a8:	d104      	bne.n	800e2b4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e2aa:	4b36      	ldr	r3, [pc, #216]	; (800e384 <xTaskIncrementTick+0x158>)
 800e2ac:	f04f 32ff 	mov.w	r2, #4294967295
 800e2b0:	601a      	str	r2, [r3, #0]
					break;
 800e2b2:	e03e      	b.n	800e332 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e2b4:	4b30      	ldr	r3, [pc, #192]	; (800e378 <xTaskIncrementTick+0x14c>)
 800e2b6:	681b      	ldr	r3, [r3, #0]
 800e2b8:	68db      	ldr	r3, [r3, #12]
 800e2ba:	68db      	ldr	r3, [r3, #12]
 800e2bc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800e2be:	68bb      	ldr	r3, [r7, #8]
 800e2c0:	685b      	ldr	r3, [r3, #4]
 800e2c2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800e2c4:	693a      	ldr	r2, [r7, #16]
 800e2c6:	687b      	ldr	r3, [r7, #4]
 800e2c8:	429a      	cmp	r2, r3
 800e2ca:	d203      	bcs.n	800e2d4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800e2cc:	4a2d      	ldr	r2, [pc, #180]	; (800e384 <xTaskIncrementTick+0x158>)
 800e2ce:	687b      	ldr	r3, [r7, #4]
 800e2d0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800e2d2:	e02e      	b.n	800e332 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e2d4:	68bb      	ldr	r3, [r7, #8]
 800e2d6:	3304      	adds	r3, #4
 800e2d8:	4618      	mov	r0, r3
 800e2da:	f7fe ff21 	bl	800d120 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800e2de:	68bb      	ldr	r3, [r7, #8]
 800e2e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e2e2:	2b00      	cmp	r3, #0
 800e2e4:	d004      	beq.n	800e2f0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e2e6:	68bb      	ldr	r3, [r7, #8]
 800e2e8:	3318      	adds	r3, #24
 800e2ea:	4618      	mov	r0, r3
 800e2ec:	f7fe ff18 	bl	800d120 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800e2f0:	68bb      	ldr	r3, [r7, #8]
 800e2f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e2f4:	2201      	movs	r2, #1
 800e2f6:	409a      	lsls	r2, r3
 800e2f8:	4b23      	ldr	r3, [pc, #140]	; (800e388 <xTaskIncrementTick+0x15c>)
 800e2fa:	681b      	ldr	r3, [r3, #0]
 800e2fc:	4313      	orrs	r3, r2
 800e2fe:	4a22      	ldr	r2, [pc, #136]	; (800e388 <xTaskIncrementTick+0x15c>)
 800e300:	6013      	str	r3, [r2, #0]
 800e302:	68bb      	ldr	r3, [r7, #8]
 800e304:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e306:	4613      	mov	r3, r2
 800e308:	009b      	lsls	r3, r3, #2
 800e30a:	4413      	add	r3, r2
 800e30c:	009b      	lsls	r3, r3, #2
 800e30e:	4a1f      	ldr	r2, [pc, #124]	; (800e38c <xTaskIncrementTick+0x160>)
 800e310:	441a      	add	r2, r3
 800e312:	68bb      	ldr	r3, [r7, #8]
 800e314:	3304      	adds	r3, #4
 800e316:	4619      	mov	r1, r3
 800e318:	4610      	mov	r0, r2
 800e31a:	f7fe fea4 	bl	800d066 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e31e:	68bb      	ldr	r3, [r7, #8]
 800e320:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e322:	4b1b      	ldr	r3, [pc, #108]	; (800e390 <xTaskIncrementTick+0x164>)
 800e324:	681b      	ldr	r3, [r3, #0]
 800e326:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e328:	429a      	cmp	r2, r3
 800e32a:	d3b9      	bcc.n	800e2a0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800e32c:	2301      	movs	r3, #1
 800e32e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e330:	e7b6      	b.n	800e2a0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800e332:	4b17      	ldr	r3, [pc, #92]	; (800e390 <xTaskIncrementTick+0x164>)
 800e334:	681b      	ldr	r3, [r3, #0]
 800e336:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e338:	4914      	ldr	r1, [pc, #80]	; (800e38c <xTaskIncrementTick+0x160>)
 800e33a:	4613      	mov	r3, r2
 800e33c:	009b      	lsls	r3, r3, #2
 800e33e:	4413      	add	r3, r2
 800e340:	009b      	lsls	r3, r3, #2
 800e342:	440b      	add	r3, r1
 800e344:	681b      	ldr	r3, [r3, #0]
 800e346:	2b01      	cmp	r3, #1
 800e348:	d901      	bls.n	800e34e <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800e34a:	2301      	movs	r3, #1
 800e34c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800e34e:	4b11      	ldr	r3, [pc, #68]	; (800e394 <xTaskIncrementTick+0x168>)
 800e350:	681b      	ldr	r3, [r3, #0]
 800e352:	2b00      	cmp	r3, #0
 800e354:	d007      	beq.n	800e366 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800e356:	2301      	movs	r3, #1
 800e358:	617b      	str	r3, [r7, #20]
 800e35a:	e004      	b.n	800e366 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800e35c:	4b0e      	ldr	r3, [pc, #56]	; (800e398 <xTaskIncrementTick+0x16c>)
 800e35e:	681b      	ldr	r3, [r3, #0]
 800e360:	3301      	adds	r3, #1
 800e362:	4a0d      	ldr	r2, [pc, #52]	; (800e398 <xTaskIncrementTick+0x16c>)
 800e364:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800e366:	697b      	ldr	r3, [r7, #20]
}
 800e368:	4618      	mov	r0, r3
 800e36a:	3718      	adds	r7, #24
 800e36c:	46bd      	mov	sp, r7
 800e36e:	bd80      	pop	{r7, pc}
 800e370:	20021ec4 	.word	0x20021ec4
 800e374:	20021ea0 	.word	0x20021ea0
 800e378:	20021e54 	.word	0x20021e54
 800e37c:	20021e58 	.word	0x20021e58
 800e380:	20021eb4 	.word	0x20021eb4
 800e384:	20021ebc 	.word	0x20021ebc
 800e388:	20021ea4 	.word	0x20021ea4
 800e38c:	20021da0 	.word	0x20021da0
 800e390:	20021d9c 	.word	0x20021d9c
 800e394:	20021eb0 	.word	0x20021eb0
 800e398:	20021eac 	.word	0x20021eac

0800e39c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800e39c:	b480      	push	{r7}
 800e39e:	b087      	sub	sp, #28
 800e3a0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800e3a2:	4b27      	ldr	r3, [pc, #156]	; (800e440 <vTaskSwitchContext+0xa4>)
 800e3a4:	681b      	ldr	r3, [r3, #0]
 800e3a6:	2b00      	cmp	r3, #0
 800e3a8:	d003      	beq.n	800e3b2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800e3aa:	4b26      	ldr	r3, [pc, #152]	; (800e444 <vTaskSwitchContext+0xa8>)
 800e3ac:	2201      	movs	r2, #1
 800e3ae:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800e3b0:	e03f      	b.n	800e432 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 800e3b2:	4b24      	ldr	r3, [pc, #144]	; (800e444 <vTaskSwitchContext+0xa8>)
 800e3b4:	2200      	movs	r2, #0
 800e3b6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e3b8:	4b23      	ldr	r3, [pc, #140]	; (800e448 <vTaskSwitchContext+0xac>)
 800e3ba:	681b      	ldr	r3, [r3, #0]
 800e3bc:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800e3be:	68fb      	ldr	r3, [r7, #12]
 800e3c0:	fab3 f383 	clz	r3, r3
 800e3c4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800e3c6:	7afb      	ldrb	r3, [r7, #11]
 800e3c8:	f1c3 031f 	rsb	r3, r3, #31
 800e3cc:	617b      	str	r3, [r7, #20]
 800e3ce:	491f      	ldr	r1, [pc, #124]	; (800e44c <vTaskSwitchContext+0xb0>)
 800e3d0:	697a      	ldr	r2, [r7, #20]
 800e3d2:	4613      	mov	r3, r2
 800e3d4:	009b      	lsls	r3, r3, #2
 800e3d6:	4413      	add	r3, r2
 800e3d8:	009b      	lsls	r3, r3, #2
 800e3da:	440b      	add	r3, r1
 800e3dc:	681b      	ldr	r3, [r3, #0]
 800e3de:	2b00      	cmp	r3, #0
 800e3e0:	d10a      	bne.n	800e3f8 <vTaskSwitchContext+0x5c>
	__asm volatile
 800e3e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3e6:	f383 8811 	msr	BASEPRI, r3
 800e3ea:	f3bf 8f6f 	isb	sy
 800e3ee:	f3bf 8f4f 	dsb	sy
 800e3f2:	607b      	str	r3, [r7, #4]
}
 800e3f4:	bf00      	nop
 800e3f6:	e7fe      	b.n	800e3f6 <vTaskSwitchContext+0x5a>
 800e3f8:	697a      	ldr	r2, [r7, #20]
 800e3fa:	4613      	mov	r3, r2
 800e3fc:	009b      	lsls	r3, r3, #2
 800e3fe:	4413      	add	r3, r2
 800e400:	009b      	lsls	r3, r3, #2
 800e402:	4a12      	ldr	r2, [pc, #72]	; (800e44c <vTaskSwitchContext+0xb0>)
 800e404:	4413      	add	r3, r2
 800e406:	613b      	str	r3, [r7, #16]
 800e408:	693b      	ldr	r3, [r7, #16]
 800e40a:	685b      	ldr	r3, [r3, #4]
 800e40c:	685a      	ldr	r2, [r3, #4]
 800e40e:	693b      	ldr	r3, [r7, #16]
 800e410:	605a      	str	r2, [r3, #4]
 800e412:	693b      	ldr	r3, [r7, #16]
 800e414:	685a      	ldr	r2, [r3, #4]
 800e416:	693b      	ldr	r3, [r7, #16]
 800e418:	3308      	adds	r3, #8
 800e41a:	429a      	cmp	r2, r3
 800e41c:	d104      	bne.n	800e428 <vTaskSwitchContext+0x8c>
 800e41e:	693b      	ldr	r3, [r7, #16]
 800e420:	685b      	ldr	r3, [r3, #4]
 800e422:	685a      	ldr	r2, [r3, #4]
 800e424:	693b      	ldr	r3, [r7, #16]
 800e426:	605a      	str	r2, [r3, #4]
 800e428:	693b      	ldr	r3, [r7, #16]
 800e42a:	685b      	ldr	r3, [r3, #4]
 800e42c:	68db      	ldr	r3, [r3, #12]
 800e42e:	4a08      	ldr	r2, [pc, #32]	; (800e450 <vTaskSwitchContext+0xb4>)
 800e430:	6013      	str	r3, [r2, #0]
}
 800e432:	bf00      	nop
 800e434:	371c      	adds	r7, #28
 800e436:	46bd      	mov	sp, r7
 800e438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e43c:	4770      	bx	lr
 800e43e:	bf00      	nop
 800e440:	20021ec4 	.word	0x20021ec4
 800e444:	20021eb0 	.word	0x20021eb0
 800e448:	20021ea4 	.word	0x20021ea4
 800e44c:	20021da0 	.word	0x20021da0
 800e450:	20021d9c 	.word	0x20021d9c

0800e454 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800e454:	b580      	push	{r7, lr}
 800e456:	b084      	sub	sp, #16
 800e458:	af00      	add	r7, sp, #0
 800e45a:	6078      	str	r0, [r7, #4]
 800e45c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800e45e:	687b      	ldr	r3, [r7, #4]
 800e460:	2b00      	cmp	r3, #0
 800e462:	d10a      	bne.n	800e47a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800e464:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e468:	f383 8811 	msr	BASEPRI, r3
 800e46c:	f3bf 8f6f 	isb	sy
 800e470:	f3bf 8f4f 	dsb	sy
 800e474:	60fb      	str	r3, [r7, #12]
}
 800e476:	bf00      	nop
 800e478:	e7fe      	b.n	800e478 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e47a:	4b07      	ldr	r3, [pc, #28]	; (800e498 <vTaskPlaceOnEventList+0x44>)
 800e47c:	681b      	ldr	r3, [r3, #0]
 800e47e:	3318      	adds	r3, #24
 800e480:	4619      	mov	r1, r3
 800e482:	6878      	ldr	r0, [r7, #4]
 800e484:	f7fe fe13 	bl	800d0ae <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800e488:	2101      	movs	r1, #1
 800e48a:	6838      	ldr	r0, [r7, #0]
 800e48c:	f000 fa6c 	bl	800e968 <prvAddCurrentTaskToDelayedList>
}
 800e490:	bf00      	nop
 800e492:	3710      	adds	r7, #16
 800e494:	46bd      	mov	sp, r7
 800e496:	bd80      	pop	{r7, pc}
 800e498:	20021d9c 	.word	0x20021d9c

0800e49c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800e49c:	b580      	push	{r7, lr}
 800e49e:	b086      	sub	sp, #24
 800e4a0:	af00      	add	r7, sp, #0
 800e4a2:	60f8      	str	r0, [r7, #12]
 800e4a4:	60b9      	str	r1, [r7, #8]
 800e4a6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800e4a8:	68fb      	ldr	r3, [r7, #12]
 800e4aa:	2b00      	cmp	r3, #0
 800e4ac:	d10a      	bne.n	800e4c4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800e4ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4b2:	f383 8811 	msr	BASEPRI, r3
 800e4b6:	f3bf 8f6f 	isb	sy
 800e4ba:	f3bf 8f4f 	dsb	sy
 800e4be:	617b      	str	r3, [r7, #20]
}
 800e4c0:	bf00      	nop
 800e4c2:	e7fe      	b.n	800e4c2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e4c4:	4b0a      	ldr	r3, [pc, #40]	; (800e4f0 <vTaskPlaceOnEventListRestricted+0x54>)
 800e4c6:	681b      	ldr	r3, [r3, #0]
 800e4c8:	3318      	adds	r3, #24
 800e4ca:	4619      	mov	r1, r3
 800e4cc:	68f8      	ldr	r0, [r7, #12]
 800e4ce:	f7fe fdca 	bl	800d066 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800e4d2:	687b      	ldr	r3, [r7, #4]
 800e4d4:	2b00      	cmp	r3, #0
 800e4d6:	d002      	beq.n	800e4de <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800e4d8:	f04f 33ff 	mov.w	r3, #4294967295
 800e4dc:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800e4de:	6879      	ldr	r1, [r7, #4]
 800e4e0:	68b8      	ldr	r0, [r7, #8]
 800e4e2:	f000 fa41 	bl	800e968 <prvAddCurrentTaskToDelayedList>
	}
 800e4e6:	bf00      	nop
 800e4e8:	3718      	adds	r7, #24
 800e4ea:	46bd      	mov	sp, r7
 800e4ec:	bd80      	pop	{r7, pc}
 800e4ee:	bf00      	nop
 800e4f0:	20021d9c 	.word	0x20021d9c

0800e4f4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800e4f4:	b580      	push	{r7, lr}
 800e4f6:	b086      	sub	sp, #24
 800e4f8:	af00      	add	r7, sp, #0
 800e4fa:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e4fc:	687b      	ldr	r3, [r7, #4]
 800e4fe:	68db      	ldr	r3, [r3, #12]
 800e500:	68db      	ldr	r3, [r3, #12]
 800e502:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800e504:	693b      	ldr	r3, [r7, #16]
 800e506:	2b00      	cmp	r3, #0
 800e508:	d10a      	bne.n	800e520 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800e50a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e50e:	f383 8811 	msr	BASEPRI, r3
 800e512:	f3bf 8f6f 	isb	sy
 800e516:	f3bf 8f4f 	dsb	sy
 800e51a:	60fb      	str	r3, [r7, #12]
}
 800e51c:	bf00      	nop
 800e51e:	e7fe      	b.n	800e51e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800e520:	693b      	ldr	r3, [r7, #16]
 800e522:	3318      	adds	r3, #24
 800e524:	4618      	mov	r0, r3
 800e526:	f7fe fdfb 	bl	800d120 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e52a:	4b1d      	ldr	r3, [pc, #116]	; (800e5a0 <xTaskRemoveFromEventList+0xac>)
 800e52c:	681b      	ldr	r3, [r3, #0]
 800e52e:	2b00      	cmp	r3, #0
 800e530:	d11c      	bne.n	800e56c <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800e532:	693b      	ldr	r3, [r7, #16]
 800e534:	3304      	adds	r3, #4
 800e536:	4618      	mov	r0, r3
 800e538:	f7fe fdf2 	bl	800d120 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800e53c:	693b      	ldr	r3, [r7, #16]
 800e53e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e540:	2201      	movs	r2, #1
 800e542:	409a      	lsls	r2, r3
 800e544:	4b17      	ldr	r3, [pc, #92]	; (800e5a4 <xTaskRemoveFromEventList+0xb0>)
 800e546:	681b      	ldr	r3, [r3, #0]
 800e548:	4313      	orrs	r3, r2
 800e54a:	4a16      	ldr	r2, [pc, #88]	; (800e5a4 <xTaskRemoveFromEventList+0xb0>)
 800e54c:	6013      	str	r3, [r2, #0]
 800e54e:	693b      	ldr	r3, [r7, #16]
 800e550:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e552:	4613      	mov	r3, r2
 800e554:	009b      	lsls	r3, r3, #2
 800e556:	4413      	add	r3, r2
 800e558:	009b      	lsls	r3, r3, #2
 800e55a:	4a13      	ldr	r2, [pc, #76]	; (800e5a8 <xTaskRemoveFromEventList+0xb4>)
 800e55c:	441a      	add	r2, r3
 800e55e:	693b      	ldr	r3, [r7, #16]
 800e560:	3304      	adds	r3, #4
 800e562:	4619      	mov	r1, r3
 800e564:	4610      	mov	r0, r2
 800e566:	f7fe fd7e 	bl	800d066 <vListInsertEnd>
 800e56a:	e005      	b.n	800e578 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800e56c:	693b      	ldr	r3, [r7, #16]
 800e56e:	3318      	adds	r3, #24
 800e570:	4619      	mov	r1, r3
 800e572:	480e      	ldr	r0, [pc, #56]	; (800e5ac <xTaskRemoveFromEventList+0xb8>)
 800e574:	f7fe fd77 	bl	800d066 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e578:	693b      	ldr	r3, [r7, #16]
 800e57a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e57c:	4b0c      	ldr	r3, [pc, #48]	; (800e5b0 <xTaskRemoveFromEventList+0xbc>)
 800e57e:	681b      	ldr	r3, [r3, #0]
 800e580:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e582:	429a      	cmp	r2, r3
 800e584:	d905      	bls.n	800e592 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800e586:	2301      	movs	r3, #1
 800e588:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800e58a:	4b0a      	ldr	r3, [pc, #40]	; (800e5b4 <xTaskRemoveFromEventList+0xc0>)
 800e58c:	2201      	movs	r2, #1
 800e58e:	601a      	str	r2, [r3, #0]
 800e590:	e001      	b.n	800e596 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800e592:	2300      	movs	r3, #0
 800e594:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800e596:	697b      	ldr	r3, [r7, #20]
}
 800e598:	4618      	mov	r0, r3
 800e59a:	3718      	adds	r7, #24
 800e59c:	46bd      	mov	sp, r7
 800e59e:	bd80      	pop	{r7, pc}
 800e5a0:	20021ec4 	.word	0x20021ec4
 800e5a4:	20021ea4 	.word	0x20021ea4
 800e5a8:	20021da0 	.word	0x20021da0
 800e5ac:	20021e5c 	.word	0x20021e5c
 800e5b0:	20021d9c 	.word	0x20021d9c
 800e5b4:	20021eb0 	.word	0x20021eb0

0800e5b8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800e5b8:	b480      	push	{r7}
 800e5ba:	b083      	sub	sp, #12
 800e5bc:	af00      	add	r7, sp, #0
 800e5be:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800e5c0:	4b06      	ldr	r3, [pc, #24]	; (800e5dc <vTaskInternalSetTimeOutState+0x24>)
 800e5c2:	681a      	ldr	r2, [r3, #0]
 800e5c4:	687b      	ldr	r3, [r7, #4]
 800e5c6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800e5c8:	4b05      	ldr	r3, [pc, #20]	; (800e5e0 <vTaskInternalSetTimeOutState+0x28>)
 800e5ca:	681a      	ldr	r2, [r3, #0]
 800e5cc:	687b      	ldr	r3, [r7, #4]
 800e5ce:	605a      	str	r2, [r3, #4]
}
 800e5d0:	bf00      	nop
 800e5d2:	370c      	adds	r7, #12
 800e5d4:	46bd      	mov	sp, r7
 800e5d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5da:	4770      	bx	lr
 800e5dc:	20021eb4 	.word	0x20021eb4
 800e5e0:	20021ea0 	.word	0x20021ea0

0800e5e4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800e5e4:	b580      	push	{r7, lr}
 800e5e6:	b088      	sub	sp, #32
 800e5e8:	af00      	add	r7, sp, #0
 800e5ea:	6078      	str	r0, [r7, #4]
 800e5ec:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800e5ee:	687b      	ldr	r3, [r7, #4]
 800e5f0:	2b00      	cmp	r3, #0
 800e5f2:	d10a      	bne.n	800e60a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800e5f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5f8:	f383 8811 	msr	BASEPRI, r3
 800e5fc:	f3bf 8f6f 	isb	sy
 800e600:	f3bf 8f4f 	dsb	sy
 800e604:	613b      	str	r3, [r7, #16]
}
 800e606:	bf00      	nop
 800e608:	e7fe      	b.n	800e608 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800e60a:	683b      	ldr	r3, [r7, #0]
 800e60c:	2b00      	cmp	r3, #0
 800e60e:	d10a      	bne.n	800e626 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800e610:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e614:	f383 8811 	msr	BASEPRI, r3
 800e618:	f3bf 8f6f 	isb	sy
 800e61c:	f3bf 8f4f 	dsb	sy
 800e620:	60fb      	str	r3, [r7, #12]
}
 800e622:	bf00      	nop
 800e624:	e7fe      	b.n	800e624 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800e626:	f000 fe5d 	bl	800f2e4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800e62a:	4b1d      	ldr	r3, [pc, #116]	; (800e6a0 <xTaskCheckForTimeOut+0xbc>)
 800e62c:	681b      	ldr	r3, [r3, #0]
 800e62e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800e630:	687b      	ldr	r3, [r7, #4]
 800e632:	685b      	ldr	r3, [r3, #4]
 800e634:	69ba      	ldr	r2, [r7, #24]
 800e636:	1ad3      	subs	r3, r2, r3
 800e638:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800e63a:	683b      	ldr	r3, [r7, #0]
 800e63c:	681b      	ldr	r3, [r3, #0]
 800e63e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e642:	d102      	bne.n	800e64a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800e644:	2300      	movs	r3, #0
 800e646:	61fb      	str	r3, [r7, #28]
 800e648:	e023      	b.n	800e692 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800e64a:	687b      	ldr	r3, [r7, #4]
 800e64c:	681a      	ldr	r2, [r3, #0]
 800e64e:	4b15      	ldr	r3, [pc, #84]	; (800e6a4 <xTaskCheckForTimeOut+0xc0>)
 800e650:	681b      	ldr	r3, [r3, #0]
 800e652:	429a      	cmp	r2, r3
 800e654:	d007      	beq.n	800e666 <xTaskCheckForTimeOut+0x82>
 800e656:	687b      	ldr	r3, [r7, #4]
 800e658:	685b      	ldr	r3, [r3, #4]
 800e65a:	69ba      	ldr	r2, [r7, #24]
 800e65c:	429a      	cmp	r2, r3
 800e65e:	d302      	bcc.n	800e666 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800e660:	2301      	movs	r3, #1
 800e662:	61fb      	str	r3, [r7, #28]
 800e664:	e015      	b.n	800e692 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800e666:	683b      	ldr	r3, [r7, #0]
 800e668:	681b      	ldr	r3, [r3, #0]
 800e66a:	697a      	ldr	r2, [r7, #20]
 800e66c:	429a      	cmp	r2, r3
 800e66e:	d20b      	bcs.n	800e688 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800e670:	683b      	ldr	r3, [r7, #0]
 800e672:	681a      	ldr	r2, [r3, #0]
 800e674:	697b      	ldr	r3, [r7, #20]
 800e676:	1ad2      	subs	r2, r2, r3
 800e678:	683b      	ldr	r3, [r7, #0]
 800e67a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800e67c:	6878      	ldr	r0, [r7, #4]
 800e67e:	f7ff ff9b 	bl	800e5b8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800e682:	2300      	movs	r3, #0
 800e684:	61fb      	str	r3, [r7, #28]
 800e686:	e004      	b.n	800e692 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800e688:	683b      	ldr	r3, [r7, #0]
 800e68a:	2200      	movs	r2, #0
 800e68c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800e68e:	2301      	movs	r3, #1
 800e690:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800e692:	f000 fe57 	bl	800f344 <vPortExitCritical>

	return xReturn;
 800e696:	69fb      	ldr	r3, [r7, #28]
}
 800e698:	4618      	mov	r0, r3
 800e69a:	3720      	adds	r7, #32
 800e69c:	46bd      	mov	sp, r7
 800e69e:	bd80      	pop	{r7, pc}
 800e6a0:	20021ea0 	.word	0x20021ea0
 800e6a4:	20021eb4 	.word	0x20021eb4

0800e6a8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800e6a8:	b480      	push	{r7}
 800e6aa:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800e6ac:	4b03      	ldr	r3, [pc, #12]	; (800e6bc <vTaskMissedYield+0x14>)
 800e6ae:	2201      	movs	r2, #1
 800e6b0:	601a      	str	r2, [r3, #0]
}
 800e6b2:	bf00      	nop
 800e6b4:	46bd      	mov	sp, r7
 800e6b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6ba:	4770      	bx	lr
 800e6bc:	20021eb0 	.word	0x20021eb0

0800e6c0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800e6c0:	b580      	push	{r7, lr}
 800e6c2:	b082      	sub	sp, #8
 800e6c4:	af00      	add	r7, sp, #0
 800e6c6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800e6c8:	f000 f852 	bl	800e770 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800e6cc:	4b06      	ldr	r3, [pc, #24]	; (800e6e8 <prvIdleTask+0x28>)
 800e6ce:	681b      	ldr	r3, [r3, #0]
 800e6d0:	2b01      	cmp	r3, #1
 800e6d2:	d9f9      	bls.n	800e6c8 <prvIdleTask+0x8>
			{
				taskYIELD();
 800e6d4:	4b05      	ldr	r3, [pc, #20]	; (800e6ec <prvIdleTask+0x2c>)
 800e6d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e6da:	601a      	str	r2, [r3, #0]
 800e6dc:	f3bf 8f4f 	dsb	sy
 800e6e0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800e6e4:	e7f0      	b.n	800e6c8 <prvIdleTask+0x8>
 800e6e6:	bf00      	nop
 800e6e8:	20021da0 	.word	0x20021da0
 800e6ec:	e000ed04 	.word	0xe000ed04

0800e6f0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800e6f0:	b580      	push	{r7, lr}
 800e6f2:	b082      	sub	sp, #8
 800e6f4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e6f6:	2300      	movs	r3, #0
 800e6f8:	607b      	str	r3, [r7, #4]
 800e6fa:	e00c      	b.n	800e716 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800e6fc:	687a      	ldr	r2, [r7, #4]
 800e6fe:	4613      	mov	r3, r2
 800e700:	009b      	lsls	r3, r3, #2
 800e702:	4413      	add	r3, r2
 800e704:	009b      	lsls	r3, r3, #2
 800e706:	4a12      	ldr	r2, [pc, #72]	; (800e750 <prvInitialiseTaskLists+0x60>)
 800e708:	4413      	add	r3, r2
 800e70a:	4618      	mov	r0, r3
 800e70c:	f7fe fc7e 	bl	800d00c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e710:	687b      	ldr	r3, [r7, #4]
 800e712:	3301      	adds	r3, #1
 800e714:	607b      	str	r3, [r7, #4]
 800e716:	687b      	ldr	r3, [r7, #4]
 800e718:	2b06      	cmp	r3, #6
 800e71a:	d9ef      	bls.n	800e6fc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800e71c:	480d      	ldr	r0, [pc, #52]	; (800e754 <prvInitialiseTaskLists+0x64>)
 800e71e:	f7fe fc75 	bl	800d00c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800e722:	480d      	ldr	r0, [pc, #52]	; (800e758 <prvInitialiseTaskLists+0x68>)
 800e724:	f7fe fc72 	bl	800d00c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800e728:	480c      	ldr	r0, [pc, #48]	; (800e75c <prvInitialiseTaskLists+0x6c>)
 800e72a:	f7fe fc6f 	bl	800d00c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800e72e:	480c      	ldr	r0, [pc, #48]	; (800e760 <prvInitialiseTaskLists+0x70>)
 800e730:	f7fe fc6c 	bl	800d00c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800e734:	480b      	ldr	r0, [pc, #44]	; (800e764 <prvInitialiseTaskLists+0x74>)
 800e736:	f7fe fc69 	bl	800d00c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800e73a:	4b0b      	ldr	r3, [pc, #44]	; (800e768 <prvInitialiseTaskLists+0x78>)
 800e73c:	4a05      	ldr	r2, [pc, #20]	; (800e754 <prvInitialiseTaskLists+0x64>)
 800e73e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800e740:	4b0a      	ldr	r3, [pc, #40]	; (800e76c <prvInitialiseTaskLists+0x7c>)
 800e742:	4a05      	ldr	r2, [pc, #20]	; (800e758 <prvInitialiseTaskLists+0x68>)
 800e744:	601a      	str	r2, [r3, #0]
}
 800e746:	bf00      	nop
 800e748:	3708      	adds	r7, #8
 800e74a:	46bd      	mov	sp, r7
 800e74c:	bd80      	pop	{r7, pc}
 800e74e:	bf00      	nop
 800e750:	20021da0 	.word	0x20021da0
 800e754:	20021e2c 	.word	0x20021e2c
 800e758:	20021e40 	.word	0x20021e40
 800e75c:	20021e5c 	.word	0x20021e5c
 800e760:	20021e70 	.word	0x20021e70
 800e764:	20021e88 	.word	0x20021e88
 800e768:	20021e54 	.word	0x20021e54
 800e76c:	20021e58 	.word	0x20021e58

0800e770 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800e770:	b580      	push	{r7, lr}
 800e772:	b082      	sub	sp, #8
 800e774:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e776:	e019      	b.n	800e7ac <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800e778:	f000 fdb4 	bl	800f2e4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e77c:	4b10      	ldr	r3, [pc, #64]	; (800e7c0 <prvCheckTasksWaitingTermination+0x50>)
 800e77e:	68db      	ldr	r3, [r3, #12]
 800e780:	68db      	ldr	r3, [r3, #12]
 800e782:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e784:	687b      	ldr	r3, [r7, #4]
 800e786:	3304      	adds	r3, #4
 800e788:	4618      	mov	r0, r3
 800e78a:	f7fe fcc9 	bl	800d120 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800e78e:	4b0d      	ldr	r3, [pc, #52]	; (800e7c4 <prvCheckTasksWaitingTermination+0x54>)
 800e790:	681b      	ldr	r3, [r3, #0]
 800e792:	3b01      	subs	r3, #1
 800e794:	4a0b      	ldr	r2, [pc, #44]	; (800e7c4 <prvCheckTasksWaitingTermination+0x54>)
 800e796:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800e798:	4b0b      	ldr	r3, [pc, #44]	; (800e7c8 <prvCheckTasksWaitingTermination+0x58>)
 800e79a:	681b      	ldr	r3, [r3, #0]
 800e79c:	3b01      	subs	r3, #1
 800e79e:	4a0a      	ldr	r2, [pc, #40]	; (800e7c8 <prvCheckTasksWaitingTermination+0x58>)
 800e7a0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800e7a2:	f000 fdcf 	bl	800f344 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800e7a6:	6878      	ldr	r0, [r7, #4]
 800e7a8:	f000 f810 	bl	800e7cc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e7ac:	4b06      	ldr	r3, [pc, #24]	; (800e7c8 <prvCheckTasksWaitingTermination+0x58>)
 800e7ae:	681b      	ldr	r3, [r3, #0]
 800e7b0:	2b00      	cmp	r3, #0
 800e7b2:	d1e1      	bne.n	800e778 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800e7b4:	bf00      	nop
 800e7b6:	bf00      	nop
 800e7b8:	3708      	adds	r7, #8
 800e7ba:	46bd      	mov	sp, r7
 800e7bc:	bd80      	pop	{r7, pc}
 800e7be:	bf00      	nop
 800e7c0:	20021e70 	.word	0x20021e70
 800e7c4:	20021e9c 	.word	0x20021e9c
 800e7c8:	20021e84 	.word	0x20021e84

0800e7cc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800e7cc:	b480      	push	{r7}
 800e7ce:	b083      	sub	sp, #12
 800e7d0:	af00      	add	r7, sp, #0
 800e7d2:	6078      	str	r0, [r7, #4]
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800e7d4:	bf00      	nop
 800e7d6:	370c      	adds	r7, #12
 800e7d8:	46bd      	mov	sp, r7
 800e7da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7de:	4770      	bx	lr

0800e7e0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800e7e0:	b480      	push	{r7}
 800e7e2:	b083      	sub	sp, #12
 800e7e4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e7e6:	4b0c      	ldr	r3, [pc, #48]	; (800e818 <prvResetNextTaskUnblockTime+0x38>)
 800e7e8:	681b      	ldr	r3, [r3, #0]
 800e7ea:	681b      	ldr	r3, [r3, #0]
 800e7ec:	2b00      	cmp	r3, #0
 800e7ee:	d104      	bne.n	800e7fa <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800e7f0:	4b0a      	ldr	r3, [pc, #40]	; (800e81c <prvResetNextTaskUnblockTime+0x3c>)
 800e7f2:	f04f 32ff 	mov.w	r2, #4294967295
 800e7f6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800e7f8:	e008      	b.n	800e80c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e7fa:	4b07      	ldr	r3, [pc, #28]	; (800e818 <prvResetNextTaskUnblockTime+0x38>)
 800e7fc:	681b      	ldr	r3, [r3, #0]
 800e7fe:	68db      	ldr	r3, [r3, #12]
 800e800:	68db      	ldr	r3, [r3, #12]
 800e802:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800e804:	687b      	ldr	r3, [r7, #4]
 800e806:	685b      	ldr	r3, [r3, #4]
 800e808:	4a04      	ldr	r2, [pc, #16]	; (800e81c <prvResetNextTaskUnblockTime+0x3c>)
 800e80a:	6013      	str	r3, [r2, #0]
}
 800e80c:	bf00      	nop
 800e80e:	370c      	adds	r7, #12
 800e810:	46bd      	mov	sp, r7
 800e812:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e816:	4770      	bx	lr
 800e818:	20021e54 	.word	0x20021e54
 800e81c:	20021ebc 	.word	0x20021ebc

0800e820 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800e820:	b480      	push	{r7}
 800e822:	b083      	sub	sp, #12
 800e824:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800e826:	4b0b      	ldr	r3, [pc, #44]	; (800e854 <xTaskGetSchedulerState+0x34>)
 800e828:	681b      	ldr	r3, [r3, #0]
 800e82a:	2b00      	cmp	r3, #0
 800e82c:	d102      	bne.n	800e834 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800e82e:	2301      	movs	r3, #1
 800e830:	607b      	str	r3, [r7, #4]
 800e832:	e008      	b.n	800e846 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e834:	4b08      	ldr	r3, [pc, #32]	; (800e858 <xTaskGetSchedulerState+0x38>)
 800e836:	681b      	ldr	r3, [r3, #0]
 800e838:	2b00      	cmp	r3, #0
 800e83a:	d102      	bne.n	800e842 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800e83c:	2302      	movs	r3, #2
 800e83e:	607b      	str	r3, [r7, #4]
 800e840:	e001      	b.n	800e846 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800e842:	2300      	movs	r3, #0
 800e844:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800e846:	687b      	ldr	r3, [r7, #4]
	}
 800e848:	4618      	mov	r0, r3
 800e84a:	370c      	adds	r7, #12
 800e84c:	46bd      	mov	sp, r7
 800e84e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e852:	4770      	bx	lr
 800e854:	20021ea8 	.word	0x20021ea8
 800e858:	20021ec4 	.word	0x20021ec4

0800e85c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800e85c:	b580      	push	{r7, lr}
 800e85e:	b086      	sub	sp, #24
 800e860:	af00      	add	r7, sp, #0
 800e862:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800e864:	687b      	ldr	r3, [r7, #4]
 800e866:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800e868:	2300      	movs	r3, #0
 800e86a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e86c:	687b      	ldr	r3, [r7, #4]
 800e86e:	2b00      	cmp	r3, #0
 800e870:	d06e      	beq.n	800e950 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800e872:	4b3a      	ldr	r3, [pc, #232]	; (800e95c <xTaskPriorityDisinherit+0x100>)
 800e874:	681b      	ldr	r3, [r3, #0]
 800e876:	693a      	ldr	r2, [r7, #16]
 800e878:	429a      	cmp	r2, r3
 800e87a:	d00a      	beq.n	800e892 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800e87c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e880:	f383 8811 	msr	BASEPRI, r3
 800e884:	f3bf 8f6f 	isb	sy
 800e888:	f3bf 8f4f 	dsb	sy
 800e88c:	60fb      	str	r3, [r7, #12]
}
 800e88e:	bf00      	nop
 800e890:	e7fe      	b.n	800e890 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800e892:	693b      	ldr	r3, [r7, #16]
 800e894:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e896:	2b00      	cmp	r3, #0
 800e898:	d10a      	bne.n	800e8b0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800e89a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e89e:	f383 8811 	msr	BASEPRI, r3
 800e8a2:	f3bf 8f6f 	isb	sy
 800e8a6:	f3bf 8f4f 	dsb	sy
 800e8aa:	60bb      	str	r3, [r7, #8]
}
 800e8ac:	bf00      	nop
 800e8ae:	e7fe      	b.n	800e8ae <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800e8b0:	693b      	ldr	r3, [r7, #16]
 800e8b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e8b4:	1e5a      	subs	r2, r3, #1
 800e8b6:	693b      	ldr	r3, [r7, #16]
 800e8b8:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800e8ba:	693b      	ldr	r3, [r7, #16]
 800e8bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e8be:	693b      	ldr	r3, [r7, #16]
 800e8c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e8c2:	429a      	cmp	r2, r3
 800e8c4:	d044      	beq.n	800e950 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800e8c6:	693b      	ldr	r3, [r7, #16]
 800e8c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e8ca:	2b00      	cmp	r3, #0
 800e8cc:	d140      	bne.n	800e950 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e8ce:	693b      	ldr	r3, [r7, #16]
 800e8d0:	3304      	adds	r3, #4
 800e8d2:	4618      	mov	r0, r3
 800e8d4:	f7fe fc24 	bl	800d120 <uxListRemove>
 800e8d8:	4603      	mov	r3, r0
 800e8da:	2b00      	cmp	r3, #0
 800e8dc:	d115      	bne.n	800e90a <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800e8de:	693b      	ldr	r3, [r7, #16]
 800e8e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e8e2:	491f      	ldr	r1, [pc, #124]	; (800e960 <xTaskPriorityDisinherit+0x104>)
 800e8e4:	4613      	mov	r3, r2
 800e8e6:	009b      	lsls	r3, r3, #2
 800e8e8:	4413      	add	r3, r2
 800e8ea:	009b      	lsls	r3, r3, #2
 800e8ec:	440b      	add	r3, r1
 800e8ee:	681b      	ldr	r3, [r3, #0]
 800e8f0:	2b00      	cmp	r3, #0
 800e8f2:	d10a      	bne.n	800e90a <xTaskPriorityDisinherit+0xae>
 800e8f4:	693b      	ldr	r3, [r7, #16]
 800e8f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e8f8:	2201      	movs	r2, #1
 800e8fa:	fa02 f303 	lsl.w	r3, r2, r3
 800e8fe:	43da      	mvns	r2, r3
 800e900:	4b18      	ldr	r3, [pc, #96]	; (800e964 <xTaskPriorityDisinherit+0x108>)
 800e902:	681b      	ldr	r3, [r3, #0]
 800e904:	4013      	ands	r3, r2
 800e906:	4a17      	ldr	r2, [pc, #92]	; (800e964 <xTaskPriorityDisinherit+0x108>)
 800e908:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800e90a:	693b      	ldr	r3, [r7, #16]
 800e90c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e90e:	693b      	ldr	r3, [r7, #16]
 800e910:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e912:	693b      	ldr	r3, [r7, #16]
 800e914:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e916:	f1c3 0207 	rsb	r2, r3, #7
 800e91a:	693b      	ldr	r3, [r7, #16]
 800e91c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800e91e:	693b      	ldr	r3, [r7, #16]
 800e920:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e922:	2201      	movs	r2, #1
 800e924:	409a      	lsls	r2, r3
 800e926:	4b0f      	ldr	r3, [pc, #60]	; (800e964 <xTaskPriorityDisinherit+0x108>)
 800e928:	681b      	ldr	r3, [r3, #0]
 800e92a:	4313      	orrs	r3, r2
 800e92c:	4a0d      	ldr	r2, [pc, #52]	; (800e964 <xTaskPriorityDisinherit+0x108>)
 800e92e:	6013      	str	r3, [r2, #0]
 800e930:	693b      	ldr	r3, [r7, #16]
 800e932:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e934:	4613      	mov	r3, r2
 800e936:	009b      	lsls	r3, r3, #2
 800e938:	4413      	add	r3, r2
 800e93a:	009b      	lsls	r3, r3, #2
 800e93c:	4a08      	ldr	r2, [pc, #32]	; (800e960 <xTaskPriorityDisinherit+0x104>)
 800e93e:	441a      	add	r2, r3
 800e940:	693b      	ldr	r3, [r7, #16]
 800e942:	3304      	adds	r3, #4
 800e944:	4619      	mov	r1, r3
 800e946:	4610      	mov	r0, r2
 800e948:	f7fe fb8d 	bl	800d066 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800e94c:	2301      	movs	r3, #1
 800e94e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e950:	697b      	ldr	r3, [r7, #20]
	}
 800e952:	4618      	mov	r0, r3
 800e954:	3718      	adds	r7, #24
 800e956:	46bd      	mov	sp, r7
 800e958:	bd80      	pop	{r7, pc}
 800e95a:	bf00      	nop
 800e95c:	20021d9c 	.word	0x20021d9c
 800e960:	20021da0 	.word	0x20021da0
 800e964:	20021ea4 	.word	0x20021ea4

0800e968 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800e968:	b580      	push	{r7, lr}
 800e96a:	b084      	sub	sp, #16
 800e96c:	af00      	add	r7, sp, #0
 800e96e:	6078      	str	r0, [r7, #4]
 800e970:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800e972:	4b29      	ldr	r3, [pc, #164]	; (800ea18 <prvAddCurrentTaskToDelayedList+0xb0>)
 800e974:	681b      	ldr	r3, [r3, #0]
 800e976:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e978:	4b28      	ldr	r3, [pc, #160]	; (800ea1c <prvAddCurrentTaskToDelayedList+0xb4>)
 800e97a:	681b      	ldr	r3, [r3, #0]
 800e97c:	3304      	adds	r3, #4
 800e97e:	4618      	mov	r0, r3
 800e980:	f7fe fbce 	bl	800d120 <uxListRemove>
 800e984:	4603      	mov	r3, r0
 800e986:	2b00      	cmp	r3, #0
 800e988:	d10b      	bne.n	800e9a2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800e98a:	4b24      	ldr	r3, [pc, #144]	; (800ea1c <prvAddCurrentTaskToDelayedList+0xb4>)
 800e98c:	681b      	ldr	r3, [r3, #0]
 800e98e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e990:	2201      	movs	r2, #1
 800e992:	fa02 f303 	lsl.w	r3, r2, r3
 800e996:	43da      	mvns	r2, r3
 800e998:	4b21      	ldr	r3, [pc, #132]	; (800ea20 <prvAddCurrentTaskToDelayedList+0xb8>)
 800e99a:	681b      	ldr	r3, [r3, #0]
 800e99c:	4013      	ands	r3, r2
 800e99e:	4a20      	ldr	r2, [pc, #128]	; (800ea20 <prvAddCurrentTaskToDelayedList+0xb8>)
 800e9a0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800e9a2:	687b      	ldr	r3, [r7, #4]
 800e9a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e9a8:	d10a      	bne.n	800e9c0 <prvAddCurrentTaskToDelayedList+0x58>
 800e9aa:	683b      	ldr	r3, [r7, #0]
 800e9ac:	2b00      	cmp	r3, #0
 800e9ae:	d007      	beq.n	800e9c0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e9b0:	4b1a      	ldr	r3, [pc, #104]	; (800ea1c <prvAddCurrentTaskToDelayedList+0xb4>)
 800e9b2:	681b      	ldr	r3, [r3, #0]
 800e9b4:	3304      	adds	r3, #4
 800e9b6:	4619      	mov	r1, r3
 800e9b8:	481a      	ldr	r0, [pc, #104]	; (800ea24 <prvAddCurrentTaskToDelayedList+0xbc>)
 800e9ba:	f7fe fb54 	bl	800d066 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800e9be:	e026      	b.n	800ea0e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800e9c0:	68fa      	ldr	r2, [r7, #12]
 800e9c2:	687b      	ldr	r3, [r7, #4]
 800e9c4:	4413      	add	r3, r2
 800e9c6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800e9c8:	4b14      	ldr	r3, [pc, #80]	; (800ea1c <prvAddCurrentTaskToDelayedList+0xb4>)
 800e9ca:	681b      	ldr	r3, [r3, #0]
 800e9cc:	68ba      	ldr	r2, [r7, #8]
 800e9ce:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800e9d0:	68ba      	ldr	r2, [r7, #8]
 800e9d2:	68fb      	ldr	r3, [r7, #12]
 800e9d4:	429a      	cmp	r2, r3
 800e9d6:	d209      	bcs.n	800e9ec <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e9d8:	4b13      	ldr	r3, [pc, #76]	; (800ea28 <prvAddCurrentTaskToDelayedList+0xc0>)
 800e9da:	681a      	ldr	r2, [r3, #0]
 800e9dc:	4b0f      	ldr	r3, [pc, #60]	; (800ea1c <prvAddCurrentTaskToDelayedList+0xb4>)
 800e9de:	681b      	ldr	r3, [r3, #0]
 800e9e0:	3304      	adds	r3, #4
 800e9e2:	4619      	mov	r1, r3
 800e9e4:	4610      	mov	r0, r2
 800e9e6:	f7fe fb62 	bl	800d0ae <vListInsert>
}
 800e9ea:	e010      	b.n	800ea0e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e9ec:	4b0f      	ldr	r3, [pc, #60]	; (800ea2c <prvAddCurrentTaskToDelayedList+0xc4>)
 800e9ee:	681a      	ldr	r2, [r3, #0]
 800e9f0:	4b0a      	ldr	r3, [pc, #40]	; (800ea1c <prvAddCurrentTaskToDelayedList+0xb4>)
 800e9f2:	681b      	ldr	r3, [r3, #0]
 800e9f4:	3304      	adds	r3, #4
 800e9f6:	4619      	mov	r1, r3
 800e9f8:	4610      	mov	r0, r2
 800e9fa:	f7fe fb58 	bl	800d0ae <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800e9fe:	4b0c      	ldr	r3, [pc, #48]	; (800ea30 <prvAddCurrentTaskToDelayedList+0xc8>)
 800ea00:	681b      	ldr	r3, [r3, #0]
 800ea02:	68ba      	ldr	r2, [r7, #8]
 800ea04:	429a      	cmp	r2, r3
 800ea06:	d202      	bcs.n	800ea0e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800ea08:	4a09      	ldr	r2, [pc, #36]	; (800ea30 <prvAddCurrentTaskToDelayedList+0xc8>)
 800ea0a:	68bb      	ldr	r3, [r7, #8]
 800ea0c:	6013      	str	r3, [r2, #0]
}
 800ea0e:	bf00      	nop
 800ea10:	3710      	adds	r7, #16
 800ea12:	46bd      	mov	sp, r7
 800ea14:	bd80      	pop	{r7, pc}
 800ea16:	bf00      	nop
 800ea18:	20021ea0 	.word	0x20021ea0
 800ea1c:	20021d9c 	.word	0x20021d9c
 800ea20:	20021ea4 	.word	0x20021ea4
 800ea24:	20021e88 	.word	0x20021e88
 800ea28:	20021e58 	.word	0x20021e58
 800ea2c:	20021e54 	.word	0x20021e54
 800ea30:	20021ebc 	.word	0x20021ebc

0800ea34 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800ea34:	b580      	push	{r7, lr}
 800ea36:	b08a      	sub	sp, #40	; 0x28
 800ea38:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800ea3a:	2300      	movs	r3, #0
 800ea3c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800ea3e:	f000 fae1 	bl	800f004 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800ea42:	4b1c      	ldr	r3, [pc, #112]	; (800eab4 <xTimerCreateTimerTask+0x80>)
 800ea44:	681b      	ldr	r3, [r3, #0]
 800ea46:	2b00      	cmp	r3, #0
 800ea48:	d021      	beq.n	800ea8e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800ea4a:	2300      	movs	r3, #0
 800ea4c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800ea4e:	2300      	movs	r3, #0
 800ea50:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800ea52:	1d3a      	adds	r2, r7, #4
 800ea54:	f107 0108 	add.w	r1, r7, #8
 800ea58:	f107 030c 	add.w	r3, r7, #12
 800ea5c:	4618      	mov	r0, r3
 800ea5e:	f7f4 fc63 	bl	8003328 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800ea62:	6879      	ldr	r1, [r7, #4]
 800ea64:	68bb      	ldr	r3, [r7, #8]
 800ea66:	68fa      	ldr	r2, [r7, #12]
 800ea68:	9202      	str	r2, [sp, #8]
 800ea6a:	9301      	str	r3, [sp, #4]
 800ea6c:	2302      	movs	r3, #2
 800ea6e:	9300      	str	r3, [sp, #0]
 800ea70:	2300      	movs	r3, #0
 800ea72:	460a      	mov	r2, r1
 800ea74:	4910      	ldr	r1, [pc, #64]	; (800eab8 <xTimerCreateTimerTask+0x84>)
 800ea76:	4811      	ldr	r0, [pc, #68]	; (800eabc <xTimerCreateTimerTask+0x88>)
 800ea78:	f7ff f93a 	bl	800dcf0 <xTaskCreateStatic>
 800ea7c:	4603      	mov	r3, r0
 800ea7e:	4a10      	ldr	r2, [pc, #64]	; (800eac0 <xTimerCreateTimerTask+0x8c>)
 800ea80:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800ea82:	4b0f      	ldr	r3, [pc, #60]	; (800eac0 <xTimerCreateTimerTask+0x8c>)
 800ea84:	681b      	ldr	r3, [r3, #0]
 800ea86:	2b00      	cmp	r3, #0
 800ea88:	d001      	beq.n	800ea8e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800ea8a:	2301      	movs	r3, #1
 800ea8c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800ea8e:	697b      	ldr	r3, [r7, #20]
 800ea90:	2b00      	cmp	r3, #0
 800ea92:	d10a      	bne.n	800eaaa <xTimerCreateTimerTask+0x76>
	__asm volatile
 800ea94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea98:	f383 8811 	msr	BASEPRI, r3
 800ea9c:	f3bf 8f6f 	isb	sy
 800eaa0:	f3bf 8f4f 	dsb	sy
 800eaa4:	613b      	str	r3, [r7, #16]
}
 800eaa6:	bf00      	nop
 800eaa8:	e7fe      	b.n	800eaa8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800eaaa:	697b      	ldr	r3, [r7, #20]
}
 800eaac:	4618      	mov	r0, r3
 800eaae:	3718      	adds	r7, #24
 800eab0:	46bd      	mov	sp, r7
 800eab2:	bd80      	pop	{r7, pc}
 800eab4:	20021ef8 	.word	0x20021ef8
 800eab8:	0801281c 	.word	0x0801281c
 800eabc:	0800ebf9 	.word	0x0800ebf9
 800eac0:	20021efc 	.word	0x20021efc

0800eac4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800eac4:	b580      	push	{r7, lr}
 800eac6:	b08a      	sub	sp, #40	; 0x28
 800eac8:	af00      	add	r7, sp, #0
 800eaca:	60f8      	str	r0, [r7, #12]
 800eacc:	60b9      	str	r1, [r7, #8]
 800eace:	607a      	str	r2, [r7, #4]
 800ead0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800ead2:	2300      	movs	r3, #0
 800ead4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800ead6:	68fb      	ldr	r3, [r7, #12]
 800ead8:	2b00      	cmp	r3, #0
 800eada:	d10a      	bne.n	800eaf2 <xTimerGenericCommand+0x2e>
	__asm volatile
 800eadc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eae0:	f383 8811 	msr	BASEPRI, r3
 800eae4:	f3bf 8f6f 	isb	sy
 800eae8:	f3bf 8f4f 	dsb	sy
 800eaec:	623b      	str	r3, [r7, #32]
}
 800eaee:	bf00      	nop
 800eaf0:	e7fe      	b.n	800eaf0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800eaf2:	4b1a      	ldr	r3, [pc, #104]	; (800eb5c <xTimerGenericCommand+0x98>)
 800eaf4:	681b      	ldr	r3, [r3, #0]
 800eaf6:	2b00      	cmp	r3, #0
 800eaf8:	d02a      	beq.n	800eb50 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800eafa:	68bb      	ldr	r3, [r7, #8]
 800eafc:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800eafe:	687b      	ldr	r3, [r7, #4]
 800eb00:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800eb02:	68fb      	ldr	r3, [r7, #12]
 800eb04:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800eb06:	68bb      	ldr	r3, [r7, #8]
 800eb08:	2b05      	cmp	r3, #5
 800eb0a:	dc18      	bgt.n	800eb3e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800eb0c:	f7ff fe88 	bl	800e820 <xTaskGetSchedulerState>
 800eb10:	4603      	mov	r3, r0
 800eb12:	2b02      	cmp	r3, #2
 800eb14:	d109      	bne.n	800eb2a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800eb16:	4b11      	ldr	r3, [pc, #68]	; (800eb5c <xTimerGenericCommand+0x98>)
 800eb18:	6818      	ldr	r0, [r3, #0]
 800eb1a:	f107 0114 	add.w	r1, r7, #20
 800eb1e:	2300      	movs	r3, #0
 800eb20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800eb22:	f7fe fc57 	bl	800d3d4 <xQueueGenericSend>
 800eb26:	6278      	str	r0, [r7, #36]	; 0x24
 800eb28:	e012      	b.n	800eb50 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800eb2a:	4b0c      	ldr	r3, [pc, #48]	; (800eb5c <xTimerGenericCommand+0x98>)
 800eb2c:	6818      	ldr	r0, [r3, #0]
 800eb2e:	f107 0114 	add.w	r1, r7, #20
 800eb32:	2300      	movs	r3, #0
 800eb34:	2200      	movs	r2, #0
 800eb36:	f7fe fc4d 	bl	800d3d4 <xQueueGenericSend>
 800eb3a:	6278      	str	r0, [r7, #36]	; 0x24
 800eb3c:	e008      	b.n	800eb50 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800eb3e:	4b07      	ldr	r3, [pc, #28]	; (800eb5c <xTimerGenericCommand+0x98>)
 800eb40:	6818      	ldr	r0, [r3, #0]
 800eb42:	f107 0114 	add.w	r1, r7, #20
 800eb46:	2300      	movs	r3, #0
 800eb48:	683a      	ldr	r2, [r7, #0]
 800eb4a:	f7fe fd41 	bl	800d5d0 <xQueueGenericSendFromISR>
 800eb4e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800eb50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800eb52:	4618      	mov	r0, r3
 800eb54:	3728      	adds	r7, #40	; 0x28
 800eb56:	46bd      	mov	sp, r7
 800eb58:	bd80      	pop	{r7, pc}
 800eb5a:	bf00      	nop
 800eb5c:	20021ef8 	.word	0x20021ef8

0800eb60 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800eb60:	b580      	push	{r7, lr}
 800eb62:	b088      	sub	sp, #32
 800eb64:	af02      	add	r7, sp, #8
 800eb66:	6078      	str	r0, [r7, #4]
 800eb68:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800eb6a:	4b22      	ldr	r3, [pc, #136]	; (800ebf4 <prvProcessExpiredTimer+0x94>)
 800eb6c:	681b      	ldr	r3, [r3, #0]
 800eb6e:	68db      	ldr	r3, [r3, #12]
 800eb70:	68db      	ldr	r3, [r3, #12]
 800eb72:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800eb74:	697b      	ldr	r3, [r7, #20]
 800eb76:	3304      	adds	r3, #4
 800eb78:	4618      	mov	r0, r3
 800eb7a:	f7fe fad1 	bl	800d120 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800eb7e:	697b      	ldr	r3, [r7, #20]
 800eb80:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800eb84:	f003 0304 	and.w	r3, r3, #4
 800eb88:	2b00      	cmp	r3, #0
 800eb8a:	d022      	beq.n	800ebd2 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800eb8c:	697b      	ldr	r3, [r7, #20]
 800eb8e:	699a      	ldr	r2, [r3, #24]
 800eb90:	687b      	ldr	r3, [r7, #4]
 800eb92:	18d1      	adds	r1, r2, r3
 800eb94:	687b      	ldr	r3, [r7, #4]
 800eb96:	683a      	ldr	r2, [r7, #0]
 800eb98:	6978      	ldr	r0, [r7, #20]
 800eb9a:	f000 f8d1 	bl	800ed40 <prvInsertTimerInActiveList>
 800eb9e:	4603      	mov	r3, r0
 800eba0:	2b00      	cmp	r3, #0
 800eba2:	d01f      	beq.n	800ebe4 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800eba4:	2300      	movs	r3, #0
 800eba6:	9300      	str	r3, [sp, #0]
 800eba8:	2300      	movs	r3, #0
 800ebaa:	687a      	ldr	r2, [r7, #4]
 800ebac:	2100      	movs	r1, #0
 800ebae:	6978      	ldr	r0, [r7, #20]
 800ebb0:	f7ff ff88 	bl	800eac4 <xTimerGenericCommand>
 800ebb4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800ebb6:	693b      	ldr	r3, [r7, #16]
 800ebb8:	2b00      	cmp	r3, #0
 800ebba:	d113      	bne.n	800ebe4 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800ebbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ebc0:	f383 8811 	msr	BASEPRI, r3
 800ebc4:	f3bf 8f6f 	isb	sy
 800ebc8:	f3bf 8f4f 	dsb	sy
 800ebcc:	60fb      	str	r3, [r7, #12]
}
 800ebce:	bf00      	nop
 800ebd0:	e7fe      	b.n	800ebd0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ebd2:	697b      	ldr	r3, [r7, #20]
 800ebd4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800ebd8:	f023 0301 	bic.w	r3, r3, #1
 800ebdc:	b2da      	uxtb	r2, r3
 800ebde:	697b      	ldr	r3, [r7, #20]
 800ebe0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ebe4:	697b      	ldr	r3, [r7, #20]
 800ebe6:	6a1b      	ldr	r3, [r3, #32]
 800ebe8:	6978      	ldr	r0, [r7, #20]
 800ebea:	4798      	blx	r3
}
 800ebec:	bf00      	nop
 800ebee:	3718      	adds	r7, #24
 800ebf0:	46bd      	mov	sp, r7
 800ebf2:	bd80      	pop	{r7, pc}
 800ebf4:	20021ef0 	.word	0x20021ef0

0800ebf8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800ebf8:	b580      	push	{r7, lr}
 800ebfa:	b084      	sub	sp, #16
 800ebfc:	af00      	add	r7, sp, #0
 800ebfe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ec00:	f107 0308 	add.w	r3, r7, #8
 800ec04:	4618      	mov	r0, r3
 800ec06:	f000 f857 	bl	800ecb8 <prvGetNextExpireTime>
 800ec0a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800ec0c:	68bb      	ldr	r3, [r7, #8]
 800ec0e:	4619      	mov	r1, r3
 800ec10:	68f8      	ldr	r0, [r7, #12]
 800ec12:	f000 f803 	bl	800ec1c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800ec16:	f000 f8d5 	bl	800edc4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ec1a:	e7f1      	b.n	800ec00 <prvTimerTask+0x8>

0800ec1c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800ec1c:	b580      	push	{r7, lr}
 800ec1e:	b084      	sub	sp, #16
 800ec20:	af00      	add	r7, sp, #0
 800ec22:	6078      	str	r0, [r7, #4]
 800ec24:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800ec26:	f7ff fa47 	bl	800e0b8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ec2a:	f107 0308 	add.w	r3, r7, #8
 800ec2e:	4618      	mov	r0, r3
 800ec30:	f000 f866 	bl	800ed00 <prvSampleTimeNow>
 800ec34:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800ec36:	68bb      	ldr	r3, [r7, #8]
 800ec38:	2b00      	cmp	r3, #0
 800ec3a:	d130      	bne.n	800ec9e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800ec3c:	683b      	ldr	r3, [r7, #0]
 800ec3e:	2b00      	cmp	r3, #0
 800ec40:	d10a      	bne.n	800ec58 <prvProcessTimerOrBlockTask+0x3c>
 800ec42:	687a      	ldr	r2, [r7, #4]
 800ec44:	68fb      	ldr	r3, [r7, #12]
 800ec46:	429a      	cmp	r2, r3
 800ec48:	d806      	bhi.n	800ec58 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800ec4a:	f7ff fa43 	bl	800e0d4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800ec4e:	68f9      	ldr	r1, [r7, #12]
 800ec50:	6878      	ldr	r0, [r7, #4]
 800ec52:	f7ff ff85 	bl	800eb60 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800ec56:	e024      	b.n	800eca2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800ec58:	683b      	ldr	r3, [r7, #0]
 800ec5a:	2b00      	cmp	r3, #0
 800ec5c:	d008      	beq.n	800ec70 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800ec5e:	4b13      	ldr	r3, [pc, #76]	; (800ecac <prvProcessTimerOrBlockTask+0x90>)
 800ec60:	681b      	ldr	r3, [r3, #0]
 800ec62:	681b      	ldr	r3, [r3, #0]
 800ec64:	2b00      	cmp	r3, #0
 800ec66:	d101      	bne.n	800ec6c <prvProcessTimerOrBlockTask+0x50>
 800ec68:	2301      	movs	r3, #1
 800ec6a:	e000      	b.n	800ec6e <prvProcessTimerOrBlockTask+0x52>
 800ec6c:	2300      	movs	r3, #0
 800ec6e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800ec70:	4b0f      	ldr	r3, [pc, #60]	; (800ecb0 <prvProcessTimerOrBlockTask+0x94>)
 800ec72:	6818      	ldr	r0, [r3, #0]
 800ec74:	687a      	ldr	r2, [r7, #4]
 800ec76:	68fb      	ldr	r3, [r7, #12]
 800ec78:	1ad3      	subs	r3, r2, r3
 800ec7a:	683a      	ldr	r2, [r7, #0]
 800ec7c:	4619      	mov	r1, r3
 800ec7e:	f7ff f803 	bl	800dc88 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800ec82:	f7ff fa27 	bl	800e0d4 <xTaskResumeAll>
 800ec86:	4603      	mov	r3, r0
 800ec88:	2b00      	cmp	r3, #0
 800ec8a:	d10a      	bne.n	800eca2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800ec8c:	4b09      	ldr	r3, [pc, #36]	; (800ecb4 <prvProcessTimerOrBlockTask+0x98>)
 800ec8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ec92:	601a      	str	r2, [r3, #0]
 800ec94:	f3bf 8f4f 	dsb	sy
 800ec98:	f3bf 8f6f 	isb	sy
}
 800ec9c:	e001      	b.n	800eca2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800ec9e:	f7ff fa19 	bl	800e0d4 <xTaskResumeAll>
}
 800eca2:	bf00      	nop
 800eca4:	3710      	adds	r7, #16
 800eca6:	46bd      	mov	sp, r7
 800eca8:	bd80      	pop	{r7, pc}
 800ecaa:	bf00      	nop
 800ecac:	20021ef4 	.word	0x20021ef4
 800ecb0:	20021ef8 	.word	0x20021ef8
 800ecb4:	e000ed04 	.word	0xe000ed04

0800ecb8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800ecb8:	b480      	push	{r7}
 800ecba:	b085      	sub	sp, #20
 800ecbc:	af00      	add	r7, sp, #0
 800ecbe:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800ecc0:	4b0e      	ldr	r3, [pc, #56]	; (800ecfc <prvGetNextExpireTime+0x44>)
 800ecc2:	681b      	ldr	r3, [r3, #0]
 800ecc4:	681b      	ldr	r3, [r3, #0]
 800ecc6:	2b00      	cmp	r3, #0
 800ecc8:	d101      	bne.n	800ecce <prvGetNextExpireTime+0x16>
 800ecca:	2201      	movs	r2, #1
 800eccc:	e000      	b.n	800ecd0 <prvGetNextExpireTime+0x18>
 800ecce:	2200      	movs	r2, #0
 800ecd0:	687b      	ldr	r3, [r7, #4]
 800ecd2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800ecd4:	687b      	ldr	r3, [r7, #4]
 800ecd6:	681b      	ldr	r3, [r3, #0]
 800ecd8:	2b00      	cmp	r3, #0
 800ecda:	d105      	bne.n	800ece8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ecdc:	4b07      	ldr	r3, [pc, #28]	; (800ecfc <prvGetNextExpireTime+0x44>)
 800ecde:	681b      	ldr	r3, [r3, #0]
 800ece0:	68db      	ldr	r3, [r3, #12]
 800ece2:	681b      	ldr	r3, [r3, #0]
 800ece4:	60fb      	str	r3, [r7, #12]
 800ece6:	e001      	b.n	800ecec <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800ece8:	2300      	movs	r3, #0
 800ecea:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800ecec:	68fb      	ldr	r3, [r7, #12]
}
 800ecee:	4618      	mov	r0, r3
 800ecf0:	3714      	adds	r7, #20
 800ecf2:	46bd      	mov	sp, r7
 800ecf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecf8:	4770      	bx	lr
 800ecfa:	bf00      	nop
 800ecfc:	20021ef0 	.word	0x20021ef0

0800ed00 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800ed00:	b580      	push	{r7, lr}
 800ed02:	b084      	sub	sp, #16
 800ed04:	af00      	add	r7, sp, #0
 800ed06:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800ed08:	f7ff fa80 	bl	800e20c <xTaskGetTickCount>
 800ed0c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800ed0e:	4b0b      	ldr	r3, [pc, #44]	; (800ed3c <prvSampleTimeNow+0x3c>)
 800ed10:	681b      	ldr	r3, [r3, #0]
 800ed12:	68fa      	ldr	r2, [r7, #12]
 800ed14:	429a      	cmp	r2, r3
 800ed16:	d205      	bcs.n	800ed24 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800ed18:	f000 f910 	bl	800ef3c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800ed1c:	687b      	ldr	r3, [r7, #4]
 800ed1e:	2201      	movs	r2, #1
 800ed20:	601a      	str	r2, [r3, #0]
 800ed22:	e002      	b.n	800ed2a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800ed24:	687b      	ldr	r3, [r7, #4]
 800ed26:	2200      	movs	r2, #0
 800ed28:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800ed2a:	4a04      	ldr	r2, [pc, #16]	; (800ed3c <prvSampleTimeNow+0x3c>)
 800ed2c:	68fb      	ldr	r3, [r7, #12]
 800ed2e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800ed30:	68fb      	ldr	r3, [r7, #12]
}
 800ed32:	4618      	mov	r0, r3
 800ed34:	3710      	adds	r7, #16
 800ed36:	46bd      	mov	sp, r7
 800ed38:	bd80      	pop	{r7, pc}
 800ed3a:	bf00      	nop
 800ed3c:	20021f00 	.word	0x20021f00

0800ed40 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800ed40:	b580      	push	{r7, lr}
 800ed42:	b086      	sub	sp, #24
 800ed44:	af00      	add	r7, sp, #0
 800ed46:	60f8      	str	r0, [r7, #12]
 800ed48:	60b9      	str	r1, [r7, #8]
 800ed4a:	607a      	str	r2, [r7, #4]
 800ed4c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800ed4e:	2300      	movs	r3, #0
 800ed50:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800ed52:	68fb      	ldr	r3, [r7, #12]
 800ed54:	68ba      	ldr	r2, [r7, #8]
 800ed56:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ed58:	68fb      	ldr	r3, [r7, #12]
 800ed5a:	68fa      	ldr	r2, [r7, #12]
 800ed5c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800ed5e:	68ba      	ldr	r2, [r7, #8]
 800ed60:	687b      	ldr	r3, [r7, #4]
 800ed62:	429a      	cmp	r2, r3
 800ed64:	d812      	bhi.n	800ed8c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ed66:	687a      	ldr	r2, [r7, #4]
 800ed68:	683b      	ldr	r3, [r7, #0]
 800ed6a:	1ad2      	subs	r2, r2, r3
 800ed6c:	68fb      	ldr	r3, [r7, #12]
 800ed6e:	699b      	ldr	r3, [r3, #24]
 800ed70:	429a      	cmp	r2, r3
 800ed72:	d302      	bcc.n	800ed7a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800ed74:	2301      	movs	r3, #1
 800ed76:	617b      	str	r3, [r7, #20]
 800ed78:	e01b      	b.n	800edb2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800ed7a:	4b10      	ldr	r3, [pc, #64]	; (800edbc <prvInsertTimerInActiveList+0x7c>)
 800ed7c:	681a      	ldr	r2, [r3, #0]
 800ed7e:	68fb      	ldr	r3, [r7, #12]
 800ed80:	3304      	adds	r3, #4
 800ed82:	4619      	mov	r1, r3
 800ed84:	4610      	mov	r0, r2
 800ed86:	f7fe f992 	bl	800d0ae <vListInsert>
 800ed8a:	e012      	b.n	800edb2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800ed8c:	687a      	ldr	r2, [r7, #4]
 800ed8e:	683b      	ldr	r3, [r7, #0]
 800ed90:	429a      	cmp	r2, r3
 800ed92:	d206      	bcs.n	800eda2 <prvInsertTimerInActiveList+0x62>
 800ed94:	68ba      	ldr	r2, [r7, #8]
 800ed96:	683b      	ldr	r3, [r7, #0]
 800ed98:	429a      	cmp	r2, r3
 800ed9a:	d302      	bcc.n	800eda2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800ed9c:	2301      	movs	r3, #1
 800ed9e:	617b      	str	r3, [r7, #20]
 800eda0:	e007      	b.n	800edb2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800eda2:	4b07      	ldr	r3, [pc, #28]	; (800edc0 <prvInsertTimerInActiveList+0x80>)
 800eda4:	681a      	ldr	r2, [r3, #0]
 800eda6:	68fb      	ldr	r3, [r7, #12]
 800eda8:	3304      	adds	r3, #4
 800edaa:	4619      	mov	r1, r3
 800edac:	4610      	mov	r0, r2
 800edae:	f7fe f97e 	bl	800d0ae <vListInsert>
		}
	}

	return xProcessTimerNow;
 800edb2:	697b      	ldr	r3, [r7, #20]
}
 800edb4:	4618      	mov	r0, r3
 800edb6:	3718      	adds	r7, #24
 800edb8:	46bd      	mov	sp, r7
 800edba:	bd80      	pop	{r7, pc}
 800edbc:	20021ef4 	.word	0x20021ef4
 800edc0:	20021ef0 	.word	0x20021ef0

0800edc4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800edc4:	b580      	push	{r7, lr}
 800edc6:	b08c      	sub	sp, #48	; 0x30
 800edc8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800edca:	e0a3      	b.n	800ef14 <prvProcessReceivedCommands+0x150>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800edcc:	68bb      	ldr	r3, [r7, #8]
 800edce:	2b00      	cmp	r3, #0
 800edd0:	f2c0 809f 	blt.w	800ef12 <prvProcessReceivedCommands+0x14e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800edd4:	693b      	ldr	r3, [r7, #16]
 800edd6:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800edd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800edda:	695b      	ldr	r3, [r3, #20]
 800eddc:	2b00      	cmp	r3, #0
 800edde:	d004      	beq.n	800edea <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ede0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ede2:	3304      	adds	r3, #4
 800ede4:	4618      	mov	r0, r3
 800ede6:	f7fe f99b 	bl	800d120 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800edea:	1d3b      	adds	r3, r7, #4
 800edec:	4618      	mov	r0, r3
 800edee:	f7ff ff87 	bl	800ed00 <prvSampleTimeNow>
 800edf2:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 800edf4:	68bb      	ldr	r3, [r7, #8]
 800edf6:	2b09      	cmp	r3, #9
 800edf8:	f200 808c 	bhi.w	800ef14 <prvProcessReceivedCommands+0x150>
 800edfc:	a201      	add	r2, pc, #4	; (adr r2, 800ee04 <prvProcessReceivedCommands+0x40>)
 800edfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ee02:	bf00      	nop
 800ee04:	0800ee2d 	.word	0x0800ee2d
 800ee08:	0800ee2d 	.word	0x0800ee2d
 800ee0c:	0800ee2d 	.word	0x0800ee2d
 800ee10:	0800eea1 	.word	0x0800eea1
 800ee14:	0800eeb5 	.word	0x0800eeb5
 800ee18:	0800eeff 	.word	0x0800eeff
 800ee1c:	0800ee2d 	.word	0x0800ee2d
 800ee20:	0800ee2d 	.word	0x0800ee2d
 800ee24:	0800eea1 	.word	0x0800eea1
 800ee28:	0800eeb5 	.word	0x0800eeb5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ee2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee2e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800ee32:	f043 0301 	orr.w	r3, r3, #1
 800ee36:	b2da      	uxtb	r2, r3
 800ee38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee3a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800ee3e:	68fa      	ldr	r2, [r7, #12]
 800ee40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee42:	699b      	ldr	r3, [r3, #24]
 800ee44:	18d1      	adds	r1, r2, r3
 800ee46:	68fb      	ldr	r3, [r7, #12]
 800ee48:	6a3a      	ldr	r2, [r7, #32]
 800ee4a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ee4c:	f7ff ff78 	bl	800ed40 <prvInsertTimerInActiveList>
 800ee50:	4603      	mov	r3, r0
 800ee52:	2b00      	cmp	r3, #0
 800ee54:	d05e      	beq.n	800ef14 <prvProcessReceivedCommands+0x150>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ee56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee58:	6a1b      	ldr	r3, [r3, #32]
 800ee5a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ee5c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ee5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee60:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800ee64:	f003 0304 	and.w	r3, r3, #4
 800ee68:	2b00      	cmp	r3, #0
 800ee6a:	d053      	beq.n	800ef14 <prvProcessReceivedCommands+0x150>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800ee6c:	68fa      	ldr	r2, [r7, #12]
 800ee6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee70:	699b      	ldr	r3, [r3, #24]
 800ee72:	441a      	add	r2, r3
 800ee74:	2300      	movs	r3, #0
 800ee76:	9300      	str	r3, [sp, #0]
 800ee78:	2300      	movs	r3, #0
 800ee7a:	2100      	movs	r1, #0
 800ee7c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ee7e:	f7ff fe21 	bl	800eac4 <xTimerGenericCommand>
 800ee82:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 800ee84:	69fb      	ldr	r3, [r7, #28]
 800ee86:	2b00      	cmp	r3, #0
 800ee88:	d144      	bne.n	800ef14 <prvProcessReceivedCommands+0x150>
	__asm volatile
 800ee8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee8e:	f383 8811 	msr	BASEPRI, r3
 800ee92:	f3bf 8f6f 	isb	sy
 800ee96:	f3bf 8f4f 	dsb	sy
 800ee9a:	61bb      	str	r3, [r7, #24]
}
 800ee9c:	bf00      	nop
 800ee9e:	e7fe      	b.n	800ee9e <prvProcessReceivedCommands+0xda>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800eea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eea2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800eea6:	f023 0301 	bic.w	r3, r3, #1
 800eeaa:	b2da      	uxtb	r2, r3
 800eeac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eeae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					break;
 800eeb2:	e02f      	b.n	800ef14 <prvProcessReceivedCommands+0x150>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800eeb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eeb6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800eeba:	f043 0301 	orr.w	r3, r3, #1
 800eebe:	b2da      	uxtb	r2, r3
 800eec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eec2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800eec6:	68fa      	ldr	r2, [r7, #12]
 800eec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eeca:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800eecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eece:	699b      	ldr	r3, [r3, #24]
 800eed0:	2b00      	cmp	r3, #0
 800eed2:	d10a      	bne.n	800eeea <prvProcessReceivedCommands+0x126>
	__asm volatile
 800eed4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eed8:	f383 8811 	msr	BASEPRI, r3
 800eedc:	f3bf 8f6f 	isb	sy
 800eee0:	f3bf 8f4f 	dsb	sy
 800eee4:	617b      	str	r3, [r7, #20]
}
 800eee6:	bf00      	nop
 800eee8:	e7fe      	b.n	800eee8 <prvProcessReceivedCommands+0x124>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800eeea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eeec:	699a      	ldr	r2, [r3, #24]
 800eeee:	6a3b      	ldr	r3, [r7, #32]
 800eef0:	18d1      	adds	r1, r2, r3
 800eef2:	6a3b      	ldr	r3, [r7, #32]
 800eef4:	6a3a      	ldr	r2, [r7, #32]
 800eef6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800eef8:	f7ff ff22 	bl	800ed40 <prvInsertTimerInActiveList>
					break;
 800eefc:	e00a      	b.n	800ef14 <prvProcessReceivedCommands+0x150>
					{
						/* If dynamic allocation is not enabled, the memory
						could not have been dynamically allocated. So there is
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800eefe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef00:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800ef04:	f023 0301 	bic.w	r3, r3, #1
 800ef08:	b2da      	uxtb	r2, r3
 800ef0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef0c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800ef10:	e000      	b.n	800ef14 <prvProcessReceivedCommands+0x150>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800ef12:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ef14:	4b08      	ldr	r3, [pc, #32]	; (800ef38 <prvProcessReceivedCommands+0x174>)
 800ef16:	681b      	ldr	r3, [r3, #0]
 800ef18:	f107 0108 	add.w	r1, r7, #8
 800ef1c:	2200      	movs	r2, #0
 800ef1e:	4618      	mov	r0, r3
 800ef20:	f7fe fbf2 	bl	800d708 <xQueueReceive>
 800ef24:	4603      	mov	r3, r0
 800ef26:	2b00      	cmp	r3, #0
 800ef28:	f47f af50 	bne.w	800edcc <prvProcessReceivedCommands+0x8>
	}
}
 800ef2c:	bf00      	nop
 800ef2e:	bf00      	nop
 800ef30:	3728      	adds	r7, #40	; 0x28
 800ef32:	46bd      	mov	sp, r7
 800ef34:	bd80      	pop	{r7, pc}
 800ef36:	bf00      	nop
 800ef38:	20021ef8 	.word	0x20021ef8

0800ef3c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800ef3c:	b580      	push	{r7, lr}
 800ef3e:	b088      	sub	sp, #32
 800ef40:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ef42:	e048      	b.n	800efd6 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ef44:	4b2d      	ldr	r3, [pc, #180]	; (800effc <prvSwitchTimerLists+0xc0>)
 800ef46:	681b      	ldr	r3, [r3, #0]
 800ef48:	68db      	ldr	r3, [r3, #12]
 800ef4a:	681b      	ldr	r3, [r3, #0]
 800ef4c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ef4e:	4b2b      	ldr	r3, [pc, #172]	; (800effc <prvSwitchTimerLists+0xc0>)
 800ef50:	681b      	ldr	r3, [r3, #0]
 800ef52:	68db      	ldr	r3, [r3, #12]
 800ef54:	68db      	ldr	r3, [r3, #12]
 800ef56:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ef58:	68fb      	ldr	r3, [r7, #12]
 800ef5a:	3304      	adds	r3, #4
 800ef5c:	4618      	mov	r0, r3
 800ef5e:	f7fe f8df 	bl	800d120 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ef62:	68fb      	ldr	r3, [r7, #12]
 800ef64:	6a1b      	ldr	r3, [r3, #32]
 800ef66:	68f8      	ldr	r0, [r7, #12]
 800ef68:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ef6a:	68fb      	ldr	r3, [r7, #12]
 800ef6c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800ef70:	f003 0304 	and.w	r3, r3, #4
 800ef74:	2b00      	cmp	r3, #0
 800ef76:	d02e      	beq.n	800efd6 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800ef78:	68fb      	ldr	r3, [r7, #12]
 800ef7a:	699b      	ldr	r3, [r3, #24]
 800ef7c:	693a      	ldr	r2, [r7, #16]
 800ef7e:	4413      	add	r3, r2
 800ef80:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800ef82:	68ba      	ldr	r2, [r7, #8]
 800ef84:	693b      	ldr	r3, [r7, #16]
 800ef86:	429a      	cmp	r2, r3
 800ef88:	d90e      	bls.n	800efa8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800ef8a:	68fb      	ldr	r3, [r7, #12]
 800ef8c:	68ba      	ldr	r2, [r7, #8]
 800ef8e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ef90:	68fb      	ldr	r3, [r7, #12]
 800ef92:	68fa      	ldr	r2, [r7, #12]
 800ef94:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ef96:	4b19      	ldr	r3, [pc, #100]	; (800effc <prvSwitchTimerLists+0xc0>)
 800ef98:	681a      	ldr	r2, [r3, #0]
 800ef9a:	68fb      	ldr	r3, [r7, #12]
 800ef9c:	3304      	adds	r3, #4
 800ef9e:	4619      	mov	r1, r3
 800efa0:	4610      	mov	r0, r2
 800efa2:	f7fe f884 	bl	800d0ae <vListInsert>
 800efa6:	e016      	b.n	800efd6 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800efa8:	2300      	movs	r3, #0
 800efaa:	9300      	str	r3, [sp, #0]
 800efac:	2300      	movs	r3, #0
 800efae:	693a      	ldr	r2, [r7, #16]
 800efb0:	2100      	movs	r1, #0
 800efb2:	68f8      	ldr	r0, [r7, #12]
 800efb4:	f7ff fd86 	bl	800eac4 <xTimerGenericCommand>
 800efb8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800efba:	687b      	ldr	r3, [r7, #4]
 800efbc:	2b00      	cmp	r3, #0
 800efbe:	d10a      	bne.n	800efd6 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800efc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800efc4:	f383 8811 	msr	BASEPRI, r3
 800efc8:	f3bf 8f6f 	isb	sy
 800efcc:	f3bf 8f4f 	dsb	sy
 800efd0:	603b      	str	r3, [r7, #0]
}
 800efd2:	bf00      	nop
 800efd4:	e7fe      	b.n	800efd4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800efd6:	4b09      	ldr	r3, [pc, #36]	; (800effc <prvSwitchTimerLists+0xc0>)
 800efd8:	681b      	ldr	r3, [r3, #0]
 800efda:	681b      	ldr	r3, [r3, #0]
 800efdc:	2b00      	cmp	r3, #0
 800efde:	d1b1      	bne.n	800ef44 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800efe0:	4b06      	ldr	r3, [pc, #24]	; (800effc <prvSwitchTimerLists+0xc0>)
 800efe2:	681b      	ldr	r3, [r3, #0]
 800efe4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800efe6:	4b06      	ldr	r3, [pc, #24]	; (800f000 <prvSwitchTimerLists+0xc4>)
 800efe8:	681b      	ldr	r3, [r3, #0]
 800efea:	4a04      	ldr	r2, [pc, #16]	; (800effc <prvSwitchTimerLists+0xc0>)
 800efec:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800efee:	4a04      	ldr	r2, [pc, #16]	; (800f000 <prvSwitchTimerLists+0xc4>)
 800eff0:	697b      	ldr	r3, [r7, #20]
 800eff2:	6013      	str	r3, [r2, #0]
}
 800eff4:	bf00      	nop
 800eff6:	3718      	adds	r7, #24
 800eff8:	46bd      	mov	sp, r7
 800effa:	bd80      	pop	{r7, pc}
 800effc:	20021ef0 	.word	0x20021ef0
 800f000:	20021ef4 	.word	0x20021ef4

0800f004 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800f004:	b580      	push	{r7, lr}
 800f006:	b082      	sub	sp, #8
 800f008:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800f00a:	f000 f96b 	bl	800f2e4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800f00e:	4b15      	ldr	r3, [pc, #84]	; (800f064 <prvCheckForValidListAndQueue+0x60>)
 800f010:	681b      	ldr	r3, [r3, #0]
 800f012:	2b00      	cmp	r3, #0
 800f014:	d120      	bne.n	800f058 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800f016:	4814      	ldr	r0, [pc, #80]	; (800f068 <prvCheckForValidListAndQueue+0x64>)
 800f018:	f7fd fff8 	bl	800d00c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800f01c:	4813      	ldr	r0, [pc, #76]	; (800f06c <prvCheckForValidListAndQueue+0x68>)
 800f01e:	f7fd fff5 	bl	800d00c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800f022:	4b13      	ldr	r3, [pc, #76]	; (800f070 <prvCheckForValidListAndQueue+0x6c>)
 800f024:	4a10      	ldr	r2, [pc, #64]	; (800f068 <prvCheckForValidListAndQueue+0x64>)
 800f026:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800f028:	4b12      	ldr	r3, [pc, #72]	; (800f074 <prvCheckForValidListAndQueue+0x70>)
 800f02a:	4a10      	ldr	r2, [pc, #64]	; (800f06c <prvCheckForValidListAndQueue+0x68>)
 800f02c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800f02e:	2300      	movs	r3, #0
 800f030:	9300      	str	r3, [sp, #0]
 800f032:	4b11      	ldr	r3, [pc, #68]	; (800f078 <prvCheckForValidListAndQueue+0x74>)
 800f034:	4a11      	ldr	r2, [pc, #68]	; (800f07c <prvCheckForValidListAndQueue+0x78>)
 800f036:	210c      	movs	r1, #12
 800f038:	200a      	movs	r0, #10
 800f03a:	f7fe f903 	bl	800d244 <xQueueGenericCreateStatic>
 800f03e:	4603      	mov	r3, r0
 800f040:	4a08      	ldr	r2, [pc, #32]	; (800f064 <prvCheckForValidListAndQueue+0x60>)
 800f042:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800f044:	4b07      	ldr	r3, [pc, #28]	; (800f064 <prvCheckForValidListAndQueue+0x60>)
 800f046:	681b      	ldr	r3, [r3, #0]
 800f048:	2b00      	cmp	r3, #0
 800f04a:	d005      	beq.n	800f058 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800f04c:	4b05      	ldr	r3, [pc, #20]	; (800f064 <prvCheckForValidListAndQueue+0x60>)
 800f04e:	681b      	ldr	r3, [r3, #0]
 800f050:	490b      	ldr	r1, [pc, #44]	; (800f080 <prvCheckForValidListAndQueue+0x7c>)
 800f052:	4618      	mov	r0, r3
 800f054:	f7fe fdee 	bl	800dc34 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800f058:	f000 f974 	bl	800f344 <vPortExitCritical>
}
 800f05c:	bf00      	nop
 800f05e:	46bd      	mov	sp, r7
 800f060:	bd80      	pop	{r7, pc}
 800f062:	bf00      	nop
 800f064:	20021ef8 	.word	0x20021ef8
 800f068:	20021ec8 	.word	0x20021ec8
 800f06c:	20021edc 	.word	0x20021edc
 800f070:	20021ef0 	.word	0x20021ef0
 800f074:	20021ef4 	.word	0x20021ef4
 800f078:	20021f7c 	.word	0x20021f7c
 800f07c:	20021f04 	.word	0x20021f04
 800f080:	08012824 	.word	0x08012824

0800f084 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800f084:	b480      	push	{r7}
 800f086:	b085      	sub	sp, #20
 800f088:	af00      	add	r7, sp, #0
 800f08a:	60f8      	str	r0, [r7, #12]
 800f08c:	60b9      	str	r1, [r7, #8]
 800f08e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800f090:	68fb      	ldr	r3, [r7, #12]
 800f092:	3b04      	subs	r3, #4
 800f094:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800f096:	68fb      	ldr	r3, [r7, #12]
 800f098:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800f09c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f09e:	68fb      	ldr	r3, [r7, #12]
 800f0a0:	3b04      	subs	r3, #4
 800f0a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800f0a4:	68bb      	ldr	r3, [r7, #8]
 800f0a6:	f023 0201 	bic.w	r2, r3, #1
 800f0aa:	68fb      	ldr	r3, [r7, #12]
 800f0ac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f0ae:	68fb      	ldr	r3, [r7, #12]
 800f0b0:	3b04      	subs	r3, #4
 800f0b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800f0b4:	4a0c      	ldr	r2, [pc, #48]	; (800f0e8 <pxPortInitialiseStack+0x64>)
 800f0b6:	68fb      	ldr	r3, [r7, #12]
 800f0b8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800f0ba:	68fb      	ldr	r3, [r7, #12]
 800f0bc:	3b14      	subs	r3, #20
 800f0be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800f0c0:	687a      	ldr	r2, [r7, #4]
 800f0c2:	68fb      	ldr	r3, [r7, #12]
 800f0c4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800f0c6:	68fb      	ldr	r3, [r7, #12]
 800f0c8:	3b04      	subs	r3, #4
 800f0ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800f0cc:	68fb      	ldr	r3, [r7, #12]
 800f0ce:	f06f 0202 	mvn.w	r2, #2
 800f0d2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800f0d4:	68fb      	ldr	r3, [r7, #12]
 800f0d6:	3b20      	subs	r3, #32
 800f0d8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800f0da:	68fb      	ldr	r3, [r7, #12]
}
 800f0dc:	4618      	mov	r0, r3
 800f0de:	3714      	adds	r7, #20
 800f0e0:	46bd      	mov	sp, r7
 800f0e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0e6:	4770      	bx	lr
 800f0e8:	0800f0ed 	.word	0x0800f0ed

0800f0ec <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800f0ec:	b480      	push	{r7}
 800f0ee:	b085      	sub	sp, #20
 800f0f0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800f0f2:	2300      	movs	r3, #0
 800f0f4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800f0f6:	4b12      	ldr	r3, [pc, #72]	; (800f140 <prvTaskExitError+0x54>)
 800f0f8:	681b      	ldr	r3, [r3, #0]
 800f0fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f0fe:	d00a      	beq.n	800f116 <prvTaskExitError+0x2a>
	__asm volatile
 800f100:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f104:	f383 8811 	msr	BASEPRI, r3
 800f108:	f3bf 8f6f 	isb	sy
 800f10c:	f3bf 8f4f 	dsb	sy
 800f110:	60fb      	str	r3, [r7, #12]
}
 800f112:	bf00      	nop
 800f114:	e7fe      	b.n	800f114 <prvTaskExitError+0x28>
	__asm volatile
 800f116:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f11a:	f383 8811 	msr	BASEPRI, r3
 800f11e:	f3bf 8f6f 	isb	sy
 800f122:	f3bf 8f4f 	dsb	sy
 800f126:	60bb      	str	r3, [r7, #8]
}
 800f128:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800f12a:	bf00      	nop
 800f12c:	687b      	ldr	r3, [r7, #4]
 800f12e:	2b00      	cmp	r3, #0
 800f130:	d0fc      	beq.n	800f12c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800f132:	bf00      	nop
 800f134:	bf00      	nop
 800f136:	3714      	adds	r7, #20
 800f138:	46bd      	mov	sp, r7
 800f13a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f13e:	4770      	bx	lr
 800f140:	20000034 	.word	0x20000034
	...

0800f150 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800f150:	4b07      	ldr	r3, [pc, #28]	; (800f170 <pxCurrentTCBConst2>)
 800f152:	6819      	ldr	r1, [r3, #0]
 800f154:	6808      	ldr	r0, [r1, #0]
 800f156:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f15a:	f380 8809 	msr	PSP, r0
 800f15e:	f3bf 8f6f 	isb	sy
 800f162:	f04f 0000 	mov.w	r0, #0
 800f166:	f380 8811 	msr	BASEPRI, r0
 800f16a:	4770      	bx	lr
 800f16c:	f3af 8000 	nop.w

0800f170 <pxCurrentTCBConst2>:
 800f170:	20021d9c 	.word	0x20021d9c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800f174:	bf00      	nop
 800f176:	bf00      	nop

0800f178 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800f178:	4808      	ldr	r0, [pc, #32]	; (800f19c <prvPortStartFirstTask+0x24>)
 800f17a:	6800      	ldr	r0, [r0, #0]
 800f17c:	6800      	ldr	r0, [r0, #0]
 800f17e:	f380 8808 	msr	MSP, r0
 800f182:	f04f 0000 	mov.w	r0, #0
 800f186:	f380 8814 	msr	CONTROL, r0
 800f18a:	b662      	cpsie	i
 800f18c:	b661      	cpsie	f
 800f18e:	f3bf 8f4f 	dsb	sy
 800f192:	f3bf 8f6f 	isb	sy
 800f196:	df00      	svc	0
 800f198:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800f19a:	bf00      	nop
 800f19c:	e000ed08 	.word	0xe000ed08

0800f1a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800f1a0:	b580      	push	{r7, lr}
 800f1a2:	b086      	sub	sp, #24
 800f1a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800f1a6:	4b46      	ldr	r3, [pc, #280]	; (800f2c0 <xPortStartScheduler+0x120>)
 800f1a8:	681b      	ldr	r3, [r3, #0]
 800f1aa:	4a46      	ldr	r2, [pc, #280]	; (800f2c4 <xPortStartScheduler+0x124>)
 800f1ac:	4293      	cmp	r3, r2
 800f1ae:	d10a      	bne.n	800f1c6 <xPortStartScheduler+0x26>
	__asm volatile
 800f1b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f1b4:	f383 8811 	msr	BASEPRI, r3
 800f1b8:	f3bf 8f6f 	isb	sy
 800f1bc:	f3bf 8f4f 	dsb	sy
 800f1c0:	613b      	str	r3, [r7, #16]
}
 800f1c2:	bf00      	nop
 800f1c4:	e7fe      	b.n	800f1c4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800f1c6:	4b3e      	ldr	r3, [pc, #248]	; (800f2c0 <xPortStartScheduler+0x120>)
 800f1c8:	681b      	ldr	r3, [r3, #0]
 800f1ca:	4a3f      	ldr	r2, [pc, #252]	; (800f2c8 <xPortStartScheduler+0x128>)
 800f1cc:	4293      	cmp	r3, r2
 800f1ce:	d10a      	bne.n	800f1e6 <xPortStartScheduler+0x46>
	__asm volatile
 800f1d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f1d4:	f383 8811 	msr	BASEPRI, r3
 800f1d8:	f3bf 8f6f 	isb	sy
 800f1dc:	f3bf 8f4f 	dsb	sy
 800f1e0:	60fb      	str	r3, [r7, #12]
}
 800f1e2:	bf00      	nop
 800f1e4:	e7fe      	b.n	800f1e4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800f1e6:	4b39      	ldr	r3, [pc, #228]	; (800f2cc <xPortStartScheduler+0x12c>)
 800f1e8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800f1ea:	697b      	ldr	r3, [r7, #20]
 800f1ec:	781b      	ldrb	r3, [r3, #0]
 800f1ee:	b2db      	uxtb	r3, r3
 800f1f0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800f1f2:	697b      	ldr	r3, [r7, #20]
 800f1f4:	22ff      	movs	r2, #255	; 0xff
 800f1f6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800f1f8:	697b      	ldr	r3, [r7, #20]
 800f1fa:	781b      	ldrb	r3, [r3, #0]
 800f1fc:	b2db      	uxtb	r3, r3
 800f1fe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800f200:	78fb      	ldrb	r3, [r7, #3]
 800f202:	b2db      	uxtb	r3, r3
 800f204:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800f208:	b2da      	uxtb	r2, r3
 800f20a:	4b31      	ldr	r3, [pc, #196]	; (800f2d0 <xPortStartScheduler+0x130>)
 800f20c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800f20e:	4b31      	ldr	r3, [pc, #196]	; (800f2d4 <xPortStartScheduler+0x134>)
 800f210:	2207      	movs	r2, #7
 800f212:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f214:	e009      	b.n	800f22a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800f216:	4b2f      	ldr	r3, [pc, #188]	; (800f2d4 <xPortStartScheduler+0x134>)
 800f218:	681b      	ldr	r3, [r3, #0]
 800f21a:	3b01      	subs	r3, #1
 800f21c:	4a2d      	ldr	r2, [pc, #180]	; (800f2d4 <xPortStartScheduler+0x134>)
 800f21e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800f220:	78fb      	ldrb	r3, [r7, #3]
 800f222:	b2db      	uxtb	r3, r3
 800f224:	005b      	lsls	r3, r3, #1
 800f226:	b2db      	uxtb	r3, r3
 800f228:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f22a:	78fb      	ldrb	r3, [r7, #3]
 800f22c:	b2db      	uxtb	r3, r3
 800f22e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f232:	2b80      	cmp	r3, #128	; 0x80
 800f234:	d0ef      	beq.n	800f216 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800f236:	4b27      	ldr	r3, [pc, #156]	; (800f2d4 <xPortStartScheduler+0x134>)
 800f238:	681b      	ldr	r3, [r3, #0]
 800f23a:	f1c3 0307 	rsb	r3, r3, #7
 800f23e:	2b04      	cmp	r3, #4
 800f240:	d00a      	beq.n	800f258 <xPortStartScheduler+0xb8>
	__asm volatile
 800f242:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f246:	f383 8811 	msr	BASEPRI, r3
 800f24a:	f3bf 8f6f 	isb	sy
 800f24e:	f3bf 8f4f 	dsb	sy
 800f252:	60bb      	str	r3, [r7, #8]
}
 800f254:	bf00      	nop
 800f256:	e7fe      	b.n	800f256 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800f258:	4b1e      	ldr	r3, [pc, #120]	; (800f2d4 <xPortStartScheduler+0x134>)
 800f25a:	681b      	ldr	r3, [r3, #0]
 800f25c:	021b      	lsls	r3, r3, #8
 800f25e:	4a1d      	ldr	r2, [pc, #116]	; (800f2d4 <xPortStartScheduler+0x134>)
 800f260:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800f262:	4b1c      	ldr	r3, [pc, #112]	; (800f2d4 <xPortStartScheduler+0x134>)
 800f264:	681b      	ldr	r3, [r3, #0]
 800f266:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800f26a:	4a1a      	ldr	r2, [pc, #104]	; (800f2d4 <xPortStartScheduler+0x134>)
 800f26c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800f26e:	687b      	ldr	r3, [r7, #4]
 800f270:	b2da      	uxtb	r2, r3
 800f272:	697b      	ldr	r3, [r7, #20]
 800f274:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800f276:	4b18      	ldr	r3, [pc, #96]	; (800f2d8 <xPortStartScheduler+0x138>)
 800f278:	681b      	ldr	r3, [r3, #0]
 800f27a:	4a17      	ldr	r2, [pc, #92]	; (800f2d8 <xPortStartScheduler+0x138>)
 800f27c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800f280:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800f282:	4b15      	ldr	r3, [pc, #84]	; (800f2d8 <xPortStartScheduler+0x138>)
 800f284:	681b      	ldr	r3, [r3, #0]
 800f286:	4a14      	ldr	r2, [pc, #80]	; (800f2d8 <xPortStartScheduler+0x138>)
 800f288:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800f28c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800f28e:	f000 f8dd 	bl	800f44c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800f292:	4b12      	ldr	r3, [pc, #72]	; (800f2dc <xPortStartScheduler+0x13c>)
 800f294:	2200      	movs	r2, #0
 800f296:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800f298:	f000 f8fc 	bl	800f494 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800f29c:	4b10      	ldr	r3, [pc, #64]	; (800f2e0 <xPortStartScheduler+0x140>)
 800f29e:	681b      	ldr	r3, [r3, #0]
 800f2a0:	4a0f      	ldr	r2, [pc, #60]	; (800f2e0 <xPortStartScheduler+0x140>)
 800f2a2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800f2a6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800f2a8:	f7ff ff66 	bl	800f178 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800f2ac:	f7ff f876 	bl	800e39c <vTaskSwitchContext>
	prvTaskExitError();
 800f2b0:	f7ff ff1c 	bl	800f0ec <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800f2b4:	2300      	movs	r3, #0
}
 800f2b6:	4618      	mov	r0, r3
 800f2b8:	3718      	adds	r7, #24
 800f2ba:	46bd      	mov	sp, r7
 800f2bc:	bd80      	pop	{r7, pc}
 800f2be:	bf00      	nop
 800f2c0:	e000ed00 	.word	0xe000ed00
 800f2c4:	410fc271 	.word	0x410fc271
 800f2c8:	410fc270 	.word	0x410fc270
 800f2cc:	e000e400 	.word	0xe000e400
 800f2d0:	20021fc4 	.word	0x20021fc4
 800f2d4:	20021fc8 	.word	0x20021fc8
 800f2d8:	e000ed20 	.word	0xe000ed20
 800f2dc:	20000034 	.word	0x20000034
 800f2e0:	e000ef34 	.word	0xe000ef34

0800f2e4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800f2e4:	b480      	push	{r7}
 800f2e6:	b083      	sub	sp, #12
 800f2e8:	af00      	add	r7, sp, #0
	__asm volatile
 800f2ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f2ee:	f383 8811 	msr	BASEPRI, r3
 800f2f2:	f3bf 8f6f 	isb	sy
 800f2f6:	f3bf 8f4f 	dsb	sy
 800f2fa:	607b      	str	r3, [r7, #4]
}
 800f2fc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800f2fe:	4b0f      	ldr	r3, [pc, #60]	; (800f33c <vPortEnterCritical+0x58>)
 800f300:	681b      	ldr	r3, [r3, #0]
 800f302:	3301      	adds	r3, #1
 800f304:	4a0d      	ldr	r2, [pc, #52]	; (800f33c <vPortEnterCritical+0x58>)
 800f306:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800f308:	4b0c      	ldr	r3, [pc, #48]	; (800f33c <vPortEnterCritical+0x58>)
 800f30a:	681b      	ldr	r3, [r3, #0]
 800f30c:	2b01      	cmp	r3, #1
 800f30e:	d10f      	bne.n	800f330 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800f310:	4b0b      	ldr	r3, [pc, #44]	; (800f340 <vPortEnterCritical+0x5c>)
 800f312:	681b      	ldr	r3, [r3, #0]
 800f314:	b2db      	uxtb	r3, r3
 800f316:	2b00      	cmp	r3, #0
 800f318:	d00a      	beq.n	800f330 <vPortEnterCritical+0x4c>
	__asm volatile
 800f31a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f31e:	f383 8811 	msr	BASEPRI, r3
 800f322:	f3bf 8f6f 	isb	sy
 800f326:	f3bf 8f4f 	dsb	sy
 800f32a:	603b      	str	r3, [r7, #0]
}
 800f32c:	bf00      	nop
 800f32e:	e7fe      	b.n	800f32e <vPortEnterCritical+0x4a>
	}
}
 800f330:	bf00      	nop
 800f332:	370c      	adds	r7, #12
 800f334:	46bd      	mov	sp, r7
 800f336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f33a:	4770      	bx	lr
 800f33c:	20000034 	.word	0x20000034
 800f340:	e000ed04 	.word	0xe000ed04

0800f344 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800f344:	b480      	push	{r7}
 800f346:	b083      	sub	sp, #12
 800f348:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800f34a:	4b12      	ldr	r3, [pc, #72]	; (800f394 <vPortExitCritical+0x50>)
 800f34c:	681b      	ldr	r3, [r3, #0]
 800f34e:	2b00      	cmp	r3, #0
 800f350:	d10a      	bne.n	800f368 <vPortExitCritical+0x24>
	__asm volatile
 800f352:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f356:	f383 8811 	msr	BASEPRI, r3
 800f35a:	f3bf 8f6f 	isb	sy
 800f35e:	f3bf 8f4f 	dsb	sy
 800f362:	607b      	str	r3, [r7, #4]
}
 800f364:	bf00      	nop
 800f366:	e7fe      	b.n	800f366 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800f368:	4b0a      	ldr	r3, [pc, #40]	; (800f394 <vPortExitCritical+0x50>)
 800f36a:	681b      	ldr	r3, [r3, #0]
 800f36c:	3b01      	subs	r3, #1
 800f36e:	4a09      	ldr	r2, [pc, #36]	; (800f394 <vPortExitCritical+0x50>)
 800f370:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800f372:	4b08      	ldr	r3, [pc, #32]	; (800f394 <vPortExitCritical+0x50>)
 800f374:	681b      	ldr	r3, [r3, #0]
 800f376:	2b00      	cmp	r3, #0
 800f378:	d105      	bne.n	800f386 <vPortExitCritical+0x42>
 800f37a:	2300      	movs	r3, #0
 800f37c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f37e:	683b      	ldr	r3, [r7, #0]
 800f380:	f383 8811 	msr	BASEPRI, r3
}
 800f384:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800f386:	bf00      	nop
 800f388:	370c      	adds	r7, #12
 800f38a:	46bd      	mov	sp, r7
 800f38c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f390:	4770      	bx	lr
 800f392:	bf00      	nop
 800f394:	20000034 	.word	0x20000034
	...

0800f3a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800f3a0:	f3ef 8009 	mrs	r0, PSP
 800f3a4:	f3bf 8f6f 	isb	sy
 800f3a8:	4b15      	ldr	r3, [pc, #84]	; (800f400 <pxCurrentTCBConst>)
 800f3aa:	681a      	ldr	r2, [r3, #0]
 800f3ac:	f01e 0f10 	tst.w	lr, #16
 800f3b0:	bf08      	it	eq
 800f3b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800f3b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f3ba:	6010      	str	r0, [r2, #0]
 800f3bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800f3c0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800f3c4:	f380 8811 	msr	BASEPRI, r0
 800f3c8:	f3bf 8f4f 	dsb	sy
 800f3cc:	f3bf 8f6f 	isb	sy
 800f3d0:	f7fe ffe4 	bl	800e39c <vTaskSwitchContext>
 800f3d4:	f04f 0000 	mov.w	r0, #0
 800f3d8:	f380 8811 	msr	BASEPRI, r0
 800f3dc:	bc09      	pop	{r0, r3}
 800f3de:	6819      	ldr	r1, [r3, #0]
 800f3e0:	6808      	ldr	r0, [r1, #0]
 800f3e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f3e6:	f01e 0f10 	tst.w	lr, #16
 800f3ea:	bf08      	it	eq
 800f3ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800f3f0:	f380 8809 	msr	PSP, r0
 800f3f4:	f3bf 8f6f 	isb	sy
 800f3f8:	4770      	bx	lr
 800f3fa:	bf00      	nop
 800f3fc:	f3af 8000 	nop.w

0800f400 <pxCurrentTCBConst>:
 800f400:	20021d9c 	.word	0x20021d9c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800f404:	bf00      	nop
 800f406:	bf00      	nop

0800f408 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800f408:	b580      	push	{r7, lr}
 800f40a:	b082      	sub	sp, #8
 800f40c:	af00      	add	r7, sp, #0
	__asm volatile
 800f40e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f412:	f383 8811 	msr	BASEPRI, r3
 800f416:	f3bf 8f6f 	isb	sy
 800f41a:	f3bf 8f4f 	dsb	sy
 800f41e:	607b      	str	r3, [r7, #4]
}
 800f420:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800f422:	f7fe ff03 	bl	800e22c <xTaskIncrementTick>
 800f426:	4603      	mov	r3, r0
 800f428:	2b00      	cmp	r3, #0
 800f42a:	d003      	beq.n	800f434 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800f42c:	4b06      	ldr	r3, [pc, #24]	; (800f448 <SysTick_Handler+0x40>)
 800f42e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f432:	601a      	str	r2, [r3, #0]
 800f434:	2300      	movs	r3, #0
 800f436:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f438:	683b      	ldr	r3, [r7, #0]
 800f43a:	f383 8811 	msr	BASEPRI, r3
}
 800f43e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800f440:	bf00      	nop
 800f442:	3708      	adds	r7, #8
 800f444:	46bd      	mov	sp, r7
 800f446:	bd80      	pop	{r7, pc}
 800f448:	e000ed04 	.word	0xe000ed04

0800f44c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800f44c:	b480      	push	{r7}
 800f44e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800f450:	4b0b      	ldr	r3, [pc, #44]	; (800f480 <vPortSetupTimerInterrupt+0x34>)
 800f452:	2200      	movs	r2, #0
 800f454:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800f456:	4b0b      	ldr	r3, [pc, #44]	; (800f484 <vPortSetupTimerInterrupt+0x38>)
 800f458:	2200      	movs	r2, #0
 800f45a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800f45c:	4b0a      	ldr	r3, [pc, #40]	; (800f488 <vPortSetupTimerInterrupt+0x3c>)
 800f45e:	681b      	ldr	r3, [r3, #0]
 800f460:	4a0a      	ldr	r2, [pc, #40]	; (800f48c <vPortSetupTimerInterrupt+0x40>)
 800f462:	fba2 2303 	umull	r2, r3, r2, r3
 800f466:	099b      	lsrs	r3, r3, #6
 800f468:	4a09      	ldr	r2, [pc, #36]	; (800f490 <vPortSetupTimerInterrupt+0x44>)
 800f46a:	3b01      	subs	r3, #1
 800f46c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800f46e:	4b04      	ldr	r3, [pc, #16]	; (800f480 <vPortSetupTimerInterrupt+0x34>)
 800f470:	2207      	movs	r2, #7
 800f472:	601a      	str	r2, [r3, #0]
}
 800f474:	bf00      	nop
 800f476:	46bd      	mov	sp, r7
 800f478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f47c:	4770      	bx	lr
 800f47e:	bf00      	nop
 800f480:	e000e010 	.word	0xe000e010
 800f484:	e000e018 	.word	0xe000e018
 800f488:	20000028 	.word	0x20000028
 800f48c:	10624dd3 	.word	0x10624dd3
 800f490:	e000e014 	.word	0xe000e014

0800f494 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800f494:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800f4a4 <vPortEnableVFP+0x10>
 800f498:	6801      	ldr	r1, [r0, #0]
 800f49a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800f49e:	6001      	str	r1, [r0, #0]
 800f4a0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800f4a2:	bf00      	nop
 800f4a4:	e000ed88 	.word	0xe000ed88

0800f4a8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800f4a8:	b480      	push	{r7}
 800f4aa:	b085      	sub	sp, #20
 800f4ac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800f4ae:	f3ef 8305 	mrs	r3, IPSR
 800f4b2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800f4b4:	68fb      	ldr	r3, [r7, #12]
 800f4b6:	2b0f      	cmp	r3, #15
 800f4b8:	d914      	bls.n	800f4e4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800f4ba:	4a17      	ldr	r2, [pc, #92]	; (800f518 <vPortValidateInterruptPriority+0x70>)
 800f4bc:	68fb      	ldr	r3, [r7, #12]
 800f4be:	4413      	add	r3, r2
 800f4c0:	781b      	ldrb	r3, [r3, #0]
 800f4c2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800f4c4:	4b15      	ldr	r3, [pc, #84]	; (800f51c <vPortValidateInterruptPriority+0x74>)
 800f4c6:	781b      	ldrb	r3, [r3, #0]
 800f4c8:	7afa      	ldrb	r2, [r7, #11]
 800f4ca:	429a      	cmp	r2, r3
 800f4cc:	d20a      	bcs.n	800f4e4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800f4ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f4d2:	f383 8811 	msr	BASEPRI, r3
 800f4d6:	f3bf 8f6f 	isb	sy
 800f4da:	f3bf 8f4f 	dsb	sy
 800f4de:	607b      	str	r3, [r7, #4]
}
 800f4e0:	bf00      	nop
 800f4e2:	e7fe      	b.n	800f4e2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800f4e4:	4b0e      	ldr	r3, [pc, #56]	; (800f520 <vPortValidateInterruptPriority+0x78>)
 800f4e6:	681b      	ldr	r3, [r3, #0]
 800f4e8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800f4ec:	4b0d      	ldr	r3, [pc, #52]	; (800f524 <vPortValidateInterruptPriority+0x7c>)
 800f4ee:	681b      	ldr	r3, [r3, #0]
 800f4f0:	429a      	cmp	r2, r3
 800f4f2:	d90a      	bls.n	800f50a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800f4f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f4f8:	f383 8811 	msr	BASEPRI, r3
 800f4fc:	f3bf 8f6f 	isb	sy
 800f500:	f3bf 8f4f 	dsb	sy
 800f504:	603b      	str	r3, [r7, #0]
}
 800f506:	bf00      	nop
 800f508:	e7fe      	b.n	800f508 <vPortValidateInterruptPriority+0x60>
	}
 800f50a:	bf00      	nop
 800f50c:	3714      	adds	r7, #20
 800f50e:	46bd      	mov	sp, r7
 800f510:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f514:	4770      	bx	lr
 800f516:	bf00      	nop
 800f518:	e000e3f0 	.word	0xe000e3f0
 800f51c:	20021fc4 	.word	0x20021fc4
 800f520:	e000ed0c 	.word	0xe000ed0c
 800f524:	20021fc8 	.word	0x20021fc8

0800f528 <__errno>:
 800f528:	4b01      	ldr	r3, [pc, #4]	; (800f530 <__errno+0x8>)
 800f52a:	6818      	ldr	r0, [r3, #0]
 800f52c:	4770      	bx	lr
 800f52e:	bf00      	nop
 800f530:	20000038 	.word	0x20000038

0800f534 <__libc_init_array>:
 800f534:	b570      	push	{r4, r5, r6, lr}
 800f536:	4d0d      	ldr	r5, [pc, #52]	; (800f56c <__libc_init_array+0x38>)
 800f538:	4c0d      	ldr	r4, [pc, #52]	; (800f570 <__libc_init_array+0x3c>)
 800f53a:	1b64      	subs	r4, r4, r5
 800f53c:	10a4      	asrs	r4, r4, #2
 800f53e:	2600      	movs	r6, #0
 800f540:	42a6      	cmp	r6, r4
 800f542:	d109      	bne.n	800f558 <__libc_init_array+0x24>
 800f544:	4d0b      	ldr	r5, [pc, #44]	; (800f574 <__libc_init_array+0x40>)
 800f546:	4c0c      	ldr	r4, [pc, #48]	; (800f578 <__libc_init_array+0x44>)
 800f548:	f002 fff2 	bl	8012530 <_init>
 800f54c:	1b64      	subs	r4, r4, r5
 800f54e:	10a4      	asrs	r4, r4, #2
 800f550:	2600      	movs	r6, #0
 800f552:	42a6      	cmp	r6, r4
 800f554:	d105      	bne.n	800f562 <__libc_init_array+0x2e>
 800f556:	bd70      	pop	{r4, r5, r6, pc}
 800f558:	f855 3b04 	ldr.w	r3, [r5], #4
 800f55c:	4798      	blx	r3
 800f55e:	3601      	adds	r6, #1
 800f560:	e7ee      	b.n	800f540 <__libc_init_array+0xc>
 800f562:	f855 3b04 	ldr.w	r3, [r5], #4
 800f566:	4798      	blx	r3
 800f568:	3601      	adds	r6, #1
 800f56a:	e7f2      	b.n	800f552 <__libc_init_array+0x1e>
 800f56c:	08012e94 	.word	0x08012e94
 800f570:	08012e94 	.word	0x08012e94
 800f574:	08012e94 	.word	0x08012e94
 800f578:	08012e98 	.word	0x08012e98

0800f57c <malloc>:
 800f57c:	4b02      	ldr	r3, [pc, #8]	; (800f588 <malloc+0xc>)
 800f57e:	4601      	mov	r1, r0
 800f580:	6818      	ldr	r0, [r3, #0]
 800f582:	f000 b88d 	b.w	800f6a0 <_malloc_r>
 800f586:	bf00      	nop
 800f588:	20000038 	.word	0x20000038

0800f58c <free>:
 800f58c:	4b02      	ldr	r3, [pc, #8]	; (800f598 <free+0xc>)
 800f58e:	4601      	mov	r1, r0
 800f590:	6818      	ldr	r0, [r3, #0]
 800f592:	f000 b819 	b.w	800f5c8 <_free_r>
 800f596:	bf00      	nop
 800f598:	20000038 	.word	0x20000038

0800f59c <memcpy>:
 800f59c:	440a      	add	r2, r1
 800f59e:	4291      	cmp	r1, r2
 800f5a0:	f100 33ff 	add.w	r3, r0, #4294967295
 800f5a4:	d100      	bne.n	800f5a8 <memcpy+0xc>
 800f5a6:	4770      	bx	lr
 800f5a8:	b510      	push	{r4, lr}
 800f5aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f5ae:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f5b2:	4291      	cmp	r1, r2
 800f5b4:	d1f9      	bne.n	800f5aa <memcpy+0xe>
 800f5b6:	bd10      	pop	{r4, pc}

0800f5b8 <memset>:
 800f5b8:	4402      	add	r2, r0
 800f5ba:	4603      	mov	r3, r0
 800f5bc:	4293      	cmp	r3, r2
 800f5be:	d100      	bne.n	800f5c2 <memset+0xa>
 800f5c0:	4770      	bx	lr
 800f5c2:	f803 1b01 	strb.w	r1, [r3], #1
 800f5c6:	e7f9      	b.n	800f5bc <memset+0x4>

0800f5c8 <_free_r>:
 800f5c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f5ca:	2900      	cmp	r1, #0
 800f5cc:	d044      	beq.n	800f658 <_free_r+0x90>
 800f5ce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f5d2:	9001      	str	r0, [sp, #4]
 800f5d4:	2b00      	cmp	r3, #0
 800f5d6:	f1a1 0404 	sub.w	r4, r1, #4
 800f5da:	bfb8      	it	lt
 800f5dc:	18e4      	addlt	r4, r4, r3
 800f5de:	f001 ff39 	bl	8011454 <__malloc_lock>
 800f5e2:	4a1e      	ldr	r2, [pc, #120]	; (800f65c <_free_r+0x94>)
 800f5e4:	9801      	ldr	r0, [sp, #4]
 800f5e6:	6813      	ldr	r3, [r2, #0]
 800f5e8:	b933      	cbnz	r3, 800f5f8 <_free_r+0x30>
 800f5ea:	6063      	str	r3, [r4, #4]
 800f5ec:	6014      	str	r4, [r2, #0]
 800f5ee:	b003      	add	sp, #12
 800f5f0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f5f4:	f001 bf34 	b.w	8011460 <__malloc_unlock>
 800f5f8:	42a3      	cmp	r3, r4
 800f5fa:	d908      	bls.n	800f60e <_free_r+0x46>
 800f5fc:	6825      	ldr	r5, [r4, #0]
 800f5fe:	1961      	adds	r1, r4, r5
 800f600:	428b      	cmp	r3, r1
 800f602:	bf01      	itttt	eq
 800f604:	6819      	ldreq	r1, [r3, #0]
 800f606:	685b      	ldreq	r3, [r3, #4]
 800f608:	1949      	addeq	r1, r1, r5
 800f60a:	6021      	streq	r1, [r4, #0]
 800f60c:	e7ed      	b.n	800f5ea <_free_r+0x22>
 800f60e:	461a      	mov	r2, r3
 800f610:	685b      	ldr	r3, [r3, #4]
 800f612:	b10b      	cbz	r3, 800f618 <_free_r+0x50>
 800f614:	42a3      	cmp	r3, r4
 800f616:	d9fa      	bls.n	800f60e <_free_r+0x46>
 800f618:	6811      	ldr	r1, [r2, #0]
 800f61a:	1855      	adds	r5, r2, r1
 800f61c:	42a5      	cmp	r5, r4
 800f61e:	d10b      	bne.n	800f638 <_free_r+0x70>
 800f620:	6824      	ldr	r4, [r4, #0]
 800f622:	4421      	add	r1, r4
 800f624:	1854      	adds	r4, r2, r1
 800f626:	42a3      	cmp	r3, r4
 800f628:	6011      	str	r1, [r2, #0]
 800f62a:	d1e0      	bne.n	800f5ee <_free_r+0x26>
 800f62c:	681c      	ldr	r4, [r3, #0]
 800f62e:	685b      	ldr	r3, [r3, #4]
 800f630:	6053      	str	r3, [r2, #4]
 800f632:	4421      	add	r1, r4
 800f634:	6011      	str	r1, [r2, #0]
 800f636:	e7da      	b.n	800f5ee <_free_r+0x26>
 800f638:	d902      	bls.n	800f640 <_free_r+0x78>
 800f63a:	230c      	movs	r3, #12
 800f63c:	6003      	str	r3, [r0, #0]
 800f63e:	e7d6      	b.n	800f5ee <_free_r+0x26>
 800f640:	6825      	ldr	r5, [r4, #0]
 800f642:	1961      	adds	r1, r4, r5
 800f644:	428b      	cmp	r3, r1
 800f646:	bf04      	itt	eq
 800f648:	6819      	ldreq	r1, [r3, #0]
 800f64a:	685b      	ldreq	r3, [r3, #4]
 800f64c:	6063      	str	r3, [r4, #4]
 800f64e:	bf04      	itt	eq
 800f650:	1949      	addeq	r1, r1, r5
 800f652:	6021      	streq	r1, [r4, #0]
 800f654:	6054      	str	r4, [r2, #4]
 800f656:	e7ca      	b.n	800f5ee <_free_r+0x26>
 800f658:	b003      	add	sp, #12
 800f65a:	bd30      	pop	{r4, r5, pc}
 800f65c:	20021fcc 	.word	0x20021fcc

0800f660 <sbrk_aligned>:
 800f660:	b570      	push	{r4, r5, r6, lr}
 800f662:	4e0e      	ldr	r6, [pc, #56]	; (800f69c <sbrk_aligned+0x3c>)
 800f664:	460c      	mov	r4, r1
 800f666:	6831      	ldr	r1, [r6, #0]
 800f668:	4605      	mov	r5, r0
 800f66a:	b911      	cbnz	r1, 800f672 <sbrk_aligned+0x12>
 800f66c:	f000 fd84 	bl	8010178 <_sbrk_r>
 800f670:	6030      	str	r0, [r6, #0]
 800f672:	4621      	mov	r1, r4
 800f674:	4628      	mov	r0, r5
 800f676:	f000 fd7f 	bl	8010178 <_sbrk_r>
 800f67a:	1c43      	adds	r3, r0, #1
 800f67c:	d00a      	beq.n	800f694 <sbrk_aligned+0x34>
 800f67e:	1cc4      	adds	r4, r0, #3
 800f680:	f024 0403 	bic.w	r4, r4, #3
 800f684:	42a0      	cmp	r0, r4
 800f686:	d007      	beq.n	800f698 <sbrk_aligned+0x38>
 800f688:	1a21      	subs	r1, r4, r0
 800f68a:	4628      	mov	r0, r5
 800f68c:	f000 fd74 	bl	8010178 <_sbrk_r>
 800f690:	3001      	adds	r0, #1
 800f692:	d101      	bne.n	800f698 <sbrk_aligned+0x38>
 800f694:	f04f 34ff 	mov.w	r4, #4294967295
 800f698:	4620      	mov	r0, r4
 800f69a:	bd70      	pop	{r4, r5, r6, pc}
 800f69c:	20021fd0 	.word	0x20021fd0

0800f6a0 <_malloc_r>:
 800f6a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f6a4:	1ccd      	adds	r5, r1, #3
 800f6a6:	f025 0503 	bic.w	r5, r5, #3
 800f6aa:	3508      	adds	r5, #8
 800f6ac:	2d0c      	cmp	r5, #12
 800f6ae:	bf38      	it	cc
 800f6b0:	250c      	movcc	r5, #12
 800f6b2:	2d00      	cmp	r5, #0
 800f6b4:	4607      	mov	r7, r0
 800f6b6:	db01      	blt.n	800f6bc <_malloc_r+0x1c>
 800f6b8:	42a9      	cmp	r1, r5
 800f6ba:	d905      	bls.n	800f6c8 <_malloc_r+0x28>
 800f6bc:	230c      	movs	r3, #12
 800f6be:	603b      	str	r3, [r7, #0]
 800f6c0:	2600      	movs	r6, #0
 800f6c2:	4630      	mov	r0, r6
 800f6c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f6c8:	4e2e      	ldr	r6, [pc, #184]	; (800f784 <_malloc_r+0xe4>)
 800f6ca:	f001 fec3 	bl	8011454 <__malloc_lock>
 800f6ce:	6833      	ldr	r3, [r6, #0]
 800f6d0:	461c      	mov	r4, r3
 800f6d2:	bb34      	cbnz	r4, 800f722 <_malloc_r+0x82>
 800f6d4:	4629      	mov	r1, r5
 800f6d6:	4638      	mov	r0, r7
 800f6d8:	f7ff ffc2 	bl	800f660 <sbrk_aligned>
 800f6dc:	1c43      	adds	r3, r0, #1
 800f6de:	4604      	mov	r4, r0
 800f6e0:	d14d      	bne.n	800f77e <_malloc_r+0xde>
 800f6e2:	6834      	ldr	r4, [r6, #0]
 800f6e4:	4626      	mov	r6, r4
 800f6e6:	2e00      	cmp	r6, #0
 800f6e8:	d140      	bne.n	800f76c <_malloc_r+0xcc>
 800f6ea:	6823      	ldr	r3, [r4, #0]
 800f6ec:	4631      	mov	r1, r6
 800f6ee:	4638      	mov	r0, r7
 800f6f0:	eb04 0803 	add.w	r8, r4, r3
 800f6f4:	f000 fd40 	bl	8010178 <_sbrk_r>
 800f6f8:	4580      	cmp	r8, r0
 800f6fa:	d13a      	bne.n	800f772 <_malloc_r+0xd2>
 800f6fc:	6821      	ldr	r1, [r4, #0]
 800f6fe:	3503      	adds	r5, #3
 800f700:	1a6d      	subs	r5, r5, r1
 800f702:	f025 0503 	bic.w	r5, r5, #3
 800f706:	3508      	adds	r5, #8
 800f708:	2d0c      	cmp	r5, #12
 800f70a:	bf38      	it	cc
 800f70c:	250c      	movcc	r5, #12
 800f70e:	4629      	mov	r1, r5
 800f710:	4638      	mov	r0, r7
 800f712:	f7ff ffa5 	bl	800f660 <sbrk_aligned>
 800f716:	3001      	adds	r0, #1
 800f718:	d02b      	beq.n	800f772 <_malloc_r+0xd2>
 800f71a:	6823      	ldr	r3, [r4, #0]
 800f71c:	442b      	add	r3, r5
 800f71e:	6023      	str	r3, [r4, #0]
 800f720:	e00e      	b.n	800f740 <_malloc_r+0xa0>
 800f722:	6822      	ldr	r2, [r4, #0]
 800f724:	1b52      	subs	r2, r2, r5
 800f726:	d41e      	bmi.n	800f766 <_malloc_r+0xc6>
 800f728:	2a0b      	cmp	r2, #11
 800f72a:	d916      	bls.n	800f75a <_malloc_r+0xba>
 800f72c:	1961      	adds	r1, r4, r5
 800f72e:	42a3      	cmp	r3, r4
 800f730:	6025      	str	r5, [r4, #0]
 800f732:	bf18      	it	ne
 800f734:	6059      	strne	r1, [r3, #4]
 800f736:	6863      	ldr	r3, [r4, #4]
 800f738:	bf08      	it	eq
 800f73a:	6031      	streq	r1, [r6, #0]
 800f73c:	5162      	str	r2, [r4, r5]
 800f73e:	604b      	str	r3, [r1, #4]
 800f740:	4638      	mov	r0, r7
 800f742:	f104 060b 	add.w	r6, r4, #11
 800f746:	f001 fe8b 	bl	8011460 <__malloc_unlock>
 800f74a:	f026 0607 	bic.w	r6, r6, #7
 800f74e:	1d23      	adds	r3, r4, #4
 800f750:	1af2      	subs	r2, r6, r3
 800f752:	d0b6      	beq.n	800f6c2 <_malloc_r+0x22>
 800f754:	1b9b      	subs	r3, r3, r6
 800f756:	50a3      	str	r3, [r4, r2]
 800f758:	e7b3      	b.n	800f6c2 <_malloc_r+0x22>
 800f75a:	6862      	ldr	r2, [r4, #4]
 800f75c:	42a3      	cmp	r3, r4
 800f75e:	bf0c      	ite	eq
 800f760:	6032      	streq	r2, [r6, #0]
 800f762:	605a      	strne	r2, [r3, #4]
 800f764:	e7ec      	b.n	800f740 <_malloc_r+0xa0>
 800f766:	4623      	mov	r3, r4
 800f768:	6864      	ldr	r4, [r4, #4]
 800f76a:	e7b2      	b.n	800f6d2 <_malloc_r+0x32>
 800f76c:	4634      	mov	r4, r6
 800f76e:	6876      	ldr	r6, [r6, #4]
 800f770:	e7b9      	b.n	800f6e6 <_malloc_r+0x46>
 800f772:	230c      	movs	r3, #12
 800f774:	603b      	str	r3, [r7, #0]
 800f776:	4638      	mov	r0, r7
 800f778:	f001 fe72 	bl	8011460 <__malloc_unlock>
 800f77c:	e7a1      	b.n	800f6c2 <_malloc_r+0x22>
 800f77e:	6025      	str	r5, [r4, #0]
 800f780:	e7de      	b.n	800f740 <_malloc_r+0xa0>
 800f782:	bf00      	nop
 800f784:	20021fcc 	.word	0x20021fcc

0800f788 <__cvt>:
 800f788:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f78c:	ec55 4b10 	vmov	r4, r5, d0
 800f790:	2d00      	cmp	r5, #0
 800f792:	460e      	mov	r6, r1
 800f794:	4619      	mov	r1, r3
 800f796:	462b      	mov	r3, r5
 800f798:	bfbb      	ittet	lt
 800f79a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800f79e:	461d      	movlt	r5, r3
 800f7a0:	2300      	movge	r3, #0
 800f7a2:	232d      	movlt	r3, #45	; 0x2d
 800f7a4:	700b      	strb	r3, [r1, #0]
 800f7a6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f7a8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800f7ac:	4691      	mov	r9, r2
 800f7ae:	f023 0820 	bic.w	r8, r3, #32
 800f7b2:	bfbc      	itt	lt
 800f7b4:	4622      	movlt	r2, r4
 800f7b6:	4614      	movlt	r4, r2
 800f7b8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800f7bc:	d005      	beq.n	800f7ca <__cvt+0x42>
 800f7be:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800f7c2:	d100      	bne.n	800f7c6 <__cvt+0x3e>
 800f7c4:	3601      	adds	r6, #1
 800f7c6:	2102      	movs	r1, #2
 800f7c8:	e000      	b.n	800f7cc <__cvt+0x44>
 800f7ca:	2103      	movs	r1, #3
 800f7cc:	ab03      	add	r3, sp, #12
 800f7ce:	9301      	str	r3, [sp, #4]
 800f7d0:	ab02      	add	r3, sp, #8
 800f7d2:	9300      	str	r3, [sp, #0]
 800f7d4:	ec45 4b10 	vmov	d0, r4, r5
 800f7d8:	4653      	mov	r3, sl
 800f7da:	4632      	mov	r2, r6
 800f7dc:	f000 fe28 	bl	8010430 <_dtoa_r>
 800f7e0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800f7e4:	4607      	mov	r7, r0
 800f7e6:	d102      	bne.n	800f7ee <__cvt+0x66>
 800f7e8:	f019 0f01 	tst.w	r9, #1
 800f7ec:	d022      	beq.n	800f834 <__cvt+0xac>
 800f7ee:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800f7f2:	eb07 0906 	add.w	r9, r7, r6
 800f7f6:	d110      	bne.n	800f81a <__cvt+0x92>
 800f7f8:	783b      	ldrb	r3, [r7, #0]
 800f7fa:	2b30      	cmp	r3, #48	; 0x30
 800f7fc:	d10a      	bne.n	800f814 <__cvt+0x8c>
 800f7fe:	2200      	movs	r2, #0
 800f800:	2300      	movs	r3, #0
 800f802:	4620      	mov	r0, r4
 800f804:	4629      	mov	r1, r5
 800f806:	f7f1 f967 	bl	8000ad8 <__aeabi_dcmpeq>
 800f80a:	b918      	cbnz	r0, 800f814 <__cvt+0x8c>
 800f80c:	f1c6 0601 	rsb	r6, r6, #1
 800f810:	f8ca 6000 	str.w	r6, [sl]
 800f814:	f8da 3000 	ldr.w	r3, [sl]
 800f818:	4499      	add	r9, r3
 800f81a:	2200      	movs	r2, #0
 800f81c:	2300      	movs	r3, #0
 800f81e:	4620      	mov	r0, r4
 800f820:	4629      	mov	r1, r5
 800f822:	f7f1 f959 	bl	8000ad8 <__aeabi_dcmpeq>
 800f826:	b108      	cbz	r0, 800f82c <__cvt+0xa4>
 800f828:	f8cd 900c 	str.w	r9, [sp, #12]
 800f82c:	2230      	movs	r2, #48	; 0x30
 800f82e:	9b03      	ldr	r3, [sp, #12]
 800f830:	454b      	cmp	r3, r9
 800f832:	d307      	bcc.n	800f844 <__cvt+0xbc>
 800f834:	9b03      	ldr	r3, [sp, #12]
 800f836:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f838:	1bdb      	subs	r3, r3, r7
 800f83a:	4638      	mov	r0, r7
 800f83c:	6013      	str	r3, [r2, #0]
 800f83e:	b004      	add	sp, #16
 800f840:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f844:	1c59      	adds	r1, r3, #1
 800f846:	9103      	str	r1, [sp, #12]
 800f848:	701a      	strb	r2, [r3, #0]
 800f84a:	e7f0      	b.n	800f82e <__cvt+0xa6>

0800f84c <__exponent>:
 800f84c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f84e:	4603      	mov	r3, r0
 800f850:	2900      	cmp	r1, #0
 800f852:	bfb8      	it	lt
 800f854:	4249      	neglt	r1, r1
 800f856:	f803 2b02 	strb.w	r2, [r3], #2
 800f85a:	bfb4      	ite	lt
 800f85c:	222d      	movlt	r2, #45	; 0x2d
 800f85e:	222b      	movge	r2, #43	; 0x2b
 800f860:	2909      	cmp	r1, #9
 800f862:	7042      	strb	r2, [r0, #1]
 800f864:	dd2a      	ble.n	800f8bc <__exponent+0x70>
 800f866:	f10d 0407 	add.w	r4, sp, #7
 800f86a:	46a4      	mov	ip, r4
 800f86c:	270a      	movs	r7, #10
 800f86e:	46a6      	mov	lr, r4
 800f870:	460a      	mov	r2, r1
 800f872:	fb91 f6f7 	sdiv	r6, r1, r7
 800f876:	fb07 1516 	mls	r5, r7, r6, r1
 800f87a:	3530      	adds	r5, #48	; 0x30
 800f87c:	2a63      	cmp	r2, #99	; 0x63
 800f87e:	f104 34ff 	add.w	r4, r4, #4294967295
 800f882:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800f886:	4631      	mov	r1, r6
 800f888:	dcf1      	bgt.n	800f86e <__exponent+0x22>
 800f88a:	3130      	adds	r1, #48	; 0x30
 800f88c:	f1ae 0502 	sub.w	r5, lr, #2
 800f890:	f804 1c01 	strb.w	r1, [r4, #-1]
 800f894:	1c44      	adds	r4, r0, #1
 800f896:	4629      	mov	r1, r5
 800f898:	4561      	cmp	r1, ip
 800f89a:	d30a      	bcc.n	800f8b2 <__exponent+0x66>
 800f89c:	f10d 0209 	add.w	r2, sp, #9
 800f8a0:	eba2 020e 	sub.w	r2, r2, lr
 800f8a4:	4565      	cmp	r5, ip
 800f8a6:	bf88      	it	hi
 800f8a8:	2200      	movhi	r2, #0
 800f8aa:	4413      	add	r3, r2
 800f8ac:	1a18      	subs	r0, r3, r0
 800f8ae:	b003      	add	sp, #12
 800f8b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f8b2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f8b6:	f804 2f01 	strb.w	r2, [r4, #1]!
 800f8ba:	e7ed      	b.n	800f898 <__exponent+0x4c>
 800f8bc:	2330      	movs	r3, #48	; 0x30
 800f8be:	3130      	adds	r1, #48	; 0x30
 800f8c0:	7083      	strb	r3, [r0, #2]
 800f8c2:	70c1      	strb	r1, [r0, #3]
 800f8c4:	1d03      	adds	r3, r0, #4
 800f8c6:	e7f1      	b.n	800f8ac <__exponent+0x60>

0800f8c8 <_printf_float>:
 800f8c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f8cc:	ed2d 8b02 	vpush	{d8}
 800f8d0:	b08d      	sub	sp, #52	; 0x34
 800f8d2:	460c      	mov	r4, r1
 800f8d4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800f8d8:	4616      	mov	r6, r2
 800f8da:	461f      	mov	r7, r3
 800f8dc:	4605      	mov	r5, r0
 800f8de:	f001 fd4d 	bl	801137c <_localeconv_r>
 800f8e2:	f8d0 a000 	ldr.w	sl, [r0]
 800f8e6:	4650      	mov	r0, sl
 800f8e8:	f7f0 fc7a 	bl	80001e0 <strlen>
 800f8ec:	2300      	movs	r3, #0
 800f8ee:	930a      	str	r3, [sp, #40]	; 0x28
 800f8f0:	6823      	ldr	r3, [r4, #0]
 800f8f2:	9305      	str	r3, [sp, #20]
 800f8f4:	f8d8 3000 	ldr.w	r3, [r8]
 800f8f8:	f894 b018 	ldrb.w	fp, [r4, #24]
 800f8fc:	3307      	adds	r3, #7
 800f8fe:	f023 0307 	bic.w	r3, r3, #7
 800f902:	f103 0208 	add.w	r2, r3, #8
 800f906:	f8c8 2000 	str.w	r2, [r8]
 800f90a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f90e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800f912:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800f916:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800f91a:	9307      	str	r3, [sp, #28]
 800f91c:	f8cd 8018 	str.w	r8, [sp, #24]
 800f920:	ee08 0a10 	vmov	s16, r0
 800f924:	4b9f      	ldr	r3, [pc, #636]	; (800fba4 <_printf_float+0x2dc>)
 800f926:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f92a:	f04f 32ff 	mov.w	r2, #4294967295
 800f92e:	f7f1 f905 	bl	8000b3c <__aeabi_dcmpun>
 800f932:	bb88      	cbnz	r0, 800f998 <_printf_float+0xd0>
 800f934:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f938:	4b9a      	ldr	r3, [pc, #616]	; (800fba4 <_printf_float+0x2dc>)
 800f93a:	f04f 32ff 	mov.w	r2, #4294967295
 800f93e:	f7f1 f8df 	bl	8000b00 <__aeabi_dcmple>
 800f942:	bb48      	cbnz	r0, 800f998 <_printf_float+0xd0>
 800f944:	2200      	movs	r2, #0
 800f946:	2300      	movs	r3, #0
 800f948:	4640      	mov	r0, r8
 800f94a:	4649      	mov	r1, r9
 800f94c:	f7f1 f8ce 	bl	8000aec <__aeabi_dcmplt>
 800f950:	b110      	cbz	r0, 800f958 <_printf_float+0x90>
 800f952:	232d      	movs	r3, #45	; 0x2d
 800f954:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f958:	4b93      	ldr	r3, [pc, #588]	; (800fba8 <_printf_float+0x2e0>)
 800f95a:	4894      	ldr	r0, [pc, #592]	; (800fbac <_printf_float+0x2e4>)
 800f95c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800f960:	bf94      	ite	ls
 800f962:	4698      	movls	r8, r3
 800f964:	4680      	movhi	r8, r0
 800f966:	2303      	movs	r3, #3
 800f968:	6123      	str	r3, [r4, #16]
 800f96a:	9b05      	ldr	r3, [sp, #20]
 800f96c:	f023 0204 	bic.w	r2, r3, #4
 800f970:	6022      	str	r2, [r4, #0]
 800f972:	f04f 0900 	mov.w	r9, #0
 800f976:	9700      	str	r7, [sp, #0]
 800f978:	4633      	mov	r3, r6
 800f97a:	aa0b      	add	r2, sp, #44	; 0x2c
 800f97c:	4621      	mov	r1, r4
 800f97e:	4628      	mov	r0, r5
 800f980:	f000 f9d8 	bl	800fd34 <_printf_common>
 800f984:	3001      	adds	r0, #1
 800f986:	f040 8090 	bne.w	800faaa <_printf_float+0x1e2>
 800f98a:	f04f 30ff 	mov.w	r0, #4294967295
 800f98e:	b00d      	add	sp, #52	; 0x34
 800f990:	ecbd 8b02 	vpop	{d8}
 800f994:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f998:	4642      	mov	r2, r8
 800f99a:	464b      	mov	r3, r9
 800f99c:	4640      	mov	r0, r8
 800f99e:	4649      	mov	r1, r9
 800f9a0:	f7f1 f8cc 	bl	8000b3c <__aeabi_dcmpun>
 800f9a4:	b140      	cbz	r0, 800f9b8 <_printf_float+0xf0>
 800f9a6:	464b      	mov	r3, r9
 800f9a8:	2b00      	cmp	r3, #0
 800f9aa:	bfbc      	itt	lt
 800f9ac:	232d      	movlt	r3, #45	; 0x2d
 800f9ae:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800f9b2:	487f      	ldr	r0, [pc, #508]	; (800fbb0 <_printf_float+0x2e8>)
 800f9b4:	4b7f      	ldr	r3, [pc, #508]	; (800fbb4 <_printf_float+0x2ec>)
 800f9b6:	e7d1      	b.n	800f95c <_printf_float+0x94>
 800f9b8:	6863      	ldr	r3, [r4, #4]
 800f9ba:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800f9be:	9206      	str	r2, [sp, #24]
 800f9c0:	1c5a      	adds	r2, r3, #1
 800f9c2:	d13f      	bne.n	800fa44 <_printf_float+0x17c>
 800f9c4:	2306      	movs	r3, #6
 800f9c6:	6063      	str	r3, [r4, #4]
 800f9c8:	9b05      	ldr	r3, [sp, #20]
 800f9ca:	6861      	ldr	r1, [r4, #4]
 800f9cc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800f9d0:	2300      	movs	r3, #0
 800f9d2:	9303      	str	r3, [sp, #12]
 800f9d4:	ab0a      	add	r3, sp, #40	; 0x28
 800f9d6:	e9cd b301 	strd	fp, r3, [sp, #4]
 800f9da:	ab09      	add	r3, sp, #36	; 0x24
 800f9dc:	ec49 8b10 	vmov	d0, r8, r9
 800f9e0:	9300      	str	r3, [sp, #0]
 800f9e2:	6022      	str	r2, [r4, #0]
 800f9e4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800f9e8:	4628      	mov	r0, r5
 800f9ea:	f7ff fecd 	bl	800f788 <__cvt>
 800f9ee:	9b06      	ldr	r3, [sp, #24]
 800f9f0:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f9f2:	2b47      	cmp	r3, #71	; 0x47
 800f9f4:	4680      	mov	r8, r0
 800f9f6:	d108      	bne.n	800fa0a <_printf_float+0x142>
 800f9f8:	1cc8      	adds	r0, r1, #3
 800f9fa:	db02      	blt.n	800fa02 <_printf_float+0x13a>
 800f9fc:	6863      	ldr	r3, [r4, #4]
 800f9fe:	4299      	cmp	r1, r3
 800fa00:	dd41      	ble.n	800fa86 <_printf_float+0x1be>
 800fa02:	f1ab 0b02 	sub.w	fp, fp, #2
 800fa06:	fa5f fb8b 	uxtb.w	fp, fp
 800fa0a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800fa0e:	d820      	bhi.n	800fa52 <_printf_float+0x18a>
 800fa10:	3901      	subs	r1, #1
 800fa12:	465a      	mov	r2, fp
 800fa14:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800fa18:	9109      	str	r1, [sp, #36]	; 0x24
 800fa1a:	f7ff ff17 	bl	800f84c <__exponent>
 800fa1e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800fa20:	1813      	adds	r3, r2, r0
 800fa22:	2a01      	cmp	r2, #1
 800fa24:	4681      	mov	r9, r0
 800fa26:	6123      	str	r3, [r4, #16]
 800fa28:	dc02      	bgt.n	800fa30 <_printf_float+0x168>
 800fa2a:	6822      	ldr	r2, [r4, #0]
 800fa2c:	07d2      	lsls	r2, r2, #31
 800fa2e:	d501      	bpl.n	800fa34 <_printf_float+0x16c>
 800fa30:	3301      	adds	r3, #1
 800fa32:	6123      	str	r3, [r4, #16]
 800fa34:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800fa38:	2b00      	cmp	r3, #0
 800fa3a:	d09c      	beq.n	800f976 <_printf_float+0xae>
 800fa3c:	232d      	movs	r3, #45	; 0x2d
 800fa3e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fa42:	e798      	b.n	800f976 <_printf_float+0xae>
 800fa44:	9a06      	ldr	r2, [sp, #24]
 800fa46:	2a47      	cmp	r2, #71	; 0x47
 800fa48:	d1be      	bne.n	800f9c8 <_printf_float+0x100>
 800fa4a:	2b00      	cmp	r3, #0
 800fa4c:	d1bc      	bne.n	800f9c8 <_printf_float+0x100>
 800fa4e:	2301      	movs	r3, #1
 800fa50:	e7b9      	b.n	800f9c6 <_printf_float+0xfe>
 800fa52:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800fa56:	d118      	bne.n	800fa8a <_printf_float+0x1c2>
 800fa58:	2900      	cmp	r1, #0
 800fa5a:	6863      	ldr	r3, [r4, #4]
 800fa5c:	dd0b      	ble.n	800fa76 <_printf_float+0x1ae>
 800fa5e:	6121      	str	r1, [r4, #16]
 800fa60:	b913      	cbnz	r3, 800fa68 <_printf_float+0x1a0>
 800fa62:	6822      	ldr	r2, [r4, #0]
 800fa64:	07d0      	lsls	r0, r2, #31
 800fa66:	d502      	bpl.n	800fa6e <_printf_float+0x1a6>
 800fa68:	3301      	adds	r3, #1
 800fa6a:	440b      	add	r3, r1
 800fa6c:	6123      	str	r3, [r4, #16]
 800fa6e:	65a1      	str	r1, [r4, #88]	; 0x58
 800fa70:	f04f 0900 	mov.w	r9, #0
 800fa74:	e7de      	b.n	800fa34 <_printf_float+0x16c>
 800fa76:	b913      	cbnz	r3, 800fa7e <_printf_float+0x1b6>
 800fa78:	6822      	ldr	r2, [r4, #0]
 800fa7a:	07d2      	lsls	r2, r2, #31
 800fa7c:	d501      	bpl.n	800fa82 <_printf_float+0x1ba>
 800fa7e:	3302      	adds	r3, #2
 800fa80:	e7f4      	b.n	800fa6c <_printf_float+0x1a4>
 800fa82:	2301      	movs	r3, #1
 800fa84:	e7f2      	b.n	800fa6c <_printf_float+0x1a4>
 800fa86:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800fa8a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fa8c:	4299      	cmp	r1, r3
 800fa8e:	db05      	blt.n	800fa9c <_printf_float+0x1d4>
 800fa90:	6823      	ldr	r3, [r4, #0]
 800fa92:	6121      	str	r1, [r4, #16]
 800fa94:	07d8      	lsls	r0, r3, #31
 800fa96:	d5ea      	bpl.n	800fa6e <_printf_float+0x1a6>
 800fa98:	1c4b      	adds	r3, r1, #1
 800fa9a:	e7e7      	b.n	800fa6c <_printf_float+0x1a4>
 800fa9c:	2900      	cmp	r1, #0
 800fa9e:	bfd4      	ite	le
 800faa0:	f1c1 0202 	rsble	r2, r1, #2
 800faa4:	2201      	movgt	r2, #1
 800faa6:	4413      	add	r3, r2
 800faa8:	e7e0      	b.n	800fa6c <_printf_float+0x1a4>
 800faaa:	6823      	ldr	r3, [r4, #0]
 800faac:	055a      	lsls	r2, r3, #21
 800faae:	d407      	bmi.n	800fac0 <_printf_float+0x1f8>
 800fab0:	6923      	ldr	r3, [r4, #16]
 800fab2:	4642      	mov	r2, r8
 800fab4:	4631      	mov	r1, r6
 800fab6:	4628      	mov	r0, r5
 800fab8:	47b8      	blx	r7
 800faba:	3001      	adds	r0, #1
 800fabc:	d12c      	bne.n	800fb18 <_printf_float+0x250>
 800fabe:	e764      	b.n	800f98a <_printf_float+0xc2>
 800fac0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800fac4:	f240 80e0 	bls.w	800fc88 <_printf_float+0x3c0>
 800fac8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800facc:	2200      	movs	r2, #0
 800face:	2300      	movs	r3, #0
 800fad0:	f7f1 f802 	bl	8000ad8 <__aeabi_dcmpeq>
 800fad4:	2800      	cmp	r0, #0
 800fad6:	d034      	beq.n	800fb42 <_printf_float+0x27a>
 800fad8:	4a37      	ldr	r2, [pc, #220]	; (800fbb8 <_printf_float+0x2f0>)
 800fada:	2301      	movs	r3, #1
 800fadc:	4631      	mov	r1, r6
 800fade:	4628      	mov	r0, r5
 800fae0:	47b8      	blx	r7
 800fae2:	3001      	adds	r0, #1
 800fae4:	f43f af51 	beq.w	800f98a <_printf_float+0xc2>
 800fae8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800faec:	429a      	cmp	r2, r3
 800faee:	db02      	blt.n	800faf6 <_printf_float+0x22e>
 800faf0:	6823      	ldr	r3, [r4, #0]
 800faf2:	07d8      	lsls	r0, r3, #31
 800faf4:	d510      	bpl.n	800fb18 <_printf_float+0x250>
 800faf6:	ee18 3a10 	vmov	r3, s16
 800fafa:	4652      	mov	r2, sl
 800fafc:	4631      	mov	r1, r6
 800fafe:	4628      	mov	r0, r5
 800fb00:	47b8      	blx	r7
 800fb02:	3001      	adds	r0, #1
 800fb04:	f43f af41 	beq.w	800f98a <_printf_float+0xc2>
 800fb08:	f04f 0800 	mov.w	r8, #0
 800fb0c:	f104 091a 	add.w	r9, r4, #26
 800fb10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fb12:	3b01      	subs	r3, #1
 800fb14:	4543      	cmp	r3, r8
 800fb16:	dc09      	bgt.n	800fb2c <_printf_float+0x264>
 800fb18:	6823      	ldr	r3, [r4, #0]
 800fb1a:	079b      	lsls	r3, r3, #30
 800fb1c:	f100 8105 	bmi.w	800fd2a <_printf_float+0x462>
 800fb20:	68e0      	ldr	r0, [r4, #12]
 800fb22:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fb24:	4298      	cmp	r0, r3
 800fb26:	bfb8      	it	lt
 800fb28:	4618      	movlt	r0, r3
 800fb2a:	e730      	b.n	800f98e <_printf_float+0xc6>
 800fb2c:	2301      	movs	r3, #1
 800fb2e:	464a      	mov	r2, r9
 800fb30:	4631      	mov	r1, r6
 800fb32:	4628      	mov	r0, r5
 800fb34:	47b8      	blx	r7
 800fb36:	3001      	adds	r0, #1
 800fb38:	f43f af27 	beq.w	800f98a <_printf_float+0xc2>
 800fb3c:	f108 0801 	add.w	r8, r8, #1
 800fb40:	e7e6      	b.n	800fb10 <_printf_float+0x248>
 800fb42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fb44:	2b00      	cmp	r3, #0
 800fb46:	dc39      	bgt.n	800fbbc <_printf_float+0x2f4>
 800fb48:	4a1b      	ldr	r2, [pc, #108]	; (800fbb8 <_printf_float+0x2f0>)
 800fb4a:	2301      	movs	r3, #1
 800fb4c:	4631      	mov	r1, r6
 800fb4e:	4628      	mov	r0, r5
 800fb50:	47b8      	blx	r7
 800fb52:	3001      	adds	r0, #1
 800fb54:	f43f af19 	beq.w	800f98a <_printf_float+0xc2>
 800fb58:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800fb5c:	4313      	orrs	r3, r2
 800fb5e:	d102      	bne.n	800fb66 <_printf_float+0x29e>
 800fb60:	6823      	ldr	r3, [r4, #0]
 800fb62:	07d9      	lsls	r1, r3, #31
 800fb64:	d5d8      	bpl.n	800fb18 <_printf_float+0x250>
 800fb66:	ee18 3a10 	vmov	r3, s16
 800fb6a:	4652      	mov	r2, sl
 800fb6c:	4631      	mov	r1, r6
 800fb6e:	4628      	mov	r0, r5
 800fb70:	47b8      	blx	r7
 800fb72:	3001      	adds	r0, #1
 800fb74:	f43f af09 	beq.w	800f98a <_printf_float+0xc2>
 800fb78:	f04f 0900 	mov.w	r9, #0
 800fb7c:	f104 0a1a 	add.w	sl, r4, #26
 800fb80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fb82:	425b      	negs	r3, r3
 800fb84:	454b      	cmp	r3, r9
 800fb86:	dc01      	bgt.n	800fb8c <_printf_float+0x2c4>
 800fb88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fb8a:	e792      	b.n	800fab2 <_printf_float+0x1ea>
 800fb8c:	2301      	movs	r3, #1
 800fb8e:	4652      	mov	r2, sl
 800fb90:	4631      	mov	r1, r6
 800fb92:	4628      	mov	r0, r5
 800fb94:	47b8      	blx	r7
 800fb96:	3001      	adds	r0, #1
 800fb98:	f43f aef7 	beq.w	800f98a <_printf_float+0xc2>
 800fb9c:	f109 0901 	add.w	r9, r9, #1
 800fba0:	e7ee      	b.n	800fb80 <_printf_float+0x2b8>
 800fba2:	bf00      	nop
 800fba4:	7fefffff 	.word	0x7fefffff
 800fba8:	08012ab4 	.word	0x08012ab4
 800fbac:	08012ab8 	.word	0x08012ab8
 800fbb0:	08012ac0 	.word	0x08012ac0
 800fbb4:	08012abc 	.word	0x08012abc
 800fbb8:	08012ac4 	.word	0x08012ac4
 800fbbc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800fbbe:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800fbc0:	429a      	cmp	r2, r3
 800fbc2:	bfa8      	it	ge
 800fbc4:	461a      	movge	r2, r3
 800fbc6:	2a00      	cmp	r2, #0
 800fbc8:	4691      	mov	r9, r2
 800fbca:	dc37      	bgt.n	800fc3c <_printf_float+0x374>
 800fbcc:	f04f 0b00 	mov.w	fp, #0
 800fbd0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800fbd4:	f104 021a 	add.w	r2, r4, #26
 800fbd8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800fbda:	9305      	str	r3, [sp, #20]
 800fbdc:	eba3 0309 	sub.w	r3, r3, r9
 800fbe0:	455b      	cmp	r3, fp
 800fbe2:	dc33      	bgt.n	800fc4c <_printf_float+0x384>
 800fbe4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800fbe8:	429a      	cmp	r2, r3
 800fbea:	db3b      	blt.n	800fc64 <_printf_float+0x39c>
 800fbec:	6823      	ldr	r3, [r4, #0]
 800fbee:	07da      	lsls	r2, r3, #31
 800fbf0:	d438      	bmi.n	800fc64 <_printf_float+0x39c>
 800fbf2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fbf4:	9a05      	ldr	r2, [sp, #20]
 800fbf6:	9909      	ldr	r1, [sp, #36]	; 0x24
 800fbf8:	1a9a      	subs	r2, r3, r2
 800fbfa:	eba3 0901 	sub.w	r9, r3, r1
 800fbfe:	4591      	cmp	r9, r2
 800fc00:	bfa8      	it	ge
 800fc02:	4691      	movge	r9, r2
 800fc04:	f1b9 0f00 	cmp.w	r9, #0
 800fc08:	dc35      	bgt.n	800fc76 <_printf_float+0x3ae>
 800fc0a:	f04f 0800 	mov.w	r8, #0
 800fc0e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800fc12:	f104 0a1a 	add.w	sl, r4, #26
 800fc16:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800fc1a:	1a9b      	subs	r3, r3, r2
 800fc1c:	eba3 0309 	sub.w	r3, r3, r9
 800fc20:	4543      	cmp	r3, r8
 800fc22:	f77f af79 	ble.w	800fb18 <_printf_float+0x250>
 800fc26:	2301      	movs	r3, #1
 800fc28:	4652      	mov	r2, sl
 800fc2a:	4631      	mov	r1, r6
 800fc2c:	4628      	mov	r0, r5
 800fc2e:	47b8      	blx	r7
 800fc30:	3001      	adds	r0, #1
 800fc32:	f43f aeaa 	beq.w	800f98a <_printf_float+0xc2>
 800fc36:	f108 0801 	add.w	r8, r8, #1
 800fc3a:	e7ec      	b.n	800fc16 <_printf_float+0x34e>
 800fc3c:	4613      	mov	r3, r2
 800fc3e:	4631      	mov	r1, r6
 800fc40:	4642      	mov	r2, r8
 800fc42:	4628      	mov	r0, r5
 800fc44:	47b8      	blx	r7
 800fc46:	3001      	adds	r0, #1
 800fc48:	d1c0      	bne.n	800fbcc <_printf_float+0x304>
 800fc4a:	e69e      	b.n	800f98a <_printf_float+0xc2>
 800fc4c:	2301      	movs	r3, #1
 800fc4e:	4631      	mov	r1, r6
 800fc50:	4628      	mov	r0, r5
 800fc52:	9205      	str	r2, [sp, #20]
 800fc54:	47b8      	blx	r7
 800fc56:	3001      	adds	r0, #1
 800fc58:	f43f ae97 	beq.w	800f98a <_printf_float+0xc2>
 800fc5c:	9a05      	ldr	r2, [sp, #20]
 800fc5e:	f10b 0b01 	add.w	fp, fp, #1
 800fc62:	e7b9      	b.n	800fbd8 <_printf_float+0x310>
 800fc64:	ee18 3a10 	vmov	r3, s16
 800fc68:	4652      	mov	r2, sl
 800fc6a:	4631      	mov	r1, r6
 800fc6c:	4628      	mov	r0, r5
 800fc6e:	47b8      	blx	r7
 800fc70:	3001      	adds	r0, #1
 800fc72:	d1be      	bne.n	800fbf2 <_printf_float+0x32a>
 800fc74:	e689      	b.n	800f98a <_printf_float+0xc2>
 800fc76:	9a05      	ldr	r2, [sp, #20]
 800fc78:	464b      	mov	r3, r9
 800fc7a:	4442      	add	r2, r8
 800fc7c:	4631      	mov	r1, r6
 800fc7e:	4628      	mov	r0, r5
 800fc80:	47b8      	blx	r7
 800fc82:	3001      	adds	r0, #1
 800fc84:	d1c1      	bne.n	800fc0a <_printf_float+0x342>
 800fc86:	e680      	b.n	800f98a <_printf_float+0xc2>
 800fc88:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800fc8a:	2a01      	cmp	r2, #1
 800fc8c:	dc01      	bgt.n	800fc92 <_printf_float+0x3ca>
 800fc8e:	07db      	lsls	r3, r3, #31
 800fc90:	d538      	bpl.n	800fd04 <_printf_float+0x43c>
 800fc92:	2301      	movs	r3, #1
 800fc94:	4642      	mov	r2, r8
 800fc96:	4631      	mov	r1, r6
 800fc98:	4628      	mov	r0, r5
 800fc9a:	47b8      	blx	r7
 800fc9c:	3001      	adds	r0, #1
 800fc9e:	f43f ae74 	beq.w	800f98a <_printf_float+0xc2>
 800fca2:	ee18 3a10 	vmov	r3, s16
 800fca6:	4652      	mov	r2, sl
 800fca8:	4631      	mov	r1, r6
 800fcaa:	4628      	mov	r0, r5
 800fcac:	47b8      	blx	r7
 800fcae:	3001      	adds	r0, #1
 800fcb0:	f43f ae6b 	beq.w	800f98a <_printf_float+0xc2>
 800fcb4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800fcb8:	2200      	movs	r2, #0
 800fcba:	2300      	movs	r3, #0
 800fcbc:	f7f0 ff0c 	bl	8000ad8 <__aeabi_dcmpeq>
 800fcc0:	b9d8      	cbnz	r0, 800fcfa <_printf_float+0x432>
 800fcc2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fcc4:	f108 0201 	add.w	r2, r8, #1
 800fcc8:	3b01      	subs	r3, #1
 800fcca:	4631      	mov	r1, r6
 800fccc:	4628      	mov	r0, r5
 800fcce:	47b8      	blx	r7
 800fcd0:	3001      	adds	r0, #1
 800fcd2:	d10e      	bne.n	800fcf2 <_printf_float+0x42a>
 800fcd4:	e659      	b.n	800f98a <_printf_float+0xc2>
 800fcd6:	2301      	movs	r3, #1
 800fcd8:	4652      	mov	r2, sl
 800fcda:	4631      	mov	r1, r6
 800fcdc:	4628      	mov	r0, r5
 800fcde:	47b8      	blx	r7
 800fce0:	3001      	adds	r0, #1
 800fce2:	f43f ae52 	beq.w	800f98a <_printf_float+0xc2>
 800fce6:	f108 0801 	add.w	r8, r8, #1
 800fcea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fcec:	3b01      	subs	r3, #1
 800fcee:	4543      	cmp	r3, r8
 800fcf0:	dcf1      	bgt.n	800fcd6 <_printf_float+0x40e>
 800fcf2:	464b      	mov	r3, r9
 800fcf4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800fcf8:	e6dc      	b.n	800fab4 <_printf_float+0x1ec>
 800fcfa:	f04f 0800 	mov.w	r8, #0
 800fcfe:	f104 0a1a 	add.w	sl, r4, #26
 800fd02:	e7f2      	b.n	800fcea <_printf_float+0x422>
 800fd04:	2301      	movs	r3, #1
 800fd06:	4642      	mov	r2, r8
 800fd08:	e7df      	b.n	800fcca <_printf_float+0x402>
 800fd0a:	2301      	movs	r3, #1
 800fd0c:	464a      	mov	r2, r9
 800fd0e:	4631      	mov	r1, r6
 800fd10:	4628      	mov	r0, r5
 800fd12:	47b8      	blx	r7
 800fd14:	3001      	adds	r0, #1
 800fd16:	f43f ae38 	beq.w	800f98a <_printf_float+0xc2>
 800fd1a:	f108 0801 	add.w	r8, r8, #1
 800fd1e:	68e3      	ldr	r3, [r4, #12]
 800fd20:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800fd22:	1a5b      	subs	r3, r3, r1
 800fd24:	4543      	cmp	r3, r8
 800fd26:	dcf0      	bgt.n	800fd0a <_printf_float+0x442>
 800fd28:	e6fa      	b.n	800fb20 <_printf_float+0x258>
 800fd2a:	f04f 0800 	mov.w	r8, #0
 800fd2e:	f104 0919 	add.w	r9, r4, #25
 800fd32:	e7f4      	b.n	800fd1e <_printf_float+0x456>

0800fd34 <_printf_common>:
 800fd34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fd38:	4616      	mov	r6, r2
 800fd3a:	4699      	mov	r9, r3
 800fd3c:	688a      	ldr	r2, [r1, #8]
 800fd3e:	690b      	ldr	r3, [r1, #16]
 800fd40:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800fd44:	4293      	cmp	r3, r2
 800fd46:	bfb8      	it	lt
 800fd48:	4613      	movlt	r3, r2
 800fd4a:	6033      	str	r3, [r6, #0]
 800fd4c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800fd50:	4607      	mov	r7, r0
 800fd52:	460c      	mov	r4, r1
 800fd54:	b10a      	cbz	r2, 800fd5a <_printf_common+0x26>
 800fd56:	3301      	adds	r3, #1
 800fd58:	6033      	str	r3, [r6, #0]
 800fd5a:	6823      	ldr	r3, [r4, #0]
 800fd5c:	0699      	lsls	r1, r3, #26
 800fd5e:	bf42      	ittt	mi
 800fd60:	6833      	ldrmi	r3, [r6, #0]
 800fd62:	3302      	addmi	r3, #2
 800fd64:	6033      	strmi	r3, [r6, #0]
 800fd66:	6825      	ldr	r5, [r4, #0]
 800fd68:	f015 0506 	ands.w	r5, r5, #6
 800fd6c:	d106      	bne.n	800fd7c <_printf_common+0x48>
 800fd6e:	f104 0a19 	add.w	sl, r4, #25
 800fd72:	68e3      	ldr	r3, [r4, #12]
 800fd74:	6832      	ldr	r2, [r6, #0]
 800fd76:	1a9b      	subs	r3, r3, r2
 800fd78:	42ab      	cmp	r3, r5
 800fd7a:	dc26      	bgt.n	800fdca <_printf_common+0x96>
 800fd7c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800fd80:	1e13      	subs	r3, r2, #0
 800fd82:	6822      	ldr	r2, [r4, #0]
 800fd84:	bf18      	it	ne
 800fd86:	2301      	movne	r3, #1
 800fd88:	0692      	lsls	r2, r2, #26
 800fd8a:	d42b      	bmi.n	800fde4 <_printf_common+0xb0>
 800fd8c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800fd90:	4649      	mov	r1, r9
 800fd92:	4638      	mov	r0, r7
 800fd94:	47c0      	blx	r8
 800fd96:	3001      	adds	r0, #1
 800fd98:	d01e      	beq.n	800fdd8 <_printf_common+0xa4>
 800fd9a:	6823      	ldr	r3, [r4, #0]
 800fd9c:	68e5      	ldr	r5, [r4, #12]
 800fd9e:	6832      	ldr	r2, [r6, #0]
 800fda0:	f003 0306 	and.w	r3, r3, #6
 800fda4:	2b04      	cmp	r3, #4
 800fda6:	bf08      	it	eq
 800fda8:	1aad      	subeq	r5, r5, r2
 800fdaa:	68a3      	ldr	r3, [r4, #8]
 800fdac:	6922      	ldr	r2, [r4, #16]
 800fdae:	bf0c      	ite	eq
 800fdb0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800fdb4:	2500      	movne	r5, #0
 800fdb6:	4293      	cmp	r3, r2
 800fdb8:	bfc4      	itt	gt
 800fdba:	1a9b      	subgt	r3, r3, r2
 800fdbc:	18ed      	addgt	r5, r5, r3
 800fdbe:	2600      	movs	r6, #0
 800fdc0:	341a      	adds	r4, #26
 800fdc2:	42b5      	cmp	r5, r6
 800fdc4:	d11a      	bne.n	800fdfc <_printf_common+0xc8>
 800fdc6:	2000      	movs	r0, #0
 800fdc8:	e008      	b.n	800fddc <_printf_common+0xa8>
 800fdca:	2301      	movs	r3, #1
 800fdcc:	4652      	mov	r2, sl
 800fdce:	4649      	mov	r1, r9
 800fdd0:	4638      	mov	r0, r7
 800fdd2:	47c0      	blx	r8
 800fdd4:	3001      	adds	r0, #1
 800fdd6:	d103      	bne.n	800fde0 <_printf_common+0xac>
 800fdd8:	f04f 30ff 	mov.w	r0, #4294967295
 800fddc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fde0:	3501      	adds	r5, #1
 800fde2:	e7c6      	b.n	800fd72 <_printf_common+0x3e>
 800fde4:	18e1      	adds	r1, r4, r3
 800fde6:	1c5a      	adds	r2, r3, #1
 800fde8:	2030      	movs	r0, #48	; 0x30
 800fdea:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800fdee:	4422      	add	r2, r4
 800fdf0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800fdf4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800fdf8:	3302      	adds	r3, #2
 800fdfa:	e7c7      	b.n	800fd8c <_printf_common+0x58>
 800fdfc:	2301      	movs	r3, #1
 800fdfe:	4622      	mov	r2, r4
 800fe00:	4649      	mov	r1, r9
 800fe02:	4638      	mov	r0, r7
 800fe04:	47c0      	blx	r8
 800fe06:	3001      	adds	r0, #1
 800fe08:	d0e6      	beq.n	800fdd8 <_printf_common+0xa4>
 800fe0a:	3601      	adds	r6, #1
 800fe0c:	e7d9      	b.n	800fdc2 <_printf_common+0x8e>
	...

0800fe10 <_printf_i>:
 800fe10:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800fe14:	7e0f      	ldrb	r7, [r1, #24]
 800fe16:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800fe18:	2f78      	cmp	r7, #120	; 0x78
 800fe1a:	4691      	mov	r9, r2
 800fe1c:	4680      	mov	r8, r0
 800fe1e:	460c      	mov	r4, r1
 800fe20:	469a      	mov	sl, r3
 800fe22:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800fe26:	d807      	bhi.n	800fe38 <_printf_i+0x28>
 800fe28:	2f62      	cmp	r7, #98	; 0x62
 800fe2a:	d80a      	bhi.n	800fe42 <_printf_i+0x32>
 800fe2c:	2f00      	cmp	r7, #0
 800fe2e:	f000 80d8 	beq.w	800ffe2 <_printf_i+0x1d2>
 800fe32:	2f58      	cmp	r7, #88	; 0x58
 800fe34:	f000 80a3 	beq.w	800ff7e <_printf_i+0x16e>
 800fe38:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800fe3c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800fe40:	e03a      	b.n	800feb8 <_printf_i+0xa8>
 800fe42:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800fe46:	2b15      	cmp	r3, #21
 800fe48:	d8f6      	bhi.n	800fe38 <_printf_i+0x28>
 800fe4a:	a101      	add	r1, pc, #4	; (adr r1, 800fe50 <_printf_i+0x40>)
 800fe4c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800fe50:	0800fea9 	.word	0x0800fea9
 800fe54:	0800febd 	.word	0x0800febd
 800fe58:	0800fe39 	.word	0x0800fe39
 800fe5c:	0800fe39 	.word	0x0800fe39
 800fe60:	0800fe39 	.word	0x0800fe39
 800fe64:	0800fe39 	.word	0x0800fe39
 800fe68:	0800febd 	.word	0x0800febd
 800fe6c:	0800fe39 	.word	0x0800fe39
 800fe70:	0800fe39 	.word	0x0800fe39
 800fe74:	0800fe39 	.word	0x0800fe39
 800fe78:	0800fe39 	.word	0x0800fe39
 800fe7c:	0800ffc9 	.word	0x0800ffc9
 800fe80:	0800feed 	.word	0x0800feed
 800fe84:	0800ffab 	.word	0x0800ffab
 800fe88:	0800fe39 	.word	0x0800fe39
 800fe8c:	0800fe39 	.word	0x0800fe39
 800fe90:	0800ffeb 	.word	0x0800ffeb
 800fe94:	0800fe39 	.word	0x0800fe39
 800fe98:	0800feed 	.word	0x0800feed
 800fe9c:	0800fe39 	.word	0x0800fe39
 800fea0:	0800fe39 	.word	0x0800fe39
 800fea4:	0800ffb3 	.word	0x0800ffb3
 800fea8:	682b      	ldr	r3, [r5, #0]
 800feaa:	1d1a      	adds	r2, r3, #4
 800feac:	681b      	ldr	r3, [r3, #0]
 800feae:	602a      	str	r2, [r5, #0]
 800feb0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800feb4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800feb8:	2301      	movs	r3, #1
 800feba:	e0a3      	b.n	8010004 <_printf_i+0x1f4>
 800febc:	6820      	ldr	r0, [r4, #0]
 800febe:	6829      	ldr	r1, [r5, #0]
 800fec0:	0606      	lsls	r6, r0, #24
 800fec2:	f101 0304 	add.w	r3, r1, #4
 800fec6:	d50a      	bpl.n	800fede <_printf_i+0xce>
 800fec8:	680e      	ldr	r6, [r1, #0]
 800feca:	602b      	str	r3, [r5, #0]
 800fecc:	2e00      	cmp	r6, #0
 800fece:	da03      	bge.n	800fed8 <_printf_i+0xc8>
 800fed0:	232d      	movs	r3, #45	; 0x2d
 800fed2:	4276      	negs	r6, r6
 800fed4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fed8:	485e      	ldr	r0, [pc, #376]	; (8010054 <_printf_i+0x244>)
 800feda:	230a      	movs	r3, #10
 800fedc:	e019      	b.n	800ff12 <_printf_i+0x102>
 800fede:	680e      	ldr	r6, [r1, #0]
 800fee0:	602b      	str	r3, [r5, #0]
 800fee2:	f010 0f40 	tst.w	r0, #64	; 0x40
 800fee6:	bf18      	it	ne
 800fee8:	b236      	sxthne	r6, r6
 800feea:	e7ef      	b.n	800fecc <_printf_i+0xbc>
 800feec:	682b      	ldr	r3, [r5, #0]
 800feee:	6820      	ldr	r0, [r4, #0]
 800fef0:	1d19      	adds	r1, r3, #4
 800fef2:	6029      	str	r1, [r5, #0]
 800fef4:	0601      	lsls	r1, r0, #24
 800fef6:	d501      	bpl.n	800fefc <_printf_i+0xec>
 800fef8:	681e      	ldr	r6, [r3, #0]
 800fefa:	e002      	b.n	800ff02 <_printf_i+0xf2>
 800fefc:	0646      	lsls	r6, r0, #25
 800fefe:	d5fb      	bpl.n	800fef8 <_printf_i+0xe8>
 800ff00:	881e      	ldrh	r6, [r3, #0]
 800ff02:	4854      	ldr	r0, [pc, #336]	; (8010054 <_printf_i+0x244>)
 800ff04:	2f6f      	cmp	r7, #111	; 0x6f
 800ff06:	bf0c      	ite	eq
 800ff08:	2308      	moveq	r3, #8
 800ff0a:	230a      	movne	r3, #10
 800ff0c:	2100      	movs	r1, #0
 800ff0e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ff12:	6865      	ldr	r5, [r4, #4]
 800ff14:	60a5      	str	r5, [r4, #8]
 800ff16:	2d00      	cmp	r5, #0
 800ff18:	bfa2      	ittt	ge
 800ff1a:	6821      	ldrge	r1, [r4, #0]
 800ff1c:	f021 0104 	bicge.w	r1, r1, #4
 800ff20:	6021      	strge	r1, [r4, #0]
 800ff22:	b90e      	cbnz	r6, 800ff28 <_printf_i+0x118>
 800ff24:	2d00      	cmp	r5, #0
 800ff26:	d04d      	beq.n	800ffc4 <_printf_i+0x1b4>
 800ff28:	4615      	mov	r5, r2
 800ff2a:	fbb6 f1f3 	udiv	r1, r6, r3
 800ff2e:	fb03 6711 	mls	r7, r3, r1, r6
 800ff32:	5dc7      	ldrb	r7, [r0, r7]
 800ff34:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800ff38:	4637      	mov	r7, r6
 800ff3a:	42bb      	cmp	r3, r7
 800ff3c:	460e      	mov	r6, r1
 800ff3e:	d9f4      	bls.n	800ff2a <_printf_i+0x11a>
 800ff40:	2b08      	cmp	r3, #8
 800ff42:	d10b      	bne.n	800ff5c <_printf_i+0x14c>
 800ff44:	6823      	ldr	r3, [r4, #0]
 800ff46:	07de      	lsls	r6, r3, #31
 800ff48:	d508      	bpl.n	800ff5c <_printf_i+0x14c>
 800ff4a:	6923      	ldr	r3, [r4, #16]
 800ff4c:	6861      	ldr	r1, [r4, #4]
 800ff4e:	4299      	cmp	r1, r3
 800ff50:	bfde      	ittt	le
 800ff52:	2330      	movle	r3, #48	; 0x30
 800ff54:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ff58:	f105 35ff 	addle.w	r5, r5, #4294967295
 800ff5c:	1b52      	subs	r2, r2, r5
 800ff5e:	6122      	str	r2, [r4, #16]
 800ff60:	f8cd a000 	str.w	sl, [sp]
 800ff64:	464b      	mov	r3, r9
 800ff66:	aa03      	add	r2, sp, #12
 800ff68:	4621      	mov	r1, r4
 800ff6a:	4640      	mov	r0, r8
 800ff6c:	f7ff fee2 	bl	800fd34 <_printf_common>
 800ff70:	3001      	adds	r0, #1
 800ff72:	d14c      	bne.n	801000e <_printf_i+0x1fe>
 800ff74:	f04f 30ff 	mov.w	r0, #4294967295
 800ff78:	b004      	add	sp, #16
 800ff7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ff7e:	4835      	ldr	r0, [pc, #212]	; (8010054 <_printf_i+0x244>)
 800ff80:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800ff84:	6829      	ldr	r1, [r5, #0]
 800ff86:	6823      	ldr	r3, [r4, #0]
 800ff88:	f851 6b04 	ldr.w	r6, [r1], #4
 800ff8c:	6029      	str	r1, [r5, #0]
 800ff8e:	061d      	lsls	r5, r3, #24
 800ff90:	d514      	bpl.n	800ffbc <_printf_i+0x1ac>
 800ff92:	07df      	lsls	r7, r3, #31
 800ff94:	bf44      	itt	mi
 800ff96:	f043 0320 	orrmi.w	r3, r3, #32
 800ff9a:	6023      	strmi	r3, [r4, #0]
 800ff9c:	b91e      	cbnz	r6, 800ffa6 <_printf_i+0x196>
 800ff9e:	6823      	ldr	r3, [r4, #0]
 800ffa0:	f023 0320 	bic.w	r3, r3, #32
 800ffa4:	6023      	str	r3, [r4, #0]
 800ffa6:	2310      	movs	r3, #16
 800ffa8:	e7b0      	b.n	800ff0c <_printf_i+0xfc>
 800ffaa:	6823      	ldr	r3, [r4, #0]
 800ffac:	f043 0320 	orr.w	r3, r3, #32
 800ffb0:	6023      	str	r3, [r4, #0]
 800ffb2:	2378      	movs	r3, #120	; 0x78
 800ffb4:	4828      	ldr	r0, [pc, #160]	; (8010058 <_printf_i+0x248>)
 800ffb6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ffba:	e7e3      	b.n	800ff84 <_printf_i+0x174>
 800ffbc:	0659      	lsls	r1, r3, #25
 800ffbe:	bf48      	it	mi
 800ffc0:	b2b6      	uxthmi	r6, r6
 800ffc2:	e7e6      	b.n	800ff92 <_printf_i+0x182>
 800ffc4:	4615      	mov	r5, r2
 800ffc6:	e7bb      	b.n	800ff40 <_printf_i+0x130>
 800ffc8:	682b      	ldr	r3, [r5, #0]
 800ffca:	6826      	ldr	r6, [r4, #0]
 800ffcc:	6961      	ldr	r1, [r4, #20]
 800ffce:	1d18      	adds	r0, r3, #4
 800ffd0:	6028      	str	r0, [r5, #0]
 800ffd2:	0635      	lsls	r5, r6, #24
 800ffd4:	681b      	ldr	r3, [r3, #0]
 800ffd6:	d501      	bpl.n	800ffdc <_printf_i+0x1cc>
 800ffd8:	6019      	str	r1, [r3, #0]
 800ffda:	e002      	b.n	800ffe2 <_printf_i+0x1d2>
 800ffdc:	0670      	lsls	r0, r6, #25
 800ffde:	d5fb      	bpl.n	800ffd8 <_printf_i+0x1c8>
 800ffe0:	8019      	strh	r1, [r3, #0]
 800ffe2:	2300      	movs	r3, #0
 800ffe4:	6123      	str	r3, [r4, #16]
 800ffe6:	4615      	mov	r5, r2
 800ffe8:	e7ba      	b.n	800ff60 <_printf_i+0x150>
 800ffea:	682b      	ldr	r3, [r5, #0]
 800ffec:	1d1a      	adds	r2, r3, #4
 800ffee:	602a      	str	r2, [r5, #0]
 800fff0:	681d      	ldr	r5, [r3, #0]
 800fff2:	6862      	ldr	r2, [r4, #4]
 800fff4:	2100      	movs	r1, #0
 800fff6:	4628      	mov	r0, r5
 800fff8:	f7f0 f8fa 	bl	80001f0 <memchr>
 800fffc:	b108      	cbz	r0, 8010002 <_printf_i+0x1f2>
 800fffe:	1b40      	subs	r0, r0, r5
 8010000:	6060      	str	r0, [r4, #4]
 8010002:	6863      	ldr	r3, [r4, #4]
 8010004:	6123      	str	r3, [r4, #16]
 8010006:	2300      	movs	r3, #0
 8010008:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801000c:	e7a8      	b.n	800ff60 <_printf_i+0x150>
 801000e:	6923      	ldr	r3, [r4, #16]
 8010010:	462a      	mov	r2, r5
 8010012:	4649      	mov	r1, r9
 8010014:	4640      	mov	r0, r8
 8010016:	47d0      	blx	sl
 8010018:	3001      	adds	r0, #1
 801001a:	d0ab      	beq.n	800ff74 <_printf_i+0x164>
 801001c:	6823      	ldr	r3, [r4, #0]
 801001e:	079b      	lsls	r3, r3, #30
 8010020:	d413      	bmi.n	801004a <_printf_i+0x23a>
 8010022:	68e0      	ldr	r0, [r4, #12]
 8010024:	9b03      	ldr	r3, [sp, #12]
 8010026:	4298      	cmp	r0, r3
 8010028:	bfb8      	it	lt
 801002a:	4618      	movlt	r0, r3
 801002c:	e7a4      	b.n	800ff78 <_printf_i+0x168>
 801002e:	2301      	movs	r3, #1
 8010030:	4632      	mov	r2, r6
 8010032:	4649      	mov	r1, r9
 8010034:	4640      	mov	r0, r8
 8010036:	47d0      	blx	sl
 8010038:	3001      	adds	r0, #1
 801003a:	d09b      	beq.n	800ff74 <_printf_i+0x164>
 801003c:	3501      	adds	r5, #1
 801003e:	68e3      	ldr	r3, [r4, #12]
 8010040:	9903      	ldr	r1, [sp, #12]
 8010042:	1a5b      	subs	r3, r3, r1
 8010044:	42ab      	cmp	r3, r5
 8010046:	dcf2      	bgt.n	801002e <_printf_i+0x21e>
 8010048:	e7eb      	b.n	8010022 <_printf_i+0x212>
 801004a:	2500      	movs	r5, #0
 801004c:	f104 0619 	add.w	r6, r4, #25
 8010050:	e7f5      	b.n	801003e <_printf_i+0x22e>
 8010052:	bf00      	nop
 8010054:	08012ac6 	.word	0x08012ac6
 8010058:	08012ad7 	.word	0x08012ad7

0801005c <iprintf>:
 801005c:	b40f      	push	{r0, r1, r2, r3}
 801005e:	4b0a      	ldr	r3, [pc, #40]	; (8010088 <iprintf+0x2c>)
 8010060:	b513      	push	{r0, r1, r4, lr}
 8010062:	681c      	ldr	r4, [r3, #0]
 8010064:	b124      	cbz	r4, 8010070 <iprintf+0x14>
 8010066:	69a3      	ldr	r3, [r4, #24]
 8010068:	b913      	cbnz	r3, 8010070 <iprintf+0x14>
 801006a:	4620      	mov	r0, r4
 801006c:	f001 f8e8 	bl	8011240 <__sinit>
 8010070:	ab05      	add	r3, sp, #20
 8010072:	9a04      	ldr	r2, [sp, #16]
 8010074:	68a1      	ldr	r1, [r4, #8]
 8010076:	9301      	str	r3, [sp, #4]
 8010078:	4620      	mov	r0, r4
 801007a:	f001 fdbb 	bl	8011bf4 <_vfiprintf_r>
 801007e:	b002      	add	sp, #8
 8010080:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010084:	b004      	add	sp, #16
 8010086:	4770      	bx	lr
 8010088:	20000038 	.word	0x20000038

0801008c <_puts_r>:
 801008c:	b570      	push	{r4, r5, r6, lr}
 801008e:	460e      	mov	r6, r1
 8010090:	4605      	mov	r5, r0
 8010092:	b118      	cbz	r0, 801009c <_puts_r+0x10>
 8010094:	6983      	ldr	r3, [r0, #24]
 8010096:	b90b      	cbnz	r3, 801009c <_puts_r+0x10>
 8010098:	f001 f8d2 	bl	8011240 <__sinit>
 801009c:	69ab      	ldr	r3, [r5, #24]
 801009e:	68ac      	ldr	r4, [r5, #8]
 80100a0:	b913      	cbnz	r3, 80100a8 <_puts_r+0x1c>
 80100a2:	4628      	mov	r0, r5
 80100a4:	f001 f8cc 	bl	8011240 <__sinit>
 80100a8:	4b2c      	ldr	r3, [pc, #176]	; (801015c <_puts_r+0xd0>)
 80100aa:	429c      	cmp	r4, r3
 80100ac:	d120      	bne.n	80100f0 <_puts_r+0x64>
 80100ae:	686c      	ldr	r4, [r5, #4]
 80100b0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80100b2:	07db      	lsls	r3, r3, #31
 80100b4:	d405      	bmi.n	80100c2 <_puts_r+0x36>
 80100b6:	89a3      	ldrh	r3, [r4, #12]
 80100b8:	0598      	lsls	r0, r3, #22
 80100ba:	d402      	bmi.n	80100c2 <_puts_r+0x36>
 80100bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80100be:	f001 f962 	bl	8011386 <__retarget_lock_acquire_recursive>
 80100c2:	89a3      	ldrh	r3, [r4, #12]
 80100c4:	0719      	lsls	r1, r3, #28
 80100c6:	d51d      	bpl.n	8010104 <_puts_r+0x78>
 80100c8:	6923      	ldr	r3, [r4, #16]
 80100ca:	b1db      	cbz	r3, 8010104 <_puts_r+0x78>
 80100cc:	3e01      	subs	r6, #1
 80100ce:	68a3      	ldr	r3, [r4, #8]
 80100d0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80100d4:	3b01      	subs	r3, #1
 80100d6:	60a3      	str	r3, [r4, #8]
 80100d8:	bb39      	cbnz	r1, 801012a <_puts_r+0x9e>
 80100da:	2b00      	cmp	r3, #0
 80100dc:	da38      	bge.n	8010150 <_puts_r+0xc4>
 80100de:	4622      	mov	r2, r4
 80100e0:	210a      	movs	r1, #10
 80100e2:	4628      	mov	r0, r5
 80100e4:	f000 f858 	bl	8010198 <__swbuf_r>
 80100e8:	3001      	adds	r0, #1
 80100ea:	d011      	beq.n	8010110 <_puts_r+0x84>
 80100ec:	250a      	movs	r5, #10
 80100ee:	e011      	b.n	8010114 <_puts_r+0x88>
 80100f0:	4b1b      	ldr	r3, [pc, #108]	; (8010160 <_puts_r+0xd4>)
 80100f2:	429c      	cmp	r4, r3
 80100f4:	d101      	bne.n	80100fa <_puts_r+0x6e>
 80100f6:	68ac      	ldr	r4, [r5, #8]
 80100f8:	e7da      	b.n	80100b0 <_puts_r+0x24>
 80100fa:	4b1a      	ldr	r3, [pc, #104]	; (8010164 <_puts_r+0xd8>)
 80100fc:	429c      	cmp	r4, r3
 80100fe:	bf08      	it	eq
 8010100:	68ec      	ldreq	r4, [r5, #12]
 8010102:	e7d5      	b.n	80100b0 <_puts_r+0x24>
 8010104:	4621      	mov	r1, r4
 8010106:	4628      	mov	r0, r5
 8010108:	f000 f898 	bl	801023c <__swsetup_r>
 801010c:	2800      	cmp	r0, #0
 801010e:	d0dd      	beq.n	80100cc <_puts_r+0x40>
 8010110:	f04f 35ff 	mov.w	r5, #4294967295
 8010114:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010116:	07da      	lsls	r2, r3, #31
 8010118:	d405      	bmi.n	8010126 <_puts_r+0x9a>
 801011a:	89a3      	ldrh	r3, [r4, #12]
 801011c:	059b      	lsls	r3, r3, #22
 801011e:	d402      	bmi.n	8010126 <_puts_r+0x9a>
 8010120:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010122:	f001 f931 	bl	8011388 <__retarget_lock_release_recursive>
 8010126:	4628      	mov	r0, r5
 8010128:	bd70      	pop	{r4, r5, r6, pc}
 801012a:	2b00      	cmp	r3, #0
 801012c:	da04      	bge.n	8010138 <_puts_r+0xac>
 801012e:	69a2      	ldr	r2, [r4, #24]
 8010130:	429a      	cmp	r2, r3
 8010132:	dc06      	bgt.n	8010142 <_puts_r+0xb6>
 8010134:	290a      	cmp	r1, #10
 8010136:	d004      	beq.n	8010142 <_puts_r+0xb6>
 8010138:	6823      	ldr	r3, [r4, #0]
 801013a:	1c5a      	adds	r2, r3, #1
 801013c:	6022      	str	r2, [r4, #0]
 801013e:	7019      	strb	r1, [r3, #0]
 8010140:	e7c5      	b.n	80100ce <_puts_r+0x42>
 8010142:	4622      	mov	r2, r4
 8010144:	4628      	mov	r0, r5
 8010146:	f000 f827 	bl	8010198 <__swbuf_r>
 801014a:	3001      	adds	r0, #1
 801014c:	d1bf      	bne.n	80100ce <_puts_r+0x42>
 801014e:	e7df      	b.n	8010110 <_puts_r+0x84>
 8010150:	6823      	ldr	r3, [r4, #0]
 8010152:	250a      	movs	r5, #10
 8010154:	1c5a      	adds	r2, r3, #1
 8010156:	6022      	str	r2, [r4, #0]
 8010158:	701d      	strb	r5, [r3, #0]
 801015a:	e7db      	b.n	8010114 <_puts_r+0x88>
 801015c:	08012b98 	.word	0x08012b98
 8010160:	08012bb8 	.word	0x08012bb8
 8010164:	08012b78 	.word	0x08012b78

08010168 <puts>:
 8010168:	4b02      	ldr	r3, [pc, #8]	; (8010174 <puts+0xc>)
 801016a:	4601      	mov	r1, r0
 801016c:	6818      	ldr	r0, [r3, #0]
 801016e:	f7ff bf8d 	b.w	801008c <_puts_r>
 8010172:	bf00      	nop
 8010174:	20000038 	.word	0x20000038

08010178 <_sbrk_r>:
 8010178:	b538      	push	{r3, r4, r5, lr}
 801017a:	4d06      	ldr	r5, [pc, #24]	; (8010194 <_sbrk_r+0x1c>)
 801017c:	2300      	movs	r3, #0
 801017e:	4604      	mov	r4, r0
 8010180:	4608      	mov	r0, r1
 8010182:	602b      	str	r3, [r5, #0]
 8010184:	f7f5 fa86 	bl	8005694 <_sbrk>
 8010188:	1c43      	adds	r3, r0, #1
 801018a:	d102      	bne.n	8010192 <_sbrk_r+0x1a>
 801018c:	682b      	ldr	r3, [r5, #0]
 801018e:	b103      	cbz	r3, 8010192 <_sbrk_r+0x1a>
 8010190:	6023      	str	r3, [r4, #0]
 8010192:	bd38      	pop	{r3, r4, r5, pc}
 8010194:	20021fd8 	.word	0x20021fd8

08010198 <__swbuf_r>:
 8010198:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801019a:	460e      	mov	r6, r1
 801019c:	4614      	mov	r4, r2
 801019e:	4605      	mov	r5, r0
 80101a0:	b118      	cbz	r0, 80101aa <__swbuf_r+0x12>
 80101a2:	6983      	ldr	r3, [r0, #24]
 80101a4:	b90b      	cbnz	r3, 80101aa <__swbuf_r+0x12>
 80101a6:	f001 f84b 	bl	8011240 <__sinit>
 80101aa:	4b21      	ldr	r3, [pc, #132]	; (8010230 <__swbuf_r+0x98>)
 80101ac:	429c      	cmp	r4, r3
 80101ae:	d12b      	bne.n	8010208 <__swbuf_r+0x70>
 80101b0:	686c      	ldr	r4, [r5, #4]
 80101b2:	69a3      	ldr	r3, [r4, #24]
 80101b4:	60a3      	str	r3, [r4, #8]
 80101b6:	89a3      	ldrh	r3, [r4, #12]
 80101b8:	071a      	lsls	r2, r3, #28
 80101ba:	d52f      	bpl.n	801021c <__swbuf_r+0x84>
 80101bc:	6923      	ldr	r3, [r4, #16]
 80101be:	b36b      	cbz	r3, 801021c <__swbuf_r+0x84>
 80101c0:	6923      	ldr	r3, [r4, #16]
 80101c2:	6820      	ldr	r0, [r4, #0]
 80101c4:	1ac0      	subs	r0, r0, r3
 80101c6:	6963      	ldr	r3, [r4, #20]
 80101c8:	b2f6      	uxtb	r6, r6
 80101ca:	4283      	cmp	r3, r0
 80101cc:	4637      	mov	r7, r6
 80101ce:	dc04      	bgt.n	80101da <__swbuf_r+0x42>
 80101d0:	4621      	mov	r1, r4
 80101d2:	4628      	mov	r0, r5
 80101d4:	f000 ffa0 	bl	8011118 <_fflush_r>
 80101d8:	bb30      	cbnz	r0, 8010228 <__swbuf_r+0x90>
 80101da:	68a3      	ldr	r3, [r4, #8]
 80101dc:	3b01      	subs	r3, #1
 80101de:	60a3      	str	r3, [r4, #8]
 80101e0:	6823      	ldr	r3, [r4, #0]
 80101e2:	1c5a      	adds	r2, r3, #1
 80101e4:	6022      	str	r2, [r4, #0]
 80101e6:	701e      	strb	r6, [r3, #0]
 80101e8:	6963      	ldr	r3, [r4, #20]
 80101ea:	3001      	adds	r0, #1
 80101ec:	4283      	cmp	r3, r0
 80101ee:	d004      	beq.n	80101fa <__swbuf_r+0x62>
 80101f0:	89a3      	ldrh	r3, [r4, #12]
 80101f2:	07db      	lsls	r3, r3, #31
 80101f4:	d506      	bpl.n	8010204 <__swbuf_r+0x6c>
 80101f6:	2e0a      	cmp	r6, #10
 80101f8:	d104      	bne.n	8010204 <__swbuf_r+0x6c>
 80101fa:	4621      	mov	r1, r4
 80101fc:	4628      	mov	r0, r5
 80101fe:	f000 ff8b 	bl	8011118 <_fflush_r>
 8010202:	b988      	cbnz	r0, 8010228 <__swbuf_r+0x90>
 8010204:	4638      	mov	r0, r7
 8010206:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010208:	4b0a      	ldr	r3, [pc, #40]	; (8010234 <__swbuf_r+0x9c>)
 801020a:	429c      	cmp	r4, r3
 801020c:	d101      	bne.n	8010212 <__swbuf_r+0x7a>
 801020e:	68ac      	ldr	r4, [r5, #8]
 8010210:	e7cf      	b.n	80101b2 <__swbuf_r+0x1a>
 8010212:	4b09      	ldr	r3, [pc, #36]	; (8010238 <__swbuf_r+0xa0>)
 8010214:	429c      	cmp	r4, r3
 8010216:	bf08      	it	eq
 8010218:	68ec      	ldreq	r4, [r5, #12]
 801021a:	e7ca      	b.n	80101b2 <__swbuf_r+0x1a>
 801021c:	4621      	mov	r1, r4
 801021e:	4628      	mov	r0, r5
 8010220:	f000 f80c 	bl	801023c <__swsetup_r>
 8010224:	2800      	cmp	r0, #0
 8010226:	d0cb      	beq.n	80101c0 <__swbuf_r+0x28>
 8010228:	f04f 37ff 	mov.w	r7, #4294967295
 801022c:	e7ea      	b.n	8010204 <__swbuf_r+0x6c>
 801022e:	bf00      	nop
 8010230:	08012b98 	.word	0x08012b98
 8010234:	08012bb8 	.word	0x08012bb8
 8010238:	08012b78 	.word	0x08012b78

0801023c <__swsetup_r>:
 801023c:	4b32      	ldr	r3, [pc, #200]	; (8010308 <__swsetup_r+0xcc>)
 801023e:	b570      	push	{r4, r5, r6, lr}
 8010240:	681d      	ldr	r5, [r3, #0]
 8010242:	4606      	mov	r6, r0
 8010244:	460c      	mov	r4, r1
 8010246:	b125      	cbz	r5, 8010252 <__swsetup_r+0x16>
 8010248:	69ab      	ldr	r3, [r5, #24]
 801024a:	b913      	cbnz	r3, 8010252 <__swsetup_r+0x16>
 801024c:	4628      	mov	r0, r5
 801024e:	f000 fff7 	bl	8011240 <__sinit>
 8010252:	4b2e      	ldr	r3, [pc, #184]	; (801030c <__swsetup_r+0xd0>)
 8010254:	429c      	cmp	r4, r3
 8010256:	d10f      	bne.n	8010278 <__swsetup_r+0x3c>
 8010258:	686c      	ldr	r4, [r5, #4]
 801025a:	89a3      	ldrh	r3, [r4, #12]
 801025c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010260:	0719      	lsls	r1, r3, #28
 8010262:	d42c      	bmi.n	80102be <__swsetup_r+0x82>
 8010264:	06dd      	lsls	r5, r3, #27
 8010266:	d411      	bmi.n	801028c <__swsetup_r+0x50>
 8010268:	2309      	movs	r3, #9
 801026a:	6033      	str	r3, [r6, #0]
 801026c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8010270:	81a3      	strh	r3, [r4, #12]
 8010272:	f04f 30ff 	mov.w	r0, #4294967295
 8010276:	e03e      	b.n	80102f6 <__swsetup_r+0xba>
 8010278:	4b25      	ldr	r3, [pc, #148]	; (8010310 <__swsetup_r+0xd4>)
 801027a:	429c      	cmp	r4, r3
 801027c:	d101      	bne.n	8010282 <__swsetup_r+0x46>
 801027e:	68ac      	ldr	r4, [r5, #8]
 8010280:	e7eb      	b.n	801025a <__swsetup_r+0x1e>
 8010282:	4b24      	ldr	r3, [pc, #144]	; (8010314 <__swsetup_r+0xd8>)
 8010284:	429c      	cmp	r4, r3
 8010286:	bf08      	it	eq
 8010288:	68ec      	ldreq	r4, [r5, #12]
 801028a:	e7e6      	b.n	801025a <__swsetup_r+0x1e>
 801028c:	0758      	lsls	r0, r3, #29
 801028e:	d512      	bpl.n	80102b6 <__swsetup_r+0x7a>
 8010290:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010292:	b141      	cbz	r1, 80102a6 <__swsetup_r+0x6a>
 8010294:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010298:	4299      	cmp	r1, r3
 801029a:	d002      	beq.n	80102a2 <__swsetup_r+0x66>
 801029c:	4630      	mov	r0, r6
 801029e:	f7ff f993 	bl	800f5c8 <_free_r>
 80102a2:	2300      	movs	r3, #0
 80102a4:	6363      	str	r3, [r4, #52]	; 0x34
 80102a6:	89a3      	ldrh	r3, [r4, #12]
 80102a8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80102ac:	81a3      	strh	r3, [r4, #12]
 80102ae:	2300      	movs	r3, #0
 80102b0:	6063      	str	r3, [r4, #4]
 80102b2:	6923      	ldr	r3, [r4, #16]
 80102b4:	6023      	str	r3, [r4, #0]
 80102b6:	89a3      	ldrh	r3, [r4, #12]
 80102b8:	f043 0308 	orr.w	r3, r3, #8
 80102bc:	81a3      	strh	r3, [r4, #12]
 80102be:	6923      	ldr	r3, [r4, #16]
 80102c0:	b94b      	cbnz	r3, 80102d6 <__swsetup_r+0x9a>
 80102c2:	89a3      	ldrh	r3, [r4, #12]
 80102c4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80102c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80102cc:	d003      	beq.n	80102d6 <__swsetup_r+0x9a>
 80102ce:	4621      	mov	r1, r4
 80102d0:	4630      	mov	r0, r6
 80102d2:	f001 f87f 	bl	80113d4 <__smakebuf_r>
 80102d6:	89a0      	ldrh	r0, [r4, #12]
 80102d8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80102dc:	f010 0301 	ands.w	r3, r0, #1
 80102e0:	d00a      	beq.n	80102f8 <__swsetup_r+0xbc>
 80102e2:	2300      	movs	r3, #0
 80102e4:	60a3      	str	r3, [r4, #8]
 80102e6:	6963      	ldr	r3, [r4, #20]
 80102e8:	425b      	negs	r3, r3
 80102ea:	61a3      	str	r3, [r4, #24]
 80102ec:	6923      	ldr	r3, [r4, #16]
 80102ee:	b943      	cbnz	r3, 8010302 <__swsetup_r+0xc6>
 80102f0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80102f4:	d1ba      	bne.n	801026c <__swsetup_r+0x30>
 80102f6:	bd70      	pop	{r4, r5, r6, pc}
 80102f8:	0781      	lsls	r1, r0, #30
 80102fa:	bf58      	it	pl
 80102fc:	6963      	ldrpl	r3, [r4, #20]
 80102fe:	60a3      	str	r3, [r4, #8]
 8010300:	e7f4      	b.n	80102ec <__swsetup_r+0xb0>
 8010302:	2000      	movs	r0, #0
 8010304:	e7f7      	b.n	80102f6 <__swsetup_r+0xba>
 8010306:	bf00      	nop
 8010308:	20000038 	.word	0x20000038
 801030c:	08012b98 	.word	0x08012b98
 8010310:	08012bb8 	.word	0x08012bb8
 8010314:	08012b78 	.word	0x08012b78

08010318 <quorem>:
 8010318:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801031c:	6903      	ldr	r3, [r0, #16]
 801031e:	690c      	ldr	r4, [r1, #16]
 8010320:	42a3      	cmp	r3, r4
 8010322:	4607      	mov	r7, r0
 8010324:	f2c0 8081 	blt.w	801042a <quorem+0x112>
 8010328:	3c01      	subs	r4, #1
 801032a:	f101 0814 	add.w	r8, r1, #20
 801032e:	f100 0514 	add.w	r5, r0, #20
 8010332:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010336:	9301      	str	r3, [sp, #4]
 8010338:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801033c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010340:	3301      	adds	r3, #1
 8010342:	429a      	cmp	r2, r3
 8010344:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8010348:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801034c:	fbb2 f6f3 	udiv	r6, r2, r3
 8010350:	d331      	bcc.n	80103b6 <quorem+0x9e>
 8010352:	f04f 0e00 	mov.w	lr, #0
 8010356:	4640      	mov	r0, r8
 8010358:	46ac      	mov	ip, r5
 801035a:	46f2      	mov	sl, lr
 801035c:	f850 2b04 	ldr.w	r2, [r0], #4
 8010360:	b293      	uxth	r3, r2
 8010362:	fb06 e303 	mla	r3, r6, r3, lr
 8010366:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 801036a:	b29b      	uxth	r3, r3
 801036c:	ebaa 0303 	sub.w	r3, sl, r3
 8010370:	f8dc a000 	ldr.w	sl, [ip]
 8010374:	0c12      	lsrs	r2, r2, #16
 8010376:	fa13 f38a 	uxtah	r3, r3, sl
 801037a:	fb06 e202 	mla	r2, r6, r2, lr
 801037e:	9300      	str	r3, [sp, #0]
 8010380:	9b00      	ldr	r3, [sp, #0]
 8010382:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8010386:	b292      	uxth	r2, r2
 8010388:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 801038c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8010390:	f8bd 3000 	ldrh.w	r3, [sp]
 8010394:	4581      	cmp	r9, r0
 8010396:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801039a:	f84c 3b04 	str.w	r3, [ip], #4
 801039e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80103a2:	d2db      	bcs.n	801035c <quorem+0x44>
 80103a4:	f855 300b 	ldr.w	r3, [r5, fp]
 80103a8:	b92b      	cbnz	r3, 80103b6 <quorem+0x9e>
 80103aa:	9b01      	ldr	r3, [sp, #4]
 80103ac:	3b04      	subs	r3, #4
 80103ae:	429d      	cmp	r5, r3
 80103b0:	461a      	mov	r2, r3
 80103b2:	d32e      	bcc.n	8010412 <quorem+0xfa>
 80103b4:	613c      	str	r4, [r7, #16]
 80103b6:	4638      	mov	r0, r7
 80103b8:	f001 fada 	bl	8011970 <__mcmp>
 80103bc:	2800      	cmp	r0, #0
 80103be:	db24      	blt.n	801040a <quorem+0xf2>
 80103c0:	3601      	adds	r6, #1
 80103c2:	4628      	mov	r0, r5
 80103c4:	f04f 0c00 	mov.w	ip, #0
 80103c8:	f858 2b04 	ldr.w	r2, [r8], #4
 80103cc:	f8d0 e000 	ldr.w	lr, [r0]
 80103d0:	b293      	uxth	r3, r2
 80103d2:	ebac 0303 	sub.w	r3, ip, r3
 80103d6:	0c12      	lsrs	r2, r2, #16
 80103d8:	fa13 f38e 	uxtah	r3, r3, lr
 80103dc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80103e0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80103e4:	b29b      	uxth	r3, r3
 80103e6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80103ea:	45c1      	cmp	r9, r8
 80103ec:	f840 3b04 	str.w	r3, [r0], #4
 80103f0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80103f4:	d2e8      	bcs.n	80103c8 <quorem+0xb0>
 80103f6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80103fa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80103fe:	b922      	cbnz	r2, 801040a <quorem+0xf2>
 8010400:	3b04      	subs	r3, #4
 8010402:	429d      	cmp	r5, r3
 8010404:	461a      	mov	r2, r3
 8010406:	d30a      	bcc.n	801041e <quorem+0x106>
 8010408:	613c      	str	r4, [r7, #16]
 801040a:	4630      	mov	r0, r6
 801040c:	b003      	add	sp, #12
 801040e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010412:	6812      	ldr	r2, [r2, #0]
 8010414:	3b04      	subs	r3, #4
 8010416:	2a00      	cmp	r2, #0
 8010418:	d1cc      	bne.n	80103b4 <quorem+0x9c>
 801041a:	3c01      	subs	r4, #1
 801041c:	e7c7      	b.n	80103ae <quorem+0x96>
 801041e:	6812      	ldr	r2, [r2, #0]
 8010420:	3b04      	subs	r3, #4
 8010422:	2a00      	cmp	r2, #0
 8010424:	d1f0      	bne.n	8010408 <quorem+0xf0>
 8010426:	3c01      	subs	r4, #1
 8010428:	e7eb      	b.n	8010402 <quorem+0xea>
 801042a:	2000      	movs	r0, #0
 801042c:	e7ee      	b.n	801040c <quorem+0xf4>
	...

08010430 <_dtoa_r>:
 8010430:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010434:	ed2d 8b04 	vpush	{d8-d9}
 8010438:	ec57 6b10 	vmov	r6, r7, d0
 801043c:	b093      	sub	sp, #76	; 0x4c
 801043e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8010440:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8010444:	9106      	str	r1, [sp, #24]
 8010446:	ee10 aa10 	vmov	sl, s0
 801044a:	4604      	mov	r4, r0
 801044c:	9209      	str	r2, [sp, #36]	; 0x24
 801044e:	930c      	str	r3, [sp, #48]	; 0x30
 8010450:	46bb      	mov	fp, r7
 8010452:	b975      	cbnz	r5, 8010472 <_dtoa_r+0x42>
 8010454:	2010      	movs	r0, #16
 8010456:	f7ff f891 	bl	800f57c <malloc>
 801045a:	4602      	mov	r2, r0
 801045c:	6260      	str	r0, [r4, #36]	; 0x24
 801045e:	b920      	cbnz	r0, 801046a <_dtoa_r+0x3a>
 8010460:	4ba7      	ldr	r3, [pc, #668]	; (8010700 <_dtoa_r+0x2d0>)
 8010462:	21ea      	movs	r1, #234	; 0xea
 8010464:	48a7      	ldr	r0, [pc, #668]	; (8010704 <_dtoa_r+0x2d4>)
 8010466:	f001 fd4b 	bl	8011f00 <__assert_func>
 801046a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801046e:	6005      	str	r5, [r0, #0]
 8010470:	60c5      	str	r5, [r0, #12]
 8010472:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010474:	6819      	ldr	r1, [r3, #0]
 8010476:	b151      	cbz	r1, 801048e <_dtoa_r+0x5e>
 8010478:	685a      	ldr	r2, [r3, #4]
 801047a:	604a      	str	r2, [r1, #4]
 801047c:	2301      	movs	r3, #1
 801047e:	4093      	lsls	r3, r2
 8010480:	608b      	str	r3, [r1, #8]
 8010482:	4620      	mov	r0, r4
 8010484:	f001 f832 	bl	80114ec <_Bfree>
 8010488:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801048a:	2200      	movs	r2, #0
 801048c:	601a      	str	r2, [r3, #0]
 801048e:	1e3b      	subs	r3, r7, #0
 8010490:	bfaa      	itet	ge
 8010492:	2300      	movge	r3, #0
 8010494:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8010498:	f8c8 3000 	strge.w	r3, [r8]
 801049c:	4b9a      	ldr	r3, [pc, #616]	; (8010708 <_dtoa_r+0x2d8>)
 801049e:	bfbc      	itt	lt
 80104a0:	2201      	movlt	r2, #1
 80104a2:	f8c8 2000 	strlt.w	r2, [r8]
 80104a6:	ea33 030b 	bics.w	r3, r3, fp
 80104aa:	d11b      	bne.n	80104e4 <_dtoa_r+0xb4>
 80104ac:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80104ae:	f242 730f 	movw	r3, #9999	; 0x270f
 80104b2:	6013      	str	r3, [r2, #0]
 80104b4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80104b8:	4333      	orrs	r3, r6
 80104ba:	f000 8592 	beq.w	8010fe2 <_dtoa_r+0xbb2>
 80104be:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80104c0:	b963      	cbnz	r3, 80104dc <_dtoa_r+0xac>
 80104c2:	4b92      	ldr	r3, [pc, #584]	; (801070c <_dtoa_r+0x2dc>)
 80104c4:	e022      	b.n	801050c <_dtoa_r+0xdc>
 80104c6:	4b92      	ldr	r3, [pc, #584]	; (8010710 <_dtoa_r+0x2e0>)
 80104c8:	9301      	str	r3, [sp, #4]
 80104ca:	3308      	adds	r3, #8
 80104cc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80104ce:	6013      	str	r3, [r2, #0]
 80104d0:	9801      	ldr	r0, [sp, #4]
 80104d2:	b013      	add	sp, #76	; 0x4c
 80104d4:	ecbd 8b04 	vpop	{d8-d9}
 80104d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80104dc:	4b8b      	ldr	r3, [pc, #556]	; (801070c <_dtoa_r+0x2dc>)
 80104de:	9301      	str	r3, [sp, #4]
 80104e0:	3303      	adds	r3, #3
 80104e2:	e7f3      	b.n	80104cc <_dtoa_r+0x9c>
 80104e4:	2200      	movs	r2, #0
 80104e6:	2300      	movs	r3, #0
 80104e8:	4650      	mov	r0, sl
 80104ea:	4659      	mov	r1, fp
 80104ec:	f7f0 faf4 	bl	8000ad8 <__aeabi_dcmpeq>
 80104f0:	ec4b ab19 	vmov	d9, sl, fp
 80104f4:	4680      	mov	r8, r0
 80104f6:	b158      	cbz	r0, 8010510 <_dtoa_r+0xe0>
 80104f8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80104fa:	2301      	movs	r3, #1
 80104fc:	6013      	str	r3, [r2, #0]
 80104fe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010500:	2b00      	cmp	r3, #0
 8010502:	f000 856b 	beq.w	8010fdc <_dtoa_r+0xbac>
 8010506:	4883      	ldr	r0, [pc, #524]	; (8010714 <_dtoa_r+0x2e4>)
 8010508:	6018      	str	r0, [r3, #0]
 801050a:	1e43      	subs	r3, r0, #1
 801050c:	9301      	str	r3, [sp, #4]
 801050e:	e7df      	b.n	80104d0 <_dtoa_r+0xa0>
 8010510:	ec4b ab10 	vmov	d0, sl, fp
 8010514:	aa10      	add	r2, sp, #64	; 0x40
 8010516:	a911      	add	r1, sp, #68	; 0x44
 8010518:	4620      	mov	r0, r4
 801051a:	f001 facf 	bl	8011abc <__d2b>
 801051e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8010522:	ee08 0a10 	vmov	s16, r0
 8010526:	2d00      	cmp	r5, #0
 8010528:	f000 8084 	beq.w	8010634 <_dtoa_r+0x204>
 801052c:	ee19 3a90 	vmov	r3, s19
 8010530:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010534:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8010538:	4656      	mov	r6, sl
 801053a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 801053e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8010542:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8010546:	4b74      	ldr	r3, [pc, #464]	; (8010718 <_dtoa_r+0x2e8>)
 8010548:	2200      	movs	r2, #0
 801054a:	4630      	mov	r0, r6
 801054c:	4639      	mov	r1, r7
 801054e:	f7ef fea3 	bl	8000298 <__aeabi_dsub>
 8010552:	a365      	add	r3, pc, #404	; (adr r3, 80106e8 <_dtoa_r+0x2b8>)
 8010554:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010558:	f7f0 f856 	bl	8000608 <__aeabi_dmul>
 801055c:	a364      	add	r3, pc, #400	; (adr r3, 80106f0 <_dtoa_r+0x2c0>)
 801055e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010562:	f7ef fe9b 	bl	800029c <__adddf3>
 8010566:	4606      	mov	r6, r0
 8010568:	4628      	mov	r0, r5
 801056a:	460f      	mov	r7, r1
 801056c:	f7ef ffe2 	bl	8000534 <__aeabi_i2d>
 8010570:	a361      	add	r3, pc, #388	; (adr r3, 80106f8 <_dtoa_r+0x2c8>)
 8010572:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010576:	f7f0 f847 	bl	8000608 <__aeabi_dmul>
 801057a:	4602      	mov	r2, r0
 801057c:	460b      	mov	r3, r1
 801057e:	4630      	mov	r0, r6
 8010580:	4639      	mov	r1, r7
 8010582:	f7ef fe8b 	bl	800029c <__adddf3>
 8010586:	4606      	mov	r6, r0
 8010588:	460f      	mov	r7, r1
 801058a:	f7f0 faed 	bl	8000b68 <__aeabi_d2iz>
 801058e:	2200      	movs	r2, #0
 8010590:	9000      	str	r0, [sp, #0]
 8010592:	2300      	movs	r3, #0
 8010594:	4630      	mov	r0, r6
 8010596:	4639      	mov	r1, r7
 8010598:	f7f0 faa8 	bl	8000aec <__aeabi_dcmplt>
 801059c:	b150      	cbz	r0, 80105b4 <_dtoa_r+0x184>
 801059e:	9800      	ldr	r0, [sp, #0]
 80105a0:	f7ef ffc8 	bl	8000534 <__aeabi_i2d>
 80105a4:	4632      	mov	r2, r6
 80105a6:	463b      	mov	r3, r7
 80105a8:	f7f0 fa96 	bl	8000ad8 <__aeabi_dcmpeq>
 80105ac:	b910      	cbnz	r0, 80105b4 <_dtoa_r+0x184>
 80105ae:	9b00      	ldr	r3, [sp, #0]
 80105b0:	3b01      	subs	r3, #1
 80105b2:	9300      	str	r3, [sp, #0]
 80105b4:	9b00      	ldr	r3, [sp, #0]
 80105b6:	2b16      	cmp	r3, #22
 80105b8:	d85a      	bhi.n	8010670 <_dtoa_r+0x240>
 80105ba:	9a00      	ldr	r2, [sp, #0]
 80105bc:	4b57      	ldr	r3, [pc, #348]	; (801071c <_dtoa_r+0x2ec>)
 80105be:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80105c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80105c6:	ec51 0b19 	vmov	r0, r1, d9
 80105ca:	f7f0 fa8f 	bl	8000aec <__aeabi_dcmplt>
 80105ce:	2800      	cmp	r0, #0
 80105d0:	d050      	beq.n	8010674 <_dtoa_r+0x244>
 80105d2:	9b00      	ldr	r3, [sp, #0]
 80105d4:	3b01      	subs	r3, #1
 80105d6:	9300      	str	r3, [sp, #0]
 80105d8:	2300      	movs	r3, #0
 80105da:	930b      	str	r3, [sp, #44]	; 0x2c
 80105dc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80105de:	1b5d      	subs	r5, r3, r5
 80105e0:	1e6b      	subs	r3, r5, #1
 80105e2:	9305      	str	r3, [sp, #20]
 80105e4:	bf45      	ittet	mi
 80105e6:	f1c5 0301 	rsbmi	r3, r5, #1
 80105ea:	9304      	strmi	r3, [sp, #16]
 80105ec:	2300      	movpl	r3, #0
 80105ee:	2300      	movmi	r3, #0
 80105f0:	bf4c      	ite	mi
 80105f2:	9305      	strmi	r3, [sp, #20]
 80105f4:	9304      	strpl	r3, [sp, #16]
 80105f6:	9b00      	ldr	r3, [sp, #0]
 80105f8:	2b00      	cmp	r3, #0
 80105fa:	db3d      	blt.n	8010678 <_dtoa_r+0x248>
 80105fc:	9b05      	ldr	r3, [sp, #20]
 80105fe:	9a00      	ldr	r2, [sp, #0]
 8010600:	920a      	str	r2, [sp, #40]	; 0x28
 8010602:	4413      	add	r3, r2
 8010604:	9305      	str	r3, [sp, #20]
 8010606:	2300      	movs	r3, #0
 8010608:	9307      	str	r3, [sp, #28]
 801060a:	9b06      	ldr	r3, [sp, #24]
 801060c:	2b09      	cmp	r3, #9
 801060e:	f200 8089 	bhi.w	8010724 <_dtoa_r+0x2f4>
 8010612:	2b05      	cmp	r3, #5
 8010614:	bfc4      	itt	gt
 8010616:	3b04      	subgt	r3, #4
 8010618:	9306      	strgt	r3, [sp, #24]
 801061a:	9b06      	ldr	r3, [sp, #24]
 801061c:	f1a3 0302 	sub.w	r3, r3, #2
 8010620:	bfcc      	ite	gt
 8010622:	2500      	movgt	r5, #0
 8010624:	2501      	movle	r5, #1
 8010626:	2b03      	cmp	r3, #3
 8010628:	f200 8087 	bhi.w	801073a <_dtoa_r+0x30a>
 801062c:	e8df f003 	tbb	[pc, r3]
 8010630:	59383a2d 	.word	0x59383a2d
 8010634:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8010638:	441d      	add	r5, r3
 801063a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 801063e:	2b20      	cmp	r3, #32
 8010640:	bfc1      	itttt	gt
 8010642:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8010646:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 801064a:	fa0b f303 	lslgt.w	r3, fp, r3
 801064e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8010652:	bfda      	itte	le
 8010654:	f1c3 0320 	rsble	r3, r3, #32
 8010658:	fa06 f003 	lslle.w	r0, r6, r3
 801065c:	4318      	orrgt	r0, r3
 801065e:	f7ef ff59 	bl	8000514 <__aeabi_ui2d>
 8010662:	2301      	movs	r3, #1
 8010664:	4606      	mov	r6, r0
 8010666:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 801066a:	3d01      	subs	r5, #1
 801066c:	930e      	str	r3, [sp, #56]	; 0x38
 801066e:	e76a      	b.n	8010546 <_dtoa_r+0x116>
 8010670:	2301      	movs	r3, #1
 8010672:	e7b2      	b.n	80105da <_dtoa_r+0x1aa>
 8010674:	900b      	str	r0, [sp, #44]	; 0x2c
 8010676:	e7b1      	b.n	80105dc <_dtoa_r+0x1ac>
 8010678:	9b04      	ldr	r3, [sp, #16]
 801067a:	9a00      	ldr	r2, [sp, #0]
 801067c:	1a9b      	subs	r3, r3, r2
 801067e:	9304      	str	r3, [sp, #16]
 8010680:	4253      	negs	r3, r2
 8010682:	9307      	str	r3, [sp, #28]
 8010684:	2300      	movs	r3, #0
 8010686:	930a      	str	r3, [sp, #40]	; 0x28
 8010688:	e7bf      	b.n	801060a <_dtoa_r+0x1da>
 801068a:	2300      	movs	r3, #0
 801068c:	9308      	str	r3, [sp, #32]
 801068e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010690:	2b00      	cmp	r3, #0
 8010692:	dc55      	bgt.n	8010740 <_dtoa_r+0x310>
 8010694:	2301      	movs	r3, #1
 8010696:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801069a:	461a      	mov	r2, r3
 801069c:	9209      	str	r2, [sp, #36]	; 0x24
 801069e:	e00c      	b.n	80106ba <_dtoa_r+0x28a>
 80106a0:	2301      	movs	r3, #1
 80106a2:	e7f3      	b.n	801068c <_dtoa_r+0x25c>
 80106a4:	2300      	movs	r3, #0
 80106a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80106a8:	9308      	str	r3, [sp, #32]
 80106aa:	9b00      	ldr	r3, [sp, #0]
 80106ac:	4413      	add	r3, r2
 80106ae:	9302      	str	r3, [sp, #8]
 80106b0:	3301      	adds	r3, #1
 80106b2:	2b01      	cmp	r3, #1
 80106b4:	9303      	str	r3, [sp, #12]
 80106b6:	bfb8      	it	lt
 80106b8:	2301      	movlt	r3, #1
 80106ba:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80106bc:	2200      	movs	r2, #0
 80106be:	6042      	str	r2, [r0, #4]
 80106c0:	2204      	movs	r2, #4
 80106c2:	f102 0614 	add.w	r6, r2, #20
 80106c6:	429e      	cmp	r6, r3
 80106c8:	6841      	ldr	r1, [r0, #4]
 80106ca:	d93d      	bls.n	8010748 <_dtoa_r+0x318>
 80106cc:	4620      	mov	r0, r4
 80106ce:	f000 fecd 	bl	801146c <_Balloc>
 80106d2:	9001      	str	r0, [sp, #4]
 80106d4:	2800      	cmp	r0, #0
 80106d6:	d13b      	bne.n	8010750 <_dtoa_r+0x320>
 80106d8:	4b11      	ldr	r3, [pc, #68]	; (8010720 <_dtoa_r+0x2f0>)
 80106da:	4602      	mov	r2, r0
 80106dc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80106e0:	e6c0      	b.n	8010464 <_dtoa_r+0x34>
 80106e2:	2301      	movs	r3, #1
 80106e4:	e7df      	b.n	80106a6 <_dtoa_r+0x276>
 80106e6:	bf00      	nop
 80106e8:	636f4361 	.word	0x636f4361
 80106ec:	3fd287a7 	.word	0x3fd287a7
 80106f0:	8b60c8b3 	.word	0x8b60c8b3
 80106f4:	3fc68a28 	.word	0x3fc68a28
 80106f8:	509f79fb 	.word	0x509f79fb
 80106fc:	3fd34413 	.word	0x3fd34413
 8010700:	08012af5 	.word	0x08012af5
 8010704:	08012b0c 	.word	0x08012b0c
 8010708:	7ff00000 	.word	0x7ff00000
 801070c:	08012af1 	.word	0x08012af1
 8010710:	08012ae8 	.word	0x08012ae8
 8010714:	08012ac5 	.word	0x08012ac5
 8010718:	3ff80000 	.word	0x3ff80000
 801071c:	08012c60 	.word	0x08012c60
 8010720:	08012b67 	.word	0x08012b67
 8010724:	2501      	movs	r5, #1
 8010726:	2300      	movs	r3, #0
 8010728:	9306      	str	r3, [sp, #24]
 801072a:	9508      	str	r5, [sp, #32]
 801072c:	f04f 33ff 	mov.w	r3, #4294967295
 8010730:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8010734:	2200      	movs	r2, #0
 8010736:	2312      	movs	r3, #18
 8010738:	e7b0      	b.n	801069c <_dtoa_r+0x26c>
 801073a:	2301      	movs	r3, #1
 801073c:	9308      	str	r3, [sp, #32]
 801073e:	e7f5      	b.n	801072c <_dtoa_r+0x2fc>
 8010740:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010742:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8010746:	e7b8      	b.n	80106ba <_dtoa_r+0x28a>
 8010748:	3101      	adds	r1, #1
 801074a:	6041      	str	r1, [r0, #4]
 801074c:	0052      	lsls	r2, r2, #1
 801074e:	e7b8      	b.n	80106c2 <_dtoa_r+0x292>
 8010750:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010752:	9a01      	ldr	r2, [sp, #4]
 8010754:	601a      	str	r2, [r3, #0]
 8010756:	9b03      	ldr	r3, [sp, #12]
 8010758:	2b0e      	cmp	r3, #14
 801075a:	f200 809d 	bhi.w	8010898 <_dtoa_r+0x468>
 801075e:	2d00      	cmp	r5, #0
 8010760:	f000 809a 	beq.w	8010898 <_dtoa_r+0x468>
 8010764:	9b00      	ldr	r3, [sp, #0]
 8010766:	2b00      	cmp	r3, #0
 8010768:	dd32      	ble.n	80107d0 <_dtoa_r+0x3a0>
 801076a:	4ab7      	ldr	r2, [pc, #732]	; (8010a48 <_dtoa_r+0x618>)
 801076c:	f003 030f 	and.w	r3, r3, #15
 8010770:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8010774:	e9d3 8900 	ldrd	r8, r9, [r3]
 8010778:	9b00      	ldr	r3, [sp, #0]
 801077a:	05d8      	lsls	r0, r3, #23
 801077c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8010780:	d516      	bpl.n	80107b0 <_dtoa_r+0x380>
 8010782:	4bb2      	ldr	r3, [pc, #712]	; (8010a4c <_dtoa_r+0x61c>)
 8010784:	ec51 0b19 	vmov	r0, r1, d9
 8010788:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801078c:	f7f0 f866 	bl	800085c <__aeabi_ddiv>
 8010790:	f007 070f 	and.w	r7, r7, #15
 8010794:	4682      	mov	sl, r0
 8010796:	468b      	mov	fp, r1
 8010798:	2503      	movs	r5, #3
 801079a:	4eac      	ldr	r6, [pc, #688]	; (8010a4c <_dtoa_r+0x61c>)
 801079c:	b957      	cbnz	r7, 80107b4 <_dtoa_r+0x384>
 801079e:	4642      	mov	r2, r8
 80107a0:	464b      	mov	r3, r9
 80107a2:	4650      	mov	r0, sl
 80107a4:	4659      	mov	r1, fp
 80107a6:	f7f0 f859 	bl	800085c <__aeabi_ddiv>
 80107aa:	4682      	mov	sl, r0
 80107ac:	468b      	mov	fp, r1
 80107ae:	e028      	b.n	8010802 <_dtoa_r+0x3d2>
 80107b0:	2502      	movs	r5, #2
 80107b2:	e7f2      	b.n	801079a <_dtoa_r+0x36a>
 80107b4:	07f9      	lsls	r1, r7, #31
 80107b6:	d508      	bpl.n	80107ca <_dtoa_r+0x39a>
 80107b8:	4640      	mov	r0, r8
 80107ba:	4649      	mov	r1, r9
 80107bc:	e9d6 2300 	ldrd	r2, r3, [r6]
 80107c0:	f7ef ff22 	bl	8000608 <__aeabi_dmul>
 80107c4:	3501      	adds	r5, #1
 80107c6:	4680      	mov	r8, r0
 80107c8:	4689      	mov	r9, r1
 80107ca:	107f      	asrs	r7, r7, #1
 80107cc:	3608      	adds	r6, #8
 80107ce:	e7e5      	b.n	801079c <_dtoa_r+0x36c>
 80107d0:	f000 809b 	beq.w	801090a <_dtoa_r+0x4da>
 80107d4:	9b00      	ldr	r3, [sp, #0]
 80107d6:	4f9d      	ldr	r7, [pc, #628]	; (8010a4c <_dtoa_r+0x61c>)
 80107d8:	425e      	negs	r6, r3
 80107da:	4b9b      	ldr	r3, [pc, #620]	; (8010a48 <_dtoa_r+0x618>)
 80107dc:	f006 020f 	and.w	r2, r6, #15
 80107e0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80107e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80107e8:	ec51 0b19 	vmov	r0, r1, d9
 80107ec:	f7ef ff0c 	bl	8000608 <__aeabi_dmul>
 80107f0:	1136      	asrs	r6, r6, #4
 80107f2:	4682      	mov	sl, r0
 80107f4:	468b      	mov	fp, r1
 80107f6:	2300      	movs	r3, #0
 80107f8:	2502      	movs	r5, #2
 80107fa:	2e00      	cmp	r6, #0
 80107fc:	d17a      	bne.n	80108f4 <_dtoa_r+0x4c4>
 80107fe:	2b00      	cmp	r3, #0
 8010800:	d1d3      	bne.n	80107aa <_dtoa_r+0x37a>
 8010802:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010804:	2b00      	cmp	r3, #0
 8010806:	f000 8082 	beq.w	801090e <_dtoa_r+0x4de>
 801080a:	4b91      	ldr	r3, [pc, #580]	; (8010a50 <_dtoa_r+0x620>)
 801080c:	2200      	movs	r2, #0
 801080e:	4650      	mov	r0, sl
 8010810:	4659      	mov	r1, fp
 8010812:	f7f0 f96b 	bl	8000aec <__aeabi_dcmplt>
 8010816:	2800      	cmp	r0, #0
 8010818:	d079      	beq.n	801090e <_dtoa_r+0x4de>
 801081a:	9b03      	ldr	r3, [sp, #12]
 801081c:	2b00      	cmp	r3, #0
 801081e:	d076      	beq.n	801090e <_dtoa_r+0x4de>
 8010820:	9b02      	ldr	r3, [sp, #8]
 8010822:	2b00      	cmp	r3, #0
 8010824:	dd36      	ble.n	8010894 <_dtoa_r+0x464>
 8010826:	9b00      	ldr	r3, [sp, #0]
 8010828:	4650      	mov	r0, sl
 801082a:	4659      	mov	r1, fp
 801082c:	1e5f      	subs	r7, r3, #1
 801082e:	2200      	movs	r2, #0
 8010830:	4b88      	ldr	r3, [pc, #544]	; (8010a54 <_dtoa_r+0x624>)
 8010832:	f7ef fee9 	bl	8000608 <__aeabi_dmul>
 8010836:	9e02      	ldr	r6, [sp, #8]
 8010838:	4682      	mov	sl, r0
 801083a:	468b      	mov	fp, r1
 801083c:	3501      	adds	r5, #1
 801083e:	4628      	mov	r0, r5
 8010840:	f7ef fe78 	bl	8000534 <__aeabi_i2d>
 8010844:	4652      	mov	r2, sl
 8010846:	465b      	mov	r3, fp
 8010848:	f7ef fede 	bl	8000608 <__aeabi_dmul>
 801084c:	4b82      	ldr	r3, [pc, #520]	; (8010a58 <_dtoa_r+0x628>)
 801084e:	2200      	movs	r2, #0
 8010850:	f7ef fd24 	bl	800029c <__adddf3>
 8010854:	46d0      	mov	r8, sl
 8010856:	46d9      	mov	r9, fp
 8010858:	4682      	mov	sl, r0
 801085a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 801085e:	2e00      	cmp	r6, #0
 8010860:	d158      	bne.n	8010914 <_dtoa_r+0x4e4>
 8010862:	4b7e      	ldr	r3, [pc, #504]	; (8010a5c <_dtoa_r+0x62c>)
 8010864:	2200      	movs	r2, #0
 8010866:	4640      	mov	r0, r8
 8010868:	4649      	mov	r1, r9
 801086a:	f7ef fd15 	bl	8000298 <__aeabi_dsub>
 801086e:	4652      	mov	r2, sl
 8010870:	465b      	mov	r3, fp
 8010872:	4680      	mov	r8, r0
 8010874:	4689      	mov	r9, r1
 8010876:	f7f0 f957 	bl	8000b28 <__aeabi_dcmpgt>
 801087a:	2800      	cmp	r0, #0
 801087c:	f040 8295 	bne.w	8010daa <_dtoa_r+0x97a>
 8010880:	4652      	mov	r2, sl
 8010882:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8010886:	4640      	mov	r0, r8
 8010888:	4649      	mov	r1, r9
 801088a:	f7f0 f92f 	bl	8000aec <__aeabi_dcmplt>
 801088e:	2800      	cmp	r0, #0
 8010890:	f040 8289 	bne.w	8010da6 <_dtoa_r+0x976>
 8010894:	ec5b ab19 	vmov	sl, fp, d9
 8010898:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801089a:	2b00      	cmp	r3, #0
 801089c:	f2c0 8148 	blt.w	8010b30 <_dtoa_r+0x700>
 80108a0:	9a00      	ldr	r2, [sp, #0]
 80108a2:	2a0e      	cmp	r2, #14
 80108a4:	f300 8144 	bgt.w	8010b30 <_dtoa_r+0x700>
 80108a8:	4b67      	ldr	r3, [pc, #412]	; (8010a48 <_dtoa_r+0x618>)
 80108aa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80108ae:	e9d3 8900 	ldrd	r8, r9, [r3]
 80108b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80108b4:	2b00      	cmp	r3, #0
 80108b6:	f280 80d5 	bge.w	8010a64 <_dtoa_r+0x634>
 80108ba:	9b03      	ldr	r3, [sp, #12]
 80108bc:	2b00      	cmp	r3, #0
 80108be:	f300 80d1 	bgt.w	8010a64 <_dtoa_r+0x634>
 80108c2:	f040 826f 	bne.w	8010da4 <_dtoa_r+0x974>
 80108c6:	4b65      	ldr	r3, [pc, #404]	; (8010a5c <_dtoa_r+0x62c>)
 80108c8:	2200      	movs	r2, #0
 80108ca:	4640      	mov	r0, r8
 80108cc:	4649      	mov	r1, r9
 80108ce:	f7ef fe9b 	bl	8000608 <__aeabi_dmul>
 80108d2:	4652      	mov	r2, sl
 80108d4:	465b      	mov	r3, fp
 80108d6:	f7f0 f91d 	bl	8000b14 <__aeabi_dcmpge>
 80108da:	9e03      	ldr	r6, [sp, #12]
 80108dc:	4637      	mov	r7, r6
 80108de:	2800      	cmp	r0, #0
 80108e0:	f040 8245 	bne.w	8010d6e <_dtoa_r+0x93e>
 80108e4:	9d01      	ldr	r5, [sp, #4]
 80108e6:	2331      	movs	r3, #49	; 0x31
 80108e8:	f805 3b01 	strb.w	r3, [r5], #1
 80108ec:	9b00      	ldr	r3, [sp, #0]
 80108ee:	3301      	adds	r3, #1
 80108f0:	9300      	str	r3, [sp, #0]
 80108f2:	e240      	b.n	8010d76 <_dtoa_r+0x946>
 80108f4:	07f2      	lsls	r2, r6, #31
 80108f6:	d505      	bpl.n	8010904 <_dtoa_r+0x4d4>
 80108f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80108fc:	f7ef fe84 	bl	8000608 <__aeabi_dmul>
 8010900:	3501      	adds	r5, #1
 8010902:	2301      	movs	r3, #1
 8010904:	1076      	asrs	r6, r6, #1
 8010906:	3708      	adds	r7, #8
 8010908:	e777      	b.n	80107fa <_dtoa_r+0x3ca>
 801090a:	2502      	movs	r5, #2
 801090c:	e779      	b.n	8010802 <_dtoa_r+0x3d2>
 801090e:	9f00      	ldr	r7, [sp, #0]
 8010910:	9e03      	ldr	r6, [sp, #12]
 8010912:	e794      	b.n	801083e <_dtoa_r+0x40e>
 8010914:	9901      	ldr	r1, [sp, #4]
 8010916:	4b4c      	ldr	r3, [pc, #304]	; (8010a48 <_dtoa_r+0x618>)
 8010918:	4431      	add	r1, r6
 801091a:	910d      	str	r1, [sp, #52]	; 0x34
 801091c:	9908      	ldr	r1, [sp, #32]
 801091e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8010922:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8010926:	2900      	cmp	r1, #0
 8010928:	d043      	beq.n	80109b2 <_dtoa_r+0x582>
 801092a:	494d      	ldr	r1, [pc, #308]	; (8010a60 <_dtoa_r+0x630>)
 801092c:	2000      	movs	r0, #0
 801092e:	f7ef ff95 	bl	800085c <__aeabi_ddiv>
 8010932:	4652      	mov	r2, sl
 8010934:	465b      	mov	r3, fp
 8010936:	f7ef fcaf 	bl	8000298 <__aeabi_dsub>
 801093a:	9d01      	ldr	r5, [sp, #4]
 801093c:	4682      	mov	sl, r0
 801093e:	468b      	mov	fp, r1
 8010940:	4649      	mov	r1, r9
 8010942:	4640      	mov	r0, r8
 8010944:	f7f0 f910 	bl	8000b68 <__aeabi_d2iz>
 8010948:	4606      	mov	r6, r0
 801094a:	f7ef fdf3 	bl	8000534 <__aeabi_i2d>
 801094e:	4602      	mov	r2, r0
 8010950:	460b      	mov	r3, r1
 8010952:	4640      	mov	r0, r8
 8010954:	4649      	mov	r1, r9
 8010956:	f7ef fc9f 	bl	8000298 <__aeabi_dsub>
 801095a:	3630      	adds	r6, #48	; 0x30
 801095c:	f805 6b01 	strb.w	r6, [r5], #1
 8010960:	4652      	mov	r2, sl
 8010962:	465b      	mov	r3, fp
 8010964:	4680      	mov	r8, r0
 8010966:	4689      	mov	r9, r1
 8010968:	f7f0 f8c0 	bl	8000aec <__aeabi_dcmplt>
 801096c:	2800      	cmp	r0, #0
 801096e:	d163      	bne.n	8010a38 <_dtoa_r+0x608>
 8010970:	4642      	mov	r2, r8
 8010972:	464b      	mov	r3, r9
 8010974:	4936      	ldr	r1, [pc, #216]	; (8010a50 <_dtoa_r+0x620>)
 8010976:	2000      	movs	r0, #0
 8010978:	f7ef fc8e 	bl	8000298 <__aeabi_dsub>
 801097c:	4652      	mov	r2, sl
 801097e:	465b      	mov	r3, fp
 8010980:	f7f0 f8b4 	bl	8000aec <__aeabi_dcmplt>
 8010984:	2800      	cmp	r0, #0
 8010986:	f040 80b5 	bne.w	8010af4 <_dtoa_r+0x6c4>
 801098a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801098c:	429d      	cmp	r5, r3
 801098e:	d081      	beq.n	8010894 <_dtoa_r+0x464>
 8010990:	4b30      	ldr	r3, [pc, #192]	; (8010a54 <_dtoa_r+0x624>)
 8010992:	2200      	movs	r2, #0
 8010994:	4650      	mov	r0, sl
 8010996:	4659      	mov	r1, fp
 8010998:	f7ef fe36 	bl	8000608 <__aeabi_dmul>
 801099c:	4b2d      	ldr	r3, [pc, #180]	; (8010a54 <_dtoa_r+0x624>)
 801099e:	4682      	mov	sl, r0
 80109a0:	468b      	mov	fp, r1
 80109a2:	4640      	mov	r0, r8
 80109a4:	4649      	mov	r1, r9
 80109a6:	2200      	movs	r2, #0
 80109a8:	f7ef fe2e 	bl	8000608 <__aeabi_dmul>
 80109ac:	4680      	mov	r8, r0
 80109ae:	4689      	mov	r9, r1
 80109b0:	e7c6      	b.n	8010940 <_dtoa_r+0x510>
 80109b2:	4650      	mov	r0, sl
 80109b4:	4659      	mov	r1, fp
 80109b6:	f7ef fe27 	bl	8000608 <__aeabi_dmul>
 80109ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80109bc:	9d01      	ldr	r5, [sp, #4]
 80109be:	930f      	str	r3, [sp, #60]	; 0x3c
 80109c0:	4682      	mov	sl, r0
 80109c2:	468b      	mov	fp, r1
 80109c4:	4649      	mov	r1, r9
 80109c6:	4640      	mov	r0, r8
 80109c8:	f7f0 f8ce 	bl	8000b68 <__aeabi_d2iz>
 80109cc:	4606      	mov	r6, r0
 80109ce:	f7ef fdb1 	bl	8000534 <__aeabi_i2d>
 80109d2:	3630      	adds	r6, #48	; 0x30
 80109d4:	4602      	mov	r2, r0
 80109d6:	460b      	mov	r3, r1
 80109d8:	4640      	mov	r0, r8
 80109da:	4649      	mov	r1, r9
 80109dc:	f7ef fc5c 	bl	8000298 <__aeabi_dsub>
 80109e0:	f805 6b01 	strb.w	r6, [r5], #1
 80109e4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80109e6:	429d      	cmp	r5, r3
 80109e8:	4680      	mov	r8, r0
 80109ea:	4689      	mov	r9, r1
 80109ec:	f04f 0200 	mov.w	r2, #0
 80109f0:	d124      	bne.n	8010a3c <_dtoa_r+0x60c>
 80109f2:	4b1b      	ldr	r3, [pc, #108]	; (8010a60 <_dtoa_r+0x630>)
 80109f4:	4650      	mov	r0, sl
 80109f6:	4659      	mov	r1, fp
 80109f8:	f7ef fc50 	bl	800029c <__adddf3>
 80109fc:	4602      	mov	r2, r0
 80109fe:	460b      	mov	r3, r1
 8010a00:	4640      	mov	r0, r8
 8010a02:	4649      	mov	r1, r9
 8010a04:	f7f0 f890 	bl	8000b28 <__aeabi_dcmpgt>
 8010a08:	2800      	cmp	r0, #0
 8010a0a:	d173      	bne.n	8010af4 <_dtoa_r+0x6c4>
 8010a0c:	4652      	mov	r2, sl
 8010a0e:	465b      	mov	r3, fp
 8010a10:	4913      	ldr	r1, [pc, #76]	; (8010a60 <_dtoa_r+0x630>)
 8010a12:	2000      	movs	r0, #0
 8010a14:	f7ef fc40 	bl	8000298 <__aeabi_dsub>
 8010a18:	4602      	mov	r2, r0
 8010a1a:	460b      	mov	r3, r1
 8010a1c:	4640      	mov	r0, r8
 8010a1e:	4649      	mov	r1, r9
 8010a20:	f7f0 f864 	bl	8000aec <__aeabi_dcmplt>
 8010a24:	2800      	cmp	r0, #0
 8010a26:	f43f af35 	beq.w	8010894 <_dtoa_r+0x464>
 8010a2a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8010a2c:	1e6b      	subs	r3, r5, #1
 8010a2e:	930f      	str	r3, [sp, #60]	; 0x3c
 8010a30:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8010a34:	2b30      	cmp	r3, #48	; 0x30
 8010a36:	d0f8      	beq.n	8010a2a <_dtoa_r+0x5fa>
 8010a38:	9700      	str	r7, [sp, #0]
 8010a3a:	e049      	b.n	8010ad0 <_dtoa_r+0x6a0>
 8010a3c:	4b05      	ldr	r3, [pc, #20]	; (8010a54 <_dtoa_r+0x624>)
 8010a3e:	f7ef fde3 	bl	8000608 <__aeabi_dmul>
 8010a42:	4680      	mov	r8, r0
 8010a44:	4689      	mov	r9, r1
 8010a46:	e7bd      	b.n	80109c4 <_dtoa_r+0x594>
 8010a48:	08012c60 	.word	0x08012c60
 8010a4c:	08012c38 	.word	0x08012c38
 8010a50:	3ff00000 	.word	0x3ff00000
 8010a54:	40240000 	.word	0x40240000
 8010a58:	401c0000 	.word	0x401c0000
 8010a5c:	40140000 	.word	0x40140000
 8010a60:	3fe00000 	.word	0x3fe00000
 8010a64:	9d01      	ldr	r5, [sp, #4]
 8010a66:	4656      	mov	r6, sl
 8010a68:	465f      	mov	r7, fp
 8010a6a:	4642      	mov	r2, r8
 8010a6c:	464b      	mov	r3, r9
 8010a6e:	4630      	mov	r0, r6
 8010a70:	4639      	mov	r1, r7
 8010a72:	f7ef fef3 	bl	800085c <__aeabi_ddiv>
 8010a76:	f7f0 f877 	bl	8000b68 <__aeabi_d2iz>
 8010a7a:	4682      	mov	sl, r0
 8010a7c:	f7ef fd5a 	bl	8000534 <__aeabi_i2d>
 8010a80:	4642      	mov	r2, r8
 8010a82:	464b      	mov	r3, r9
 8010a84:	f7ef fdc0 	bl	8000608 <__aeabi_dmul>
 8010a88:	4602      	mov	r2, r0
 8010a8a:	460b      	mov	r3, r1
 8010a8c:	4630      	mov	r0, r6
 8010a8e:	4639      	mov	r1, r7
 8010a90:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8010a94:	f7ef fc00 	bl	8000298 <__aeabi_dsub>
 8010a98:	f805 6b01 	strb.w	r6, [r5], #1
 8010a9c:	9e01      	ldr	r6, [sp, #4]
 8010a9e:	9f03      	ldr	r7, [sp, #12]
 8010aa0:	1bae      	subs	r6, r5, r6
 8010aa2:	42b7      	cmp	r7, r6
 8010aa4:	4602      	mov	r2, r0
 8010aa6:	460b      	mov	r3, r1
 8010aa8:	d135      	bne.n	8010b16 <_dtoa_r+0x6e6>
 8010aaa:	f7ef fbf7 	bl	800029c <__adddf3>
 8010aae:	4642      	mov	r2, r8
 8010ab0:	464b      	mov	r3, r9
 8010ab2:	4606      	mov	r6, r0
 8010ab4:	460f      	mov	r7, r1
 8010ab6:	f7f0 f837 	bl	8000b28 <__aeabi_dcmpgt>
 8010aba:	b9d0      	cbnz	r0, 8010af2 <_dtoa_r+0x6c2>
 8010abc:	4642      	mov	r2, r8
 8010abe:	464b      	mov	r3, r9
 8010ac0:	4630      	mov	r0, r6
 8010ac2:	4639      	mov	r1, r7
 8010ac4:	f7f0 f808 	bl	8000ad8 <__aeabi_dcmpeq>
 8010ac8:	b110      	cbz	r0, 8010ad0 <_dtoa_r+0x6a0>
 8010aca:	f01a 0f01 	tst.w	sl, #1
 8010ace:	d110      	bne.n	8010af2 <_dtoa_r+0x6c2>
 8010ad0:	4620      	mov	r0, r4
 8010ad2:	ee18 1a10 	vmov	r1, s16
 8010ad6:	f000 fd09 	bl	80114ec <_Bfree>
 8010ada:	2300      	movs	r3, #0
 8010adc:	9800      	ldr	r0, [sp, #0]
 8010ade:	702b      	strb	r3, [r5, #0]
 8010ae0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010ae2:	3001      	adds	r0, #1
 8010ae4:	6018      	str	r0, [r3, #0]
 8010ae6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010ae8:	2b00      	cmp	r3, #0
 8010aea:	f43f acf1 	beq.w	80104d0 <_dtoa_r+0xa0>
 8010aee:	601d      	str	r5, [r3, #0]
 8010af0:	e4ee      	b.n	80104d0 <_dtoa_r+0xa0>
 8010af2:	9f00      	ldr	r7, [sp, #0]
 8010af4:	462b      	mov	r3, r5
 8010af6:	461d      	mov	r5, r3
 8010af8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010afc:	2a39      	cmp	r2, #57	; 0x39
 8010afe:	d106      	bne.n	8010b0e <_dtoa_r+0x6de>
 8010b00:	9a01      	ldr	r2, [sp, #4]
 8010b02:	429a      	cmp	r2, r3
 8010b04:	d1f7      	bne.n	8010af6 <_dtoa_r+0x6c6>
 8010b06:	9901      	ldr	r1, [sp, #4]
 8010b08:	2230      	movs	r2, #48	; 0x30
 8010b0a:	3701      	adds	r7, #1
 8010b0c:	700a      	strb	r2, [r1, #0]
 8010b0e:	781a      	ldrb	r2, [r3, #0]
 8010b10:	3201      	adds	r2, #1
 8010b12:	701a      	strb	r2, [r3, #0]
 8010b14:	e790      	b.n	8010a38 <_dtoa_r+0x608>
 8010b16:	4ba6      	ldr	r3, [pc, #664]	; (8010db0 <_dtoa_r+0x980>)
 8010b18:	2200      	movs	r2, #0
 8010b1a:	f7ef fd75 	bl	8000608 <__aeabi_dmul>
 8010b1e:	2200      	movs	r2, #0
 8010b20:	2300      	movs	r3, #0
 8010b22:	4606      	mov	r6, r0
 8010b24:	460f      	mov	r7, r1
 8010b26:	f7ef ffd7 	bl	8000ad8 <__aeabi_dcmpeq>
 8010b2a:	2800      	cmp	r0, #0
 8010b2c:	d09d      	beq.n	8010a6a <_dtoa_r+0x63a>
 8010b2e:	e7cf      	b.n	8010ad0 <_dtoa_r+0x6a0>
 8010b30:	9a08      	ldr	r2, [sp, #32]
 8010b32:	2a00      	cmp	r2, #0
 8010b34:	f000 80d7 	beq.w	8010ce6 <_dtoa_r+0x8b6>
 8010b38:	9a06      	ldr	r2, [sp, #24]
 8010b3a:	2a01      	cmp	r2, #1
 8010b3c:	f300 80ba 	bgt.w	8010cb4 <_dtoa_r+0x884>
 8010b40:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010b42:	2a00      	cmp	r2, #0
 8010b44:	f000 80b2 	beq.w	8010cac <_dtoa_r+0x87c>
 8010b48:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8010b4c:	9e07      	ldr	r6, [sp, #28]
 8010b4e:	9d04      	ldr	r5, [sp, #16]
 8010b50:	9a04      	ldr	r2, [sp, #16]
 8010b52:	441a      	add	r2, r3
 8010b54:	9204      	str	r2, [sp, #16]
 8010b56:	9a05      	ldr	r2, [sp, #20]
 8010b58:	2101      	movs	r1, #1
 8010b5a:	441a      	add	r2, r3
 8010b5c:	4620      	mov	r0, r4
 8010b5e:	9205      	str	r2, [sp, #20]
 8010b60:	f000 fd7c 	bl	801165c <__i2b>
 8010b64:	4607      	mov	r7, r0
 8010b66:	2d00      	cmp	r5, #0
 8010b68:	dd0c      	ble.n	8010b84 <_dtoa_r+0x754>
 8010b6a:	9b05      	ldr	r3, [sp, #20]
 8010b6c:	2b00      	cmp	r3, #0
 8010b6e:	dd09      	ble.n	8010b84 <_dtoa_r+0x754>
 8010b70:	42ab      	cmp	r3, r5
 8010b72:	9a04      	ldr	r2, [sp, #16]
 8010b74:	bfa8      	it	ge
 8010b76:	462b      	movge	r3, r5
 8010b78:	1ad2      	subs	r2, r2, r3
 8010b7a:	9204      	str	r2, [sp, #16]
 8010b7c:	9a05      	ldr	r2, [sp, #20]
 8010b7e:	1aed      	subs	r5, r5, r3
 8010b80:	1ad3      	subs	r3, r2, r3
 8010b82:	9305      	str	r3, [sp, #20]
 8010b84:	9b07      	ldr	r3, [sp, #28]
 8010b86:	b31b      	cbz	r3, 8010bd0 <_dtoa_r+0x7a0>
 8010b88:	9b08      	ldr	r3, [sp, #32]
 8010b8a:	2b00      	cmp	r3, #0
 8010b8c:	f000 80af 	beq.w	8010cee <_dtoa_r+0x8be>
 8010b90:	2e00      	cmp	r6, #0
 8010b92:	dd13      	ble.n	8010bbc <_dtoa_r+0x78c>
 8010b94:	4639      	mov	r1, r7
 8010b96:	4632      	mov	r2, r6
 8010b98:	4620      	mov	r0, r4
 8010b9a:	f000 fe1f 	bl	80117dc <__pow5mult>
 8010b9e:	ee18 2a10 	vmov	r2, s16
 8010ba2:	4601      	mov	r1, r0
 8010ba4:	4607      	mov	r7, r0
 8010ba6:	4620      	mov	r0, r4
 8010ba8:	f000 fd6e 	bl	8011688 <__multiply>
 8010bac:	ee18 1a10 	vmov	r1, s16
 8010bb0:	4680      	mov	r8, r0
 8010bb2:	4620      	mov	r0, r4
 8010bb4:	f000 fc9a 	bl	80114ec <_Bfree>
 8010bb8:	ee08 8a10 	vmov	s16, r8
 8010bbc:	9b07      	ldr	r3, [sp, #28]
 8010bbe:	1b9a      	subs	r2, r3, r6
 8010bc0:	d006      	beq.n	8010bd0 <_dtoa_r+0x7a0>
 8010bc2:	ee18 1a10 	vmov	r1, s16
 8010bc6:	4620      	mov	r0, r4
 8010bc8:	f000 fe08 	bl	80117dc <__pow5mult>
 8010bcc:	ee08 0a10 	vmov	s16, r0
 8010bd0:	2101      	movs	r1, #1
 8010bd2:	4620      	mov	r0, r4
 8010bd4:	f000 fd42 	bl	801165c <__i2b>
 8010bd8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010bda:	2b00      	cmp	r3, #0
 8010bdc:	4606      	mov	r6, r0
 8010bde:	f340 8088 	ble.w	8010cf2 <_dtoa_r+0x8c2>
 8010be2:	461a      	mov	r2, r3
 8010be4:	4601      	mov	r1, r0
 8010be6:	4620      	mov	r0, r4
 8010be8:	f000 fdf8 	bl	80117dc <__pow5mult>
 8010bec:	9b06      	ldr	r3, [sp, #24]
 8010bee:	2b01      	cmp	r3, #1
 8010bf0:	4606      	mov	r6, r0
 8010bf2:	f340 8081 	ble.w	8010cf8 <_dtoa_r+0x8c8>
 8010bf6:	f04f 0800 	mov.w	r8, #0
 8010bfa:	6933      	ldr	r3, [r6, #16]
 8010bfc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8010c00:	6918      	ldr	r0, [r3, #16]
 8010c02:	f000 fcdb 	bl	80115bc <__hi0bits>
 8010c06:	f1c0 0020 	rsb	r0, r0, #32
 8010c0a:	9b05      	ldr	r3, [sp, #20]
 8010c0c:	4418      	add	r0, r3
 8010c0e:	f010 001f 	ands.w	r0, r0, #31
 8010c12:	f000 8092 	beq.w	8010d3a <_dtoa_r+0x90a>
 8010c16:	f1c0 0320 	rsb	r3, r0, #32
 8010c1a:	2b04      	cmp	r3, #4
 8010c1c:	f340 808a 	ble.w	8010d34 <_dtoa_r+0x904>
 8010c20:	f1c0 001c 	rsb	r0, r0, #28
 8010c24:	9b04      	ldr	r3, [sp, #16]
 8010c26:	4403      	add	r3, r0
 8010c28:	9304      	str	r3, [sp, #16]
 8010c2a:	9b05      	ldr	r3, [sp, #20]
 8010c2c:	4403      	add	r3, r0
 8010c2e:	4405      	add	r5, r0
 8010c30:	9305      	str	r3, [sp, #20]
 8010c32:	9b04      	ldr	r3, [sp, #16]
 8010c34:	2b00      	cmp	r3, #0
 8010c36:	dd07      	ble.n	8010c48 <_dtoa_r+0x818>
 8010c38:	ee18 1a10 	vmov	r1, s16
 8010c3c:	461a      	mov	r2, r3
 8010c3e:	4620      	mov	r0, r4
 8010c40:	f000 fe26 	bl	8011890 <__lshift>
 8010c44:	ee08 0a10 	vmov	s16, r0
 8010c48:	9b05      	ldr	r3, [sp, #20]
 8010c4a:	2b00      	cmp	r3, #0
 8010c4c:	dd05      	ble.n	8010c5a <_dtoa_r+0x82a>
 8010c4e:	4631      	mov	r1, r6
 8010c50:	461a      	mov	r2, r3
 8010c52:	4620      	mov	r0, r4
 8010c54:	f000 fe1c 	bl	8011890 <__lshift>
 8010c58:	4606      	mov	r6, r0
 8010c5a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010c5c:	2b00      	cmp	r3, #0
 8010c5e:	d06e      	beq.n	8010d3e <_dtoa_r+0x90e>
 8010c60:	ee18 0a10 	vmov	r0, s16
 8010c64:	4631      	mov	r1, r6
 8010c66:	f000 fe83 	bl	8011970 <__mcmp>
 8010c6a:	2800      	cmp	r0, #0
 8010c6c:	da67      	bge.n	8010d3e <_dtoa_r+0x90e>
 8010c6e:	9b00      	ldr	r3, [sp, #0]
 8010c70:	3b01      	subs	r3, #1
 8010c72:	ee18 1a10 	vmov	r1, s16
 8010c76:	9300      	str	r3, [sp, #0]
 8010c78:	220a      	movs	r2, #10
 8010c7a:	2300      	movs	r3, #0
 8010c7c:	4620      	mov	r0, r4
 8010c7e:	f000 fc57 	bl	8011530 <__multadd>
 8010c82:	9b08      	ldr	r3, [sp, #32]
 8010c84:	ee08 0a10 	vmov	s16, r0
 8010c88:	2b00      	cmp	r3, #0
 8010c8a:	f000 81b1 	beq.w	8010ff0 <_dtoa_r+0xbc0>
 8010c8e:	2300      	movs	r3, #0
 8010c90:	4639      	mov	r1, r7
 8010c92:	220a      	movs	r2, #10
 8010c94:	4620      	mov	r0, r4
 8010c96:	f000 fc4b 	bl	8011530 <__multadd>
 8010c9a:	9b02      	ldr	r3, [sp, #8]
 8010c9c:	2b00      	cmp	r3, #0
 8010c9e:	4607      	mov	r7, r0
 8010ca0:	f300 808e 	bgt.w	8010dc0 <_dtoa_r+0x990>
 8010ca4:	9b06      	ldr	r3, [sp, #24]
 8010ca6:	2b02      	cmp	r3, #2
 8010ca8:	dc51      	bgt.n	8010d4e <_dtoa_r+0x91e>
 8010caa:	e089      	b.n	8010dc0 <_dtoa_r+0x990>
 8010cac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8010cae:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8010cb2:	e74b      	b.n	8010b4c <_dtoa_r+0x71c>
 8010cb4:	9b03      	ldr	r3, [sp, #12]
 8010cb6:	1e5e      	subs	r6, r3, #1
 8010cb8:	9b07      	ldr	r3, [sp, #28]
 8010cba:	42b3      	cmp	r3, r6
 8010cbc:	bfbf      	itttt	lt
 8010cbe:	9b07      	ldrlt	r3, [sp, #28]
 8010cc0:	9607      	strlt	r6, [sp, #28]
 8010cc2:	1af2      	sublt	r2, r6, r3
 8010cc4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8010cc6:	bfb6      	itet	lt
 8010cc8:	189b      	addlt	r3, r3, r2
 8010cca:	1b9e      	subge	r6, r3, r6
 8010ccc:	930a      	strlt	r3, [sp, #40]	; 0x28
 8010cce:	9b03      	ldr	r3, [sp, #12]
 8010cd0:	bfb8      	it	lt
 8010cd2:	2600      	movlt	r6, #0
 8010cd4:	2b00      	cmp	r3, #0
 8010cd6:	bfb7      	itett	lt
 8010cd8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8010cdc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8010ce0:	1a9d      	sublt	r5, r3, r2
 8010ce2:	2300      	movlt	r3, #0
 8010ce4:	e734      	b.n	8010b50 <_dtoa_r+0x720>
 8010ce6:	9e07      	ldr	r6, [sp, #28]
 8010ce8:	9d04      	ldr	r5, [sp, #16]
 8010cea:	9f08      	ldr	r7, [sp, #32]
 8010cec:	e73b      	b.n	8010b66 <_dtoa_r+0x736>
 8010cee:	9a07      	ldr	r2, [sp, #28]
 8010cf0:	e767      	b.n	8010bc2 <_dtoa_r+0x792>
 8010cf2:	9b06      	ldr	r3, [sp, #24]
 8010cf4:	2b01      	cmp	r3, #1
 8010cf6:	dc18      	bgt.n	8010d2a <_dtoa_r+0x8fa>
 8010cf8:	f1ba 0f00 	cmp.w	sl, #0
 8010cfc:	d115      	bne.n	8010d2a <_dtoa_r+0x8fa>
 8010cfe:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010d02:	b993      	cbnz	r3, 8010d2a <_dtoa_r+0x8fa>
 8010d04:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8010d08:	0d1b      	lsrs	r3, r3, #20
 8010d0a:	051b      	lsls	r3, r3, #20
 8010d0c:	b183      	cbz	r3, 8010d30 <_dtoa_r+0x900>
 8010d0e:	9b04      	ldr	r3, [sp, #16]
 8010d10:	3301      	adds	r3, #1
 8010d12:	9304      	str	r3, [sp, #16]
 8010d14:	9b05      	ldr	r3, [sp, #20]
 8010d16:	3301      	adds	r3, #1
 8010d18:	9305      	str	r3, [sp, #20]
 8010d1a:	f04f 0801 	mov.w	r8, #1
 8010d1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010d20:	2b00      	cmp	r3, #0
 8010d22:	f47f af6a 	bne.w	8010bfa <_dtoa_r+0x7ca>
 8010d26:	2001      	movs	r0, #1
 8010d28:	e76f      	b.n	8010c0a <_dtoa_r+0x7da>
 8010d2a:	f04f 0800 	mov.w	r8, #0
 8010d2e:	e7f6      	b.n	8010d1e <_dtoa_r+0x8ee>
 8010d30:	4698      	mov	r8, r3
 8010d32:	e7f4      	b.n	8010d1e <_dtoa_r+0x8ee>
 8010d34:	f43f af7d 	beq.w	8010c32 <_dtoa_r+0x802>
 8010d38:	4618      	mov	r0, r3
 8010d3a:	301c      	adds	r0, #28
 8010d3c:	e772      	b.n	8010c24 <_dtoa_r+0x7f4>
 8010d3e:	9b03      	ldr	r3, [sp, #12]
 8010d40:	2b00      	cmp	r3, #0
 8010d42:	dc37      	bgt.n	8010db4 <_dtoa_r+0x984>
 8010d44:	9b06      	ldr	r3, [sp, #24]
 8010d46:	2b02      	cmp	r3, #2
 8010d48:	dd34      	ble.n	8010db4 <_dtoa_r+0x984>
 8010d4a:	9b03      	ldr	r3, [sp, #12]
 8010d4c:	9302      	str	r3, [sp, #8]
 8010d4e:	9b02      	ldr	r3, [sp, #8]
 8010d50:	b96b      	cbnz	r3, 8010d6e <_dtoa_r+0x93e>
 8010d52:	4631      	mov	r1, r6
 8010d54:	2205      	movs	r2, #5
 8010d56:	4620      	mov	r0, r4
 8010d58:	f000 fbea 	bl	8011530 <__multadd>
 8010d5c:	4601      	mov	r1, r0
 8010d5e:	4606      	mov	r6, r0
 8010d60:	ee18 0a10 	vmov	r0, s16
 8010d64:	f000 fe04 	bl	8011970 <__mcmp>
 8010d68:	2800      	cmp	r0, #0
 8010d6a:	f73f adbb 	bgt.w	80108e4 <_dtoa_r+0x4b4>
 8010d6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010d70:	9d01      	ldr	r5, [sp, #4]
 8010d72:	43db      	mvns	r3, r3
 8010d74:	9300      	str	r3, [sp, #0]
 8010d76:	f04f 0800 	mov.w	r8, #0
 8010d7a:	4631      	mov	r1, r6
 8010d7c:	4620      	mov	r0, r4
 8010d7e:	f000 fbb5 	bl	80114ec <_Bfree>
 8010d82:	2f00      	cmp	r7, #0
 8010d84:	f43f aea4 	beq.w	8010ad0 <_dtoa_r+0x6a0>
 8010d88:	f1b8 0f00 	cmp.w	r8, #0
 8010d8c:	d005      	beq.n	8010d9a <_dtoa_r+0x96a>
 8010d8e:	45b8      	cmp	r8, r7
 8010d90:	d003      	beq.n	8010d9a <_dtoa_r+0x96a>
 8010d92:	4641      	mov	r1, r8
 8010d94:	4620      	mov	r0, r4
 8010d96:	f000 fba9 	bl	80114ec <_Bfree>
 8010d9a:	4639      	mov	r1, r7
 8010d9c:	4620      	mov	r0, r4
 8010d9e:	f000 fba5 	bl	80114ec <_Bfree>
 8010da2:	e695      	b.n	8010ad0 <_dtoa_r+0x6a0>
 8010da4:	2600      	movs	r6, #0
 8010da6:	4637      	mov	r7, r6
 8010da8:	e7e1      	b.n	8010d6e <_dtoa_r+0x93e>
 8010daa:	9700      	str	r7, [sp, #0]
 8010dac:	4637      	mov	r7, r6
 8010dae:	e599      	b.n	80108e4 <_dtoa_r+0x4b4>
 8010db0:	40240000 	.word	0x40240000
 8010db4:	9b08      	ldr	r3, [sp, #32]
 8010db6:	2b00      	cmp	r3, #0
 8010db8:	f000 80ca 	beq.w	8010f50 <_dtoa_r+0xb20>
 8010dbc:	9b03      	ldr	r3, [sp, #12]
 8010dbe:	9302      	str	r3, [sp, #8]
 8010dc0:	2d00      	cmp	r5, #0
 8010dc2:	dd05      	ble.n	8010dd0 <_dtoa_r+0x9a0>
 8010dc4:	4639      	mov	r1, r7
 8010dc6:	462a      	mov	r2, r5
 8010dc8:	4620      	mov	r0, r4
 8010dca:	f000 fd61 	bl	8011890 <__lshift>
 8010dce:	4607      	mov	r7, r0
 8010dd0:	f1b8 0f00 	cmp.w	r8, #0
 8010dd4:	d05b      	beq.n	8010e8e <_dtoa_r+0xa5e>
 8010dd6:	6879      	ldr	r1, [r7, #4]
 8010dd8:	4620      	mov	r0, r4
 8010dda:	f000 fb47 	bl	801146c <_Balloc>
 8010dde:	4605      	mov	r5, r0
 8010de0:	b928      	cbnz	r0, 8010dee <_dtoa_r+0x9be>
 8010de2:	4b87      	ldr	r3, [pc, #540]	; (8011000 <_dtoa_r+0xbd0>)
 8010de4:	4602      	mov	r2, r0
 8010de6:	f240 21ea 	movw	r1, #746	; 0x2ea
 8010dea:	f7ff bb3b 	b.w	8010464 <_dtoa_r+0x34>
 8010dee:	693a      	ldr	r2, [r7, #16]
 8010df0:	3202      	adds	r2, #2
 8010df2:	0092      	lsls	r2, r2, #2
 8010df4:	f107 010c 	add.w	r1, r7, #12
 8010df8:	300c      	adds	r0, #12
 8010dfa:	f7fe fbcf 	bl	800f59c <memcpy>
 8010dfe:	2201      	movs	r2, #1
 8010e00:	4629      	mov	r1, r5
 8010e02:	4620      	mov	r0, r4
 8010e04:	f000 fd44 	bl	8011890 <__lshift>
 8010e08:	9b01      	ldr	r3, [sp, #4]
 8010e0a:	f103 0901 	add.w	r9, r3, #1
 8010e0e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8010e12:	4413      	add	r3, r2
 8010e14:	9305      	str	r3, [sp, #20]
 8010e16:	f00a 0301 	and.w	r3, sl, #1
 8010e1a:	46b8      	mov	r8, r7
 8010e1c:	9304      	str	r3, [sp, #16]
 8010e1e:	4607      	mov	r7, r0
 8010e20:	4631      	mov	r1, r6
 8010e22:	ee18 0a10 	vmov	r0, s16
 8010e26:	f7ff fa77 	bl	8010318 <quorem>
 8010e2a:	4641      	mov	r1, r8
 8010e2c:	9002      	str	r0, [sp, #8]
 8010e2e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8010e32:	ee18 0a10 	vmov	r0, s16
 8010e36:	f000 fd9b 	bl	8011970 <__mcmp>
 8010e3a:	463a      	mov	r2, r7
 8010e3c:	9003      	str	r0, [sp, #12]
 8010e3e:	4631      	mov	r1, r6
 8010e40:	4620      	mov	r0, r4
 8010e42:	f000 fdb1 	bl	80119a8 <__mdiff>
 8010e46:	68c2      	ldr	r2, [r0, #12]
 8010e48:	f109 3bff 	add.w	fp, r9, #4294967295
 8010e4c:	4605      	mov	r5, r0
 8010e4e:	bb02      	cbnz	r2, 8010e92 <_dtoa_r+0xa62>
 8010e50:	4601      	mov	r1, r0
 8010e52:	ee18 0a10 	vmov	r0, s16
 8010e56:	f000 fd8b 	bl	8011970 <__mcmp>
 8010e5a:	4602      	mov	r2, r0
 8010e5c:	4629      	mov	r1, r5
 8010e5e:	4620      	mov	r0, r4
 8010e60:	9207      	str	r2, [sp, #28]
 8010e62:	f000 fb43 	bl	80114ec <_Bfree>
 8010e66:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8010e6a:	ea43 0102 	orr.w	r1, r3, r2
 8010e6e:	9b04      	ldr	r3, [sp, #16]
 8010e70:	430b      	orrs	r3, r1
 8010e72:	464d      	mov	r5, r9
 8010e74:	d10f      	bne.n	8010e96 <_dtoa_r+0xa66>
 8010e76:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8010e7a:	d02a      	beq.n	8010ed2 <_dtoa_r+0xaa2>
 8010e7c:	9b03      	ldr	r3, [sp, #12]
 8010e7e:	2b00      	cmp	r3, #0
 8010e80:	dd02      	ble.n	8010e88 <_dtoa_r+0xa58>
 8010e82:	9b02      	ldr	r3, [sp, #8]
 8010e84:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8010e88:	f88b a000 	strb.w	sl, [fp]
 8010e8c:	e775      	b.n	8010d7a <_dtoa_r+0x94a>
 8010e8e:	4638      	mov	r0, r7
 8010e90:	e7ba      	b.n	8010e08 <_dtoa_r+0x9d8>
 8010e92:	2201      	movs	r2, #1
 8010e94:	e7e2      	b.n	8010e5c <_dtoa_r+0xa2c>
 8010e96:	9b03      	ldr	r3, [sp, #12]
 8010e98:	2b00      	cmp	r3, #0
 8010e9a:	db04      	blt.n	8010ea6 <_dtoa_r+0xa76>
 8010e9c:	9906      	ldr	r1, [sp, #24]
 8010e9e:	430b      	orrs	r3, r1
 8010ea0:	9904      	ldr	r1, [sp, #16]
 8010ea2:	430b      	orrs	r3, r1
 8010ea4:	d122      	bne.n	8010eec <_dtoa_r+0xabc>
 8010ea6:	2a00      	cmp	r2, #0
 8010ea8:	ddee      	ble.n	8010e88 <_dtoa_r+0xa58>
 8010eaa:	ee18 1a10 	vmov	r1, s16
 8010eae:	2201      	movs	r2, #1
 8010eb0:	4620      	mov	r0, r4
 8010eb2:	f000 fced 	bl	8011890 <__lshift>
 8010eb6:	4631      	mov	r1, r6
 8010eb8:	ee08 0a10 	vmov	s16, r0
 8010ebc:	f000 fd58 	bl	8011970 <__mcmp>
 8010ec0:	2800      	cmp	r0, #0
 8010ec2:	dc03      	bgt.n	8010ecc <_dtoa_r+0xa9c>
 8010ec4:	d1e0      	bne.n	8010e88 <_dtoa_r+0xa58>
 8010ec6:	f01a 0f01 	tst.w	sl, #1
 8010eca:	d0dd      	beq.n	8010e88 <_dtoa_r+0xa58>
 8010ecc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8010ed0:	d1d7      	bne.n	8010e82 <_dtoa_r+0xa52>
 8010ed2:	2339      	movs	r3, #57	; 0x39
 8010ed4:	f88b 3000 	strb.w	r3, [fp]
 8010ed8:	462b      	mov	r3, r5
 8010eda:	461d      	mov	r5, r3
 8010edc:	3b01      	subs	r3, #1
 8010ede:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8010ee2:	2a39      	cmp	r2, #57	; 0x39
 8010ee4:	d071      	beq.n	8010fca <_dtoa_r+0xb9a>
 8010ee6:	3201      	adds	r2, #1
 8010ee8:	701a      	strb	r2, [r3, #0]
 8010eea:	e746      	b.n	8010d7a <_dtoa_r+0x94a>
 8010eec:	2a00      	cmp	r2, #0
 8010eee:	dd07      	ble.n	8010f00 <_dtoa_r+0xad0>
 8010ef0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8010ef4:	d0ed      	beq.n	8010ed2 <_dtoa_r+0xaa2>
 8010ef6:	f10a 0301 	add.w	r3, sl, #1
 8010efa:	f88b 3000 	strb.w	r3, [fp]
 8010efe:	e73c      	b.n	8010d7a <_dtoa_r+0x94a>
 8010f00:	9b05      	ldr	r3, [sp, #20]
 8010f02:	f809 ac01 	strb.w	sl, [r9, #-1]
 8010f06:	4599      	cmp	r9, r3
 8010f08:	d047      	beq.n	8010f9a <_dtoa_r+0xb6a>
 8010f0a:	ee18 1a10 	vmov	r1, s16
 8010f0e:	2300      	movs	r3, #0
 8010f10:	220a      	movs	r2, #10
 8010f12:	4620      	mov	r0, r4
 8010f14:	f000 fb0c 	bl	8011530 <__multadd>
 8010f18:	45b8      	cmp	r8, r7
 8010f1a:	ee08 0a10 	vmov	s16, r0
 8010f1e:	f04f 0300 	mov.w	r3, #0
 8010f22:	f04f 020a 	mov.w	r2, #10
 8010f26:	4641      	mov	r1, r8
 8010f28:	4620      	mov	r0, r4
 8010f2a:	d106      	bne.n	8010f3a <_dtoa_r+0xb0a>
 8010f2c:	f000 fb00 	bl	8011530 <__multadd>
 8010f30:	4680      	mov	r8, r0
 8010f32:	4607      	mov	r7, r0
 8010f34:	f109 0901 	add.w	r9, r9, #1
 8010f38:	e772      	b.n	8010e20 <_dtoa_r+0x9f0>
 8010f3a:	f000 faf9 	bl	8011530 <__multadd>
 8010f3e:	4639      	mov	r1, r7
 8010f40:	4680      	mov	r8, r0
 8010f42:	2300      	movs	r3, #0
 8010f44:	220a      	movs	r2, #10
 8010f46:	4620      	mov	r0, r4
 8010f48:	f000 faf2 	bl	8011530 <__multadd>
 8010f4c:	4607      	mov	r7, r0
 8010f4e:	e7f1      	b.n	8010f34 <_dtoa_r+0xb04>
 8010f50:	9b03      	ldr	r3, [sp, #12]
 8010f52:	9302      	str	r3, [sp, #8]
 8010f54:	9d01      	ldr	r5, [sp, #4]
 8010f56:	ee18 0a10 	vmov	r0, s16
 8010f5a:	4631      	mov	r1, r6
 8010f5c:	f7ff f9dc 	bl	8010318 <quorem>
 8010f60:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8010f64:	9b01      	ldr	r3, [sp, #4]
 8010f66:	f805 ab01 	strb.w	sl, [r5], #1
 8010f6a:	1aea      	subs	r2, r5, r3
 8010f6c:	9b02      	ldr	r3, [sp, #8]
 8010f6e:	4293      	cmp	r3, r2
 8010f70:	dd09      	ble.n	8010f86 <_dtoa_r+0xb56>
 8010f72:	ee18 1a10 	vmov	r1, s16
 8010f76:	2300      	movs	r3, #0
 8010f78:	220a      	movs	r2, #10
 8010f7a:	4620      	mov	r0, r4
 8010f7c:	f000 fad8 	bl	8011530 <__multadd>
 8010f80:	ee08 0a10 	vmov	s16, r0
 8010f84:	e7e7      	b.n	8010f56 <_dtoa_r+0xb26>
 8010f86:	9b02      	ldr	r3, [sp, #8]
 8010f88:	2b00      	cmp	r3, #0
 8010f8a:	bfc8      	it	gt
 8010f8c:	461d      	movgt	r5, r3
 8010f8e:	9b01      	ldr	r3, [sp, #4]
 8010f90:	bfd8      	it	le
 8010f92:	2501      	movle	r5, #1
 8010f94:	441d      	add	r5, r3
 8010f96:	f04f 0800 	mov.w	r8, #0
 8010f9a:	ee18 1a10 	vmov	r1, s16
 8010f9e:	2201      	movs	r2, #1
 8010fa0:	4620      	mov	r0, r4
 8010fa2:	f000 fc75 	bl	8011890 <__lshift>
 8010fa6:	4631      	mov	r1, r6
 8010fa8:	ee08 0a10 	vmov	s16, r0
 8010fac:	f000 fce0 	bl	8011970 <__mcmp>
 8010fb0:	2800      	cmp	r0, #0
 8010fb2:	dc91      	bgt.n	8010ed8 <_dtoa_r+0xaa8>
 8010fb4:	d102      	bne.n	8010fbc <_dtoa_r+0xb8c>
 8010fb6:	f01a 0f01 	tst.w	sl, #1
 8010fba:	d18d      	bne.n	8010ed8 <_dtoa_r+0xaa8>
 8010fbc:	462b      	mov	r3, r5
 8010fbe:	461d      	mov	r5, r3
 8010fc0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010fc4:	2a30      	cmp	r2, #48	; 0x30
 8010fc6:	d0fa      	beq.n	8010fbe <_dtoa_r+0xb8e>
 8010fc8:	e6d7      	b.n	8010d7a <_dtoa_r+0x94a>
 8010fca:	9a01      	ldr	r2, [sp, #4]
 8010fcc:	429a      	cmp	r2, r3
 8010fce:	d184      	bne.n	8010eda <_dtoa_r+0xaaa>
 8010fd0:	9b00      	ldr	r3, [sp, #0]
 8010fd2:	3301      	adds	r3, #1
 8010fd4:	9300      	str	r3, [sp, #0]
 8010fd6:	2331      	movs	r3, #49	; 0x31
 8010fd8:	7013      	strb	r3, [r2, #0]
 8010fda:	e6ce      	b.n	8010d7a <_dtoa_r+0x94a>
 8010fdc:	4b09      	ldr	r3, [pc, #36]	; (8011004 <_dtoa_r+0xbd4>)
 8010fde:	f7ff ba95 	b.w	801050c <_dtoa_r+0xdc>
 8010fe2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010fe4:	2b00      	cmp	r3, #0
 8010fe6:	f47f aa6e 	bne.w	80104c6 <_dtoa_r+0x96>
 8010fea:	4b07      	ldr	r3, [pc, #28]	; (8011008 <_dtoa_r+0xbd8>)
 8010fec:	f7ff ba8e 	b.w	801050c <_dtoa_r+0xdc>
 8010ff0:	9b02      	ldr	r3, [sp, #8]
 8010ff2:	2b00      	cmp	r3, #0
 8010ff4:	dcae      	bgt.n	8010f54 <_dtoa_r+0xb24>
 8010ff6:	9b06      	ldr	r3, [sp, #24]
 8010ff8:	2b02      	cmp	r3, #2
 8010ffa:	f73f aea8 	bgt.w	8010d4e <_dtoa_r+0x91e>
 8010ffe:	e7a9      	b.n	8010f54 <_dtoa_r+0xb24>
 8011000:	08012b67 	.word	0x08012b67
 8011004:	08012ac4 	.word	0x08012ac4
 8011008:	08012ae8 	.word	0x08012ae8

0801100c <__sflush_r>:
 801100c:	898a      	ldrh	r2, [r1, #12]
 801100e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011012:	4605      	mov	r5, r0
 8011014:	0710      	lsls	r0, r2, #28
 8011016:	460c      	mov	r4, r1
 8011018:	d458      	bmi.n	80110cc <__sflush_r+0xc0>
 801101a:	684b      	ldr	r3, [r1, #4]
 801101c:	2b00      	cmp	r3, #0
 801101e:	dc05      	bgt.n	801102c <__sflush_r+0x20>
 8011020:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8011022:	2b00      	cmp	r3, #0
 8011024:	dc02      	bgt.n	801102c <__sflush_r+0x20>
 8011026:	2000      	movs	r0, #0
 8011028:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801102c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801102e:	2e00      	cmp	r6, #0
 8011030:	d0f9      	beq.n	8011026 <__sflush_r+0x1a>
 8011032:	2300      	movs	r3, #0
 8011034:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8011038:	682f      	ldr	r7, [r5, #0]
 801103a:	602b      	str	r3, [r5, #0]
 801103c:	d032      	beq.n	80110a4 <__sflush_r+0x98>
 801103e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8011040:	89a3      	ldrh	r3, [r4, #12]
 8011042:	075a      	lsls	r2, r3, #29
 8011044:	d505      	bpl.n	8011052 <__sflush_r+0x46>
 8011046:	6863      	ldr	r3, [r4, #4]
 8011048:	1ac0      	subs	r0, r0, r3
 801104a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801104c:	b10b      	cbz	r3, 8011052 <__sflush_r+0x46>
 801104e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8011050:	1ac0      	subs	r0, r0, r3
 8011052:	2300      	movs	r3, #0
 8011054:	4602      	mov	r2, r0
 8011056:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011058:	6a21      	ldr	r1, [r4, #32]
 801105a:	4628      	mov	r0, r5
 801105c:	47b0      	blx	r6
 801105e:	1c43      	adds	r3, r0, #1
 8011060:	89a3      	ldrh	r3, [r4, #12]
 8011062:	d106      	bne.n	8011072 <__sflush_r+0x66>
 8011064:	6829      	ldr	r1, [r5, #0]
 8011066:	291d      	cmp	r1, #29
 8011068:	d82c      	bhi.n	80110c4 <__sflush_r+0xb8>
 801106a:	4a2a      	ldr	r2, [pc, #168]	; (8011114 <__sflush_r+0x108>)
 801106c:	40ca      	lsrs	r2, r1
 801106e:	07d6      	lsls	r6, r2, #31
 8011070:	d528      	bpl.n	80110c4 <__sflush_r+0xb8>
 8011072:	2200      	movs	r2, #0
 8011074:	6062      	str	r2, [r4, #4]
 8011076:	04d9      	lsls	r1, r3, #19
 8011078:	6922      	ldr	r2, [r4, #16]
 801107a:	6022      	str	r2, [r4, #0]
 801107c:	d504      	bpl.n	8011088 <__sflush_r+0x7c>
 801107e:	1c42      	adds	r2, r0, #1
 8011080:	d101      	bne.n	8011086 <__sflush_r+0x7a>
 8011082:	682b      	ldr	r3, [r5, #0]
 8011084:	b903      	cbnz	r3, 8011088 <__sflush_r+0x7c>
 8011086:	6560      	str	r0, [r4, #84]	; 0x54
 8011088:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801108a:	602f      	str	r7, [r5, #0]
 801108c:	2900      	cmp	r1, #0
 801108e:	d0ca      	beq.n	8011026 <__sflush_r+0x1a>
 8011090:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011094:	4299      	cmp	r1, r3
 8011096:	d002      	beq.n	801109e <__sflush_r+0x92>
 8011098:	4628      	mov	r0, r5
 801109a:	f7fe fa95 	bl	800f5c8 <_free_r>
 801109e:	2000      	movs	r0, #0
 80110a0:	6360      	str	r0, [r4, #52]	; 0x34
 80110a2:	e7c1      	b.n	8011028 <__sflush_r+0x1c>
 80110a4:	6a21      	ldr	r1, [r4, #32]
 80110a6:	2301      	movs	r3, #1
 80110a8:	4628      	mov	r0, r5
 80110aa:	47b0      	blx	r6
 80110ac:	1c41      	adds	r1, r0, #1
 80110ae:	d1c7      	bne.n	8011040 <__sflush_r+0x34>
 80110b0:	682b      	ldr	r3, [r5, #0]
 80110b2:	2b00      	cmp	r3, #0
 80110b4:	d0c4      	beq.n	8011040 <__sflush_r+0x34>
 80110b6:	2b1d      	cmp	r3, #29
 80110b8:	d001      	beq.n	80110be <__sflush_r+0xb2>
 80110ba:	2b16      	cmp	r3, #22
 80110bc:	d101      	bne.n	80110c2 <__sflush_r+0xb6>
 80110be:	602f      	str	r7, [r5, #0]
 80110c0:	e7b1      	b.n	8011026 <__sflush_r+0x1a>
 80110c2:	89a3      	ldrh	r3, [r4, #12]
 80110c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80110c8:	81a3      	strh	r3, [r4, #12]
 80110ca:	e7ad      	b.n	8011028 <__sflush_r+0x1c>
 80110cc:	690f      	ldr	r7, [r1, #16]
 80110ce:	2f00      	cmp	r7, #0
 80110d0:	d0a9      	beq.n	8011026 <__sflush_r+0x1a>
 80110d2:	0793      	lsls	r3, r2, #30
 80110d4:	680e      	ldr	r6, [r1, #0]
 80110d6:	bf08      	it	eq
 80110d8:	694b      	ldreq	r3, [r1, #20]
 80110da:	600f      	str	r7, [r1, #0]
 80110dc:	bf18      	it	ne
 80110de:	2300      	movne	r3, #0
 80110e0:	eba6 0807 	sub.w	r8, r6, r7
 80110e4:	608b      	str	r3, [r1, #8]
 80110e6:	f1b8 0f00 	cmp.w	r8, #0
 80110ea:	dd9c      	ble.n	8011026 <__sflush_r+0x1a>
 80110ec:	6a21      	ldr	r1, [r4, #32]
 80110ee:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80110f0:	4643      	mov	r3, r8
 80110f2:	463a      	mov	r2, r7
 80110f4:	4628      	mov	r0, r5
 80110f6:	47b0      	blx	r6
 80110f8:	2800      	cmp	r0, #0
 80110fa:	dc06      	bgt.n	801110a <__sflush_r+0xfe>
 80110fc:	89a3      	ldrh	r3, [r4, #12]
 80110fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011102:	81a3      	strh	r3, [r4, #12]
 8011104:	f04f 30ff 	mov.w	r0, #4294967295
 8011108:	e78e      	b.n	8011028 <__sflush_r+0x1c>
 801110a:	4407      	add	r7, r0
 801110c:	eba8 0800 	sub.w	r8, r8, r0
 8011110:	e7e9      	b.n	80110e6 <__sflush_r+0xda>
 8011112:	bf00      	nop
 8011114:	20400001 	.word	0x20400001

08011118 <_fflush_r>:
 8011118:	b538      	push	{r3, r4, r5, lr}
 801111a:	690b      	ldr	r3, [r1, #16]
 801111c:	4605      	mov	r5, r0
 801111e:	460c      	mov	r4, r1
 8011120:	b913      	cbnz	r3, 8011128 <_fflush_r+0x10>
 8011122:	2500      	movs	r5, #0
 8011124:	4628      	mov	r0, r5
 8011126:	bd38      	pop	{r3, r4, r5, pc}
 8011128:	b118      	cbz	r0, 8011132 <_fflush_r+0x1a>
 801112a:	6983      	ldr	r3, [r0, #24]
 801112c:	b90b      	cbnz	r3, 8011132 <_fflush_r+0x1a>
 801112e:	f000 f887 	bl	8011240 <__sinit>
 8011132:	4b14      	ldr	r3, [pc, #80]	; (8011184 <_fflush_r+0x6c>)
 8011134:	429c      	cmp	r4, r3
 8011136:	d11b      	bne.n	8011170 <_fflush_r+0x58>
 8011138:	686c      	ldr	r4, [r5, #4]
 801113a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801113e:	2b00      	cmp	r3, #0
 8011140:	d0ef      	beq.n	8011122 <_fflush_r+0xa>
 8011142:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8011144:	07d0      	lsls	r0, r2, #31
 8011146:	d404      	bmi.n	8011152 <_fflush_r+0x3a>
 8011148:	0599      	lsls	r1, r3, #22
 801114a:	d402      	bmi.n	8011152 <_fflush_r+0x3a>
 801114c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801114e:	f000 f91a 	bl	8011386 <__retarget_lock_acquire_recursive>
 8011152:	4628      	mov	r0, r5
 8011154:	4621      	mov	r1, r4
 8011156:	f7ff ff59 	bl	801100c <__sflush_r>
 801115a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801115c:	07da      	lsls	r2, r3, #31
 801115e:	4605      	mov	r5, r0
 8011160:	d4e0      	bmi.n	8011124 <_fflush_r+0xc>
 8011162:	89a3      	ldrh	r3, [r4, #12]
 8011164:	059b      	lsls	r3, r3, #22
 8011166:	d4dd      	bmi.n	8011124 <_fflush_r+0xc>
 8011168:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801116a:	f000 f90d 	bl	8011388 <__retarget_lock_release_recursive>
 801116e:	e7d9      	b.n	8011124 <_fflush_r+0xc>
 8011170:	4b05      	ldr	r3, [pc, #20]	; (8011188 <_fflush_r+0x70>)
 8011172:	429c      	cmp	r4, r3
 8011174:	d101      	bne.n	801117a <_fflush_r+0x62>
 8011176:	68ac      	ldr	r4, [r5, #8]
 8011178:	e7df      	b.n	801113a <_fflush_r+0x22>
 801117a:	4b04      	ldr	r3, [pc, #16]	; (801118c <_fflush_r+0x74>)
 801117c:	429c      	cmp	r4, r3
 801117e:	bf08      	it	eq
 8011180:	68ec      	ldreq	r4, [r5, #12]
 8011182:	e7da      	b.n	801113a <_fflush_r+0x22>
 8011184:	08012b98 	.word	0x08012b98
 8011188:	08012bb8 	.word	0x08012bb8
 801118c:	08012b78 	.word	0x08012b78

08011190 <std>:
 8011190:	2300      	movs	r3, #0
 8011192:	b510      	push	{r4, lr}
 8011194:	4604      	mov	r4, r0
 8011196:	e9c0 3300 	strd	r3, r3, [r0]
 801119a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801119e:	6083      	str	r3, [r0, #8]
 80111a0:	8181      	strh	r1, [r0, #12]
 80111a2:	6643      	str	r3, [r0, #100]	; 0x64
 80111a4:	81c2      	strh	r2, [r0, #14]
 80111a6:	6183      	str	r3, [r0, #24]
 80111a8:	4619      	mov	r1, r3
 80111aa:	2208      	movs	r2, #8
 80111ac:	305c      	adds	r0, #92	; 0x5c
 80111ae:	f7fe fa03 	bl	800f5b8 <memset>
 80111b2:	4b05      	ldr	r3, [pc, #20]	; (80111c8 <std+0x38>)
 80111b4:	6263      	str	r3, [r4, #36]	; 0x24
 80111b6:	4b05      	ldr	r3, [pc, #20]	; (80111cc <std+0x3c>)
 80111b8:	62a3      	str	r3, [r4, #40]	; 0x28
 80111ba:	4b05      	ldr	r3, [pc, #20]	; (80111d0 <std+0x40>)
 80111bc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80111be:	4b05      	ldr	r3, [pc, #20]	; (80111d4 <std+0x44>)
 80111c0:	6224      	str	r4, [r4, #32]
 80111c2:	6323      	str	r3, [r4, #48]	; 0x30
 80111c4:	bd10      	pop	{r4, pc}
 80111c6:	bf00      	nop
 80111c8:	08011e55 	.word	0x08011e55
 80111cc:	08011e77 	.word	0x08011e77
 80111d0:	08011eaf 	.word	0x08011eaf
 80111d4:	08011ed3 	.word	0x08011ed3

080111d8 <_cleanup_r>:
 80111d8:	4901      	ldr	r1, [pc, #4]	; (80111e0 <_cleanup_r+0x8>)
 80111da:	f000 b8af 	b.w	801133c <_fwalk_reent>
 80111de:	bf00      	nop
 80111e0:	08011119 	.word	0x08011119

080111e4 <__sfmoreglue>:
 80111e4:	b570      	push	{r4, r5, r6, lr}
 80111e6:	2268      	movs	r2, #104	; 0x68
 80111e8:	1e4d      	subs	r5, r1, #1
 80111ea:	4355      	muls	r5, r2
 80111ec:	460e      	mov	r6, r1
 80111ee:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80111f2:	f7fe fa55 	bl	800f6a0 <_malloc_r>
 80111f6:	4604      	mov	r4, r0
 80111f8:	b140      	cbz	r0, 801120c <__sfmoreglue+0x28>
 80111fa:	2100      	movs	r1, #0
 80111fc:	e9c0 1600 	strd	r1, r6, [r0]
 8011200:	300c      	adds	r0, #12
 8011202:	60a0      	str	r0, [r4, #8]
 8011204:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8011208:	f7fe f9d6 	bl	800f5b8 <memset>
 801120c:	4620      	mov	r0, r4
 801120e:	bd70      	pop	{r4, r5, r6, pc}

08011210 <__sfp_lock_acquire>:
 8011210:	4801      	ldr	r0, [pc, #4]	; (8011218 <__sfp_lock_acquire+0x8>)
 8011212:	f000 b8b8 	b.w	8011386 <__retarget_lock_acquire_recursive>
 8011216:	bf00      	nop
 8011218:	20021fd5 	.word	0x20021fd5

0801121c <__sfp_lock_release>:
 801121c:	4801      	ldr	r0, [pc, #4]	; (8011224 <__sfp_lock_release+0x8>)
 801121e:	f000 b8b3 	b.w	8011388 <__retarget_lock_release_recursive>
 8011222:	bf00      	nop
 8011224:	20021fd5 	.word	0x20021fd5

08011228 <__sinit_lock_acquire>:
 8011228:	4801      	ldr	r0, [pc, #4]	; (8011230 <__sinit_lock_acquire+0x8>)
 801122a:	f000 b8ac 	b.w	8011386 <__retarget_lock_acquire_recursive>
 801122e:	bf00      	nop
 8011230:	20021fd6 	.word	0x20021fd6

08011234 <__sinit_lock_release>:
 8011234:	4801      	ldr	r0, [pc, #4]	; (801123c <__sinit_lock_release+0x8>)
 8011236:	f000 b8a7 	b.w	8011388 <__retarget_lock_release_recursive>
 801123a:	bf00      	nop
 801123c:	20021fd6 	.word	0x20021fd6

08011240 <__sinit>:
 8011240:	b510      	push	{r4, lr}
 8011242:	4604      	mov	r4, r0
 8011244:	f7ff fff0 	bl	8011228 <__sinit_lock_acquire>
 8011248:	69a3      	ldr	r3, [r4, #24]
 801124a:	b11b      	cbz	r3, 8011254 <__sinit+0x14>
 801124c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011250:	f7ff bff0 	b.w	8011234 <__sinit_lock_release>
 8011254:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8011258:	6523      	str	r3, [r4, #80]	; 0x50
 801125a:	4b13      	ldr	r3, [pc, #76]	; (80112a8 <__sinit+0x68>)
 801125c:	4a13      	ldr	r2, [pc, #76]	; (80112ac <__sinit+0x6c>)
 801125e:	681b      	ldr	r3, [r3, #0]
 8011260:	62a2      	str	r2, [r4, #40]	; 0x28
 8011262:	42a3      	cmp	r3, r4
 8011264:	bf04      	itt	eq
 8011266:	2301      	moveq	r3, #1
 8011268:	61a3      	streq	r3, [r4, #24]
 801126a:	4620      	mov	r0, r4
 801126c:	f000 f820 	bl	80112b0 <__sfp>
 8011270:	6060      	str	r0, [r4, #4]
 8011272:	4620      	mov	r0, r4
 8011274:	f000 f81c 	bl	80112b0 <__sfp>
 8011278:	60a0      	str	r0, [r4, #8]
 801127a:	4620      	mov	r0, r4
 801127c:	f000 f818 	bl	80112b0 <__sfp>
 8011280:	2200      	movs	r2, #0
 8011282:	60e0      	str	r0, [r4, #12]
 8011284:	2104      	movs	r1, #4
 8011286:	6860      	ldr	r0, [r4, #4]
 8011288:	f7ff ff82 	bl	8011190 <std>
 801128c:	68a0      	ldr	r0, [r4, #8]
 801128e:	2201      	movs	r2, #1
 8011290:	2109      	movs	r1, #9
 8011292:	f7ff ff7d 	bl	8011190 <std>
 8011296:	68e0      	ldr	r0, [r4, #12]
 8011298:	2202      	movs	r2, #2
 801129a:	2112      	movs	r1, #18
 801129c:	f7ff ff78 	bl	8011190 <std>
 80112a0:	2301      	movs	r3, #1
 80112a2:	61a3      	str	r3, [r4, #24]
 80112a4:	e7d2      	b.n	801124c <__sinit+0xc>
 80112a6:	bf00      	nop
 80112a8:	08012ab0 	.word	0x08012ab0
 80112ac:	080111d9 	.word	0x080111d9

080112b0 <__sfp>:
 80112b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80112b2:	4607      	mov	r7, r0
 80112b4:	f7ff ffac 	bl	8011210 <__sfp_lock_acquire>
 80112b8:	4b1e      	ldr	r3, [pc, #120]	; (8011334 <__sfp+0x84>)
 80112ba:	681e      	ldr	r6, [r3, #0]
 80112bc:	69b3      	ldr	r3, [r6, #24]
 80112be:	b913      	cbnz	r3, 80112c6 <__sfp+0x16>
 80112c0:	4630      	mov	r0, r6
 80112c2:	f7ff ffbd 	bl	8011240 <__sinit>
 80112c6:	3648      	adds	r6, #72	; 0x48
 80112c8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80112cc:	3b01      	subs	r3, #1
 80112ce:	d503      	bpl.n	80112d8 <__sfp+0x28>
 80112d0:	6833      	ldr	r3, [r6, #0]
 80112d2:	b30b      	cbz	r3, 8011318 <__sfp+0x68>
 80112d4:	6836      	ldr	r6, [r6, #0]
 80112d6:	e7f7      	b.n	80112c8 <__sfp+0x18>
 80112d8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80112dc:	b9d5      	cbnz	r5, 8011314 <__sfp+0x64>
 80112de:	4b16      	ldr	r3, [pc, #88]	; (8011338 <__sfp+0x88>)
 80112e0:	60e3      	str	r3, [r4, #12]
 80112e2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80112e6:	6665      	str	r5, [r4, #100]	; 0x64
 80112e8:	f000 f84c 	bl	8011384 <__retarget_lock_init_recursive>
 80112ec:	f7ff ff96 	bl	801121c <__sfp_lock_release>
 80112f0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80112f4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80112f8:	6025      	str	r5, [r4, #0]
 80112fa:	61a5      	str	r5, [r4, #24]
 80112fc:	2208      	movs	r2, #8
 80112fe:	4629      	mov	r1, r5
 8011300:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8011304:	f7fe f958 	bl	800f5b8 <memset>
 8011308:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801130c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8011310:	4620      	mov	r0, r4
 8011312:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011314:	3468      	adds	r4, #104	; 0x68
 8011316:	e7d9      	b.n	80112cc <__sfp+0x1c>
 8011318:	2104      	movs	r1, #4
 801131a:	4638      	mov	r0, r7
 801131c:	f7ff ff62 	bl	80111e4 <__sfmoreglue>
 8011320:	4604      	mov	r4, r0
 8011322:	6030      	str	r0, [r6, #0]
 8011324:	2800      	cmp	r0, #0
 8011326:	d1d5      	bne.n	80112d4 <__sfp+0x24>
 8011328:	f7ff ff78 	bl	801121c <__sfp_lock_release>
 801132c:	230c      	movs	r3, #12
 801132e:	603b      	str	r3, [r7, #0]
 8011330:	e7ee      	b.n	8011310 <__sfp+0x60>
 8011332:	bf00      	nop
 8011334:	08012ab0 	.word	0x08012ab0
 8011338:	ffff0001 	.word	0xffff0001

0801133c <_fwalk_reent>:
 801133c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011340:	4606      	mov	r6, r0
 8011342:	4688      	mov	r8, r1
 8011344:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8011348:	2700      	movs	r7, #0
 801134a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801134e:	f1b9 0901 	subs.w	r9, r9, #1
 8011352:	d505      	bpl.n	8011360 <_fwalk_reent+0x24>
 8011354:	6824      	ldr	r4, [r4, #0]
 8011356:	2c00      	cmp	r4, #0
 8011358:	d1f7      	bne.n	801134a <_fwalk_reent+0xe>
 801135a:	4638      	mov	r0, r7
 801135c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011360:	89ab      	ldrh	r3, [r5, #12]
 8011362:	2b01      	cmp	r3, #1
 8011364:	d907      	bls.n	8011376 <_fwalk_reent+0x3a>
 8011366:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801136a:	3301      	adds	r3, #1
 801136c:	d003      	beq.n	8011376 <_fwalk_reent+0x3a>
 801136e:	4629      	mov	r1, r5
 8011370:	4630      	mov	r0, r6
 8011372:	47c0      	blx	r8
 8011374:	4307      	orrs	r7, r0
 8011376:	3568      	adds	r5, #104	; 0x68
 8011378:	e7e9      	b.n	801134e <_fwalk_reent+0x12>
	...

0801137c <_localeconv_r>:
 801137c:	4800      	ldr	r0, [pc, #0]	; (8011380 <_localeconv_r+0x4>)
 801137e:	4770      	bx	lr
 8011380:	2000018c 	.word	0x2000018c

08011384 <__retarget_lock_init_recursive>:
 8011384:	4770      	bx	lr

08011386 <__retarget_lock_acquire_recursive>:
 8011386:	4770      	bx	lr

08011388 <__retarget_lock_release_recursive>:
 8011388:	4770      	bx	lr

0801138a <__swhatbuf_r>:
 801138a:	b570      	push	{r4, r5, r6, lr}
 801138c:	460e      	mov	r6, r1
 801138e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011392:	2900      	cmp	r1, #0
 8011394:	b096      	sub	sp, #88	; 0x58
 8011396:	4614      	mov	r4, r2
 8011398:	461d      	mov	r5, r3
 801139a:	da08      	bge.n	80113ae <__swhatbuf_r+0x24>
 801139c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80113a0:	2200      	movs	r2, #0
 80113a2:	602a      	str	r2, [r5, #0]
 80113a4:	061a      	lsls	r2, r3, #24
 80113a6:	d410      	bmi.n	80113ca <__swhatbuf_r+0x40>
 80113a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80113ac:	e00e      	b.n	80113cc <__swhatbuf_r+0x42>
 80113ae:	466a      	mov	r2, sp
 80113b0:	f000 fde6 	bl	8011f80 <_fstat_r>
 80113b4:	2800      	cmp	r0, #0
 80113b6:	dbf1      	blt.n	801139c <__swhatbuf_r+0x12>
 80113b8:	9a01      	ldr	r2, [sp, #4]
 80113ba:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80113be:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80113c2:	425a      	negs	r2, r3
 80113c4:	415a      	adcs	r2, r3
 80113c6:	602a      	str	r2, [r5, #0]
 80113c8:	e7ee      	b.n	80113a8 <__swhatbuf_r+0x1e>
 80113ca:	2340      	movs	r3, #64	; 0x40
 80113cc:	2000      	movs	r0, #0
 80113ce:	6023      	str	r3, [r4, #0]
 80113d0:	b016      	add	sp, #88	; 0x58
 80113d2:	bd70      	pop	{r4, r5, r6, pc}

080113d4 <__smakebuf_r>:
 80113d4:	898b      	ldrh	r3, [r1, #12]
 80113d6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80113d8:	079d      	lsls	r5, r3, #30
 80113da:	4606      	mov	r6, r0
 80113dc:	460c      	mov	r4, r1
 80113de:	d507      	bpl.n	80113f0 <__smakebuf_r+0x1c>
 80113e0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80113e4:	6023      	str	r3, [r4, #0]
 80113e6:	6123      	str	r3, [r4, #16]
 80113e8:	2301      	movs	r3, #1
 80113ea:	6163      	str	r3, [r4, #20]
 80113ec:	b002      	add	sp, #8
 80113ee:	bd70      	pop	{r4, r5, r6, pc}
 80113f0:	ab01      	add	r3, sp, #4
 80113f2:	466a      	mov	r2, sp
 80113f4:	f7ff ffc9 	bl	801138a <__swhatbuf_r>
 80113f8:	9900      	ldr	r1, [sp, #0]
 80113fa:	4605      	mov	r5, r0
 80113fc:	4630      	mov	r0, r6
 80113fe:	f7fe f94f 	bl	800f6a0 <_malloc_r>
 8011402:	b948      	cbnz	r0, 8011418 <__smakebuf_r+0x44>
 8011404:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011408:	059a      	lsls	r2, r3, #22
 801140a:	d4ef      	bmi.n	80113ec <__smakebuf_r+0x18>
 801140c:	f023 0303 	bic.w	r3, r3, #3
 8011410:	f043 0302 	orr.w	r3, r3, #2
 8011414:	81a3      	strh	r3, [r4, #12]
 8011416:	e7e3      	b.n	80113e0 <__smakebuf_r+0xc>
 8011418:	4b0d      	ldr	r3, [pc, #52]	; (8011450 <__smakebuf_r+0x7c>)
 801141a:	62b3      	str	r3, [r6, #40]	; 0x28
 801141c:	89a3      	ldrh	r3, [r4, #12]
 801141e:	6020      	str	r0, [r4, #0]
 8011420:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011424:	81a3      	strh	r3, [r4, #12]
 8011426:	9b00      	ldr	r3, [sp, #0]
 8011428:	6163      	str	r3, [r4, #20]
 801142a:	9b01      	ldr	r3, [sp, #4]
 801142c:	6120      	str	r0, [r4, #16]
 801142e:	b15b      	cbz	r3, 8011448 <__smakebuf_r+0x74>
 8011430:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011434:	4630      	mov	r0, r6
 8011436:	f000 fdb5 	bl	8011fa4 <_isatty_r>
 801143a:	b128      	cbz	r0, 8011448 <__smakebuf_r+0x74>
 801143c:	89a3      	ldrh	r3, [r4, #12]
 801143e:	f023 0303 	bic.w	r3, r3, #3
 8011442:	f043 0301 	orr.w	r3, r3, #1
 8011446:	81a3      	strh	r3, [r4, #12]
 8011448:	89a0      	ldrh	r0, [r4, #12]
 801144a:	4305      	orrs	r5, r0
 801144c:	81a5      	strh	r5, [r4, #12]
 801144e:	e7cd      	b.n	80113ec <__smakebuf_r+0x18>
 8011450:	080111d9 	.word	0x080111d9

08011454 <__malloc_lock>:
 8011454:	4801      	ldr	r0, [pc, #4]	; (801145c <__malloc_lock+0x8>)
 8011456:	f7ff bf96 	b.w	8011386 <__retarget_lock_acquire_recursive>
 801145a:	bf00      	nop
 801145c:	20021fd4 	.word	0x20021fd4

08011460 <__malloc_unlock>:
 8011460:	4801      	ldr	r0, [pc, #4]	; (8011468 <__malloc_unlock+0x8>)
 8011462:	f7ff bf91 	b.w	8011388 <__retarget_lock_release_recursive>
 8011466:	bf00      	nop
 8011468:	20021fd4 	.word	0x20021fd4

0801146c <_Balloc>:
 801146c:	b570      	push	{r4, r5, r6, lr}
 801146e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8011470:	4604      	mov	r4, r0
 8011472:	460d      	mov	r5, r1
 8011474:	b976      	cbnz	r6, 8011494 <_Balloc+0x28>
 8011476:	2010      	movs	r0, #16
 8011478:	f7fe f880 	bl	800f57c <malloc>
 801147c:	4602      	mov	r2, r0
 801147e:	6260      	str	r0, [r4, #36]	; 0x24
 8011480:	b920      	cbnz	r0, 801148c <_Balloc+0x20>
 8011482:	4b18      	ldr	r3, [pc, #96]	; (80114e4 <_Balloc+0x78>)
 8011484:	4818      	ldr	r0, [pc, #96]	; (80114e8 <_Balloc+0x7c>)
 8011486:	2166      	movs	r1, #102	; 0x66
 8011488:	f000 fd3a 	bl	8011f00 <__assert_func>
 801148c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011490:	6006      	str	r6, [r0, #0]
 8011492:	60c6      	str	r6, [r0, #12]
 8011494:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8011496:	68f3      	ldr	r3, [r6, #12]
 8011498:	b183      	cbz	r3, 80114bc <_Balloc+0x50>
 801149a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801149c:	68db      	ldr	r3, [r3, #12]
 801149e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80114a2:	b9b8      	cbnz	r0, 80114d4 <_Balloc+0x68>
 80114a4:	2101      	movs	r1, #1
 80114a6:	fa01 f605 	lsl.w	r6, r1, r5
 80114aa:	1d72      	adds	r2, r6, #5
 80114ac:	0092      	lsls	r2, r2, #2
 80114ae:	4620      	mov	r0, r4
 80114b0:	f000 fb60 	bl	8011b74 <_calloc_r>
 80114b4:	b160      	cbz	r0, 80114d0 <_Balloc+0x64>
 80114b6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80114ba:	e00e      	b.n	80114da <_Balloc+0x6e>
 80114bc:	2221      	movs	r2, #33	; 0x21
 80114be:	2104      	movs	r1, #4
 80114c0:	4620      	mov	r0, r4
 80114c2:	f000 fb57 	bl	8011b74 <_calloc_r>
 80114c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80114c8:	60f0      	str	r0, [r6, #12]
 80114ca:	68db      	ldr	r3, [r3, #12]
 80114cc:	2b00      	cmp	r3, #0
 80114ce:	d1e4      	bne.n	801149a <_Balloc+0x2e>
 80114d0:	2000      	movs	r0, #0
 80114d2:	bd70      	pop	{r4, r5, r6, pc}
 80114d4:	6802      	ldr	r2, [r0, #0]
 80114d6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80114da:	2300      	movs	r3, #0
 80114dc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80114e0:	e7f7      	b.n	80114d2 <_Balloc+0x66>
 80114e2:	bf00      	nop
 80114e4:	08012af5 	.word	0x08012af5
 80114e8:	08012bd8 	.word	0x08012bd8

080114ec <_Bfree>:
 80114ec:	b570      	push	{r4, r5, r6, lr}
 80114ee:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80114f0:	4605      	mov	r5, r0
 80114f2:	460c      	mov	r4, r1
 80114f4:	b976      	cbnz	r6, 8011514 <_Bfree+0x28>
 80114f6:	2010      	movs	r0, #16
 80114f8:	f7fe f840 	bl	800f57c <malloc>
 80114fc:	4602      	mov	r2, r0
 80114fe:	6268      	str	r0, [r5, #36]	; 0x24
 8011500:	b920      	cbnz	r0, 801150c <_Bfree+0x20>
 8011502:	4b09      	ldr	r3, [pc, #36]	; (8011528 <_Bfree+0x3c>)
 8011504:	4809      	ldr	r0, [pc, #36]	; (801152c <_Bfree+0x40>)
 8011506:	218a      	movs	r1, #138	; 0x8a
 8011508:	f000 fcfa 	bl	8011f00 <__assert_func>
 801150c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011510:	6006      	str	r6, [r0, #0]
 8011512:	60c6      	str	r6, [r0, #12]
 8011514:	b13c      	cbz	r4, 8011526 <_Bfree+0x3a>
 8011516:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8011518:	6862      	ldr	r2, [r4, #4]
 801151a:	68db      	ldr	r3, [r3, #12]
 801151c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8011520:	6021      	str	r1, [r4, #0]
 8011522:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8011526:	bd70      	pop	{r4, r5, r6, pc}
 8011528:	08012af5 	.word	0x08012af5
 801152c:	08012bd8 	.word	0x08012bd8

08011530 <__multadd>:
 8011530:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011534:	690d      	ldr	r5, [r1, #16]
 8011536:	4607      	mov	r7, r0
 8011538:	460c      	mov	r4, r1
 801153a:	461e      	mov	r6, r3
 801153c:	f101 0c14 	add.w	ip, r1, #20
 8011540:	2000      	movs	r0, #0
 8011542:	f8dc 3000 	ldr.w	r3, [ip]
 8011546:	b299      	uxth	r1, r3
 8011548:	fb02 6101 	mla	r1, r2, r1, r6
 801154c:	0c1e      	lsrs	r6, r3, #16
 801154e:	0c0b      	lsrs	r3, r1, #16
 8011550:	fb02 3306 	mla	r3, r2, r6, r3
 8011554:	b289      	uxth	r1, r1
 8011556:	3001      	adds	r0, #1
 8011558:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801155c:	4285      	cmp	r5, r0
 801155e:	f84c 1b04 	str.w	r1, [ip], #4
 8011562:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8011566:	dcec      	bgt.n	8011542 <__multadd+0x12>
 8011568:	b30e      	cbz	r6, 80115ae <__multadd+0x7e>
 801156a:	68a3      	ldr	r3, [r4, #8]
 801156c:	42ab      	cmp	r3, r5
 801156e:	dc19      	bgt.n	80115a4 <__multadd+0x74>
 8011570:	6861      	ldr	r1, [r4, #4]
 8011572:	4638      	mov	r0, r7
 8011574:	3101      	adds	r1, #1
 8011576:	f7ff ff79 	bl	801146c <_Balloc>
 801157a:	4680      	mov	r8, r0
 801157c:	b928      	cbnz	r0, 801158a <__multadd+0x5a>
 801157e:	4602      	mov	r2, r0
 8011580:	4b0c      	ldr	r3, [pc, #48]	; (80115b4 <__multadd+0x84>)
 8011582:	480d      	ldr	r0, [pc, #52]	; (80115b8 <__multadd+0x88>)
 8011584:	21b5      	movs	r1, #181	; 0xb5
 8011586:	f000 fcbb 	bl	8011f00 <__assert_func>
 801158a:	6922      	ldr	r2, [r4, #16]
 801158c:	3202      	adds	r2, #2
 801158e:	f104 010c 	add.w	r1, r4, #12
 8011592:	0092      	lsls	r2, r2, #2
 8011594:	300c      	adds	r0, #12
 8011596:	f7fe f801 	bl	800f59c <memcpy>
 801159a:	4621      	mov	r1, r4
 801159c:	4638      	mov	r0, r7
 801159e:	f7ff ffa5 	bl	80114ec <_Bfree>
 80115a2:	4644      	mov	r4, r8
 80115a4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80115a8:	3501      	adds	r5, #1
 80115aa:	615e      	str	r6, [r3, #20]
 80115ac:	6125      	str	r5, [r4, #16]
 80115ae:	4620      	mov	r0, r4
 80115b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80115b4:	08012b67 	.word	0x08012b67
 80115b8:	08012bd8 	.word	0x08012bd8

080115bc <__hi0bits>:
 80115bc:	0c03      	lsrs	r3, r0, #16
 80115be:	041b      	lsls	r3, r3, #16
 80115c0:	b9d3      	cbnz	r3, 80115f8 <__hi0bits+0x3c>
 80115c2:	0400      	lsls	r0, r0, #16
 80115c4:	2310      	movs	r3, #16
 80115c6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80115ca:	bf04      	itt	eq
 80115cc:	0200      	lsleq	r0, r0, #8
 80115ce:	3308      	addeq	r3, #8
 80115d0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80115d4:	bf04      	itt	eq
 80115d6:	0100      	lsleq	r0, r0, #4
 80115d8:	3304      	addeq	r3, #4
 80115da:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80115de:	bf04      	itt	eq
 80115e0:	0080      	lsleq	r0, r0, #2
 80115e2:	3302      	addeq	r3, #2
 80115e4:	2800      	cmp	r0, #0
 80115e6:	db05      	blt.n	80115f4 <__hi0bits+0x38>
 80115e8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80115ec:	f103 0301 	add.w	r3, r3, #1
 80115f0:	bf08      	it	eq
 80115f2:	2320      	moveq	r3, #32
 80115f4:	4618      	mov	r0, r3
 80115f6:	4770      	bx	lr
 80115f8:	2300      	movs	r3, #0
 80115fa:	e7e4      	b.n	80115c6 <__hi0bits+0xa>

080115fc <__lo0bits>:
 80115fc:	6803      	ldr	r3, [r0, #0]
 80115fe:	f013 0207 	ands.w	r2, r3, #7
 8011602:	4601      	mov	r1, r0
 8011604:	d00b      	beq.n	801161e <__lo0bits+0x22>
 8011606:	07da      	lsls	r2, r3, #31
 8011608:	d423      	bmi.n	8011652 <__lo0bits+0x56>
 801160a:	0798      	lsls	r0, r3, #30
 801160c:	bf49      	itett	mi
 801160e:	085b      	lsrmi	r3, r3, #1
 8011610:	089b      	lsrpl	r3, r3, #2
 8011612:	2001      	movmi	r0, #1
 8011614:	600b      	strmi	r3, [r1, #0]
 8011616:	bf5c      	itt	pl
 8011618:	600b      	strpl	r3, [r1, #0]
 801161a:	2002      	movpl	r0, #2
 801161c:	4770      	bx	lr
 801161e:	b298      	uxth	r0, r3
 8011620:	b9a8      	cbnz	r0, 801164e <__lo0bits+0x52>
 8011622:	0c1b      	lsrs	r3, r3, #16
 8011624:	2010      	movs	r0, #16
 8011626:	b2da      	uxtb	r2, r3
 8011628:	b90a      	cbnz	r2, 801162e <__lo0bits+0x32>
 801162a:	3008      	adds	r0, #8
 801162c:	0a1b      	lsrs	r3, r3, #8
 801162e:	071a      	lsls	r2, r3, #28
 8011630:	bf04      	itt	eq
 8011632:	091b      	lsreq	r3, r3, #4
 8011634:	3004      	addeq	r0, #4
 8011636:	079a      	lsls	r2, r3, #30
 8011638:	bf04      	itt	eq
 801163a:	089b      	lsreq	r3, r3, #2
 801163c:	3002      	addeq	r0, #2
 801163e:	07da      	lsls	r2, r3, #31
 8011640:	d403      	bmi.n	801164a <__lo0bits+0x4e>
 8011642:	085b      	lsrs	r3, r3, #1
 8011644:	f100 0001 	add.w	r0, r0, #1
 8011648:	d005      	beq.n	8011656 <__lo0bits+0x5a>
 801164a:	600b      	str	r3, [r1, #0]
 801164c:	4770      	bx	lr
 801164e:	4610      	mov	r0, r2
 8011650:	e7e9      	b.n	8011626 <__lo0bits+0x2a>
 8011652:	2000      	movs	r0, #0
 8011654:	4770      	bx	lr
 8011656:	2020      	movs	r0, #32
 8011658:	4770      	bx	lr
	...

0801165c <__i2b>:
 801165c:	b510      	push	{r4, lr}
 801165e:	460c      	mov	r4, r1
 8011660:	2101      	movs	r1, #1
 8011662:	f7ff ff03 	bl	801146c <_Balloc>
 8011666:	4602      	mov	r2, r0
 8011668:	b928      	cbnz	r0, 8011676 <__i2b+0x1a>
 801166a:	4b05      	ldr	r3, [pc, #20]	; (8011680 <__i2b+0x24>)
 801166c:	4805      	ldr	r0, [pc, #20]	; (8011684 <__i2b+0x28>)
 801166e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8011672:	f000 fc45 	bl	8011f00 <__assert_func>
 8011676:	2301      	movs	r3, #1
 8011678:	6144      	str	r4, [r0, #20]
 801167a:	6103      	str	r3, [r0, #16]
 801167c:	bd10      	pop	{r4, pc}
 801167e:	bf00      	nop
 8011680:	08012b67 	.word	0x08012b67
 8011684:	08012bd8 	.word	0x08012bd8

08011688 <__multiply>:
 8011688:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801168c:	4691      	mov	r9, r2
 801168e:	690a      	ldr	r2, [r1, #16]
 8011690:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8011694:	429a      	cmp	r2, r3
 8011696:	bfb8      	it	lt
 8011698:	460b      	movlt	r3, r1
 801169a:	460c      	mov	r4, r1
 801169c:	bfbc      	itt	lt
 801169e:	464c      	movlt	r4, r9
 80116a0:	4699      	movlt	r9, r3
 80116a2:	6927      	ldr	r7, [r4, #16]
 80116a4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80116a8:	68a3      	ldr	r3, [r4, #8]
 80116aa:	6861      	ldr	r1, [r4, #4]
 80116ac:	eb07 060a 	add.w	r6, r7, sl
 80116b0:	42b3      	cmp	r3, r6
 80116b2:	b085      	sub	sp, #20
 80116b4:	bfb8      	it	lt
 80116b6:	3101      	addlt	r1, #1
 80116b8:	f7ff fed8 	bl	801146c <_Balloc>
 80116bc:	b930      	cbnz	r0, 80116cc <__multiply+0x44>
 80116be:	4602      	mov	r2, r0
 80116c0:	4b44      	ldr	r3, [pc, #272]	; (80117d4 <__multiply+0x14c>)
 80116c2:	4845      	ldr	r0, [pc, #276]	; (80117d8 <__multiply+0x150>)
 80116c4:	f240 115d 	movw	r1, #349	; 0x15d
 80116c8:	f000 fc1a 	bl	8011f00 <__assert_func>
 80116cc:	f100 0514 	add.w	r5, r0, #20
 80116d0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80116d4:	462b      	mov	r3, r5
 80116d6:	2200      	movs	r2, #0
 80116d8:	4543      	cmp	r3, r8
 80116da:	d321      	bcc.n	8011720 <__multiply+0x98>
 80116dc:	f104 0314 	add.w	r3, r4, #20
 80116e0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80116e4:	f109 0314 	add.w	r3, r9, #20
 80116e8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80116ec:	9202      	str	r2, [sp, #8]
 80116ee:	1b3a      	subs	r2, r7, r4
 80116f0:	3a15      	subs	r2, #21
 80116f2:	f022 0203 	bic.w	r2, r2, #3
 80116f6:	3204      	adds	r2, #4
 80116f8:	f104 0115 	add.w	r1, r4, #21
 80116fc:	428f      	cmp	r7, r1
 80116fe:	bf38      	it	cc
 8011700:	2204      	movcc	r2, #4
 8011702:	9201      	str	r2, [sp, #4]
 8011704:	9a02      	ldr	r2, [sp, #8]
 8011706:	9303      	str	r3, [sp, #12]
 8011708:	429a      	cmp	r2, r3
 801170a:	d80c      	bhi.n	8011726 <__multiply+0x9e>
 801170c:	2e00      	cmp	r6, #0
 801170e:	dd03      	ble.n	8011718 <__multiply+0x90>
 8011710:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8011714:	2b00      	cmp	r3, #0
 8011716:	d05a      	beq.n	80117ce <__multiply+0x146>
 8011718:	6106      	str	r6, [r0, #16]
 801171a:	b005      	add	sp, #20
 801171c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011720:	f843 2b04 	str.w	r2, [r3], #4
 8011724:	e7d8      	b.n	80116d8 <__multiply+0x50>
 8011726:	f8b3 a000 	ldrh.w	sl, [r3]
 801172a:	f1ba 0f00 	cmp.w	sl, #0
 801172e:	d024      	beq.n	801177a <__multiply+0xf2>
 8011730:	f104 0e14 	add.w	lr, r4, #20
 8011734:	46a9      	mov	r9, r5
 8011736:	f04f 0c00 	mov.w	ip, #0
 801173a:	f85e 2b04 	ldr.w	r2, [lr], #4
 801173e:	f8d9 1000 	ldr.w	r1, [r9]
 8011742:	fa1f fb82 	uxth.w	fp, r2
 8011746:	b289      	uxth	r1, r1
 8011748:	fb0a 110b 	mla	r1, sl, fp, r1
 801174c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8011750:	f8d9 2000 	ldr.w	r2, [r9]
 8011754:	4461      	add	r1, ip
 8011756:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801175a:	fb0a c20b 	mla	r2, sl, fp, ip
 801175e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8011762:	b289      	uxth	r1, r1
 8011764:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8011768:	4577      	cmp	r7, lr
 801176a:	f849 1b04 	str.w	r1, [r9], #4
 801176e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8011772:	d8e2      	bhi.n	801173a <__multiply+0xb2>
 8011774:	9a01      	ldr	r2, [sp, #4]
 8011776:	f845 c002 	str.w	ip, [r5, r2]
 801177a:	9a03      	ldr	r2, [sp, #12]
 801177c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8011780:	3304      	adds	r3, #4
 8011782:	f1b9 0f00 	cmp.w	r9, #0
 8011786:	d020      	beq.n	80117ca <__multiply+0x142>
 8011788:	6829      	ldr	r1, [r5, #0]
 801178a:	f104 0c14 	add.w	ip, r4, #20
 801178e:	46ae      	mov	lr, r5
 8011790:	f04f 0a00 	mov.w	sl, #0
 8011794:	f8bc b000 	ldrh.w	fp, [ip]
 8011798:	f8be 2002 	ldrh.w	r2, [lr, #2]
 801179c:	fb09 220b 	mla	r2, r9, fp, r2
 80117a0:	4492      	add	sl, r2
 80117a2:	b289      	uxth	r1, r1
 80117a4:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80117a8:	f84e 1b04 	str.w	r1, [lr], #4
 80117ac:	f85c 2b04 	ldr.w	r2, [ip], #4
 80117b0:	f8be 1000 	ldrh.w	r1, [lr]
 80117b4:	0c12      	lsrs	r2, r2, #16
 80117b6:	fb09 1102 	mla	r1, r9, r2, r1
 80117ba:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80117be:	4567      	cmp	r7, ip
 80117c0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80117c4:	d8e6      	bhi.n	8011794 <__multiply+0x10c>
 80117c6:	9a01      	ldr	r2, [sp, #4]
 80117c8:	50a9      	str	r1, [r5, r2]
 80117ca:	3504      	adds	r5, #4
 80117cc:	e79a      	b.n	8011704 <__multiply+0x7c>
 80117ce:	3e01      	subs	r6, #1
 80117d0:	e79c      	b.n	801170c <__multiply+0x84>
 80117d2:	bf00      	nop
 80117d4:	08012b67 	.word	0x08012b67
 80117d8:	08012bd8 	.word	0x08012bd8

080117dc <__pow5mult>:
 80117dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80117e0:	4615      	mov	r5, r2
 80117e2:	f012 0203 	ands.w	r2, r2, #3
 80117e6:	4606      	mov	r6, r0
 80117e8:	460f      	mov	r7, r1
 80117ea:	d007      	beq.n	80117fc <__pow5mult+0x20>
 80117ec:	4c25      	ldr	r4, [pc, #148]	; (8011884 <__pow5mult+0xa8>)
 80117ee:	3a01      	subs	r2, #1
 80117f0:	2300      	movs	r3, #0
 80117f2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80117f6:	f7ff fe9b 	bl	8011530 <__multadd>
 80117fa:	4607      	mov	r7, r0
 80117fc:	10ad      	asrs	r5, r5, #2
 80117fe:	d03d      	beq.n	801187c <__pow5mult+0xa0>
 8011800:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8011802:	b97c      	cbnz	r4, 8011824 <__pow5mult+0x48>
 8011804:	2010      	movs	r0, #16
 8011806:	f7fd feb9 	bl	800f57c <malloc>
 801180a:	4602      	mov	r2, r0
 801180c:	6270      	str	r0, [r6, #36]	; 0x24
 801180e:	b928      	cbnz	r0, 801181c <__pow5mult+0x40>
 8011810:	4b1d      	ldr	r3, [pc, #116]	; (8011888 <__pow5mult+0xac>)
 8011812:	481e      	ldr	r0, [pc, #120]	; (801188c <__pow5mult+0xb0>)
 8011814:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8011818:	f000 fb72 	bl	8011f00 <__assert_func>
 801181c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8011820:	6004      	str	r4, [r0, #0]
 8011822:	60c4      	str	r4, [r0, #12]
 8011824:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8011828:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801182c:	b94c      	cbnz	r4, 8011842 <__pow5mult+0x66>
 801182e:	f240 2171 	movw	r1, #625	; 0x271
 8011832:	4630      	mov	r0, r6
 8011834:	f7ff ff12 	bl	801165c <__i2b>
 8011838:	2300      	movs	r3, #0
 801183a:	f8c8 0008 	str.w	r0, [r8, #8]
 801183e:	4604      	mov	r4, r0
 8011840:	6003      	str	r3, [r0, #0]
 8011842:	f04f 0900 	mov.w	r9, #0
 8011846:	07eb      	lsls	r3, r5, #31
 8011848:	d50a      	bpl.n	8011860 <__pow5mult+0x84>
 801184a:	4639      	mov	r1, r7
 801184c:	4622      	mov	r2, r4
 801184e:	4630      	mov	r0, r6
 8011850:	f7ff ff1a 	bl	8011688 <__multiply>
 8011854:	4639      	mov	r1, r7
 8011856:	4680      	mov	r8, r0
 8011858:	4630      	mov	r0, r6
 801185a:	f7ff fe47 	bl	80114ec <_Bfree>
 801185e:	4647      	mov	r7, r8
 8011860:	106d      	asrs	r5, r5, #1
 8011862:	d00b      	beq.n	801187c <__pow5mult+0xa0>
 8011864:	6820      	ldr	r0, [r4, #0]
 8011866:	b938      	cbnz	r0, 8011878 <__pow5mult+0x9c>
 8011868:	4622      	mov	r2, r4
 801186a:	4621      	mov	r1, r4
 801186c:	4630      	mov	r0, r6
 801186e:	f7ff ff0b 	bl	8011688 <__multiply>
 8011872:	6020      	str	r0, [r4, #0]
 8011874:	f8c0 9000 	str.w	r9, [r0]
 8011878:	4604      	mov	r4, r0
 801187a:	e7e4      	b.n	8011846 <__pow5mult+0x6a>
 801187c:	4638      	mov	r0, r7
 801187e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011882:	bf00      	nop
 8011884:	08012d28 	.word	0x08012d28
 8011888:	08012af5 	.word	0x08012af5
 801188c:	08012bd8 	.word	0x08012bd8

08011890 <__lshift>:
 8011890:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011894:	460c      	mov	r4, r1
 8011896:	6849      	ldr	r1, [r1, #4]
 8011898:	6923      	ldr	r3, [r4, #16]
 801189a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801189e:	68a3      	ldr	r3, [r4, #8]
 80118a0:	4607      	mov	r7, r0
 80118a2:	4691      	mov	r9, r2
 80118a4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80118a8:	f108 0601 	add.w	r6, r8, #1
 80118ac:	42b3      	cmp	r3, r6
 80118ae:	db0b      	blt.n	80118c8 <__lshift+0x38>
 80118b0:	4638      	mov	r0, r7
 80118b2:	f7ff fddb 	bl	801146c <_Balloc>
 80118b6:	4605      	mov	r5, r0
 80118b8:	b948      	cbnz	r0, 80118ce <__lshift+0x3e>
 80118ba:	4602      	mov	r2, r0
 80118bc:	4b2a      	ldr	r3, [pc, #168]	; (8011968 <__lshift+0xd8>)
 80118be:	482b      	ldr	r0, [pc, #172]	; (801196c <__lshift+0xdc>)
 80118c0:	f240 11d9 	movw	r1, #473	; 0x1d9
 80118c4:	f000 fb1c 	bl	8011f00 <__assert_func>
 80118c8:	3101      	adds	r1, #1
 80118ca:	005b      	lsls	r3, r3, #1
 80118cc:	e7ee      	b.n	80118ac <__lshift+0x1c>
 80118ce:	2300      	movs	r3, #0
 80118d0:	f100 0114 	add.w	r1, r0, #20
 80118d4:	f100 0210 	add.w	r2, r0, #16
 80118d8:	4618      	mov	r0, r3
 80118da:	4553      	cmp	r3, sl
 80118dc:	db37      	blt.n	801194e <__lshift+0xbe>
 80118de:	6920      	ldr	r0, [r4, #16]
 80118e0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80118e4:	f104 0314 	add.w	r3, r4, #20
 80118e8:	f019 091f 	ands.w	r9, r9, #31
 80118ec:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80118f0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80118f4:	d02f      	beq.n	8011956 <__lshift+0xc6>
 80118f6:	f1c9 0e20 	rsb	lr, r9, #32
 80118fa:	468a      	mov	sl, r1
 80118fc:	f04f 0c00 	mov.w	ip, #0
 8011900:	681a      	ldr	r2, [r3, #0]
 8011902:	fa02 f209 	lsl.w	r2, r2, r9
 8011906:	ea42 020c 	orr.w	r2, r2, ip
 801190a:	f84a 2b04 	str.w	r2, [sl], #4
 801190e:	f853 2b04 	ldr.w	r2, [r3], #4
 8011912:	4298      	cmp	r0, r3
 8011914:	fa22 fc0e 	lsr.w	ip, r2, lr
 8011918:	d8f2      	bhi.n	8011900 <__lshift+0x70>
 801191a:	1b03      	subs	r3, r0, r4
 801191c:	3b15      	subs	r3, #21
 801191e:	f023 0303 	bic.w	r3, r3, #3
 8011922:	3304      	adds	r3, #4
 8011924:	f104 0215 	add.w	r2, r4, #21
 8011928:	4290      	cmp	r0, r2
 801192a:	bf38      	it	cc
 801192c:	2304      	movcc	r3, #4
 801192e:	f841 c003 	str.w	ip, [r1, r3]
 8011932:	f1bc 0f00 	cmp.w	ip, #0
 8011936:	d001      	beq.n	801193c <__lshift+0xac>
 8011938:	f108 0602 	add.w	r6, r8, #2
 801193c:	3e01      	subs	r6, #1
 801193e:	4638      	mov	r0, r7
 8011940:	612e      	str	r6, [r5, #16]
 8011942:	4621      	mov	r1, r4
 8011944:	f7ff fdd2 	bl	80114ec <_Bfree>
 8011948:	4628      	mov	r0, r5
 801194a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801194e:	f842 0f04 	str.w	r0, [r2, #4]!
 8011952:	3301      	adds	r3, #1
 8011954:	e7c1      	b.n	80118da <__lshift+0x4a>
 8011956:	3904      	subs	r1, #4
 8011958:	f853 2b04 	ldr.w	r2, [r3], #4
 801195c:	f841 2f04 	str.w	r2, [r1, #4]!
 8011960:	4298      	cmp	r0, r3
 8011962:	d8f9      	bhi.n	8011958 <__lshift+0xc8>
 8011964:	e7ea      	b.n	801193c <__lshift+0xac>
 8011966:	bf00      	nop
 8011968:	08012b67 	.word	0x08012b67
 801196c:	08012bd8 	.word	0x08012bd8

08011970 <__mcmp>:
 8011970:	b530      	push	{r4, r5, lr}
 8011972:	6902      	ldr	r2, [r0, #16]
 8011974:	690c      	ldr	r4, [r1, #16]
 8011976:	1b12      	subs	r2, r2, r4
 8011978:	d10e      	bne.n	8011998 <__mcmp+0x28>
 801197a:	f100 0314 	add.w	r3, r0, #20
 801197e:	3114      	adds	r1, #20
 8011980:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8011984:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8011988:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 801198c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8011990:	42a5      	cmp	r5, r4
 8011992:	d003      	beq.n	801199c <__mcmp+0x2c>
 8011994:	d305      	bcc.n	80119a2 <__mcmp+0x32>
 8011996:	2201      	movs	r2, #1
 8011998:	4610      	mov	r0, r2
 801199a:	bd30      	pop	{r4, r5, pc}
 801199c:	4283      	cmp	r3, r0
 801199e:	d3f3      	bcc.n	8011988 <__mcmp+0x18>
 80119a0:	e7fa      	b.n	8011998 <__mcmp+0x28>
 80119a2:	f04f 32ff 	mov.w	r2, #4294967295
 80119a6:	e7f7      	b.n	8011998 <__mcmp+0x28>

080119a8 <__mdiff>:
 80119a8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80119ac:	460c      	mov	r4, r1
 80119ae:	4606      	mov	r6, r0
 80119b0:	4611      	mov	r1, r2
 80119b2:	4620      	mov	r0, r4
 80119b4:	4690      	mov	r8, r2
 80119b6:	f7ff ffdb 	bl	8011970 <__mcmp>
 80119ba:	1e05      	subs	r5, r0, #0
 80119bc:	d110      	bne.n	80119e0 <__mdiff+0x38>
 80119be:	4629      	mov	r1, r5
 80119c0:	4630      	mov	r0, r6
 80119c2:	f7ff fd53 	bl	801146c <_Balloc>
 80119c6:	b930      	cbnz	r0, 80119d6 <__mdiff+0x2e>
 80119c8:	4b3a      	ldr	r3, [pc, #232]	; (8011ab4 <__mdiff+0x10c>)
 80119ca:	4602      	mov	r2, r0
 80119cc:	f240 2132 	movw	r1, #562	; 0x232
 80119d0:	4839      	ldr	r0, [pc, #228]	; (8011ab8 <__mdiff+0x110>)
 80119d2:	f000 fa95 	bl	8011f00 <__assert_func>
 80119d6:	2301      	movs	r3, #1
 80119d8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80119dc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80119e0:	bfa4      	itt	ge
 80119e2:	4643      	movge	r3, r8
 80119e4:	46a0      	movge	r8, r4
 80119e6:	4630      	mov	r0, r6
 80119e8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80119ec:	bfa6      	itte	ge
 80119ee:	461c      	movge	r4, r3
 80119f0:	2500      	movge	r5, #0
 80119f2:	2501      	movlt	r5, #1
 80119f4:	f7ff fd3a 	bl	801146c <_Balloc>
 80119f8:	b920      	cbnz	r0, 8011a04 <__mdiff+0x5c>
 80119fa:	4b2e      	ldr	r3, [pc, #184]	; (8011ab4 <__mdiff+0x10c>)
 80119fc:	4602      	mov	r2, r0
 80119fe:	f44f 7110 	mov.w	r1, #576	; 0x240
 8011a02:	e7e5      	b.n	80119d0 <__mdiff+0x28>
 8011a04:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8011a08:	6926      	ldr	r6, [r4, #16]
 8011a0a:	60c5      	str	r5, [r0, #12]
 8011a0c:	f104 0914 	add.w	r9, r4, #20
 8011a10:	f108 0514 	add.w	r5, r8, #20
 8011a14:	f100 0e14 	add.w	lr, r0, #20
 8011a18:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8011a1c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8011a20:	f108 0210 	add.w	r2, r8, #16
 8011a24:	46f2      	mov	sl, lr
 8011a26:	2100      	movs	r1, #0
 8011a28:	f859 3b04 	ldr.w	r3, [r9], #4
 8011a2c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8011a30:	fa1f f883 	uxth.w	r8, r3
 8011a34:	fa11 f18b 	uxtah	r1, r1, fp
 8011a38:	0c1b      	lsrs	r3, r3, #16
 8011a3a:	eba1 0808 	sub.w	r8, r1, r8
 8011a3e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8011a42:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8011a46:	fa1f f888 	uxth.w	r8, r8
 8011a4a:	1419      	asrs	r1, r3, #16
 8011a4c:	454e      	cmp	r6, r9
 8011a4e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8011a52:	f84a 3b04 	str.w	r3, [sl], #4
 8011a56:	d8e7      	bhi.n	8011a28 <__mdiff+0x80>
 8011a58:	1b33      	subs	r3, r6, r4
 8011a5a:	3b15      	subs	r3, #21
 8011a5c:	f023 0303 	bic.w	r3, r3, #3
 8011a60:	3304      	adds	r3, #4
 8011a62:	3415      	adds	r4, #21
 8011a64:	42a6      	cmp	r6, r4
 8011a66:	bf38      	it	cc
 8011a68:	2304      	movcc	r3, #4
 8011a6a:	441d      	add	r5, r3
 8011a6c:	4473      	add	r3, lr
 8011a6e:	469e      	mov	lr, r3
 8011a70:	462e      	mov	r6, r5
 8011a72:	4566      	cmp	r6, ip
 8011a74:	d30e      	bcc.n	8011a94 <__mdiff+0xec>
 8011a76:	f10c 0203 	add.w	r2, ip, #3
 8011a7a:	1b52      	subs	r2, r2, r5
 8011a7c:	f022 0203 	bic.w	r2, r2, #3
 8011a80:	3d03      	subs	r5, #3
 8011a82:	45ac      	cmp	ip, r5
 8011a84:	bf38      	it	cc
 8011a86:	2200      	movcc	r2, #0
 8011a88:	441a      	add	r2, r3
 8011a8a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8011a8e:	b17b      	cbz	r3, 8011ab0 <__mdiff+0x108>
 8011a90:	6107      	str	r7, [r0, #16]
 8011a92:	e7a3      	b.n	80119dc <__mdiff+0x34>
 8011a94:	f856 8b04 	ldr.w	r8, [r6], #4
 8011a98:	fa11 f288 	uxtah	r2, r1, r8
 8011a9c:	1414      	asrs	r4, r2, #16
 8011a9e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8011aa2:	b292      	uxth	r2, r2
 8011aa4:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8011aa8:	f84e 2b04 	str.w	r2, [lr], #4
 8011aac:	1421      	asrs	r1, r4, #16
 8011aae:	e7e0      	b.n	8011a72 <__mdiff+0xca>
 8011ab0:	3f01      	subs	r7, #1
 8011ab2:	e7ea      	b.n	8011a8a <__mdiff+0xe2>
 8011ab4:	08012b67 	.word	0x08012b67
 8011ab8:	08012bd8 	.word	0x08012bd8

08011abc <__d2b>:
 8011abc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8011ac0:	4689      	mov	r9, r1
 8011ac2:	2101      	movs	r1, #1
 8011ac4:	ec57 6b10 	vmov	r6, r7, d0
 8011ac8:	4690      	mov	r8, r2
 8011aca:	f7ff fccf 	bl	801146c <_Balloc>
 8011ace:	4604      	mov	r4, r0
 8011ad0:	b930      	cbnz	r0, 8011ae0 <__d2b+0x24>
 8011ad2:	4602      	mov	r2, r0
 8011ad4:	4b25      	ldr	r3, [pc, #148]	; (8011b6c <__d2b+0xb0>)
 8011ad6:	4826      	ldr	r0, [pc, #152]	; (8011b70 <__d2b+0xb4>)
 8011ad8:	f240 310a 	movw	r1, #778	; 0x30a
 8011adc:	f000 fa10 	bl	8011f00 <__assert_func>
 8011ae0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8011ae4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8011ae8:	bb35      	cbnz	r5, 8011b38 <__d2b+0x7c>
 8011aea:	2e00      	cmp	r6, #0
 8011aec:	9301      	str	r3, [sp, #4]
 8011aee:	d028      	beq.n	8011b42 <__d2b+0x86>
 8011af0:	4668      	mov	r0, sp
 8011af2:	9600      	str	r6, [sp, #0]
 8011af4:	f7ff fd82 	bl	80115fc <__lo0bits>
 8011af8:	9900      	ldr	r1, [sp, #0]
 8011afa:	b300      	cbz	r0, 8011b3e <__d2b+0x82>
 8011afc:	9a01      	ldr	r2, [sp, #4]
 8011afe:	f1c0 0320 	rsb	r3, r0, #32
 8011b02:	fa02 f303 	lsl.w	r3, r2, r3
 8011b06:	430b      	orrs	r3, r1
 8011b08:	40c2      	lsrs	r2, r0
 8011b0a:	6163      	str	r3, [r4, #20]
 8011b0c:	9201      	str	r2, [sp, #4]
 8011b0e:	9b01      	ldr	r3, [sp, #4]
 8011b10:	61a3      	str	r3, [r4, #24]
 8011b12:	2b00      	cmp	r3, #0
 8011b14:	bf14      	ite	ne
 8011b16:	2202      	movne	r2, #2
 8011b18:	2201      	moveq	r2, #1
 8011b1a:	6122      	str	r2, [r4, #16]
 8011b1c:	b1d5      	cbz	r5, 8011b54 <__d2b+0x98>
 8011b1e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8011b22:	4405      	add	r5, r0
 8011b24:	f8c9 5000 	str.w	r5, [r9]
 8011b28:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8011b2c:	f8c8 0000 	str.w	r0, [r8]
 8011b30:	4620      	mov	r0, r4
 8011b32:	b003      	add	sp, #12
 8011b34:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011b38:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8011b3c:	e7d5      	b.n	8011aea <__d2b+0x2e>
 8011b3e:	6161      	str	r1, [r4, #20]
 8011b40:	e7e5      	b.n	8011b0e <__d2b+0x52>
 8011b42:	a801      	add	r0, sp, #4
 8011b44:	f7ff fd5a 	bl	80115fc <__lo0bits>
 8011b48:	9b01      	ldr	r3, [sp, #4]
 8011b4a:	6163      	str	r3, [r4, #20]
 8011b4c:	2201      	movs	r2, #1
 8011b4e:	6122      	str	r2, [r4, #16]
 8011b50:	3020      	adds	r0, #32
 8011b52:	e7e3      	b.n	8011b1c <__d2b+0x60>
 8011b54:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8011b58:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8011b5c:	f8c9 0000 	str.w	r0, [r9]
 8011b60:	6918      	ldr	r0, [r3, #16]
 8011b62:	f7ff fd2b 	bl	80115bc <__hi0bits>
 8011b66:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8011b6a:	e7df      	b.n	8011b2c <__d2b+0x70>
 8011b6c:	08012b67 	.word	0x08012b67
 8011b70:	08012bd8 	.word	0x08012bd8

08011b74 <_calloc_r>:
 8011b74:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011b76:	fba1 2402 	umull	r2, r4, r1, r2
 8011b7a:	b94c      	cbnz	r4, 8011b90 <_calloc_r+0x1c>
 8011b7c:	4611      	mov	r1, r2
 8011b7e:	9201      	str	r2, [sp, #4]
 8011b80:	f7fd fd8e 	bl	800f6a0 <_malloc_r>
 8011b84:	9a01      	ldr	r2, [sp, #4]
 8011b86:	4605      	mov	r5, r0
 8011b88:	b930      	cbnz	r0, 8011b98 <_calloc_r+0x24>
 8011b8a:	4628      	mov	r0, r5
 8011b8c:	b003      	add	sp, #12
 8011b8e:	bd30      	pop	{r4, r5, pc}
 8011b90:	220c      	movs	r2, #12
 8011b92:	6002      	str	r2, [r0, #0]
 8011b94:	2500      	movs	r5, #0
 8011b96:	e7f8      	b.n	8011b8a <_calloc_r+0x16>
 8011b98:	4621      	mov	r1, r4
 8011b9a:	f7fd fd0d 	bl	800f5b8 <memset>
 8011b9e:	e7f4      	b.n	8011b8a <_calloc_r+0x16>

08011ba0 <__sfputc_r>:
 8011ba0:	6893      	ldr	r3, [r2, #8]
 8011ba2:	3b01      	subs	r3, #1
 8011ba4:	2b00      	cmp	r3, #0
 8011ba6:	b410      	push	{r4}
 8011ba8:	6093      	str	r3, [r2, #8]
 8011baa:	da08      	bge.n	8011bbe <__sfputc_r+0x1e>
 8011bac:	6994      	ldr	r4, [r2, #24]
 8011bae:	42a3      	cmp	r3, r4
 8011bb0:	db01      	blt.n	8011bb6 <__sfputc_r+0x16>
 8011bb2:	290a      	cmp	r1, #10
 8011bb4:	d103      	bne.n	8011bbe <__sfputc_r+0x1e>
 8011bb6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011bba:	f7fe baed 	b.w	8010198 <__swbuf_r>
 8011bbe:	6813      	ldr	r3, [r2, #0]
 8011bc0:	1c58      	adds	r0, r3, #1
 8011bc2:	6010      	str	r0, [r2, #0]
 8011bc4:	7019      	strb	r1, [r3, #0]
 8011bc6:	4608      	mov	r0, r1
 8011bc8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011bcc:	4770      	bx	lr

08011bce <__sfputs_r>:
 8011bce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011bd0:	4606      	mov	r6, r0
 8011bd2:	460f      	mov	r7, r1
 8011bd4:	4614      	mov	r4, r2
 8011bd6:	18d5      	adds	r5, r2, r3
 8011bd8:	42ac      	cmp	r4, r5
 8011bda:	d101      	bne.n	8011be0 <__sfputs_r+0x12>
 8011bdc:	2000      	movs	r0, #0
 8011bde:	e007      	b.n	8011bf0 <__sfputs_r+0x22>
 8011be0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011be4:	463a      	mov	r2, r7
 8011be6:	4630      	mov	r0, r6
 8011be8:	f7ff ffda 	bl	8011ba0 <__sfputc_r>
 8011bec:	1c43      	adds	r3, r0, #1
 8011bee:	d1f3      	bne.n	8011bd8 <__sfputs_r+0xa>
 8011bf0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08011bf4 <_vfiprintf_r>:
 8011bf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011bf8:	460d      	mov	r5, r1
 8011bfa:	b09d      	sub	sp, #116	; 0x74
 8011bfc:	4614      	mov	r4, r2
 8011bfe:	4698      	mov	r8, r3
 8011c00:	4606      	mov	r6, r0
 8011c02:	b118      	cbz	r0, 8011c0c <_vfiprintf_r+0x18>
 8011c04:	6983      	ldr	r3, [r0, #24]
 8011c06:	b90b      	cbnz	r3, 8011c0c <_vfiprintf_r+0x18>
 8011c08:	f7ff fb1a 	bl	8011240 <__sinit>
 8011c0c:	4b89      	ldr	r3, [pc, #548]	; (8011e34 <_vfiprintf_r+0x240>)
 8011c0e:	429d      	cmp	r5, r3
 8011c10:	d11b      	bne.n	8011c4a <_vfiprintf_r+0x56>
 8011c12:	6875      	ldr	r5, [r6, #4]
 8011c14:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011c16:	07d9      	lsls	r1, r3, #31
 8011c18:	d405      	bmi.n	8011c26 <_vfiprintf_r+0x32>
 8011c1a:	89ab      	ldrh	r3, [r5, #12]
 8011c1c:	059a      	lsls	r2, r3, #22
 8011c1e:	d402      	bmi.n	8011c26 <_vfiprintf_r+0x32>
 8011c20:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011c22:	f7ff fbb0 	bl	8011386 <__retarget_lock_acquire_recursive>
 8011c26:	89ab      	ldrh	r3, [r5, #12]
 8011c28:	071b      	lsls	r3, r3, #28
 8011c2a:	d501      	bpl.n	8011c30 <_vfiprintf_r+0x3c>
 8011c2c:	692b      	ldr	r3, [r5, #16]
 8011c2e:	b9eb      	cbnz	r3, 8011c6c <_vfiprintf_r+0x78>
 8011c30:	4629      	mov	r1, r5
 8011c32:	4630      	mov	r0, r6
 8011c34:	f7fe fb02 	bl	801023c <__swsetup_r>
 8011c38:	b1c0      	cbz	r0, 8011c6c <_vfiprintf_r+0x78>
 8011c3a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011c3c:	07dc      	lsls	r4, r3, #31
 8011c3e:	d50e      	bpl.n	8011c5e <_vfiprintf_r+0x6a>
 8011c40:	f04f 30ff 	mov.w	r0, #4294967295
 8011c44:	b01d      	add	sp, #116	; 0x74
 8011c46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011c4a:	4b7b      	ldr	r3, [pc, #492]	; (8011e38 <_vfiprintf_r+0x244>)
 8011c4c:	429d      	cmp	r5, r3
 8011c4e:	d101      	bne.n	8011c54 <_vfiprintf_r+0x60>
 8011c50:	68b5      	ldr	r5, [r6, #8]
 8011c52:	e7df      	b.n	8011c14 <_vfiprintf_r+0x20>
 8011c54:	4b79      	ldr	r3, [pc, #484]	; (8011e3c <_vfiprintf_r+0x248>)
 8011c56:	429d      	cmp	r5, r3
 8011c58:	bf08      	it	eq
 8011c5a:	68f5      	ldreq	r5, [r6, #12]
 8011c5c:	e7da      	b.n	8011c14 <_vfiprintf_r+0x20>
 8011c5e:	89ab      	ldrh	r3, [r5, #12]
 8011c60:	0598      	lsls	r0, r3, #22
 8011c62:	d4ed      	bmi.n	8011c40 <_vfiprintf_r+0x4c>
 8011c64:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011c66:	f7ff fb8f 	bl	8011388 <__retarget_lock_release_recursive>
 8011c6a:	e7e9      	b.n	8011c40 <_vfiprintf_r+0x4c>
 8011c6c:	2300      	movs	r3, #0
 8011c6e:	9309      	str	r3, [sp, #36]	; 0x24
 8011c70:	2320      	movs	r3, #32
 8011c72:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011c76:	f8cd 800c 	str.w	r8, [sp, #12]
 8011c7a:	2330      	movs	r3, #48	; 0x30
 8011c7c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8011e40 <_vfiprintf_r+0x24c>
 8011c80:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011c84:	f04f 0901 	mov.w	r9, #1
 8011c88:	4623      	mov	r3, r4
 8011c8a:	469a      	mov	sl, r3
 8011c8c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011c90:	b10a      	cbz	r2, 8011c96 <_vfiprintf_r+0xa2>
 8011c92:	2a25      	cmp	r2, #37	; 0x25
 8011c94:	d1f9      	bne.n	8011c8a <_vfiprintf_r+0x96>
 8011c96:	ebba 0b04 	subs.w	fp, sl, r4
 8011c9a:	d00b      	beq.n	8011cb4 <_vfiprintf_r+0xc0>
 8011c9c:	465b      	mov	r3, fp
 8011c9e:	4622      	mov	r2, r4
 8011ca0:	4629      	mov	r1, r5
 8011ca2:	4630      	mov	r0, r6
 8011ca4:	f7ff ff93 	bl	8011bce <__sfputs_r>
 8011ca8:	3001      	adds	r0, #1
 8011caa:	f000 80aa 	beq.w	8011e02 <_vfiprintf_r+0x20e>
 8011cae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011cb0:	445a      	add	r2, fp
 8011cb2:	9209      	str	r2, [sp, #36]	; 0x24
 8011cb4:	f89a 3000 	ldrb.w	r3, [sl]
 8011cb8:	2b00      	cmp	r3, #0
 8011cba:	f000 80a2 	beq.w	8011e02 <_vfiprintf_r+0x20e>
 8011cbe:	2300      	movs	r3, #0
 8011cc0:	f04f 32ff 	mov.w	r2, #4294967295
 8011cc4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011cc8:	f10a 0a01 	add.w	sl, sl, #1
 8011ccc:	9304      	str	r3, [sp, #16]
 8011cce:	9307      	str	r3, [sp, #28]
 8011cd0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011cd4:	931a      	str	r3, [sp, #104]	; 0x68
 8011cd6:	4654      	mov	r4, sl
 8011cd8:	2205      	movs	r2, #5
 8011cda:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011cde:	4858      	ldr	r0, [pc, #352]	; (8011e40 <_vfiprintf_r+0x24c>)
 8011ce0:	f7ee fa86 	bl	80001f0 <memchr>
 8011ce4:	9a04      	ldr	r2, [sp, #16]
 8011ce6:	b9d8      	cbnz	r0, 8011d20 <_vfiprintf_r+0x12c>
 8011ce8:	06d1      	lsls	r1, r2, #27
 8011cea:	bf44      	itt	mi
 8011cec:	2320      	movmi	r3, #32
 8011cee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011cf2:	0713      	lsls	r3, r2, #28
 8011cf4:	bf44      	itt	mi
 8011cf6:	232b      	movmi	r3, #43	; 0x2b
 8011cf8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011cfc:	f89a 3000 	ldrb.w	r3, [sl]
 8011d00:	2b2a      	cmp	r3, #42	; 0x2a
 8011d02:	d015      	beq.n	8011d30 <_vfiprintf_r+0x13c>
 8011d04:	9a07      	ldr	r2, [sp, #28]
 8011d06:	4654      	mov	r4, sl
 8011d08:	2000      	movs	r0, #0
 8011d0a:	f04f 0c0a 	mov.w	ip, #10
 8011d0e:	4621      	mov	r1, r4
 8011d10:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011d14:	3b30      	subs	r3, #48	; 0x30
 8011d16:	2b09      	cmp	r3, #9
 8011d18:	d94e      	bls.n	8011db8 <_vfiprintf_r+0x1c4>
 8011d1a:	b1b0      	cbz	r0, 8011d4a <_vfiprintf_r+0x156>
 8011d1c:	9207      	str	r2, [sp, #28]
 8011d1e:	e014      	b.n	8011d4a <_vfiprintf_r+0x156>
 8011d20:	eba0 0308 	sub.w	r3, r0, r8
 8011d24:	fa09 f303 	lsl.w	r3, r9, r3
 8011d28:	4313      	orrs	r3, r2
 8011d2a:	9304      	str	r3, [sp, #16]
 8011d2c:	46a2      	mov	sl, r4
 8011d2e:	e7d2      	b.n	8011cd6 <_vfiprintf_r+0xe2>
 8011d30:	9b03      	ldr	r3, [sp, #12]
 8011d32:	1d19      	adds	r1, r3, #4
 8011d34:	681b      	ldr	r3, [r3, #0]
 8011d36:	9103      	str	r1, [sp, #12]
 8011d38:	2b00      	cmp	r3, #0
 8011d3a:	bfbb      	ittet	lt
 8011d3c:	425b      	neglt	r3, r3
 8011d3e:	f042 0202 	orrlt.w	r2, r2, #2
 8011d42:	9307      	strge	r3, [sp, #28]
 8011d44:	9307      	strlt	r3, [sp, #28]
 8011d46:	bfb8      	it	lt
 8011d48:	9204      	strlt	r2, [sp, #16]
 8011d4a:	7823      	ldrb	r3, [r4, #0]
 8011d4c:	2b2e      	cmp	r3, #46	; 0x2e
 8011d4e:	d10c      	bne.n	8011d6a <_vfiprintf_r+0x176>
 8011d50:	7863      	ldrb	r3, [r4, #1]
 8011d52:	2b2a      	cmp	r3, #42	; 0x2a
 8011d54:	d135      	bne.n	8011dc2 <_vfiprintf_r+0x1ce>
 8011d56:	9b03      	ldr	r3, [sp, #12]
 8011d58:	1d1a      	adds	r2, r3, #4
 8011d5a:	681b      	ldr	r3, [r3, #0]
 8011d5c:	9203      	str	r2, [sp, #12]
 8011d5e:	2b00      	cmp	r3, #0
 8011d60:	bfb8      	it	lt
 8011d62:	f04f 33ff 	movlt.w	r3, #4294967295
 8011d66:	3402      	adds	r4, #2
 8011d68:	9305      	str	r3, [sp, #20]
 8011d6a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8011e50 <_vfiprintf_r+0x25c>
 8011d6e:	7821      	ldrb	r1, [r4, #0]
 8011d70:	2203      	movs	r2, #3
 8011d72:	4650      	mov	r0, sl
 8011d74:	f7ee fa3c 	bl	80001f0 <memchr>
 8011d78:	b140      	cbz	r0, 8011d8c <_vfiprintf_r+0x198>
 8011d7a:	2340      	movs	r3, #64	; 0x40
 8011d7c:	eba0 000a 	sub.w	r0, r0, sl
 8011d80:	fa03 f000 	lsl.w	r0, r3, r0
 8011d84:	9b04      	ldr	r3, [sp, #16]
 8011d86:	4303      	orrs	r3, r0
 8011d88:	3401      	adds	r4, #1
 8011d8a:	9304      	str	r3, [sp, #16]
 8011d8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011d90:	482c      	ldr	r0, [pc, #176]	; (8011e44 <_vfiprintf_r+0x250>)
 8011d92:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011d96:	2206      	movs	r2, #6
 8011d98:	f7ee fa2a 	bl	80001f0 <memchr>
 8011d9c:	2800      	cmp	r0, #0
 8011d9e:	d03f      	beq.n	8011e20 <_vfiprintf_r+0x22c>
 8011da0:	4b29      	ldr	r3, [pc, #164]	; (8011e48 <_vfiprintf_r+0x254>)
 8011da2:	bb1b      	cbnz	r3, 8011dec <_vfiprintf_r+0x1f8>
 8011da4:	9b03      	ldr	r3, [sp, #12]
 8011da6:	3307      	adds	r3, #7
 8011da8:	f023 0307 	bic.w	r3, r3, #7
 8011dac:	3308      	adds	r3, #8
 8011dae:	9303      	str	r3, [sp, #12]
 8011db0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011db2:	443b      	add	r3, r7
 8011db4:	9309      	str	r3, [sp, #36]	; 0x24
 8011db6:	e767      	b.n	8011c88 <_vfiprintf_r+0x94>
 8011db8:	fb0c 3202 	mla	r2, ip, r2, r3
 8011dbc:	460c      	mov	r4, r1
 8011dbe:	2001      	movs	r0, #1
 8011dc0:	e7a5      	b.n	8011d0e <_vfiprintf_r+0x11a>
 8011dc2:	2300      	movs	r3, #0
 8011dc4:	3401      	adds	r4, #1
 8011dc6:	9305      	str	r3, [sp, #20]
 8011dc8:	4619      	mov	r1, r3
 8011dca:	f04f 0c0a 	mov.w	ip, #10
 8011dce:	4620      	mov	r0, r4
 8011dd0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011dd4:	3a30      	subs	r2, #48	; 0x30
 8011dd6:	2a09      	cmp	r2, #9
 8011dd8:	d903      	bls.n	8011de2 <_vfiprintf_r+0x1ee>
 8011dda:	2b00      	cmp	r3, #0
 8011ddc:	d0c5      	beq.n	8011d6a <_vfiprintf_r+0x176>
 8011dde:	9105      	str	r1, [sp, #20]
 8011de0:	e7c3      	b.n	8011d6a <_vfiprintf_r+0x176>
 8011de2:	fb0c 2101 	mla	r1, ip, r1, r2
 8011de6:	4604      	mov	r4, r0
 8011de8:	2301      	movs	r3, #1
 8011dea:	e7f0      	b.n	8011dce <_vfiprintf_r+0x1da>
 8011dec:	ab03      	add	r3, sp, #12
 8011dee:	9300      	str	r3, [sp, #0]
 8011df0:	462a      	mov	r2, r5
 8011df2:	4b16      	ldr	r3, [pc, #88]	; (8011e4c <_vfiprintf_r+0x258>)
 8011df4:	a904      	add	r1, sp, #16
 8011df6:	4630      	mov	r0, r6
 8011df8:	f7fd fd66 	bl	800f8c8 <_printf_float>
 8011dfc:	4607      	mov	r7, r0
 8011dfe:	1c78      	adds	r0, r7, #1
 8011e00:	d1d6      	bne.n	8011db0 <_vfiprintf_r+0x1bc>
 8011e02:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011e04:	07d9      	lsls	r1, r3, #31
 8011e06:	d405      	bmi.n	8011e14 <_vfiprintf_r+0x220>
 8011e08:	89ab      	ldrh	r3, [r5, #12]
 8011e0a:	059a      	lsls	r2, r3, #22
 8011e0c:	d402      	bmi.n	8011e14 <_vfiprintf_r+0x220>
 8011e0e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011e10:	f7ff faba 	bl	8011388 <__retarget_lock_release_recursive>
 8011e14:	89ab      	ldrh	r3, [r5, #12]
 8011e16:	065b      	lsls	r3, r3, #25
 8011e18:	f53f af12 	bmi.w	8011c40 <_vfiprintf_r+0x4c>
 8011e1c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011e1e:	e711      	b.n	8011c44 <_vfiprintf_r+0x50>
 8011e20:	ab03      	add	r3, sp, #12
 8011e22:	9300      	str	r3, [sp, #0]
 8011e24:	462a      	mov	r2, r5
 8011e26:	4b09      	ldr	r3, [pc, #36]	; (8011e4c <_vfiprintf_r+0x258>)
 8011e28:	a904      	add	r1, sp, #16
 8011e2a:	4630      	mov	r0, r6
 8011e2c:	f7fd fff0 	bl	800fe10 <_printf_i>
 8011e30:	e7e4      	b.n	8011dfc <_vfiprintf_r+0x208>
 8011e32:	bf00      	nop
 8011e34:	08012b98 	.word	0x08012b98
 8011e38:	08012bb8 	.word	0x08012bb8
 8011e3c:	08012b78 	.word	0x08012b78
 8011e40:	08012d34 	.word	0x08012d34
 8011e44:	08012d3e 	.word	0x08012d3e
 8011e48:	0800f8c9 	.word	0x0800f8c9
 8011e4c:	08011bcf 	.word	0x08011bcf
 8011e50:	08012d3a 	.word	0x08012d3a

08011e54 <__sread>:
 8011e54:	b510      	push	{r4, lr}
 8011e56:	460c      	mov	r4, r1
 8011e58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011e5c:	f000 f8d6 	bl	801200c <_read_r>
 8011e60:	2800      	cmp	r0, #0
 8011e62:	bfab      	itete	ge
 8011e64:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8011e66:	89a3      	ldrhlt	r3, [r4, #12]
 8011e68:	181b      	addge	r3, r3, r0
 8011e6a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8011e6e:	bfac      	ite	ge
 8011e70:	6563      	strge	r3, [r4, #84]	; 0x54
 8011e72:	81a3      	strhlt	r3, [r4, #12]
 8011e74:	bd10      	pop	{r4, pc}

08011e76 <__swrite>:
 8011e76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011e7a:	461f      	mov	r7, r3
 8011e7c:	898b      	ldrh	r3, [r1, #12]
 8011e7e:	05db      	lsls	r3, r3, #23
 8011e80:	4605      	mov	r5, r0
 8011e82:	460c      	mov	r4, r1
 8011e84:	4616      	mov	r6, r2
 8011e86:	d505      	bpl.n	8011e94 <__swrite+0x1e>
 8011e88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011e8c:	2302      	movs	r3, #2
 8011e8e:	2200      	movs	r2, #0
 8011e90:	f000 f898 	bl	8011fc4 <_lseek_r>
 8011e94:	89a3      	ldrh	r3, [r4, #12]
 8011e96:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011e9a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8011e9e:	81a3      	strh	r3, [r4, #12]
 8011ea0:	4632      	mov	r2, r6
 8011ea2:	463b      	mov	r3, r7
 8011ea4:	4628      	mov	r0, r5
 8011ea6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011eaa:	f000 b817 	b.w	8011edc <_write_r>

08011eae <__sseek>:
 8011eae:	b510      	push	{r4, lr}
 8011eb0:	460c      	mov	r4, r1
 8011eb2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011eb6:	f000 f885 	bl	8011fc4 <_lseek_r>
 8011eba:	1c43      	adds	r3, r0, #1
 8011ebc:	89a3      	ldrh	r3, [r4, #12]
 8011ebe:	bf15      	itete	ne
 8011ec0:	6560      	strne	r0, [r4, #84]	; 0x54
 8011ec2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8011ec6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8011eca:	81a3      	strheq	r3, [r4, #12]
 8011ecc:	bf18      	it	ne
 8011ece:	81a3      	strhne	r3, [r4, #12]
 8011ed0:	bd10      	pop	{r4, pc}

08011ed2 <__sclose>:
 8011ed2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011ed6:	f000 b831 	b.w	8011f3c <_close_r>
	...

08011edc <_write_r>:
 8011edc:	b538      	push	{r3, r4, r5, lr}
 8011ede:	4d07      	ldr	r5, [pc, #28]	; (8011efc <_write_r+0x20>)
 8011ee0:	4604      	mov	r4, r0
 8011ee2:	4608      	mov	r0, r1
 8011ee4:	4611      	mov	r1, r2
 8011ee6:	2200      	movs	r2, #0
 8011ee8:	602a      	str	r2, [r5, #0]
 8011eea:	461a      	mov	r2, r3
 8011eec:	f7f3 fb81 	bl	80055f2 <_write>
 8011ef0:	1c43      	adds	r3, r0, #1
 8011ef2:	d102      	bne.n	8011efa <_write_r+0x1e>
 8011ef4:	682b      	ldr	r3, [r5, #0]
 8011ef6:	b103      	cbz	r3, 8011efa <_write_r+0x1e>
 8011ef8:	6023      	str	r3, [r4, #0]
 8011efa:	bd38      	pop	{r3, r4, r5, pc}
 8011efc:	20021fd8 	.word	0x20021fd8

08011f00 <__assert_func>:
 8011f00:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011f02:	4614      	mov	r4, r2
 8011f04:	461a      	mov	r2, r3
 8011f06:	4b09      	ldr	r3, [pc, #36]	; (8011f2c <__assert_func+0x2c>)
 8011f08:	681b      	ldr	r3, [r3, #0]
 8011f0a:	4605      	mov	r5, r0
 8011f0c:	68d8      	ldr	r0, [r3, #12]
 8011f0e:	b14c      	cbz	r4, 8011f24 <__assert_func+0x24>
 8011f10:	4b07      	ldr	r3, [pc, #28]	; (8011f30 <__assert_func+0x30>)
 8011f12:	9100      	str	r1, [sp, #0]
 8011f14:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8011f18:	4906      	ldr	r1, [pc, #24]	; (8011f34 <__assert_func+0x34>)
 8011f1a:	462b      	mov	r3, r5
 8011f1c:	f000 f81e 	bl	8011f5c <fiprintf>
 8011f20:	f000 f893 	bl	801204a <abort>
 8011f24:	4b04      	ldr	r3, [pc, #16]	; (8011f38 <__assert_func+0x38>)
 8011f26:	461c      	mov	r4, r3
 8011f28:	e7f3      	b.n	8011f12 <__assert_func+0x12>
 8011f2a:	bf00      	nop
 8011f2c:	20000038 	.word	0x20000038
 8011f30:	08012d45 	.word	0x08012d45
 8011f34:	08012d52 	.word	0x08012d52
 8011f38:	08012d80 	.word	0x08012d80

08011f3c <_close_r>:
 8011f3c:	b538      	push	{r3, r4, r5, lr}
 8011f3e:	4d06      	ldr	r5, [pc, #24]	; (8011f58 <_close_r+0x1c>)
 8011f40:	2300      	movs	r3, #0
 8011f42:	4604      	mov	r4, r0
 8011f44:	4608      	mov	r0, r1
 8011f46:	602b      	str	r3, [r5, #0]
 8011f48:	f7f3 fb6f 	bl	800562a <_close>
 8011f4c:	1c43      	adds	r3, r0, #1
 8011f4e:	d102      	bne.n	8011f56 <_close_r+0x1a>
 8011f50:	682b      	ldr	r3, [r5, #0]
 8011f52:	b103      	cbz	r3, 8011f56 <_close_r+0x1a>
 8011f54:	6023      	str	r3, [r4, #0]
 8011f56:	bd38      	pop	{r3, r4, r5, pc}
 8011f58:	20021fd8 	.word	0x20021fd8

08011f5c <fiprintf>:
 8011f5c:	b40e      	push	{r1, r2, r3}
 8011f5e:	b503      	push	{r0, r1, lr}
 8011f60:	4601      	mov	r1, r0
 8011f62:	ab03      	add	r3, sp, #12
 8011f64:	4805      	ldr	r0, [pc, #20]	; (8011f7c <fiprintf+0x20>)
 8011f66:	f853 2b04 	ldr.w	r2, [r3], #4
 8011f6a:	6800      	ldr	r0, [r0, #0]
 8011f6c:	9301      	str	r3, [sp, #4]
 8011f6e:	f7ff fe41 	bl	8011bf4 <_vfiprintf_r>
 8011f72:	b002      	add	sp, #8
 8011f74:	f85d eb04 	ldr.w	lr, [sp], #4
 8011f78:	b003      	add	sp, #12
 8011f7a:	4770      	bx	lr
 8011f7c:	20000038 	.word	0x20000038

08011f80 <_fstat_r>:
 8011f80:	b538      	push	{r3, r4, r5, lr}
 8011f82:	4d07      	ldr	r5, [pc, #28]	; (8011fa0 <_fstat_r+0x20>)
 8011f84:	2300      	movs	r3, #0
 8011f86:	4604      	mov	r4, r0
 8011f88:	4608      	mov	r0, r1
 8011f8a:	4611      	mov	r1, r2
 8011f8c:	602b      	str	r3, [r5, #0]
 8011f8e:	f7f3 fb58 	bl	8005642 <_fstat>
 8011f92:	1c43      	adds	r3, r0, #1
 8011f94:	d102      	bne.n	8011f9c <_fstat_r+0x1c>
 8011f96:	682b      	ldr	r3, [r5, #0]
 8011f98:	b103      	cbz	r3, 8011f9c <_fstat_r+0x1c>
 8011f9a:	6023      	str	r3, [r4, #0]
 8011f9c:	bd38      	pop	{r3, r4, r5, pc}
 8011f9e:	bf00      	nop
 8011fa0:	20021fd8 	.word	0x20021fd8

08011fa4 <_isatty_r>:
 8011fa4:	b538      	push	{r3, r4, r5, lr}
 8011fa6:	4d06      	ldr	r5, [pc, #24]	; (8011fc0 <_isatty_r+0x1c>)
 8011fa8:	2300      	movs	r3, #0
 8011faa:	4604      	mov	r4, r0
 8011fac:	4608      	mov	r0, r1
 8011fae:	602b      	str	r3, [r5, #0]
 8011fb0:	f7f3 fb57 	bl	8005662 <_isatty>
 8011fb4:	1c43      	adds	r3, r0, #1
 8011fb6:	d102      	bne.n	8011fbe <_isatty_r+0x1a>
 8011fb8:	682b      	ldr	r3, [r5, #0]
 8011fba:	b103      	cbz	r3, 8011fbe <_isatty_r+0x1a>
 8011fbc:	6023      	str	r3, [r4, #0]
 8011fbe:	bd38      	pop	{r3, r4, r5, pc}
 8011fc0:	20021fd8 	.word	0x20021fd8

08011fc4 <_lseek_r>:
 8011fc4:	b538      	push	{r3, r4, r5, lr}
 8011fc6:	4d07      	ldr	r5, [pc, #28]	; (8011fe4 <_lseek_r+0x20>)
 8011fc8:	4604      	mov	r4, r0
 8011fca:	4608      	mov	r0, r1
 8011fcc:	4611      	mov	r1, r2
 8011fce:	2200      	movs	r2, #0
 8011fd0:	602a      	str	r2, [r5, #0]
 8011fd2:	461a      	mov	r2, r3
 8011fd4:	f7f3 fb50 	bl	8005678 <_lseek>
 8011fd8:	1c43      	adds	r3, r0, #1
 8011fda:	d102      	bne.n	8011fe2 <_lseek_r+0x1e>
 8011fdc:	682b      	ldr	r3, [r5, #0]
 8011fde:	b103      	cbz	r3, 8011fe2 <_lseek_r+0x1e>
 8011fe0:	6023      	str	r3, [r4, #0]
 8011fe2:	bd38      	pop	{r3, r4, r5, pc}
 8011fe4:	20021fd8 	.word	0x20021fd8

08011fe8 <__ascii_mbtowc>:
 8011fe8:	b082      	sub	sp, #8
 8011fea:	b901      	cbnz	r1, 8011fee <__ascii_mbtowc+0x6>
 8011fec:	a901      	add	r1, sp, #4
 8011fee:	b142      	cbz	r2, 8012002 <__ascii_mbtowc+0x1a>
 8011ff0:	b14b      	cbz	r3, 8012006 <__ascii_mbtowc+0x1e>
 8011ff2:	7813      	ldrb	r3, [r2, #0]
 8011ff4:	600b      	str	r3, [r1, #0]
 8011ff6:	7812      	ldrb	r2, [r2, #0]
 8011ff8:	1e10      	subs	r0, r2, #0
 8011ffa:	bf18      	it	ne
 8011ffc:	2001      	movne	r0, #1
 8011ffe:	b002      	add	sp, #8
 8012000:	4770      	bx	lr
 8012002:	4610      	mov	r0, r2
 8012004:	e7fb      	b.n	8011ffe <__ascii_mbtowc+0x16>
 8012006:	f06f 0001 	mvn.w	r0, #1
 801200a:	e7f8      	b.n	8011ffe <__ascii_mbtowc+0x16>

0801200c <_read_r>:
 801200c:	b538      	push	{r3, r4, r5, lr}
 801200e:	4d07      	ldr	r5, [pc, #28]	; (801202c <_read_r+0x20>)
 8012010:	4604      	mov	r4, r0
 8012012:	4608      	mov	r0, r1
 8012014:	4611      	mov	r1, r2
 8012016:	2200      	movs	r2, #0
 8012018:	602a      	str	r2, [r5, #0]
 801201a:	461a      	mov	r2, r3
 801201c:	f7f3 facc 	bl	80055b8 <_read>
 8012020:	1c43      	adds	r3, r0, #1
 8012022:	d102      	bne.n	801202a <_read_r+0x1e>
 8012024:	682b      	ldr	r3, [r5, #0]
 8012026:	b103      	cbz	r3, 801202a <_read_r+0x1e>
 8012028:	6023      	str	r3, [r4, #0]
 801202a:	bd38      	pop	{r3, r4, r5, pc}
 801202c:	20021fd8 	.word	0x20021fd8

08012030 <__ascii_wctomb>:
 8012030:	b149      	cbz	r1, 8012046 <__ascii_wctomb+0x16>
 8012032:	2aff      	cmp	r2, #255	; 0xff
 8012034:	bf85      	ittet	hi
 8012036:	238a      	movhi	r3, #138	; 0x8a
 8012038:	6003      	strhi	r3, [r0, #0]
 801203a:	700a      	strbls	r2, [r1, #0]
 801203c:	f04f 30ff 	movhi.w	r0, #4294967295
 8012040:	bf98      	it	ls
 8012042:	2001      	movls	r0, #1
 8012044:	4770      	bx	lr
 8012046:	4608      	mov	r0, r1
 8012048:	4770      	bx	lr

0801204a <abort>:
 801204a:	b508      	push	{r3, lr}
 801204c:	2006      	movs	r0, #6
 801204e:	f000 f82b 	bl	80120a8 <raise>
 8012052:	2001      	movs	r0, #1
 8012054:	f7f3 faa6 	bl	80055a4 <_exit>

08012058 <_raise_r>:
 8012058:	291f      	cmp	r1, #31
 801205a:	b538      	push	{r3, r4, r5, lr}
 801205c:	4604      	mov	r4, r0
 801205e:	460d      	mov	r5, r1
 8012060:	d904      	bls.n	801206c <_raise_r+0x14>
 8012062:	2316      	movs	r3, #22
 8012064:	6003      	str	r3, [r0, #0]
 8012066:	f04f 30ff 	mov.w	r0, #4294967295
 801206a:	bd38      	pop	{r3, r4, r5, pc}
 801206c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801206e:	b112      	cbz	r2, 8012076 <_raise_r+0x1e>
 8012070:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8012074:	b94b      	cbnz	r3, 801208a <_raise_r+0x32>
 8012076:	4620      	mov	r0, r4
 8012078:	f000 f830 	bl	80120dc <_getpid_r>
 801207c:	462a      	mov	r2, r5
 801207e:	4601      	mov	r1, r0
 8012080:	4620      	mov	r0, r4
 8012082:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012086:	f000 b817 	b.w	80120b8 <_kill_r>
 801208a:	2b01      	cmp	r3, #1
 801208c:	d00a      	beq.n	80120a4 <_raise_r+0x4c>
 801208e:	1c59      	adds	r1, r3, #1
 8012090:	d103      	bne.n	801209a <_raise_r+0x42>
 8012092:	2316      	movs	r3, #22
 8012094:	6003      	str	r3, [r0, #0]
 8012096:	2001      	movs	r0, #1
 8012098:	e7e7      	b.n	801206a <_raise_r+0x12>
 801209a:	2400      	movs	r4, #0
 801209c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80120a0:	4628      	mov	r0, r5
 80120a2:	4798      	blx	r3
 80120a4:	2000      	movs	r0, #0
 80120a6:	e7e0      	b.n	801206a <_raise_r+0x12>

080120a8 <raise>:
 80120a8:	4b02      	ldr	r3, [pc, #8]	; (80120b4 <raise+0xc>)
 80120aa:	4601      	mov	r1, r0
 80120ac:	6818      	ldr	r0, [r3, #0]
 80120ae:	f7ff bfd3 	b.w	8012058 <_raise_r>
 80120b2:	bf00      	nop
 80120b4:	20000038 	.word	0x20000038

080120b8 <_kill_r>:
 80120b8:	b538      	push	{r3, r4, r5, lr}
 80120ba:	4d07      	ldr	r5, [pc, #28]	; (80120d8 <_kill_r+0x20>)
 80120bc:	2300      	movs	r3, #0
 80120be:	4604      	mov	r4, r0
 80120c0:	4608      	mov	r0, r1
 80120c2:	4611      	mov	r1, r2
 80120c4:	602b      	str	r3, [r5, #0]
 80120c6:	f7f3 fa5d 	bl	8005584 <_kill>
 80120ca:	1c43      	adds	r3, r0, #1
 80120cc:	d102      	bne.n	80120d4 <_kill_r+0x1c>
 80120ce:	682b      	ldr	r3, [r5, #0]
 80120d0:	b103      	cbz	r3, 80120d4 <_kill_r+0x1c>
 80120d2:	6023      	str	r3, [r4, #0]
 80120d4:	bd38      	pop	{r3, r4, r5, pc}
 80120d6:	bf00      	nop
 80120d8:	20021fd8 	.word	0x20021fd8

080120dc <_getpid_r>:
 80120dc:	f7f3 ba4a 	b.w	8005574 <_getpid>

080120e0 <roundf>:
 80120e0:	ee10 0a10 	vmov	r0, s0
 80120e4:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 80120e8:	3a7f      	subs	r2, #127	; 0x7f
 80120ea:	2a16      	cmp	r2, #22
 80120ec:	dc15      	bgt.n	801211a <roundf+0x3a>
 80120ee:	2a00      	cmp	r2, #0
 80120f0:	da08      	bge.n	8012104 <roundf+0x24>
 80120f2:	3201      	adds	r2, #1
 80120f4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80120f8:	d101      	bne.n	80120fe <roundf+0x1e>
 80120fa:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 80120fe:	ee00 3a10 	vmov	s0, r3
 8012102:	4770      	bx	lr
 8012104:	4907      	ldr	r1, [pc, #28]	; (8012124 <roundf+0x44>)
 8012106:	4111      	asrs	r1, r2
 8012108:	4208      	tst	r0, r1
 801210a:	d0fa      	beq.n	8012102 <roundf+0x22>
 801210c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8012110:	4113      	asrs	r3, r2
 8012112:	4403      	add	r3, r0
 8012114:	ea23 0301 	bic.w	r3, r3, r1
 8012118:	e7f1      	b.n	80120fe <roundf+0x1e>
 801211a:	2a80      	cmp	r2, #128	; 0x80
 801211c:	d1f1      	bne.n	8012102 <roundf+0x22>
 801211e:	ee30 0a00 	vadd.f32	s0, s0, s0
 8012122:	4770      	bx	lr
 8012124:	007fffff 	.word	0x007fffff

08012128 <log>:
 8012128:	b538      	push	{r3, r4, r5, lr}
 801212a:	ed2d 8b02 	vpush	{d8}
 801212e:	ec55 4b10 	vmov	r4, r5, d0
 8012132:	f000 f839 	bl	80121a8 <__ieee754_log>
 8012136:	4622      	mov	r2, r4
 8012138:	462b      	mov	r3, r5
 801213a:	4620      	mov	r0, r4
 801213c:	4629      	mov	r1, r5
 801213e:	eeb0 8a40 	vmov.f32	s16, s0
 8012142:	eef0 8a60 	vmov.f32	s17, s1
 8012146:	f7ee fcf9 	bl	8000b3c <__aeabi_dcmpun>
 801214a:	b998      	cbnz	r0, 8012174 <log+0x4c>
 801214c:	2200      	movs	r2, #0
 801214e:	2300      	movs	r3, #0
 8012150:	4620      	mov	r0, r4
 8012152:	4629      	mov	r1, r5
 8012154:	f7ee fce8 	bl	8000b28 <__aeabi_dcmpgt>
 8012158:	b960      	cbnz	r0, 8012174 <log+0x4c>
 801215a:	2200      	movs	r2, #0
 801215c:	2300      	movs	r3, #0
 801215e:	4620      	mov	r0, r4
 8012160:	4629      	mov	r1, r5
 8012162:	f7ee fcb9 	bl	8000ad8 <__aeabi_dcmpeq>
 8012166:	b160      	cbz	r0, 8012182 <log+0x5a>
 8012168:	f7fd f9de 	bl	800f528 <__errno>
 801216c:	ed9f 8b0a 	vldr	d8, [pc, #40]	; 8012198 <log+0x70>
 8012170:	2322      	movs	r3, #34	; 0x22
 8012172:	6003      	str	r3, [r0, #0]
 8012174:	eeb0 0a48 	vmov.f32	s0, s16
 8012178:	eef0 0a68 	vmov.f32	s1, s17
 801217c:	ecbd 8b02 	vpop	{d8}
 8012180:	bd38      	pop	{r3, r4, r5, pc}
 8012182:	f7fd f9d1 	bl	800f528 <__errno>
 8012186:	ecbd 8b02 	vpop	{d8}
 801218a:	2321      	movs	r3, #33	; 0x21
 801218c:	6003      	str	r3, [r0, #0]
 801218e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012192:	4803      	ldr	r0, [pc, #12]	; (80121a0 <log+0x78>)
 8012194:	f000 b9c4 	b.w	8012520 <nan>
 8012198:	00000000 	.word	0x00000000
 801219c:	fff00000 	.word	0xfff00000
 80121a0:	08012d80 	.word	0x08012d80
 80121a4:	00000000 	.word	0x00000000

080121a8 <__ieee754_log>:
 80121a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80121ac:	ec51 0b10 	vmov	r0, r1, d0
 80121b0:	ed2d 8b04 	vpush	{d8-d9}
 80121b4:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80121b8:	b083      	sub	sp, #12
 80121ba:	460d      	mov	r5, r1
 80121bc:	da29      	bge.n	8012212 <__ieee754_log+0x6a>
 80121be:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80121c2:	4303      	orrs	r3, r0
 80121c4:	ee10 2a10 	vmov	r2, s0
 80121c8:	d10c      	bne.n	80121e4 <__ieee754_log+0x3c>
 80121ca:	49cf      	ldr	r1, [pc, #828]	; (8012508 <__ieee754_log+0x360>)
 80121cc:	2200      	movs	r2, #0
 80121ce:	2300      	movs	r3, #0
 80121d0:	2000      	movs	r0, #0
 80121d2:	f7ee fb43 	bl	800085c <__aeabi_ddiv>
 80121d6:	ec41 0b10 	vmov	d0, r0, r1
 80121da:	b003      	add	sp, #12
 80121dc:	ecbd 8b04 	vpop	{d8-d9}
 80121e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80121e4:	2900      	cmp	r1, #0
 80121e6:	da05      	bge.n	80121f4 <__ieee754_log+0x4c>
 80121e8:	460b      	mov	r3, r1
 80121ea:	f7ee f855 	bl	8000298 <__aeabi_dsub>
 80121ee:	2200      	movs	r2, #0
 80121f0:	2300      	movs	r3, #0
 80121f2:	e7ee      	b.n	80121d2 <__ieee754_log+0x2a>
 80121f4:	4bc5      	ldr	r3, [pc, #788]	; (801250c <__ieee754_log+0x364>)
 80121f6:	2200      	movs	r2, #0
 80121f8:	f7ee fa06 	bl	8000608 <__aeabi_dmul>
 80121fc:	f06f 0335 	mvn.w	r3, #53	; 0x35
 8012200:	460d      	mov	r5, r1
 8012202:	4ac3      	ldr	r2, [pc, #780]	; (8012510 <__ieee754_log+0x368>)
 8012204:	4295      	cmp	r5, r2
 8012206:	dd06      	ble.n	8012216 <__ieee754_log+0x6e>
 8012208:	4602      	mov	r2, r0
 801220a:	460b      	mov	r3, r1
 801220c:	f7ee f846 	bl	800029c <__adddf3>
 8012210:	e7e1      	b.n	80121d6 <__ieee754_log+0x2e>
 8012212:	2300      	movs	r3, #0
 8012214:	e7f5      	b.n	8012202 <__ieee754_log+0x5a>
 8012216:	152c      	asrs	r4, r5, #20
 8012218:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 801221c:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8012220:	441c      	add	r4, r3
 8012222:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 8012226:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 801222a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801222e:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 8012232:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 8012236:	ea42 0105 	orr.w	r1, r2, r5
 801223a:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 801223e:	2200      	movs	r2, #0
 8012240:	4bb4      	ldr	r3, [pc, #720]	; (8012514 <__ieee754_log+0x36c>)
 8012242:	f7ee f829 	bl	8000298 <__aeabi_dsub>
 8012246:	1cab      	adds	r3, r5, #2
 8012248:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801224c:	2b02      	cmp	r3, #2
 801224e:	4682      	mov	sl, r0
 8012250:	468b      	mov	fp, r1
 8012252:	f04f 0200 	mov.w	r2, #0
 8012256:	dc53      	bgt.n	8012300 <__ieee754_log+0x158>
 8012258:	2300      	movs	r3, #0
 801225a:	f7ee fc3d 	bl	8000ad8 <__aeabi_dcmpeq>
 801225e:	b1d0      	cbz	r0, 8012296 <__ieee754_log+0xee>
 8012260:	2c00      	cmp	r4, #0
 8012262:	f000 8122 	beq.w	80124aa <__ieee754_log+0x302>
 8012266:	4620      	mov	r0, r4
 8012268:	f7ee f964 	bl	8000534 <__aeabi_i2d>
 801226c:	a390      	add	r3, pc, #576	; (adr r3, 80124b0 <__ieee754_log+0x308>)
 801226e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012272:	4606      	mov	r6, r0
 8012274:	460f      	mov	r7, r1
 8012276:	f7ee f9c7 	bl	8000608 <__aeabi_dmul>
 801227a:	a38f      	add	r3, pc, #572	; (adr r3, 80124b8 <__ieee754_log+0x310>)
 801227c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012280:	4604      	mov	r4, r0
 8012282:	460d      	mov	r5, r1
 8012284:	4630      	mov	r0, r6
 8012286:	4639      	mov	r1, r7
 8012288:	f7ee f9be 	bl	8000608 <__aeabi_dmul>
 801228c:	4602      	mov	r2, r0
 801228e:	460b      	mov	r3, r1
 8012290:	4620      	mov	r0, r4
 8012292:	4629      	mov	r1, r5
 8012294:	e7ba      	b.n	801220c <__ieee754_log+0x64>
 8012296:	a38a      	add	r3, pc, #552	; (adr r3, 80124c0 <__ieee754_log+0x318>)
 8012298:	e9d3 2300 	ldrd	r2, r3, [r3]
 801229c:	4650      	mov	r0, sl
 801229e:	4659      	mov	r1, fp
 80122a0:	f7ee f9b2 	bl	8000608 <__aeabi_dmul>
 80122a4:	4602      	mov	r2, r0
 80122a6:	460b      	mov	r3, r1
 80122a8:	2000      	movs	r0, #0
 80122aa:	499b      	ldr	r1, [pc, #620]	; (8012518 <__ieee754_log+0x370>)
 80122ac:	f7ed fff4 	bl	8000298 <__aeabi_dsub>
 80122b0:	4652      	mov	r2, sl
 80122b2:	4606      	mov	r6, r0
 80122b4:	460f      	mov	r7, r1
 80122b6:	465b      	mov	r3, fp
 80122b8:	4650      	mov	r0, sl
 80122ba:	4659      	mov	r1, fp
 80122bc:	f7ee f9a4 	bl	8000608 <__aeabi_dmul>
 80122c0:	4602      	mov	r2, r0
 80122c2:	460b      	mov	r3, r1
 80122c4:	4630      	mov	r0, r6
 80122c6:	4639      	mov	r1, r7
 80122c8:	f7ee f99e 	bl	8000608 <__aeabi_dmul>
 80122cc:	4606      	mov	r6, r0
 80122ce:	460f      	mov	r7, r1
 80122d0:	b914      	cbnz	r4, 80122d8 <__ieee754_log+0x130>
 80122d2:	4632      	mov	r2, r6
 80122d4:	463b      	mov	r3, r7
 80122d6:	e0a2      	b.n	801241e <__ieee754_log+0x276>
 80122d8:	4620      	mov	r0, r4
 80122da:	f7ee f92b 	bl	8000534 <__aeabi_i2d>
 80122de:	a374      	add	r3, pc, #464	; (adr r3, 80124b0 <__ieee754_log+0x308>)
 80122e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80122e4:	4680      	mov	r8, r0
 80122e6:	4689      	mov	r9, r1
 80122e8:	f7ee f98e 	bl	8000608 <__aeabi_dmul>
 80122ec:	a372      	add	r3, pc, #456	; (adr r3, 80124b8 <__ieee754_log+0x310>)
 80122ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80122f2:	4604      	mov	r4, r0
 80122f4:	460d      	mov	r5, r1
 80122f6:	4640      	mov	r0, r8
 80122f8:	4649      	mov	r1, r9
 80122fa:	f7ee f985 	bl	8000608 <__aeabi_dmul>
 80122fe:	e0a7      	b.n	8012450 <__ieee754_log+0x2a8>
 8012300:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8012304:	f7ed ffca 	bl	800029c <__adddf3>
 8012308:	4602      	mov	r2, r0
 801230a:	460b      	mov	r3, r1
 801230c:	4650      	mov	r0, sl
 801230e:	4659      	mov	r1, fp
 8012310:	f7ee faa4 	bl	800085c <__aeabi_ddiv>
 8012314:	ec41 0b18 	vmov	d8, r0, r1
 8012318:	4620      	mov	r0, r4
 801231a:	f7ee f90b 	bl	8000534 <__aeabi_i2d>
 801231e:	ec53 2b18 	vmov	r2, r3, d8
 8012322:	ec41 0b19 	vmov	d9, r0, r1
 8012326:	ec51 0b18 	vmov	r0, r1, d8
 801232a:	f7ee f96d 	bl	8000608 <__aeabi_dmul>
 801232e:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 8012332:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 8012336:	9301      	str	r3, [sp, #4]
 8012338:	4602      	mov	r2, r0
 801233a:	460b      	mov	r3, r1
 801233c:	4680      	mov	r8, r0
 801233e:	4689      	mov	r9, r1
 8012340:	f7ee f962 	bl	8000608 <__aeabi_dmul>
 8012344:	a360      	add	r3, pc, #384	; (adr r3, 80124c8 <__ieee754_log+0x320>)
 8012346:	e9d3 2300 	ldrd	r2, r3, [r3]
 801234a:	4606      	mov	r6, r0
 801234c:	460f      	mov	r7, r1
 801234e:	f7ee f95b 	bl	8000608 <__aeabi_dmul>
 8012352:	a35f      	add	r3, pc, #380	; (adr r3, 80124d0 <__ieee754_log+0x328>)
 8012354:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012358:	f7ed ffa0 	bl	800029c <__adddf3>
 801235c:	4632      	mov	r2, r6
 801235e:	463b      	mov	r3, r7
 8012360:	f7ee f952 	bl	8000608 <__aeabi_dmul>
 8012364:	a35c      	add	r3, pc, #368	; (adr r3, 80124d8 <__ieee754_log+0x330>)
 8012366:	e9d3 2300 	ldrd	r2, r3, [r3]
 801236a:	f7ed ff97 	bl	800029c <__adddf3>
 801236e:	4632      	mov	r2, r6
 8012370:	463b      	mov	r3, r7
 8012372:	f7ee f949 	bl	8000608 <__aeabi_dmul>
 8012376:	a35a      	add	r3, pc, #360	; (adr r3, 80124e0 <__ieee754_log+0x338>)
 8012378:	e9d3 2300 	ldrd	r2, r3, [r3]
 801237c:	f7ed ff8e 	bl	800029c <__adddf3>
 8012380:	4642      	mov	r2, r8
 8012382:	464b      	mov	r3, r9
 8012384:	f7ee f940 	bl	8000608 <__aeabi_dmul>
 8012388:	a357      	add	r3, pc, #348	; (adr r3, 80124e8 <__ieee754_log+0x340>)
 801238a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801238e:	4680      	mov	r8, r0
 8012390:	4689      	mov	r9, r1
 8012392:	4630      	mov	r0, r6
 8012394:	4639      	mov	r1, r7
 8012396:	f7ee f937 	bl	8000608 <__aeabi_dmul>
 801239a:	a355      	add	r3, pc, #340	; (adr r3, 80124f0 <__ieee754_log+0x348>)
 801239c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80123a0:	f7ed ff7c 	bl	800029c <__adddf3>
 80123a4:	4632      	mov	r2, r6
 80123a6:	463b      	mov	r3, r7
 80123a8:	f7ee f92e 	bl	8000608 <__aeabi_dmul>
 80123ac:	a352      	add	r3, pc, #328	; (adr r3, 80124f8 <__ieee754_log+0x350>)
 80123ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80123b2:	f7ed ff73 	bl	800029c <__adddf3>
 80123b6:	4632      	mov	r2, r6
 80123b8:	463b      	mov	r3, r7
 80123ba:	f7ee f925 	bl	8000608 <__aeabi_dmul>
 80123be:	460b      	mov	r3, r1
 80123c0:	4602      	mov	r2, r0
 80123c2:	4649      	mov	r1, r9
 80123c4:	4640      	mov	r0, r8
 80123c6:	f7ed ff69 	bl	800029c <__adddf3>
 80123ca:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 80123ce:	9b01      	ldr	r3, [sp, #4]
 80123d0:	3551      	adds	r5, #81	; 0x51
 80123d2:	431d      	orrs	r5, r3
 80123d4:	2d00      	cmp	r5, #0
 80123d6:	4680      	mov	r8, r0
 80123d8:	4689      	mov	r9, r1
 80123da:	dd48      	ble.n	801246e <__ieee754_log+0x2c6>
 80123dc:	4b4e      	ldr	r3, [pc, #312]	; (8012518 <__ieee754_log+0x370>)
 80123de:	2200      	movs	r2, #0
 80123e0:	4650      	mov	r0, sl
 80123e2:	4659      	mov	r1, fp
 80123e4:	f7ee f910 	bl	8000608 <__aeabi_dmul>
 80123e8:	4652      	mov	r2, sl
 80123ea:	465b      	mov	r3, fp
 80123ec:	f7ee f90c 	bl	8000608 <__aeabi_dmul>
 80123f0:	4602      	mov	r2, r0
 80123f2:	460b      	mov	r3, r1
 80123f4:	4606      	mov	r6, r0
 80123f6:	460f      	mov	r7, r1
 80123f8:	4640      	mov	r0, r8
 80123fa:	4649      	mov	r1, r9
 80123fc:	f7ed ff4e 	bl	800029c <__adddf3>
 8012400:	ec53 2b18 	vmov	r2, r3, d8
 8012404:	f7ee f900 	bl	8000608 <__aeabi_dmul>
 8012408:	4680      	mov	r8, r0
 801240a:	4689      	mov	r9, r1
 801240c:	b964      	cbnz	r4, 8012428 <__ieee754_log+0x280>
 801240e:	4602      	mov	r2, r0
 8012410:	460b      	mov	r3, r1
 8012412:	4630      	mov	r0, r6
 8012414:	4639      	mov	r1, r7
 8012416:	f7ed ff3f 	bl	8000298 <__aeabi_dsub>
 801241a:	4602      	mov	r2, r0
 801241c:	460b      	mov	r3, r1
 801241e:	4650      	mov	r0, sl
 8012420:	4659      	mov	r1, fp
 8012422:	f7ed ff39 	bl	8000298 <__aeabi_dsub>
 8012426:	e6d6      	b.n	80121d6 <__ieee754_log+0x2e>
 8012428:	a321      	add	r3, pc, #132	; (adr r3, 80124b0 <__ieee754_log+0x308>)
 801242a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801242e:	ec51 0b19 	vmov	r0, r1, d9
 8012432:	f7ee f8e9 	bl	8000608 <__aeabi_dmul>
 8012436:	a320      	add	r3, pc, #128	; (adr r3, 80124b8 <__ieee754_log+0x310>)
 8012438:	e9d3 2300 	ldrd	r2, r3, [r3]
 801243c:	4604      	mov	r4, r0
 801243e:	460d      	mov	r5, r1
 8012440:	ec51 0b19 	vmov	r0, r1, d9
 8012444:	f7ee f8e0 	bl	8000608 <__aeabi_dmul>
 8012448:	4642      	mov	r2, r8
 801244a:	464b      	mov	r3, r9
 801244c:	f7ed ff26 	bl	800029c <__adddf3>
 8012450:	4602      	mov	r2, r0
 8012452:	460b      	mov	r3, r1
 8012454:	4630      	mov	r0, r6
 8012456:	4639      	mov	r1, r7
 8012458:	f7ed ff1e 	bl	8000298 <__aeabi_dsub>
 801245c:	4652      	mov	r2, sl
 801245e:	465b      	mov	r3, fp
 8012460:	f7ed ff1a 	bl	8000298 <__aeabi_dsub>
 8012464:	4602      	mov	r2, r0
 8012466:	460b      	mov	r3, r1
 8012468:	4620      	mov	r0, r4
 801246a:	4629      	mov	r1, r5
 801246c:	e7d9      	b.n	8012422 <__ieee754_log+0x27a>
 801246e:	4602      	mov	r2, r0
 8012470:	460b      	mov	r3, r1
 8012472:	4650      	mov	r0, sl
 8012474:	4659      	mov	r1, fp
 8012476:	f7ed ff0f 	bl	8000298 <__aeabi_dsub>
 801247a:	ec53 2b18 	vmov	r2, r3, d8
 801247e:	f7ee f8c3 	bl	8000608 <__aeabi_dmul>
 8012482:	4606      	mov	r6, r0
 8012484:	460f      	mov	r7, r1
 8012486:	2c00      	cmp	r4, #0
 8012488:	f43f af23 	beq.w	80122d2 <__ieee754_log+0x12a>
 801248c:	a308      	add	r3, pc, #32	; (adr r3, 80124b0 <__ieee754_log+0x308>)
 801248e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012492:	ec51 0b19 	vmov	r0, r1, d9
 8012496:	f7ee f8b7 	bl	8000608 <__aeabi_dmul>
 801249a:	a307      	add	r3, pc, #28	; (adr r3, 80124b8 <__ieee754_log+0x310>)
 801249c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80124a0:	4604      	mov	r4, r0
 80124a2:	460d      	mov	r5, r1
 80124a4:	ec51 0b19 	vmov	r0, r1, d9
 80124a8:	e727      	b.n	80122fa <__ieee754_log+0x152>
 80124aa:	ed9f 0b15 	vldr	d0, [pc, #84]	; 8012500 <__ieee754_log+0x358>
 80124ae:	e694      	b.n	80121da <__ieee754_log+0x32>
 80124b0:	fee00000 	.word	0xfee00000
 80124b4:	3fe62e42 	.word	0x3fe62e42
 80124b8:	35793c76 	.word	0x35793c76
 80124bc:	3dea39ef 	.word	0x3dea39ef
 80124c0:	55555555 	.word	0x55555555
 80124c4:	3fd55555 	.word	0x3fd55555
 80124c8:	df3e5244 	.word	0xdf3e5244
 80124cc:	3fc2f112 	.word	0x3fc2f112
 80124d0:	96cb03de 	.word	0x96cb03de
 80124d4:	3fc74664 	.word	0x3fc74664
 80124d8:	94229359 	.word	0x94229359
 80124dc:	3fd24924 	.word	0x3fd24924
 80124e0:	55555593 	.word	0x55555593
 80124e4:	3fe55555 	.word	0x3fe55555
 80124e8:	d078c69f 	.word	0xd078c69f
 80124ec:	3fc39a09 	.word	0x3fc39a09
 80124f0:	1d8e78af 	.word	0x1d8e78af
 80124f4:	3fcc71c5 	.word	0x3fcc71c5
 80124f8:	9997fa04 	.word	0x9997fa04
 80124fc:	3fd99999 	.word	0x3fd99999
	...
 8012508:	c3500000 	.word	0xc3500000
 801250c:	43500000 	.word	0x43500000
 8012510:	7fefffff 	.word	0x7fefffff
 8012514:	3ff00000 	.word	0x3ff00000
 8012518:	3fe00000 	.word	0x3fe00000
 801251c:	00000000 	.word	0x00000000

08012520 <nan>:
 8012520:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8012528 <nan+0x8>
 8012524:	4770      	bx	lr
 8012526:	bf00      	nop
 8012528:	00000000 	.word	0x00000000
 801252c:	7ff80000 	.word	0x7ff80000

08012530 <_init>:
 8012530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012532:	bf00      	nop
 8012534:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012536:	bc08      	pop	{r3}
 8012538:	469e      	mov	lr, r3
 801253a:	4770      	bx	lr

0801253c <_fini>:
 801253c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801253e:	bf00      	nop
 8012540:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012542:	bc08      	pop	{r3}
 8012544:	469e      	mov	lr, r3
 8012546:	4770      	bx	lr
