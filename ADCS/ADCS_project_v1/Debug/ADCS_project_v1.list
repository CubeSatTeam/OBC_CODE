
ADCS_project_v1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a9d4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000104  0800ab74  0800ab74  0001ab74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ac78  0800ac78  0002006c  2**0
                  CONTENTS
  4 .ARM          00000008  0800ac78  0800ac78  0001ac78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ac80  0800ac80  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ac80  0800ac80  0001ac80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ac84  0800ac84  0001ac84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  0800ac88  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000061ac  2000006c  0800acf4  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20006218  0800acf4  00026218  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000235e8  00000000  00000000  000200df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000055e4  00000000  00000000  000436c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001f30  00000000  00000000  00048cb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001810  00000000  00000000  0004abe0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000679f  00000000  00000000  0004c3f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00025fe8  00000000  00000000  00052b8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000faa01  00000000  00000000  00078b77  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00008894  00000000  00000000  00173578  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000aa  00000000  00000000  0017be0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000006c 	.word	0x2000006c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800ab5c 	.word	0x0800ab5c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000070 	.word	0x20000070
 80001dc:	0800ab5c 	.word	0x0800ab5c

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b970 	b.w	80004d8 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9e08      	ldr	r6, [sp, #32]
 8000216:	460d      	mov	r5, r1
 8000218:	4604      	mov	r4, r0
 800021a:	460f      	mov	r7, r1
 800021c:	2b00      	cmp	r3, #0
 800021e:	d14a      	bne.n	80002b6 <__udivmoddi4+0xa6>
 8000220:	428a      	cmp	r2, r1
 8000222:	4694      	mov	ip, r2
 8000224:	d965      	bls.n	80002f2 <__udivmoddi4+0xe2>
 8000226:	fab2 f382 	clz	r3, r2
 800022a:	b143      	cbz	r3, 800023e <__udivmoddi4+0x2e>
 800022c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000230:	f1c3 0220 	rsb	r2, r3, #32
 8000234:	409f      	lsls	r7, r3
 8000236:	fa20 f202 	lsr.w	r2, r0, r2
 800023a:	4317      	orrs	r7, r2
 800023c:	409c      	lsls	r4, r3
 800023e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000242:	fa1f f58c 	uxth.w	r5, ip
 8000246:	fbb7 f1fe 	udiv	r1, r7, lr
 800024a:	0c22      	lsrs	r2, r4, #16
 800024c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000250:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000254:	fb01 f005 	mul.w	r0, r1, r5
 8000258:	4290      	cmp	r0, r2
 800025a:	d90a      	bls.n	8000272 <__udivmoddi4+0x62>
 800025c:	eb1c 0202 	adds.w	r2, ip, r2
 8000260:	f101 37ff 	add.w	r7, r1, #4294967295
 8000264:	f080 811c 	bcs.w	80004a0 <__udivmoddi4+0x290>
 8000268:	4290      	cmp	r0, r2
 800026a:	f240 8119 	bls.w	80004a0 <__udivmoddi4+0x290>
 800026e:	3902      	subs	r1, #2
 8000270:	4462      	add	r2, ip
 8000272:	1a12      	subs	r2, r2, r0
 8000274:	b2a4      	uxth	r4, r4
 8000276:	fbb2 f0fe 	udiv	r0, r2, lr
 800027a:	fb0e 2210 	mls	r2, lr, r0, r2
 800027e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000282:	fb00 f505 	mul.w	r5, r0, r5
 8000286:	42a5      	cmp	r5, r4
 8000288:	d90a      	bls.n	80002a0 <__udivmoddi4+0x90>
 800028a:	eb1c 0404 	adds.w	r4, ip, r4
 800028e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000292:	f080 8107 	bcs.w	80004a4 <__udivmoddi4+0x294>
 8000296:	42a5      	cmp	r5, r4
 8000298:	f240 8104 	bls.w	80004a4 <__udivmoddi4+0x294>
 800029c:	4464      	add	r4, ip
 800029e:	3802      	subs	r0, #2
 80002a0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002a4:	1b64      	subs	r4, r4, r5
 80002a6:	2100      	movs	r1, #0
 80002a8:	b11e      	cbz	r6, 80002b2 <__udivmoddi4+0xa2>
 80002aa:	40dc      	lsrs	r4, r3
 80002ac:	2300      	movs	r3, #0
 80002ae:	e9c6 4300 	strd	r4, r3, [r6]
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	428b      	cmp	r3, r1
 80002b8:	d908      	bls.n	80002cc <__udivmoddi4+0xbc>
 80002ba:	2e00      	cmp	r6, #0
 80002bc:	f000 80ed 	beq.w	800049a <__udivmoddi4+0x28a>
 80002c0:	2100      	movs	r1, #0
 80002c2:	e9c6 0500 	strd	r0, r5, [r6]
 80002c6:	4608      	mov	r0, r1
 80002c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002cc:	fab3 f183 	clz	r1, r3
 80002d0:	2900      	cmp	r1, #0
 80002d2:	d149      	bne.n	8000368 <__udivmoddi4+0x158>
 80002d4:	42ab      	cmp	r3, r5
 80002d6:	d302      	bcc.n	80002de <__udivmoddi4+0xce>
 80002d8:	4282      	cmp	r2, r0
 80002da:	f200 80f8 	bhi.w	80004ce <__udivmoddi4+0x2be>
 80002de:	1a84      	subs	r4, r0, r2
 80002e0:	eb65 0203 	sbc.w	r2, r5, r3
 80002e4:	2001      	movs	r0, #1
 80002e6:	4617      	mov	r7, r2
 80002e8:	2e00      	cmp	r6, #0
 80002ea:	d0e2      	beq.n	80002b2 <__udivmoddi4+0xa2>
 80002ec:	e9c6 4700 	strd	r4, r7, [r6]
 80002f0:	e7df      	b.n	80002b2 <__udivmoddi4+0xa2>
 80002f2:	b902      	cbnz	r2, 80002f6 <__udivmoddi4+0xe6>
 80002f4:	deff      	udf	#255	; 0xff
 80002f6:	fab2 f382 	clz	r3, r2
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	f040 8090 	bne.w	8000420 <__udivmoddi4+0x210>
 8000300:	1a8a      	subs	r2, r1, r2
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2101      	movs	r1, #1
 800030c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000310:	fb07 2015 	mls	r0, r7, r5, r2
 8000314:	0c22      	lsrs	r2, r4, #16
 8000316:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800031a:	fb0e f005 	mul.w	r0, lr, r5
 800031e:	4290      	cmp	r0, r2
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x124>
 8000322:	eb1c 0202 	adds.w	r2, ip, r2
 8000326:	f105 38ff 	add.w	r8, r5, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x122>
 800032c:	4290      	cmp	r0, r2
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2b8>
 8000332:	4645      	mov	r5, r8
 8000334:	1a12      	subs	r2, r2, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb2 f0f7 	udiv	r0, r2, r7
 800033c:	fb07 2210 	mls	r2, r7, r0, r2
 8000340:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x14e>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 32ff 	add.w	r2, r0, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x14c>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2c2>
 800035c:	4610      	mov	r0, r2
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000366:	e79f      	b.n	80002a8 <__udivmoddi4+0x98>
 8000368:	f1c1 0720 	rsb	r7, r1, #32
 800036c:	408b      	lsls	r3, r1
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa05 f401 	lsl.w	r4, r5, r1
 800037a:	fa20 f307 	lsr.w	r3, r0, r7
 800037e:	40fd      	lsrs	r5, r7
 8000380:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000384:	4323      	orrs	r3, r4
 8000386:	fbb5 f8f9 	udiv	r8, r5, r9
 800038a:	fa1f fe8c 	uxth.w	lr, ip
 800038e:	fb09 5518 	mls	r5, r9, r8, r5
 8000392:	0c1c      	lsrs	r4, r3, #16
 8000394:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000398:	fb08 f50e 	mul.w	r5, r8, lr
 800039c:	42a5      	cmp	r5, r4
 800039e:	fa02 f201 	lsl.w	r2, r2, r1
 80003a2:	fa00 f001 	lsl.w	r0, r0, r1
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b0>
 80003a8:	eb1c 0404 	adds.w	r4, ip, r4
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2b4>
 80003b4:	42a5      	cmp	r5, r4
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2b4>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4464      	add	r4, ip
 80003c0:	1b64      	subs	r4, r4, r5
 80003c2:	b29d      	uxth	r5, r3
 80003c4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c8:	fb09 4413 	mls	r4, r9, r3, r4
 80003cc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003d0:	fb03 fe0e 	mul.w	lr, r3, lr
 80003d4:	45a6      	cmp	lr, r4
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1da>
 80003d8:	eb1c 0404 	adds.w	r4, ip, r4
 80003dc:	f103 35ff 	add.w	r5, r3, #4294967295
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2ac>
 80003e2:	45a6      	cmp	lr, r4
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2ac>
 80003e6:	3b02      	subs	r3, #2
 80003e8:	4464      	add	r4, ip
 80003ea:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003ee:	fba3 9502 	umull	r9, r5, r3, r2
 80003f2:	eba4 040e 	sub.w	r4, r4, lr
 80003f6:	42ac      	cmp	r4, r5
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46ae      	mov	lr, r5
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x29c>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x298>
 8000400:	b156      	cbz	r6, 8000418 <__udivmoddi4+0x208>
 8000402:	ebb0 0208 	subs.w	r2, r0, r8
 8000406:	eb64 040e 	sbc.w	r4, r4, lr
 800040a:	fa04 f707 	lsl.w	r7, r4, r7
 800040e:	40ca      	lsrs	r2, r1
 8000410:	40cc      	lsrs	r4, r1
 8000412:	4317      	orrs	r7, r2
 8000414:	e9c6 7400 	strd	r7, r4, [r6]
 8000418:	4618      	mov	r0, r3
 800041a:	2100      	movs	r1, #0
 800041c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000420:	f1c3 0120 	rsb	r1, r3, #32
 8000424:	fa02 fc03 	lsl.w	ip, r2, r3
 8000428:	fa20 f201 	lsr.w	r2, r0, r1
 800042c:	fa25 f101 	lsr.w	r1, r5, r1
 8000430:	409d      	lsls	r5, r3
 8000432:	432a      	orrs	r2, r5
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000440:	fb07 1510 	mls	r5, r7, r0, r1
 8000444:	0c11      	lsrs	r1, r2, #16
 8000446:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800044a:	fb00 f50e 	mul.w	r5, r0, lr
 800044e:	428d      	cmp	r5, r1
 8000450:	fa04 f403 	lsl.w	r4, r4, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x258>
 8000456:	eb1c 0101 	adds.w	r1, ip, r1
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b0>
 8000460:	428d      	cmp	r5, r1
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b0>
 8000464:	3802      	subs	r0, #2
 8000466:	4461      	add	r1, ip
 8000468:	1b49      	subs	r1, r1, r5
 800046a:	b292      	uxth	r2, r2
 800046c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000470:	fb07 1115 	mls	r1, r7, r5, r1
 8000474:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000478:	fb05 f10e 	mul.w	r1, r5, lr
 800047c:	4291      	cmp	r1, r2
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x282>
 8000480:	eb1c 0202 	adds.w	r2, ip, r2
 8000484:	f105 38ff 	add.w	r8, r5, #4294967295
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2a8>
 800048a:	4291      	cmp	r1, r2
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2a8>
 800048e:	3d02      	subs	r5, #2
 8000490:	4462      	add	r2, ip
 8000492:	1a52      	subs	r2, r2, r1
 8000494:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0xfc>
 800049a:	4631      	mov	r1, r6
 800049c:	4630      	mov	r0, r6
 800049e:	e708      	b.n	80002b2 <__udivmoddi4+0xa2>
 80004a0:	4639      	mov	r1, r7
 80004a2:	e6e6      	b.n	8000272 <__udivmoddi4+0x62>
 80004a4:	4610      	mov	r0, r2
 80004a6:	e6fb      	b.n	80002a0 <__udivmoddi4+0x90>
 80004a8:	4548      	cmp	r0, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f0>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004b4:	3b01      	subs	r3, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f0>
 80004b8:	4645      	mov	r5, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x282>
 80004bc:	462b      	mov	r3, r5
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1da>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x258>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b0>
 80004c8:	3d02      	subs	r5, #2
 80004ca:	4462      	add	r2, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x124>
 80004ce:	4608      	mov	r0, r1
 80004d0:	e70a      	b.n	80002e8 <__udivmoddi4+0xd8>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x14e>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80004dc:	b480      	push	{r7}
 80004de:	b083      	sub	sp, #12
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	4603      	mov	r3, r0
 80004e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80004e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004ea:	2b00      	cmp	r3, #0
 80004ec:	db0b      	blt.n	8000506 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80004ee:	79fb      	ldrb	r3, [r7, #7]
 80004f0:	f003 021f 	and.w	r2, r3, #31
 80004f4:	4907      	ldr	r1, [pc, #28]	; (8000514 <__NVIC_EnableIRQ+0x38>)
 80004f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004fa:	095b      	lsrs	r3, r3, #5
 80004fc:	2001      	movs	r0, #1
 80004fe:	fa00 f202 	lsl.w	r2, r0, r2
 8000502:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000506:	bf00      	nop
 8000508:	370c      	adds	r7, #12
 800050a:	46bd      	mov	sp, r7
 800050c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop
 8000514:	e000e100 	.word	0xe000e100

08000518 <__NVIC_GetEnableIRQ>:
  \return             0  Interrupt is not enabled.
  \return             1  Interrupt is enabled.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE uint32_t __NVIC_GetEnableIRQ(IRQn_Type IRQn)
{
 8000518:	b480      	push	{r7}
 800051a:	b083      	sub	sp, #12
 800051c:	af00      	add	r7, sp, #0
 800051e:	4603      	mov	r3, r0
 8000520:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000522:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000526:	2b00      	cmp	r3, #0
 8000528:	db0d      	blt.n	8000546 <__NVIC_GetEnableIRQ+0x2e>
  {
    return((uint32_t)(((NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
 800052a:	4a0a      	ldr	r2, [pc, #40]	; (8000554 <__NVIC_GetEnableIRQ+0x3c>)
 800052c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000530:	095b      	lsrs	r3, r3, #5
 8000532:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000536:	79fb      	ldrb	r3, [r7, #7]
 8000538:	f003 031f 	and.w	r3, r3, #31
 800053c:	fa22 f303 	lsr.w	r3, r2, r3
 8000540:	f003 0301 	and.w	r3, r3, #1
 8000544:	e000      	b.n	8000548 <__NVIC_GetEnableIRQ+0x30>
  }
  else
  {
    return(0U);
 8000546:	2300      	movs	r3, #0
  }
}
 8000548:	4618      	mov	r0, r3
 800054a:	370c      	adds	r7, #12
 800054c:	46bd      	mov	sp, r7
 800054e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000552:	4770      	bx	lr
 8000554:	e000e100 	.word	0xe000e100

08000558 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8000558:	b480      	push	{r7}
 800055a:	b083      	sub	sp, #12
 800055c:	af00      	add	r7, sp, #0
 800055e:	4603      	mov	r3, r0
 8000560:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000562:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000566:	2b00      	cmp	r3, #0
 8000568:	db12      	blt.n	8000590 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800056a:	79fb      	ldrb	r3, [r7, #7]
 800056c:	f003 021f 	and.w	r2, r3, #31
 8000570:	490a      	ldr	r1, [pc, #40]	; (800059c <__NVIC_DisableIRQ+0x44>)
 8000572:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000576:	095b      	lsrs	r3, r3, #5
 8000578:	2001      	movs	r0, #1
 800057a:	fa00 f202 	lsl.w	r2, r0, r2
 800057e:	3320      	adds	r3, #32
 8000580:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000584:	f3bf 8f4f 	dsb	sy
}
 8000588:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800058a:	f3bf 8f6f 	isb	sy
}
 800058e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8000590:	bf00      	nop
 8000592:	370c      	adds	r7, #12
 8000594:	46bd      	mov	sp, r7
 8000596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059a:	4770      	bx	lr
 800059c:	e000e100 	.word	0xe000e100

080005a0 <addDriver_UART>:
        _driverHandle_UART[handleIndex]._usageFlag = 0;
    }
}

uint8_t addDriver_UART(UART_HandleTypeDef* huartHandle, IRQn_Type irq, fifo_policy policyRX)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b086      	sub	sp, #24
 80005a4:	af02      	add	r7, sp, #8
 80005a6:	6078      	str	r0, [r7, #4]
 80005a8:	460b      	mov	r3, r1
 80005aa:	70fb      	strb	r3, [r7, #3]
 80005ac:	4613      	mov	r3, r2
 80005ae:	70bb      	strb	r3, [r7, #2]
    //scan the data structure to find a free position (or if the handle is already inserted)
    for(uint32_t handleIndex = 0; handleIndex < MAX_UART_HANDLE; handleIndex++)
 80005b0:	2300      	movs	r3, #0
 80005b2:	60fb      	str	r3, [r7, #12]
 80005b4:	e0a6      	b.n	8000704 <addDriver_UART+0x164>
    {
        //if it finds an occupied position
        if(_driverHandle_UART[handleIndex]._usageFlag == 1)
 80005b6:	4a58      	ldr	r2, [pc, #352]	; (8000718 <addDriver_UART+0x178>)
 80005b8:	68fb      	ldr	r3, [r7, #12]
 80005ba:	f241 11a8 	movw	r1, #4520	; 0x11a8
 80005be:	fb01 f303 	mul.w	r3, r1, r3
 80005c2:	4413      	add	r3, r2
 80005c4:	781b      	ldrb	r3, [r3, #0]
 80005c6:	b2db      	uxtb	r3, r3
 80005c8:	2b01      	cmp	r3, #1
 80005ca:	d10e      	bne.n	80005ea <addDriver_UART+0x4a>
        {
            //if the handle is already inside the structure
            if(_driverHandle_UART[handleIndex]._huartHandle == huartHandle)
 80005cc:	4a52      	ldr	r2, [pc, #328]	; (8000718 <addDriver_UART+0x178>)
 80005ce:	68fb      	ldr	r3, [r7, #12]
 80005d0:	f241 11a8 	movw	r1, #4520	; 0x11a8
 80005d4:	fb01 f303 	mul.w	r3, r1, r3
 80005d8:	4413      	add	r3, r2
 80005da:	3304      	adds	r3, #4
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	687a      	ldr	r2, [r7, #4]
 80005e0:	429a      	cmp	r2, r3
 80005e2:	f040 808c 	bne.w	80006fe <addDriver_UART+0x15e>
            {
                //error
                return 1; 
 80005e6:	2301      	movs	r3, #1
 80005e8:	e091      	b.n	800070e <addDriver_UART+0x16e>
            }
        }
        else
        {
        	//disable the IRQ
        	uint32_t irqState=NVIC_GetEnableIRQ(irq);
 80005ea:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80005ee:	4618      	mov	r0, r3
 80005f0:	f7ff ff92 	bl	8000518 <__NVIC_GetEnableIRQ>
 80005f4:	60b8      	str	r0, [r7, #8]
        	NVIC_DisableIRQ(irq);
 80005f6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80005fa:	4618      	mov	r0, r3
 80005fc:	f7ff ffac 	bl	8000558 <__NVIC_DisableIRQ>

            //intialize the strcture for this handle
            _driverHandle_UART[handleIndex]._huartHandle = huartHandle;
 8000600:	4a45      	ldr	r2, [pc, #276]	; (8000718 <addDriver_UART+0x178>)
 8000602:	68fb      	ldr	r3, [r7, #12]
 8000604:	f241 11a8 	movw	r1, #4520	; 0x11a8
 8000608:	fb01 f303 	mul.w	r3, r1, r3
 800060c:	4413      	add	r3, r2
 800060e:	3304      	adds	r3, #4
 8000610:	687a      	ldr	r2, [r7, #4]
 8000612:	601a      	str	r2, [r3, #0]
            _driverHandle_UART[handleIndex]._rxQueueHandle = xQueueCreateStatic(SERIAL_RX_BUFF_LEN,1,(void*)&_driverHandle_UART[handleIndex]._rxQueueStorageBuffer,&_driverHandle_UART[handleIndex]._rxQueueBuffer);
 8000614:	68fb      	ldr	r3, [r7, #12]
 8000616:	f241 12a8 	movw	r2, #4520	; 0x11a8
 800061a:	fb02 f303 	mul.w	r3, r2, r3
 800061e:	3310      	adds	r3, #16
 8000620:	4a3d      	ldr	r2, [pc, #244]	; (8000718 <addDriver_UART+0x178>)
 8000622:	441a      	add	r2, r3
 8000624:	68fb      	ldr	r3, [r7, #12]
 8000626:	f241 11a8 	movw	r1, #4520	; 0x11a8
 800062a:	fb01 f303 	mul.w	r3, r1, r3
 800062e:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8000632:	4939      	ldr	r1, [pc, #228]	; (8000718 <addDriver_UART+0x178>)
 8000634:	440b      	add	r3, r1
 8000636:	2100      	movs	r1, #0
 8000638:	9100      	str	r1, [sp, #0]
 800063a:	2101      	movs	r1, #1
 800063c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000640:	f007 fc96 	bl	8007f70 <xQueueGenericCreateStatic>
 8000644:	4602      	mov	r2, r0
 8000646:	4934      	ldr	r1, [pc, #208]	; (8000718 <addDriver_UART+0x178>)
 8000648:	68fb      	ldr	r3, [r7, #12]
 800064a:	f241 10a8 	movw	r0, #4520	; 0x11a8
 800064e:	fb00 f303 	mul.w	r3, r0, r3
 8000652:	440b      	add	r3, r1
 8000654:	330c      	adds	r3, #12
 8000656:	601a      	str	r2, [r3, #0]
            _driverHandle_UART[handleIndex]._txQueueHandle = xQueueCreateStatic(SERIAL_TX_BUFF_LEN,1,(void*)&_driverHandle_UART[handleIndex]._txQueueStorageBuffer,&_driverHandle_UART[handleIndex]._txQueueBuffer);
 8000658:	68fb      	ldr	r3, [r7, #12]
 800065a:	f241 12a8 	movw	r2, #4520	; 0x11a8
 800065e:	fb02 f303 	mul.w	r3, r2, r3
 8000662:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8000666:	4a2c      	ldr	r2, [pc, #176]	; (8000718 <addDriver_UART+0x178>)
 8000668:	4413      	add	r3, r2
 800066a:	1d1a      	adds	r2, r3, #4
 800066c:	68fb      	ldr	r3, [r7, #12]
 800066e:	f241 11a8 	movw	r1, #4520	; 0x11a8
 8000672:	fb01 f303 	mul.w	r3, r1, r3
 8000676:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 800067a:	3318      	adds	r3, #24
 800067c:	4926      	ldr	r1, [pc, #152]	; (8000718 <addDriver_UART+0x178>)
 800067e:	440b      	add	r3, r1
 8000680:	3304      	adds	r3, #4
 8000682:	2100      	movs	r1, #0
 8000684:	9100      	str	r1, [sp, #0]
 8000686:	2101      	movs	r1, #1
 8000688:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800068c:	f007 fc70 	bl	8007f70 <xQueueGenericCreateStatic>
 8000690:	4602      	mov	r2, r0
 8000692:	4921      	ldr	r1, [pc, #132]	; (8000718 <addDriver_UART+0x178>)
 8000694:	68fb      	ldr	r3, [r7, #12]
 8000696:	f241 10a8 	movw	r0, #4520	; 0x11a8
 800069a:	fb00 f303 	mul.w	r3, r0, r3
 800069e:	440b      	add	r3, r1
 80006a0:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 80006a4:	601a      	str	r2, [r3, #0]
            _driverHandle_UART[handleIndex]._usageFlag = 1;
 80006a6:	4a1c      	ldr	r2, [pc, #112]	; (8000718 <addDriver_UART+0x178>)
 80006a8:	68fb      	ldr	r3, [r7, #12]
 80006aa:	f241 11a8 	movw	r1, #4520	; 0x11a8
 80006ae:	fb01 f303 	mul.w	r3, r1, r3
 80006b2:	4413      	add	r3, r2
 80006b4:	2201      	movs	r2, #1
 80006b6:	701a      	strb	r2, [r3, #0]
            _driverHandle_UART[handleIndex]._policyRX = policyRX;
 80006b8:	4a17      	ldr	r2, [pc, #92]	; (8000718 <addDriver_UART+0x178>)
 80006ba:	68fb      	ldr	r3, [r7, #12]
 80006bc:	f241 11a8 	movw	r1, #4520	; 0x11a8
 80006c0:	fb01 f303 	mul.w	r3, r1, r3
 80006c4:	4413      	add	r3, r2
 80006c6:	f503 538d 	add.w	r3, r3, #4512	; 0x11a0
 80006ca:	3304      	adds	r3, #4
 80006cc:	78ba      	ldrb	r2, [r7, #2]
 80006ce:	701a      	strb	r2, [r3, #0]

            HAL_UART_Receive_IT(huartHandle,&_driverHandle_UART[handleIndex]._rxByte,1);
 80006d0:	68fb      	ldr	r3, [r7, #12]
 80006d2:	f241 12a8 	movw	r2, #4520	; 0x11a8
 80006d6:	fb02 f303 	mul.w	r3, r2, r3
 80006da:	4a0f      	ldr	r2, [pc, #60]	; (8000718 <addDriver_UART+0x178>)
 80006dc:	4413      	add	r3, r2
 80006de:	3301      	adds	r3, #1
 80006e0:	2201      	movs	r2, #1
 80006e2:	4619      	mov	r1, r3
 80006e4:	6878      	ldr	r0, [r7, #4]
 80006e6:	f005 ffc1 	bl	800666c <HAL_UART_Receive_IT>

            if(irqState) NVIC_EnableIRQ(irq);
 80006ea:	68bb      	ldr	r3, [r7, #8]
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d004      	beq.n	80006fa <addDriver_UART+0x15a>
 80006f0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80006f4:	4618      	mov	r0, r3
 80006f6:	f7ff fef1 	bl	80004dc <__NVIC_EnableIRQ>

            return 0;
 80006fa:	2300      	movs	r3, #0
 80006fc:	e007      	b.n	800070e <addDriver_UART+0x16e>
    for(uint32_t handleIndex = 0; handleIndex < MAX_UART_HANDLE; handleIndex++)
 80006fe:	68fb      	ldr	r3, [r7, #12]
 8000700:	3301      	adds	r3, #1
 8000702:	60fb      	str	r3, [r7, #12]
 8000704:	68fb      	ldr	r3, [r7, #12]
 8000706:	2b03      	cmp	r3, #3
 8000708:	f67f af55 	bls.w	80005b6 <addDriver_UART+0x16>
        }
    }
    return 1;
 800070c:	2301      	movs	r3, #1
}
 800070e:	4618      	mov	r0, r3
 8000710:	3710      	adds	r7, #16
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	20000088 	.word	0x20000088

0800071c <receiveDriver_UART>:

uint32_t receiveDriver_UART(UART_HandleTypeDef* huartHandle, uint8_t* buff, uint32_t size){
 800071c:	b580      	push	{r7, lr}
 800071e:	b086      	sub	sp, #24
 8000720:	af00      	add	r7, sp, #0
 8000722:	60f8      	str	r0, [r7, #12]
 8000724:	60b9      	str	r1, [r7, #8]
 8000726:	607a      	str	r2, [r7, #4]

    if(size == 0) return 0;
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	2b00      	cmp	r3, #0
 800072c:	d101      	bne.n	8000732 <receiveDriver_UART+0x16>
 800072e:	2300      	movs	r3, #0
 8000730:	e03f      	b.n	80007b2 <receiveDriver_UART+0x96>

    //scanning the array with the structures to find the handle
    for(uint32_t handleIndex = 0; handleIndex < MAX_UART_HANDLE; handleIndex++)
 8000732:	2300      	movs	r3, #0
 8000734:	617b      	str	r3, [r7, #20]
 8000736:	e038      	b.n	80007aa <receiveDriver_UART+0x8e>
    {
        //if it finds the handle
        if((_driverHandle_UART[handleIndex]._usageFlag == 1) && (huartHandle == _driverHandle_UART[handleIndex]._huartHandle))
 8000738:	4a20      	ldr	r2, [pc, #128]	; (80007bc <receiveDriver_UART+0xa0>)
 800073a:	697b      	ldr	r3, [r7, #20]
 800073c:	f241 11a8 	movw	r1, #4520	; 0x11a8
 8000740:	fb01 f303 	mul.w	r3, r1, r3
 8000744:	4413      	add	r3, r2
 8000746:	781b      	ldrb	r3, [r3, #0]
 8000748:	b2db      	uxtb	r3, r3
 800074a:	2b01      	cmp	r3, #1
 800074c:	d12a      	bne.n	80007a4 <receiveDriver_UART+0x88>
 800074e:	4a1b      	ldr	r2, [pc, #108]	; (80007bc <receiveDriver_UART+0xa0>)
 8000750:	697b      	ldr	r3, [r7, #20]
 8000752:	f241 11a8 	movw	r1, #4520	; 0x11a8
 8000756:	fb01 f303 	mul.w	r3, r1, r3
 800075a:	4413      	add	r3, r2
 800075c:	3304      	adds	r3, #4
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	68fa      	ldr	r2, [r7, #12]
 8000762:	429a      	cmp	r2, r3
 8000764:	d11e      	bne.n	80007a4 <receiveDriver_UART+0x88>
        {
        	uint8_t rxNum=0;
 8000766:	2300      	movs	r3, #0
 8000768:	74fb      	strb	r3, [r7, #19]
        	while(rxNum<size && xQueueReceive(_driverHandle_UART[handleIndex]._rxQueueHandle,&buff[rxNum],0)==pdTRUE){
 800076a:	e002      	b.n	8000772 <receiveDriver_UART+0x56>
        		rxNum++;
 800076c:	7cfb      	ldrb	r3, [r7, #19]
 800076e:	3301      	adds	r3, #1
 8000770:	74fb      	strb	r3, [r7, #19]
        	while(rxNum<size && xQueueReceive(_driverHandle_UART[handleIndex]._rxQueueHandle,&buff[rxNum],0)==pdTRUE){
 8000772:	7cfb      	ldrb	r3, [r7, #19]
 8000774:	687a      	ldr	r2, [r7, #4]
 8000776:	429a      	cmp	r2, r3
 8000778:	d912      	bls.n	80007a0 <receiveDriver_UART+0x84>
 800077a:	4a10      	ldr	r2, [pc, #64]	; (80007bc <receiveDriver_UART+0xa0>)
 800077c:	697b      	ldr	r3, [r7, #20]
 800077e:	f241 11a8 	movw	r1, #4520	; 0x11a8
 8000782:	fb01 f303 	mul.w	r3, r1, r3
 8000786:	4413      	add	r3, r2
 8000788:	330c      	adds	r3, #12
 800078a:	6818      	ldr	r0, [r3, #0]
 800078c:	7cfb      	ldrb	r3, [r7, #19]
 800078e:	68ba      	ldr	r2, [r7, #8]
 8000790:	4413      	add	r3, r2
 8000792:	2200      	movs	r2, #0
 8000794:	4619      	mov	r1, r3
 8000796:	f007 fe19 	bl	80083cc <xQueueReceive>
 800079a:	4603      	mov	r3, r0
 800079c:	2b01      	cmp	r3, #1
 800079e:	d0e5      	beq.n	800076c <receiveDriver_UART+0x50>
        	}

            //0 bytes read
            return rxNum;
 80007a0:	7cfb      	ldrb	r3, [r7, #19]
 80007a2:	e006      	b.n	80007b2 <receiveDriver_UART+0x96>
    for(uint32_t handleIndex = 0; handleIndex < MAX_UART_HANDLE; handleIndex++)
 80007a4:	697b      	ldr	r3, [r7, #20]
 80007a6:	3301      	adds	r3, #1
 80007a8:	617b      	str	r3, [r7, #20]
 80007aa:	697b      	ldr	r3, [r7, #20]
 80007ac:	2b03      	cmp	r3, #3
 80007ae:	d9c3      	bls.n	8000738 <receiveDriver_UART+0x1c>
            HAL_UART_Receive_IT(huartHandle,&_driverHandle_UART[handleIndex]._rxByte,1);
            //NVIC_EnableIRQ(_driverHandle_UART[handleIndex]._irq);

        }
    }
    return 0;
 80007b0:	2300      	movs	r3, #0
}
 80007b2:	4618      	mov	r0, r3
 80007b4:	3718      	adds	r7, #24
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	bf00      	nop
 80007bc:	20000088 	.word	0x20000088

080007c0 <sendDriver_UART>:

uint32_t sendDriver_UART(UART_HandleTypeDef* huartHandle,uint8_t* buff,uint32_t size){
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b086      	sub	sp, #24
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	60f8      	str	r0, [r7, #12]
 80007c8:	60b9      	str	r1, [r7, #8]
 80007ca:	607a      	str	r2, [r7, #4]
	if(size == 0) return 0;
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d101      	bne.n	80007d6 <sendDriver_UART+0x16>
 80007d2:	2300      	movs	r3, #0
 80007d4:	e0a0      	b.n	8000918 <sendDriver_UART+0x158>

	//scanning the array with the structures to find the handle
	for(uint32_t handleIndex = 0; handleIndex < MAX_UART_HANDLE; handleIndex++)
 80007d6:	2300      	movs	r3, #0
 80007d8:	617b      	str	r3, [r7, #20]
 80007da:	e098      	b.n	800090e <sendDriver_UART+0x14e>
	{
		//if it finds the handle
		if((_driverHandle_UART[handleIndex]._usageFlag == 1) && (huartHandle == _driverHandle_UART[handleIndex]._huartHandle))
 80007dc:	4a50      	ldr	r2, [pc, #320]	; (8000920 <sendDriver_UART+0x160>)
 80007de:	697b      	ldr	r3, [r7, #20]
 80007e0:	f241 11a8 	movw	r1, #4520	; 0x11a8
 80007e4:	fb01 f303 	mul.w	r3, r1, r3
 80007e8:	4413      	add	r3, r2
 80007ea:	781b      	ldrb	r3, [r3, #0]
 80007ec:	b2db      	uxtb	r3, r3
 80007ee:	2b01      	cmp	r3, #1
 80007f0:	f040 808a 	bne.w	8000908 <sendDriver_UART+0x148>
 80007f4:	4a4a      	ldr	r2, [pc, #296]	; (8000920 <sendDriver_UART+0x160>)
 80007f6:	697b      	ldr	r3, [r7, #20]
 80007f8:	f241 11a8 	movw	r1, #4520	; 0x11a8
 80007fc:	fb01 f303 	mul.w	r3, r1, r3
 8000800:	4413      	add	r3, r2
 8000802:	3304      	adds	r3, #4
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	68fa      	ldr	r2, [r7, #12]
 8000808:	429a      	cmp	r2, r3
 800080a:	d17d      	bne.n	8000908 <sendDriver_UART+0x148>
		{
			//inserting bytes inside queue
			uint8_t txNum=0;
 800080c:	2300      	movs	r3, #0
 800080e:	74fb      	strb	r3, [r7, #19]
			while((txNum+1)<size && xQueueSendToBack(_driverHandle_UART[handleIndex]._txQueueHandle,&buff[txNum],0)==pdTRUE){
 8000810:	e002      	b.n	8000818 <sendDriver_UART+0x58>
				txNum++;
 8000812:	7cfb      	ldrb	r3, [r7, #19]
 8000814:	3301      	adds	r3, #1
 8000816:	74fb      	strb	r3, [r7, #19]
			while((txNum+1)<size && xQueueSendToBack(_driverHandle_UART[handleIndex]._txQueueHandle,&buff[txNum],0)==pdTRUE){
 8000818:	7cfb      	ldrb	r3, [r7, #19]
 800081a:	3301      	adds	r3, #1
 800081c:	461a      	mov	r2, r3
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	4293      	cmp	r3, r2
 8000822:	d913      	bls.n	800084c <sendDriver_UART+0x8c>
 8000824:	4a3e      	ldr	r2, [pc, #248]	; (8000920 <sendDriver_UART+0x160>)
 8000826:	697b      	ldr	r3, [r7, #20]
 8000828:	f241 11a8 	movw	r1, #4520	; 0x11a8
 800082c:	fb01 f303 	mul.w	r3, r1, r3
 8000830:	4413      	add	r3, r2
 8000832:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8000836:	6818      	ldr	r0, [r3, #0]
 8000838:	7cfb      	ldrb	r3, [r7, #19]
 800083a:	68ba      	ldr	r2, [r7, #8]
 800083c:	18d1      	adds	r1, r2, r3
 800083e:	2300      	movs	r3, #0
 8000840:	2200      	movs	r2, #0
 8000842:	f007 fc29 	bl	8008098 <xQueueGenericSend>
 8000846:	4603      	mov	r3, r0
 8000848:	2b01      	cmp	r3, #1
 800084a:	d0e2      	beq.n	8000812 <sendDriver_UART+0x52>
			}
			//if no transmission ongoing and pipe is not empty, start transmission now
            //disable the IRQ
        	NVIC_DisableIRQ(_driverHandle_UART[handleIndex]._irq);
 800084c:	4a34      	ldr	r2, [pc, #208]	; (8000920 <sendDriver_UART+0x160>)
 800084e:	697b      	ldr	r3, [r7, #20]
 8000850:	f241 11a8 	movw	r1, #4520	; 0x11a8
 8000854:	fb01 f303 	mul.w	r3, r1, r3
 8000858:	4413      	add	r3, r2
 800085a:	3308      	adds	r3, #8
 800085c:	781b      	ldrb	r3, [r3, #0]
 800085e:	b25b      	sxtb	r3, r3
 8000860:	4618      	mov	r0, r3
 8000862:	f7ff fe79 	bl	8000558 <__NVIC_DisableIRQ>

			if(huartHandle->gState == HAL_UART_STATE_READY){
 8000866:	68fb      	ldr	r3, [r7, #12]
 8000868:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800086a:	2b20      	cmp	r3, #32
 800086c:	d126      	bne.n	80008bc <sendDriver_UART+0xfc>
				_driverHandle_UART[handleIndex]._txByte=buff[txNum];
 800086e:	7cfb      	ldrb	r3, [r7, #19]
 8000870:	68ba      	ldr	r2, [r7, #8]
 8000872:	4413      	add	r3, r2
 8000874:	7818      	ldrb	r0, [r3, #0]
 8000876:	4a2a      	ldr	r2, [pc, #168]	; (8000920 <sendDriver_UART+0x160>)
 8000878:	697b      	ldr	r3, [r7, #20]
 800087a:	f241 11a8 	movw	r1, #4520	; 0x11a8
 800087e:	fb01 f303 	mul.w	r3, r1, r3
 8000882:	4413      	add	r3, r2
 8000884:	3302      	adds	r3, #2
 8000886:	4602      	mov	r2, r0
 8000888:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit_IT(_driverHandle_UART[handleIndex]._huartHandle, &_driverHandle_UART[handleIndex]._txByte, 1); //try restarting transmit if not ongoing
 800088a:	4a25      	ldr	r2, [pc, #148]	; (8000920 <sendDriver_UART+0x160>)
 800088c:	697b      	ldr	r3, [r7, #20]
 800088e:	f241 11a8 	movw	r1, #4520	; 0x11a8
 8000892:	fb01 f303 	mul.w	r3, r1, r3
 8000896:	4413      	add	r3, r2
 8000898:	3304      	adds	r3, #4
 800089a:	6818      	ldr	r0, [r3, #0]
 800089c:	697b      	ldr	r3, [r7, #20]
 800089e:	f241 12a8 	movw	r2, #4520	; 0x11a8
 80008a2:	fb02 f303 	mul.w	r3, r2, r3
 80008a6:	4a1e      	ldr	r2, [pc, #120]	; (8000920 <sendDriver_UART+0x160>)
 80008a8:	4413      	add	r3, r2
 80008aa:	3302      	adds	r3, #2
 80008ac:	2201      	movs	r2, #1
 80008ae:	4619      	mov	r1, r3
 80008b0:	f005 fe6e 	bl	8006590 <HAL_UART_Transmit_IT>
				txNum++;
 80008b4:	7cfb      	ldrb	r3, [r7, #19]
 80008b6:	3301      	adds	r3, #1
 80008b8:	74fb      	strb	r3, [r7, #19]
 80008ba:	e016      	b.n	80008ea <sendDriver_UART+0x12a>
			}else{
				if(xQueueSendToBack(_driverHandle_UART[handleIndex]._txQueueHandle,&buff[txNum],0)==pdTRUE){
 80008bc:	4a18      	ldr	r2, [pc, #96]	; (8000920 <sendDriver_UART+0x160>)
 80008be:	697b      	ldr	r3, [r7, #20]
 80008c0:	f241 11a8 	movw	r1, #4520	; 0x11a8
 80008c4:	fb01 f303 	mul.w	r3, r1, r3
 80008c8:	4413      	add	r3, r2
 80008ca:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 80008ce:	6818      	ldr	r0, [r3, #0]
 80008d0:	7cfb      	ldrb	r3, [r7, #19]
 80008d2:	68ba      	ldr	r2, [r7, #8]
 80008d4:	18d1      	adds	r1, r2, r3
 80008d6:	2300      	movs	r3, #0
 80008d8:	2200      	movs	r2, #0
 80008da:	f007 fbdd 	bl	8008098 <xQueueGenericSend>
 80008de:	4603      	mov	r3, r0
 80008e0:	2b01      	cmp	r3, #1
 80008e2:	d102      	bne.n	80008ea <sendDriver_UART+0x12a>
					txNum++;
 80008e4:	7cfb      	ldrb	r3, [r7, #19]
 80008e6:	3301      	adds	r3, #1
 80008e8:	74fb      	strb	r3, [r7, #19]
                }
			}

            NVIC_EnableIRQ(_driverHandle_UART[handleIndex]._irq);
 80008ea:	4a0d      	ldr	r2, [pc, #52]	; (8000920 <sendDriver_UART+0x160>)
 80008ec:	697b      	ldr	r3, [r7, #20]
 80008ee:	f241 11a8 	movw	r1, #4520	; 0x11a8
 80008f2:	fb01 f303 	mul.w	r3, r1, r3
 80008f6:	4413      	add	r3, r2
 80008f8:	3308      	adds	r3, #8
 80008fa:	781b      	ldrb	r3, [r3, #0]
 80008fc:	b25b      	sxtb	r3, r3
 80008fe:	4618      	mov	r0, r3
 8000900:	f7ff fdec 	bl	80004dc <__NVIC_EnableIRQ>

			return txNum;
 8000904:	7cfb      	ldrb	r3, [r7, #19]
 8000906:	e007      	b.n	8000918 <sendDriver_UART+0x158>
	for(uint32_t handleIndex = 0; handleIndex < MAX_UART_HANDLE; handleIndex++)
 8000908:	697b      	ldr	r3, [r7, #20]
 800090a:	3301      	adds	r3, #1
 800090c:	617b      	str	r3, [r7, #20]
 800090e:	697b      	ldr	r3, [r7, #20]
 8000910:	2b03      	cmp	r3, #3
 8000912:	f67f af63 	bls.w	80007dc <sendDriver_UART+0x1c>
		}
	}

	return 0;
 8000916:	2300      	movs	r3, #0
}
 8000918:	4618      	mov	r0, r3
 800091a:	3718      	adds	r7, #24
 800091c:	46bd      	mov	sp, r7
 800091e:	bd80      	pop	{r7, pc}
 8000920:	20000088 	.word	0x20000088

08000924 <HAL_UART_ErrorCallback>:
			xQueueReset(_driverHandle_UART[handleIndex]._txQueueHandle);
		}
	}
}

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huartHandle){
 8000924:	b580      	push	{r7, lr}
 8000926:	b084      	sub	sp, #16
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
//scanning the array with the structures to find the handle

    for(uint32_t handleIndex = 0; handleIndex < MAX_UART_HANDLE; handleIndex++)
 800092c:	2300      	movs	r3, #0
 800092e:	60fb      	str	r3, [r7, #12]
 8000930:	e027      	b.n	8000982 <HAL_UART_ErrorCallback+0x5e>
    {
        //if it finds the handle
        if((_driverHandle_UART[handleIndex]._usageFlag == 1) && (huartHandle == _driverHandle_UART[handleIndex]._huartHandle))
 8000932:	4a17      	ldr	r2, [pc, #92]	; (8000990 <HAL_UART_ErrorCallback+0x6c>)
 8000934:	68fb      	ldr	r3, [r7, #12]
 8000936:	f241 11a8 	movw	r1, #4520	; 0x11a8
 800093a:	fb01 f303 	mul.w	r3, r1, r3
 800093e:	4413      	add	r3, r2
 8000940:	781b      	ldrb	r3, [r3, #0]
 8000942:	b2db      	uxtb	r3, r3
 8000944:	2b01      	cmp	r3, #1
 8000946:	d119      	bne.n	800097c <HAL_UART_ErrorCallback+0x58>
 8000948:	4a11      	ldr	r2, [pc, #68]	; (8000990 <HAL_UART_ErrorCallback+0x6c>)
 800094a:	68fb      	ldr	r3, [r7, #12]
 800094c:	f241 11a8 	movw	r1, #4520	; 0x11a8
 8000950:	fb01 f303 	mul.w	r3, r1, r3
 8000954:	4413      	add	r3, r2
 8000956:	3304      	adds	r3, #4
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	687a      	ldr	r2, [r7, #4]
 800095c:	429a      	cmp	r2, r3
 800095e:	d10d      	bne.n	800097c <HAL_UART_ErrorCallback+0x58>
        {
            HAL_UART_Receive_IT(huartHandle,&_driverHandle_UART[handleIndex]._rxByte,1);
 8000960:	68fb      	ldr	r3, [r7, #12]
 8000962:	f241 12a8 	movw	r2, #4520	; 0x11a8
 8000966:	fb02 f303 	mul.w	r3, r2, r3
 800096a:	4a09      	ldr	r2, [pc, #36]	; (8000990 <HAL_UART_ErrorCallback+0x6c>)
 800096c:	4413      	add	r3, r2
 800096e:	3301      	adds	r3, #1
 8000970:	2201      	movs	r2, #1
 8000972:	4619      	mov	r1, r3
 8000974:	6878      	ldr	r0, [r7, #4]
 8000976:	f005 fe79 	bl	800666c <HAL_UART_Receive_IT>
            return;
 800097a:	e006      	b.n	800098a <HAL_UART_ErrorCallback+0x66>
    for(uint32_t handleIndex = 0; handleIndex < MAX_UART_HANDLE; handleIndex++)
 800097c:	68fb      	ldr	r3, [r7, #12]
 800097e:	3301      	adds	r3, #1
 8000980:	60fb      	str	r3, [r7, #12]
 8000982:	68fb      	ldr	r3, [r7, #12]
 8000984:	2b03      	cmp	r3, #3
 8000986:	d9d4      	bls.n	8000932 <HAL_UART_ErrorCallback+0xe>
        }
    }
    return;
 8000988:	bf00      	nop
    
}
 800098a:	3710      	adds	r7, #16
 800098c:	46bd      	mov	sp, r7
 800098e:	bd80      	pop	{r7, pc}
 8000990:	20000088 	.word	0x20000088

08000994 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b084      	sub	sp, #16
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
	//scanning the structure array
    for(uint32_t handleIndex = 0; handleIndex < MAX_UART_HANDLE; handleIndex++)
 800099c:	2300      	movs	r3, #0
 800099e:	60fb      	str	r3, [r7, #12]
 80009a0:	e068      	b.n	8000a74 <HAL_UART_RxCpltCallback+0xe0>
    {
        //if it finds the handle in the structure
        if(_driverHandle_UART[handleIndex]._usageFlag == 1 && huart == _driverHandle_UART[handleIndex]._huartHandle)
 80009a2:	4a38      	ldr	r2, [pc, #224]	; (8000a84 <HAL_UART_RxCpltCallback+0xf0>)
 80009a4:	68fb      	ldr	r3, [r7, #12]
 80009a6:	f241 11a8 	movw	r1, #4520	; 0x11a8
 80009aa:	fb01 f303 	mul.w	r3, r1, r3
 80009ae:	4413      	add	r3, r2
 80009b0:	781b      	ldrb	r3, [r3, #0]
 80009b2:	b2db      	uxtb	r3, r3
 80009b4:	2b01      	cmp	r3, #1
 80009b6:	d15a      	bne.n	8000a6e <HAL_UART_RxCpltCallback+0xda>
 80009b8:	4a32      	ldr	r2, [pc, #200]	; (8000a84 <HAL_UART_RxCpltCallback+0xf0>)
 80009ba:	68fb      	ldr	r3, [r7, #12]
 80009bc:	f241 11a8 	movw	r1, #4520	; 0x11a8
 80009c0:	fb01 f303 	mul.w	r3, r1, r3
 80009c4:	4413      	add	r3, r2
 80009c6:	3304      	adds	r3, #4
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	687a      	ldr	r2, [r7, #4]
 80009cc:	429a      	cmp	r2, r3
 80009ce:	d14e      	bne.n	8000a6e <HAL_UART_RxCpltCallback+0xda>
        {
        	if(_driverHandle_UART[handleIndex]._policyRX==keep_new && xQueueIsQueueFullFromISR(_driverHandle_UART[handleIndex]._rxQueueHandle)){
 80009d0:	4a2c      	ldr	r2, [pc, #176]	; (8000a84 <HAL_UART_RxCpltCallback+0xf0>)
 80009d2:	68fb      	ldr	r3, [r7, #12]
 80009d4:	f241 11a8 	movw	r1, #4520	; 0x11a8
 80009d8:	fb01 f303 	mul.w	r3, r1, r3
 80009dc:	4413      	add	r3, r2
 80009de:	f503 538d 	add.w	r3, r3, #4512	; 0x11a0
 80009e2:	3304      	adds	r3, #4
 80009e4:	781b      	ldrb	r3, [r3, #0]
 80009e6:	b2db      	uxtb	r3, r3
 80009e8:	2b01      	cmp	r3, #1
 80009ea:	d11d      	bne.n	8000a28 <HAL_UART_RxCpltCallback+0x94>
 80009ec:	4a25      	ldr	r2, [pc, #148]	; (8000a84 <HAL_UART_RxCpltCallback+0xf0>)
 80009ee:	68fb      	ldr	r3, [r7, #12]
 80009f0:	f241 11a8 	movw	r1, #4520	; 0x11a8
 80009f4:	fb01 f303 	mul.w	r3, r1, r3
 80009f8:	4413      	add	r3, r2
 80009fa:	330c      	adds	r3, #12
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	4618      	mov	r0, r3
 8000a00:	f007 ff54 	bl	80088ac <xQueueIsQueueFullFromISR>
 8000a04:	4603      	mov	r3, r0
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d00e      	beq.n	8000a28 <HAL_UART_RxCpltCallback+0x94>
        		uint8_t c;
        		xQueueReceiveFromISR(_driverHandle_UART[handleIndex]._rxQueueHandle, &c, NULL);
 8000a0a:	4a1e      	ldr	r2, [pc, #120]	; (8000a84 <HAL_UART_RxCpltCallback+0xf0>)
 8000a0c:	68fb      	ldr	r3, [r7, #12]
 8000a0e:	f241 11a8 	movw	r1, #4520	; 0x11a8
 8000a12:	fb01 f303 	mul.w	r3, r1, r3
 8000a16:	4413      	add	r3, r2
 8000a18:	330c      	adds	r3, #12
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	f107 010b 	add.w	r1, r7, #11
 8000a20:	2200      	movs	r2, #0
 8000a22:	4618      	mov	r0, r3
 8000a24:	f007 fdb2 	bl	800858c <xQueueReceiveFromISR>
        	}

            xQueueSendToBackFromISR(_driverHandle_UART[handleIndex]._rxQueueHandle,(void*)&_driverHandle_UART[handleIndex]._rxByte,NULL);
 8000a28:	4a16      	ldr	r2, [pc, #88]	; (8000a84 <HAL_UART_RxCpltCallback+0xf0>)
 8000a2a:	68fb      	ldr	r3, [r7, #12]
 8000a2c:	f241 11a8 	movw	r1, #4520	; 0x11a8
 8000a30:	fb01 f303 	mul.w	r3, r1, r3
 8000a34:	4413      	add	r3, r2
 8000a36:	330c      	adds	r3, #12
 8000a38:	6818      	ldr	r0, [r3, #0]
 8000a3a:	68fb      	ldr	r3, [r7, #12]
 8000a3c:	f241 12a8 	movw	r2, #4520	; 0x11a8
 8000a40:	fb02 f303 	mul.w	r3, r2, r3
 8000a44:	4a0f      	ldr	r2, [pc, #60]	; (8000a84 <HAL_UART_RxCpltCallback+0xf0>)
 8000a46:	4413      	add	r3, r2
 8000a48:	1c59      	adds	r1, r3, #1
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	f007 fc21 	bl	8008294 <xQueueGenericSendFromISR>

            //relaunching ISR
            HAL_UART_Receive_IT(huart,&_driverHandle_UART[handleIndex]._rxByte,1);
 8000a52:	68fb      	ldr	r3, [r7, #12]
 8000a54:	f241 12a8 	movw	r2, #4520	; 0x11a8
 8000a58:	fb02 f303 	mul.w	r3, r2, r3
 8000a5c:	4a09      	ldr	r2, [pc, #36]	; (8000a84 <HAL_UART_RxCpltCallback+0xf0>)
 8000a5e:	4413      	add	r3, r2
 8000a60:	3301      	adds	r3, #1
 8000a62:	2201      	movs	r2, #1
 8000a64:	4619      	mov	r1, r3
 8000a66:	6878      	ldr	r0, [r7, #4]
 8000a68:	f005 fe00 	bl	800666c <HAL_UART_Receive_IT>

            return;
 8000a6c:	e006      	b.n	8000a7c <HAL_UART_RxCpltCallback+0xe8>
    for(uint32_t handleIndex = 0; handleIndex < MAX_UART_HANDLE; handleIndex++)
 8000a6e:	68fb      	ldr	r3, [r7, #12]
 8000a70:	3301      	adds	r3, #1
 8000a72:	60fb      	str	r3, [r7, #12]
 8000a74:	68fb      	ldr	r3, [r7, #12]
 8000a76:	2b03      	cmp	r3, #3
 8000a78:	d993      	bls.n	80009a2 <HAL_UART_RxCpltCallback+0xe>
        }
    }
	return;
 8000a7a:	bf00      	nop
}
 8000a7c:	3710      	adds	r7, #16
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	bf00      	nop
 8000a84:	20000088 	.word	0x20000088

08000a88 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b084      	sub	sp, #16
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
	//scanning the structure array
    for(uint32_t handleIndex = 0; handleIndex < MAX_UART_HANDLE; handleIndex++)
 8000a90:	2300      	movs	r3, #0
 8000a92:	60fb      	str	r3, [r7, #12]
 8000a94:	e048      	b.n	8000b28 <HAL_UART_TxCpltCallback+0xa0>
    {
        //if it finds the handle in the structure
        if(_driverHandle_UART[handleIndex]._usageFlag == 1 && huart == _driverHandle_UART[handleIndex]._huartHandle)
 8000a96:	4a28      	ldr	r2, [pc, #160]	; (8000b38 <HAL_UART_TxCpltCallback+0xb0>)
 8000a98:	68fb      	ldr	r3, [r7, #12]
 8000a9a:	f241 11a8 	movw	r1, #4520	; 0x11a8
 8000a9e:	fb01 f303 	mul.w	r3, r1, r3
 8000aa2:	4413      	add	r3, r2
 8000aa4:	781b      	ldrb	r3, [r3, #0]
 8000aa6:	b2db      	uxtb	r3, r3
 8000aa8:	2b01      	cmp	r3, #1
 8000aaa:	d13a      	bne.n	8000b22 <HAL_UART_TxCpltCallback+0x9a>
 8000aac:	4a22      	ldr	r2, [pc, #136]	; (8000b38 <HAL_UART_TxCpltCallback+0xb0>)
 8000aae:	68fb      	ldr	r3, [r7, #12]
 8000ab0:	f241 11a8 	movw	r1, #4520	; 0x11a8
 8000ab4:	fb01 f303 	mul.w	r3, r1, r3
 8000ab8:	4413      	add	r3, r2
 8000aba:	3304      	adds	r3, #4
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	687a      	ldr	r2, [r7, #4]
 8000ac0:	429a      	cmp	r2, r3
 8000ac2:	d12e      	bne.n	8000b22 <HAL_UART_TxCpltCallback+0x9a>
        {
            
			if(xQueueReceiveFromISR(_driverHandle_UART[handleIndex]._txQueueHandle,&_driverHandle_UART[handleIndex]._txByte,NULL)==pdTRUE){
 8000ac4:	4a1c      	ldr	r2, [pc, #112]	; (8000b38 <HAL_UART_TxCpltCallback+0xb0>)
 8000ac6:	68fb      	ldr	r3, [r7, #12]
 8000ac8:	f241 11a8 	movw	r1, #4520	; 0x11a8
 8000acc:	fb01 f303 	mul.w	r3, r1, r3
 8000ad0:	4413      	add	r3, r2
 8000ad2:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8000ad6:	6818      	ldr	r0, [r3, #0]
 8000ad8:	68fb      	ldr	r3, [r7, #12]
 8000ada:	f241 12a8 	movw	r2, #4520	; 0x11a8
 8000ade:	fb02 f303 	mul.w	r3, r2, r3
 8000ae2:	4a15      	ldr	r2, [pc, #84]	; (8000b38 <HAL_UART_TxCpltCallback+0xb0>)
 8000ae4:	4413      	add	r3, r2
 8000ae6:	3302      	adds	r3, #2
 8000ae8:	2200      	movs	r2, #0
 8000aea:	4619      	mov	r1, r3
 8000aec:	f007 fd4e 	bl	800858c <xQueueReceiveFromISR>
 8000af0:	4603      	mov	r3, r0
 8000af2:	2b01      	cmp	r3, #1
 8000af4:	d11c      	bne.n	8000b30 <HAL_UART_TxCpltCallback+0xa8>
				HAL_UART_Transmit_IT(_driverHandle_UART[handleIndex]._huartHandle, &_driverHandle_UART[handleIndex]._txByte, 1);
 8000af6:	4a10      	ldr	r2, [pc, #64]	; (8000b38 <HAL_UART_TxCpltCallback+0xb0>)
 8000af8:	68fb      	ldr	r3, [r7, #12]
 8000afa:	f241 11a8 	movw	r1, #4520	; 0x11a8
 8000afe:	fb01 f303 	mul.w	r3, r1, r3
 8000b02:	4413      	add	r3, r2
 8000b04:	3304      	adds	r3, #4
 8000b06:	6818      	ldr	r0, [r3, #0]
 8000b08:	68fb      	ldr	r3, [r7, #12]
 8000b0a:	f241 12a8 	movw	r2, #4520	; 0x11a8
 8000b0e:	fb02 f303 	mul.w	r3, r2, r3
 8000b12:	4a09      	ldr	r2, [pc, #36]	; (8000b38 <HAL_UART_TxCpltCallback+0xb0>)
 8000b14:	4413      	add	r3, r2
 8000b16:	3302      	adds	r3, #2
 8000b18:	2201      	movs	r2, #1
 8000b1a:	4619      	mov	r1, r3
 8000b1c:	f005 fd38 	bl	8006590 <HAL_UART_Transmit_IT>
			}

            return;
 8000b20:	e006      	b.n	8000b30 <HAL_UART_TxCpltCallback+0xa8>
    for(uint32_t handleIndex = 0; handleIndex < MAX_UART_HANDLE; handleIndex++)
 8000b22:	68fb      	ldr	r3, [r7, #12]
 8000b24:	3301      	adds	r3, #1
 8000b26:	60fb      	str	r3, [r7, #12]
 8000b28:	68fb      	ldr	r3, [r7, #12]
 8000b2a:	2b03      	cmp	r3, #3
 8000b2c:	d9b3      	bls.n	8000a96 <HAL_UART_TxCpltCallback+0xe>
        }
    }
	return;
 8000b2e:	e000      	b.n	8000b32 <HAL_UART_TxCpltCallback+0xaa>
            return;
 8000b30:	bf00      	nop

}
 8000b32:	3710      	adds	r7, #16
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bd80      	pop	{r7, pc}
 8000b38:	20000088 	.word	0x20000088

08000b3c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b086      	sub	sp, #24
 8000b40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000b42:	463b      	mov	r3, r7
 8000b44:	2200      	movs	r2, #0
 8000b46:	601a      	str	r2, [r3, #0]
 8000b48:	605a      	str	r2, [r3, #4]
 8000b4a:	609a      	str	r2, [r3, #8]
 8000b4c:	60da      	str	r2, [r3, #12]
 8000b4e:	611a      	str	r2, [r3, #16]
 8000b50:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000b52:	4b29      	ldr	r3, [pc, #164]	; (8000bf8 <MX_ADC1_Init+0xbc>)
 8000b54:	4a29      	ldr	r2, [pc, #164]	; (8000bfc <MX_ADC1_Init+0xc0>)
 8000b56:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000b58:	4b27      	ldr	r3, [pc, #156]	; (8000bf8 <MX_ADC1_Init+0xbc>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000b5e:	4b26      	ldr	r3, [pc, #152]	; (8000bf8 <MX_ADC1_Init+0xbc>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000b64:	4b24      	ldr	r3, [pc, #144]	; (8000bf8 <MX_ADC1_Init+0xbc>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000b6a:	4b23      	ldr	r3, [pc, #140]	; (8000bf8 <MX_ADC1_Init+0xbc>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000b70:	4b21      	ldr	r3, [pc, #132]	; (8000bf8 <MX_ADC1_Init+0xbc>)
 8000b72:	2204      	movs	r2, #4
 8000b74:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000b76:	4b20      	ldr	r3, [pc, #128]	; (8000bf8 <MX_ADC1_Init+0xbc>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000b7c:	4b1e      	ldr	r3, [pc, #120]	; (8000bf8 <MX_ADC1_Init+0xbc>)
 8000b7e:	2201      	movs	r2, #1
 8000b80:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000b82:	4b1d      	ldr	r3, [pc, #116]	; (8000bf8 <MX_ADC1_Init+0xbc>)
 8000b84:	2201      	movs	r2, #1
 8000b86:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000b88:	4b1b      	ldr	r3, [pc, #108]	; (8000bf8 <MX_ADC1_Init+0xbc>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b90:	4b19      	ldr	r3, [pc, #100]	; (8000bf8 <MX_ADC1_Init+0xbc>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000b96:	4b18      	ldr	r3, [pc, #96]	; (8000bf8 <MX_ADC1_Init+0xbc>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000b9c:	4b16      	ldr	r3, [pc, #88]	; (8000bf8 <MX_ADC1_Init+0xbc>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000ba4:	4b14      	ldr	r3, [pc, #80]	; (8000bf8 <MX_ADC1_Init+0xbc>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000baa:	4b13      	ldr	r3, [pc, #76]	; (8000bf8 <MX_ADC1_Init+0xbc>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000bb2:	4811      	ldr	r0, [pc, #68]	; (8000bf8 <MX_ADC1_Init+0xbc>)
 8000bb4:	f001 fe56 	bl	8002864 <HAL_ADC_Init>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d001      	beq.n	8000bc2 <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 8000bbe:	f000 fc43 	bl	8001448 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000bc2:	4b0f      	ldr	r3, [pc, #60]	; (8000c00 <MX_ADC1_Init+0xc4>)
 8000bc4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000bc6:	2306      	movs	r3, #6
 8000bc8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000bce:	237f      	movs	r3, #127	; 0x7f
 8000bd0:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000bd2:	2304      	movs	r3, #4
 8000bd4:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000bda:	463b      	mov	r3, r7
 8000bdc:	4619      	mov	r1, r3
 8000bde:	4806      	ldr	r0, [pc, #24]	; (8000bf8 <MX_ADC1_Init+0xbc>)
 8000be0:	f001 ff8c 	bl	8002afc <HAL_ADC_ConfigChannel>
 8000be4:	4603      	mov	r3, r0
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d001      	beq.n	8000bee <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000bea:	f000 fc2d 	bl	8001448 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000bee:	bf00      	nop
 8000bf0:	3718      	adds	r7, #24
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	20004728 	.word	0x20004728
 8000bfc:	50040000 	.word	0x50040000
 8000c00:	04300002 	.word	0x04300002

08000c04 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b0a4      	sub	sp, #144	; 0x90
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c0c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000c10:	2200      	movs	r2, #0
 8000c12:	601a      	str	r2, [r3, #0]
 8000c14:	605a      	str	r2, [r3, #4]
 8000c16:	609a      	str	r2, [r3, #8]
 8000c18:	60da      	str	r2, [r3, #12]
 8000c1a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c1c:	f107 0314 	add.w	r3, r7, #20
 8000c20:	2268      	movs	r2, #104	; 0x68
 8000c22:	2100      	movs	r1, #0
 8000c24:	4618      	mov	r0, r3
 8000c26:	f009 fcd5 	bl	800a5d4 <memset>
  if(adcHandle->Instance==ADC1)
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	4a49      	ldr	r2, [pc, #292]	; (8000d54 <HAL_ADC_MspInit+0x150>)
 8000c30:	4293      	cmp	r3, r2
 8000c32:	f040 808a 	bne.w	8000d4a <HAL_ADC_MspInit+0x146>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000c36:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000c3a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000c3c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000c40:	673b      	str	r3, [r7, #112]	; 0x70
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8000c42:	2302      	movs	r3, #2
 8000c44:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000c46:	2301      	movs	r3, #1
 8000c48:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8000c4a:	2308      	movs	r3, #8
 8000c4c:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000c4e:	2307      	movs	r3, #7
 8000c50:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000c52:	2302      	movs	r3, #2
 8000c54:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000c56:	2302      	movs	r3, #2
 8000c58:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000c5a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000c5e:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c60:	f107 0314 	add.w	r3, r7, #20
 8000c64:	4618      	mov	r0, r3
 8000c66:	f003 ff81 	bl	8004b6c <HAL_RCCEx_PeriphCLKConfig>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d001      	beq.n	8000c74 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8000c70:	f000 fbea 	bl	8001448 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000c74:	4b38      	ldr	r3, [pc, #224]	; (8000d58 <HAL_ADC_MspInit+0x154>)
 8000c76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c78:	4a37      	ldr	r2, [pc, #220]	; (8000d58 <HAL_ADC_MspInit+0x154>)
 8000c7a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000c7e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c80:	4b35      	ldr	r3, [pc, #212]	; (8000d58 <HAL_ADC_MspInit+0x154>)
 8000c82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c84:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000c88:	613b      	str	r3, [r7, #16]
 8000c8a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c8c:	4b32      	ldr	r3, [pc, #200]	; (8000d58 <HAL_ADC_MspInit+0x154>)
 8000c8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c90:	4a31      	ldr	r2, [pc, #196]	; (8000d58 <HAL_ADC_MspInit+0x154>)
 8000c92:	f043 0304 	orr.w	r3, r3, #4
 8000c96:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c98:	4b2f      	ldr	r3, [pc, #188]	; (8000d58 <HAL_ADC_MspInit+0x154>)
 8000c9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c9c:	f003 0304 	and.w	r3, r3, #4
 8000ca0:	60fb      	str	r3, [r7, #12]
 8000ca2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ca4:	4b2c      	ldr	r3, [pc, #176]	; (8000d58 <HAL_ADC_MspInit+0x154>)
 8000ca6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ca8:	4a2b      	ldr	r2, [pc, #172]	; (8000d58 <HAL_ADC_MspInit+0x154>)
 8000caa:	f043 0302 	orr.w	r3, r3, #2
 8000cae:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cb0:	4b29      	ldr	r3, [pc, #164]	; (8000d58 <HAL_ADC_MspInit+0x154>)
 8000cb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cb4:	f003 0302 	and.w	r3, r3, #2
 8000cb8:	60bb      	str	r3, [r7, #8]
 8000cba:	68bb      	ldr	r3, [r7, #8]
    PC1     ------> ADC1_IN2
    PC2     ------> ADC1_IN3
    PC3     ------> ADC1_IN4
    PB1     ------> ADC1_IN16
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000cbc:	230f      	movs	r3, #15
 8000cbe:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000cc0:	230b      	movs	r3, #11
 8000cc2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ccc:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000cd0:	4619      	mov	r1, r3
 8000cd2:	4822      	ldr	r0, [pc, #136]	; (8000d5c <HAL_ADC_MspInit+0x158>)
 8000cd4:	f002 fed0 	bl	8003a78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000cd8:	2302      	movs	r3, #2
 8000cda:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000cdc:	230b      	movs	r3, #11
 8000cde:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ce8:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000cec:	4619      	mov	r1, r3
 8000cee:	481c      	ldr	r0, [pc, #112]	; (8000d60 <HAL_ADC_MspInit+0x15c>)
 8000cf0:	f002 fec2 	bl	8003a78 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000cf4:	4b1b      	ldr	r3, [pc, #108]	; (8000d64 <HAL_ADC_MspInit+0x160>)
 8000cf6:	4a1c      	ldr	r2, [pc, #112]	; (8000d68 <HAL_ADC_MspInit+0x164>)
 8000cf8:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8000cfa:	4b1a      	ldr	r3, [pc, #104]	; (8000d64 <HAL_ADC_MspInit+0x160>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d00:	4b18      	ldr	r3, [pc, #96]	; (8000d64 <HAL_ADC_MspInit+0x160>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d06:	4b17      	ldr	r3, [pc, #92]	; (8000d64 <HAL_ADC_MspInit+0x160>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000d0c:	4b15      	ldr	r3, [pc, #84]	; (8000d64 <HAL_ADC_MspInit+0x160>)
 8000d0e:	2280      	movs	r2, #128	; 0x80
 8000d10:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000d12:	4b14      	ldr	r3, [pc, #80]	; (8000d64 <HAL_ADC_MspInit+0x160>)
 8000d14:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d18:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000d1a:	4b12      	ldr	r3, [pc, #72]	; (8000d64 <HAL_ADC_MspInit+0x160>)
 8000d1c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000d20:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000d22:	4b10      	ldr	r3, [pc, #64]	; (8000d64 <HAL_ADC_MspInit+0x160>)
 8000d24:	2220      	movs	r2, #32
 8000d26:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000d28:	4b0e      	ldr	r3, [pc, #56]	; (8000d64 <HAL_ADC_MspInit+0x160>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000d2e:	480d      	ldr	r0, [pc, #52]	; (8000d64 <HAL_ADC_MspInit+0x160>)
 8000d30:	f002 fcbc 	bl	80036ac <HAL_DMA_Init>
 8000d34:	4603      	mov	r3, r0
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d001      	beq.n	8000d3e <HAL_ADC_MspInit+0x13a>
    {
      Error_Handler();
 8000d3a:	f000 fb85 	bl	8001448 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	4a08      	ldr	r2, [pc, #32]	; (8000d64 <HAL_ADC_MspInit+0x160>)
 8000d42:	651a      	str	r2, [r3, #80]	; 0x50
 8000d44:	4a07      	ldr	r2, [pc, #28]	; (8000d64 <HAL_ADC_MspInit+0x160>)
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000d4a:	bf00      	nop
 8000d4c:	3790      	adds	r7, #144	; 0x90
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	50040000 	.word	0x50040000
 8000d58:	40021000 	.word	0x40021000
 8000d5c:	48000800 	.word	0x48000800
 8000d60:	48000400 	.word	0x48000400
 8000d64:	20004790 	.word	0x20004790
 8000d68:	40020008 	.word	0x40020008

08000d6c <cBuffInit>:
	if(handle==NULL) return 0;

	return (handle->elemNum == 0);
}

void cBuffInit(circular_buffer_handle* handle, uint8_t* buff, uint32_t buffLen, uint32_t elemNum){
 8000d6c:	b480      	push	{r7}
 8000d6e:	b085      	sub	sp, #20
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	60f8      	str	r0, [r7, #12]
 8000d74:	60b9      	str	r1, [r7, #8]
 8000d76:	607a      	str	r2, [r7, #4]
 8000d78:	603b      	str	r3, [r7, #0]
	if(handle== NULL || buff==NULL) return;
 8000d7a:	68fb      	ldr	r3, [r7, #12]
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d00f      	beq.n	8000da0 <cBuffInit+0x34>
 8000d80:	68bb      	ldr	r3, [r7, #8]
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d00c      	beq.n	8000da0 <cBuffInit+0x34>

	handle->buff=buff;
 8000d86:	68fb      	ldr	r3, [r7, #12]
 8000d88:	68ba      	ldr	r2, [r7, #8]
 8000d8a:	601a      	str	r2, [r3, #0]
	handle->buffLen=buffLen;
 8000d8c:	68fb      	ldr	r3, [r7, #12]
 8000d8e:	687a      	ldr	r2, [r7, #4]
 8000d90:	605a      	str	r2, [r3, #4]
	handle->startIndex=0;
 8000d92:	68fb      	ldr	r3, [r7, #12]
 8000d94:	2200      	movs	r2, #0
 8000d96:	60da      	str	r2, [r3, #12]
	handle->elemNum=elemNum;
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	683a      	ldr	r2, [r7, #0]
 8000d9c:	609a      	str	r2, [r3, #8]

	return;
 8000d9e:	e000      	b.n	8000da2 <cBuffInit+0x36>
	if(handle== NULL || buff==NULL) return;
 8000da0:	bf00      	nop
}
 8000da2:	3714      	adds	r7, #20
 8000da4:	46bd      	mov	sp, r7
 8000da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000daa:	4770      	bx	lr

08000dac <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000db0:	4b17      	ldr	r3, [pc, #92]	; (8000e10 <MX_CAN1_Init+0x64>)
 8000db2:	4a18      	ldr	r2, [pc, #96]	; (8000e14 <MX_CAN1_Init+0x68>)
 8000db4:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 8000db6:	4b16      	ldr	r3, [pc, #88]	; (8000e10 <MX_CAN1_Init+0x64>)
 8000db8:	2210      	movs	r2, #16
 8000dba:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000dbc:	4b14      	ldr	r3, [pc, #80]	; (8000e10 <MX_CAN1_Init+0x64>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000dc2:	4b13      	ldr	r3, [pc, #76]	; (8000e10 <MX_CAN1_Init+0x64>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_6TQ;
 8000dc8:	4b11      	ldr	r3, [pc, #68]	; (8000e10 <MX_CAN1_Init+0x64>)
 8000dca:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 8000dce:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000dd0:	4b0f      	ldr	r3, [pc, #60]	; (8000e10 <MX_CAN1_Init+0x64>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000dd6:	4b0e      	ldr	r3, [pc, #56]	; (8000e10 <MX_CAN1_Init+0x64>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000ddc:	4b0c      	ldr	r3, [pc, #48]	; (8000e10 <MX_CAN1_Init+0x64>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000de2:	4b0b      	ldr	r3, [pc, #44]	; (8000e10 <MX_CAN1_Init+0x64>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000de8:	4b09      	ldr	r3, [pc, #36]	; (8000e10 <MX_CAN1_Init+0x64>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000dee:	4b08      	ldr	r3, [pc, #32]	; (8000e10 <MX_CAN1_Init+0x64>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000df4:	4b06      	ldr	r3, [pc, #24]	; (8000e10 <MX_CAN1_Init+0x64>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000dfa:	4805      	ldr	r0, [pc, #20]	; (8000e10 <MX_CAN1_Init+0x64>)
 8000dfc:	f002 fa78 	bl	80032f0 <HAL_CAN_Init>
 8000e00:	4603      	mov	r3, r0
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d001      	beq.n	8000e0a <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 8000e06:	f000 fb1f 	bl	8001448 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000e0a:	bf00      	nop
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	bf00      	nop
 8000e10:	200047d8 	.word	0x200047d8
 8000e14:	40006400 	.word	0x40006400

08000e18 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b08a      	sub	sp, #40	; 0x28
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e20:	f107 0314 	add.w	r3, r7, #20
 8000e24:	2200      	movs	r2, #0
 8000e26:	601a      	str	r2, [r3, #0]
 8000e28:	605a      	str	r2, [r3, #4]
 8000e2a:	609a      	str	r2, [r3, #8]
 8000e2c:	60da      	str	r2, [r3, #12]
 8000e2e:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	4a1f      	ldr	r2, [pc, #124]	; (8000eb4 <HAL_CAN_MspInit+0x9c>)
 8000e36:	4293      	cmp	r3, r2
 8000e38:	d138      	bne.n	8000eac <HAL_CAN_MspInit+0x94>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000e3a:	4b1f      	ldr	r3, [pc, #124]	; (8000eb8 <HAL_CAN_MspInit+0xa0>)
 8000e3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e3e:	4a1e      	ldr	r2, [pc, #120]	; (8000eb8 <HAL_CAN_MspInit+0xa0>)
 8000e40:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000e44:	6593      	str	r3, [r2, #88]	; 0x58
 8000e46:	4b1c      	ldr	r3, [pc, #112]	; (8000eb8 <HAL_CAN_MspInit+0xa0>)
 8000e48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000e4e:	613b      	str	r3, [r7, #16]
 8000e50:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e52:	4b19      	ldr	r3, [pc, #100]	; (8000eb8 <HAL_CAN_MspInit+0xa0>)
 8000e54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e56:	4a18      	ldr	r2, [pc, #96]	; (8000eb8 <HAL_CAN_MspInit+0xa0>)
 8000e58:	f043 0302 	orr.w	r3, r3, #2
 8000e5c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e5e:	4b16      	ldr	r3, [pc, #88]	; (8000eb8 <HAL_CAN_MspInit+0xa0>)
 8000e60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e62:	f003 0302 	and.w	r3, r3, #2
 8000e66:	60fb      	str	r3, [r7, #12]
 8000e68:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB5     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000e6a:	2320      	movs	r3, #32
 8000e6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e6e:	2302      	movs	r3, #2
 8000e70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e72:	2300      	movs	r3, #0
 8000e74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e76:	2303      	movs	r3, #3
 8000e78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_CAN1;
 8000e7a:	2303      	movs	r3, #3
 8000e7c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e7e:	f107 0314 	add.w	r3, r7, #20
 8000e82:	4619      	mov	r1, r3
 8000e84:	480d      	ldr	r0, [pc, #52]	; (8000ebc <HAL_CAN_MspInit+0xa4>)
 8000e86:	f002 fdf7 	bl	8003a78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000e8a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e90:	2302      	movs	r3, #2
 8000e92:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e94:	2300      	movs	r3, #0
 8000e96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e98:	2303      	movs	r3, #3
 8000e9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000e9c:	2309      	movs	r3, #9
 8000e9e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ea0:	f107 0314 	add.w	r3, r7, #20
 8000ea4:	4619      	mov	r1, r3
 8000ea6:	4805      	ldr	r0, [pc, #20]	; (8000ebc <HAL_CAN_MspInit+0xa4>)
 8000ea8:	f002 fde6 	bl	8003a78 <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8000eac:	bf00      	nop
 8000eae:	3728      	adds	r7, #40	; 0x28
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bd80      	pop	{r7, pc}
 8000eb4:	40006400 	.word	0x40006400
 8000eb8:	40021000 	.word	0x40021000
 8000ebc:	48000400 	.word	0x48000400

08000ec0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b082      	sub	sp, #8
 8000ec4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000ec6:	4b0c      	ldr	r3, [pc, #48]	; (8000ef8 <MX_DMA_Init+0x38>)
 8000ec8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000eca:	4a0b      	ldr	r2, [pc, #44]	; (8000ef8 <MX_DMA_Init+0x38>)
 8000ecc:	f043 0301 	orr.w	r3, r3, #1
 8000ed0:	6493      	str	r3, [r2, #72]	; 0x48
 8000ed2:	4b09      	ldr	r3, [pc, #36]	; (8000ef8 <MX_DMA_Init+0x38>)
 8000ed4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000ed6:	f003 0301 	and.w	r3, r3, #1
 8000eda:	607b      	str	r3, [r7, #4]
 8000edc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8000ede:	2200      	movs	r2, #0
 8000ee0:	2105      	movs	r1, #5
 8000ee2:	200b      	movs	r0, #11
 8000ee4:	f002 fbb8 	bl	8003658 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000ee8:	200b      	movs	r0, #11
 8000eea:	f002 fbd1 	bl	8003690 <HAL_NVIC_EnableIRQ>

}
 8000eee:	bf00      	nop
 8000ef0:	3708      	adds	r7, #8
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	40021000 	.word	0x40021000

08000efc <txFunc1>:
//declaring serial line
serial_line_handle line;

//defining serial line I/O functions
//using UART driver
uint8_t txFunc1(uint8_t byte){
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b082      	sub	sp, #8
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	4603      	mov	r3, r0
 8000f04:	71fb      	strb	r3, [r7, #7]
	return (sendDriver_UART(&huart1, &byte, 1)!=0);
 8000f06:	1dfb      	adds	r3, r7, #7
 8000f08:	2201      	movs	r2, #1
 8000f0a:	4619      	mov	r1, r3
 8000f0c:	4806      	ldr	r0, [pc, #24]	; (8000f28 <txFunc1+0x2c>)
 8000f0e:	f7ff fc57 	bl	80007c0 <sendDriver_UART>
 8000f12:	4603      	mov	r3, r0
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	bf14      	ite	ne
 8000f18:	2301      	movne	r3, #1
 8000f1a:	2300      	moveq	r3, #0
 8000f1c:	b2db      	uxtb	r3, r3
}
 8000f1e:	4618      	mov	r0, r3
 8000f20:	3708      	adds	r7, #8
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	20005ccc 	.word	0x20005ccc

08000f2c <rxFunc1>:
uint8_t rxFunc1(uint8_t* byte){
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b082      	sub	sp, #8
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
	return (receiveDriver_UART(&huart1, byte, 1)!=0);
 8000f34:	2201      	movs	r2, #1
 8000f36:	6879      	ldr	r1, [r7, #4]
 8000f38:	4806      	ldr	r0, [pc, #24]	; (8000f54 <rxFunc1+0x28>)
 8000f3a:	f7ff fbef 	bl	800071c <receiveDriver_UART>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	bf14      	ite	ne
 8000f44:	2301      	movne	r3, #1
 8000f46:	2300      	moveq	r3, #0
 8000f48:	b2db      	uxtb	r3, r3
}
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	3708      	adds	r7, #8
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	20005ccc 	.word	0x20005ccc

08000f58 <txFunc3>:
uint8_t txFunc3(uint8_t byte){
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b082      	sub	sp, #8
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	4603      	mov	r3, r0
 8000f60:	71fb      	strb	r3, [r7, #7]
	return (sendDriver_UART(&huart3, &byte, 1)!=0);
 8000f62:	1dfb      	adds	r3, r7, #7
 8000f64:	2201      	movs	r2, #1
 8000f66:	4619      	mov	r1, r3
 8000f68:	4806      	ldr	r0, [pc, #24]	; (8000f84 <txFunc3+0x2c>)
 8000f6a:	f7ff fc29 	bl	80007c0 <sendDriver_UART>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	bf14      	ite	ne
 8000f74:	2301      	movne	r3, #1
 8000f76:	2300      	moveq	r3, #0
 8000f78:	b2db      	uxtb	r3, r3
}
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	3708      	adds	r7, #8
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	20005dd4 	.word	0x20005dd4

08000f88 <rxFunc3>:
uint8_t rxFunc3(uint8_t* byte){
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b082      	sub	sp, #8
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
	return (receiveDriver_UART(&huart3, byte, 1)!=0);
 8000f90:	2201      	movs	r2, #1
 8000f92:	6879      	ldr	r1, [r7, #4]
 8000f94:	4806      	ldr	r0, [pc, #24]	; (8000fb0 <rxFunc3+0x28>)
 8000f96:	f7ff fbc1 	bl	800071c <receiveDriver_UART>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	bf14      	ite	ne
 8000fa0:	2301      	movne	r3, #1
 8000fa2:	2300      	moveq	r3, #0
 8000fa4:	b2db      	uxtb	r3, r3
}
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	3708      	adds	r7, #8
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	20005dd4 	.word	0x20005dd4

08000fb4 <txFunc4>:
uint8_t txFunc4(uint8_t byte){
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b082      	sub	sp, #8
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	4603      	mov	r3, r0
 8000fbc:	71fb      	strb	r3, [r7, #7]
	return (sendDriver_UART(&huart4, &byte, 1)!=0);
 8000fbe:	1dfb      	adds	r3, r7, #7
 8000fc0:	2201      	movs	r2, #1
 8000fc2:	4619      	mov	r1, r3
 8000fc4:	4806      	ldr	r0, [pc, #24]	; (8000fe0 <txFunc4+0x2c>)
 8000fc6:	f7ff fbfb 	bl	80007c0 <sendDriver_UART>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	bf14      	ite	ne
 8000fd0:	2301      	movne	r3, #1
 8000fd2:	2300      	moveq	r3, #0
 8000fd4:	b2db      	uxtb	r3, r3
}
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	3708      	adds	r7, #8
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	20005c48 	.word	0x20005c48

08000fe4 <rxFunc4>:
uint8_t rxFunc4(uint8_t* byte){
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b082      	sub	sp, #8
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
	return (receiveDriver_UART(&huart4, byte, 1)!=0);
 8000fec:	2201      	movs	r2, #1
 8000fee:	6879      	ldr	r1, [r7, #4]
 8000ff0:	4806      	ldr	r0, [pc, #24]	; (800100c <rxFunc4+0x28>)
 8000ff2:	f7ff fb93 	bl	800071c <receiveDriver_UART>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	bf14      	ite	ne
 8000ffc:	2301      	movne	r3, #1
 8000ffe:	2300      	moveq	r3, #0
 8001000:	b2db      	uxtb	r3, r3
}
 8001002:	4618      	mov	r0, r3
 8001004:	3708      	adds	r7, #8
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	20005c48 	.word	0x20005c48

08001010 <__io_putchar>:

/*PUTCHAR_PROTOTYPE{
   HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
   return ch;
}*/
PUTCHAR_PROTOTYPE{
 8001010:	b580      	push	{r7, lr}
 8001012:	b084      	sub	sp, #16
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
	uint8_t c=(uint8_t)ch;
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	b2db      	uxtb	r3, r3
 800101c:	73fb      	strb	r3, [r7, #15]
	sendDriver_UART(&huart2,&c,1);
 800101e:	f107 030f 	add.w	r3, r7, #15
 8001022:	2201      	movs	r2, #1
 8001024:	4619      	mov	r1, r3
 8001026:	4804      	ldr	r0, [pc, #16]	; (8001038 <__io_putchar+0x28>)
 8001028:	f7ff fbca 	bl	80007c0 <sendDriver_UART>
	return c;
 800102c:	7bfb      	ldrb	r3, [r7, #15]
}
 800102e:	4618      	mov	r0, r3
 8001030:	3710      	adds	r7, #16
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	20005d50 	.word	0x20005d50

0800103c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800103c:	b480      	push	{r7}
 800103e:	b085      	sub	sp, #20
 8001040:	af00      	add	r7, sp, #0
 8001042:	60f8      	str	r0, [r7, #12]
 8001044:	60b9      	str	r1, [r7, #8]
 8001046:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	4a07      	ldr	r2, [pc, #28]	; (8001068 <vApplicationGetIdleTaskMemory+0x2c>)
 800104c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800104e:	68bb      	ldr	r3, [r7, #8]
 8001050:	4a06      	ldr	r2, [pc, #24]	; (800106c <vApplicationGetIdleTaskMemory+0x30>)
 8001052:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	2280      	movs	r2, #128	; 0x80
 8001058:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800105a:	bf00      	nop
 800105c:	3714      	adds	r7, #20
 800105e:	46bd      	mov	sp, r7
 8001060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001064:	4770      	bx	lr
 8001066:	bf00      	nop
 8001068:	20005408 	.word	0x20005408
 800106c:	2000545c 	.word	0x2000545c

08001070 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 8001070:	b480      	push	{r7}
 8001072:	b085      	sub	sp, #20
 8001074:	af00      	add	r7, sp, #0
 8001076:	60f8      	str	r0, [r7, #12]
 8001078:	60b9      	str	r1, [r7, #8]
 800107a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	4a07      	ldr	r2, [pc, #28]	; (800109c <vApplicationGetTimerTaskMemory+0x2c>)
 8001080:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 8001082:	68bb      	ldr	r3, [r7, #8]
 8001084:	4a06      	ldr	r2, [pc, #24]	; (80010a0 <vApplicationGetTimerTaskMemory+0x30>)
 8001086:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800108e:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8001090:	bf00      	nop
 8001092:	3714      	adds	r7, #20
 8001094:	46bd      	mov	sp, r7
 8001096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109a:	4770      	bx	lr
 800109c:	2000565c 	.word	0x2000565c
 80010a0:	200056b0 	.word	0x200056b0

080010a4 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80010a4:	b5b0      	push	{r4, r5, r7, lr}
 80010a6:	b096      	sub	sp, #88	; 0x58
 80010a8:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadStaticDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128, defaultTaskBuffer, &defaultTaskControlBlock);
 80010aa:	4b1d      	ldr	r3, [pc, #116]	; (8001120 <MX_FREERTOS_Init+0x7c>)
 80010ac:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 80010b0:	461d      	mov	r5, r3
 80010b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010b6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80010ba:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80010be:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80010c2:	2100      	movs	r1, #0
 80010c4:	4618      	mov	r0, r3
 80010c6:	f006 fdfd 	bl	8007cc4 <osThreadCreate>
 80010ca:	4603      	mov	r3, r0
 80010cc:	4a15      	ldr	r2, [pc, #84]	; (8001124 <MX_FREERTOS_Init+0x80>)
 80010ce:	6013      	str	r3, [r2, #0]

  /* definition and creation of Task_firstcheck */
  osThreadStaticDef(Task_firstcheck, Check_pwr_temp, osPriorityNormal, 0, 128, Task_firstcheckBuffer, &Task_firstcheckControlBlock);
 80010d0:	4b15      	ldr	r3, [pc, #84]	; (8001128 <MX_FREERTOS_Init+0x84>)
 80010d2:	f107 0420 	add.w	r4, r7, #32
 80010d6:	461d      	mov	r5, r3
 80010d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010dc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80010e0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task_firstcheckHandle = osThreadCreate(osThread(Task_firstcheck), NULL);
 80010e4:	f107 0320 	add.w	r3, r7, #32
 80010e8:	2100      	movs	r1, #0
 80010ea:	4618      	mov	r0, r3
 80010ec:	f006 fdea 	bl	8007cc4 <osThreadCreate>
 80010f0:	4603      	mov	r3, r0
 80010f2:	4a0e      	ldr	r2, [pc, #56]	; (800112c <MX_FREERTOS_Init+0x88>)
 80010f4:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* definition and creation of ControlAlgorithmTask */
  osThreadStaticDef(ControlAlgorithmTask, Control_Algorithm_Task, osPriorityNormal, 0, 128, ControlAlgorithmTaskBuffer, &ControlAlgorithmTaskControlBlock);
 80010f6:	4b0e      	ldr	r3, [pc, #56]	; (8001130 <MX_FREERTOS_Init+0x8c>)
 80010f8:	1d3c      	adds	r4, r7, #4
 80010fa:	461d      	mov	r5, r3
 80010fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001100:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001104:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ControlAlgorithmTaskHandle = osThreadCreate(osThread(ControlAlgorithmTask), NULL);
 8001108:	1d3b      	adds	r3, r7, #4
 800110a:	2100      	movs	r1, #0
 800110c:	4618      	mov	r0, r3
 800110e:	f006 fdd9 	bl	8007cc4 <osThreadCreate>
 8001112:	4603      	mov	r3, r0
 8001114:	4a07      	ldr	r2, [pc, #28]	; (8001134 <MX_FREERTOS_Init+0x90>)
 8001116:	6013      	str	r3, [r2, #0]

  /* USER CODE END RTOS_THREADS */

}
 8001118:	bf00      	nop
 800111a:	3758      	adds	r7, #88	; 0x58
 800111c:	46bd      	mov	sp, r7
 800111e:	bdb0      	pop	{r4, r5, r7, pc}
 8001120:	0800ab80 	.word	0x0800ab80
 8001124:	20004a58 	.word	0x20004a58
 8001128:	0800abac 	.word	0x0800abac
 800112c:	20004cb0 	.word	0x20004cb0
 8001130:	0800abe0 	.word	0x0800abe0
 8001134:	20004800 	.word	0x20004800

08001138 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b082      	sub	sp, #8
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {

	  osDelay(1);
 8001140:	2001      	movs	r0, #1
 8001142:	f006 fde4 	bl	8007d0e <osDelay>
 8001146:	e7fb      	b.n	8001140 <StartDefaultTask+0x8>

08001148 <Check_pwr_temp>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Check_pwr_temp */
void Check_pwr_temp(void const * argument)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b082      	sub	sp, #8
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
	//init_tempsens_handler(&ntc_values);
	//float voltagebuf[NUM_ACTUATORS];
	//float currentbuf[NUM_ACTUATORS];
	//Start conversion for Sensing of actuators currents with DMA
	//HAL_ADC_Start_DMA(&hadc1,&voltagebuf,NUM_ACTUATORS);
	addDriver_UART(&huart2,USART2_IRQn,keep_old);
 8001150:	2200      	movs	r2, #0
 8001152:	2126      	movs	r1, #38	; 0x26
 8001154:	480b      	ldr	r0, [pc, #44]	; (8001184 <Check_pwr_temp+0x3c>)
 8001156:	f7ff fa23 	bl	80005a0 <addDriver_UART>
	/* Infinite loop */
	for(;;)
	{
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 800115a:	2120      	movs	r1, #32
 800115c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001160:	f002 fe1c 	bl	8003d9c <HAL_GPIO_TogglePin>
		HAL_Delay(100);
 8001164:	2064      	movs	r0, #100	; 0x64
 8001166:	f001 f9b9 	bl	80024dc <HAL_Delay>
		printf("Hello world\n");
 800116a:	4807      	ldr	r0, [pc, #28]	; (8001188 <Check_pwr_temp+0x40>)
 800116c:	f009 f952 	bl	800a414 <puts>
		printf("BEllooooooooo\n");
 8001170:	4806      	ldr	r0, [pc, #24]	; (800118c <Check_pwr_temp+0x44>)
 8001172:	f009 f94f 	bl	800a414 <puts>
		HAL_Delay(100);
 8001176:	2064      	movs	r0, #100	; 0x64
 8001178:	f001 f9b0 	bl	80024dc <HAL_Delay>
		    conv_result = ADC_Conversion(&hspi2,0);

		    ntc_values.temp[i]= conv_result;

		}*/
	    osDelay(1);
 800117c:	2001      	movs	r0, #1
 800117e:	f006 fdc6 	bl	8007d0e <osDelay>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8001182:	e7ea      	b.n	800115a <Check_pwr_temp+0x12>
 8001184:	20005d50 	.word	0x20005d50
 8001188:	0800abfc 	.word	0x0800abfc
 800118c:	0800ac08 	.word	0x0800ac08

08001190 <Control_Algorithm_Task>:
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
void Control_Algorithm_Task(void const * argument)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b084      	sub	sp, #16
 8001194:	af02      	add	r7, sp, #8
 8001196:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Control_Algorithm_Task */
	//Add console UART and serial UART to driver
	addDriver_UART(&huart1,USART1_IRQn,keep_old);
 8001198:	2200      	movs	r2, #0
 800119a:	2125      	movs	r1, #37	; 0x25
 800119c:	4814      	ldr	r0, [pc, #80]	; (80011f0 <Control_Algorithm_Task+0x60>)
 800119e:	f7ff f9ff 	bl	80005a0 <addDriver_UART>
	addDriver_UART(&huart3,USART3_IRQn,keep_old);
 80011a2:	2200      	movs	r2, #0
 80011a4:	2127      	movs	r1, #39	; 0x27
 80011a6:	4813      	ldr	r0, [pc, #76]	; (80011f4 <Control_Algorithm_Task+0x64>)
 80011a8:	f7ff f9fa 	bl	80005a0 <addDriver_UART>
	addDriver_UART(&huart4,UART4_IRQn,keep_old);
 80011ac:	2200      	movs	r2, #0
 80011ae:	2134      	movs	r1, #52	; 0x34
 80011b0:	4811      	ldr	r0, [pc, #68]	; (80011f8 <Control_Algorithm_Task+0x68>)
 80011b2:	f7ff f9f5 	bl	80005a0 <addDriver_UART>

	//Inizialize Serial Line for UART1
	sdlInitLine(&line,&txFunc1,&rxFunc1,50,2);
 80011b6:	2302      	movs	r3, #2
 80011b8:	9300      	str	r3, [sp, #0]
 80011ba:	2332      	movs	r3, #50	; 0x32
 80011bc:	4a0f      	ldr	r2, [pc, #60]	; (80011fc <Control_Algorithm_Task+0x6c>)
 80011be:	4910      	ldr	r1, [pc, #64]	; (8001200 <Control_Algorithm_Task+0x70>)
 80011c0:	4810      	ldr	r0, [pc, #64]	; (8001204 <Control_Algorithm_Task+0x74>)
 80011c2:	f000 f946 	bl	8001452 <sdlInitLine>
	//Inizialize Serial Line for UART3
	sdlInitLine(&line,&txFunc3,&rxFunc3,50,2);
 80011c6:	2302      	movs	r3, #2
 80011c8:	9300      	str	r3, [sp, #0]
 80011ca:	2332      	movs	r3, #50	; 0x32
 80011cc:	4a0e      	ldr	r2, [pc, #56]	; (8001208 <Control_Algorithm_Task+0x78>)
 80011ce:	490f      	ldr	r1, [pc, #60]	; (800120c <Control_Algorithm_Task+0x7c>)
 80011d0:	480c      	ldr	r0, [pc, #48]	; (8001204 <Control_Algorithm_Task+0x74>)
 80011d2:	f000 f93e 	bl	8001452 <sdlInitLine>
	//Inizialize Serial Line for UART4
	sdlInitLine(&line,&txFunc4,&rxFunc4,50,2);
 80011d6:	2302      	movs	r3, #2
 80011d8:	9300      	str	r3, [sp, #0]
 80011da:	2332      	movs	r3, #50	; 0x32
 80011dc:	4a0c      	ldr	r2, [pc, #48]	; (8001210 <Control_Algorithm_Task+0x80>)
 80011de:	490d      	ldr	r1, [pc, #52]	; (8001214 <Control_Algorithm_Task+0x84>)
 80011e0:	4808      	ldr	r0, [pc, #32]	; (8001204 <Control_Algorithm_Task+0x74>)
 80011e2:	f000 f936 	bl	8001452 <sdlInitLine>

  /* Infinite loop */
  for(;;)
  {

	  osDelay(1);
 80011e6:	2001      	movs	r0, #1
 80011e8:	f006 fd91 	bl	8007d0e <osDelay>
 80011ec:	e7fb      	b.n	80011e6 <Control_Algorithm_Task+0x56>
 80011ee:	bf00      	nop
 80011f0:	20005ccc 	.word	0x20005ccc
 80011f4:	20005dd4 	.word	0x20005dd4
 80011f8:	20005c48 	.word	0x20005c48
 80011fc:	08000f2d 	.word	0x08000f2d
 8001200:	08000efd 	.word	0x08000efd
 8001204:	20004f08 	.word	0x20004f08
 8001208:	08000f89 	.word	0x08000f89
 800120c:	08000f59 	.word	0x08000f59
 8001210:	08000fe5 	.word	0x08000fe5
 8001214:	08000fb5 	.word	0x08000fb5

08001218 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b08a      	sub	sp, #40	; 0x28
 800121c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800121e:	f107 0314 	add.w	r3, r7, #20
 8001222:	2200      	movs	r2, #0
 8001224:	601a      	str	r2, [r3, #0]
 8001226:	605a      	str	r2, [r3, #4]
 8001228:	609a      	str	r2, [r3, #8]
 800122a:	60da      	str	r2, [r3, #12]
 800122c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800122e:	4b3f      	ldr	r3, [pc, #252]	; (800132c <MX_GPIO_Init+0x114>)
 8001230:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001232:	4a3e      	ldr	r2, [pc, #248]	; (800132c <MX_GPIO_Init+0x114>)
 8001234:	f043 0304 	orr.w	r3, r3, #4
 8001238:	64d3      	str	r3, [r2, #76]	; 0x4c
 800123a:	4b3c      	ldr	r3, [pc, #240]	; (800132c <MX_GPIO_Init+0x114>)
 800123c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800123e:	f003 0304 	and.w	r3, r3, #4
 8001242:	613b      	str	r3, [r7, #16]
 8001244:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001246:	4b39      	ldr	r3, [pc, #228]	; (800132c <MX_GPIO_Init+0x114>)
 8001248:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800124a:	4a38      	ldr	r2, [pc, #224]	; (800132c <MX_GPIO_Init+0x114>)
 800124c:	f043 0301 	orr.w	r3, r3, #1
 8001250:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001252:	4b36      	ldr	r3, [pc, #216]	; (800132c <MX_GPIO_Init+0x114>)
 8001254:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001256:	f003 0301 	and.w	r3, r3, #1
 800125a:	60fb      	str	r3, [r7, #12]
 800125c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800125e:	4b33      	ldr	r3, [pc, #204]	; (800132c <MX_GPIO_Init+0x114>)
 8001260:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001262:	4a32      	ldr	r2, [pc, #200]	; (800132c <MX_GPIO_Init+0x114>)
 8001264:	f043 0302 	orr.w	r3, r3, #2
 8001268:	64d3      	str	r3, [r2, #76]	; 0x4c
 800126a:	4b30      	ldr	r3, [pc, #192]	; (800132c <MX_GPIO_Init+0x114>)
 800126c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800126e:	f003 0302 	and.w	r3, r3, #2
 8001272:	60bb      	str	r3, [r7, #8]
 8001274:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001276:	4b2d      	ldr	r3, [pc, #180]	; (800132c <MX_GPIO_Init+0x114>)
 8001278:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800127a:	4a2c      	ldr	r2, [pc, #176]	; (800132c <MX_GPIO_Init+0x114>)
 800127c:	f043 0308 	orr.w	r3, r3, #8
 8001280:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001282:	4b2a      	ldr	r3, [pc, #168]	; (800132c <MX_GPIO_Init+0x114>)
 8001284:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001286:	f003 0308 	and.w	r3, r3, #8
 800128a:	607b      	str	r3, [r7, #4]
 800128c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|LD4_Pin, GPIO_PIN_RESET);
 800128e:	2200      	movs	r2, #0
 8001290:	2130      	movs	r1, #48	; 0x30
 8001292:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001296:	f002 fd69 	bl	8003d6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_8, GPIO_PIN_RESET);
 800129a:	2200      	movs	r2, #0
 800129c:	f240 1101 	movw	r1, #257	; 0x101
 80012a0:	4823      	ldr	r0, [pc, #140]	; (8001330 <MX_GPIO_Init+0x118>)
 80012a2:	f002 fd63 	bl	8003d6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 80012a6:	2200      	movs	r2, #0
 80012a8:	2104      	movs	r1, #4
 80012aa:	4822      	ldr	r0, [pc, #136]	; (8001334 <MX_GPIO_Init+0x11c>)
 80012ac:	f002 fd5e 	bl	8003d6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80012b0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80012b6:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80012ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012bc:	2300      	movs	r3, #0
 80012be:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80012c0:	f107 0314 	add.w	r3, r7, #20
 80012c4:	4619      	mov	r1, r3
 80012c6:	481c      	ldr	r0, [pc, #112]	; (8001338 <MX_GPIO_Init+0x120>)
 80012c8:	f002 fbd6 	bl	8003a78 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PAPin */
  GPIO_InitStruct.Pin = GPIO_PIN_4|LD4_Pin;
 80012cc:	2330      	movs	r3, #48	; 0x30
 80012ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012d0:	2301      	movs	r3, #1
 80012d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d4:	2300      	movs	r3, #0
 80012d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012d8:	2300      	movs	r3, #0
 80012da:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012dc:	f107 0314 	add.w	r3, r7, #20
 80012e0:	4619      	mov	r1, r3
 80012e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012e6:	f002 fbc7 	bl	8003a78 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_8;
 80012ea:	f240 1301 	movw	r3, #257	; 0x101
 80012ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012f0:	2301      	movs	r3, #1
 80012f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f4:	2300      	movs	r3, #0
 80012f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012f8:	2300      	movs	r3, #0
 80012fa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012fc:	f107 0314 	add.w	r3, r7, #20
 8001300:	4619      	mov	r1, r3
 8001302:	480b      	ldr	r0, [pc, #44]	; (8001330 <MX_GPIO_Init+0x118>)
 8001304:	f002 fbb8 	bl	8003a78 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001308:	2304      	movs	r3, #4
 800130a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800130c:	2301      	movs	r3, #1
 800130e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001310:	2300      	movs	r3, #0
 8001312:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001314:	2300      	movs	r3, #0
 8001316:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001318:	f107 0314 	add.w	r3, r7, #20
 800131c:	4619      	mov	r1, r3
 800131e:	4805      	ldr	r0, [pc, #20]	; (8001334 <MX_GPIO_Init+0x11c>)
 8001320:	f002 fbaa 	bl	8003a78 <HAL_GPIO_Init>

}
 8001324:	bf00      	nop
 8001326:	3728      	adds	r7, #40	; 0x28
 8001328:	46bd      	mov	sp, r7
 800132a:	bd80      	pop	{r7, pc}
 800132c:	40021000 	.word	0x40021000
 8001330:	48000400 	.word	0x48000400
 8001334:	48000c00 	.word	0x48000c00
 8001338:	48000800 	.word	0x48000800

0800133c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001340:	f001 f88c 	bl	800245c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001344:	f000 f81d 	bl	8001382 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001348:	f7ff ff66 	bl	8001218 <MX_GPIO_Init>
  MX_DMA_Init();
 800134c:	f7ff fdb8 	bl	8000ec0 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001350:	f000 fe44 	bl	8001fdc <MX_USART2_UART_Init>
  MX_UART4_Init();
 8001354:	f000 fde2 	bl	8001f1c <MX_UART4_Init>
  MX_USART1_UART_Init();
 8001358:	f000 fe10 	bl	8001f7c <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 800135c:	f000 fe6e 	bl	800203c <MX_USART3_UART_Init>
  MX_CAN1_Init();
 8001360:	f7ff fd24 	bl	8000dac <MX_CAN1_Init>
  MX_TIM1_Init();
 8001364:	f000 faee 	bl	8001944 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001368:	f000 fba4 	bl	8001ab4 <MX_TIM2_Init>
  MX_TIM3_Init();
 800136c:	f000 fc3a 	bl	8001be4 <MX_TIM3_Init>
  MX_ADC1_Init();
 8001370:	f7ff fbe4 	bl	8000b3c <MX_ADC1_Init>
  MX_SPI2_Init();
 8001374:	f000 f8ba 	bl	80014ec <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8001378:	f7ff fe94 	bl	80010a4 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 800137c:	f006 fc9b 	bl	8007cb6 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001380:	e7fe      	b.n	8001380 <main+0x44>

08001382 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001382:	b580      	push	{r7, lr}
 8001384:	b096      	sub	sp, #88	; 0x58
 8001386:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001388:	f107 0314 	add.w	r3, r7, #20
 800138c:	2244      	movs	r2, #68	; 0x44
 800138e:	2100      	movs	r1, #0
 8001390:	4618      	mov	r0, r3
 8001392:	f009 f91f 	bl	800a5d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001396:	463b      	mov	r3, r7
 8001398:	2200      	movs	r2, #0
 800139a:	601a      	str	r2, [r3, #0]
 800139c:	605a      	str	r2, [r3, #4]
 800139e:	609a      	str	r2, [r3, #8]
 80013a0:	60da      	str	r2, [r3, #12]
 80013a2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80013a4:	f44f 7000 	mov.w	r0, #512	; 0x200
 80013a8:	f002 fd20 	bl	8003dec <HAL_PWREx_ControlVoltageScaling>
 80013ac:	4603      	mov	r3, r0
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d001      	beq.n	80013b6 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80013b2:	f000 f849 	bl	8001448 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80013b6:	2302      	movs	r3, #2
 80013b8:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013ba:	f44f 7380 	mov.w	r3, #256	; 0x100
 80013be:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80013c0:	2340      	movs	r3, #64	; 0x40
 80013c2:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013c4:	2302      	movs	r3, #2
 80013c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80013c8:	2302      	movs	r3, #2
 80013ca:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80013cc:	2301      	movs	r3, #1
 80013ce:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80013d0:	230a      	movs	r3, #10
 80013d2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80013d4:	2307      	movs	r3, #7
 80013d6:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80013d8:	2302      	movs	r3, #2
 80013da:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80013dc:	2302      	movs	r3, #2
 80013de:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013e0:	f107 0314 	add.w	r3, r7, #20
 80013e4:	4618      	mov	r0, r3
 80013e6:	f002 fd57 	bl	8003e98 <HAL_RCC_OscConfig>
 80013ea:	4603      	mov	r3, r0
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d001      	beq.n	80013f4 <SystemClock_Config+0x72>
  {
    Error_Handler();
 80013f0:	f000 f82a 	bl	8001448 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013f4:	230f      	movs	r3, #15
 80013f6:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013f8:	2303      	movs	r3, #3
 80013fa:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 80013fc:	2380      	movs	r3, #128	; 0x80
 80013fe:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001400:	2300      	movs	r3, #0
 8001402:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001404:	2300      	movs	r3, #0
 8001406:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001408:	463b      	mov	r3, r7
 800140a:	2102      	movs	r1, #2
 800140c:	4618      	mov	r0, r3
 800140e:	f003 f957 	bl	80046c0 <HAL_RCC_ClockConfig>
 8001412:	4603      	mov	r3, r0
 8001414:	2b00      	cmp	r3, #0
 8001416:	d001      	beq.n	800141c <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001418:	f000 f816 	bl	8001448 <Error_Handler>
  }
}
 800141c:	bf00      	nop
 800141e:	3758      	adds	r7, #88	; 0x58
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}

08001424 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b082      	sub	sp, #8
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	4a04      	ldr	r2, [pc, #16]	; (8001444 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001432:	4293      	cmp	r3, r2
 8001434:	d101      	bne.n	800143a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001436:	f001 f831 	bl	800249c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800143a:	bf00      	nop
 800143c:	3708      	adds	r7, #8
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	40001000 	.word	0x40001000

08001448 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001448:	b480      	push	{r7}
 800144a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800144c:	b672      	cpsid	i
}
 800144e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001450:	e7fe      	b.n	8001450 <Error_Handler+0x8>

08001452 <sdlInitLine>:
    return frameLen;
}
#endif

// SIMPLE DATA LINK FUNCTIONS -------------------------------------------------
void sdlInitLine(serial_line_handle* line, uint8_t (*txFunc)(uint8_t byte), uint8_t (*rxFunc)(uint8_t* byte), uint32_t timeout, uint32_t retries){
 8001452:	b580      	push	{r7, lr}
 8001454:	b084      	sub	sp, #16
 8001456:	af00      	add	r7, sp, #0
 8001458:	60f8      	str	r0, [r7, #12]
 800145a:	60b9      	str	r1, [r7, #8]
 800145c:	607a      	str	r2, [r7, #4]
 800145e:	603b      	str	r3, [r7, #0]
    if(line==NULL) return;
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	2b00      	cmp	r3, #0
 8001464:	d03d      	beq.n	80014e2 <sdlInitLine+0x90>

    line->txFunc=txFunc;
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	68ba      	ldr	r2, [r7, #8]
 800146a:	601a      	str	r2, [r3, #0]
    line->rxFunc=rxFunc;
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	687a      	ldr	r2, [r7, #4]
 8001470:	605a      	str	r2, [r3, #4]
    cBuffInit(&line->rxBuff,line->rxBuffArray,sizeof(line->rxBuffArray),0);
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	f103 0008 	add.w	r0, r3, #8
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	f103 0118 	add.w	r1, r3, #24
 800147e:	2300      	movs	r3, #0
 8001480:	f44f 7286 	mov.w	r2, #268	; 0x10c
 8001484:	f7ff fc72 	bl	8000d6c <cBuffInit>
    line->timeout=timeout;
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	683a      	ldr	r2, [r7, #0]
 800148c:	f8c3 2240 	str.w	r2, [r3, #576]	; 0x240
    line->retries=retries;
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	69ba      	ldr	r2, [r7, #24]
 8001494:	f8c3 2244 	str.w	r2, [r3, #580]	; 0x244
    line->lastRxHash=0;
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	2200      	movs	r2, #0
 800149c:	f8a3 2248 	strh.w	r2, [r3, #584]	; 0x248
    cBuffInit(&line->tmpBuff,line->tmpBuffArray,sizeof(line->tmpBuffArray),0);
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	f503 7092 	add.w	r0, r3, #292	; 0x124
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	f503 719a 	add.w	r1, r3, #308	; 0x134
 80014ac:	2300      	movs	r3, #0
 80014ae:	f44f 7286 	mov.w	r2, #268	; 0x10c
 80014b2:	f7ff fc5b 	bl	8000d6c <cBuffInit>

#ifdef SDL_ANTILOCK_DEPTH
    cBuffInit(&line->alockBuff,line->alockBuffArray,sizeof(line->alockBuffArray),0);
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	f503 7013 	add.w	r0, r3, #588	; 0x24c
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	f503 7117 	add.w	r1, r3, #604	; 0x25c
 80014c2:	2300      	movs	r3, #0
 80014c4:	f44f 7220 	mov.w	r2, #640	; 0x280
 80014c8:	f7ff fc50 	bl	8000d6c <cBuffInit>
    cBuffInit(&line->alockQueue,line->alockQueueArray,sizeof(line->alockQueueArray),0);
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	f203 40dc 	addw	r0, r3, #1244	; 0x4dc
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	f203 41ec 	addw	r1, r3, #1260	; 0x4ec
 80014d8:	2300      	movs	r3, #0
 80014da:	2214      	movs	r2, #20
 80014dc:	f7ff fc46 	bl	8000d6c <cBuffInit>
 80014e0:	e000      	b.n	80014e4 <sdlInitLine+0x92>
    if(line==NULL) return;
 80014e2:	bf00      	nop
#endif
}
 80014e4:	3710      	adds	r7, #16
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}
	...

080014ec <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80014f0:	4b1b      	ldr	r3, [pc, #108]	; (8001560 <MX_SPI2_Init+0x74>)
 80014f2:	4a1c      	ldr	r2, [pc, #112]	; (8001564 <MX_SPI2_Init+0x78>)
 80014f4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80014f6:	4b1a      	ldr	r3, [pc, #104]	; (8001560 <MX_SPI2_Init+0x74>)
 80014f8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80014fc:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80014fe:	4b18      	ldr	r3, [pc, #96]	; (8001560 <MX_SPI2_Init+0x74>)
 8001500:	2200      	movs	r2, #0
 8001502:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 8001504:	4b16      	ldr	r3, [pc, #88]	; (8001560 <MX_SPI2_Init+0x74>)
 8001506:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 800150a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800150c:	4b14      	ldr	r3, [pc, #80]	; (8001560 <MX_SPI2_Init+0x74>)
 800150e:	2200      	movs	r2, #0
 8001510:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001512:	4b13      	ldr	r3, [pc, #76]	; (8001560 <MX_SPI2_Init+0x74>)
 8001514:	2200      	movs	r2, #0
 8001516:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001518:	4b11      	ldr	r3, [pc, #68]	; (8001560 <MX_SPI2_Init+0x74>)
 800151a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800151e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001520:	4b0f      	ldr	r3, [pc, #60]	; (8001560 <MX_SPI2_Init+0x74>)
 8001522:	2218      	movs	r2, #24
 8001524:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001526:	4b0e      	ldr	r3, [pc, #56]	; (8001560 <MX_SPI2_Init+0x74>)
 8001528:	2200      	movs	r2, #0
 800152a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800152c:	4b0c      	ldr	r3, [pc, #48]	; (8001560 <MX_SPI2_Init+0x74>)
 800152e:	2200      	movs	r2, #0
 8001530:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001532:	4b0b      	ldr	r3, [pc, #44]	; (8001560 <MX_SPI2_Init+0x74>)
 8001534:	2200      	movs	r2, #0
 8001536:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001538:	4b09      	ldr	r3, [pc, #36]	; (8001560 <MX_SPI2_Init+0x74>)
 800153a:	2207      	movs	r2, #7
 800153c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800153e:	4b08      	ldr	r3, [pc, #32]	; (8001560 <MX_SPI2_Init+0x74>)
 8001540:	2200      	movs	r2, #0
 8001542:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001544:	4b06      	ldr	r3, [pc, #24]	; (8001560 <MX_SPI2_Init+0x74>)
 8001546:	2208      	movs	r2, #8
 8001548:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800154a:	4805      	ldr	r0, [pc, #20]	; (8001560 <MX_SPI2_Init+0x74>)
 800154c:	f003 fe6c 	bl	8005228 <HAL_SPI_Init>
 8001550:	4603      	mov	r3, r0
 8001552:	2b00      	cmp	r3, #0
 8001554:	d001      	beq.n	800155a <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8001556:	f7ff ff77 	bl	8001448 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800155a:	bf00      	nop
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	20005ab0 	.word	0x20005ab0
 8001564:	40003800 	.word	0x40003800

08001568 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b08a      	sub	sp, #40	; 0x28
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001570:	f107 0314 	add.w	r3, r7, #20
 8001574:	2200      	movs	r2, #0
 8001576:	601a      	str	r2, [r3, #0]
 8001578:	605a      	str	r2, [r3, #4]
 800157a:	609a      	str	r2, [r3, #8]
 800157c:	60da      	str	r2, [r3, #12]
 800157e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	4a17      	ldr	r2, [pc, #92]	; (80015e4 <HAL_SPI_MspInit+0x7c>)
 8001586:	4293      	cmp	r3, r2
 8001588:	d128      	bne.n	80015dc <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800158a:	4b17      	ldr	r3, [pc, #92]	; (80015e8 <HAL_SPI_MspInit+0x80>)
 800158c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800158e:	4a16      	ldr	r2, [pc, #88]	; (80015e8 <HAL_SPI_MspInit+0x80>)
 8001590:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001594:	6593      	str	r3, [r2, #88]	; 0x58
 8001596:	4b14      	ldr	r3, [pc, #80]	; (80015e8 <HAL_SPI_MspInit+0x80>)
 8001598:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800159a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800159e:	613b      	str	r3, [r7, #16]
 80015a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015a2:	4b11      	ldr	r3, [pc, #68]	; (80015e8 <HAL_SPI_MspInit+0x80>)
 80015a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015a6:	4a10      	ldr	r2, [pc, #64]	; (80015e8 <HAL_SPI_MspInit+0x80>)
 80015a8:	f043 0302 	orr.w	r3, r3, #2
 80015ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015ae:	4b0e      	ldr	r3, [pc, #56]	; (80015e8 <HAL_SPI_MspInit+0x80>)
 80015b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015b2:	f003 0302 	and.w	r3, r3, #2
 80015b6:	60fb      	str	r3, [r7, #12]
 80015b8:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80015ba:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80015be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015c0:	2302      	movs	r3, #2
 80015c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c4:	2300      	movs	r3, #0
 80015c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015c8:	2303      	movs	r3, #3
 80015ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80015cc:	2305      	movs	r3, #5
 80015ce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015d0:	f107 0314 	add.w	r3, r7, #20
 80015d4:	4619      	mov	r1, r3
 80015d6:	4805      	ldr	r0, [pc, #20]	; (80015ec <HAL_SPI_MspInit+0x84>)
 80015d8:	f002 fa4e 	bl	8003a78 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80015dc:	bf00      	nop
 80015de:	3728      	adds	r7, #40	; 0x28
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bd80      	pop	{r7, pc}
 80015e4:	40003800 	.word	0x40003800
 80015e8:	40021000 	.word	0x40021000
 80015ec:	48000400 	.word	0x48000400

080015f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b082      	sub	sp, #8
 80015f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015f6:	4b11      	ldr	r3, [pc, #68]	; (800163c <HAL_MspInit+0x4c>)
 80015f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015fa:	4a10      	ldr	r2, [pc, #64]	; (800163c <HAL_MspInit+0x4c>)
 80015fc:	f043 0301 	orr.w	r3, r3, #1
 8001600:	6613      	str	r3, [r2, #96]	; 0x60
 8001602:	4b0e      	ldr	r3, [pc, #56]	; (800163c <HAL_MspInit+0x4c>)
 8001604:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001606:	f003 0301 	and.w	r3, r3, #1
 800160a:	607b      	str	r3, [r7, #4]
 800160c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800160e:	4b0b      	ldr	r3, [pc, #44]	; (800163c <HAL_MspInit+0x4c>)
 8001610:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001612:	4a0a      	ldr	r2, [pc, #40]	; (800163c <HAL_MspInit+0x4c>)
 8001614:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001618:	6593      	str	r3, [r2, #88]	; 0x58
 800161a:	4b08      	ldr	r3, [pc, #32]	; (800163c <HAL_MspInit+0x4c>)
 800161c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800161e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001622:	603b      	str	r3, [r7, #0]
 8001624:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001626:	2200      	movs	r2, #0
 8001628:	210f      	movs	r1, #15
 800162a:	f06f 0001 	mvn.w	r0, #1
 800162e:	f002 f813 	bl	8003658 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001632:	bf00      	nop
 8001634:	3708      	adds	r7, #8
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	40021000 	.word	0x40021000

08001640 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b08e      	sub	sp, #56	; 0x38
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8001648:	2300      	movs	r3, #0
 800164a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800164e:	4b34      	ldr	r3, [pc, #208]	; (8001720 <HAL_InitTick+0xe0>)
 8001650:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001652:	4a33      	ldr	r2, [pc, #204]	; (8001720 <HAL_InitTick+0xe0>)
 8001654:	f043 0310 	orr.w	r3, r3, #16
 8001658:	6593      	str	r3, [r2, #88]	; 0x58
 800165a:	4b31      	ldr	r3, [pc, #196]	; (8001720 <HAL_InitTick+0xe0>)
 800165c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800165e:	f003 0310 	and.w	r3, r3, #16
 8001662:	60fb      	str	r3, [r7, #12]
 8001664:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001666:	f107 0210 	add.w	r2, r7, #16
 800166a:	f107 0314 	add.w	r3, r7, #20
 800166e:	4611      	mov	r1, r2
 8001670:	4618      	mov	r0, r3
 8001672:	f003 f9e9 	bl	8004a48 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001676:	6a3b      	ldr	r3, [r7, #32]
 8001678:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800167a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800167c:	2b00      	cmp	r3, #0
 800167e:	d103      	bne.n	8001688 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001680:	f003 f9b6 	bl	80049f0 <HAL_RCC_GetPCLK1Freq>
 8001684:	6378      	str	r0, [r7, #52]	; 0x34
 8001686:	e004      	b.n	8001692 <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001688:	f003 f9b2 	bl	80049f0 <HAL_RCC_GetPCLK1Freq>
 800168c:	4603      	mov	r3, r0
 800168e:	005b      	lsls	r3, r3, #1
 8001690:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001692:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001694:	4a23      	ldr	r2, [pc, #140]	; (8001724 <HAL_InitTick+0xe4>)
 8001696:	fba2 2303 	umull	r2, r3, r2, r3
 800169a:	0c9b      	lsrs	r3, r3, #18
 800169c:	3b01      	subs	r3, #1
 800169e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80016a0:	4b21      	ldr	r3, [pc, #132]	; (8001728 <HAL_InitTick+0xe8>)
 80016a2:	4a22      	ldr	r2, [pc, #136]	; (800172c <HAL_InitTick+0xec>)
 80016a4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80016a6:	4b20      	ldr	r3, [pc, #128]	; (8001728 <HAL_InitTick+0xe8>)
 80016a8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80016ac:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80016ae:	4a1e      	ldr	r2, [pc, #120]	; (8001728 <HAL_InitTick+0xe8>)
 80016b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016b2:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80016b4:	4b1c      	ldr	r3, [pc, #112]	; (8001728 <HAL_InitTick+0xe8>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016ba:	4b1b      	ldr	r3, [pc, #108]	; (8001728 <HAL_InitTick+0xe8>)
 80016bc:	2200      	movs	r2, #0
 80016be:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016c0:	4b19      	ldr	r3, [pc, #100]	; (8001728 <HAL_InitTick+0xe8>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80016c6:	4818      	ldr	r0, [pc, #96]	; (8001728 <HAL_InitTick+0xe8>)
 80016c8:	f003 fe51 	bl	800536e <HAL_TIM_Base_Init>
 80016cc:	4603      	mov	r3, r0
 80016ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80016d2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d11b      	bne.n	8001712 <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80016da:	4813      	ldr	r0, [pc, #76]	; (8001728 <HAL_InitTick+0xe8>)
 80016dc:	f003 fe9e 	bl	800541c <HAL_TIM_Base_Start_IT>
 80016e0:	4603      	mov	r3, r0
 80016e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80016e6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d111      	bne.n	8001712 <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80016ee:	2036      	movs	r0, #54	; 0x36
 80016f0:	f001 ffce 	bl	8003690 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	2b0f      	cmp	r3, #15
 80016f8:	d808      	bhi.n	800170c <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80016fa:	2200      	movs	r2, #0
 80016fc:	6879      	ldr	r1, [r7, #4]
 80016fe:	2036      	movs	r0, #54	; 0x36
 8001700:	f001 ffaa 	bl	8003658 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001704:	4a0a      	ldr	r2, [pc, #40]	; (8001730 <HAL_InitTick+0xf0>)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	6013      	str	r3, [r2, #0]
 800170a:	e002      	b.n	8001712 <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 800170c:	2301      	movs	r3, #1
 800170e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001712:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001716:	4618      	mov	r0, r3
 8001718:	3738      	adds	r7, #56	; 0x38
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	40021000 	.word	0x40021000
 8001724:	431bde83 	.word	0x431bde83
 8001728:	20005b14 	.word	0x20005b14
 800172c:	40001000 	.word	0x40001000
 8001730:	20000004 	.word	0x20000004

08001734 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001734:	b480      	push	{r7}
 8001736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001738:	e7fe      	b.n	8001738 <NMI_Handler+0x4>

0800173a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800173a:	b480      	push	{r7}
 800173c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800173e:	e7fe      	b.n	800173e <HardFault_Handler+0x4>

08001740 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001740:	b480      	push	{r7}
 8001742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001744:	e7fe      	b.n	8001744 <MemManage_Handler+0x4>

08001746 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001746:	b480      	push	{r7}
 8001748:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800174a:	e7fe      	b.n	800174a <BusFault_Handler+0x4>

0800174c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800174c:	b480      	push	{r7}
 800174e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001750:	e7fe      	b.n	8001750 <UsageFault_Handler+0x4>

08001752 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001752:	b480      	push	{r7}
 8001754:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001756:	bf00      	nop
 8001758:	46bd      	mov	sp, r7
 800175a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175e:	4770      	bx	lr

08001760 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001764:	4802      	ldr	r0, [pc, #8]	; (8001770 <DMA1_Channel1_IRQHandler+0x10>)
 8001766:	f002 f8d8 	bl	800391a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800176a:	bf00      	nop
 800176c:	bd80      	pop	{r7, pc}
 800176e:	bf00      	nop
 8001770:	20004790 	.word	0x20004790

08001774 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001778:	4802      	ldr	r0, [pc, #8]	; (8001784 <USART1_IRQHandler+0x10>)
 800177a:	f004 ffcd 	bl	8006718 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800177e:	bf00      	nop
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	20005ccc 	.word	0x20005ccc

08001788 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800178c:	4802      	ldr	r0, [pc, #8]	; (8001798 <USART2_IRQHandler+0x10>)
 800178e:	f004 ffc3 	bl	8006718 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001792:	bf00      	nop
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	20005d50 	.word	0x20005d50

0800179c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80017a0:	4802      	ldr	r0, [pc, #8]	; (80017ac <USART3_IRQHandler+0x10>)
 80017a2:	f004 ffb9 	bl	8006718 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80017a6:	bf00      	nop
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	20005dd4 	.word	0x20005dd4

080017b0 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80017b4:	4802      	ldr	r0, [pc, #8]	; (80017c0 <UART4_IRQHandler+0x10>)
 80017b6:	f004 ffaf 	bl	8006718 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80017ba:	bf00      	nop
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	20005c48 	.word	0x20005c48

080017c4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 underrun error interrupt.
  */
void TIM6_DAC_IRQHandler(void)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80017c8:	4802      	ldr	r0, [pc, #8]	; (80017d4 <TIM6_DAC_IRQHandler+0x10>)
 80017ca:	f003 fee4 	bl	8005596 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80017ce:	bf00      	nop
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	bf00      	nop
 80017d4:	20005b14 	.word	0x20005b14

080017d8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b086      	sub	sp, #24
 80017dc:	af00      	add	r7, sp, #0
 80017de:	60f8      	str	r0, [r7, #12]
 80017e0:	60b9      	str	r1, [r7, #8]
 80017e2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017e4:	2300      	movs	r3, #0
 80017e6:	617b      	str	r3, [r7, #20]
 80017e8:	e00a      	b.n	8001800 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80017ea:	f3af 8000 	nop.w
 80017ee:	4601      	mov	r1, r0
 80017f0:	68bb      	ldr	r3, [r7, #8]
 80017f2:	1c5a      	adds	r2, r3, #1
 80017f4:	60ba      	str	r2, [r7, #8]
 80017f6:	b2ca      	uxtb	r2, r1
 80017f8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017fa:	697b      	ldr	r3, [r7, #20]
 80017fc:	3301      	adds	r3, #1
 80017fe:	617b      	str	r3, [r7, #20]
 8001800:	697a      	ldr	r2, [r7, #20]
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	429a      	cmp	r2, r3
 8001806:	dbf0      	blt.n	80017ea <_read+0x12>
	}

return len;
 8001808:	687b      	ldr	r3, [r7, #4]
}
 800180a:	4618      	mov	r0, r3
 800180c:	3718      	adds	r7, #24
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}

08001812 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001812:	b580      	push	{r7, lr}
 8001814:	b086      	sub	sp, #24
 8001816:	af00      	add	r7, sp, #0
 8001818:	60f8      	str	r0, [r7, #12]
 800181a:	60b9      	str	r1, [r7, #8]
 800181c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800181e:	2300      	movs	r3, #0
 8001820:	617b      	str	r3, [r7, #20]
 8001822:	e009      	b.n	8001838 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001824:	68bb      	ldr	r3, [r7, #8]
 8001826:	1c5a      	adds	r2, r3, #1
 8001828:	60ba      	str	r2, [r7, #8]
 800182a:	781b      	ldrb	r3, [r3, #0]
 800182c:	4618      	mov	r0, r3
 800182e:	f7ff fbef 	bl	8001010 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001832:	697b      	ldr	r3, [r7, #20]
 8001834:	3301      	adds	r3, #1
 8001836:	617b      	str	r3, [r7, #20]
 8001838:	697a      	ldr	r2, [r7, #20]
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	429a      	cmp	r2, r3
 800183e:	dbf1      	blt.n	8001824 <_write+0x12>
	}
	return len;
 8001840:	687b      	ldr	r3, [r7, #4]
}
 8001842:	4618      	mov	r0, r3
 8001844:	3718      	adds	r7, #24
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}

0800184a <_close>:

int _close(int file)
{
 800184a:	b480      	push	{r7}
 800184c:	b083      	sub	sp, #12
 800184e:	af00      	add	r7, sp, #0
 8001850:	6078      	str	r0, [r7, #4]
	return -1;
 8001852:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001856:	4618      	mov	r0, r3
 8001858:	370c      	adds	r7, #12
 800185a:	46bd      	mov	sp, r7
 800185c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001860:	4770      	bx	lr

08001862 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001862:	b480      	push	{r7}
 8001864:	b083      	sub	sp, #12
 8001866:	af00      	add	r7, sp, #0
 8001868:	6078      	str	r0, [r7, #4]
 800186a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001872:	605a      	str	r2, [r3, #4]
	return 0;
 8001874:	2300      	movs	r3, #0
}
 8001876:	4618      	mov	r0, r3
 8001878:	370c      	adds	r7, #12
 800187a:	46bd      	mov	sp, r7
 800187c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001880:	4770      	bx	lr

08001882 <_isatty>:

int _isatty(int file)
{
 8001882:	b480      	push	{r7}
 8001884:	b083      	sub	sp, #12
 8001886:	af00      	add	r7, sp, #0
 8001888:	6078      	str	r0, [r7, #4]
	return 1;
 800188a:	2301      	movs	r3, #1
}
 800188c:	4618      	mov	r0, r3
 800188e:	370c      	adds	r7, #12
 8001890:	46bd      	mov	sp, r7
 8001892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001896:	4770      	bx	lr

08001898 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001898:	b480      	push	{r7}
 800189a:	b085      	sub	sp, #20
 800189c:	af00      	add	r7, sp, #0
 800189e:	60f8      	str	r0, [r7, #12]
 80018a0:	60b9      	str	r1, [r7, #8]
 80018a2:	607a      	str	r2, [r7, #4]
	return 0;
 80018a4:	2300      	movs	r3, #0
}
 80018a6:	4618      	mov	r0, r3
 80018a8:	3714      	adds	r7, #20
 80018aa:	46bd      	mov	sp, r7
 80018ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b0:	4770      	bx	lr
	...

080018b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b086      	sub	sp, #24
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018bc:	4a14      	ldr	r2, [pc, #80]	; (8001910 <_sbrk+0x5c>)
 80018be:	4b15      	ldr	r3, [pc, #84]	; (8001914 <_sbrk+0x60>)
 80018c0:	1ad3      	subs	r3, r2, r3
 80018c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018c4:	697b      	ldr	r3, [r7, #20]
 80018c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018c8:	4b13      	ldr	r3, [pc, #76]	; (8001918 <_sbrk+0x64>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d102      	bne.n	80018d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018d0:	4b11      	ldr	r3, [pc, #68]	; (8001918 <_sbrk+0x64>)
 80018d2:	4a12      	ldr	r2, [pc, #72]	; (800191c <_sbrk+0x68>)
 80018d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018d6:	4b10      	ldr	r3, [pc, #64]	; (8001918 <_sbrk+0x64>)
 80018d8:	681a      	ldr	r2, [r3, #0]
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	4413      	add	r3, r2
 80018de:	693a      	ldr	r2, [r7, #16]
 80018e0:	429a      	cmp	r2, r3
 80018e2:	d207      	bcs.n	80018f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018e4:	f008 fec4 	bl	800a670 <__errno>
 80018e8:	4603      	mov	r3, r0
 80018ea:	220c      	movs	r2, #12
 80018ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80018ee:	f04f 33ff 	mov.w	r3, #4294967295
 80018f2:	e009      	b.n	8001908 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018f4:	4b08      	ldr	r3, [pc, #32]	; (8001918 <_sbrk+0x64>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018fa:	4b07      	ldr	r3, [pc, #28]	; (8001918 <_sbrk+0x64>)
 80018fc:	681a      	ldr	r2, [r3, #0]
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	4413      	add	r3, r2
 8001902:	4a05      	ldr	r2, [pc, #20]	; (8001918 <_sbrk+0x64>)
 8001904:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001906:	68fb      	ldr	r3, [r7, #12]
}
 8001908:	4618      	mov	r0, r3
 800190a:	3718      	adds	r7, #24
 800190c:	46bd      	mov	sp, r7
 800190e:	bd80      	pop	{r7, pc}
 8001910:	20028000 	.word	0x20028000
 8001914:	00000400 	.word	0x00000400
 8001918:	20005b60 	.word	0x20005b60
 800191c:	20006218 	.word	0x20006218

08001920 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001920:	b480      	push	{r7}
 8001922:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001924:	4b06      	ldr	r3, [pc, #24]	; (8001940 <SystemInit+0x20>)
 8001926:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800192a:	4a05      	ldr	r2, [pc, #20]	; (8001940 <SystemInit+0x20>)
 800192c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001930:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001934:	bf00      	nop
 8001936:	46bd      	mov	sp, r7
 8001938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193c:	4770      	bx	lr
 800193e:	bf00      	nop
 8001940:	e000ed00 	.word	0xe000ed00

08001944 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b09a      	sub	sp, #104	; 0x68
 8001948:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800194a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800194e:	2200      	movs	r2, #0
 8001950:	601a      	str	r2, [r3, #0]
 8001952:	605a      	str	r2, [r3, #4]
 8001954:	609a      	str	r2, [r3, #8]
 8001956:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001958:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800195c:	2200      	movs	r2, #0
 800195e:	601a      	str	r2, [r3, #0]
 8001960:	605a      	str	r2, [r3, #4]
 8001962:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001964:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001968:	2200      	movs	r2, #0
 800196a:	601a      	str	r2, [r3, #0]
 800196c:	605a      	str	r2, [r3, #4]
 800196e:	609a      	str	r2, [r3, #8]
 8001970:	60da      	str	r2, [r3, #12]
 8001972:	611a      	str	r2, [r3, #16]
 8001974:	615a      	str	r2, [r3, #20]
 8001976:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001978:	1d3b      	adds	r3, r7, #4
 800197a:	222c      	movs	r2, #44	; 0x2c
 800197c:	2100      	movs	r1, #0
 800197e:	4618      	mov	r0, r3
 8001980:	f008 fe28 	bl	800a5d4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001984:	4b49      	ldr	r3, [pc, #292]	; (8001aac <MX_TIM1_Init+0x168>)
 8001986:	4a4a      	ldr	r2, [pc, #296]	; (8001ab0 <MX_TIM1_Init+0x16c>)
 8001988:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800198a:	4b48      	ldr	r3, [pc, #288]	; (8001aac <MX_TIM1_Init+0x168>)
 800198c:	2200      	movs	r2, #0
 800198e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001990:	4b46      	ldr	r3, [pc, #280]	; (8001aac <MX_TIM1_Init+0x168>)
 8001992:	2200      	movs	r2, #0
 8001994:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 39999;
 8001996:	4b45      	ldr	r3, [pc, #276]	; (8001aac <MX_TIM1_Init+0x168>)
 8001998:	f649 423f 	movw	r2, #39999	; 0x9c3f
 800199c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800199e:	4b43      	ldr	r3, [pc, #268]	; (8001aac <MX_TIM1_Init+0x168>)
 80019a0:	2200      	movs	r2, #0
 80019a2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80019a4:	4b41      	ldr	r3, [pc, #260]	; (8001aac <MX_TIM1_Init+0x168>)
 80019a6:	2200      	movs	r2, #0
 80019a8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019aa:	4b40      	ldr	r3, [pc, #256]	; (8001aac <MX_TIM1_Init+0x168>)
 80019ac:	2200      	movs	r2, #0
 80019ae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80019b0:	483e      	ldr	r0, [pc, #248]	; (8001aac <MX_TIM1_Init+0x168>)
 80019b2:	f003 fcdc 	bl	800536e <HAL_TIM_Base_Init>
 80019b6:	4603      	mov	r3, r0
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d001      	beq.n	80019c0 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80019bc:	f7ff fd44 	bl	8001448 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019c4:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80019c6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80019ca:	4619      	mov	r1, r3
 80019cc:	4837      	ldr	r0, [pc, #220]	; (8001aac <MX_TIM1_Init+0x168>)
 80019ce:	f004 f815 	bl	80059fc <HAL_TIM_ConfigClockSource>
 80019d2:	4603      	mov	r3, r0
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d001      	beq.n	80019dc <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80019d8:	f7ff fd36 	bl	8001448 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80019dc:	4833      	ldr	r0, [pc, #204]	; (8001aac <MX_TIM1_Init+0x168>)
 80019de:	f003 fd79 	bl	80054d4 <HAL_TIM_PWM_Init>
 80019e2:	4603      	mov	r3, r0
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d001      	beq.n	80019ec <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80019e8:	f7ff fd2e 	bl	8001448 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019ec:	2300      	movs	r3, #0
 80019ee:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80019f0:	2300      	movs	r3, #0
 80019f2:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019f4:	2300      	movs	r3, #0
 80019f6:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80019f8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80019fc:	4619      	mov	r1, r3
 80019fe:	482b      	ldr	r0, [pc, #172]	; (8001aac <MX_TIM1_Init+0x168>)
 8001a00:	f004 fc74 	bl	80062ec <HAL_TIMEx_MasterConfigSynchronization>
 8001a04:	4603      	mov	r3, r0
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d001      	beq.n	8001a0e <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8001a0a:	f7ff fd1d 	bl	8001448 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a0e:	2360      	movs	r3, #96	; 0x60
 8001a10:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8001a12:	2300      	movs	r3, #0
 8001a14:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a16:	2300      	movs	r3, #0
 8001a18:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001a22:	2300      	movs	r3, #0
 8001a24:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001a26:	2300      	movs	r3, #0
 8001a28:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001a2a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001a2e:	2200      	movs	r2, #0
 8001a30:	4619      	mov	r1, r3
 8001a32:	481e      	ldr	r0, [pc, #120]	; (8001aac <MX_TIM1_Init+0x168>)
 8001a34:	f003 fece 	bl	80057d4 <HAL_TIM_PWM_ConfigChannel>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d001      	beq.n	8001a42 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8001a3e:	f7ff fd03 	bl	8001448 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001a42:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001a46:	2204      	movs	r2, #4
 8001a48:	4619      	mov	r1, r3
 8001a4a:	4818      	ldr	r0, [pc, #96]	; (8001aac <MX_TIM1_Init+0x168>)
 8001a4c:	f003 fec2 	bl	80057d4 <HAL_TIM_PWM_ConfigChannel>
 8001a50:	4603      	mov	r3, r0
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d001      	beq.n	8001a5a <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8001a56:	f7ff fcf7 	bl	8001448 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001a62:	2300      	movs	r3, #0
 8001a64:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001a66:	2300      	movs	r3, #0
 8001a68:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001a6e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a72:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001a74:	2300      	movs	r3, #0
 8001a76:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001a7c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001a80:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001a82:	2300      	movs	r3, #0
 8001a84:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001a86:	2300      	movs	r3, #0
 8001a88:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001a8a:	1d3b      	adds	r3, r7, #4
 8001a8c:	4619      	mov	r1, r3
 8001a8e:	4807      	ldr	r0, [pc, #28]	; (8001aac <MX_TIM1_Init+0x168>)
 8001a90:	f004 fc9a 	bl	80063c8 <HAL_TIMEx_ConfigBreakDeadTime>
 8001a94:	4603      	mov	r3, r0
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d001      	beq.n	8001a9e <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 8001a9a:	f7ff fcd5 	bl	8001448 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001a9e:	4803      	ldr	r0, [pc, #12]	; (8001aac <MX_TIM1_Init+0x168>)
 8001aa0:	f000 f97e 	bl	8001da0 <HAL_TIM_MspPostInit>

}
 8001aa4:	bf00      	nop
 8001aa6:	3768      	adds	r7, #104	; 0x68
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bd80      	pop	{r7, pc}
 8001aac:	20005b64 	.word	0x20005b64
 8001ab0:	40012c00 	.word	0x40012c00

08001ab4 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b08e      	sub	sp, #56	; 0x38
 8001ab8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001aba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001abe:	2200      	movs	r2, #0
 8001ac0:	601a      	str	r2, [r3, #0]
 8001ac2:	605a      	str	r2, [r3, #4]
 8001ac4:	609a      	str	r2, [r3, #8]
 8001ac6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ac8:	f107 031c 	add.w	r3, r7, #28
 8001acc:	2200      	movs	r2, #0
 8001ace:	601a      	str	r2, [r3, #0]
 8001ad0:	605a      	str	r2, [r3, #4]
 8001ad2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001ad4:	463b      	mov	r3, r7
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	601a      	str	r2, [r3, #0]
 8001ada:	605a      	str	r2, [r3, #4]
 8001adc:	609a      	str	r2, [r3, #8]
 8001ade:	60da      	str	r2, [r3, #12]
 8001ae0:	611a      	str	r2, [r3, #16]
 8001ae2:	615a      	str	r2, [r3, #20]
 8001ae4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001ae6:	4b3e      	ldr	r3, [pc, #248]	; (8001be0 <MX_TIM2_Init+0x12c>)
 8001ae8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001aec:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001aee:	4b3c      	ldr	r3, [pc, #240]	; (8001be0 <MX_TIM2_Init+0x12c>)
 8001af0:	2200      	movs	r2, #0
 8001af2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001af4:	4b3a      	ldr	r3, [pc, #232]	; (8001be0 <MX_TIM2_Init+0x12c>)
 8001af6:	2200      	movs	r2, #0
 8001af8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 39999;
 8001afa:	4b39      	ldr	r3, [pc, #228]	; (8001be0 <MX_TIM2_Init+0x12c>)
 8001afc:	f649 423f 	movw	r2, #39999	; 0x9c3f
 8001b00:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b02:	4b37      	ldr	r3, [pc, #220]	; (8001be0 <MX_TIM2_Init+0x12c>)
 8001b04:	2200      	movs	r2, #0
 8001b06:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b08:	4b35      	ldr	r3, [pc, #212]	; (8001be0 <MX_TIM2_Init+0x12c>)
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001b0e:	4834      	ldr	r0, [pc, #208]	; (8001be0 <MX_TIM2_Init+0x12c>)
 8001b10:	f003 fc2d 	bl	800536e <HAL_TIM_Base_Init>
 8001b14:	4603      	mov	r3, r0
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d001      	beq.n	8001b1e <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8001b1a:	f7ff fc95 	bl	8001448 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b1e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b22:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001b24:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001b28:	4619      	mov	r1, r3
 8001b2a:	482d      	ldr	r0, [pc, #180]	; (8001be0 <MX_TIM2_Init+0x12c>)
 8001b2c:	f003 ff66 	bl	80059fc <HAL_TIM_ConfigClockSource>
 8001b30:	4603      	mov	r3, r0
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d001      	beq.n	8001b3a <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8001b36:	f7ff fc87 	bl	8001448 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001b3a:	4829      	ldr	r0, [pc, #164]	; (8001be0 <MX_TIM2_Init+0x12c>)
 8001b3c:	f003 fcca 	bl	80054d4 <HAL_TIM_PWM_Init>
 8001b40:	4603      	mov	r3, r0
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d001      	beq.n	8001b4a <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8001b46:	f7ff fc7f 	bl	8001448 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001b52:	f107 031c 	add.w	r3, r7, #28
 8001b56:	4619      	mov	r1, r3
 8001b58:	4821      	ldr	r0, [pc, #132]	; (8001be0 <MX_TIM2_Init+0x12c>)
 8001b5a:	f004 fbc7 	bl	80062ec <HAL_TIMEx_MasterConfigSynchronization>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d001      	beq.n	8001b68 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001b64:	f7ff fc70 	bl	8001448 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b68:	2360      	movs	r3, #96	; 0x60
 8001b6a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b70:	2300      	movs	r3, #0
 8001b72:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b74:	2300      	movs	r3, #0
 8001b76:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b78:	463b      	mov	r3, r7
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	4619      	mov	r1, r3
 8001b7e:	4818      	ldr	r0, [pc, #96]	; (8001be0 <MX_TIM2_Init+0x12c>)
 8001b80:	f003 fe28 	bl	80057d4 <HAL_TIM_PWM_ConfigChannel>
 8001b84:	4603      	mov	r3, r0
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d001      	beq.n	8001b8e <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8001b8a:	f7ff fc5d 	bl	8001448 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001b8e:	463b      	mov	r3, r7
 8001b90:	2204      	movs	r2, #4
 8001b92:	4619      	mov	r1, r3
 8001b94:	4812      	ldr	r0, [pc, #72]	; (8001be0 <MX_TIM2_Init+0x12c>)
 8001b96:	f003 fe1d 	bl	80057d4 <HAL_TIM_PWM_ConfigChannel>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d001      	beq.n	8001ba4 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 8001ba0:	f7ff fc52 	bl	8001448 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001ba4:	463b      	mov	r3, r7
 8001ba6:	2208      	movs	r2, #8
 8001ba8:	4619      	mov	r1, r3
 8001baa:	480d      	ldr	r0, [pc, #52]	; (8001be0 <MX_TIM2_Init+0x12c>)
 8001bac:	f003 fe12 	bl	80057d4 <HAL_TIM_PWM_ConfigChannel>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d001      	beq.n	8001bba <MX_TIM2_Init+0x106>
  {
    Error_Handler();
 8001bb6:	f7ff fc47 	bl	8001448 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001bba:	463b      	mov	r3, r7
 8001bbc:	220c      	movs	r2, #12
 8001bbe:	4619      	mov	r1, r3
 8001bc0:	4807      	ldr	r0, [pc, #28]	; (8001be0 <MX_TIM2_Init+0x12c>)
 8001bc2:	f003 fe07 	bl	80057d4 <HAL_TIM_PWM_ConfigChannel>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d001      	beq.n	8001bd0 <MX_TIM2_Init+0x11c>
  {
    Error_Handler();
 8001bcc:	f7ff fc3c 	bl	8001448 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001bd0:	4803      	ldr	r0, [pc, #12]	; (8001be0 <MX_TIM2_Init+0x12c>)
 8001bd2:	f000 f8e5 	bl	8001da0 <HAL_TIM_MspPostInit>

}
 8001bd6:	bf00      	nop
 8001bd8:	3738      	adds	r7, #56	; 0x38
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}
 8001bde:	bf00      	nop
 8001be0:	20005bb0 	.word	0x20005bb0

08001be4 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b08e      	sub	sp, #56	; 0x38
 8001be8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001bea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001bee:	2200      	movs	r2, #0
 8001bf0:	601a      	str	r2, [r3, #0]
 8001bf2:	605a      	str	r2, [r3, #4]
 8001bf4:	609a      	str	r2, [r3, #8]
 8001bf6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bf8:	f107 031c 	add.w	r3, r7, #28
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	601a      	str	r2, [r3, #0]
 8001c00:	605a      	str	r2, [r3, #4]
 8001c02:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c04:	463b      	mov	r3, r7
 8001c06:	2200      	movs	r2, #0
 8001c08:	601a      	str	r2, [r3, #0]
 8001c0a:	605a      	str	r2, [r3, #4]
 8001c0c:	609a      	str	r2, [r3, #8]
 8001c0e:	60da      	str	r2, [r3, #12]
 8001c10:	611a      	str	r2, [r3, #16]
 8001c12:	615a      	str	r2, [r3, #20]
 8001c14:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001c16:	4b3d      	ldr	r3, [pc, #244]	; (8001d0c <MX_TIM3_Init+0x128>)
 8001c18:	4a3d      	ldr	r2, [pc, #244]	; (8001d10 <MX_TIM3_Init+0x12c>)
 8001c1a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001c1c:	4b3b      	ldr	r3, [pc, #236]	; (8001d0c <MX_TIM3_Init+0x128>)
 8001c1e:	2200      	movs	r2, #0
 8001c20:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c22:	4b3a      	ldr	r3, [pc, #232]	; (8001d0c <MX_TIM3_Init+0x128>)
 8001c24:	2200      	movs	r2, #0
 8001c26:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 39999;
 8001c28:	4b38      	ldr	r3, [pc, #224]	; (8001d0c <MX_TIM3_Init+0x128>)
 8001c2a:	f649 423f 	movw	r2, #39999	; 0x9c3f
 8001c2e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c30:	4b36      	ldr	r3, [pc, #216]	; (8001d0c <MX_TIM3_Init+0x128>)
 8001c32:	2200      	movs	r2, #0
 8001c34:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c36:	4b35      	ldr	r3, [pc, #212]	; (8001d0c <MX_TIM3_Init+0x128>)
 8001c38:	2200      	movs	r2, #0
 8001c3a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001c3c:	4833      	ldr	r0, [pc, #204]	; (8001d0c <MX_TIM3_Init+0x128>)
 8001c3e:	f003 fb96 	bl	800536e <HAL_TIM_Base_Init>
 8001c42:	4603      	mov	r3, r0
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d001      	beq.n	8001c4c <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001c48:	f7ff fbfe 	bl	8001448 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c4c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c50:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001c52:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c56:	4619      	mov	r1, r3
 8001c58:	482c      	ldr	r0, [pc, #176]	; (8001d0c <MX_TIM3_Init+0x128>)
 8001c5a:	f003 fecf 	bl	80059fc <HAL_TIM_ConfigClockSource>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d001      	beq.n	8001c68 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8001c64:	f7ff fbf0 	bl	8001448 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001c68:	4828      	ldr	r0, [pc, #160]	; (8001d0c <MX_TIM3_Init+0x128>)
 8001c6a:	f003 fc33 	bl	80054d4 <HAL_TIM_PWM_Init>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d001      	beq.n	8001c78 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8001c74:	f7ff fbe8 	bl	8001448 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001c80:	f107 031c 	add.w	r3, r7, #28
 8001c84:	4619      	mov	r1, r3
 8001c86:	4821      	ldr	r0, [pc, #132]	; (8001d0c <MX_TIM3_Init+0x128>)
 8001c88:	f004 fb30 	bl	80062ec <HAL_TIMEx_MasterConfigSynchronization>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d001      	beq.n	8001c96 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001c92:	f7ff fbd9 	bl	8001448 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c96:	2360      	movs	r3, #96	; 0x60
 8001c98:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001ca6:	463b      	mov	r3, r7
 8001ca8:	2200      	movs	r2, #0
 8001caa:	4619      	mov	r1, r3
 8001cac:	4817      	ldr	r0, [pc, #92]	; (8001d0c <MX_TIM3_Init+0x128>)
 8001cae:	f003 fd91 	bl	80057d4 <HAL_TIM_PWM_ConfigChannel>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d001      	beq.n	8001cbc <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8001cb8:	f7ff fbc6 	bl	8001448 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001cbc:	463b      	mov	r3, r7
 8001cbe:	2204      	movs	r2, #4
 8001cc0:	4619      	mov	r1, r3
 8001cc2:	4812      	ldr	r0, [pc, #72]	; (8001d0c <MX_TIM3_Init+0x128>)
 8001cc4:	f003 fd86 	bl	80057d4 <HAL_TIM_PWM_ConfigChannel>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d001      	beq.n	8001cd2 <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 8001cce:	f7ff fbbb 	bl	8001448 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001cd2:	463b      	mov	r3, r7
 8001cd4:	2208      	movs	r2, #8
 8001cd6:	4619      	mov	r1, r3
 8001cd8:	480c      	ldr	r0, [pc, #48]	; (8001d0c <MX_TIM3_Init+0x128>)
 8001cda:	f003 fd7b 	bl	80057d4 <HAL_TIM_PWM_ConfigChannel>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d001      	beq.n	8001ce8 <MX_TIM3_Init+0x104>
  {
    Error_Handler();
 8001ce4:	f7ff fbb0 	bl	8001448 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001ce8:	463b      	mov	r3, r7
 8001cea:	220c      	movs	r2, #12
 8001cec:	4619      	mov	r1, r3
 8001cee:	4807      	ldr	r0, [pc, #28]	; (8001d0c <MX_TIM3_Init+0x128>)
 8001cf0:	f003 fd70 	bl	80057d4 <HAL_TIM_PWM_ConfigChannel>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d001      	beq.n	8001cfe <MX_TIM3_Init+0x11a>
  {
    Error_Handler();
 8001cfa:	f7ff fba5 	bl	8001448 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001cfe:	4803      	ldr	r0, [pc, #12]	; (8001d0c <MX_TIM3_Init+0x128>)
 8001d00:	f000 f84e 	bl	8001da0 <HAL_TIM_MspPostInit>

}
 8001d04:	bf00      	nop
 8001d06:	3738      	adds	r7, #56	; 0x38
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bd80      	pop	{r7, pc}
 8001d0c:	20005bfc 	.word	0x20005bfc
 8001d10:	40000400 	.word	0x40000400

08001d14 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001d14:	b480      	push	{r7}
 8001d16:	b087      	sub	sp, #28
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4a1c      	ldr	r2, [pc, #112]	; (8001d94 <HAL_TIM_Base_MspInit+0x80>)
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d10c      	bne.n	8001d40 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001d26:	4b1c      	ldr	r3, [pc, #112]	; (8001d98 <HAL_TIM_Base_MspInit+0x84>)
 8001d28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d2a:	4a1b      	ldr	r2, [pc, #108]	; (8001d98 <HAL_TIM_Base_MspInit+0x84>)
 8001d2c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001d30:	6613      	str	r3, [r2, #96]	; 0x60
 8001d32:	4b19      	ldr	r3, [pc, #100]	; (8001d98 <HAL_TIM_Base_MspInit+0x84>)
 8001d34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d36:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d3a:	617b      	str	r3, [r7, #20]
 8001d3c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001d3e:	e022      	b.n	8001d86 <HAL_TIM_Base_MspInit+0x72>
  else if(tim_baseHandle->Instance==TIM2)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d48:	d10c      	bne.n	8001d64 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001d4a:	4b13      	ldr	r3, [pc, #76]	; (8001d98 <HAL_TIM_Base_MspInit+0x84>)
 8001d4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d4e:	4a12      	ldr	r2, [pc, #72]	; (8001d98 <HAL_TIM_Base_MspInit+0x84>)
 8001d50:	f043 0301 	orr.w	r3, r3, #1
 8001d54:	6593      	str	r3, [r2, #88]	; 0x58
 8001d56:	4b10      	ldr	r3, [pc, #64]	; (8001d98 <HAL_TIM_Base_MspInit+0x84>)
 8001d58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d5a:	f003 0301 	and.w	r3, r3, #1
 8001d5e:	613b      	str	r3, [r7, #16]
 8001d60:	693b      	ldr	r3, [r7, #16]
}
 8001d62:	e010      	b.n	8001d86 <HAL_TIM_Base_MspInit+0x72>
  else if(tim_baseHandle->Instance==TIM3)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4a0c      	ldr	r2, [pc, #48]	; (8001d9c <HAL_TIM_Base_MspInit+0x88>)
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d10b      	bne.n	8001d86 <HAL_TIM_Base_MspInit+0x72>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001d6e:	4b0a      	ldr	r3, [pc, #40]	; (8001d98 <HAL_TIM_Base_MspInit+0x84>)
 8001d70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d72:	4a09      	ldr	r2, [pc, #36]	; (8001d98 <HAL_TIM_Base_MspInit+0x84>)
 8001d74:	f043 0302 	orr.w	r3, r3, #2
 8001d78:	6593      	str	r3, [r2, #88]	; 0x58
 8001d7a:	4b07      	ldr	r3, [pc, #28]	; (8001d98 <HAL_TIM_Base_MspInit+0x84>)
 8001d7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d7e:	f003 0302 	and.w	r3, r3, #2
 8001d82:	60fb      	str	r3, [r7, #12]
 8001d84:	68fb      	ldr	r3, [r7, #12]
}
 8001d86:	bf00      	nop
 8001d88:	371c      	adds	r7, #28
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d90:	4770      	bx	lr
 8001d92:	bf00      	nop
 8001d94:	40012c00 	.word	0x40012c00
 8001d98:	40021000 	.word	0x40021000
 8001d9c:	40000400 	.word	0x40000400

08001da0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b08c      	sub	sp, #48	; 0x30
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001da8:	f107 031c 	add.w	r3, r7, #28
 8001dac:	2200      	movs	r2, #0
 8001dae:	601a      	str	r2, [r3, #0]
 8001db0:	605a      	str	r2, [r3, #4]
 8001db2:	609a      	str	r2, [r3, #8]
 8001db4:	60da      	str	r2, [r3, #12]
 8001db6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4a52      	ldr	r2, [pc, #328]	; (8001f08 <HAL_TIM_MspPostInit+0x168>)
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d11e      	bne.n	8001e00 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dc2:	4b52      	ldr	r3, [pc, #328]	; (8001f0c <HAL_TIM_MspPostInit+0x16c>)
 8001dc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dc6:	4a51      	ldr	r2, [pc, #324]	; (8001f0c <HAL_TIM_MspPostInit+0x16c>)
 8001dc8:	f043 0301 	orr.w	r3, r3, #1
 8001dcc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001dce:	4b4f      	ldr	r3, [pc, #316]	; (8001f0c <HAL_TIM_MspPostInit+0x16c>)
 8001dd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dd2:	f003 0301 	and.w	r3, r3, #1
 8001dd6:	61bb      	str	r3, [r7, #24]
 8001dd8:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001dda:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001dde:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001de0:	2302      	movs	r3, #2
 8001de2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001de4:	2300      	movs	r3, #0
 8001de6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001de8:	2300      	movs	r3, #0
 8001dea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001dec:	2301      	movs	r3, #1
 8001dee:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001df0:	f107 031c 	add.w	r3, r7, #28
 8001df4:	4619      	mov	r1, r3
 8001df6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001dfa:	f001 fe3d 	bl	8003a78 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001dfe:	e07e      	b.n	8001efe <HAL_TIM_MspPostInit+0x15e>
  else if(timHandle->Instance==TIM2)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e08:	d13a      	bne.n	8001e80 <HAL_TIM_MspPostInit+0xe0>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e0a:	4b40      	ldr	r3, [pc, #256]	; (8001f0c <HAL_TIM_MspPostInit+0x16c>)
 8001e0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e0e:	4a3f      	ldr	r2, [pc, #252]	; (8001f0c <HAL_TIM_MspPostInit+0x16c>)
 8001e10:	f043 0301 	orr.w	r3, r3, #1
 8001e14:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e16:	4b3d      	ldr	r3, [pc, #244]	; (8001f0c <HAL_TIM_MspPostInit+0x16c>)
 8001e18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e1a:	f003 0301 	and.w	r3, r3, #1
 8001e1e:	617b      	str	r3, [r7, #20]
 8001e20:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e22:	4b3a      	ldr	r3, [pc, #232]	; (8001f0c <HAL_TIM_MspPostInit+0x16c>)
 8001e24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e26:	4a39      	ldr	r2, [pc, #228]	; (8001f0c <HAL_TIM_MspPostInit+0x16c>)
 8001e28:	f043 0302 	orr.w	r3, r3, #2
 8001e2c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e2e:	4b37      	ldr	r3, [pc, #220]	; (8001f0c <HAL_TIM_MspPostInit+0x16c>)
 8001e30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e32:	f003 0302 	and.w	r3, r3, #2
 8001e36:	613b      	str	r3, [r7, #16]
 8001e38:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001e3a:	2303      	movs	r3, #3
 8001e3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e3e:	2302      	movs	r3, #2
 8001e40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e42:	2300      	movs	r3, #0
 8001e44:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e46:	2300      	movs	r3, #0
 8001e48:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e4e:	f107 031c 	add.w	r3, r7, #28
 8001e52:	4619      	mov	r1, r3
 8001e54:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e58:	f001 fe0e 	bl	8003a78 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001e5c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001e60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e62:	2302      	movs	r3, #2
 8001e64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e66:	2300      	movs	r3, #0
 8001e68:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001e6e:	2301      	movs	r3, #1
 8001e70:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e72:	f107 031c 	add.w	r3, r7, #28
 8001e76:	4619      	mov	r1, r3
 8001e78:	4825      	ldr	r0, [pc, #148]	; (8001f10 <HAL_TIM_MspPostInit+0x170>)
 8001e7a:	f001 fdfd 	bl	8003a78 <HAL_GPIO_Init>
}
 8001e7e:	e03e      	b.n	8001efe <HAL_TIM_MspPostInit+0x15e>
  else if(timHandle->Instance==TIM3)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4a23      	ldr	r2, [pc, #140]	; (8001f14 <HAL_TIM_MspPostInit+0x174>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d139      	bne.n	8001efe <HAL_TIM_MspPostInit+0x15e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e8a:	4b20      	ldr	r3, [pc, #128]	; (8001f0c <HAL_TIM_MspPostInit+0x16c>)
 8001e8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e8e:	4a1f      	ldr	r2, [pc, #124]	; (8001f0c <HAL_TIM_MspPostInit+0x16c>)
 8001e90:	f043 0301 	orr.w	r3, r3, #1
 8001e94:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e96:	4b1d      	ldr	r3, [pc, #116]	; (8001f0c <HAL_TIM_MspPostInit+0x16c>)
 8001e98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e9a:	f003 0301 	and.w	r3, r3, #1
 8001e9e:	60fb      	str	r3, [r7, #12]
 8001ea0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ea2:	4b1a      	ldr	r3, [pc, #104]	; (8001f0c <HAL_TIM_MspPostInit+0x16c>)
 8001ea4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ea6:	4a19      	ldr	r2, [pc, #100]	; (8001f0c <HAL_TIM_MspPostInit+0x16c>)
 8001ea8:	f043 0304 	orr.w	r3, r3, #4
 8001eac:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001eae:	4b17      	ldr	r3, [pc, #92]	; (8001f0c <HAL_TIM_MspPostInit+0x16c>)
 8001eb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001eb2:	f003 0304 	and.w	r3, r3, #4
 8001eb6:	60bb      	str	r3, [r7, #8]
 8001eb8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001eba:	23c0      	movs	r3, #192	; 0xc0
 8001ebc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ebe:	2302      	movs	r3, #2
 8001ec0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001eca:	2302      	movs	r3, #2
 8001ecc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ece:	f107 031c 	add.w	r3, r7, #28
 8001ed2:	4619      	mov	r1, r3
 8001ed4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ed8:	f001 fdce 	bl	8003a78 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001edc:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001ee0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ee2:	2302      	movs	r3, #2
 8001ee4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eea:	2300      	movs	r3, #0
 8001eec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001eee:	2302      	movs	r3, #2
 8001ef0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ef2:	f107 031c 	add.w	r3, r7, #28
 8001ef6:	4619      	mov	r1, r3
 8001ef8:	4807      	ldr	r0, [pc, #28]	; (8001f18 <HAL_TIM_MspPostInit+0x178>)
 8001efa:	f001 fdbd 	bl	8003a78 <HAL_GPIO_Init>
}
 8001efe:	bf00      	nop
 8001f00:	3730      	adds	r7, #48	; 0x30
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}
 8001f06:	bf00      	nop
 8001f08:	40012c00 	.word	0x40012c00
 8001f0c:	40021000 	.word	0x40021000
 8001f10:	48000400 	.word	0x48000400
 8001f14:	40000400 	.word	0x40000400
 8001f18:	48000800 	.word	0x48000800

08001f1c <MX_UART4_Init>:
UART_HandleTypeDef huart2;
UART_HandleTypeDef huart3;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001f20:	4b14      	ldr	r3, [pc, #80]	; (8001f74 <MX_UART4_Init+0x58>)
 8001f22:	4a15      	ldr	r2, [pc, #84]	; (8001f78 <MX_UART4_Init+0x5c>)
 8001f24:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8001f26:	4b13      	ldr	r3, [pc, #76]	; (8001f74 <MX_UART4_Init+0x58>)
 8001f28:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001f2c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001f2e:	4b11      	ldr	r3, [pc, #68]	; (8001f74 <MX_UART4_Init+0x58>)
 8001f30:	2200      	movs	r2, #0
 8001f32:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001f34:	4b0f      	ldr	r3, [pc, #60]	; (8001f74 <MX_UART4_Init+0x58>)
 8001f36:	2200      	movs	r2, #0
 8001f38:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001f3a:	4b0e      	ldr	r3, [pc, #56]	; (8001f74 <MX_UART4_Init+0x58>)
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001f40:	4b0c      	ldr	r3, [pc, #48]	; (8001f74 <MX_UART4_Init+0x58>)
 8001f42:	220c      	movs	r2, #12
 8001f44:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8001f46:	4b0b      	ldr	r3, [pc, #44]	; (8001f74 <MX_UART4_Init+0x58>)
 8001f48:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001f4c:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f4e:	4b09      	ldr	r3, [pc, #36]	; (8001f74 <MX_UART4_Init+0x58>)
 8001f50:	2200      	movs	r2, #0
 8001f52:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001f54:	4b07      	ldr	r3, [pc, #28]	; (8001f74 <MX_UART4_Init+0x58>)
 8001f56:	2200      	movs	r2, #0
 8001f58:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001f5a:	4b06      	ldr	r3, [pc, #24]	; (8001f74 <MX_UART4_Init+0x58>)
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001f60:	4804      	ldr	r0, [pc, #16]	; (8001f74 <MX_UART4_Init+0x58>)
 8001f62:	f004 fac7 	bl	80064f4 <HAL_UART_Init>
 8001f66:	4603      	mov	r3, r0
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d001      	beq.n	8001f70 <MX_UART4_Init+0x54>
  {
    Error_Handler();
 8001f6c:	f7ff fa6c 	bl	8001448 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001f70:	bf00      	nop
 8001f72:	bd80      	pop	{r7, pc}
 8001f74:	20005c48 	.word	0x20005c48
 8001f78:	40004c00 	.word	0x40004c00

08001f7c <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001f80:	4b14      	ldr	r3, [pc, #80]	; (8001fd4 <MX_USART1_UART_Init+0x58>)
 8001f82:	4a15      	ldr	r2, [pc, #84]	; (8001fd8 <MX_USART1_UART_Init+0x5c>)
 8001f84:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001f86:	4b13      	ldr	r3, [pc, #76]	; (8001fd4 <MX_USART1_UART_Init+0x58>)
 8001f88:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001f8c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001f8e:	4b11      	ldr	r3, [pc, #68]	; (8001fd4 <MX_USART1_UART_Init+0x58>)
 8001f90:	2200      	movs	r2, #0
 8001f92:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001f94:	4b0f      	ldr	r3, [pc, #60]	; (8001fd4 <MX_USART1_UART_Init+0x58>)
 8001f96:	2200      	movs	r2, #0
 8001f98:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001f9a:	4b0e      	ldr	r3, [pc, #56]	; (8001fd4 <MX_USART1_UART_Init+0x58>)
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001fa0:	4b0c      	ldr	r3, [pc, #48]	; (8001fd4 <MX_USART1_UART_Init+0x58>)
 8001fa2:	220c      	movs	r2, #12
 8001fa4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001fa6:	4b0b      	ldr	r3, [pc, #44]	; (8001fd4 <MX_USART1_UART_Init+0x58>)
 8001fa8:	2200      	movs	r2, #0
 8001faa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001fac:	4b09      	ldr	r3, [pc, #36]	; (8001fd4 <MX_USART1_UART_Init+0x58>)
 8001fae:	2200      	movs	r2, #0
 8001fb0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001fb2:	4b08      	ldr	r3, [pc, #32]	; (8001fd4 <MX_USART1_UART_Init+0x58>)
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001fb8:	4b06      	ldr	r3, [pc, #24]	; (8001fd4 <MX_USART1_UART_Init+0x58>)
 8001fba:	2200      	movs	r2, #0
 8001fbc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001fbe:	4805      	ldr	r0, [pc, #20]	; (8001fd4 <MX_USART1_UART_Init+0x58>)
 8001fc0:	f004 fa98 	bl	80064f4 <HAL_UART_Init>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d001      	beq.n	8001fce <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001fca:	f7ff fa3d 	bl	8001448 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001fce:	bf00      	nop
 8001fd0:	bd80      	pop	{r7, pc}
 8001fd2:	bf00      	nop
 8001fd4:	20005ccc 	.word	0x20005ccc
 8001fd8:	40013800 	.word	0x40013800

08001fdc <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001fe0:	4b14      	ldr	r3, [pc, #80]	; (8002034 <MX_USART2_UART_Init+0x58>)
 8001fe2:	4a15      	ldr	r2, [pc, #84]	; (8002038 <MX_USART2_UART_Init+0x5c>)
 8001fe4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001fe6:	4b13      	ldr	r3, [pc, #76]	; (8002034 <MX_USART2_UART_Init+0x58>)
 8001fe8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001fec:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001fee:	4b11      	ldr	r3, [pc, #68]	; (8002034 <MX_USART2_UART_Init+0x58>)
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001ff4:	4b0f      	ldr	r3, [pc, #60]	; (8002034 <MX_USART2_UART_Init+0x58>)
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001ffa:	4b0e      	ldr	r3, [pc, #56]	; (8002034 <MX_USART2_UART_Init+0x58>)
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002000:	4b0c      	ldr	r3, [pc, #48]	; (8002034 <MX_USART2_UART_Init+0x58>)
 8002002:	220c      	movs	r2, #12
 8002004:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002006:	4b0b      	ldr	r3, [pc, #44]	; (8002034 <MX_USART2_UART_Init+0x58>)
 8002008:	2200      	movs	r2, #0
 800200a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800200c:	4b09      	ldr	r3, [pc, #36]	; (8002034 <MX_USART2_UART_Init+0x58>)
 800200e:	2200      	movs	r2, #0
 8002010:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002012:	4b08      	ldr	r3, [pc, #32]	; (8002034 <MX_USART2_UART_Init+0x58>)
 8002014:	2200      	movs	r2, #0
 8002016:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002018:	4b06      	ldr	r3, [pc, #24]	; (8002034 <MX_USART2_UART_Init+0x58>)
 800201a:	2200      	movs	r2, #0
 800201c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800201e:	4805      	ldr	r0, [pc, #20]	; (8002034 <MX_USART2_UART_Init+0x58>)
 8002020:	f004 fa68 	bl	80064f4 <HAL_UART_Init>
 8002024:	4603      	mov	r3, r0
 8002026:	2b00      	cmp	r3, #0
 8002028:	d001      	beq.n	800202e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800202a:	f7ff fa0d 	bl	8001448 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800202e:	bf00      	nop
 8002030:	bd80      	pop	{r7, pc}
 8002032:	bf00      	nop
 8002034:	20005d50 	.word	0x20005d50
 8002038:	40004400 	.word	0x40004400

0800203c <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002040:	4b14      	ldr	r3, [pc, #80]	; (8002094 <MX_USART3_UART_Init+0x58>)
 8002042:	4a15      	ldr	r2, [pc, #84]	; (8002098 <MX_USART3_UART_Init+0x5c>)
 8002044:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002046:	4b13      	ldr	r3, [pc, #76]	; (8002094 <MX_USART3_UART_Init+0x58>)
 8002048:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800204c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800204e:	4b11      	ldr	r3, [pc, #68]	; (8002094 <MX_USART3_UART_Init+0x58>)
 8002050:	2200      	movs	r2, #0
 8002052:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002054:	4b0f      	ldr	r3, [pc, #60]	; (8002094 <MX_USART3_UART_Init+0x58>)
 8002056:	2200      	movs	r2, #0
 8002058:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800205a:	4b0e      	ldr	r3, [pc, #56]	; (8002094 <MX_USART3_UART_Init+0x58>)
 800205c:	2200      	movs	r2, #0
 800205e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002060:	4b0c      	ldr	r3, [pc, #48]	; (8002094 <MX_USART3_UART_Init+0x58>)
 8002062:	220c      	movs	r2, #12
 8002064:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002066:	4b0b      	ldr	r3, [pc, #44]	; (8002094 <MX_USART3_UART_Init+0x58>)
 8002068:	2200      	movs	r2, #0
 800206a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800206c:	4b09      	ldr	r3, [pc, #36]	; (8002094 <MX_USART3_UART_Init+0x58>)
 800206e:	2200      	movs	r2, #0
 8002070:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002072:	4b08      	ldr	r3, [pc, #32]	; (8002094 <MX_USART3_UART_Init+0x58>)
 8002074:	2200      	movs	r2, #0
 8002076:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002078:	4b06      	ldr	r3, [pc, #24]	; (8002094 <MX_USART3_UART_Init+0x58>)
 800207a:	2200      	movs	r2, #0
 800207c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800207e:	4805      	ldr	r0, [pc, #20]	; (8002094 <MX_USART3_UART_Init+0x58>)
 8002080:	f004 fa38 	bl	80064f4 <HAL_UART_Init>
 8002084:	4603      	mov	r3, r0
 8002086:	2b00      	cmp	r3, #0
 8002088:	d001      	beq.n	800208e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800208a:	f7ff f9dd 	bl	8001448 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800208e:	bf00      	nop
 8002090:	bd80      	pop	{r7, pc}
 8002092:	bf00      	nop
 8002094:	20005dd4 	.word	0x20005dd4
 8002098:	40004800 	.word	0x40004800

0800209c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b0ac      	sub	sp, #176	; 0xb0
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020a4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80020a8:	2200      	movs	r2, #0
 80020aa:	601a      	str	r2, [r3, #0]
 80020ac:	605a      	str	r2, [r3, #4]
 80020ae:	609a      	str	r2, [r3, #8]
 80020b0:	60da      	str	r2, [r3, #12]
 80020b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80020b4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80020b8:	2268      	movs	r2, #104	; 0x68
 80020ba:	2100      	movs	r1, #0
 80020bc:	4618      	mov	r0, r3
 80020be:	f008 fa89 	bl	800a5d4 <memset>
  if(uartHandle->Instance==UART4)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	4aa1      	ldr	r2, [pc, #644]	; (800234c <HAL_UART_MspInit+0x2b0>)
 80020c8:	4293      	cmp	r3, r2
 80020ca:	f040 8089 	bne.w	80021e0 <HAL_UART_MspInit+0x144>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 80020ce:	2308      	movs	r3, #8
 80020d0:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 80020d2:	2300      	movs	r3, #0
 80020d4:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80020d6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80020da:	4618      	mov	r0, r3
 80020dc:	f002 fd46 	bl	8004b6c <HAL_RCCEx_PeriphCLKConfig>
 80020e0:	4603      	mov	r3, r0
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d001      	beq.n	80020ea <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80020e6:	f7ff f9af 	bl	8001448 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80020ea:	4b99      	ldr	r3, [pc, #612]	; (8002350 <HAL_UART_MspInit+0x2b4>)
 80020ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020ee:	4a98      	ldr	r2, [pc, #608]	; (8002350 <HAL_UART_MspInit+0x2b4>)
 80020f0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80020f4:	6593      	str	r3, [r2, #88]	; 0x58
 80020f6:	4b96      	ldr	r3, [pc, #600]	; (8002350 <HAL_UART_MspInit+0x2b4>)
 80020f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020fa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80020fe:	633b      	str	r3, [r7, #48]	; 0x30
 8002100:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002102:	4b93      	ldr	r3, [pc, #588]	; (8002350 <HAL_UART_MspInit+0x2b4>)
 8002104:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002106:	4a92      	ldr	r2, [pc, #584]	; (8002350 <HAL_UART_MspInit+0x2b4>)
 8002108:	f043 0301 	orr.w	r3, r3, #1
 800210c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800210e:	4b90      	ldr	r3, [pc, #576]	; (8002350 <HAL_UART_MspInit+0x2b4>)
 8002110:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002112:	f003 0301 	and.w	r3, r3, #1
 8002116:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002118:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800211a:	4b8d      	ldr	r3, [pc, #564]	; (8002350 <HAL_UART_MspInit+0x2b4>)
 800211c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800211e:	4a8c      	ldr	r2, [pc, #560]	; (8002350 <HAL_UART_MspInit+0x2b4>)
 8002120:	f043 0304 	orr.w	r3, r3, #4
 8002124:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002126:	4b8a      	ldr	r3, [pc, #552]	; (8002350 <HAL_UART_MspInit+0x2b4>)
 8002128:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800212a:	f003 0304 	and.w	r3, r3, #4
 800212e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002130:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002132:	4b87      	ldr	r3, [pc, #540]	; (8002350 <HAL_UART_MspInit+0x2b4>)
 8002134:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002136:	4a86      	ldr	r2, [pc, #536]	; (8002350 <HAL_UART_MspInit+0x2b4>)
 8002138:	f043 0302 	orr.w	r3, r3, #2
 800213c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800213e:	4b84      	ldr	r3, [pc, #528]	; (8002350 <HAL_UART_MspInit+0x2b4>)
 8002140:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002142:	f003 0302 	and.w	r3, r3, #2
 8002146:	627b      	str	r3, [r7, #36]	; 0x24
 8002148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    PA15 (JTDI)     ------> UART4_RTS
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    PB7     ------> UART4_CTS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800214a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800214e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002152:	2302      	movs	r3, #2
 8002154:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002158:	2300      	movs	r3, #0
 800215a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800215e:	2303      	movs	r3, #3
 8002160:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002164:	2308      	movs	r3, #8
 8002166:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800216a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800216e:	4619      	mov	r1, r3
 8002170:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002174:	f001 fc80 	bl	8003a78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002178:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800217c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002180:	2302      	movs	r3, #2
 8002182:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002186:	2300      	movs	r3, #0
 8002188:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800218c:	2303      	movs	r3, #3
 800218e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002192:	2308      	movs	r3, #8
 8002194:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002198:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800219c:	4619      	mov	r1, r3
 800219e:	486d      	ldr	r0, [pc, #436]	; (8002354 <HAL_UART_MspInit+0x2b8>)
 80021a0:	f001 fc6a 	bl	8003a78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80021a4:	2380      	movs	r3, #128	; 0x80
 80021a6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021aa:	2302      	movs	r3, #2
 80021ac:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021b0:	2300      	movs	r3, #0
 80021b2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021b6:	2303      	movs	r3, #3
 80021b8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80021bc:	2308      	movs	r3, #8
 80021be:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021c2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80021c6:	4619      	mov	r1, r3
 80021c8:	4863      	ldr	r0, [pc, #396]	; (8002358 <HAL_UART_MspInit+0x2bc>)
 80021ca:	f001 fc55 	bl	8003a78 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 80021ce:	2200      	movs	r2, #0
 80021d0:	2105      	movs	r1, #5
 80021d2:	2034      	movs	r0, #52	; 0x34
 80021d4:	f001 fa40 	bl	8003658 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 80021d8:	2034      	movs	r0, #52	; 0x34
 80021da:	f001 fa59 	bl	8003690 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80021de:	e109      	b.n	80023f4 <HAL_UART_MspInit+0x358>
  else if(uartHandle->Instance==USART1)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4a5d      	ldr	r2, [pc, #372]	; (800235c <HAL_UART_MspInit+0x2c0>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d166      	bne.n	80022b8 <HAL_UART_MspInit+0x21c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80021ea:	2301      	movs	r3, #1
 80021ec:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80021ee:	2300      	movs	r3, #0
 80021f0:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80021f2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80021f6:	4618      	mov	r0, r3
 80021f8:	f002 fcb8 	bl	8004b6c <HAL_RCCEx_PeriphCLKConfig>
 80021fc:	4603      	mov	r3, r0
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d001      	beq.n	8002206 <HAL_UART_MspInit+0x16a>
      Error_Handler();
 8002202:	f7ff f921 	bl	8001448 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002206:	4b52      	ldr	r3, [pc, #328]	; (8002350 <HAL_UART_MspInit+0x2b4>)
 8002208:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800220a:	4a51      	ldr	r2, [pc, #324]	; (8002350 <HAL_UART_MspInit+0x2b4>)
 800220c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002210:	6613      	str	r3, [r2, #96]	; 0x60
 8002212:	4b4f      	ldr	r3, [pc, #316]	; (8002350 <HAL_UART_MspInit+0x2b4>)
 8002214:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002216:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800221a:	623b      	str	r3, [r7, #32]
 800221c:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800221e:	4b4c      	ldr	r3, [pc, #304]	; (8002350 <HAL_UART_MspInit+0x2b4>)
 8002220:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002222:	4a4b      	ldr	r2, [pc, #300]	; (8002350 <HAL_UART_MspInit+0x2b4>)
 8002224:	f043 0301 	orr.w	r3, r3, #1
 8002228:	64d3      	str	r3, [r2, #76]	; 0x4c
 800222a:	4b49      	ldr	r3, [pc, #292]	; (8002350 <HAL_UART_MspInit+0x2b4>)
 800222c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800222e:	f003 0301 	and.w	r3, r3, #1
 8002232:	61fb      	str	r3, [r7, #28]
 8002234:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002236:	4b46      	ldr	r3, [pc, #280]	; (8002350 <HAL_UART_MspInit+0x2b4>)
 8002238:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800223a:	4a45      	ldr	r2, [pc, #276]	; (8002350 <HAL_UART_MspInit+0x2b4>)
 800223c:	f043 0302 	orr.w	r3, r3, #2
 8002240:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002242:	4b43      	ldr	r3, [pc, #268]	; (8002350 <HAL_UART_MspInit+0x2b4>)
 8002244:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002246:	f003 0302 	and.w	r3, r3, #2
 800224a:	61bb      	str	r3, [r7, #24]
 800224c:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800224e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002252:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002256:	2302      	movs	r3, #2
 8002258:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800225c:	2300      	movs	r3, #0
 800225e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002262:	2303      	movs	r3, #3
 8002264:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002268:	2307      	movs	r3, #7
 800226a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800226e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002272:	4619      	mov	r1, r3
 8002274:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002278:	f001 fbfe 	bl	8003a78 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800227c:	2340      	movs	r3, #64	; 0x40
 800227e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002282:	2302      	movs	r3, #2
 8002284:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002288:	2300      	movs	r3, #0
 800228a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800228e:	2303      	movs	r3, #3
 8002290:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002294:	2307      	movs	r3, #7
 8002296:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800229a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800229e:	4619      	mov	r1, r3
 80022a0:	482d      	ldr	r0, [pc, #180]	; (8002358 <HAL_UART_MspInit+0x2bc>)
 80022a2:	f001 fbe9 	bl	8003a78 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80022a6:	2200      	movs	r2, #0
 80022a8:	2105      	movs	r1, #5
 80022aa:	2025      	movs	r0, #37	; 0x25
 80022ac:	f001 f9d4 	bl	8003658 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80022b0:	2025      	movs	r0, #37	; 0x25
 80022b2:	f001 f9ed 	bl	8003690 <HAL_NVIC_EnableIRQ>
}
 80022b6:	e09d      	b.n	80023f4 <HAL_UART_MspInit+0x358>
  else if(uartHandle->Instance==USART2)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4a28      	ldr	r2, [pc, #160]	; (8002360 <HAL_UART_MspInit+0x2c4>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d150      	bne.n	8002364 <HAL_UART_MspInit+0x2c8>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80022c2:	2302      	movs	r3, #2
 80022c4:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80022c6:	2300      	movs	r3, #0
 80022c8:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80022ca:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80022ce:	4618      	mov	r0, r3
 80022d0:	f002 fc4c 	bl	8004b6c <HAL_RCCEx_PeriphCLKConfig>
 80022d4:	4603      	mov	r3, r0
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d001      	beq.n	80022de <HAL_UART_MspInit+0x242>
      Error_Handler();
 80022da:	f7ff f8b5 	bl	8001448 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80022de:	4b1c      	ldr	r3, [pc, #112]	; (8002350 <HAL_UART_MspInit+0x2b4>)
 80022e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022e2:	4a1b      	ldr	r2, [pc, #108]	; (8002350 <HAL_UART_MspInit+0x2b4>)
 80022e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022e8:	6593      	str	r3, [r2, #88]	; 0x58
 80022ea:	4b19      	ldr	r3, [pc, #100]	; (8002350 <HAL_UART_MspInit+0x2b4>)
 80022ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022f2:	617b      	str	r3, [r7, #20]
 80022f4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022f6:	4b16      	ldr	r3, [pc, #88]	; (8002350 <HAL_UART_MspInit+0x2b4>)
 80022f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022fa:	4a15      	ldr	r2, [pc, #84]	; (8002350 <HAL_UART_MspInit+0x2b4>)
 80022fc:	f043 0301 	orr.w	r3, r3, #1
 8002300:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002302:	4b13      	ldr	r3, [pc, #76]	; (8002350 <HAL_UART_MspInit+0x2b4>)
 8002304:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002306:	f003 0301 	and.w	r3, r3, #1
 800230a:	613b      	str	r3, [r7, #16]
 800230c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800230e:	230c      	movs	r3, #12
 8002310:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002314:	2302      	movs	r3, #2
 8002316:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800231a:	2300      	movs	r3, #0
 800231c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002320:	2303      	movs	r3, #3
 8002322:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002326:	2307      	movs	r3, #7
 8002328:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800232c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002330:	4619      	mov	r1, r3
 8002332:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002336:	f001 fb9f 	bl	8003a78 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 800233a:	2200      	movs	r2, #0
 800233c:	2105      	movs	r1, #5
 800233e:	2026      	movs	r0, #38	; 0x26
 8002340:	f001 f98a 	bl	8003658 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002344:	2026      	movs	r0, #38	; 0x26
 8002346:	f001 f9a3 	bl	8003690 <HAL_NVIC_EnableIRQ>
}
 800234a:	e053      	b.n	80023f4 <HAL_UART_MspInit+0x358>
 800234c:	40004c00 	.word	0x40004c00
 8002350:	40021000 	.word	0x40021000
 8002354:	48000800 	.word	0x48000800
 8002358:	48000400 	.word	0x48000400
 800235c:	40013800 	.word	0x40013800
 8002360:	40004400 	.word	0x40004400
  else if(uartHandle->Instance==USART3)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4a24      	ldr	r2, [pc, #144]	; (80023fc <HAL_UART_MspInit+0x360>)
 800236a:	4293      	cmp	r3, r2
 800236c:	d142      	bne.n	80023f4 <HAL_UART_MspInit+0x358>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800236e:	2304      	movs	r3, #4
 8002370:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002372:	2300      	movs	r3, #0
 8002374:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002376:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800237a:	4618      	mov	r0, r3
 800237c:	f002 fbf6 	bl	8004b6c <HAL_RCCEx_PeriphCLKConfig>
 8002380:	4603      	mov	r3, r0
 8002382:	2b00      	cmp	r3, #0
 8002384:	d001      	beq.n	800238a <HAL_UART_MspInit+0x2ee>
      Error_Handler();
 8002386:	f7ff f85f 	bl	8001448 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 800238a:	4b1d      	ldr	r3, [pc, #116]	; (8002400 <HAL_UART_MspInit+0x364>)
 800238c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800238e:	4a1c      	ldr	r2, [pc, #112]	; (8002400 <HAL_UART_MspInit+0x364>)
 8002390:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002394:	6593      	str	r3, [r2, #88]	; 0x58
 8002396:	4b1a      	ldr	r3, [pc, #104]	; (8002400 <HAL_UART_MspInit+0x364>)
 8002398:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800239a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800239e:	60fb      	str	r3, [r7, #12]
 80023a0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80023a2:	4b17      	ldr	r3, [pc, #92]	; (8002400 <HAL_UART_MspInit+0x364>)
 80023a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023a6:	4a16      	ldr	r2, [pc, #88]	; (8002400 <HAL_UART_MspInit+0x364>)
 80023a8:	f043 0304 	orr.w	r3, r3, #4
 80023ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80023ae:	4b14      	ldr	r3, [pc, #80]	; (8002400 <HAL_UART_MspInit+0x364>)
 80023b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023b2:	f003 0304 	and.w	r3, r3, #4
 80023b6:	60bb      	str	r3, [r7, #8]
 80023b8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80023ba:	2330      	movs	r3, #48	; 0x30
 80023bc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023c0:	2302      	movs	r3, #2
 80023c2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023c6:	2300      	movs	r3, #0
 80023c8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023cc:	2303      	movs	r3, #3
 80023ce:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80023d2:	2307      	movs	r3, #7
 80023d4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80023d8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80023dc:	4619      	mov	r1, r3
 80023de:	4809      	ldr	r0, [pc, #36]	; (8002404 <HAL_UART_MspInit+0x368>)
 80023e0:	f001 fb4a 	bl	8003a78 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 80023e4:	2200      	movs	r2, #0
 80023e6:	2105      	movs	r1, #5
 80023e8:	2027      	movs	r0, #39	; 0x27
 80023ea:	f001 f935 	bl	8003658 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80023ee:	2027      	movs	r0, #39	; 0x27
 80023f0:	f001 f94e 	bl	8003690 <HAL_NVIC_EnableIRQ>
}
 80023f4:	bf00      	nop
 80023f6:	37b0      	adds	r7, #176	; 0xb0
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bd80      	pop	{r7, pc}
 80023fc:	40004800 	.word	0x40004800
 8002400:	40021000 	.word	0x40021000
 8002404:	48000800 	.word	0x48000800

08002408 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002408:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002440 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800240c:	f7ff fa88 	bl	8001920 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002410:	480c      	ldr	r0, [pc, #48]	; (8002444 <LoopForever+0x6>)
  ldr r1, =_edata
 8002412:	490d      	ldr	r1, [pc, #52]	; (8002448 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002414:	4a0d      	ldr	r2, [pc, #52]	; (800244c <LoopForever+0xe>)
  movs r3, #0
 8002416:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002418:	e002      	b.n	8002420 <LoopCopyDataInit>

0800241a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800241a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800241c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800241e:	3304      	adds	r3, #4

08002420 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002420:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002422:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002424:	d3f9      	bcc.n	800241a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002426:	4a0a      	ldr	r2, [pc, #40]	; (8002450 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002428:	4c0a      	ldr	r4, [pc, #40]	; (8002454 <LoopForever+0x16>)
  movs r3, #0
 800242a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800242c:	e001      	b.n	8002432 <LoopFillZerobss>

0800242e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800242e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002430:	3204      	adds	r2, #4

08002432 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002432:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002434:	d3fb      	bcc.n	800242e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002436:	f008 f921 	bl	800a67c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800243a:	f7fe ff7f 	bl	800133c <main>

0800243e <LoopForever>:

LoopForever:
    b LoopForever
 800243e:	e7fe      	b.n	800243e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002440:	20028000 	.word	0x20028000
  ldr r0, =_sdata
 8002444:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002448:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 800244c:	0800ac88 	.word	0x0800ac88
  ldr r2, =_sbss
 8002450:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8002454:	20006218 	.word	0x20006218

08002458 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002458:	e7fe      	b.n	8002458 <ADC1_IRQHandler>
	...

0800245c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b082      	sub	sp, #8
 8002460:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002462:	2300      	movs	r3, #0
 8002464:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002466:	4b0c      	ldr	r3, [pc, #48]	; (8002498 <HAL_Init+0x3c>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4a0b      	ldr	r2, [pc, #44]	; (8002498 <HAL_Init+0x3c>)
 800246c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002470:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002472:	2003      	movs	r0, #3
 8002474:	f001 f8e5 	bl	8003642 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002478:	200f      	movs	r0, #15
 800247a:	f7ff f8e1 	bl	8001640 <HAL_InitTick>
 800247e:	4603      	mov	r3, r0
 8002480:	2b00      	cmp	r3, #0
 8002482:	d002      	beq.n	800248a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8002484:	2301      	movs	r3, #1
 8002486:	71fb      	strb	r3, [r7, #7]
 8002488:	e001      	b.n	800248e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800248a:	f7ff f8b1 	bl	80015f0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800248e:	79fb      	ldrb	r3, [r7, #7]
}
 8002490:	4618      	mov	r0, r3
 8002492:	3708      	adds	r7, #8
 8002494:	46bd      	mov	sp, r7
 8002496:	bd80      	pop	{r7, pc}
 8002498:	40022000 	.word	0x40022000

0800249c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800249c:	b480      	push	{r7}
 800249e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80024a0:	4b06      	ldr	r3, [pc, #24]	; (80024bc <HAL_IncTick+0x20>)
 80024a2:	781b      	ldrb	r3, [r3, #0]
 80024a4:	461a      	mov	r2, r3
 80024a6:	4b06      	ldr	r3, [pc, #24]	; (80024c0 <HAL_IncTick+0x24>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	4413      	add	r3, r2
 80024ac:	4a04      	ldr	r2, [pc, #16]	; (80024c0 <HAL_IncTick+0x24>)
 80024ae:	6013      	str	r3, [r2, #0]
}
 80024b0:	bf00      	nop
 80024b2:	46bd      	mov	sp, r7
 80024b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b8:	4770      	bx	lr
 80024ba:	bf00      	nop
 80024bc:	20000008 	.word	0x20000008
 80024c0:	20005e58 	.word	0x20005e58

080024c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80024c4:	b480      	push	{r7}
 80024c6:	af00      	add	r7, sp, #0
  return uwTick;
 80024c8:	4b03      	ldr	r3, [pc, #12]	; (80024d8 <HAL_GetTick+0x14>)
 80024ca:	681b      	ldr	r3, [r3, #0]
}
 80024cc:	4618      	mov	r0, r3
 80024ce:	46bd      	mov	sp, r7
 80024d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d4:	4770      	bx	lr
 80024d6:	bf00      	nop
 80024d8:	20005e58 	.word	0x20005e58

080024dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b084      	sub	sp, #16
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80024e4:	f7ff ffee 	bl	80024c4 <HAL_GetTick>
 80024e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024f4:	d005      	beq.n	8002502 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80024f6:	4b0a      	ldr	r3, [pc, #40]	; (8002520 <HAL_Delay+0x44>)
 80024f8:	781b      	ldrb	r3, [r3, #0]
 80024fa:	461a      	mov	r2, r3
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	4413      	add	r3, r2
 8002500:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002502:	bf00      	nop
 8002504:	f7ff ffde 	bl	80024c4 <HAL_GetTick>
 8002508:	4602      	mov	r2, r0
 800250a:	68bb      	ldr	r3, [r7, #8]
 800250c:	1ad3      	subs	r3, r2, r3
 800250e:	68fa      	ldr	r2, [r7, #12]
 8002510:	429a      	cmp	r2, r3
 8002512:	d8f7      	bhi.n	8002504 <HAL_Delay+0x28>
  {
  }
}
 8002514:	bf00      	nop
 8002516:	bf00      	nop
 8002518:	3710      	adds	r7, #16
 800251a:	46bd      	mov	sp, r7
 800251c:	bd80      	pop	{r7, pc}
 800251e:	bf00      	nop
 8002520:	20000008 	.word	0x20000008

08002524 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002524:	b480      	push	{r7}
 8002526:	b083      	sub	sp, #12
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
 800252c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	689b      	ldr	r3, [r3, #8]
 8002532:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	431a      	orrs	r2, r3
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	609a      	str	r2, [r3, #8]
}
 800253e:	bf00      	nop
 8002540:	370c      	adds	r7, #12
 8002542:	46bd      	mov	sp, r7
 8002544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002548:	4770      	bx	lr

0800254a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800254a:	b480      	push	{r7}
 800254c:	b083      	sub	sp, #12
 800254e:	af00      	add	r7, sp, #0
 8002550:	6078      	str	r0, [r7, #4]
 8002552:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	689b      	ldr	r3, [r3, #8]
 8002558:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	431a      	orrs	r2, r3
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	609a      	str	r2, [r3, #8]
}
 8002564:	bf00      	nop
 8002566:	370c      	adds	r7, #12
 8002568:	46bd      	mov	sp, r7
 800256a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256e:	4770      	bx	lr

08002570 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002570:	b480      	push	{r7}
 8002572:	b083      	sub	sp, #12
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	689b      	ldr	r3, [r3, #8]
 800257c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002580:	4618      	mov	r0, r3
 8002582:	370c      	adds	r7, #12
 8002584:	46bd      	mov	sp, r7
 8002586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258a:	4770      	bx	lr

0800258c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800258c:	b480      	push	{r7}
 800258e:	b087      	sub	sp, #28
 8002590:	af00      	add	r7, sp, #0
 8002592:	60f8      	str	r0, [r7, #12]
 8002594:	60b9      	str	r1, [r7, #8]
 8002596:	607a      	str	r2, [r7, #4]
 8002598:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	3360      	adds	r3, #96	; 0x60
 800259e:	461a      	mov	r2, r3
 80025a0:	68bb      	ldr	r3, [r7, #8]
 80025a2:	009b      	lsls	r3, r3, #2
 80025a4:	4413      	add	r3, r2
 80025a6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80025a8:	697b      	ldr	r3, [r7, #20]
 80025aa:	681a      	ldr	r2, [r3, #0]
 80025ac:	4b08      	ldr	r3, [pc, #32]	; (80025d0 <LL_ADC_SetOffset+0x44>)
 80025ae:	4013      	ands	r3, r2
 80025b0:	687a      	ldr	r2, [r7, #4]
 80025b2:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80025b6:	683a      	ldr	r2, [r7, #0]
 80025b8:	430a      	orrs	r2, r1
 80025ba:	4313      	orrs	r3, r2
 80025bc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80025c0:	697b      	ldr	r3, [r7, #20]
 80025c2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80025c4:	bf00      	nop
 80025c6:	371c      	adds	r7, #28
 80025c8:	46bd      	mov	sp, r7
 80025ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ce:	4770      	bx	lr
 80025d0:	03fff000 	.word	0x03fff000

080025d4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80025d4:	b480      	push	{r7}
 80025d6:	b085      	sub	sp, #20
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
 80025dc:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	3360      	adds	r3, #96	; 0x60
 80025e2:	461a      	mov	r2, r3
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	009b      	lsls	r3, r3, #2
 80025e8:	4413      	add	r3, r2
 80025ea:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80025f4:	4618      	mov	r0, r3
 80025f6:	3714      	adds	r7, #20
 80025f8:	46bd      	mov	sp, r7
 80025fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fe:	4770      	bx	lr

08002600 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002600:	b480      	push	{r7}
 8002602:	b087      	sub	sp, #28
 8002604:	af00      	add	r7, sp, #0
 8002606:	60f8      	str	r0, [r7, #12]
 8002608:	60b9      	str	r1, [r7, #8]
 800260a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	3360      	adds	r3, #96	; 0x60
 8002610:	461a      	mov	r2, r3
 8002612:	68bb      	ldr	r3, [r7, #8]
 8002614:	009b      	lsls	r3, r3, #2
 8002616:	4413      	add	r3, r2
 8002618:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800261a:	697b      	ldr	r3, [r7, #20]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	431a      	orrs	r2, r3
 8002626:	697b      	ldr	r3, [r7, #20]
 8002628:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800262a:	bf00      	nop
 800262c:	371c      	adds	r7, #28
 800262e:	46bd      	mov	sp, r7
 8002630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002634:	4770      	bx	lr

08002636 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8002636:	b480      	push	{r7}
 8002638:	b083      	sub	sp, #12
 800263a:	af00      	add	r7, sp, #0
 800263c:	6078      	str	r0, [r7, #4]
 800263e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	695b      	ldr	r3, [r3, #20]
 8002644:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	431a      	orrs	r2, r3
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	615a      	str	r2, [r3, #20]
}
 8002650:	bf00      	nop
 8002652:	370c      	adds	r7, #12
 8002654:	46bd      	mov	sp, r7
 8002656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265a:	4770      	bx	lr

0800265c <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800265c:	b480      	push	{r7}
 800265e:	b087      	sub	sp, #28
 8002660:	af00      	add	r7, sp, #0
 8002662:	60f8      	str	r0, [r7, #12]
 8002664:	60b9      	str	r1, [r7, #8]
 8002666:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	3330      	adds	r3, #48	; 0x30
 800266c:	461a      	mov	r2, r3
 800266e:	68bb      	ldr	r3, [r7, #8]
 8002670:	0a1b      	lsrs	r3, r3, #8
 8002672:	009b      	lsls	r3, r3, #2
 8002674:	f003 030c 	and.w	r3, r3, #12
 8002678:	4413      	add	r3, r2
 800267a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800267c:	697b      	ldr	r3, [r7, #20]
 800267e:	681a      	ldr	r2, [r3, #0]
 8002680:	68bb      	ldr	r3, [r7, #8]
 8002682:	f003 031f 	and.w	r3, r3, #31
 8002686:	211f      	movs	r1, #31
 8002688:	fa01 f303 	lsl.w	r3, r1, r3
 800268c:	43db      	mvns	r3, r3
 800268e:	401a      	ands	r2, r3
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	0e9b      	lsrs	r3, r3, #26
 8002694:	f003 011f 	and.w	r1, r3, #31
 8002698:	68bb      	ldr	r3, [r7, #8]
 800269a:	f003 031f 	and.w	r3, r3, #31
 800269e:	fa01 f303 	lsl.w	r3, r1, r3
 80026a2:	431a      	orrs	r2, r3
 80026a4:	697b      	ldr	r3, [r7, #20]
 80026a6:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80026a8:	bf00      	nop
 80026aa:	371c      	adds	r7, #28
 80026ac:	46bd      	mov	sp, r7
 80026ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b2:	4770      	bx	lr

080026b4 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80026b4:	b480      	push	{r7}
 80026b6:	b087      	sub	sp, #28
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	60f8      	str	r0, [r7, #12]
 80026bc:	60b9      	str	r1, [r7, #8]
 80026be:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	3314      	adds	r3, #20
 80026c4:	461a      	mov	r2, r3
 80026c6:	68bb      	ldr	r3, [r7, #8]
 80026c8:	0e5b      	lsrs	r3, r3, #25
 80026ca:	009b      	lsls	r3, r3, #2
 80026cc:	f003 0304 	and.w	r3, r3, #4
 80026d0:	4413      	add	r3, r2
 80026d2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80026d4:	697b      	ldr	r3, [r7, #20]
 80026d6:	681a      	ldr	r2, [r3, #0]
 80026d8:	68bb      	ldr	r3, [r7, #8]
 80026da:	0d1b      	lsrs	r3, r3, #20
 80026dc:	f003 031f 	and.w	r3, r3, #31
 80026e0:	2107      	movs	r1, #7
 80026e2:	fa01 f303 	lsl.w	r3, r1, r3
 80026e6:	43db      	mvns	r3, r3
 80026e8:	401a      	ands	r2, r3
 80026ea:	68bb      	ldr	r3, [r7, #8]
 80026ec:	0d1b      	lsrs	r3, r3, #20
 80026ee:	f003 031f 	and.w	r3, r3, #31
 80026f2:	6879      	ldr	r1, [r7, #4]
 80026f4:	fa01 f303 	lsl.w	r3, r1, r3
 80026f8:	431a      	orrs	r2, r3
 80026fa:	697b      	ldr	r3, [r7, #20]
 80026fc:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80026fe:	bf00      	nop
 8002700:	371c      	adds	r7, #28
 8002702:	46bd      	mov	sp, r7
 8002704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002708:	4770      	bx	lr
	...

0800270c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800270c:	b480      	push	{r7}
 800270e:	b085      	sub	sp, #20
 8002710:	af00      	add	r7, sp, #0
 8002712:	60f8      	str	r0, [r7, #12]
 8002714:	60b9      	str	r1, [r7, #8]
 8002716:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800271e:	68bb      	ldr	r3, [r7, #8]
 8002720:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002724:	43db      	mvns	r3, r3
 8002726:	401a      	ands	r2, r3
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	f003 0318 	and.w	r3, r3, #24
 800272e:	4908      	ldr	r1, [pc, #32]	; (8002750 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002730:	40d9      	lsrs	r1, r3
 8002732:	68bb      	ldr	r3, [r7, #8]
 8002734:	400b      	ands	r3, r1
 8002736:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800273a:	431a      	orrs	r2, r3
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002742:	bf00      	nop
 8002744:	3714      	adds	r7, #20
 8002746:	46bd      	mov	sp, r7
 8002748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274c:	4770      	bx	lr
 800274e:	bf00      	nop
 8002750:	0007ffff 	.word	0x0007ffff

08002754 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002754:	b480      	push	{r7}
 8002756:	b083      	sub	sp, #12
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	689b      	ldr	r3, [r3, #8]
 8002760:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002764:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002768:	687a      	ldr	r2, [r7, #4]
 800276a:	6093      	str	r3, [r2, #8]
}
 800276c:	bf00      	nop
 800276e:	370c      	adds	r7, #12
 8002770:	46bd      	mov	sp, r7
 8002772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002776:	4770      	bx	lr

08002778 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002778:	b480      	push	{r7}
 800277a:	b083      	sub	sp, #12
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	689b      	ldr	r3, [r3, #8]
 8002784:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002788:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800278c:	d101      	bne.n	8002792 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800278e:	2301      	movs	r3, #1
 8002790:	e000      	b.n	8002794 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002792:	2300      	movs	r3, #0
}
 8002794:	4618      	mov	r0, r3
 8002796:	370c      	adds	r7, #12
 8002798:	46bd      	mov	sp, r7
 800279a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279e:	4770      	bx	lr

080027a0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80027a0:	b480      	push	{r7}
 80027a2:	b083      	sub	sp, #12
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	689b      	ldr	r3, [r3, #8]
 80027ac:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80027b0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80027b4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80027bc:	bf00      	nop
 80027be:	370c      	adds	r7, #12
 80027c0:	46bd      	mov	sp, r7
 80027c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c6:	4770      	bx	lr

080027c8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80027c8:	b480      	push	{r7}
 80027ca:	b083      	sub	sp, #12
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	689b      	ldr	r3, [r3, #8]
 80027d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027d8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80027dc:	d101      	bne.n	80027e2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80027de:	2301      	movs	r3, #1
 80027e0:	e000      	b.n	80027e4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80027e2:	2300      	movs	r3, #0
}
 80027e4:	4618      	mov	r0, r3
 80027e6:	370c      	adds	r7, #12
 80027e8:	46bd      	mov	sp, r7
 80027ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ee:	4770      	bx	lr

080027f0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80027f0:	b480      	push	{r7}
 80027f2:	b083      	sub	sp, #12
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	689b      	ldr	r3, [r3, #8]
 80027fc:	f003 0301 	and.w	r3, r3, #1
 8002800:	2b01      	cmp	r3, #1
 8002802:	d101      	bne.n	8002808 <LL_ADC_IsEnabled+0x18>
 8002804:	2301      	movs	r3, #1
 8002806:	e000      	b.n	800280a <LL_ADC_IsEnabled+0x1a>
 8002808:	2300      	movs	r3, #0
}
 800280a:	4618      	mov	r0, r3
 800280c:	370c      	adds	r7, #12
 800280e:	46bd      	mov	sp, r7
 8002810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002814:	4770      	bx	lr

08002816 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002816:	b480      	push	{r7}
 8002818:	b083      	sub	sp, #12
 800281a:	af00      	add	r7, sp, #0
 800281c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	689b      	ldr	r3, [r3, #8]
 8002822:	f003 0304 	and.w	r3, r3, #4
 8002826:	2b04      	cmp	r3, #4
 8002828:	d101      	bne.n	800282e <LL_ADC_REG_IsConversionOngoing+0x18>
 800282a:	2301      	movs	r3, #1
 800282c:	e000      	b.n	8002830 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800282e:	2300      	movs	r3, #0
}
 8002830:	4618      	mov	r0, r3
 8002832:	370c      	adds	r7, #12
 8002834:	46bd      	mov	sp, r7
 8002836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283a:	4770      	bx	lr

0800283c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800283c:	b480      	push	{r7}
 800283e:	b083      	sub	sp, #12
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	689b      	ldr	r3, [r3, #8]
 8002848:	f003 0308 	and.w	r3, r3, #8
 800284c:	2b08      	cmp	r3, #8
 800284e:	d101      	bne.n	8002854 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002850:	2301      	movs	r3, #1
 8002852:	e000      	b.n	8002856 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002854:	2300      	movs	r3, #0
}
 8002856:	4618      	mov	r0, r3
 8002858:	370c      	adds	r7, #12
 800285a:	46bd      	mov	sp, r7
 800285c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002860:	4770      	bx	lr
	...

08002864 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b088      	sub	sp, #32
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800286c:	2300      	movs	r3, #0
 800286e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002870:	2300      	movs	r3, #0
 8002872:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d101      	bne.n	800287e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800287a:	2301      	movs	r3, #1
 800287c:	e12f      	b.n	8002ade <HAL_ADC_Init+0x27a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	691b      	ldr	r3, [r3, #16]
 8002882:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002888:	2b00      	cmp	r3, #0
 800288a:	d109      	bne.n	80028a0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800288c:	6878      	ldr	r0, [r7, #4]
 800288e:	f7fe f9b9 	bl	8000c04 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	2200      	movs	r2, #0
 8002896:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2200      	movs	r2, #0
 800289c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4618      	mov	r0, r3
 80028a6:	f7ff ff67 	bl	8002778 <LL_ADC_IsDeepPowerDownEnabled>
 80028aa:	4603      	mov	r3, r0
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d004      	beq.n	80028ba <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4618      	mov	r0, r3
 80028b6:	f7ff ff4d 	bl	8002754 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4618      	mov	r0, r3
 80028c0:	f7ff ff82 	bl	80027c8 <LL_ADC_IsInternalRegulatorEnabled>
 80028c4:	4603      	mov	r3, r0
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d115      	bne.n	80028f6 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4618      	mov	r0, r3
 80028d0:	f7ff ff66 	bl	80027a0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80028d4:	4b84      	ldr	r3, [pc, #528]	; (8002ae8 <HAL_ADC_Init+0x284>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	099b      	lsrs	r3, r3, #6
 80028da:	4a84      	ldr	r2, [pc, #528]	; (8002aec <HAL_ADC_Init+0x288>)
 80028dc:	fba2 2303 	umull	r2, r3, r2, r3
 80028e0:	099b      	lsrs	r3, r3, #6
 80028e2:	3301      	adds	r3, #1
 80028e4:	005b      	lsls	r3, r3, #1
 80028e6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80028e8:	e002      	b.n	80028f0 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80028ea:	68bb      	ldr	r3, [r7, #8]
 80028ec:	3b01      	subs	r3, #1
 80028ee:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80028f0:	68bb      	ldr	r3, [r7, #8]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d1f9      	bne.n	80028ea <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4618      	mov	r0, r3
 80028fc:	f7ff ff64 	bl	80027c8 <LL_ADC_IsInternalRegulatorEnabled>
 8002900:	4603      	mov	r3, r0
 8002902:	2b00      	cmp	r3, #0
 8002904:	d10d      	bne.n	8002922 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800290a:	f043 0210 	orr.w	r2, r3, #16
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002916:	f043 0201 	orr.w	r2, r3, #1
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800291e:	2301      	movs	r3, #1
 8002920:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	4618      	mov	r0, r3
 8002928:	f7ff ff75 	bl	8002816 <LL_ADC_REG_IsConversionOngoing>
 800292c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002932:	f003 0310 	and.w	r3, r3, #16
 8002936:	2b00      	cmp	r3, #0
 8002938:	f040 80c8 	bne.w	8002acc <HAL_ADC_Init+0x268>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800293c:	697b      	ldr	r3, [r7, #20]
 800293e:	2b00      	cmp	r3, #0
 8002940:	f040 80c4 	bne.w	8002acc <HAL_ADC_Init+0x268>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002948:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800294c:	f043 0202 	orr.w	r2, r3, #2
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4618      	mov	r0, r3
 800295a:	f7ff ff49 	bl	80027f0 <LL_ADC_IsEnabled>
 800295e:	4603      	mov	r3, r0
 8002960:	2b00      	cmp	r3, #0
 8002962:	d10b      	bne.n	800297c <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002964:	4862      	ldr	r0, [pc, #392]	; (8002af0 <HAL_ADC_Init+0x28c>)
 8002966:	f7ff ff43 	bl	80027f0 <LL_ADC_IsEnabled>
 800296a:	4603      	mov	r3, r0
 800296c:	2b00      	cmp	r3, #0
 800296e:	d105      	bne.n	800297c <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	4619      	mov	r1, r3
 8002976:	485f      	ldr	r0, [pc, #380]	; (8002af4 <HAL_ADC_Init+0x290>)
 8002978:	f7ff fdd4 	bl	8002524 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	7e5b      	ldrb	r3, [r3, #25]
 8002980:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002986:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 800298c:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8002992:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	f893 3020 	ldrb.w	r3, [r3, #32]
 800299a:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800299c:	4313      	orrs	r3, r2
 800299e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80029a6:	2b01      	cmp	r3, #1
 80029a8:	d106      	bne.n	80029b8 <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ae:	3b01      	subs	r3, #1
 80029b0:	045b      	lsls	r3, r3, #17
 80029b2:	69ba      	ldr	r2, [r7, #24]
 80029b4:	4313      	orrs	r3, r2
 80029b6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d009      	beq.n	80029d4 <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029c4:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029cc:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80029ce:	69ba      	ldr	r2, [r7, #24]
 80029d0:	4313      	orrs	r3, r2
 80029d2:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	68da      	ldr	r2, [r3, #12]
 80029da:	4b47      	ldr	r3, [pc, #284]	; (8002af8 <HAL_ADC_Init+0x294>)
 80029dc:	4013      	ands	r3, r2
 80029de:	687a      	ldr	r2, [r7, #4]
 80029e0:	6812      	ldr	r2, [r2, #0]
 80029e2:	69b9      	ldr	r1, [r7, #24]
 80029e4:	430b      	orrs	r3, r1
 80029e6:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4618      	mov	r0, r3
 80029ee:	f7ff ff12 	bl	8002816 <LL_ADC_REG_IsConversionOngoing>
 80029f2:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4618      	mov	r0, r3
 80029fa:	f7ff ff1f 	bl	800283c <LL_ADC_INJ_IsConversionOngoing>
 80029fe:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002a00:	693b      	ldr	r3, [r7, #16]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d140      	bne.n	8002a88 <HAL_ADC_Init+0x224>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d13d      	bne.n	8002a88 <HAL_ADC_Init+0x224>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	7e1b      	ldrb	r3, [r3, #24]
 8002a14:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002a16:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002a1e:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002a20:	4313      	orrs	r3, r2
 8002a22:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	68db      	ldr	r3, [r3, #12]
 8002a2a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002a2e:	f023 0306 	bic.w	r3, r3, #6
 8002a32:	687a      	ldr	r2, [r7, #4]
 8002a34:	6812      	ldr	r2, [r2, #0]
 8002a36:	69b9      	ldr	r1, [r7, #24]
 8002a38:	430b      	orrs	r3, r1
 8002a3a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002a42:	2b01      	cmp	r3, #1
 8002a44:	d118      	bne.n	8002a78 <HAL_ADC_Init+0x214>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	691b      	ldr	r3, [r3, #16]
 8002a4c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002a50:	f023 0304 	bic.w	r3, r3, #4
 8002a54:	687a      	ldr	r2, [r7, #4]
 8002a56:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8002a58:	687a      	ldr	r2, [r7, #4]
 8002a5a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002a5c:	4311      	orrs	r1, r2
 8002a5e:	687a      	ldr	r2, [r7, #4]
 8002a60:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002a62:	4311      	orrs	r1, r2
 8002a64:	687a      	ldr	r2, [r7, #4]
 8002a66:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002a68:	430a      	orrs	r2, r1
 8002a6a:	431a      	orrs	r2, r3
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f042 0201 	orr.w	r2, r2, #1
 8002a74:	611a      	str	r2, [r3, #16]
 8002a76:	e007      	b.n	8002a88 <HAL_ADC_Init+0x224>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	691a      	ldr	r2, [r3, #16]
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f022 0201 	bic.w	r2, r2, #1
 8002a86:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	691b      	ldr	r3, [r3, #16]
 8002a8c:	2b01      	cmp	r3, #1
 8002a8e:	d10c      	bne.n	8002aaa <HAL_ADC_Init+0x246>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a96:	f023 010f 	bic.w	r1, r3, #15
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	69db      	ldr	r3, [r3, #28]
 8002a9e:	1e5a      	subs	r2, r3, #1
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	430a      	orrs	r2, r1
 8002aa6:	631a      	str	r2, [r3, #48]	; 0x30
 8002aa8:	e007      	b.n	8002aba <HAL_ADC_Init+0x256>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f022 020f 	bic.w	r2, r2, #15
 8002ab8:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002abe:	f023 0303 	bic.w	r3, r3, #3
 8002ac2:	f043 0201 	orr.w	r2, r3, #1
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	659a      	str	r2, [r3, #88]	; 0x58
 8002aca:	e007      	b.n	8002adc <HAL_ADC_Init+0x278>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ad0:	f043 0210 	orr.w	r2, r3, #16
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002ad8:	2301      	movs	r3, #1
 8002ada:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002adc:	7ffb      	ldrb	r3, [r7, #31]
}
 8002ade:	4618      	mov	r0, r3
 8002ae0:	3720      	adds	r7, #32
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bd80      	pop	{r7, pc}
 8002ae6:	bf00      	nop
 8002ae8:	20000000 	.word	0x20000000
 8002aec:	053e2d63 	.word	0x053e2d63
 8002af0:	50040000 	.word	0x50040000
 8002af4:	50040300 	.word	0x50040300
 8002af8:	fff0c007 	.word	0xfff0c007

08002afc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b0b6      	sub	sp, #216	; 0xd8
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
 8002b04:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b06:	2300      	movs	r3, #0
 8002b08:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002b16:	2b01      	cmp	r3, #1
 8002b18:	d101      	bne.n	8002b1e <HAL_ADC_ConfigChannel+0x22>
 8002b1a:	2302      	movs	r3, #2
 8002b1c:	e3d3      	b.n	80032c6 <HAL_ADC_ConfigChannel+0x7ca>
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2201      	movs	r2, #1
 8002b22:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	f7ff fe73 	bl	8002816 <LL_ADC_REG_IsConversionOngoing>
 8002b30:	4603      	mov	r3, r0
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	f040 83b8 	bne.w	80032a8 <HAL_ADC_ConfigChannel+0x7ac>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	685b      	ldr	r3, [r3, #4]
 8002b3c:	2b05      	cmp	r3, #5
 8002b3e:	d824      	bhi.n	8002b8a <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	685b      	ldr	r3, [r3, #4]
 8002b44:	3b02      	subs	r3, #2
 8002b46:	2b03      	cmp	r3, #3
 8002b48:	d81b      	bhi.n	8002b82 <HAL_ADC_ConfigChannel+0x86>
 8002b4a:	a201      	add	r2, pc, #4	; (adr r2, 8002b50 <HAL_ADC_ConfigChannel+0x54>)
 8002b4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b50:	08002b61 	.word	0x08002b61
 8002b54:	08002b69 	.word	0x08002b69
 8002b58:	08002b71 	.word	0x08002b71
 8002b5c:	08002b79 	.word	0x08002b79
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	220c      	movs	r2, #12
 8002b64:	605a      	str	r2, [r3, #4]
          break;
 8002b66:	e010      	b.n	8002b8a <HAL_ADC_ConfigChannel+0x8e>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	2212      	movs	r2, #18
 8002b6c:	605a      	str	r2, [r3, #4]
          break;
 8002b6e:	e00c      	b.n	8002b8a <HAL_ADC_ConfigChannel+0x8e>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	2218      	movs	r2, #24
 8002b74:	605a      	str	r2, [r3, #4]
          break;
 8002b76:	e008      	b.n	8002b8a <HAL_ADC_ConfigChannel+0x8e>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002b7e:	605a      	str	r2, [r3, #4]
          break;
 8002b80:	e003      	b.n	8002b8a <HAL_ADC_ConfigChannel+0x8e>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	2206      	movs	r2, #6
 8002b86:	605a      	str	r2, [r3, #4]
          break;
 8002b88:	bf00      	nop
      }
    }
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6818      	ldr	r0, [r3, #0]
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	6859      	ldr	r1, [r3, #4]
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	461a      	mov	r2, r3
 8002b98:	f7ff fd60 	bl	800265c <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	f7ff fe38 	bl	8002816 <LL_ADC_REG_IsConversionOngoing>
 8002ba6:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4618      	mov	r0, r3
 8002bb0:	f7ff fe44 	bl	800283c <LL_ADC_INJ_IsConversionOngoing>
 8002bb4:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002bb8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	f040 81c1 	bne.w	8002f44 <HAL_ADC_ConfigChannel+0x448>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002bc2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	f040 81bc 	bne.w	8002f44 <HAL_ADC_ConfigChannel+0x448>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	689b      	ldr	r3, [r3, #8]
 8002bd0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002bd4:	d10f      	bne.n	8002bf6 <HAL_ADC_ConfigChannel+0xfa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6818      	ldr	r0, [r3, #0]
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	2200      	movs	r2, #0
 8002be0:	4619      	mov	r1, r3
 8002be2:	f7ff fd67 	bl	80026b4 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8002bee:	4618      	mov	r0, r3
 8002bf0:	f7ff fd21 	bl	8002636 <LL_ADC_SetSamplingTimeCommonConfig>
 8002bf4:	e00e      	b.n	8002c14 <HAL_ADC_ConfigChannel+0x118>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6818      	ldr	r0, [r3, #0]
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	6819      	ldr	r1, [r3, #0]
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	689b      	ldr	r3, [r3, #8]
 8002c02:	461a      	mov	r2, r3
 8002c04:	f7ff fd56 	bl	80026b4 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	2100      	movs	r1, #0
 8002c0e:	4618      	mov	r0, r3
 8002c10:	f7ff fd11 	bl	8002636 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	695a      	ldr	r2, [r3, #20]
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	68db      	ldr	r3, [r3, #12]
 8002c1e:	08db      	lsrs	r3, r3, #3
 8002c20:	f003 0303 	and.w	r3, r3, #3
 8002c24:	005b      	lsls	r3, r3, #1
 8002c26:	fa02 f303 	lsl.w	r3, r2, r3
 8002c2a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	691b      	ldr	r3, [r3, #16]
 8002c32:	2b04      	cmp	r3, #4
 8002c34:	d00a      	beq.n	8002c4c <HAL_ADC_ConfigChannel+0x150>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6818      	ldr	r0, [r3, #0]
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	6919      	ldr	r1, [r3, #16]
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	681a      	ldr	r2, [r3, #0]
 8002c42:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002c46:	f7ff fca1 	bl	800258c <LL_ADC_SetOffset>
 8002c4a:	e17b      	b.n	8002f44 <HAL_ADC_ConfigChannel+0x448>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	2100      	movs	r1, #0
 8002c52:	4618      	mov	r0, r3
 8002c54:	f7ff fcbe 	bl	80025d4 <LL_ADC_GetOffsetChannel>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d10a      	bne.n	8002c78 <HAL_ADC_ConfigChannel+0x17c>
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	2100      	movs	r1, #0
 8002c68:	4618      	mov	r0, r3
 8002c6a:	f7ff fcb3 	bl	80025d4 <LL_ADC_GetOffsetChannel>
 8002c6e:	4603      	mov	r3, r0
 8002c70:	0e9b      	lsrs	r3, r3, #26
 8002c72:	f003 021f 	and.w	r2, r3, #31
 8002c76:	e01e      	b.n	8002cb6 <HAL_ADC_ConfigChannel+0x1ba>
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	2100      	movs	r1, #0
 8002c7e:	4618      	mov	r0, r3
 8002c80:	f7ff fca8 	bl	80025d4 <LL_ADC_GetOffsetChannel>
 8002c84:	4603      	mov	r3, r0
 8002c86:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c8a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002c8e:	fa93 f3a3 	rbit	r3, r3
 8002c92:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002c96:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002c9a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002c9e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d101      	bne.n	8002caa <HAL_ADC_ConfigChannel+0x1ae>
  {
    return 32U;
 8002ca6:	2320      	movs	r3, #32
 8002ca8:	e004      	b.n	8002cb4 <HAL_ADC_ConfigChannel+0x1b8>
  }
  return __builtin_clz(value);
 8002caa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002cae:	fab3 f383 	clz	r3, r3
 8002cb2:	b2db      	uxtb	r3, r3
 8002cb4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d105      	bne.n	8002cce <HAL_ADC_ConfigChannel+0x1d2>
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	0e9b      	lsrs	r3, r3, #26
 8002cc8:	f003 031f 	and.w	r3, r3, #31
 8002ccc:	e018      	b.n	8002d00 <HAL_ADC_ConfigChannel+0x204>
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cd6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002cda:	fa93 f3a3 	rbit	r3, r3
 8002cde:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002ce2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002ce6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8002cea:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d101      	bne.n	8002cf6 <HAL_ADC_ConfigChannel+0x1fa>
    return 32U;
 8002cf2:	2320      	movs	r3, #32
 8002cf4:	e004      	b.n	8002d00 <HAL_ADC_ConfigChannel+0x204>
  return __builtin_clz(value);
 8002cf6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002cfa:	fab3 f383 	clz	r3, r3
 8002cfe:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002d00:	429a      	cmp	r2, r3
 8002d02:	d106      	bne.n	8002d12 <HAL_ADC_ConfigChannel+0x216>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	2200      	movs	r2, #0
 8002d0a:	2100      	movs	r1, #0
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	f7ff fc77 	bl	8002600 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	2101      	movs	r1, #1
 8002d18:	4618      	mov	r0, r3
 8002d1a:	f7ff fc5b 	bl	80025d4 <LL_ADC_GetOffsetChannel>
 8002d1e:	4603      	mov	r3, r0
 8002d20:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d10a      	bne.n	8002d3e <HAL_ADC_ConfigChannel+0x242>
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	2101      	movs	r1, #1
 8002d2e:	4618      	mov	r0, r3
 8002d30:	f7ff fc50 	bl	80025d4 <LL_ADC_GetOffsetChannel>
 8002d34:	4603      	mov	r3, r0
 8002d36:	0e9b      	lsrs	r3, r3, #26
 8002d38:	f003 021f 	and.w	r2, r3, #31
 8002d3c:	e01e      	b.n	8002d7c <HAL_ADC_ConfigChannel+0x280>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	2101      	movs	r1, #1
 8002d44:	4618      	mov	r0, r3
 8002d46:	f7ff fc45 	bl	80025d4 <LL_ADC_GetOffsetChannel>
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d50:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002d54:	fa93 f3a3 	rbit	r3, r3
 8002d58:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002d5c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002d60:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002d64:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d101      	bne.n	8002d70 <HAL_ADC_ConfigChannel+0x274>
    return 32U;
 8002d6c:	2320      	movs	r3, #32
 8002d6e:	e004      	b.n	8002d7a <HAL_ADC_ConfigChannel+0x27e>
  return __builtin_clz(value);
 8002d70:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002d74:	fab3 f383 	clz	r3, r3
 8002d78:	b2db      	uxtb	r3, r3
 8002d7a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d105      	bne.n	8002d94 <HAL_ADC_ConfigChannel+0x298>
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	0e9b      	lsrs	r3, r3, #26
 8002d8e:	f003 031f 	and.w	r3, r3, #31
 8002d92:	e018      	b.n	8002dc6 <HAL_ADC_ConfigChannel+0x2ca>
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d9c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002da0:	fa93 f3a3 	rbit	r3, r3
 8002da4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002da8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002dac:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002db0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d101      	bne.n	8002dbc <HAL_ADC_ConfigChannel+0x2c0>
    return 32U;
 8002db8:	2320      	movs	r3, #32
 8002dba:	e004      	b.n	8002dc6 <HAL_ADC_ConfigChannel+0x2ca>
  return __builtin_clz(value);
 8002dbc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002dc0:	fab3 f383 	clz	r3, r3
 8002dc4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002dc6:	429a      	cmp	r2, r3
 8002dc8:	d106      	bne.n	8002dd8 <HAL_ADC_ConfigChannel+0x2dc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	2200      	movs	r2, #0
 8002dd0:	2101      	movs	r1, #1
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	f7ff fc14 	bl	8002600 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	2102      	movs	r1, #2
 8002dde:	4618      	mov	r0, r3
 8002de0:	f7ff fbf8 	bl	80025d4 <LL_ADC_GetOffsetChannel>
 8002de4:	4603      	mov	r3, r0
 8002de6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d10a      	bne.n	8002e04 <HAL_ADC_ConfigChannel+0x308>
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	2102      	movs	r1, #2
 8002df4:	4618      	mov	r0, r3
 8002df6:	f7ff fbed 	bl	80025d4 <LL_ADC_GetOffsetChannel>
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	0e9b      	lsrs	r3, r3, #26
 8002dfe:	f003 021f 	and.w	r2, r3, #31
 8002e02:	e01e      	b.n	8002e42 <HAL_ADC_ConfigChannel+0x346>
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	2102      	movs	r1, #2
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	f7ff fbe2 	bl	80025d4 <LL_ADC_GetOffsetChannel>
 8002e10:	4603      	mov	r3, r0
 8002e12:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e16:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002e1a:	fa93 f3a3 	rbit	r3, r3
 8002e1e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002e22:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002e26:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002e2a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d101      	bne.n	8002e36 <HAL_ADC_ConfigChannel+0x33a>
    return 32U;
 8002e32:	2320      	movs	r3, #32
 8002e34:	e004      	b.n	8002e40 <HAL_ADC_ConfigChannel+0x344>
  return __builtin_clz(value);
 8002e36:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002e3a:	fab3 f383 	clz	r3, r3
 8002e3e:	b2db      	uxtb	r3, r3
 8002e40:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d105      	bne.n	8002e5a <HAL_ADC_ConfigChannel+0x35e>
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	0e9b      	lsrs	r3, r3, #26
 8002e54:	f003 031f 	and.w	r3, r3, #31
 8002e58:	e016      	b.n	8002e88 <HAL_ADC_ConfigChannel+0x38c>
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e62:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002e66:	fa93 f3a3 	rbit	r3, r3
 8002e6a:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002e6c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002e6e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002e72:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d101      	bne.n	8002e7e <HAL_ADC_ConfigChannel+0x382>
    return 32U;
 8002e7a:	2320      	movs	r3, #32
 8002e7c:	e004      	b.n	8002e88 <HAL_ADC_ConfigChannel+0x38c>
  return __builtin_clz(value);
 8002e7e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002e82:	fab3 f383 	clz	r3, r3
 8002e86:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002e88:	429a      	cmp	r2, r3
 8002e8a:	d106      	bne.n	8002e9a <HAL_ADC_ConfigChannel+0x39e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	2200      	movs	r2, #0
 8002e92:	2102      	movs	r1, #2
 8002e94:	4618      	mov	r0, r3
 8002e96:	f7ff fbb3 	bl	8002600 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	2103      	movs	r1, #3
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	f7ff fb97 	bl	80025d4 <LL_ADC_GetOffsetChannel>
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d10a      	bne.n	8002ec6 <HAL_ADC_ConfigChannel+0x3ca>
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	2103      	movs	r1, #3
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	f7ff fb8c 	bl	80025d4 <LL_ADC_GetOffsetChannel>
 8002ebc:	4603      	mov	r3, r0
 8002ebe:	0e9b      	lsrs	r3, r3, #26
 8002ec0:	f003 021f 	and.w	r2, r3, #31
 8002ec4:	e017      	b.n	8002ef6 <HAL_ADC_ConfigChannel+0x3fa>
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	2103      	movs	r1, #3
 8002ecc:	4618      	mov	r0, r3
 8002ece:	f7ff fb81 	bl	80025d4 <LL_ADC_GetOffsetChannel>
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ed6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ed8:	fa93 f3a3 	rbit	r3, r3
 8002edc:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002ede:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002ee0:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002ee2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d101      	bne.n	8002eec <HAL_ADC_ConfigChannel+0x3f0>
    return 32U;
 8002ee8:	2320      	movs	r3, #32
 8002eea:	e003      	b.n	8002ef4 <HAL_ADC_ConfigChannel+0x3f8>
  return __builtin_clz(value);
 8002eec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002eee:	fab3 f383 	clz	r3, r3
 8002ef2:	b2db      	uxtb	r3, r3
 8002ef4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d105      	bne.n	8002f0e <HAL_ADC_ConfigChannel+0x412>
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	0e9b      	lsrs	r3, r3, #26
 8002f08:	f003 031f 	and.w	r3, r3, #31
 8002f0c:	e011      	b.n	8002f32 <HAL_ADC_ConfigChannel+0x436>
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f14:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002f16:	fa93 f3a3 	rbit	r3, r3
 8002f1a:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002f1c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002f1e:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002f20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d101      	bne.n	8002f2a <HAL_ADC_ConfigChannel+0x42e>
    return 32U;
 8002f26:	2320      	movs	r3, #32
 8002f28:	e003      	b.n	8002f32 <HAL_ADC_ConfigChannel+0x436>
  return __builtin_clz(value);
 8002f2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f2c:	fab3 f383 	clz	r3, r3
 8002f30:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002f32:	429a      	cmp	r2, r3
 8002f34:	d106      	bne.n	8002f44 <HAL_ADC_ConfigChannel+0x448>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	2103      	movs	r1, #3
 8002f3e:	4618      	mov	r0, r3
 8002f40:	f7ff fb5e 	bl	8002600 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4618      	mov	r0, r3
 8002f4a:	f7ff fc51 	bl	80027f0 <LL_ADC_IsEnabled>
 8002f4e:	4603      	mov	r3, r0
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	f040 813f 	bne.w	80031d4 <HAL_ADC_ConfigChannel+0x6d8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6818      	ldr	r0, [r3, #0]
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	6819      	ldr	r1, [r3, #0]
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	68db      	ldr	r3, [r3, #12]
 8002f62:	461a      	mov	r2, r3
 8002f64:	f7ff fbd2 	bl	800270c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	68db      	ldr	r3, [r3, #12]
 8002f6c:	4a8e      	ldr	r2, [pc, #568]	; (80031a8 <HAL_ADC_ConfigChannel+0x6ac>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	f040 8130 	bne.w	80031d4 <HAL_ADC_ConfigChannel+0x6d8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d10b      	bne.n	8002f9c <HAL_ADC_ConfigChannel+0x4a0>
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	0e9b      	lsrs	r3, r3, #26
 8002f8a:	3301      	adds	r3, #1
 8002f8c:	f003 031f 	and.w	r3, r3, #31
 8002f90:	2b09      	cmp	r3, #9
 8002f92:	bf94      	ite	ls
 8002f94:	2301      	movls	r3, #1
 8002f96:	2300      	movhi	r3, #0
 8002f98:	b2db      	uxtb	r3, r3
 8002f9a:	e019      	b.n	8002fd0 <HAL_ADC_ConfigChannel+0x4d4>
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fa2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002fa4:	fa93 f3a3 	rbit	r3, r3
 8002fa8:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002faa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002fac:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002fae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d101      	bne.n	8002fb8 <HAL_ADC_ConfigChannel+0x4bc>
    return 32U;
 8002fb4:	2320      	movs	r3, #32
 8002fb6:	e003      	b.n	8002fc0 <HAL_ADC_ConfigChannel+0x4c4>
  return __builtin_clz(value);
 8002fb8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002fba:	fab3 f383 	clz	r3, r3
 8002fbe:	b2db      	uxtb	r3, r3
 8002fc0:	3301      	adds	r3, #1
 8002fc2:	f003 031f 	and.w	r3, r3, #31
 8002fc6:	2b09      	cmp	r3, #9
 8002fc8:	bf94      	ite	ls
 8002fca:	2301      	movls	r3, #1
 8002fcc:	2300      	movhi	r3, #0
 8002fce:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d079      	beq.n	80030c8 <HAL_ADC_ConfigChannel+0x5cc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d107      	bne.n	8002ff0 <HAL_ADC_ConfigChannel+0x4f4>
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	0e9b      	lsrs	r3, r3, #26
 8002fe6:	3301      	adds	r3, #1
 8002fe8:	069b      	lsls	r3, r3, #26
 8002fea:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002fee:	e015      	b.n	800301c <HAL_ADC_ConfigChannel+0x520>
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ff6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ff8:	fa93 f3a3 	rbit	r3, r3
 8002ffc:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002ffe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003000:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8003002:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003004:	2b00      	cmp	r3, #0
 8003006:	d101      	bne.n	800300c <HAL_ADC_ConfigChannel+0x510>
    return 32U;
 8003008:	2320      	movs	r3, #32
 800300a:	e003      	b.n	8003014 <HAL_ADC_ConfigChannel+0x518>
  return __builtin_clz(value);
 800300c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800300e:	fab3 f383 	clz	r3, r3
 8003012:	b2db      	uxtb	r3, r3
 8003014:	3301      	adds	r3, #1
 8003016:	069b      	lsls	r3, r3, #26
 8003018:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003024:	2b00      	cmp	r3, #0
 8003026:	d109      	bne.n	800303c <HAL_ADC_ConfigChannel+0x540>
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	0e9b      	lsrs	r3, r3, #26
 800302e:	3301      	adds	r3, #1
 8003030:	f003 031f 	and.w	r3, r3, #31
 8003034:	2101      	movs	r1, #1
 8003036:	fa01 f303 	lsl.w	r3, r1, r3
 800303a:	e017      	b.n	800306c <HAL_ADC_ConfigChannel+0x570>
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003042:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003044:	fa93 f3a3 	rbit	r3, r3
 8003048:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 800304a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800304c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 800304e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003050:	2b00      	cmp	r3, #0
 8003052:	d101      	bne.n	8003058 <HAL_ADC_ConfigChannel+0x55c>
    return 32U;
 8003054:	2320      	movs	r3, #32
 8003056:	e003      	b.n	8003060 <HAL_ADC_ConfigChannel+0x564>
  return __builtin_clz(value);
 8003058:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800305a:	fab3 f383 	clz	r3, r3
 800305e:	b2db      	uxtb	r3, r3
 8003060:	3301      	adds	r3, #1
 8003062:	f003 031f 	and.w	r3, r3, #31
 8003066:	2101      	movs	r1, #1
 8003068:	fa01 f303 	lsl.w	r3, r1, r3
 800306c:	ea42 0103 	orr.w	r1, r2, r3
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003078:	2b00      	cmp	r3, #0
 800307a:	d10a      	bne.n	8003092 <HAL_ADC_ConfigChannel+0x596>
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	0e9b      	lsrs	r3, r3, #26
 8003082:	3301      	adds	r3, #1
 8003084:	f003 021f 	and.w	r2, r3, #31
 8003088:	4613      	mov	r3, r2
 800308a:	005b      	lsls	r3, r3, #1
 800308c:	4413      	add	r3, r2
 800308e:	051b      	lsls	r3, r3, #20
 8003090:	e018      	b.n	80030c4 <HAL_ADC_ConfigChannel+0x5c8>
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003098:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800309a:	fa93 f3a3 	rbit	r3, r3
 800309e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80030a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80030a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d101      	bne.n	80030ae <HAL_ADC_ConfigChannel+0x5b2>
    return 32U;
 80030aa:	2320      	movs	r3, #32
 80030ac:	e003      	b.n	80030b6 <HAL_ADC_ConfigChannel+0x5ba>
  return __builtin_clz(value);
 80030ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80030b0:	fab3 f383 	clz	r3, r3
 80030b4:	b2db      	uxtb	r3, r3
 80030b6:	3301      	adds	r3, #1
 80030b8:	f003 021f 	and.w	r2, r3, #31
 80030bc:	4613      	mov	r3, r2
 80030be:	005b      	lsls	r3, r3, #1
 80030c0:	4413      	add	r3, r2
 80030c2:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80030c4:	430b      	orrs	r3, r1
 80030c6:	e080      	b.n	80031ca <HAL_ADC_ConfigChannel+0x6ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d107      	bne.n	80030e4 <HAL_ADC_ConfigChannel+0x5e8>
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	0e9b      	lsrs	r3, r3, #26
 80030da:	3301      	adds	r3, #1
 80030dc:	069b      	lsls	r3, r3, #26
 80030de:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80030e2:	e015      	b.n	8003110 <HAL_ADC_ConfigChannel+0x614>
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030ec:	fa93 f3a3 	rbit	r3, r3
 80030f0:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80030f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030f4:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80030f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d101      	bne.n	8003100 <HAL_ADC_ConfigChannel+0x604>
    return 32U;
 80030fc:	2320      	movs	r3, #32
 80030fe:	e003      	b.n	8003108 <HAL_ADC_ConfigChannel+0x60c>
  return __builtin_clz(value);
 8003100:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003102:	fab3 f383 	clz	r3, r3
 8003106:	b2db      	uxtb	r3, r3
 8003108:	3301      	adds	r3, #1
 800310a:	069b      	lsls	r3, r3, #26
 800310c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003118:	2b00      	cmp	r3, #0
 800311a:	d109      	bne.n	8003130 <HAL_ADC_ConfigChannel+0x634>
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	0e9b      	lsrs	r3, r3, #26
 8003122:	3301      	adds	r3, #1
 8003124:	f003 031f 	and.w	r3, r3, #31
 8003128:	2101      	movs	r1, #1
 800312a:	fa01 f303 	lsl.w	r3, r1, r3
 800312e:	e017      	b.n	8003160 <HAL_ADC_ConfigChannel+0x664>
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003136:	6a3b      	ldr	r3, [r7, #32]
 8003138:	fa93 f3a3 	rbit	r3, r3
 800313c:	61fb      	str	r3, [r7, #28]
  return result;
 800313e:	69fb      	ldr	r3, [r7, #28]
 8003140:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8003142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003144:	2b00      	cmp	r3, #0
 8003146:	d101      	bne.n	800314c <HAL_ADC_ConfigChannel+0x650>
    return 32U;
 8003148:	2320      	movs	r3, #32
 800314a:	e003      	b.n	8003154 <HAL_ADC_ConfigChannel+0x658>
  return __builtin_clz(value);
 800314c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800314e:	fab3 f383 	clz	r3, r3
 8003152:	b2db      	uxtb	r3, r3
 8003154:	3301      	adds	r3, #1
 8003156:	f003 031f 	and.w	r3, r3, #31
 800315a:	2101      	movs	r1, #1
 800315c:	fa01 f303 	lsl.w	r3, r1, r3
 8003160:	ea42 0103 	orr.w	r1, r2, r3
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800316c:	2b00      	cmp	r3, #0
 800316e:	d10d      	bne.n	800318c <HAL_ADC_ConfigChannel+0x690>
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	0e9b      	lsrs	r3, r3, #26
 8003176:	3301      	adds	r3, #1
 8003178:	f003 021f 	and.w	r2, r3, #31
 800317c:	4613      	mov	r3, r2
 800317e:	005b      	lsls	r3, r3, #1
 8003180:	4413      	add	r3, r2
 8003182:	3b1e      	subs	r3, #30
 8003184:	051b      	lsls	r3, r3, #20
 8003186:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800318a:	e01d      	b.n	80031c8 <HAL_ADC_ConfigChannel+0x6cc>
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003192:	697b      	ldr	r3, [r7, #20]
 8003194:	fa93 f3a3 	rbit	r3, r3
 8003198:	613b      	str	r3, [r7, #16]
  return result;
 800319a:	693b      	ldr	r3, [r7, #16]
 800319c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800319e:	69bb      	ldr	r3, [r7, #24]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d103      	bne.n	80031ac <HAL_ADC_ConfigChannel+0x6b0>
    return 32U;
 80031a4:	2320      	movs	r3, #32
 80031a6:	e005      	b.n	80031b4 <HAL_ADC_ConfigChannel+0x6b8>
 80031a8:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80031ac:	69bb      	ldr	r3, [r7, #24]
 80031ae:	fab3 f383 	clz	r3, r3
 80031b2:	b2db      	uxtb	r3, r3
 80031b4:	3301      	adds	r3, #1
 80031b6:	f003 021f 	and.w	r2, r3, #31
 80031ba:	4613      	mov	r3, r2
 80031bc:	005b      	lsls	r3, r3, #1
 80031be:	4413      	add	r3, r2
 80031c0:	3b1e      	subs	r3, #30
 80031c2:	051b      	lsls	r3, r3, #20
 80031c4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80031c8:	430b      	orrs	r3, r1
 80031ca:	683a      	ldr	r2, [r7, #0]
 80031cc:	6892      	ldr	r2, [r2, #8]
 80031ce:	4619      	mov	r1, r3
 80031d0:	f7ff fa70 	bl	80026b4 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	681a      	ldr	r2, [r3, #0]
 80031d8:	4b3d      	ldr	r3, [pc, #244]	; (80032d0 <HAL_ADC_ConfigChannel+0x7d4>)
 80031da:	4013      	ands	r3, r2
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d06c      	beq.n	80032ba <HAL_ADC_ConfigChannel+0x7be>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80031e0:	483c      	ldr	r0, [pc, #240]	; (80032d4 <HAL_ADC_ConfigChannel+0x7d8>)
 80031e2:	f7ff f9c5 	bl	8002570 <LL_ADC_GetCommonPathInternalCh>
 80031e6:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	4a3a      	ldr	r2, [pc, #232]	; (80032d8 <HAL_ADC_ConfigChannel+0x7dc>)
 80031f0:	4293      	cmp	r3, r2
 80031f2:	d127      	bne.n	8003244 <HAL_ADC_ConfigChannel+0x748>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80031f4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80031f8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d121      	bne.n	8003244 <HAL_ADC_ConfigChannel+0x748>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4a35      	ldr	r2, [pc, #212]	; (80032dc <HAL_ADC_ConfigChannel+0x7e0>)
 8003206:	4293      	cmp	r3, r2
 8003208:	d157      	bne.n	80032ba <HAL_ADC_ConfigChannel+0x7be>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800320a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800320e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003212:	4619      	mov	r1, r3
 8003214:	482f      	ldr	r0, [pc, #188]	; (80032d4 <HAL_ADC_ConfigChannel+0x7d8>)
 8003216:	f7ff f998 	bl	800254a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800321a:	4b31      	ldr	r3, [pc, #196]	; (80032e0 <HAL_ADC_ConfigChannel+0x7e4>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	099b      	lsrs	r3, r3, #6
 8003220:	4a30      	ldr	r2, [pc, #192]	; (80032e4 <HAL_ADC_ConfigChannel+0x7e8>)
 8003222:	fba2 2303 	umull	r2, r3, r2, r3
 8003226:	099b      	lsrs	r3, r3, #6
 8003228:	1c5a      	adds	r2, r3, #1
 800322a:	4613      	mov	r3, r2
 800322c:	005b      	lsls	r3, r3, #1
 800322e:	4413      	add	r3, r2
 8003230:	009b      	lsls	r3, r3, #2
 8003232:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003234:	e002      	b.n	800323c <HAL_ADC_ConfigChannel+0x740>
          {
            wait_loop_index--;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	3b01      	subs	r3, #1
 800323a:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	2b00      	cmp	r3, #0
 8003240:	d1f9      	bne.n	8003236 <HAL_ADC_ConfigChannel+0x73a>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003242:	e03a      	b.n	80032ba <HAL_ADC_ConfigChannel+0x7be>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4a27      	ldr	r2, [pc, #156]	; (80032e8 <HAL_ADC_ConfigChannel+0x7ec>)
 800324a:	4293      	cmp	r3, r2
 800324c:	d113      	bne.n	8003276 <HAL_ADC_ConfigChannel+0x77a>
 800324e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003252:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003256:	2b00      	cmp	r3, #0
 8003258:	d10d      	bne.n	8003276 <HAL_ADC_ConfigChannel+0x77a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	4a1f      	ldr	r2, [pc, #124]	; (80032dc <HAL_ADC_ConfigChannel+0x7e0>)
 8003260:	4293      	cmp	r3, r2
 8003262:	d12a      	bne.n	80032ba <HAL_ADC_ConfigChannel+0x7be>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003264:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003268:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800326c:	4619      	mov	r1, r3
 800326e:	4819      	ldr	r0, [pc, #100]	; (80032d4 <HAL_ADC_ConfigChannel+0x7d8>)
 8003270:	f7ff f96b 	bl	800254a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003274:	e021      	b.n	80032ba <HAL_ADC_ConfigChannel+0x7be>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4a1c      	ldr	r2, [pc, #112]	; (80032ec <HAL_ADC_ConfigChannel+0x7f0>)
 800327c:	4293      	cmp	r3, r2
 800327e:	d11c      	bne.n	80032ba <HAL_ADC_ConfigChannel+0x7be>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003280:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003284:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003288:	2b00      	cmp	r3, #0
 800328a:	d116      	bne.n	80032ba <HAL_ADC_ConfigChannel+0x7be>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4a12      	ldr	r2, [pc, #72]	; (80032dc <HAL_ADC_ConfigChannel+0x7e0>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d111      	bne.n	80032ba <HAL_ADC_ConfigChannel+0x7be>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003296:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800329a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800329e:	4619      	mov	r1, r3
 80032a0:	480c      	ldr	r0, [pc, #48]	; (80032d4 <HAL_ADC_ConfigChannel+0x7d8>)
 80032a2:	f7ff f952 	bl	800254a <LL_ADC_SetCommonPathInternalCh>
 80032a6:	e008      	b.n	80032ba <HAL_ADC_ConfigChannel+0x7be>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032ac:	f043 0220 	orr.w	r2, r3, #32
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80032b4:	2301      	movs	r3, #1
 80032b6:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2200      	movs	r2, #0
 80032be:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 80032c2:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80032c6:	4618      	mov	r0, r3
 80032c8:	37d8      	adds	r7, #216	; 0xd8
 80032ca:	46bd      	mov	sp, r7
 80032cc:	bd80      	pop	{r7, pc}
 80032ce:	bf00      	nop
 80032d0:	80080000 	.word	0x80080000
 80032d4:	50040300 	.word	0x50040300
 80032d8:	c7520000 	.word	0xc7520000
 80032dc:	50040000 	.word	0x50040000
 80032e0:	20000000 	.word	0x20000000
 80032e4:	053e2d63 	.word	0x053e2d63
 80032e8:	cb840000 	.word	0xcb840000
 80032ec:	80000001 	.word	0x80000001

080032f0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b084      	sub	sp, #16
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d101      	bne.n	8003302 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80032fe:	2301      	movs	r3, #1
 8003300:	e0ed      	b.n	80034de <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003308:	b2db      	uxtb	r3, r3
 800330a:	2b00      	cmp	r3, #0
 800330c:	d102      	bne.n	8003314 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800330e:	6878      	ldr	r0, [r7, #4]
 8003310:	f7fd fd82 	bl	8000e18 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	681a      	ldr	r2, [r3, #0]
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f042 0201 	orr.w	r2, r2, #1
 8003322:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003324:	f7ff f8ce 	bl	80024c4 <HAL_GetTick>
 8003328:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800332a:	e012      	b.n	8003352 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800332c:	f7ff f8ca 	bl	80024c4 <HAL_GetTick>
 8003330:	4602      	mov	r2, r0
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	1ad3      	subs	r3, r2, r3
 8003336:	2b0a      	cmp	r3, #10
 8003338:	d90b      	bls.n	8003352 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800333e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2205      	movs	r2, #5
 800334a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800334e:	2301      	movs	r3, #1
 8003350:	e0c5      	b.n	80034de <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	f003 0301 	and.w	r3, r3, #1
 800335c:	2b00      	cmp	r3, #0
 800335e:	d0e5      	beq.n	800332c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	681a      	ldr	r2, [r3, #0]
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f022 0202 	bic.w	r2, r2, #2
 800336e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003370:	f7ff f8a8 	bl	80024c4 <HAL_GetTick>
 8003374:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003376:	e012      	b.n	800339e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003378:	f7ff f8a4 	bl	80024c4 <HAL_GetTick>
 800337c:	4602      	mov	r2, r0
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	1ad3      	subs	r3, r2, r3
 8003382:	2b0a      	cmp	r3, #10
 8003384:	d90b      	bls.n	800339e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800338a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2205      	movs	r2, #5
 8003396:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800339a:	2301      	movs	r3, #1
 800339c:	e09f      	b.n	80034de <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	f003 0302 	and.w	r3, r3, #2
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d1e5      	bne.n	8003378 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	7e1b      	ldrb	r3, [r3, #24]
 80033b0:	2b01      	cmp	r3, #1
 80033b2:	d108      	bne.n	80033c6 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	681a      	ldr	r2, [r3, #0]
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80033c2:	601a      	str	r2, [r3, #0]
 80033c4:	e007      	b.n	80033d6 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	681a      	ldr	r2, [r3, #0]
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80033d4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	7e5b      	ldrb	r3, [r3, #25]
 80033da:	2b01      	cmp	r3, #1
 80033dc:	d108      	bne.n	80033f0 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	681a      	ldr	r2, [r3, #0]
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80033ec:	601a      	str	r2, [r3, #0]
 80033ee:	e007      	b.n	8003400 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	681a      	ldr	r2, [r3, #0]
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80033fe:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	7e9b      	ldrb	r3, [r3, #26]
 8003404:	2b01      	cmp	r3, #1
 8003406:	d108      	bne.n	800341a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	681a      	ldr	r2, [r3, #0]
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f042 0220 	orr.w	r2, r2, #32
 8003416:	601a      	str	r2, [r3, #0]
 8003418:	e007      	b.n	800342a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	681a      	ldr	r2, [r3, #0]
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f022 0220 	bic.w	r2, r2, #32
 8003428:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	7edb      	ldrb	r3, [r3, #27]
 800342e:	2b01      	cmp	r3, #1
 8003430:	d108      	bne.n	8003444 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	681a      	ldr	r2, [r3, #0]
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f022 0210 	bic.w	r2, r2, #16
 8003440:	601a      	str	r2, [r3, #0]
 8003442:	e007      	b.n	8003454 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	681a      	ldr	r2, [r3, #0]
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f042 0210 	orr.w	r2, r2, #16
 8003452:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	7f1b      	ldrb	r3, [r3, #28]
 8003458:	2b01      	cmp	r3, #1
 800345a:	d108      	bne.n	800346e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	681a      	ldr	r2, [r3, #0]
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f042 0208 	orr.w	r2, r2, #8
 800346a:	601a      	str	r2, [r3, #0]
 800346c:	e007      	b.n	800347e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	681a      	ldr	r2, [r3, #0]
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f022 0208 	bic.w	r2, r2, #8
 800347c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	7f5b      	ldrb	r3, [r3, #29]
 8003482:	2b01      	cmp	r3, #1
 8003484:	d108      	bne.n	8003498 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	681a      	ldr	r2, [r3, #0]
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f042 0204 	orr.w	r2, r2, #4
 8003494:	601a      	str	r2, [r3, #0]
 8003496:	e007      	b.n	80034a8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	681a      	ldr	r2, [r3, #0]
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f022 0204 	bic.w	r2, r2, #4
 80034a6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	689a      	ldr	r2, [r3, #8]
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	68db      	ldr	r3, [r3, #12]
 80034b0:	431a      	orrs	r2, r3
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	691b      	ldr	r3, [r3, #16]
 80034b6:	431a      	orrs	r2, r3
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	695b      	ldr	r3, [r3, #20]
 80034bc:	ea42 0103 	orr.w	r1, r2, r3
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	685b      	ldr	r3, [r3, #4]
 80034c4:	1e5a      	subs	r2, r3, #1
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	430a      	orrs	r2, r1
 80034cc:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2200      	movs	r2, #0
 80034d2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2201      	movs	r2, #1
 80034d8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80034dc:	2300      	movs	r3, #0
}
 80034de:	4618      	mov	r0, r3
 80034e0:	3710      	adds	r7, #16
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bd80      	pop	{r7, pc}
	...

080034e8 <__NVIC_SetPriorityGrouping>:
{
 80034e8:	b480      	push	{r7}
 80034ea:	b085      	sub	sp, #20
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	f003 0307 	and.w	r3, r3, #7
 80034f6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80034f8:	4b0c      	ldr	r3, [pc, #48]	; (800352c <__NVIC_SetPriorityGrouping+0x44>)
 80034fa:	68db      	ldr	r3, [r3, #12]
 80034fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80034fe:	68ba      	ldr	r2, [r7, #8]
 8003500:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003504:	4013      	ands	r3, r2
 8003506:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800350c:	68bb      	ldr	r3, [r7, #8]
 800350e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003510:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003514:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003518:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800351a:	4a04      	ldr	r2, [pc, #16]	; (800352c <__NVIC_SetPriorityGrouping+0x44>)
 800351c:	68bb      	ldr	r3, [r7, #8]
 800351e:	60d3      	str	r3, [r2, #12]
}
 8003520:	bf00      	nop
 8003522:	3714      	adds	r7, #20
 8003524:	46bd      	mov	sp, r7
 8003526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352a:	4770      	bx	lr
 800352c:	e000ed00 	.word	0xe000ed00

08003530 <__NVIC_GetPriorityGrouping>:
{
 8003530:	b480      	push	{r7}
 8003532:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003534:	4b04      	ldr	r3, [pc, #16]	; (8003548 <__NVIC_GetPriorityGrouping+0x18>)
 8003536:	68db      	ldr	r3, [r3, #12]
 8003538:	0a1b      	lsrs	r3, r3, #8
 800353a:	f003 0307 	and.w	r3, r3, #7
}
 800353e:	4618      	mov	r0, r3
 8003540:	46bd      	mov	sp, r7
 8003542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003546:	4770      	bx	lr
 8003548:	e000ed00 	.word	0xe000ed00

0800354c <__NVIC_EnableIRQ>:
{
 800354c:	b480      	push	{r7}
 800354e:	b083      	sub	sp, #12
 8003550:	af00      	add	r7, sp, #0
 8003552:	4603      	mov	r3, r0
 8003554:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003556:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800355a:	2b00      	cmp	r3, #0
 800355c:	db0b      	blt.n	8003576 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800355e:	79fb      	ldrb	r3, [r7, #7]
 8003560:	f003 021f 	and.w	r2, r3, #31
 8003564:	4907      	ldr	r1, [pc, #28]	; (8003584 <__NVIC_EnableIRQ+0x38>)
 8003566:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800356a:	095b      	lsrs	r3, r3, #5
 800356c:	2001      	movs	r0, #1
 800356e:	fa00 f202 	lsl.w	r2, r0, r2
 8003572:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003576:	bf00      	nop
 8003578:	370c      	adds	r7, #12
 800357a:	46bd      	mov	sp, r7
 800357c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003580:	4770      	bx	lr
 8003582:	bf00      	nop
 8003584:	e000e100 	.word	0xe000e100

08003588 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003588:	b480      	push	{r7}
 800358a:	b083      	sub	sp, #12
 800358c:	af00      	add	r7, sp, #0
 800358e:	4603      	mov	r3, r0
 8003590:	6039      	str	r1, [r7, #0]
 8003592:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003594:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003598:	2b00      	cmp	r3, #0
 800359a:	db0a      	blt.n	80035b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	b2da      	uxtb	r2, r3
 80035a0:	490c      	ldr	r1, [pc, #48]	; (80035d4 <__NVIC_SetPriority+0x4c>)
 80035a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035a6:	0112      	lsls	r2, r2, #4
 80035a8:	b2d2      	uxtb	r2, r2
 80035aa:	440b      	add	r3, r1
 80035ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80035b0:	e00a      	b.n	80035c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	b2da      	uxtb	r2, r3
 80035b6:	4908      	ldr	r1, [pc, #32]	; (80035d8 <__NVIC_SetPriority+0x50>)
 80035b8:	79fb      	ldrb	r3, [r7, #7]
 80035ba:	f003 030f 	and.w	r3, r3, #15
 80035be:	3b04      	subs	r3, #4
 80035c0:	0112      	lsls	r2, r2, #4
 80035c2:	b2d2      	uxtb	r2, r2
 80035c4:	440b      	add	r3, r1
 80035c6:	761a      	strb	r2, [r3, #24]
}
 80035c8:	bf00      	nop
 80035ca:	370c      	adds	r7, #12
 80035cc:	46bd      	mov	sp, r7
 80035ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d2:	4770      	bx	lr
 80035d4:	e000e100 	.word	0xe000e100
 80035d8:	e000ed00 	.word	0xe000ed00

080035dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80035dc:	b480      	push	{r7}
 80035de:	b089      	sub	sp, #36	; 0x24
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	60f8      	str	r0, [r7, #12]
 80035e4:	60b9      	str	r1, [r7, #8]
 80035e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	f003 0307 	and.w	r3, r3, #7
 80035ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80035f0:	69fb      	ldr	r3, [r7, #28]
 80035f2:	f1c3 0307 	rsb	r3, r3, #7
 80035f6:	2b04      	cmp	r3, #4
 80035f8:	bf28      	it	cs
 80035fa:	2304      	movcs	r3, #4
 80035fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80035fe:	69fb      	ldr	r3, [r7, #28]
 8003600:	3304      	adds	r3, #4
 8003602:	2b06      	cmp	r3, #6
 8003604:	d902      	bls.n	800360c <NVIC_EncodePriority+0x30>
 8003606:	69fb      	ldr	r3, [r7, #28]
 8003608:	3b03      	subs	r3, #3
 800360a:	e000      	b.n	800360e <NVIC_EncodePriority+0x32>
 800360c:	2300      	movs	r3, #0
 800360e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003610:	f04f 32ff 	mov.w	r2, #4294967295
 8003614:	69bb      	ldr	r3, [r7, #24]
 8003616:	fa02 f303 	lsl.w	r3, r2, r3
 800361a:	43da      	mvns	r2, r3
 800361c:	68bb      	ldr	r3, [r7, #8]
 800361e:	401a      	ands	r2, r3
 8003620:	697b      	ldr	r3, [r7, #20]
 8003622:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003624:	f04f 31ff 	mov.w	r1, #4294967295
 8003628:	697b      	ldr	r3, [r7, #20]
 800362a:	fa01 f303 	lsl.w	r3, r1, r3
 800362e:	43d9      	mvns	r1, r3
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003634:	4313      	orrs	r3, r2
         );
}
 8003636:	4618      	mov	r0, r3
 8003638:	3724      	adds	r7, #36	; 0x24
 800363a:	46bd      	mov	sp, r7
 800363c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003640:	4770      	bx	lr

08003642 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003642:	b580      	push	{r7, lr}
 8003644:	b082      	sub	sp, #8
 8003646:	af00      	add	r7, sp, #0
 8003648:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800364a:	6878      	ldr	r0, [r7, #4]
 800364c:	f7ff ff4c 	bl	80034e8 <__NVIC_SetPriorityGrouping>
}
 8003650:	bf00      	nop
 8003652:	3708      	adds	r7, #8
 8003654:	46bd      	mov	sp, r7
 8003656:	bd80      	pop	{r7, pc}

08003658 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	b086      	sub	sp, #24
 800365c:	af00      	add	r7, sp, #0
 800365e:	4603      	mov	r3, r0
 8003660:	60b9      	str	r1, [r7, #8]
 8003662:	607a      	str	r2, [r7, #4]
 8003664:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003666:	2300      	movs	r3, #0
 8003668:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800366a:	f7ff ff61 	bl	8003530 <__NVIC_GetPriorityGrouping>
 800366e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003670:	687a      	ldr	r2, [r7, #4]
 8003672:	68b9      	ldr	r1, [r7, #8]
 8003674:	6978      	ldr	r0, [r7, #20]
 8003676:	f7ff ffb1 	bl	80035dc <NVIC_EncodePriority>
 800367a:	4602      	mov	r2, r0
 800367c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003680:	4611      	mov	r1, r2
 8003682:	4618      	mov	r0, r3
 8003684:	f7ff ff80 	bl	8003588 <__NVIC_SetPriority>
}
 8003688:	bf00      	nop
 800368a:	3718      	adds	r7, #24
 800368c:	46bd      	mov	sp, r7
 800368e:	bd80      	pop	{r7, pc}

08003690 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b082      	sub	sp, #8
 8003694:	af00      	add	r7, sp, #0
 8003696:	4603      	mov	r3, r0
 8003698:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800369a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800369e:	4618      	mov	r0, r3
 80036a0:	f7ff ff54 	bl	800354c <__NVIC_EnableIRQ>
}
 80036a4:	bf00      	nop
 80036a6:	3708      	adds	r7, #8
 80036a8:	46bd      	mov	sp, r7
 80036aa:	bd80      	pop	{r7, pc}

080036ac <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80036ac:	b480      	push	{r7}
 80036ae:	b085      	sub	sp, #20
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d101      	bne.n	80036be <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80036ba:	2301      	movs	r3, #1
 80036bc:	e098      	b.n	80037f0 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	461a      	mov	r2, r3
 80036c4:	4b4d      	ldr	r3, [pc, #308]	; (80037fc <HAL_DMA_Init+0x150>)
 80036c6:	429a      	cmp	r2, r3
 80036c8:	d80f      	bhi.n	80036ea <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	461a      	mov	r2, r3
 80036d0:	4b4b      	ldr	r3, [pc, #300]	; (8003800 <HAL_DMA_Init+0x154>)
 80036d2:	4413      	add	r3, r2
 80036d4:	4a4b      	ldr	r2, [pc, #300]	; (8003804 <HAL_DMA_Init+0x158>)
 80036d6:	fba2 2303 	umull	r2, r3, r2, r3
 80036da:	091b      	lsrs	r3, r3, #4
 80036dc:	009a      	lsls	r2, r3, #2
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	4a48      	ldr	r2, [pc, #288]	; (8003808 <HAL_DMA_Init+0x15c>)
 80036e6:	641a      	str	r2, [r3, #64]	; 0x40
 80036e8:	e00e      	b.n	8003708 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	461a      	mov	r2, r3
 80036f0:	4b46      	ldr	r3, [pc, #280]	; (800380c <HAL_DMA_Init+0x160>)
 80036f2:	4413      	add	r3, r2
 80036f4:	4a43      	ldr	r2, [pc, #268]	; (8003804 <HAL_DMA_Init+0x158>)
 80036f6:	fba2 2303 	umull	r2, r3, r2, r3
 80036fa:	091b      	lsrs	r3, r3, #4
 80036fc:	009a      	lsls	r2, r3, #2
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	4a42      	ldr	r2, [pc, #264]	; (8003810 <HAL_DMA_Init+0x164>)
 8003706:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2202      	movs	r2, #2
 800370c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800371e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003722:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800372c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	691b      	ldr	r3, [r3, #16]
 8003732:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003738:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	699b      	ldr	r3, [r3, #24]
 800373e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003744:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6a1b      	ldr	r3, [r3, #32]
 800374a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800374c:	68fa      	ldr	r2, [r7, #12]
 800374e:	4313      	orrs	r3, r2
 8003750:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	68fa      	ldr	r2, [r7, #12]
 8003758:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	689b      	ldr	r3, [r3, #8]
 800375e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003762:	d039      	beq.n	80037d8 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003768:	4a27      	ldr	r2, [pc, #156]	; (8003808 <HAL_DMA_Init+0x15c>)
 800376a:	4293      	cmp	r3, r2
 800376c:	d11a      	bne.n	80037a4 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800376e:	4b29      	ldr	r3, [pc, #164]	; (8003814 <HAL_DMA_Init+0x168>)
 8003770:	681a      	ldr	r2, [r3, #0]
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003776:	f003 031c 	and.w	r3, r3, #28
 800377a:	210f      	movs	r1, #15
 800377c:	fa01 f303 	lsl.w	r3, r1, r3
 8003780:	43db      	mvns	r3, r3
 8003782:	4924      	ldr	r1, [pc, #144]	; (8003814 <HAL_DMA_Init+0x168>)
 8003784:	4013      	ands	r3, r2
 8003786:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003788:	4b22      	ldr	r3, [pc, #136]	; (8003814 <HAL_DMA_Init+0x168>)
 800378a:	681a      	ldr	r2, [r3, #0]
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6859      	ldr	r1, [r3, #4]
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003794:	f003 031c 	and.w	r3, r3, #28
 8003798:	fa01 f303 	lsl.w	r3, r1, r3
 800379c:	491d      	ldr	r1, [pc, #116]	; (8003814 <HAL_DMA_Init+0x168>)
 800379e:	4313      	orrs	r3, r2
 80037a0:	600b      	str	r3, [r1, #0]
 80037a2:	e019      	b.n	80037d8 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80037a4:	4b1c      	ldr	r3, [pc, #112]	; (8003818 <HAL_DMA_Init+0x16c>)
 80037a6:	681a      	ldr	r2, [r3, #0]
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037ac:	f003 031c 	and.w	r3, r3, #28
 80037b0:	210f      	movs	r1, #15
 80037b2:	fa01 f303 	lsl.w	r3, r1, r3
 80037b6:	43db      	mvns	r3, r3
 80037b8:	4917      	ldr	r1, [pc, #92]	; (8003818 <HAL_DMA_Init+0x16c>)
 80037ba:	4013      	ands	r3, r2
 80037bc:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80037be:	4b16      	ldr	r3, [pc, #88]	; (8003818 <HAL_DMA_Init+0x16c>)
 80037c0:	681a      	ldr	r2, [r3, #0]
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6859      	ldr	r1, [r3, #4]
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037ca:	f003 031c 	and.w	r3, r3, #28
 80037ce:	fa01 f303 	lsl.w	r3, r1, r3
 80037d2:	4911      	ldr	r1, [pc, #68]	; (8003818 <HAL_DMA_Init+0x16c>)
 80037d4:	4313      	orrs	r3, r2
 80037d6:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2200      	movs	r2, #0
 80037dc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2201      	movs	r2, #1
 80037e2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2200      	movs	r2, #0
 80037ea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80037ee:	2300      	movs	r3, #0
}
 80037f0:	4618      	mov	r0, r3
 80037f2:	3714      	adds	r7, #20
 80037f4:	46bd      	mov	sp, r7
 80037f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fa:	4770      	bx	lr
 80037fc:	40020407 	.word	0x40020407
 8003800:	bffdfff8 	.word	0xbffdfff8
 8003804:	cccccccd 	.word	0xcccccccd
 8003808:	40020000 	.word	0x40020000
 800380c:	bffdfbf8 	.word	0xbffdfbf8
 8003810:	40020400 	.word	0x40020400
 8003814:	400200a8 	.word	0x400200a8
 8003818:	400204a8 	.word	0x400204a8

0800381c <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800381c:	b480      	push	{r7}
 800381e:	b085      	sub	sp, #20
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003824:	2300      	movs	r3, #0
 8003826:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800382e:	b2db      	uxtb	r3, r3
 8003830:	2b02      	cmp	r3, #2
 8003832:	d008      	beq.n	8003846 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2204      	movs	r2, #4
 8003838:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2200      	movs	r2, #0
 800383e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003842:	2301      	movs	r3, #1
 8003844:	e022      	b.n	800388c <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	681a      	ldr	r2, [r3, #0]
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f022 020e 	bic.w	r2, r2, #14
 8003854:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	681a      	ldr	r2, [r3, #0]
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f022 0201 	bic.w	r2, r2, #1
 8003864:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800386a:	f003 021c 	and.w	r2, r3, #28
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003872:	2101      	movs	r1, #1
 8003874:	fa01 f202 	lsl.w	r2, r1, r2
 8003878:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2201      	movs	r2, #1
 800387e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2200      	movs	r2, #0
 8003886:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 800388a:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800388c:	4618      	mov	r0, r3
 800388e:	3714      	adds	r7, #20
 8003890:	46bd      	mov	sp, r7
 8003892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003896:	4770      	bx	lr

08003898 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b084      	sub	sp, #16
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80038a0:	2300      	movs	r3, #0
 80038a2:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80038aa:	b2db      	uxtb	r3, r3
 80038ac:	2b02      	cmp	r3, #2
 80038ae:	d005      	beq.n	80038bc <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2204      	movs	r2, #4
 80038b4:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80038b6:	2301      	movs	r3, #1
 80038b8:	73fb      	strb	r3, [r7, #15]
 80038ba:	e029      	b.n	8003910 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	681a      	ldr	r2, [r3, #0]
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f022 020e 	bic.w	r2, r2, #14
 80038ca:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	681a      	ldr	r2, [r3, #0]
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f022 0201 	bic.w	r2, r2, #1
 80038da:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038e0:	f003 021c 	and.w	r2, r3, #28
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038e8:	2101      	movs	r1, #1
 80038ea:	fa01 f202 	lsl.w	r2, r1, r2
 80038ee:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2201      	movs	r2, #1
 80038f4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2200      	movs	r2, #0
 80038fc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003904:	2b00      	cmp	r3, #0
 8003906:	d003      	beq.n	8003910 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800390c:	6878      	ldr	r0, [r7, #4]
 800390e:	4798      	blx	r3
    }
  }
  return status;
 8003910:	7bfb      	ldrb	r3, [r7, #15]
}
 8003912:	4618      	mov	r0, r3
 8003914:	3710      	adds	r7, #16
 8003916:	46bd      	mov	sp, r7
 8003918:	bd80      	pop	{r7, pc}

0800391a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800391a:	b580      	push	{r7, lr}
 800391c:	b084      	sub	sp, #16
 800391e:	af00      	add	r7, sp, #0
 8003920:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003936:	f003 031c 	and.w	r3, r3, #28
 800393a:	2204      	movs	r2, #4
 800393c:	409a      	lsls	r2, r3
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	4013      	ands	r3, r2
 8003942:	2b00      	cmp	r3, #0
 8003944:	d026      	beq.n	8003994 <HAL_DMA_IRQHandler+0x7a>
 8003946:	68bb      	ldr	r3, [r7, #8]
 8003948:	f003 0304 	and.w	r3, r3, #4
 800394c:	2b00      	cmp	r3, #0
 800394e:	d021      	beq.n	8003994 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f003 0320 	and.w	r3, r3, #32
 800395a:	2b00      	cmp	r3, #0
 800395c:	d107      	bne.n	800396e <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	681a      	ldr	r2, [r3, #0]
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f022 0204 	bic.w	r2, r2, #4
 800396c:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003972:	f003 021c 	and.w	r2, r3, #28
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800397a:	2104      	movs	r1, #4
 800397c:	fa01 f202 	lsl.w	r2, r1, r2
 8003980:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003986:	2b00      	cmp	r3, #0
 8003988:	d071      	beq.n	8003a6e <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800398e:	6878      	ldr	r0, [r7, #4]
 8003990:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8003992:	e06c      	b.n	8003a6e <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003998:	f003 031c 	and.w	r3, r3, #28
 800399c:	2202      	movs	r2, #2
 800399e:	409a      	lsls	r2, r3
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	4013      	ands	r3, r2
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d02e      	beq.n	8003a06 <HAL_DMA_IRQHandler+0xec>
 80039a8:	68bb      	ldr	r3, [r7, #8]
 80039aa:	f003 0302 	and.w	r3, r3, #2
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d029      	beq.n	8003a06 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f003 0320 	and.w	r3, r3, #32
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d10b      	bne.n	80039d8 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	681a      	ldr	r2, [r3, #0]
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f022 020a 	bic.w	r2, r2, #10
 80039ce:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2201      	movs	r2, #1
 80039d4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039dc:	f003 021c 	and.w	r2, r3, #28
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039e4:	2102      	movs	r1, #2
 80039e6:	fa01 f202 	lsl.w	r2, r1, r2
 80039ea:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2200      	movs	r2, #0
 80039f0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d038      	beq.n	8003a6e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a00:	6878      	ldr	r0, [r7, #4]
 8003a02:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003a04:	e033      	b.n	8003a6e <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a0a:	f003 031c 	and.w	r3, r3, #28
 8003a0e:	2208      	movs	r2, #8
 8003a10:	409a      	lsls	r2, r3
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	4013      	ands	r3, r2
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d02a      	beq.n	8003a70 <HAL_DMA_IRQHandler+0x156>
 8003a1a:	68bb      	ldr	r3, [r7, #8]
 8003a1c:	f003 0308 	and.w	r3, r3, #8
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d025      	beq.n	8003a70 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	681a      	ldr	r2, [r3, #0]
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f022 020e 	bic.w	r2, r2, #14
 8003a32:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a38:	f003 021c 	and.w	r2, r3, #28
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a40:	2101      	movs	r1, #1
 8003a42:	fa01 f202 	lsl.w	r2, r1, r2
 8003a46:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2201      	movs	r2, #1
 8003a4c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2201      	movs	r2, #1
 8003a52:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2200      	movs	r2, #0
 8003a5a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d004      	beq.n	8003a70 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a6a:	6878      	ldr	r0, [r7, #4]
 8003a6c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003a6e:	bf00      	nop
 8003a70:	bf00      	nop
}
 8003a72:	3710      	adds	r7, #16
 8003a74:	46bd      	mov	sp, r7
 8003a76:	bd80      	pop	{r7, pc}

08003a78 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003a78:	b480      	push	{r7}
 8003a7a:	b087      	sub	sp, #28
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
 8003a80:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003a82:	2300      	movs	r3, #0
 8003a84:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003a86:	e154      	b.n	8003d32 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	681a      	ldr	r2, [r3, #0]
 8003a8c:	2101      	movs	r1, #1
 8003a8e:	697b      	ldr	r3, [r7, #20]
 8003a90:	fa01 f303 	lsl.w	r3, r1, r3
 8003a94:	4013      	ands	r3, r2
 8003a96:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	f000 8146 	beq.w	8003d2c <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	685b      	ldr	r3, [r3, #4]
 8003aa4:	f003 0303 	and.w	r3, r3, #3
 8003aa8:	2b01      	cmp	r3, #1
 8003aaa:	d005      	beq.n	8003ab8 <HAL_GPIO_Init+0x40>
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	685b      	ldr	r3, [r3, #4]
 8003ab0:	f003 0303 	and.w	r3, r3, #3
 8003ab4:	2b02      	cmp	r3, #2
 8003ab6:	d130      	bne.n	8003b1a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	689b      	ldr	r3, [r3, #8]
 8003abc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003abe:	697b      	ldr	r3, [r7, #20]
 8003ac0:	005b      	lsls	r3, r3, #1
 8003ac2:	2203      	movs	r2, #3
 8003ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ac8:	43db      	mvns	r3, r3
 8003aca:	693a      	ldr	r2, [r7, #16]
 8003acc:	4013      	ands	r3, r2
 8003ace:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	68da      	ldr	r2, [r3, #12]
 8003ad4:	697b      	ldr	r3, [r7, #20]
 8003ad6:	005b      	lsls	r3, r3, #1
 8003ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8003adc:	693a      	ldr	r2, [r7, #16]
 8003ade:	4313      	orrs	r3, r2
 8003ae0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	693a      	ldr	r2, [r7, #16]
 8003ae6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	685b      	ldr	r3, [r3, #4]
 8003aec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003aee:	2201      	movs	r2, #1
 8003af0:	697b      	ldr	r3, [r7, #20]
 8003af2:	fa02 f303 	lsl.w	r3, r2, r3
 8003af6:	43db      	mvns	r3, r3
 8003af8:	693a      	ldr	r2, [r7, #16]
 8003afa:	4013      	ands	r3, r2
 8003afc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	685b      	ldr	r3, [r3, #4]
 8003b02:	091b      	lsrs	r3, r3, #4
 8003b04:	f003 0201 	and.w	r2, r3, #1
 8003b08:	697b      	ldr	r3, [r7, #20]
 8003b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b0e:	693a      	ldr	r2, [r7, #16]
 8003b10:	4313      	orrs	r3, r2
 8003b12:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	693a      	ldr	r2, [r7, #16]
 8003b18:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	685b      	ldr	r3, [r3, #4]
 8003b1e:	f003 0303 	and.w	r3, r3, #3
 8003b22:	2b03      	cmp	r3, #3
 8003b24:	d017      	beq.n	8003b56 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	68db      	ldr	r3, [r3, #12]
 8003b2a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003b2c:	697b      	ldr	r3, [r7, #20]
 8003b2e:	005b      	lsls	r3, r3, #1
 8003b30:	2203      	movs	r2, #3
 8003b32:	fa02 f303 	lsl.w	r3, r2, r3
 8003b36:	43db      	mvns	r3, r3
 8003b38:	693a      	ldr	r2, [r7, #16]
 8003b3a:	4013      	ands	r3, r2
 8003b3c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	689a      	ldr	r2, [r3, #8]
 8003b42:	697b      	ldr	r3, [r7, #20]
 8003b44:	005b      	lsls	r3, r3, #1
 8003b46:	fa02 f303 	lsl.w	r3, r2, r3
 8003b4a:	693a      	ldr	r2, [r7, #16]
 8003b4c:	4313      	orrs	r3, r2
 8003b4e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	693a      	ldr	r2, [r7, #16]
 8003b54:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	685b      	ldr	r3, [r3, #4]
 8003b5a:	f003 0303 	and.w	r3, r3, #3
 8003b5e:	2b02      	cmp	r3, #2
 8003b60:	d123      	bne.n	8003baa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003b62:	697b      	ldr	r3, [r7, #20]
 8003b64:	08da      	lsrs	r2, r3, #3
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	3208      	adds	r2, #8
 8003b6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b6e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003b70:	697b      	ldr	r3, [r7, #20]
 8003b72:	f003 0307 	and.w	r3, r3, #7
 8003b76:	009b      	lsls	r3, r3, #2
 8003b78:	220f      	movs	r2, #15
 8003b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b7e:	43db      	mvns	r3, r3
 8003b80:	693a      	ldr	r2, [r7, #16]
 8003b82:	4013      	ands	r3, r2
 8003b84:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	691a      	ldr	r2, [r3, #16]
 8003b8a:	697b      	ldr	r3, [r7, #20]
 8003b8c:	f003 0307 	and.w	r3, r3, #7
 8003b90:	009b      	lsls	r3, r3, #2
 8003b92:	fa02 f303 	lsl.w	r3, r2, r3
 8003b96:	693a      	ldr	r2, [r7, #16]
 8003b98:	4313      	orrs	r3, r2
 8003b9a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003b9c:	697b      	ldr	r3, [r7, #20]
 8003b9e:	08da      	lsrs	r2, r3, #3
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	3208      	adds	r2, #8
 8003ba4:	6939      	ldr	r1, [r7, #16]
 8003ba6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003bb0:	697b      	ldr	r3, [r7, #20]
 8003bb2:	005b      	lsls	r3, r3, #1
 8003bb4:	2203      	movs	r2, #3
 8003bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8003bba:	43db      	mvns	r3, r3
 8003bbc:	693a      	ldr	r2, [r7, #16]
 8003bbe:	4013      	ands	r3, r2
 8003bc0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003bc2:	683b      	ldr	r3, [r7, #0]
 8003bc4:	685b      	ldr	r3, [r3, #4]
 8003bc6:	f003 0203 	and.w	r2, r3, #3
 8003bca:	697b      	ldr	r3, [r7, #20]
 8003bcc:	005b      	lsls	r3, r3, #1
 8003bce:	fa02 f303 	lsl.w	r3, r2, r3
 8003bd2:	693a      	ldr	r2, [r7, #16]
 8003bd4:	4313      	orrs	r3, r2
 8003bd6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	693a      	ldr	r2, [r7, #16]
 8003bdc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003bde:	683b      	ldr	r3, [r7, #0]
 8003be0:	685b      	ldr	r3, [r3, #4]
 8003be2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	f000 80a0 	beq.w	8003d2c <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003bec:	4b58      	ldr	r3, [pc, #352]	; (8003d50 <HAL_GPIO_Init+0x2d8>)
 8003bee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003bf0:	4a57      	ldr	r2, [pc, #348]	; (8003d50 <HAL_GPIO_Init+0x2d8>)
 8003bf2:	f043 0301 	orr.w	r3, r3, #1
 8003bf6:	6613      	str	r3, [r2, #96]	; 0x60
 8003bf8:	4b55      	ldr	r3, [pc, #340]	; (8003d50 <HAL_GPIO_Init+0x2d8>)
 8003bfa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003bfc:	f003 0301 	and.w	r3, r3, #1
 8003c00:	60bb      	str	r3, [r7, #8]
 8003c02:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003c04:	4a53      	ldr	r2, [pc, #332]	; (8003d54 <HAL_GPIO_Init+0x2dc>)
 8003c06:	697b      	ldr	r3, [r7, #20]
 8003c08:	089b      	lsrs	r3, r3, #2
 8003c0a:	3302      	adds	r3, #2
 8003c0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c10:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003c12:	697b      	ldr	r3, [r7, #20]
 8003c14:	f003 0303 	and.w	r3, r3, #3
 8003c18:	009b      	lsls	r3, r3, #2
 8003c1a:	220f      	movs	r2, #15
 8003c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c20:	43db      	mvns	r3, r3
 8003c22:	693a      	ldr	r2, [r7, #16]
 8003c24:	4013      	ands	r3, r2
 8003c26:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003c2e:	d019      	beq.n	8003c64 <HAL_GPIO_Init+0x1ec>
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	4a49      	ldr	r2, [pc, #292]	; (8003d58 <HAL_GPIO_Init+0x2e0>)
 8003c34:	4293      	cmp	r3, r2
 8003c36:	d013      	beq.n	8003c60 <HAL_GPIO_Init+0x1e8>
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	4a48      	ldr	r2, [pc, #288]	; (8003d5c <HAL_GPIO_Init+0x2e4>)
 8003c3c:	4293      	cmp	r3, r2
 8003c3e:	d00d      	beq.n	8003c5c <HAL_GPIO_Init+0x1e4>
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	4a47      	ldr	r2, [pc, #284]	; (8003d60 <HAL_GPIO_Init+0x2e8>)
 8003c44:	4293      	cmp	r3, r2
 8003c46:	d007      	beq.n	8003c58 <HAL_GPIO_Init+0x1e0>
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	4a46      	ldr	r2, [pc, #280]	; (8003d64 <HAL_GPIO_Init+0x2ec>)
 8003c4c:	4293      	cmp	r3, r2
 8003c4e:	d101      	bne.n	8003c54 <HAL_GPIO_Init+0x1dc>
 8003c50:	2304      	movs	r3, #4
 8003c52:	e008      	b.n	8003c66 <HAL_GPIO_Init+0x1ee>
 8003c54:	2307      	movs	r3, #7
 8003c56:	e006      	b.n	8003c66 <HAL_GPIO_Init+0x1ee>
 8003c58:	2303      	movs	r3, #3
 8003c5a:	e004      	b.n	8003c66 <HAL_GPIO_Init+0x1ee>
 8003c5c:	2302      	movs	r3, #2
 8003c5e:	e002      	b.n	8003c66 <HAL_GPIO_Init+0x1ee>
 8003c60:	2301      	movs	r3, #1
 8003c62:	e000      	b.n	8003c66 <HAL_GPIO_Init+0x1ee>
 8003c64:	2300      	movs	r3, #0
 8003c66:	697a      	ldr	r2, [r7, #20]
 8003c68:	f002 0203 	and.w	r2, r2, #3
 8003c6c:	0092      	lsls	r2, r2, #2
 8003c6e:	4093      	lsls	r3, r2
 8003c70:	693a      	ldr	r2, [r7, #16]
 8003c72:	4313      	orrs	r3, r2
 8003c74:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003c76:	4937      	ldr	r1, [pc, #220]	; (8003d54 <HAL_GPIO_Init+0x2dc>)
 8003c78:	697b      	ldr	r3, [r7, #20]
 8003c7a:	089b      	lsrs	r3, r3, #2
 8003c7c:	3302      	adds	r3, #2
 8003c7e:	693a      	ldr	r2, [r7, #16]
 8003c80:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003c84:	4b38      	ldr	r3, [pc, #224]	; (8003d68 <HAL_GPIO_Init+0x2f0>)
 8003c86:	689b      	ldr	r3, [r3, #8]
 8003c88:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	43db      	mvns	r3, r3
 8003c8e:	693a      	ldr	r2, [r7, #16]
 8003c90:	4013      	ands	r3, r2
 8003c92:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	685b      	ldr	r3, [r3, #4]
 8003c98:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d003      	beq.n	8003ca8 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8003ca0:	693a      	ldr	r2, [r7, #16]
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	4313      	orrs	r3, r2
 8003ca6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003ca8:	4a2f      	ldr	r2, [pc, #188]	; (8003d68 <HAL_GPIO_Init+0x2f0>)
 8003caa:	693b      	ldr	r3, [r7, #16]
 8003cac:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003cae:	4b2e      	ldr	r3, [pc, #184]	; (8003d68 <HAL_GPIO_Init+0x2f0>)
 8003cb0:	68db      	ldr	r3, [r3, #12]
 8003cb2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	43db      	mvns	r3, r3
 8003cb8:	693a      	ldr	r2, [r7, #16]
 8003cba:	4013      	ands	r3, r2
 8003cbc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	685b      	ldr	r3, [r3, #4]
 8003cc2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d003      	beq.n	8003cd2 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8003cca:	693a      	ldr	r2, [r7, #16]
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	4313      	orrs	r3, r2
 8003cd0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003cd2:	4a25      	ldr	r2, [pc, #148]	; (8003d68 <HAL_GPIO_Init+0x2f0>)
 8003cd4:	693b      	ldr	r3, [r7, #16]
 8003cd6:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003cd8:	4b23      	ldr	r3, [pc, #140]	; (8003d68 <HAL_GPIO_Init+0x2f0>)
 8003cda:	685b      	ldr	r3, [r3, #4]
 8003cdc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	43db      	mvns	r3, r3
 8003ce2:	693a      	ldr	r2, [r7, #16]
 8003ce4:	4013      	ands	r3, r2
 8003ce6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	685b      	ldr	r3, [r3, #4]
 8003cec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d003      	beq.n	8003cfc <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8003cf4:	693a      	ldr	r2, [r7, #16]
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	4313      	orrs	r3, r2
 8003cfa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003cfc:	4a1a      	ldr	r2, [pc, #104]	; (8003d68 <HAL_GPIO_Init+0x2f0>)
 8003cfe:	693b      	ldr	r3, [r7, #16]
 8003d00:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003d02:	4b19      	ldr	r3, [pc, #100]	; (8003d68 <HAL_GPIO_Init+0x2f0>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	43db      	mvns	r3, r3
 8003d0c:	693a      	ldr	r2, [r7, #16]
 8003d0e:	4013      	ands	r3, r2
 8003d10:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	685b      	ldr	r3, [r3, #4]
 8003d16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d003      	beq.n	8003d26 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8003d1e:	693a      	ldr	r2, [r7, #16]
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	4313      	orrs	r3, r2
 8003d24:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003d26:	4a10      	ldr	r2, [pc, #64]	; (8003d68 <HAL_GPIO_Init+0x2f0>)
 8003d28:	693b      	ldr	r3, [r7, #16]
 8003d2a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003d2c:	697b      	ldr	r3, [r7, #20]
 8003d2e:	3301      	adds	r3, #1
 8003d30:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	681a      	ldr	r2, [r3, #0]
 8003d36:	697b      	ldr	r3, [r7, #20]
 8003d38:	fa22 f303 	lsr.w	r3, r2, r3
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	f47f aea3 	bne.w	8003a88 <HAL_GPIO_Init+0x10>
  }
}
 8003d42:	bf00      	nop
 8003d44:	bf00      	nop
 8003d46:	371c      	adds	r7, #28
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4e:	4770      	bx	lr
 8003d50:	40021000 	.word	0x40021000
 8003d54:	40010000 	.word	0x40010000
 8003d58:	48000400 	.word	0x48000400
 8003d5c:	48000800 	.word	0x48000800
 8003d60:	48000c00 	.word	0x48000c00
 8003d64:	48001000 	.word	0x48001000
 8003d68:	40010400 	.word	0x40010400

08003d6c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003d6c:	b480      	push	{r7}
 8003d6e:	b083      	sub	sp, #12
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
 8003d74:	460b      	mov	r3, r1
 8003d76:	807b      	strh	r3, [r7, #2]
 8003d78:	4613      	mov	r3, r2
 8003d7a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003d7c:	787b      	ldrb	r3, [r7, #1]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d003      	beq.n	8003d8a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003d82:	887a      	ldrh	r2, [r7, #2]
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003d88:	e002      	b.n	8003d90 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003d8a:	887a      	ldrh	r2, [r7, #2]
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003d90:	bf00      	nop
 8003d92:	370c      	adds	r7, #12
 8003d94:	46bd      	mov	sp, r7
 8003d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9a:	4770      	bx	lr

08003d9c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003d9c:	b480      	push	{r7}
 8003d9e:	b085      	sub	sp, #20
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
 8003da4:	460b      	mov	r3, r1
 8003da6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	695b      	ldr	r3, [r3, #20]
 8003dac:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003dae:	887a      	ldrh	r2, [r7, #2]
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	4013      	ands	r3, r2
 8003db4:	041a      	lsls	r2, r3, #16
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	43d9      	mvns	r1, r3
 8003dba:	887b      	ldrh	r3, [r7, #2]
 8003dbc:	400b      	ands	r3, r1
 8003dbe:	431a      	orrs	r2, r3
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	619a      	str	r2, [r3, #24]
}
 8003dc4:	bf00      	nop
 8003dc6:	3714      	adds	r7, #20
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dce:	4770      	bx	lr

08003dd0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003dd0:	b480      	push	{r7}
 8003dd2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003dd4:	4b04      	ldr	r3, [pc, #16]	; (8003de8 <HAL_PWREx_GetVoltageRange+0x18>)
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003ddc:	4618      	mov	r0, r3
 8003dde:	46bd      	mov	sp, r7
 8003de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de4:	4770      	bx	lr
 8003de6:	bf00      	nop
 8003de8:	40007000 	.word	0x40007000

08003dec <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003dec:	b480      	push	{r7}
 8003dee:	b085      	sub	sp, #20
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003dfa:	d130      	bne.n	8003e5e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003dfc:	4b23      	ldr	r3, [pc, #140]	; (8003e8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003e04:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e08:	d038      	beq.n	8003e7c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003e0a:	4b20      	ldr	r3, [pc, #128]	; (8003e8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003e12:	4a1e      	ldr	r2, [pc, #120]	; (8003e8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003e14:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003e18:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003e1a:	4b1d      	ldr	r3, [pc, #116]	; (8003e90 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	2232      	movs	r2, #50	; 0x32
 8003e20:	fb02 f303 	mul.w	r3, r2, r3
 8003e24:	4a1b      	ldr	r2, [pc, #108]	; (8003e94 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003e26:	fba2 2303 	umull	r2, r3, r2, r3
 8003e2a:	0c9b      	lsrs	r3, r3, #18
 8003e2c:	3301      	adds	r3, #1
 8003e2e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003e30:	e002      	b.n	8003e38 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	3b01      	subs	r3, #1
 8003e36:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003e38:	4b14      	ldr	r3, [pc, #80]	; (8003e8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003e3a:	695b      	ldr	r3, [r3, #20]
 8003e3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e40:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e44:	d102      	bne.n	8003e4c <HAL_PWREx_ControlVoltageScaling+0x60>
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d1f2      	bne.n	8003e32 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003e4c:	4b0f      	ldr	r3, [pc, #60]	; (8003e8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003e4e:	695b      	ldr	r3, [r3, #20]
 8003e50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e54:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e58:	d110      	bne.n	8003e7c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003e5a:	2303      	movs	r3, #3
 8003e5c:	e00f      	b.n	8003e7e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003e5e:	4b0b      	ldr	r3, [pc, #44]	; (8003e8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003e66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e6a:	d007      	beq.n	8003e7c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003e6c:	4b07      	ldr	r3, [pc, #28]	; (8003e8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003e74:	4a05      	ldr	r2, [pc, #20]	; (8003e8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003e76:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003e7a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003e7c:	2300      	movs	r3, #0
}
 8003e7e:	4618      	mov	r0, r3
 8003e80:	3714      	adds	r7, #20
 8003e82:	46bd      	mov	sp, r7
 8003e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e88:	4770      	bx	lr
 8003e8a:	bf00      	nop
 8003e8c:	40007000 	.word	0x40007000
 8003e90:	20000000 	.word	0x20000000
 8003e94:	431bde83 	.word	0x431bde83

08003e98 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b088      	sub	sp, #32
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d102      	bne.n	8003eac <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003ea6:	2301      	movs	r3, #1
 8003ea8:	f000 bc02 	b.w	80046b0 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003eac:	4b96      	ldr	r3, [pc, #600]	; (8004108 <HAL_RCC_OscConfig+0x270>)
 8003eae:	689b      	ldr	r3, [r3, #8]
 8003eb0:	f003 030c 	and.w	r3, r3, #12
 8003eb4:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003eb6:	4b94      	ldr	r3, [pc, #592]	; (8004108 <HAL_RCC_OscConfig+0x270>)
 8003eb8:	68db      	ldr	r3, [r3, #12]
 8003eba:	f003 0303 	and.w	r3, r3, #3
 8003ebe:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f003 0310 	and.w	r3, r3, #16
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	f000 80e4 	beq.w	8004096 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003ece:	69bb      	ldr	r3, [r7, #24]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d007      	beq.n	8003ee4 <HAL_RCC_OscConfig+0x4c>
 8003ed4:	69bb      	ldr	r3, [r7, #24]
 8003ed6:	2b0c      	cmp	r3, #12
 8003ed8:	f040 808b 	bne.w	8003ff2 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003edc:	697b      	ldr	r3, [r7, #20]
 8003ede:	2b01      	cmp	r3, #1
 8003ee0:	f040 8087 	bne.w	8003ff2 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003ee4:	4b88      	ldr	r3, [pc, #544]	; (8004108 <HAL_RCC_OscConfig+0x270>)
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f003 0302 	and.w	r3, r3, #2
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d005      	beq.n	8003efc <HAL_RCC_OscConfig+0x64>
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	699b      	ldr	r3, [r3, #24]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d101      	bne.n	8003efc <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003ef8:	2301      	movs	r3, #1
 8003efa:	e3d9      	b.n	80046b0 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6a1a      	ldr	r2, [r3, #32]
 8003f00:	4b81      	ldr	r3, [pc, #516]	; (8004108 <HAL_RCC_OscConfig+0x270>)
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f003 0308 	and.w	r3, r3, #8
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d004      	beq.n	8003f16 <HAL_RCC_OscConfig+0x7e>
 8003f0c:	4b7e      	ldr	r3, [pc, #504]	; (8004108 <HAL_RCC_OscConfig+0x270>)
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003f14:	e005      	b.n	8003f22 <HAL_RCC_OscConfig+0x8a>
 8003f16:	4b7c      	ldr	r3, [pc, #496]	; (8004108 <HAL_RCC_OscConfig+0x270>)
 8003f18:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f1c:	091b      	lsrs	r3, r3, #4
 8003f1e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d223      	bcs.n	8003f6e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6a1b      	ldr	r3, [r3, #32]
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	f000 fdbe 	bl	8004aac <RCC_SetFlashLatencyFromMSIRange>
 8003f30:	4603      	mov	r3, r0
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d001      	beq.n	8003f3a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8003f36:	2301      	movs	r3, #1
 8003f38:	e3ba      	b.n	80046b0 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003f3a:	4b73      	ldr	r3, [pc, #460]	; (8004108 <HAL_RCC_OscConfig+0x270>)
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	4a72      	ldr	r2, [pc, #456]	; (8004108 <HAL_RCC_OscConfig+0x270>)
 8003f40:	f043 0308 	orr.w	r3, r3, #8
 8003f44:	6013      	str	r3, [r2, #0]
 8003f46:	4b70      	ldr	r3, [pc, #448]	; (8004108 <HAL_RCC_OscConfig+0x270>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6a1b      	ldr	r3, [r3, #32]
 8003f52:	496d      	ldr	r1, [pc, #436]	; (8004108 <HAL_RCC_OscConfig+0x270>)
 8003f54:	4313      	orrs	r3, r2
 8003f56:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003f58:	4b6b      	ldr	r3, [pc, #428]	; (8004108 <HAL_RCC_OscConfig+0x270>)
 8003f5a:	685b      	ldr	r3, [r3, #4]
 8003f5c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	69db      	ldr	r3, [r3, #28]
 8003f64:	021b      	lsls	r3, r3, #8
 8003f66:	4968      	ldr	r1, [pc, #416]	; (8004108 <HAL_RCC_OscConfig+0x270>)
 8003f68:	4313      	orrs	r3, r2
 8003f6a:	604b      	str	r3, [r1, #4]
 8003f6c:	e025      	b.n	8003fba <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003f6e:	4b66      	ldr	r3, [pc, #408]	; (8004108 <HAL_RCC_OscConfig+0x270>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	4a65      	ldr	r2, [pc, #404]	; (8004108 <HAL_RCC_OscConfig+0x270>)
 8003f74:	f043 0308 	orr.w	r3, r3, #8
 8003f78:	6013      	str	r3, [r2, #0]
 8003f7a:	4b63      	ldr	r3, [pc, #396]	; (8004108 <HAL_RCC_OscConfig+0x270>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6a1b      	ldr	r3, [r3, #32]
 8003f86:	4960      	ldr	r1, [pc, #384]	; (8004108 <HAL_RCC_OscConfig+0x270>)
 8003f88:	4313      	orrs	r3, r2
 8003f8a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003f8c:	4b5e      	ldr	r3, [pc, #376]	; (8004108 <HAL_RCC_OscConfig+0x270>)
 8003f8e:	685b      	ldr	r3, [r3, #4]
 8003f90:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	69db      	ldr	r3, [r3, #28]
 8003f98:	021b      	lsls	r3, r3, #8
 8003f9a:	495b      	ldr	r1, [pc, #364]	; (8004108 <HAL_RCC_OscConfig+0x270>)
 8003f9c:	4313      	orrs	r3, r2
 8003f9e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003fa0:	69bb      	ldr	r3, [r7, #24]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d109      	bne.n	8003fba <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6a1b      	ldr	r3, [r3, #32]
 8003faa:	4618      	mov	r0, r3
 8003fac:	f000 fd7e 	bl	8004aac <RCC_SetFlashLatencyFromMSIRange>
 8003fb0:	4603      	mov	r3, r0
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d001      	beq.n	8003fba <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	e37a      	b.n	80046b0 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003fba:	f000 fc81 	bl	80048c0 <HAL_RCC_GetSysClockFreq>
 8003fbe:	4602      	mov	r2, r0
 8003fc0:	4b51      	ldr	r3, [pc, #324]	; (8004108 <HAL_RCC_OscConfig+0x270>)
 8003fc2:	689b      	ldr	r3, [r3, #8]
 8003fc4:	091b      	lsrs	r3, r3, #4
 8003fc6:	f003 030f 	and.w	r3, r3, #15
 8003fca:	4950      	ldr	r1, [pc, #320]	; (800410c <HAL_RCC_OscConfig+0x274>)
 8003fcc:	5ccb      	ldrb	r3, [r1, r3]
 8003fce:	f003 031f 	and.w	r3, r3, #31
 8003fd2:	fa22 f303 	lsr.w	r3, r2, r3
 8003fd6:	4a4e      	ldr	r2, [pc, #312]	; (8004110 <HAL_RCC_OscConfig+0x278>)
 8003fd8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003fda:	4b4e      	ldr	r3, [pc, #312]	; (8004114 <HAL_RCC_OscConfig+0x27c>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	4618      	mov	r0, r3
 8003fe0:	f7fd fb2e 	bl	8001640 <HAL_InitTick>
 8003fe4:	4603      	mov	r3, r0
 8003fe6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003fe8:	7bfb      	ldrb	r3, [r7, #15]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d052      	beq.n	8004094 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8003fee:	7bfb      	ldrb	r3, [r7, #15]
 8003ff0:	e35e      	b.n	80046b0 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	699b      	ldr	r3, [r3, #24]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d032      	beq.n	8004060 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003ffa:	4b43      	ldr	r3, [pc, #268]	; (8004108 <HAL_RCC_OscConfig+0x270>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	4a42      	ldr	r2, [pc, #264]	; (8004108 <HAL_RCC_OscConfig+0x270>)
 8004000:	f043 0301 	orr.w	r3, r3, #1
 8004004:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004006:	f7fe fa5d 	bl	80024c4 <HAL_GetTick>
 800400a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800400c:	e008      	b.n	8004020 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800400e:	f7fe fa59 	bl	80024c4 <HAL_GetTick>
 8004012:	4602      	mov	r2, r0
 8004014:	693b      	ldr	r3, [r7, #16]
 8004016:	1ad3      	subs	r3, r2, r3
 8004018:	2b02      	cmp	r3, #2
 800401a:	d901      	bls.n	8004020 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800401c:	2303      	movs	r3, #3
 800401e:	e347      	b.n	80046b0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004020:	4b39      	ldr	r3, [pc, #228]	; (8004108 <HAL_RCC_OscConfig+0x270>)
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f003 0302 	and.w	r3, r3, #2
 8004028:	2b00      	cmp	r3, #0
 800402a:	d0f0      	beq.n	800400e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800402c:	4b36      	ldr	r3, [pc, #216]	; (8004108 <HAL_RCC_OscConfig+0x270>)
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	4a35      	ldr	r2, [pc, #212]	; (8004108 <HAL_RCC_OscConfig+0x270>)
 8004032:	f043 0308 	orr.w	r3, r3, #8
 8004036:	6013      	str	r3, [r2, #0]
 8004038:	4b33      	ldr	r3, [pc, #204]	; (8004108 <HAL_RCC_OscConfig+0x270>)
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6a1b      	ldr	r3, [r3, #32]
 8004044:	4930      	ldr	r1, [pc, #192]	; (8004108 <HAL_RCC_OscConfig+0x270>)
 8004046:	4313      	orrs	r3, r2
 8004048:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800404a:	4b2f      	ldr	r3, [pc, #188]	; (8004108 <HAL_RCC_OscConfig+0x270>)
 800404c:	685b      	ldr	r3, [r3, #4]
 800404e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	69db      	ldr	r3, [r3, #28]
 8004056:	021b      	lsls	r3, r3, #8
 8004058:	492b      	ldr	r1, [pc, #172]	; (8004108 <HAL_RCC_OscConfig+0x270>)
 800405a:	4313      	orrs	r3, r2
 800405c:	604b      	str	r3, [r1, #4]
 800405e:	e01a      	b.n	8004096 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004060:	4b29      	ldr	r3, [pc, #164]	; (8004108 <HAL_RCC_OscConfig+0x270>)
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	4a28      	ldr	r2, [pc, #160]	; (8004108 <HAL_RCC_OscConfig+0x270>)
 8004066:	f023 0301 	bic.w	r3, r3, #1
 800406a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800406c:	f7fe fa2a 	bl	80024c4 <HAL_GetTick>
 8004070:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004072:	e008      	b.n	8004086 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004074:	f7fe fa26 	bl	80024c4 <HAL_GetTick>
 8004078:	4602      	mov	r2, r0
 800407a:	693b      	ldr	r3, [r7, #16]
 800407c:	1ad3      	subs	r3, r2, r3
 800407e:	2b02      	cmp	r3, #2
 8004080:	d901      	bls.n	8004086 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8004082:	2303      	movs	r3, #3
 8004084:	e314      	b.n	80046b0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004086:	4b20      	ldr	r3, [pc, #128]	; (8004108 <HAL_RCC_OscConfig+0x270>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f003 0302 	and.w	r3, r3, #2
 800408e:	2b00      	cmp	r3, #0
 8004090:	d1f0      	bne.n	8004074 <HAL_RCC_OscConfig+0x1dc>
 8004092:	e000      	b.n	8004096 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004094:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f003 0301 	and.w	r3, r3, #1
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d073      	beq.n	800418a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80040a2:	69bb      	ldr	r3, [r7, #24]
 80040a4:	2b08      	cmp	r3, #8
 80040a6:	d005      	beq.n	80040b4 <HAL_RCC_OscConfig+0x21c>
 80040a8:	69bb      	ldr	r3, [r7, #24]
 80040aa:	2b0c      	cmp	r3, #12
 80040ac:	d10e      	bne.n	80040cc <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80040ae:	697b      	ldr	r3, [r7, #20]
 80040b0:	2b03      	cmp	r3, #3
 80040b2:	d10b      	bne.n	80040cc <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040b4:	4b14      	ldr	r3, [pc, #80]	; (8004108 <HAL_RCC_OscConfig+0x270>)
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d063      	beq.n	8004188 <HAL_RCC_OscConfig+0x2f0>
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	685b      	ldr	r3, [r3, #4]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d15f      	bne.n	8004188 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80040c8:	2301      	movs	r3, #1
 80040ca:	e2f1      	b.n	80046b0 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	685b      	ldr	r3, [r3, #4]
 80040d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040d4:	d106      	bne.n	80040e4 <HAL_RCC_OscConfig+0x24c>
 80040d6:	4b0c      	ldr	r3, [pc, #48]	; (8004108 <HAL_RCC_OscConfig+0x270>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	4a0b      	ldr	r2, [pc, #44]	; (8004108 <HAL_RCC_OscConfig+0x270>)
 80040dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040e0:	6013      	str	r3, [r2, #0]
 80040e2:	e025      	b.n	8004130 <HAL_RCC_OscConfig+0x298>
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	685b      	ldr	r3, [r3, #4]
 80040e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80040ec:	d114      	bne.n	8004118 <HAL_RCC_OscConfig+0x280>
 80040ee:	4b06      	ldr	r3, [pc, #24]	; (8004108 <HAL_RCC_OscConfig+0x270>)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	4a05      	ldr	r2, [pc, #20]	; (8004108 <HAL_RCC_OscConfig+0x270>)
 80040f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80040f8:	6013      	str	r3, [r2, #0]
 80040fa:	4b03      	ldr	r3, [pc, #12]	; (8004108 <HAL_RCC_OscConfig+0x270>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	4a02      	ldr	r2, [pc, #8]	; (8004108 <HAL_RCC_OscConfig+0x270>)
 8004100:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004104:	6013      	str	r3, [r2, #0]
 8004106:	e013      	b.n	8004130 <HAL_RCC_OscConfig+0x298>
 8004108:	40021000 	.word	0x40021000
 800410c:	0800ac30 	.word	0x0800ac30
 8004110:	20000000 	.word	0x20000000
 8004114:	20000004 	.word	0x20000004
 8004118:	4ba0      	ldr	r3, [pc, #640]	; (800439c <HAL_RCC_OscConfig+0x504>)
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	4a9f      	ldr	r2, [pc, #636]	; (800439c <HAL_RCC_OscConfig+0x504>)
 800411e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004122:	6013      	str	r3, [r2, #0]
 8004124:	4b9d      	ldr	r3, [pc, #628]	; (800439c <HAL_RCC_OscConfig+0x504>)
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	4a9c      	ldr	r2, [pc, #624]	; (800439c <HAL_RCC_OscConfig+0x504>)
 800412a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800412e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	685b      	ldr	r3, [r3, #4]
 8004134:	2b00      	cmp	r3, #0
 8004136:	d013      	beq.n	8004160 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004138:	f7fe f9c4 	bl	80024c4 <HAL_GetTick>
 800413c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800413e:	e008      	b.n	8004152 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004140:	f7fe f9c0 	bl	80024c4 <HAL_GetTick>
 8004144:	4602      	mov	r2, r0
 8004146:	693b      	ldr	r3, [r7, #16]
 8004148:	1ad3      	subs	r3, r2, r3
 800414a:	2b64      	cmp	r3, #100	; 0x64
 800414c:	d901      	bls.n	8004152 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800414e:	2303      	movs	r3, #3
 8004150:	e2ae      	b.n	80046b0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004152:	4b92      	ldr	r3, [pc, #584]	; (800439c <HAL_RCC_OscConfig+0x504>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800415a:	2b00      	cmp	r3, #0
 800415c:	d0f0      	beq.n	8004140 <HAL_RCC_OscConfig+0x2a8>
 800415e:	e014      	b.n	800418a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004160:	f7fe f9b0 	bl	80024c4 <HAL_GetTick>
 8004164:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004166:	e008      	b.n	800417a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004168:	f7fe f9ac 	bl	80024c4 <HAL_GetTick>
 800416c:	4602      	mov	r2, r0
 800416e:	693b      	ldr	r3, [r7, #16]
 8004170:	1ad3      	subs	r3, r2, r3
 8004172:	2b64      	cmp	r3, #100	; 0x64
 8004174:	d901      	bls.n	800417a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004176:	2303      	movs	r3, #3
 8004178:	e29a      	b.n	80046b0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800417a:	4b88      	ldr	r3, [pc, #544]	; (800439c <HAL_RCC_OscConfig+0x504>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004182:	2b00      	cmp	r3, #0
 8004184:	d1f0      	bne.n	8004168 <HAL_RCC_OscConfig+0x2d0>
 8004186:	e000      	b.n	800418a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004188:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f003 0302 	and.w	r3, r3, #2
 8004192:	2b00      	cmp	r3, #0
 8004194:	d060      	beq.n	8004258 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004196:	69bb      	ldr	r3, [r7, #24]
 8004198:	2b04      	cmp	r3, #4
 800419a:	d005      	beq.n	80041a8 <HAL_RCC_OscConfig+0x310>
 800419c:	69bb      	ldr	r3, [r7, #24]
 800419e:	2b0c      	cmp	r3, #12
 80041a0:	d119      	bne.n	80041d6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80041a2:	697b      	ldr	r3, [r7, #20]
 80041a4:	2b02      	cmp	r3, #2
 80041a6:	d116      	bne.n	80041d6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80041a8:	4b7c      	ldr	r3, [pc, #496]	; (800439c <HAL_RCC_OscConfig+0x504>)
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d005      	beq.n	80041c0 <HAL_RCC_OscConfig+0x328>
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	68db      	ldr	r3, [r3, #12]
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d101      	bne.n	80041c0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80041bc:	2301      	movs	r3, #1
 80041be:	e277      	b.n	80046b0 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041c0:	4b76      	ldr	r3, [pc, #472]	; (800439c <HAL_RCC_OscConfig+0x504>)
 80041c2:	685b      	ldr	r3, [r3, #4]
 80041c4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	691b      	ldr	r3, [r3, #16]
 80041cc:	061b      	lsls	r3, r3, #24
 80041ce:	4973      	ldr	r1, [pc, #460]	; (800439c <HAL_RCC_OscConfig+0x504>)
 80041d0:	4313      	orrs	r3, r2
 80041d2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80041d4:	e040      	b.n	8004258 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	68db      	ldr	r3, [r3, #12]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d023      	beq.n	8004226 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80041de:	4b6f      	ldr	r3, [pc, #444]	; (800439c <HAL_RCC_OscConfig+0x504>)
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	4a6e      	ldr	r2, [pc, #440]	; (800439c <HAL_RCC_OscConfig+0x504>)
 80041e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041ea:	f7fe f96b 	bl	80024c4 <HAL_GetTick>
 80041ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80041f0:	e008      	b.n	8004204 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80041f2:	f7fe f967 	bl	80024c4 <HAL_GetTick>
 80041f6:	4602      	mov	r2, r0
 80041f8:	693b      	ldr	r3, [r7, #16]
 80041fa:	1ad3      	subs	r3, r2, r3
 80041fc:	2b02      	cmp	r3, #2
 80041fe:	d901      	bls.n	8004204 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004200:	2303      	movs	r3, #3
 8004202:	e255      	b.n	80046b0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004204:	4b65      	ldr	r3, [pc, #404]	; (800439c <HAL_RCC_OscConfig+0x504>)
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800420c:	2b00      	cmp	r3, #0
 800420e:	d0f0      	beq.n	80041f2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004210:	4b62      	ldr	r3, [pc, #392]	; (800439c <HAL_RCC_OscConfig+0x504>)
 8004212:	685b      	ldr	r3, [r3, #4]
 8004214:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	691b      	ldr	r3, [r3, #16]
 800421c:	061b      	lsls	r3, r3, #24
 800421e:	495f      	ldr	r1, [pc, #380]	; (800439c <HAL_RCC_OscConfig+0x504>)
 8004220:	4313      	orrs	r3, r2
 8004222:	604b      	str	r3, [r1, #4]
 8004224:	e018      	b.n	8004258 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004226:	4b5d      	ldr	r3, [pc, #372]	; (800439c <HAL_RCC_OscConfig+0x504>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4a5c      	ldr	r2, [pc, #368]	; (800439c <HAL_RCC_OscConfig+0x504>)
 800422c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004230:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004232:	f7fe f947 	bl	80024c4 <HAL_GetTick>
 8004236:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004238:	e008      	b.n	800424c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800423a:	f7fe f943 	bl	80024c4 <HAL_GetTick>
 800423e:	4602      	mov	r2, r0
 8004240:	693b      	ldr	r3, [r7, #16]
 8004242:	1ad3      	subs	r3, r2, r3
 8004244:	2b02      	cmp	r3, #2
 8004246:	d901      	bls.n	800424c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004248:	2303      	movs	r3, #3
 800424a:	e231      	b.n	80046b0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800424c:	4b53      	ldr	r3, [pc, #332]	; (800439c <HAL_RCC_OscConfig+0x504>)
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004254:	2b00      	cmp	r3, #0
 8004256:	d1f0      	bne.n	800423a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f003 0308 	and.w	r3, r3, #8
 8004260:	2b00      	cmp	r3, #0
 8004262:	d03c      	beq.n	80042de <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	695b      	ldr	r3, [r3, #20]
 8004268:	2b00      	cmp	r3, #0
 800426a:	d01c      	beq.n	80042a6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800426c:	4b4b      	ldr	r3, [pc, #300]	; (800439c <HAL_RCC_OscConfig+0x504>)
 800426e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004272:	4a4a      	ldr	r2, [pc, #296]	; (800439c <HAL_RCC_OscConfig+0x504>)
 8004274:	f043 0301 	orr.w	r3, r3, #1
 8004278:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800427c:	f7fe f922 	bl	80024c4 <HAL_GetTick>
 8004280:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004282:	e008      	b.n	8004296 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004284:	f7fe f91e 	bl	80024c4 <HAL_GetTick>
 8004288:	4602      	mov	r2, r0
 800428a:	693b      	ldr	r3, [r7, #16]
 800428c:	1ad3      	subs	r3, r2, r3
 800428e:	2b02      	cmp	r3, #2
 8004290:	d901      	bls.n	8004296 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004292:	2303      	movs	r3, #3
 8004294:	e20c      	b.n	80046b0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004296:	4b41      	ldr	r3, [pc, #260]	; (800439c <HAL_RCC_OscConfig+0x504>)
 8004298:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800429c:	f003 0302 	and.w	r3, r3, #2
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d0ef      	beq.n	8004284 <HAL_RCC_OscConfig+0x3ec>
 80042a4:	e01b      	b.n	80042de <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80042a6:	4b3d      	ldr	r3, [pc, #244]	; (800439c <HAL_RCC_OscConfig+0x504>)
 80042a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80042ac:	4a3b      	ldr	r2, [pc, #236]	; (800439c <HAL_RCC_OscConfig+0x504>)
 80042ae:	f023 0301 	bic.w	r3, r3, #1
 80042b2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042b6:	f7fe f905 	bl	80024c4 <HAL_GetTick>
 80042ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80042bc:	e008      	b.n	80042d0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80042be:	f7fe f901 	bl	80024c4 <HAL_GetTick>
 80042c2:	4602      	mov	r2, r0
 80042c4:	693b      	ldr	r3, [r7, #16]
 80042c6:	1ad3      	subs	r3, r2, r3
 80042c8:	2b02      	cmp	r3, #2
 80042ca:	d901      	bls.n	80042d0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80042cc:	2303      	movs	r3, #3
 80042ce:	e1ef      	b.n	80046b0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80042d0:	4b32      	ldr	r3, [pc, #200]	; (800439c <HAL_RCC_OscConfig+0x504>)
 80042d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80042d6:	f003 0302 	and.w	r3, r3, #2
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d1ef      	bne.n	80042be <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f003 0304 	and.w	r3, r3, #4
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	f000 80a6 	beq.w	8004438 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80042ec:	2300      	movs	r3, #0
 80042ee:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80042f0:	4b2a      	ldr	r3, [pc, #168]	; (800439c <HAL_RCC_OscConfig+0x504>)
 80042f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d10d      	bne.n	8004318 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80042fc:	4b27      	ldr	r3, [pc, #156]	; (800439c <HAL_RCC_OscConfig+0x504>)
 80042fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004300:	4a26      	ldr	r2, [pc, #152]	; (800439c <HAL_RCC_OscConfig+0x504>)
 8004302:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004306:	6593      	str	r3, [r2, #88]	; 0x58
 8004308:	4b24      	ldr	r3, [pc, #144]	; (800439c <HAL_RCC_OscConfig+0x504>)
 800430a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800430c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004310:	60bb      	str	r3, [r7, #8]
 8004312:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004314:	2301      	movs	r3, #1
 8004316:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004318:	4b21      	ldr	r3, [pc, #132]	; (80043a0 <HAL_RCC_OscConfig+0x508>)
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004320:	2b00      	cmp	r3, #0
 8004322:	d118      	bne.n	8004356 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004324:	4b1e      	ldr	r3, [pc, #120]	; (80043a0 <HAL_RCC_OscConfig+0x508>)
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4a1d      	ldr	r2, [pc, #116]	; (80043a0 <HAL_RCC_OscConfig+0x508>)
 800432a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800432e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004330:	f7fe f8c8 	bl	80024c4 <HAL_GetTick>
 8004334:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004336:	e008      	b.n	800434a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004338:	f7fe f8c4 	bl	80024c4 <HAL_GetTick>
 800433c:	4602      	mov	r2, r0
 800433e:	693b      	ldr	r3, [r7, #16]
 8004340:	1ad3      	subs	r3, r2, r3
 8004342:	2b02      	cmp	r3, #2
 8004344:	d901      	bls.n	800434a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004346:	2303      	movs	r3, #3
 8004348:	e1b2      	b.n	80046b0 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800434a:	4b15      	ldr	r3, [pc, #84]	; (80043a0 <HAL_RCC_OscConfig+0x508>)
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004352:	2b00      	cmp	r3, #0
 8004354:	d0f0      	beq.n	8004338 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	689b      	ldr	r3, [r3, #8]
 800435a:	2b01      	cmp	r3, #1
 800435c:	d108      	bne.n	8004370 <HAL_RCC_OscConfig+0x4d8>
 800435e:	4b0f      	ldr	r3, [pc, #60]	; (800439c <HAL_RCC_OscConfig+0x504>)
 8004360:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004364:	4a0d      	ldr	r2, [pc, #52]	; (800439c <HAL_RCC_OscConfig+0x504>)
 8004366:	f043 0301 	orr.w	r3, r3, #1
 800436a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800436e:	e029      	b.n	80043c4 <HAL_RCC_OscConfig+0x52c>
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	689b      	ldr	r3, [r3, #8]
 8004374:	2b05      	cmp	r3, #5
 8004376:	d115      	bne.n	80043a4 <HAL_RCC_OscConfig+0x50c>
 8004378:	4b08      	ldr	r3, [pc, #32]	; (800439c <HAL_RCC_OscConfig+0x504>)
 800437a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800437e:	4a07      	ldr	r2, [pc, #28]	; (800439c <HAL_RCC_OscConfig+0x504>)
 8004380:	f043 0304 	orr.w	r3, r3, #4
 8004384:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004388:	4b04      	ldr	r3, [pc, #16]	; (800439c <HAL_RCC_OscConfig+0x504>)
 800438a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800438e:	4a03      	ldr	r2, [pc, #12]	; (800439c <HAL_RCC_OscConfig+0x504>)
 8004390:	f043 0301 	orr.w	r3, r3, #1
 8004394:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004398:	e014      	b.n	80043c4 <HAL_RCC_OscConfig+0x52c>
 800439a:	bf00      	nop
 800439c:	40021000 	.word	0x40021000
 80043a0:	40007000 	.word	0x40007000
 80043a4:	4b9a      	ldr	r3, [pc, #616]	; (8004610 <HAL_RCC_OscConfig+0x778>)
 80043a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043aa:	4a99      	ldr	r2, [pc, #612]	; (8004610 <HAL_RCC_OscConfig+0x778>)
 80043ac:	f023 0301 	bic.w	r3, r3, #1
 80043b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80043b4:	4b96      	ldr	r3, [pc, #600]	; (8004610 <HAL_RCC_OscConfig+0x778>)
 80043b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043ba:	4a95      	ldr	r2, [pc, #596]	; (8004610 <HAL_RCC_OscConfig+0x778>)
 80043bc:	f023 0304 	bic.w	r3, r3, #4
 80043c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	689b      	ldr	r3, [r3, #8]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d016      	beq.n	80043fa <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043cc:	f7fe f87a 	bl	80024c4 <HAL_GetTick>
 80043d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80043d2:	e00a      	b.n	80043ea <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043d4:	f7fe f876 	bl	80024c4 <HAL_GetTick>
 80043d8:	4602      	mov	r2, r0
 80043da:	693b      	ldr	r3, [r7, #16]
 80043dc:	1ad3      	subs	r3, r2, r3
 80043de:	f241 3288 	movw	r2, #5000	; 0x1388
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d901      	bls.n	80043ea <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80043e6:	2303      	movs	r3, #3
 80043e8:	e162      	b.n	80046b0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80043ea:	4b89      	ldr	r3, [pc, #548]	; (8004610 <HAL_RCC_OscConfig+0x778>)
 80043ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043f0:	f003 0302 	and.w	r3, r3, #2
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d0ed      	beq.n	80043d4 <HAL_RCC_OscConfig+0x53c>
 80043f8:	e015      	b.n	8004426 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043fa:	f7fe f863 	bl	80024c4 <HAL_GetTick>
 80043fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004400:	e00a      	b.n	8004418 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004402:	f7fe f85f 	bl	80024c4 <HAL_GetTick>
 8004406:	4602      	mov	r2, r0
 8004408:	693b      	ldr	r3, [r7, #16]
 800440a:	1ad3      	subs	r3, r2, r3
 800440c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004410:	4293      	cmp	r3, r2
 8004412:	d901      	bls.n	8004418 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004414:	2303      	movs	r3, #3
 8004416:	e14b      	b.n	80046b0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004418:	4b7d      	ldr	r3, [pc, #500]	; (8004610 <HAL_RCC_OscConfig+0x778>)
 800441a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800441e:	f003 0302 	and.w	r3, r3, #2
 8004422:	2b00      	cmp	r3, #0
 8004424:	d1ed      	bne.n	8004402 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004426:	7ffb      	ldrb	r3, [r7, #31]
 8004428:	2b01      	cmp	r3, #1
 800442a:	d105      	bne.n	8004438 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800442c:	4b78      	ldr	r3, [pc, #480]	; (8004610 <HAL_RCC_OscConfig+0x778>)
 800442e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004430:	4a77      	ldr	r2, [pc, #476]	; (8004610 <HAL_RCC_OscConfig+0x778>)
 8004432:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004436:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f003 0320 	and.w	r3, r3, #32
 8004440:	2b00      	cmp	r3, #0
 8004442:	d03c      	beq.n	80044be <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004448:	2b00      	cmp	r3, #0
 800444a:	d01c      	beq.n	8004486 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800444c:	4b70      	ldr	r3, [pc, #448]	; (8004610 <HAL_RCC_OscConfig+0x778>)
 800444e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004452:	4a6f      	ldr	r2, [pc, #444]	; (8004610 <HAL_RCC_OscConfig+0x778>)
 8004454:	f043 0301 	orr.w	r3, r3, #1
 8004458:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800445c:	f7fe f832 	bl	80024c4 <HAL_GetTick>
 8004460:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004462:	e008      	b.n	8004476 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004464:	f7fe f82e 	bl	80024c4 <HAL_GetTick>
 8004468:	4602      	mov	r2, r0
 800446a:	693b      	ldr	r3, [r7, #16]
 800446c:	1ad3      	subs	r3, r2, r3
 800446e:	2b02      	cmp	r3, #2
 8004470:	d901      	bls.n	8004476 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8004472:	2303      	movs	r3, #3
 8004474:	e11c      	b.n	80046b0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004476:	4b66      	ldr	r3, [pc, #408]	; (8004610 <HAL_RCC_OscConfig+0x778>)
 8004478:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800447c:	f003 0302 	and.w	r3, r3, #2
 8004480:	2b00      	cmp	r3, #0
 8004482:	d0ef      	beq.n	8004464 <HAL_RCC_OscConfig+0x5cc>
 8004484:	e01b      	b.n	80044be <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004486:	4b62      	ldr	r3, [pc, #392]	; (8004610 <HAL_RCC_OscConfig+0x778>)
 8004488:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800448c:	4a60      	ldr	r2, [pc, #384]	; (8004610 <HAL_RCC_OscConfig+0x778>)
 800448e:	f023 0301 	bic.w	r3, r3, #1
 8004492:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004496:	f7fe f815 	bl	80024c4 <HAL_GetTick>
 800449a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800449c:	e008      	b.n	80044b0 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800449e:	f7fe f811 	bl	80024c4 <HAL_GetTick>
 80044a2:	4602      	mov	r2, r0
 80044a4:	693b      	ldr	r3, [r7, #16]
 80044a6:	1ad3      	subs	r3, r2, r3
 80044a8:	2b02      	cmp	r3, #2
 80044aa:	d901      	bls.n	80044b0 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80044ac:	2303      	movs	r3, #3
 80044ae:	e0ff      	b.n	80046b0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80044b0:	4b57      	ldr	r3, [pc, #348]	; (8004610 <HAL_RCC_OscConfig+0x778>)
 80044b2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80044b6:	f003 0302 	and.w	r3, r3, #2
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d1ef      	bne.n	800449e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	f000 80f3 	beq.w	80046ae <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044cc:	2b02      	cmp	r3, #2
 80044ce:	f040 80c9 	bne.w	8004664 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80044d2:	4b4f      	ldr	r3, [pc, #316]	; (8004610 <HAL_RCC_OscConfig+0x778>)
 80044d4:	68db      	ldr	r3, [r3, #12]
 80044d6:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80044d8:	697b      	ldr	r3, [r7, #20]
 80044da:	f003 0203 	and.w	r2, r3, #3
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044e2:	429a      	cmp	r2, r3
 80044e4:	d12c      	bne.n	8004540 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80044e6:	697b      	ldr	r3, [r7, #20]
 80044e8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044f0:	3b01      	subs	r3, #1
 80044f2:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80044f4:	429a      	cmp	r2, r3
 80044f6:	d123      	bne.n	8004540 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80044f8:	697b      	ldr	r3, [r7, #20]
 80044fa:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004502:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004504:	429a      	cmp	r2, r3
 8004506:	d11b      	bne.n	8004540 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004508:	697b      	ldr	r3, [r7, #20]
 800450a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004512:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004514:	429a      	cmp	r2, r3
 8004516:	d113      	bne.n	8004540 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004518:	697b      	ldr	r3, [r7, #20]
 800451a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004522:	085b      	lsrs	r3, r3, #1
 8004524:	3b01      	subs	r3, #1
 8004526:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004528:	429a      	cmp	r2, r3
 800452a:	d109      	bne.n	8004540 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800452c:	697b      	ldr	r3, [r7, #20]
 800452e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004536:	085b      	lsrs	r3, r3, #1
 8004538:	3b01      	subs	r3, #1
 800453a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800453c:	429a      	cmp	r2, r3
 800453e:	d06b      	beq.n	8004618 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004540:	69bb      	ldr	r3, [r7, #24]
 8004542:	2b0c      	cmp	r3, #12
 8004544:	d062      	beq.n	800460c <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004546:	4b32      	ldr	r3, [pc, #200]	; (8004610 <HAL_RCC_OscConfig+0x778>)
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800454e:	2b00      	cmp	r3, #0
 8004550:	d001      	beq.n	8004556 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8004552:	2301      	movs	r3, #1
 8004554:	e0ac      	b.n	80046b0 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004556:	4b2e      	ldr	r3, [pc, #184]	; (8004610 <HAL_RCC_OscConfig+0x778>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	4a2d      	ldr	r2, [pc, #180]	; (8004610 <HAL_RCC_OscConfig+0x778>)
 800455c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004560:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004562:	f7fd ffaf 	bl	80024c4 <HAL_GetTick>
 8004566:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004568:	e008      	b.n	800457c <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800456a:	f7fd ffab 	bl	80024c4 <HAL_GetTick>
 800456e:	4602      	mov	r2, r0
 8004570:	693b      	ldr	r3, [r7, #16]
 8004572:	1ad3      	subs	r3, r2, r3
 8004574:	2b02      	cmp	r3, #2
 8004576:	d901      	bls.n	800457c <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8004578:	2303      	movs	r3, #3
 800457a:	e099      	b.n	80046b0 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800457c:	4b24      	ldr	r3, [pc, #144]	; (8004610 <HAL_RCC_OscConfig+0x778>)
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004584:	2b00      	cmp	r3, #0
 8004586:	d1f0      	bne.n	800456a <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004588:	4b21      	ldr	r3, [pc, #132]	; (8004610 <HAL_RCC_OscConfig+0x778>)
 800458a:	68da      	ldr	r2, [r3, #12]
 800458c:	4b21      	ldr	r3, [pc, #132]	; (8004614 <HAL_RCC_OscConfig+0x77c>)
 800458e:	4013      	ands	r3, r2
 8004590:	687a      	ldr	r2, [r7, #4]
 8004592:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004594:	687a      	ldr	r2, [r7, #4]
 8004596:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004598:	3a01      	subs	r2, #1
 800459a:	0112      	lsls	r2, r2, #4
 800459c:	4311      	orrs	r1, r2
 800459e:	687a      	ldr	r2, [r7, #4]
 80045a0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80045a2:	0212      	lsls	r2, r2, #8
 80045a4:	4311      	orrs	r1, r2
 80045a6:	687a      	ldr	r2, [r7, #4]
 80045a8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80045aa:	0852      	lsrs	r2, r2, #1
 80045ac:	3a01      	subs	r2, #1
 80045ae:	0552      	lsls	r2, r2, #21
 80045b0:	4311      	orrs	r1, r2
 80045b2:	687a      	ldr	r2, [r7, #4]
 80045b4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80045b6:	0852      	lsrs	r2, r2, #1
 80045b8:	3a01      	subs	r2, #1
 80045ba:	0652      	lsls	r2, r2, #25
 80045bc:	4311      	orrs	r1, r2
 80045be:	687a      	ldr	r2, [r7, #4]
 80045c0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80045c2:	06d2      	lsls	r2, r2, #27
 80045c4:	430a      	orrs	r2, r1
 80045c6:	4912      	ldr	r1, [pc, #72]	; (8004610 <HAL_RCC_OscConfig+0x778>)
 80045c8:	4313      	orrs	r3, r2
 80045ca:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80045cc:	4b10      	ldr	r3, [pc, #64]	; (8004610 <HAL_RCC_OscConfig+0x778>)
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	4a0f      	ldr	r2, [pc, #60]	; (8004610 <HAL_RCC_OscConfig+0x778>)
 80045d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80045d6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80045d8:	4b0d      	ldr	r3, [pc, #52]	; (8004610 <HAL_RCC_OscConfig+0x778>)
 80045da:	68db      	ldr	r3, [r3, #12]
 80045dc:	4a0c      	ldr	r2, [pc, #48]	; (8004610 <HAL_RCC_OscConfig+0x778>)
 80045de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80045e2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80045e4:	f7fd ff6e 	bl	80024c4 <HAL_GetTick>
 80045e8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80045ea:	e008      	b.n	80045fe <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045ec:	f7fd ff6a 	bl	80024c4 <HAL_GetTick>
 80045f0:	4602      	mov	r2, r0
 80045f2:	693b      	ldr	r3, [r7, #16]
 80045f4:	1ad3      	subs	r3, r2, r3
 80045f6:	2b02      	cmp	r3, #2
 80045f8:	d901      	bls.n	80045fe <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80045fa:	2303      	movs	r3, #3
 80045fc:	e058      	b.n	80046b0 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80045fe:	4b04      	ldr	r3, [pc, #16]	; (8004610 <HAL_RCC_OscConfig+0x778>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004606:	2b00      	cmp	r3, #0
 8004608:	d0f0      	beq.n	80045ec <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800460a:	e050      	b.n	80046ae <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800460c:	2301      	movs	r3, #1
 800460e:	e04f      	b.n	80046b0 <HAL_RCC_OscConfig+0x818>
 8004610:	40021000 	.word	0x40021000
 8004614:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004618:	4b27      	ldr	r3, [pc, #156]	; (80046b8 <HAL_RCC_OscConfig+0x820>)
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004620:	2b00      	cmp	r3, #0
 8004622:	d144      	bne.n	80046ae <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004624:	4b24      	ldr	r3, [pc, #144]	; (80046b8 <HAL_RCC_OscConfig+0x820>)
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	4a23      	ldr	r2, [pc, #140]	; (80046b8 <HAL_RCC_OscConfig+0x820>)
 800462a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800462e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004630:	4b21      	ldr	r3, [pc, #132]	; (80046b8 <HAL_RCC_OscConfig+0x820>)
 8004632:	68db      	ldr	r3, [r3, #12]
 8004634:	4a20      	ldr	r2, [pc, #128]	; (80046b8 <HAL_RCC_OscConfig+0x820>)
 8004636:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800463a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800463c:	f7fd ff42 	bl	80024c4 <HAL_GetTick>
 8004640:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004642:	e008      	b.n	8004656 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004644:	f7fd ff3e 	bl	80024c4 <HAL_GetTick>
 8004648:	4602      	mov	r2, r0
 800464a:	693b      	ldr	r3, [r7, #16]
 800464c:	1ad3      	subs	r3, r2, r3
 800464e:	2b02      	cmp	r3, #2
 8004650:	d901      	bls.n	8004656 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8004652:	2303      	movs	r3, #3
 8004654:	e02c      	b.n	80046b0 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004656:	4b18      	ldr	r3, [pc, #96]	; (80046b8 <HAL_RCC_OscConfig+0x820>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800465e:	2b00      	cmp	r3, #0
 8004660:	d0f0      	beq.n	8004644 <HAL_RCC_OscConfig+0x7ac>
 8004662:	e024      	b.n	80046ae <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004664:	69bb      	ldr	r3, [r7, #24]
 8004666:	2b0c      	cmp	r3, #12
 8004668:	d01f      	beq.n	80046aa <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800466a:	4b13      	ldr	r3, [pc, #76]	; (80046b8 <HAL_RCC_OscConfig+0x820>)
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	4a12      	ldr	r2, [pc, #72]	; (80046b8 <HAL_RCC_OscConfig+0x820>)
 8004670:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004674:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004676:	f7fd ff25 	bl	80024c4 <HAL_GetTick>
 800467a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800467c:	e008      	b.n	8004690 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800467e:	f7fd ff21 	bl	80024c4 <HAL_GetTick>
 8004682:	4602      	mov	r2, r0
 8004684:	693b      	ldr	r3, [r7, #16]
 8004686:	1ad3      	subs	r3, r2, r3
 8004688:	2b02      	cmp	r3, #2
 800468a:	d901      	bls.n	8004690 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 800468c:	2303      	movs	r3, #3
 800468e:	e00f      	b.n	80046b0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004690:	4b09      	ldr	r3, [pc, #36]	; (80046b8 <HAL_RCC_OscConfig+0x820>)
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004698:	2b00      	cmp	r3, #0
 800469a:	d1f0      	bne.n	800467e <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 800469c:	4b06      	ldr	r3, [pc, #24]	; (80046b8 <HAL_RCC_OscConfig+0x820>)
 800469e:	68da      	ldr	r2, [r3, #12]
 80046a0:	4905      	ldr	r1, [pc, #20]	; (80046b8 <HAL_RCC_OscConfig+0x820>)
 80046a2:	4b06      	ldr	r3, [pc, #24]	; (80046bc <HAL_RCC_OscConfig+0x824>)
 80046a4:	4013      	ands	r3, r2
 80046a6:	60cb      	str	r3, [r1, #12]
 80046a8:	e001      	b.n	80046ae <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80046aa:	2301      	movs	r3, #1
 80046ac:	e000      	b.n	80046b0 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 80046ae:	2300      	movs	r3, #0
}
 80046b0:	4618      	mov	r0, r3
 80046b2:	3720      	adds	r7, #32
 80046b4:	46bd      	mov	sp, r7
 80046b6:	bd80      	pop	{r7, pc}
 80046b8:	40021000 	.word	0x40021000
 80046bc:	feeefffc 	.word	0xfeeefffc

080046c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b084      	sub	sp, #16
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
 80046c8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d101      	bne.n	80046d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80046d0:	2301      	movs	r3, #1
 80046d2:	e0e7      	b.n	80048a4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80046d4:	4b75      	ldr	r3, [pc, #468]	; (80048ac <HAL_RCC_ClockConfig+0x1ec>)
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f003 0307 	and.w	r3, r3, #7
 80046dc:	683a      	ldr	r2, [r7, #0]
 80046de:	429a      	cmp	r2, r3
 80046e0:	d910      	bls.n	8004704 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046e2:	4b72      	ldr	r3, [pc, #456]	; (80048ac <HAL_RCC_ClockConfig+0x1ec>)
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f023 0207 	bic.w	r2, r3, #7
 80046ea:	4970      	ldr	r1, [pc, #448]	; (80048ac <HAL_RCC_ClockConfig+0x1ec>)
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	4313      	orrs	r3, r2
 80046f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80046f2:	4b6e      	ldr	r3, [pc, #440]	; (80048ac <HAL_RCC_ClockConfig+0x1ec>)
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f003 0307 	and.w	r3, r3, #7
 80046fa:	683a      	ldr	r2, [r7, #0]
 80046fc:	429a      	cmp	r2, r3
 80046fe:	d001      	beq.n	8004704 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004700:	2301      	movs	r3, #1
 8004702:	e0cf      	b.n	80048a4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f003 0302 	and.w	r3, r3, #2
 800470c:	2b00      	cmp	r3, #0
 800470e:	d010      	beq.n	8004732 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	689a      	ldr	r2, [r3, #8]
 8004714:	4b66      	ldr	r3, [pc, #408]	; (80048b0 <HAL_RCC_ClockConfig+0x1f0>)
 8004716:	689b      	ldr	r3, [r3, #8]
 8004718:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800471c:	429a      	cmp	r2, r3
 800471e:	d908      	bls.n	8004732 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004720:	4b63      	ldr	r3, [pc, #396]	; (80048b0 <HAL_RCC_ClockConfig+0x1f0>)
 8004722:	689b      	ldr	r3, [r3, #8]
 8004724:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	689b      	ldr	r3, [r3, #8]
 800472c:	4960      	ldr	r1, [pc, #384]	; (80048b0 <HAL_RCC_ClockConfig+0x1f0>)
 800472e:	4313      	orrs	r3, r2
 8004730:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f003 0301 	and.w	r3, r3, #1
 800473a:	2b00      	cmp	r3, #0
 800473c:	d04c      	beq.n	80047d8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	685b      	ldr	r3, [r3, #4]
 8004742:	2b03      	cmp	r3, #3
 8004744:	d107      	bne.n	8004756 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004746:	4b5a      	ldr	r3, [pc, #360]	; (80048b0 <HAL_RCC_ClockConfig+0x1f0>)
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800474e:	2b00      	cmp	r3, #0
 8004750:	d121      	bne.n	8004796 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004752:	2301      	movs	r3, #1
 8004754:	e0a6      	b.n	80048a4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	685b      	ldr	r3, [r3, #4]
 800475a:	2b02      	cmp	r3, #2
 800475c:	d107      	bne.n	800476e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800475e:	4b54      	ldr	r3, [pc, #336]	; (80048b0 <HAL_RCC_ClockConfig+0x1f0>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004766:	2b00      	cmp	r3, #0
 8004768:	d115      	bne.n	8004796 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800476a:	2301      	movs	r3, #1
 800476c:	e09a      	b.n	80048a4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	685b      	ldr	r3, [r3, #4]
 8004772:	2b00      	cmp	r3, #0
 8004774:	d107      	bne.n	8004786 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004776:	4b4e      	ldr	r3, [pc, #312]	; (80048b0 <HAL_RCC_ClockConfig+0x1f0>)
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f003 0302 	and.w	r3, r3, #2
 800477e:	2b00      	cmp	r3, #0
 8004780:	d109      	bne.n	8004796 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004782:	2301      	movs	r3, #1
 8004784:	e08e      	b.n	80048a4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004786:	4b4a      	ldr	r3, [pc, #296]	; (80048b0 <HAL_RCC_ClockConfig+0x1f0>)
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800478e:	2b00      	cmp	r3, #0
 8004790:	d101      	bne.n	8004796 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004792:	2301      	movs	r3, #1
 8004794:	e086      	b.n	80048a4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004796:	4b46      	ldr	r3, [pc, #280]	; (80048b0 <HAL_RCC_ClockConfig+0x1f0>)
 8004798:	689b      	ldr	r3, [r3, #8]
 800479a:	f023 0203 	bic.w	r2, r3, #3
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	685b      	ldr	r3, [r3, #4]
 80047a2:	4943      	ldr	r1, [pc, #268]	; (80048b0 <HAL_RCC_ClockConfig+0x1f0>)
 80047a4:	4313      	orrs	r3, r2
 80047a6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80047a8:	f7fd fe8c 	bl	80024c4 <HAL_GetTick>
 80047ac:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047ae:	e00a      	b.n	80047c6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80047b0:	f7fd fe88 	bl	80024c4 <HAL_GetTick>
 80047b4:	4602      	mov	r2, r0
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	1ad3      	subs	r3, r2, r3
 80047ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80047be:	4293      	cmp	r3, r2
 80047c0:	d901      	bls.n	80047c6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80047c2:	2303      	movs	r3, #3
 80047c4:	e06e      	b.n	80048a4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047c6:	4b3a      	ldr	r3, [pc, #232]	; (80048b0 <HAL_RCC_ClockConfig+0x1f0>)
 80047c8:	689b      	ldr	r3, [r3, #8]
 80047ca:	f003 020c 	and.w	r2, r3, #12
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	685b      	ldr	r3, [r3, #4]
 80047d2:	009b      	lsls	r3, r3, #2
 80047d4:	429a      	cmp	r2, r3
 80047d6:	d1eb      	bne.n	80047b0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f003 0302 	and.w	r3, r3, #2
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d010      	beq.n	8004806 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	689a      	ldr	r2, [r3, #8]
 80047e8:	4b31      	ldr	r3, [pc, #196]	; (80048b0 <HAL_RCC_ClockConfig+0x1f0>)
 80047ea:	689b      	ldr	r3, [r3, #8]
 80047ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80047f0:	429a      	cmp	r2, r3
 80047f2:	d208      	bcs.n	8004806 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80047f4:	4b2e      	ldr	r3, [pc, #184]	; (80048b0 <HAL_RCC_ClockConfig+0x1f0>)
 80047f6:	689b      	ldr	r3, [r3, #8]
 80047f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	689b      	ldr	r3, [r3, #8]
 8004800:	492b      	ldr	r1, [pc, #172]	; (80048b0 <HAL_RCC_ClockConfig+0x1f0>)
 8004802:	4313      	orrs	r3, r2
 8004804:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004806:	4b29      	ldr	r3, [pc, #164]	; (80048ac <HAL_RCC_ClockConfig+0x1ec>)
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f003 0307 	and.w	r3, r3, #7
 800480e:	683a      	ldr	r2, [r7, #0]
 8004810:	429a      	cmp	r2, r3
 8004812:	d210      	bcs.n	8004836 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004814:	4b25      	ldr	r3, [pc, #148]	; (80048ac <HAL_RCC_ClockConfig+0x1ec>)
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f023 0207 	bic.w	r2, r3, #7
 800481c:	4923      	ldr	r1, [pc, #140]	; (80048ac <HAL_RCC_ClockConfig+0x1ec>)
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	4313      	orrs	r3, r2
 8004822:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004824:	4b21      	ldr	r3, [pc, #132]	; (80048ac <HAL_RCC_ClockConfig+0x1ec>)
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f003 0307 	and.w	r3, r3, #7
 800482c:	683a      	ldr	r2, [r7, #0]
 800482e:	429a      	cmp	r2, r3
 8004830:	d001      	beq.n	8004836 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004832:	2301      	movs	r3, #1
 8004834:	e036      	b.n	80048a4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f003 0304 	and.w	r3, r3, #4
 800483e:	2b00      	cmp	r3, #0
 8004840:	d008      	beq.n	8004854 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004842:	4b1b      	ldr	r3, [pc, #108]	; (80048b0 <HAL_RCC_ClockConfig+0x1f0>)
 8004844:	689b      	ldr	r3, [r3, #8]
 8004846:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	68db      	ldr	r3, [r3, #12]
 800484e:	4918      	ldr	r1, [pc, #96]	; (80048b0 <HAL_RCC_ClockConfig+0x1f0>)
 8004850:	4313      	orrs	r3, r2
 8004852:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f003 0308 	and.w	r3, r3, #8
 800485c:	2b00      	cmp	r3, #0
 800485e:	d009      	beq.n	8004874 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004860:	4b13      	ldr	r3, [pc, #76]	; (80048b0 <HAL_RCC_ClockConfig+0x1f0>)
 8004862:	689b      	ldr	r3, [r3, #8]
 8004864:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	691b      	ldr	r3, [r3, #16]
 800486c:	00db      	lsls	r3, r3, #3
 800486e:	4910      	ldr	r1, [pc, #64]	; (80048b0 <HAL_RCC_ClockConfig+0x1f0>)
 8004870:	4313      	orrs	r3, r2
 8004872:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004874:	f000 f824 	bl	80048c0 <HAL_RCC_GetSysClockFreq>
 8004878:	4602      	mov	r2, r0
 800487a:	4b0d      	ldr	r3, [pc, #52]	; (80048b0 <HAL_RCC_ClockConfig+0x1f0>)
 800487c:	689b      	ldr	r3, [r3, #8]
 800487e:	091b      	lsrs	r3, r3, #4
 8004880:	f003 030f 	and.w	r3, r3, #15
 8004884:	490b      	ldr	r1, [pc, #44]	; (80048b4 <HAL_RCC_ClockConfig+0x1f4>)
 8004886:	5ccb      	ldrb	r3, [r1, r3]
 8004888:	f003 031f 	and.w	r3, r3, #31
 800488c:	fa22 f303 	lsr.w	r3, r2, r3
 8004890:	4a09      	ldr	r2, [pc, #36]	; (80048b8 <HAL_RCC_ClockConfig+0x1f8>)
 8004892:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004894:	4b09      	ldr	r3, [pc, #36]	; (80048bc <HAL_RCC_ClockConfig+0x1fc>)
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	4618      	mov	r0, r3
 800489a:	f7fc fed1 	bl	8001640 <HAL_InitTick>
 800489e:	4603      	mov	r3, r0
 80048a0:	72fb      	strb	r3, [r7, #11]

  return status;
 80048a2:	7afb      	ldrb	r3, [r7, #11]
}
 80048a4:	4618      	mov	r0, r3
 80048a6:	3710      	adds	r7, #16
 80048a8:	46bd      	mov	sp, r7
 80048aa:	bd80      	pop	{r7, pc}
 80048ac:	40022000 	.word	0x40022000
 80048b0:	40021000 	.word	0x40021000
 80048b4:	0800ac30 	.word	0x0800ac30
 80048b8:	20000000 	.word	0x20000000
 80048bc:	20000004 	.word	0x20000004

080048c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80048c0:	b480      	push	{r7}
 80048c2:	b089      	sub	sp, #36	; 0x24
 80048c4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80048c6:	2300      	movs	r3, #0
 80048c8:	61fb      	str	r3, [r7, #28]
 80048ca:	2300      	movs	r3, #0
 80048cc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80048ce:	4b3e      	ldr	r3, [pc, #248]	; (80049c8 <HAL_RCC_GetSysClockFreq+0x108>)
 80048d0:	689b      	ldr	r3, [r3, #8]
 80048d2:	f003 030c 	and.w	r3, r3, #12
 80048d6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80048d8:	4b3b      	ldr	r3, [pc, #236]	; (80049c8 <HAL_RCC_GetSysClockFreq+0x108>)
 80048da:	68db      	ldr	r3, [r3, #12]
 80048dc:	f003 0303 	and.w	r3, r3, #3
 80048e0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80048e2:	693b      	ldr	r3, [r7, #16]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d005      	beq.n	80048f4 <HAL_RCC_GetSysClockFreq+0x34>
 80048e8:	693b      	ldr	r3, [r7, #16]
 80048ea:	2b0c      	cmp	r3, #12
 80048ec:	d121      	bne.n	8004932 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	2b01      	cmp	r3, #1
 80048f2:	d11e      	bne.n	8004932 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80048f4:	4b34      	ldr	r3, [pc, #208]	; (80049c8 <HAL_RCC_GetSysClockFreq+0x108>)
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f003 0308 	and.w	r3, r3, #8
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d107      	bne.n	8004910 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004900:	4b31      	ldr	r3, [pc, #196]	; (80049c8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004902:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004906:	0a1b      	lsrs	r3, r3, #8
 8004908:	f003 030f 	and.w	r3, r3, #15
 800490c:	61fb      	str	r3, [r7, #28]
 800490e:	e005      	b.n	800491c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004910:	4b2d      	ldr	r3, [pc, #180]	; (80049c8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	091b      	lsrs	r3, r3, #4
 8004916:	f003 030f 	and.w	r3, r3, #15
 800491a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800491c:	4a2b      	ldr	r2, [pc, #172]	; (80049cc <HAL_RCC_GetSysClockFreq+0x10c>)
 800491e:	69fb      	ldr	r3, [r7, #28]
 8004920:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004924:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004926:	693b      	ldr	r3, [r7, #16]
 8004928:	2b00      	cmp	r3, #0
 800492a:	d10d      	bne.n	8004948 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800492c:	69fb      	ldr	r3, [r7, #28]
 800492e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004930:	e00a      	b.n	8004948 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004932:	693b      	ldr	r3, [r7, #16]
 8004934:	2b04      	cmp	r3, #4
 8004936:	d102      	bne.n	800493e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004938:	4b25      	ldr	r3, [pc, #148]	; (80049d0 <HAL_RCC_GetSysClockFreq+0x110>)
 800493a:	61bb      	str	r3, [r7, #24]
 800493c:	e004      	b.n	8004948 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800493e:	693b      	ldr	r3, [r7, #16]
 8004940:	2b08      	cmp	r3, #8
 8004942:	d101      	bne.n	8004948 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004944:	4b23      	ldr	r3, [pc, #140]	; (80049d4 <HAL_RCC_GetSysClockFreq+0x114>)
 8004946:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004948:	693b      	ldr	r3, [r7, #16]
 800494a:	2b0c      	cmp	r3, #12
 800494c:	d134      	bne.n	80049b8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800494e:	4b1e      	ldr	r3, [pc, #120]	; (80049c8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004950:	68db      	ldr	r3, [r3, #12]
 8004952:	f003 0303 	and.w	r3, r3, #3
 8004956:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004958:	68bb      	ldr	r3, [r7, #8]
 800495a:	2b02      	cmp	r3, #2
 800495c:	d003      	beq.n	8004966 <HAL_RCC_GetSysClockFreq+0xa6>
 800495e:	68bb      	ldr	r3, [r7, #8]
 8004960:	2b03      	cmp	r3, #3
 8004962:	d003      	beq.n	800496c <HAL_RCC_GetSysClockFreq+0xac>
 8004964:	e005      	b.n	8004972 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004966:	4b1a      	ldr	r3, [pc, #104]	; (80049d0 <HAL_RCC_GetSysClockFreq+0x110>)
 8004968:	617b      	str	r3, [r7, #20]
      break;
 800496a:	e005      	b.n	8004978 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800496c:	4b19      	ldr	r3, [pc, #100]	; (80049d4 <HAL_RCC_GetSysClockFreq+0x114>)
 800496e:	617b      	str	r3, [r7, #20]
      break;
 8004970:	e002      	b.n	8004978 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004972:	69fb      	ldr	r3, [r7, #28]
 8004974:	617b      	str	r3, [r7, #20]
      break;
 8004976:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004978:	4b13      	ldr	r3, [pc, #76]	; (80049c8 <HAL_RCC_GetSysClockFreq+0x108>)
 800497a:	68db      	ldr	r3, [r3, #12]
 800497c:	091b      	lsrs	r3, r3, #4
 800497e:	f003 0307 	and.w	r3, r3, #7
 8004982:	3301      	adds	r3, #1
 8004984:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004986:	4b10      	ldr	r3, [pc, #64]	; (80049c8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004988:	68db      	ldr	r3, [r3, #12]
 800498a:	0a1b      	lsrs	r3, r3, #8
 800498c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004990:	697a      	ldr	r2, [r7, #20]
 8004992:	fb03 f202 	mul.w	r2, r3, r2
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	fbb2 f3f3 	udiv	r3, r2, r3
 800499c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800499e:	4b0a      	ldr	r3, [pc, #40]	; (80049c8 <HAL_RCC_GetSysClockFreq+0x108>)
 80049a0:	68db      	ldr	r3, [r3, #12]
 80049a2:	0e5b      	lsrs	r3, r3, #25
 80049a4:	f003 0303 	and.w	r3, r3, #3
 80049a8:	3301      	adds	r3, #1
 80049aa:	005b      	lsls	r3, r3, #1
 80049ac:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80049ae:	697a      	ldr	r2, [r7, #20]
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80049b6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80049b8:	69bb      	ldr	r3, [r7, #24]
}
 80049ba:	4618      	mov	r0, r3
 80049bc:	3724      	adds	r7, #36	; 0x24
 80049be:	46bd      	mov	sp, r7
 80049c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c4:	4770      	bx	lr
 80049c6:	bf00      	nop
 80049c8:	40021000 	.word	0x40021000
 80049cc:	0800ac48 	.word	0x0800ac48
 80049d0:	00f42400 	.word	0x00f42400
 80049d4:	007a1200 	.word	0x007a1200

080049d8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80049d8:	b480      	push	{r7}
 80049da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80049dc:	4b03      	ldr	r3, [pc, #12]	; (80049ec <HAL_RCC_GetHCLKFreq+0x14>)
 80049de:	681b      	ldr	r3, [r3, #0]
}
 80049e0:	4618      	mov	r0, r3
 80049e2:	46bd      	mov	sp, r7
 80049e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e8:	4770      	bx	lr
 80049ea:	bf00      	nop
 80049ec:	20000000 	.word	0x20000000

080049f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80049f4:	f7ff fff0 	bl	80049d8 <HAL_RCC_GetHCLKFreq>
 80049f8:	4602      	mov	r2, r0
 80049fa:	4b06      	ldr	r3, [pc, #24]	; (8004a14 <HAL_RCC_GetPCLK1Freq+0x24>)
 80049fc:	689b      	ldr	r3, [r3, #8]
 80049fe:	0a1b      	lsrs	r3, r3, #8
 8004a00:	f003 0307 	and.w	r3, r3, #7
 8004a04:	4904      	ldr	r1, [pc, #16]	; (8004a18 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004a06:	5ccb      	ldrb	r3, [r1, r3]
 8004a08:	f003 031f 	and.w	r3, r3, #31
 8004a0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a10:	4618      	mov	r0, r3
 8004a12:	bd80      	pop	{r7, pc}
 8004a14:	40021000 	.word	0x40021000
 8004a18:	0800ac40 	.word	0x0800ac40

08004a1c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004a20:	f7ff ffda 	bl	80049d8 <HAL_RCC_GetHCLKFreq>
 8004a24:	4602      	mov	r2, r0
 8004a26:	4b06      	ldr	r3, [pc, #24]	; (8004a40 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004a28:	689b      	ldr	r3, [r3, #8]
 8004a2a:	0adb      	lsrs	r3, r3, #11
 8004a2c:	f003 0307 	and.w	r3, r3, #7
 8004a30:	4904      	ldr	r1, [pc, #16]	; (8004a44 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004a32:	5ccb      	ldrb	r3, [r1, r3]
 8004a34:	f003 031f 	and.w	r3, r3, #31
 8004a38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	bd80      	pop	{r7, pc}
 8004a40:	40021000 	.word	0x40021000
 8004a44:	0800ac40 	.word	0x0800ac40

08004a48 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004a48:	b480      	push	{r7}
 8004a4a:	b083      	sub	sp, #12
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
 8004a50:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	220f      	movs	r2, #15
 8004a56:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8004a58:	4b12      	ldr	r3, [pc, #72]	; (8004aa4 <HAL_RCC_GetClockConfig+0x5c>)
 8004a5a:	689b      	ldr	r3, [r3, #8]
 8004a5c:	f003 0203 	and.w	r2, r3, #3
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8004a64:	4b0f      	ldr	r3, [pc, #60]	; (8004aa4 <HAL_RCC_GetClockConfig+0x5c>)
 8004a66:	689b      	ldr	r3, [r3, #8]
 8004a68:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8004a70:	4b0c      	ldr	r3, [pc, #48]	; (8004aa4 <HAL_RCC_GetClockConfig+0x5c>)
 8004a72:	689b      	ldr	r3, [r3, #8]
 8004a74:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8004a7c:	4b09      	ldr	r3, [pc, #36]	; (8004aa4 <HAL_RCC_GetClockConfig+0x5c>)
 8004a7e:	689b      	ldr	r3, [r3, #8]
 8004a80:	08db      	lsrs	r3, r3, #3
 8004a82:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8004a8a:	4b07      	ldr	r3, [pc, #28]	; (8004aa8 <HAL_RCC_GetClockConfig+0x60>)
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f003 0207 	and.w	r2, r3, #7
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	601a      	str	r2, [r3, #0]
}
 8004a96:	bf00      	nop
 8004a98:	370c      	adds	r7, #12
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa0:	4770      	bx	lr
 8004aa2:	bf00      	nop
 8004aa4:	40021000 	.word	0x40021000
 8004aa8:	40022000 	.word	0x40022000

08004aac <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	b086      	sub	sp, #24
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004ab4:	2300      	movs	r3, #0
 8004ab6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004ab8:	4b2a      	ldr	r3, [pc, #168]	; (8004b64 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004aba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004abc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d003      	beq.n	8004acc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004ac4:	f7ff f984 	bl	8003dd0 <HAL_PWREx_GetVoltageRange>
 8004ac8:	6178      	str	r0, [r7, #20]
 8004aca:	e014      	b.n	8004af6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004acc:	4b25      	ldr	r3, [pc, #148]	; (8004b64 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004ace:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ad0:	4a24      	ldr	r2, [pc, #144]	; (8004b64 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004ad2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ad6:	6593      	str	r3, [r2, #88]	; 0x58
 8004ad8:	4b22      	ldr	r3, [pc, #136]	; (8004b64 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004ada:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004adc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ae0:	60fb      	str	r3, [r7, #12]
 8004ae2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004ae4:	f7ff f974 	bl	8003dd0 <HAL_PWREx_GetVoltageRange>
 8004ae8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004aea:	4b1e      	ldr	r3, [pc, #120]	; (8004b64 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004aec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004aee:	4a1d      	ldr	r2, [pc, #116]	; (8004b64 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004af0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004af4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004af6:	697b      	ldr	r3, [r7, #20]
 8004af8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004afc:	d10b      	bne.n	8004b16 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	2b80      	cmp	r3, #128	; 0x80
 8004b02:	d919      	bls.n	8004b38 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2ba0      	cmp	r3, #160	; 0xa0
 8004b08:	d902      	bls.n	8004b10 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004b0a:	2302      	movs	r3, #2
 8004b0c:	613b      	str	r3, [r7, #16]
 8004b0e:	e013      	b.n	8004b38 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004b10:	2301      	movs	r3, #1
 8004b12:	613b      	str	r3, [r7, #16]
 8004b14:	e010      	b.n	8004b38 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	2b80      	cmp	r3, #128	; 0x80
 8004b1a:	d902      	bls.n	8004b22 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004b1c:	2303      	movs	r3, #3
 8004b1e:	613b      	str	r3, [r7, #16]
 8004b20:	e00a      	b.n	8004b38 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2b80      	cmp	r3, #128	; 0x80
 8004b26:	d102      	bne.n	8004b2e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004b28:	2302      	movs	r3, #2
 8004b2a:	613b      	str	r3, [r7, #16]
 8004b2c:	e004      	b.n	8004b38 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	2b70      	cmp	r3, #112	; 0x70
 8004b32:	d101      	bne.n	8004b38 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004b34:	2301      	movs	r3, #1
 8004b36:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004b38:	4b0b      	ldr	r3, [pc, #44]	; (8004b68 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f023 0207 	bic.w	r2, r3, #7
 8004b40:	4909      	ldr	r1, [pc, #36]	; (8004b68 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004b42:	693b      	ldr	r3, [r7, #16]
 8004b44:	4313      	orrs	r3, r2
 8004b46:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004b48:	4b07      	ldr	r3, [pc, #28]	; (8004b68 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f003 0307 	and.w	r3, r3, #7
 8004b50:	693a      	ldr	r2, [r7, #16]
 8004b52:	429a      	cmp	r2, r3
 8004b54:	d001      	beq.n	8004b5a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004b56:	2301      	movs	r3, #1
 8004b58:	e000      	b.n	8004b5c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004b5a:	2300      	movs	r3, #0
}
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	3718      	adds	r7, #24
 8004b60:	46bd      	mov	sp, r7
 8004b62:	bd80      	pop	{r7, pc}
 8004b64:	40021000 	.word	0x40021000
 8004b68:	40022000 	.word	0x40022000

08004b6c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	b086      	sub	sp, #24
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004b74:	2300      	movs	r3, #0
 8004b76:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004b78:	2300      	movs	r3, #0
 8004b7a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d031      	beq.n	8004bec <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b8c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004b90:	d01a      	beq.n	8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8004b92:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004b96:	d814      	bhi.n	8004bc2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d009      	beq.n	8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004b9c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004ba0:	d10f      	bne.n	8004bc2 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8004ba2:	4b5d      	ldr	r3, [pc, #372]	; (8004d18 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004ba4:	68db      	ldr	r3, [r3, #12]
 8004ba6:	4a5c      	ldr	r2, [pc, #368]	; (8004d18 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004ba8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004bac:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004bae:	e00c      	b.n	8004bca <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	3304      	adds	r3, #4
 8004bb4:	2100      	movs	r1, #0
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	f000 fa44 	bl	8005044 <RCCEx_PLLSAI1_Config>
 8004bbc:	4603      	mov	r3, r0
 8004bbe:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004bc0:	e003      	b.n	8004bca <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004bc2:	2301      	movs	r3, #1
 8004bc4:	74fb      	strb	r3, [r7, #19]
      break;
 8004bc6:	e000      	b.n	8004bca <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8004bc8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004bca:	7cfb      	ldrb	r3, [r7, #19]
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d10b      	bne.n	8004be8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004bd0:	4b51      	ldr	r3, [pc, #324]	; (8004d18 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004bd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bd6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004bde:	494e      	ldr	r1, [pc, #312]	; (8004d18 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004be0:	4313      	orrs	r3, r2
 8004be2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004be6:	e001      	b.n	8004bec <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004be8:	7cfb      	ldrb	r3, [r7, #19]
 8004bea:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	f000 809e 	beq.w	8004d36 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004bfa:	2300      	movs	r3, #0
 8004bfc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004bfe:	4b46      	ldr	r3, [pc, #280]	; (8004d18 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004c00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d101      	bne.n	8004c0e <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8004c0a:	2301      	movs	r3, #1
 8004c0c:	e000      	b.n	8004c10 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8004c0e:	2300      	movs	r3, #0
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d00d      	beq.n	8004c30 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c14:	4b40      	ldr	r3, [pc, #256]	; (8004d18 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004c16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c18:	4a3f      	ldr	r2, [pc, #252]	; (8004d18 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004c1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c1e:	6593      	str	r3, [r2, #88]	; 0x58
 8004c20:	4b3d      	ldr	r3, [pc, #244]	; (8004d18 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004c22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c28:	60bb      	str	r3, [r7, #8]
 8004c2a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004c2c:	2301      	movs	r3, #1
 8004c2e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004c30:	4b3a      	ldr	r3, [pc, #232]	; (8004d1c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	4a39      	ldr	r2, [pc, #228]	; (8004d1c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004c36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c3a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004c3c:	f7fd fc42 	bl	80024c4 <HAL_GetTick>
 8004c40:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004c42:	e009      	b.n	8004c58 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c44:	f7fd fc3e 	bl	80024c4 <HAL_GetTick>
 8004c48:	4602      	mov	r2, r0
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	1ad3      	subs	r3, r2, r3
 8004c4e:	2b02      	cmp	r3, #2
 8004c50:	d902      	bls.n	8004c58 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8004c52:	2303      	movs	r3, #3
 8004c54:	74fb      	strb	r3, [r7, #19]
        break;
 8004c56:	e005      	b.n	8004c64 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004c58:	4b30      	ldr	r3, [pc, #192]	; (8004d1c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d0ef      	beq.n	8004c44 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8004c64:	7cfb      	ldrb	r3, [r7, #19]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d15a      	bne.n	8004d20 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004c6a:	4b2b      	ldr	r3, [pc, #172]	; (8004d18 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004c6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c70:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c74:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004c76:	697b      	ldr	r3, [r7, #20]
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d01e      	beq.n	8004cba <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004c80:	697a      	ldr	r2, [r7, #20]
 8004c82:	429a      	cmp	r2, r3
 8004c84:	d019      	beq.n	8004cba <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004c86:	4b24      	ldr	r3, [pc, #144]	; (8004d18 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004c88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c8c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c90:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004c92:	4b21      	ldr	r3, [pc, #132]	; (8004d18 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004c94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c98:	4a1f      	ldr	r2, [pc, #124]	; (8004d18 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004c9a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c9e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004ca2:	4b1d      	ldr	r3, [pc, #116]	; (8004d18 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004ca4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ca8:	4a1b      	ldr	r2, [pc, #108]	; (8004d18 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004caa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004cae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004cb2:	4a19      	ldr	r2, [pc, #100]	; (8004d18 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004cb4:	697b      	ldr	r3, [r7, #20]
 8004cb6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004cba:	697b      	ldr	r3, [r7, #20]
 8004cbc:	f003 0301 	and.w	r3, r3, #1
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d016      	beq.n	8004cf2 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cc4:	f7fd fbfe 	bl	80024c4 <HAL_GetTick>
 8004cc8:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004cca:	e00b      	b.n	8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ccc:	f7fd fbfa 	bl	80024c4 <HAL_GetTick>
 8004cd0:	4602      	mov	r2, r0
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	1ad3      	subs	r3, r2, r3
 8004cd6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	d902      	bls.n	8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8004cde:	2303      	movs	r3, #3
 8004ce0:	74fb      	strb	r3, [r7, #19]
            break;
 8004ce2:	e006      	b.n	8004cf2 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004ce4:	4b0c      	ldr	r3, [pc, #48]	; (8004d18 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004ce6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cea:	f003 0302 	and.w	r3, r3, #2
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d0ec      	beq.n	8004ccc <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8004cf2:	7cfb      	ldrb	r3, [r7, #19]
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d10b      	bne.n	8004d10 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004cf8:	4b07      	ldr	r3, [pc, #28]	; (8004d18 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004cfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cfe:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004d06:	4904      	ldr	r1, [pc, #16]	; (8004d18 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004d08:	4313      	orrs	r3, r2
 8004d0a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004d0e:	e009      	b.n	8004d24 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004d10:	7cfb      	ldrb	r3, [r7, #19]
 8004d12:	74bb      	strb	r3, [r7, #18]
 8004d14:	e006      	b.n	8004d24 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8004d16:	bf00      	nop
 8004d18:	40021000 	.word	0x40021000
 8004d1c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d20:	7cfb      	ldrb	r3, [r7, #19]
 8004d22:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004d24:	7c7b      	ldrb	r3, [r7, #17]
 8004d26:	2b01      	cmp	r3, #1
 8004d28:	d105      	bne.n	8004d36 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d2a:	4b9e      	ldr	r3, [pc, #632]	; (8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004d2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d2e:	4a9d      	ldr	r2, [pc, #628]	; (8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004d30:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d34:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f003 0301 	and.w	r3, r3, #1
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d00a      	beq.n	8004d58 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004d42:	4b98      	ldr	r3, [pc, #608]	; (8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004d44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d48:	f023 0203 	bic.w	r2, r3, #3
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	6a1b      	ldr	r3, [r3, #32]
 8004d50:	4994      	ldr	r1, [pc, #592]	; (8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004d52:	4313      	orrs	r3, r2
 8004d54:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f003 0302 	and.w	r3, r3, #2
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d00a      	beq.n	8004d7a <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004d64:	4b8f      	ldr	r3, [pc, #572]	; (8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004d66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d6a:	f023 020c 	bic.w	r2, r3, #12
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d72:	498c      	ldr	r1, [pc, #560]	; (8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004d74:	4313      	orrs	r3, r2
 8004d76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f003 0304 	and.w	r3, r3, #4
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d00a      	beq.n	8004d9c <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004d86:	4b87      	ldr	r3, [pc, #540]	; (8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004d88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d8c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d94:	4983      	ldr	r1, [pc, #524]	; (8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004d96:	4313      	orrs	r3, r2
 8004d98:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f003 0308 	and.w	r3, r3, #8
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d00a      	beq.n	8004dbe <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004da8:	4b7e      	ldr	r3, [pc, #504]	; (8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004daa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dae:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004db6:	497b      	ldr	r1, [pc, #492]	; (8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004db8:	4313      	orrs	r3, r2
 8004dba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f003 0320 	and.w	r3, r3, #32
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d00a      	beq.n	8004de0 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004dca:	4b76      	ldr	r3, [pc, #472]	; (8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004dcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dd0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dd8:	4972      	ldr	r1, [pc, #456]	; (8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004dda:	4313      	orrs	r3, r2
 8004ddc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d00a      	beq.n	8004e02 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004dec:	4b6d      	ldr	r3, [pc, #436]	; (8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004dee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004df2:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dfa:	496a      	ldr	r1, [pc, #424]	; (8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004dfc:	4313      	orrs	r3, r2
 8004dfe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d00a      	beq.n	8004e24 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004e0e:	4b65      	ldr	r3, [pc, #404]	; (8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004e10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e14:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e1c:	4961      	ldr	r1, [pc, #388]	; (8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004e1e:	4313      	orrs	r3, r2
 8004e20:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d00a      	beq.n	8004e46 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004e30:	4b5c      	ldr	r3, [pc, #368]	; (8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004e32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e36:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e3e:	4959      	ldr	r1, [pc, #356]	; (8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004e40:	4313      	orrs	r3, r2
 8004e42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d00a      	beq.n	8004e68 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004e52:	4b54      	ldr	r3, [pc, #336]	; (8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004e54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e58:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e60:	4950      	ldr	r1, [pc, #320]	; (8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004e62:	4313      	orrs	r3, r2
 8004e64:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d00a      	beq.n	8004e8a <HAL_RCCEx_PeriphCLKConfig+0x31e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004e74:	4b4b      	ldr	r3, [pc, #300]	; (8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004e76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e7a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e82:	4948      	ldr	r1, [pc, #288]	; (8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004e84:	4313      	orrs	r3, r2
 8004e86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d00a      	beq.n	8004eac <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004e96:	4b43      	ldr	r3, [pc, #268]	; (8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004e98:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004e9c:	f023 0203 	bic.w	r2, r3, #3
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ea4:	493f      	ldr	r1, [pc, #252]	; (8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004ea6:	4313      	orrs	r3, r2
 8004ea8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d028      	beq.n	8004f0a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004eb8:	4b3a      	ldr	r3, [pc, #232]	; (8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004eba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ebe:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ec6:	4937      	ldr	r1, [pc, #220]	; (8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004ec8:	4313      	orrs	r3, r2
 8004eca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ed2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004ed6:	d106      	bne.n	8004ee6 <HAL_RCCEx_PeriphCLKConfig+0x37a>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004ed8:	4b32      	ldr	r3, [pc, #200]	; (8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004eda:	68db      	ldr	r3, [r3, #12]
 8004edc:	4a31      	ldr	r2, [pc, #196]	; (8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004ede:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004ee2:	60d3      	str	r3, [r2, #12]
 8004ee4:	e011      	b.n	8004f0a <HAL_RCCEx_PeriphCLKConfig+0x39e>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004eea:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004eee:	d10c      	bne.n	8004f0a <HAL_RCCEx_PeriphCLKConfig+0x39e>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	3304      	adds	r3, #4
 8004ef4:	2101      	movs	r1, #1
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	f000 f8a4 	bl	8005044 <RCCEx_PLLSAI1_Config>
 8004efc:	4603      	mov	r3, r0
 8004efe:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004f00:	7cfb      	ldrb	r3, [r7, #19]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d001      	beq.n	8004f0a <HAL_RCCEx_PeriphCLKConfig+0x39e>
        {
          /* set overall return value */
          status = ret;
 8004f06:	7cfb      	ldrb	r3, [r7, #19]
 8004f08:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d028      	beq.n	8004f68 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004f16:	4b23      	ldr	r3, [pc, #140]	; (8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004f18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f1c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f24:	491f      	ldr	r1, [pc, #124]	; (8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004f26:	4313      	orrs	r3, r2
 8004f28:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f30:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004f34:	d106      	bne.n	8004f44 <HAL_RCCEx_PeriphCLKConfig+0x3d8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004f36:	4b1b      	ldr	r3, [pc, #108]	; (8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004f38:	68db      	ldr	r3, [r3, #12]
 8004f3a:	4a1a      	ldr	r2, [pc, #104]	; (8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004f3c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004f40:	60d3      	str	r3, [r2, #12]
 8004f42:	e011      	b.n	8004f68 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f48:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004f4c:	d10c      	bne.n	8004f68 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	3304      	adds	r3, #4
 8004f52:	2101      	movs	r1, #1
 8004f54:	4618      	mov	r0, r3
 8004f56:	f000 f875 	bl	8005044 <RCCEx_PLLSAI1_Config>
 8004f5a:	4603      	mov	r3, r0
 8004f5c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004f5e:	7cfb      	ldrb	r3, [r7, #19]
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d001      	beq.n	8004f68 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
      {
        /* set overall return value */
        status = ret;
 8004f64:	7cfb      	ldrb	r3, [r7, #19]
 8004f66:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d02b      	beq.n	8004fcc <HAL_RCCEx_PeriphCLKConfig+0x460>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004f74:	4b0b      	ldr	r3, [pc, #44]	; (8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004f76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f7a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f82:	4908      	ldr	r1, [pc, #32]	; (8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004f84:	4313      	orrs	r3, r2
 8004f86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f8e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004f92:	d109      	bne.n	8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004f94:	4b03      	ldr	r3, [pc, #12]	; (8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004f96:	68db      	ldr	r3, [r3, #12]
 8004f98:	4a02      	ldr	r2, [pc, #8]	; (8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004f9a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004f9e:	60d3      	str	r3, [r2, #12]
 8004fa0:	e014      	b.n	8004fcc <HAL_RCCEx_PeriphCLKConfig+0x460>
 8004fa2:	bf00      	nop
 8004fa4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fac:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004fb0:	d10c      	bne.n	8004fcc <HAL_RCCEx_PeriphCLKConfig+0x460>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	3304      	adds	r3, #4
 8004fb6:	2101      	movs	r1, #1
 8004fb8:	4618      	mov	r0, r3
 8004fba:	f000 f843 	bl	8005044 <RCCEx_PLLSAI1_Config>
 8004fbe:	4603      	mov	r3, r0
 8004fc0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004fc2:	7cfb      	ldrb	r3, [r7, #19]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d001      	beq.n	8004fcc <HAL_RCCEx_PeriphCLKConfig+0x460>
      {
        /* set overall return value */
        status = ret;
 8004fc8:	7cfb      	ldrb	r3, [r7, #19]
 8004fca:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d01c      	beq.n	8005012 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004fd8:	4b19      	ldr	r3, [pc, #100]	; (8005040 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8004fda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fde:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004fe6:	4916      	ldr	r1, [pc, #88]	; (8005040 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8004fe8:	4313      	orrs	r3, r2
 8004fea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ff2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004ff6:	d10c      	bne.n	8005012 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	3304      	adds	r3, #4
 8004ffc:	2102      	movs	r1, #2
 8004ffe:	4618      	mov	r0, r3
 8005000:	f000 f820 	bl	8005044 <RCCEx_PLLSAI1_Config>
 8005004:	4603      	mov	r3, r0
 8005006:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005008:	7cfb      	ldrb	r3, [r7, #19]
 800500a:	2b00      	cmp	r3, #0
 800500c:	d001      	beq.n	8005012 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
      {
        /* set overall return value */
        status = ret;
 800500e:	7cfb      	ldrb	r3, [r7, #19]
 8005010:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800501a:	2b00      	cmp	r3, #0
 800501c:	d00a      	beq.n	8005034 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800501e:	4b08      	ldr	r3, [pc, #32]	; (8005040 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8005020:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005024:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800502c:	4904      	ldr	r1, [pc, #16]	; (8005040 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 800502e:	4313      	orrs	r3, r2
 8005030:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005034:	7cbb      	ldrb	r3, [r7, #18]
}
 8005036:	4618      	mov	r0, r3
 8005038:	3718      	adds	r7, #24
 800503a:	46bd      	mov	sp, r7
 800503c:	bd80      	pop	{r7, pc}
 800503e:	bf00      	nop
 8005040:	40021000 	.word	0x40021000

08005044 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005044:	b580      	push	{r7, lr}
 8005046:	b084      	sub	sp, #16
 8005048:	af00      	add	r7, sp, #0
 800504a:	6078      	str	r0, [r7, #4]
 800504c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800504e:	2300      	movs	r3, #0
 8005050:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005052:	4b74      	ldr	r3, [pc, #464]	; (8005224 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005054:	68db      	ldr	r3, [r3, #12]
 8005056:	f003 0303 	and.w	r3, r3, #3
 800505a:	2b00      	cmp	r3, #0
 800505c:	d018      	beq.n	8005090 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800505e:	4b71      	ldr	r3, [pc, #452]	; (8005224 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005060:	68db      	ldr	r3, [r3, #12]
 8005062:	f003 0203 	and.w	r2, r3, #3
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	429a      	cmp	r2, r3
 800506c:	d10d      	bne.n	800508a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
       ||
 8005072:	2b00      	cmp	r3, #0
 8005074:	d009      	beq.n	800508a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005076:	4b6b      	ldr	r3, [pc, #428]	; (8005224 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005078:	68db      	ldr	r3, [r3, #12]
 800507a:	091b      	lsrs	r3, r3, #4
 800507c:	f003 0307 	and.w	r3, r3, #7
 8005080:	1c5a      	adds	r2, r3, #1
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	685b      	ldr	r3, [r3, #4]
       ||
 8005086:	429a      	cmp	r2, r3
 8005088:	d047      	beq.n	800511a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800508a:	2301      	movs	r3, #1
 800508c:	73fb      	strb	r3, [r7, #15]
 800508e:	e044      	b.n	800511a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	2b03      	cmp	r3, #3
 8005096:	d018      	beq.n	80050ca <RCCEx_PLLSAI1_Config+0x86>
 8005098:	2b03      	cmp	r3, #3
 800509a:	d825      	bhi.n	80050e8 <RCCEx_PLLSAI1_Config+0xa4>
 800509c:	2b01      	cmp	r3, #1
 800509e:	d002      	beq.n	80050a6 <RCCEx_PLLSAI1_Config+0x62>
 80050a0:	2b02      	cmp	r3, #2
 80050a2:	d009      	beq.n	80050b8 <RCCEx_PLLSAI1_Config+0x74>
 80050a4:	e020      	b.n	80050e8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80050a6:	4b5f      	ldr	r3, [pc, #380]	; (8005224 <RCCEx_PLLSAI1_Config+0x1e0>)
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f003 0302 	and.w	r3, r3, #2
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d11d      	bne.n	80050ee <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80050b2:	2301      	movs	r3, #1
 80050b4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80050b6:	e01a      	b.n	80050ee <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80050b8:	4b5a      	ldr	r3, [pc, #360]	; (8005224 <RCCEx_PLLSAI1_Config+0x1e0>)
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d116      	bne.n	80050f2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80050c4:	2301      	movs	r3, #1
 80050c6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80050c8:	e013      	b.n	80050f2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80050ca:	4b56      	ldr	r3, [pc, #344]	; (8005224 <RCCEx_PLLSAI1_Config+0x1e0>)
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d10f      	bne.n	80050f6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80050d6:	4b53      	ldr	r3, [pc, #332]	; (8005224 <RCCEx_PLLSAI1_Config+0x1e0>)
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d109      	bne.n	80050f6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80050e2:	2301      	movs	r3, #1
 80050e4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80050e6:	e006      	b.n	80050f6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80050e8:	2301      	movs	r3, #1
 80050ea:	73fb      	strb	r3, [r7, #15]
      break;
 80050ec:	e004      	b.n	80050f8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80050ee:	bf00      	nop
 80050f0:	e002      	b.n	80050f8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80050f2:	bf00      	nop
 80050f4:	e000      	b.n	80050f8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80050f6:	bf00      	nop
    }

    if(status == HAL_OK)
 80050f8:	7bfb      	ldrb	r3, [r7, #15]
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d10d      	bne.n	800511a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80050fe:	4b49      	ldr	r3, [pc, #292]	; (8005224 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005100:	68db      	ldr	r3, [r3, #12]
 8005102:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6819      	ldr	r1, [r3, #0]
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	685b      	ldr	r3, [r3, #4]
 800510e:	3b01      	subs	r3, #1
 8005110:	011b      	lsls	r3, r3, #4
 8005112:	430b      	orrs	r3, r1
 8005114:	4943      	ldr	r1, [pc, #268]	; (8005224 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005116:	4313      	orrs	r3, r2
 8005118:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800511a:	7bfb      	ldrb	r3, [r7, #15]
 800511c:	2b00      	cmp	r3, #0
 800511e:	d17c      	bne.n	800521a <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005120:	4b40      	ldr	r3, [pc, #256]	; (8005224 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	4a3f      	ldr	r2, [pc, #252]	; (8005224 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005126:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800512a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800512c:	f7fd f9ca 	bl	80024c4 <HAL_GetTick>
 8005130:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005132:	e009      	b.n	8005148 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005134:	f7fd f9c6 	bl	80024c4 <HAL_GetTick>
 8005138:	4602      	mov	r2, r0
 800513a:	68bb      	ldr	r3, [r7, #8]
 800513c:	1ad3      	subs	r3, r2, r3
 800513e:	2b02      	cmp	r3, #2
 8005140:	d902      	bls.n	8005148 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005142:	2303      	movs	r3, #3
 8005144:	73fb      	strb	r3, [r7, #15]
        break;
 8005146:	e005      	b.n	8005154 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005148:	4b36      	ldr	r3, [pc, #216]	; (8005224 <RCCEx_PLLSAI1_Config+0x1e0>)
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005150:	2b00      	cmp	r3, #0
 8005152:	d1ef      	bne.n	8005134 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005154:	7bfb      	ldrb	r3, [r7, #15]
 8005156:	2b00      	cmp	r3, #0
 8005158:	d15f      	bne.n	800521a <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800515a:	683b      	ldr	r3, [r7, #0]
 800515c:	2b00      	cmp	r3, #0
 800515e:	d110      	bne.n	8005182 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005160:	4b30      	ldr	r3, [pc, #192]	; (8005224 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005162:	691b      	ldr	r3, [r3, #16]
 8005164:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8005168:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800516c:	687a      	ldr	r2, [r7, #4]
 800516e:	6892      	ldr	r2, [r2, #8]
 8005170:	0211      	lsls	r1, r2, #8
 8005172:	687a      	ldr	r2, [r7, #4]
 8005174:	68d2      	ldr	r2, [r2, #12]
 8005176:	06d2      	lsls	r2, r2, #27
 8005178:	430a      	orrs	r2, r1
 800517a:	492a      	ldr	r1, [pc, #168]	; (8005224 <RCCEx_PLLSAI1_Config+0x1e0>)
 800517c:	4313      	orrs	r3, r2
 800517e:	610b      	str	r3, [r1, #16]
 8005180:	e027      	b.n	80051d2 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005182:	683b      	ldr	r3, [r7, #0]
 8005184:	2b01      	cmp	r3, #1
 8005186:	d112      	bne.n	80051ae <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005188:	4b26      	ldr	r3, [pc, #152]	; (8005224 <RCCEx_PLLSAI1_Config+0x1e0>)
 800518a:	691b      	ldr	r3, [r3, #16]
 800518c:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8005190:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005194:	687a      	ldr	r2, [r7, #4]
 8005196:	6892      	ldr	r2, [r2, #8]
 8005198:	0211      	lsls	r1, r2, #8
 800519a:	687a      	ldr	r2, [r7, #4]
 800519c:	6912      	ldr	r2, [r2, #16]
 800519e:	0852      	lsrs	r2, r2, #1
 80051a0:	3a01      	subs	r2, #1
 80051a2:	0552      	lsls	r2, r2, #21
 80051a4:	430a      	orrs	r2, r1
 80051a6:	491f      	ldr	r1, [pc, #124]	; (8005224 <RCCEx_PLLSAI1_Config+0x1e0>)
 80051a8:	4313      	orrs	r3, r2
 80051aa:	610b      	str	r3, [r1, #16]
 80051ac:	e011      	b.n	80051d2 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80051ae:	4b1d      	ldr	r3, [pc, #116]	; (8005224 <RCCEx_PLLSAI1_Config+0x1e0>)
 80051b0:	691b      	ldr	r3, [r3, #16]
 80051b2:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80051b6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80051ba:	687a      	ldr	r2, [r7, #4]
 80051bc:	6892      	ldr	r2, [r2, #8]
 80051be:	0211      	lsls	r1, r2, #8
 80051c0:	687a      	ldr	r2, [r7, #4]
 80051c2:	6952      	ldr	r2, [r2, #20]
 80051c4:	0852      	lsrs	r2, r2, #1
 80051c6:	3a01      	subs	r2, #1
 80051c8:	0652      	lsls	r2, r2, #25
 80051ca:	430a      	orrs	r2, r1
 80051cc:	4915      	ldr	r1, [pc, #84]	; (8005224 <RCCEx_PLLSAI1_Config+0x1e0>)
 80051ce:	4313      	orrs	r3, r2
 80051d0:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80051d2:	4b14      	ldr	r3, [pc, #80]	; (8005224 <RCCEx_PLLSAI1_Config+0x1e0>)
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	4a13      	ldr	r2, [pc, #76]	; (8005224 <RCCEx_PLLSAI1_Config+0x1e0>)
 80051d8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80051dc:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051de:	f7fd f971 	bl	80024c4 <HAL_GetTick>
 80051e2:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80051e4:	e009      	b.n	80051fa <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80051e6:	f7fd f96d 	bl	80024c4 <HAL_GetTick>
 80051ea:	4602      	mov	r2, r0
 80051ec:	68bb      	ldr	r3, [r7, #8]
 80051ee:	1ad3      	subs	r3, r2, r3
 80051f0:	2b02      	cmp	r3, #2
 80051f2:	d902      	bls.n	80051fa <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80051f4:	2303      	movs	r3, #3
 80051f6:	73fb      	strb	r3, [r7, #15]
          break;
 80051f8:	e005      	b.n	8005206 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80051fa:	4b0a      	ldr	r3, [pc, #40]	; (8005224 <RCCEx_PLLSAI1_Config+0x1e0>)
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005202:	2b00      	cmp	r3, #0
 8005204:	d0ef      	beq.n	80051e6 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8005206:	7bfb      	ldrb	r3, [r7, #15]
 8005208:	2b00      	cmp	r3, #0
 800520a:	d106      	bne.n	800521a <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800520c:	4b05      	ldr	r3, [pc, #20]	; (8005224 <RCCEx_PLLSAI1_Config+0x1e0>)
 800520e:	691a      	ldr	r2, [r3, #16]
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	699b      	ldr	r3, [r3, #24]
 8005214:	4903      	ldr	r1, [pc, #12]	; (8005224 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005216:	4313      	orrs	r3, r2
 8005218:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800521a:	7bfb      	ldrb	r3, [r7, #15]
}
 800521c:	4618      	mov	r0, r3
 800521e:	3710      	adds	r7, #16
 8005220:	46bd      	mov	sp, r7
 8005222:	bd80      	pop	{r7, pc}
 8005224:	40021000 	.word	0x40021000

08005228 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005228:	b580      	push	{r7, lr}
 800522a:	b084      	sub	sp, #16
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2b00      	cmp	r3, #0
 8005234:	d101      	bne.n	800523a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005236:	2301      	movs	r3, #1
 8005238:	e095      	b.n	8005366 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800523e:	2b00      	cmp	r3, #0
 8005240:	d108      	bne.n	8005254 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	685b      	ldr	r3, [r3, #4]
 8005246:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800524a:	d009      	beq.n	8005260 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2200      	movs	r2, #0
 8005250:	61da      	str	r2, [r3, #28]
 8005252:	e005      	b.n	8005260 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2200      	movs	r2, #0
 8005258:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	2200      	movs	r2, #0
 800525e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2200      	movs	r2, #0
 8005264:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800526c:	b2db      	uxtb	r3, r3
 800526e:	2b00      	cmp	r3, #0
 8005270:	d106      	bne.n	8005280 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	2200      	movs	r2, #0
 8005276:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800527a:	6878      	ldr	r0, [r7, #4]
 800527c:	f7fc f974 	bl	8001568 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2202      	movs	r2, #2
 8005284:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	681a      	ldr	r2, [r3, #0]
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005296:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	68db      	ldr	r3, [r3, #12]
 800529c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80052a0:	d902      	bls.n	80052a8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80052a2:	2300      	movs	r3, #0
 80052a4:	60fb      	str	r3, [r7, #12]
 80052a6:	e002      	b.n	80052ae <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80052a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80052ac:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	68db      	ldr	r3, [r3, #12]
 80052b2:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80052b6:	d007      	beq.n	80052c8 <HAL_SPI_Init+0xa0>
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	68db      	ldr	r3, [r3, #12]
 80052bc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80052c0:	d002      	beq.n	80052c8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	2200      	movs	r2, #0
 80052c6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	685b      	ldr	r3, [r3, #4]
 80052cc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	689b      	ldr	r3, [r3, #8]
 80052d4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80052d8:	431a      	orrs	r2, r3
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	691b      	ldr	r3, [r3, #16]
 80052de:	f003 0302 	and.w	r3, r3, #2
 80052e2:	431a      	orrs	r2, r3
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	695b      	ldr	r3, [r3, #20]
 80052e8:	f003 0301 	and.w	r3, r3, #1
 80052ec:	431a      	orrs	r2, r3
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	699b      	ldr	r3, [r3, #24]
 80052f2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80052f6:	431a      	orrs	r2, r3
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	69db      	ldr	r3, [r3, #28]
 80052fc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005300:	431a      	orrs	r2, r3
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	6a1b      	ldr	r3, [r3, #32]
 8005306:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800530a:	ea42 0103 	orr.w	r1, r2, r3
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005312:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	430a      	orrs	r2, r1
 800531c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	699b      	ldr	r3, [r3, #24]
 8005322:	0c1b      	lsrs	r3, r3, #16
 8005324:	f003 0204 	and.w	r2, r3, #4
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800532c:	f003 0310 	and.w	r3, r3, #16
 8005330:	431a      	orrs	r2, r3
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005336:	f003 0308 	and.w	r3, r3, #8
 800533a:	431a      	orrs	r2, r3
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	68db      	ldr	r3, [r3, #12]
 8005340:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005344:	ea42 0103 	orr.w	r1, r2, r3
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	430a      	orrs	r2, r1
 8005354:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	2200      	movs	r2, #0
 800535a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2201      	movs	r2, #1
 8005360:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005364:	2300      	movs	r3, #0
}
 8005366:	4618      	mov	r0, r3
 8005368:	3710      	adds	r7, #16
 800536a:	46bd      	mov	sp, r7
 800536c:	bd80      	pop	{r7, pc}

0800536e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800536e:	b580      	push	{r7, lr}
 8005370:	b082      	sub	sp, #8
 8005372:	af00      	add	r7, sp, #0
 8005374:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	2b00      	cmp	r3, #0
 800537a:	d101      	bne.n	8005380 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800537c:	2301      	movs	r3, #1
 800537e:	e049      	b.n	8005414 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005386:	b2db      	uxtb	r3, r3
 8005388:	2b00      	cmp	r3, #0
 800538a:	d106      	bne.n	800539a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2200      	movs	r2, #0
 8005390:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005394:	6878      	ldr	r0, [r7, #4]
 8005396:	f7fc fcbd 	bl	8001d14 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	2202      	movs	r2, #2
 800539e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681a      	ldr	r2, [r3, #0]
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	3304      	adds	r3, #4
 80053aa:	4619      	mov	r1, r3
 80053ac:	4610      	mov	r0, r2
 80053ae:	f000 fc17 	bl	8005be0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	2201      	movs	r2, #1
 80053b6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	2201      	movs	r2, #1
 80053be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	2201      	movs	r2, #1
 80053c6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	2201      	movs	r2, #1
 80053ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	2201      	movs	r2, #1
 80053d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	2201      	movs	r2, #1
 80053de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	2201      	movs	r2, #1
 80053e6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	2201      	movs	r2, #1
 80053ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	2201      	movs	r2, #1
 80053f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	2201      	movs	r2, #1
 80053fe:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	2201      	movs	r2, #1
 8005406:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	2201      	movs	r2, #1
 800540e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005412:	2300      	movs	r3, #0
}
 8005414:	4618      	mov	r0, r3
 8005416:	3708      	adds	r7, #8
 8005418:	46bd      	mov	sp, r7
 800541a:	bd80      	pop	{r7, pc}

0800541c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800541c:	b480      	push	{r7}
 800541e:	b085      	sub	sp, #20
 8005420:	af00      	add	r7, sp, #0
 8005422:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800542a:	b2db      	uxtb	r3, r3
 800542c:	2b01      	cmp	r3, #1
 800542e:	d001      	beq.n	8005434 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005430:	2301      	movs	r3, #1
 8005432:	e040      	b.n	80054b6 <HAL_TIM_Base_Start_IT+0x9a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2202      	movs	r2, #2
 8005438:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	68da      	ldr	r2, [r3, #12]
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f042 0201 	orr.w	r2, r2, #1
 800544a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	4a1c      	ldr	r2, [pc, #112]	; (80054c4 <HAL_TIM_Base_Start_IT+0xa8>)
 8005452:	4293      	cmp	r3, r2
 8005454:	d00e      	beq.n	8005474 <HAL_TIM_Base_Start_IT+0x58>
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800545e:	d009      	beq.n	8005474 <HAL_TIM_Base_Start_IT+0x58>
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	4a18      	ldr	r2, [pc, #96]	; (80054c8 <HAL_TIM_Base_Start_IT+0xac>)
 8005466:	4293      	cmp	r3, r2
 8005468:	d004      	beq.n	8005474 <HAL_TIM_Base_Start_IT+0x58>
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	4a17      	ldr	r2, [pc, #92]	; (80054cc <HAL_TIM_Base_Start_IT+0xb0>)
 8005470:	4293      	cmp	r3, r2
 8005472:	d115      	bne.n	80054a0 <HAL_TIM_Base_Start_IT+0x84>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	689a      	ldr	r2, [r3, #8]
 800547a:	4b15      	ldr	r3, [pc, #84]	; (80054d0 <HAL_TIM_Base_Start_IT+0xb4>)
 800547c:	4013      	ands	r3, r2
 800547e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	2b06      	cmp	r3, #6
 8005484:	d015      	beq.n	80054b2 <HAL_TIM_Base_Start_IT+0x96>
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800548c:	d011      	beq.n	80054b2 <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	681a      	ldr	r2, [r3, #0]
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f042 0201 	orr.w	r2, r2, #1
 800549c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800549e:	e008      	b.n	80054b2 <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	681a      	ldr	r2, [r3, #0]
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f042 0201 	orr.w	r2, r2, #1
 80054ae:	601a      	str	r2, [r3, #0]
 80054b0:	e000      	b.n	80054b4 <HAL_TIM_Base_Start_IT+0x98>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054b2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80054b4:	2300      	movs	r3, #0
}
 80054b6:	4618      	mov	r0, r3
 80054b8:	3714      	adds	r7, #20
 80054ba:	46bd      	mov	sp, r7
 80054bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c0:	4770      	bx	lr
 80054c2:	bf00      	nop
 80054c4:	40012c00 	.word	0x40012c00
 80054c8:	40000400 	.word	0x40000400
 80054cc:	40014000 	.word	0x40014000
 80054d0:	00010007 	.word	0x00010007

080054d4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80054d4:	b580      	push	{r7, lr}
 80054d6:	b082      	sub	sp, #8
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d101      	bne.n	80054e6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80054e2:	2301      	movs	r3, #1
 80054e4:	e049      	b.n	800557a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054ec:	b2db      	uxtb	r3, r3
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d106      	bne.n	8005500 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	2200      	movs	r2, #0
 80054f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80054fa:	6878      	ldr	r0, [r7, #4]
 80054fc:	f000 f841 	bl	8005582 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2202      	movs	r2, #2
 8005504:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681a      	ldr	r2, [r3, #0]
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	3304      	adds	r3, #4
 8005510:	4619      	mov	r1, r3
 8005512:	4610      	mov	r0, r2
 8005514:	f000 fb64 	bl	8005be0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2201      	movs	r2, #1
 800551c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2201      	movs	r2, #1
 8005524:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2201      	movs	r2, #1
 800552c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2201      	movs	r2, #1
 8005534:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2201      	movs	r2, #1
 800553c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2201      	movs	r2, #1
 8005544:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2201      	movs	r2, #1
 800554c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2201      	movs	r2, #1
 8005554:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2201      	movs	r2, #1
 800555c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2201      	movs	r2, #1
 8005564:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2201      	movs	r2, #1
 800556c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2201      	movs	r2, #1
 8005574:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005578:	2300      	movs	r3, #0
}
 800557a:	4618      	mov	r0, r3
 800557c:	3708      	adds	r7, #8
 800557e:	46bd      	mov	sp, r7
 8005580:	bd80      	pop	{r7, pc}

08005582 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005582:	b480      	push	{r7}
 8005584:	b083      	sub	sp, #12
 8005586:	af00      	add	r7, sp, #0
 8005588:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800558a:	bf00      	nop
 800558c:	370c      	adds	r7, #12
 800558e:	46bd      	mov	sp, r7
 8005590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005594:	4770      	bx	lr

08005596 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005596:	b580      	push	{r7, lr}
 8005598:	b082      	sub	sp, #8
 800559a:	af00      	add	r7, sp, #0
 800559c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	691b      	ldr	r3, [r3, #16]
 80055a4:	f003 0302 	and.w	r3, r3, #2
 80055a8:	2b02      	cmp	r3, #2
 80055aa:	d122      	bne.n	80055f2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	68db      	ldr	r3, [r3, #12]
 80055b2:	f003 0302 	and.w	r3, r3, #2
 80055b6:	2b02      	cmp	r3, #2
 80055b8:	d11b      	bne.n	80055f2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f06f 0202 	mvn.w	r2, #2
 80055c2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2201      	movs	r2, #1
 80055c8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	699b      	ldr	r3, [r3, #24]
 80055d0:	f003 0303 	and.w	r3, r3, #3
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d003      	beq.n	80055e0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80055d8:	6878      	ldr	r0, [r7, #4]
 80055da:	f000 fae2 	bl	8005ba2 <HAL_TIM_IC_CaptureCallback>
 80055de:	e005      	b.n	80055ec <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80055e0:	6878      	ldr	r0, [r7, #4]
 80055e2:	f000 fad4 	bl	8005b8e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055e6:	6878      	ldr	r0, [r7, #4]
 80055e8:	f000 fae5 	bl	8005bb6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2200      	movs	r2, #0
 80055f0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	691b      	ldr	r3, [r3, #16]
 80055f8:	f003 0304 	and.w	r3, r3, #4
 80055fc:	2b04      	cmp	r3, #4
 80055fe:	d122      	bne.n	8005646 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	68db      	ldr	r3, [r3, #12]
 8005606:	f003 0304 	and.w	r3, r3, #4
 800560a:	2b04      	cmp	r3, #4
 800560c:	d11b      	bne.n	8005646 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f06f 0204 	mvn.w	r2, #4
 8005616:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2202      	movs	r2, #2
 800561c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	699b      	ldr	r3, [r3, #24]
 8005624:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005628:	2b00      	cmp	r3, #0
 800562a:	d003      	beq.n	8005634 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800562c:	6878      	ldr	r0, [r7, #4]
 800562e:	f000 fab8 	bl	8005ba2 <HAL_TIM_IC_CaptureCallback>
 8005632:	e005      	b.n	8005640 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005634:	6878      	ldr	r0, [r7, #4]
 8005636:	f000 faaa 	bl	8005b8e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800563a:	6878      	ldr	r0, [r7, #4]
 800563c:	f000 fabb 	bl	8005bb6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	2200      	movs	r2, #0
 8005644:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	691b      	ldr	r3, [r3, #16]
 800564c:	f003 0308 	and.w	r3, r3, #8
 8005650:	2b08      	cmp	r3, #8
 8005652:	d122      	bne.n	800569a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	68db      	ldr	r3, [r3, #12]
 800565a:	f003 0308 	and.w	r3, r3, #8
 800565e:	2b08      	cmp	r3, #8
 8005660:	d11b      	bne.n	800569a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f06f 0208 	mvn.w	r2, #8
 800566a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2204      	movs	r2, #4
 8005670:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	69db      	ldr	r3, [r3, #28]
 8005678:	f003 0303 	and.w	r3, r3, #3
 800567c:	2b00      	cmp	r3, #0
 800567e:	d003      	beq.n	8005688 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005680:	6878      	ldr	r0, [r7, #4]
 8005682:	f000 fa8e 	bl	8005ba2 <HAL_TIM_IC_CaptureCallback>
 8005686:	e005      	b.n	8005694 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005688:	6878      	ldr	r0, [r7, #4]
 800568a:	f000 fa80 	bl	8005b8e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800568e:	6878      	ldr	r0, [r7, #4]
 8005690:	f000 fa91 	bl	8005bb6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2200      	movs	r2, #0
 8005698:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	691b      	ldr	r3, [r3, #16]
 80056a0:	f003 0310 	and.w	r3, r3, #16
 80056a4:	2b10      	cmp	r3, #16
 80056a6:	d122      	bne.n	80056ee <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	68db      	ldr	r3, [r3, #12]
 80056ae:	f003 0310 	and.w	r3, r3, #16
 80056b2:	2b10      	cmp	r3, #16
 80056b4:	d11b      	bne.n	80056ee <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f06f 0210 	mvn.w	r2, #16
 80056be:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2208      	movs	r2, #8
 80056c4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	69db      	ldr	r3, [r3, #28]
 80056cc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d003      	beq.n	80056dc <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80056d4:	6878      	ldr	r0, [r7, #4]
 80056d6:	f000 fa64 	bl	8005ba2 <HAL_TIM_IC_CaptureCallback>
 80056da:	e005      	b.n	80056e8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80056dc:	6878      	ldr	r0, [r7, #4]
 80056de:	f000 fa56 	bl	8005b8e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056e2:	6878      	ldr	r0, [r7, #4]
 80056e4:	f000 fa67 	bl	8005bb6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2200      	movs	r2, #0
 80056ec:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	691b      	ldr	r3, [r3, #16]
 80056f4:	f003 0301 	and.w	r3, r3, #1
 80056f8:	2b01      	cmp	r3, #1
 80056fa:	d10e      	bne.n	800571a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	68db      	ldr	r3, [r3, #12]
 8005702:	f003 0301 	and.w	r3, r3, #1
 8005706:	2b01      	cmp	r3, #1
 8005708:	d107      	bne.n	800571a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f06f 0201 	mvn.w	r2, #1
 8005712:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005714:	6878      	ldr	r0, [r7, #4]
 8005716:	f7fb fe85 	bl	8001424 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	691b      	ldr	r3, [r3, #16]
 8005720:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005724:	2b80      	cmp	r3, #128	; 0x80
 8005726:	d10e      	bne.n	8005746 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	68db      	ldr	r3, [r3, #12]
 800572e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005732:	2b80      	cmp	r3, #128	; 0x80
 8005734:	d107      	bne.n	8005746 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800573e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005740:	6878      	ldr	r0, [r7, #4]
 8005742:	f000 fec3 	bl	80064cc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	691b      	ldr	r3, [r3, #16]
 800574c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005750:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005754:	d10e      	bne.n	8005774 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	68db      	ldr	r3, [r3, #12]
 800575c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005760:	2b80      	cmp	r3, #128	; 0x80
 8005762:	d107      	bne.n	8005774 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800576c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800576e:	6878      	ldr	r0, [r7, #4]
 8005770:	f000 feb6 	bl	80064e0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	691b      	ldr	r3, [r3, #16]
 800577a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800577e:	2b40      	cmp	r3, #64	; 0x40
 8005780:	d10e      	bne.n	80057a0 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	68db      	ldr	r3, [r3, #12]
 8005788:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800578c:	2b40      	cmp	r3, #64	; 0x40
 800578e:	d107      	bne.n	80057a0 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005798:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800579a:	6878      	ldr	r0, [r7, #4]
 800579c:	f000 fa15 	bl	8005bca <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	691b      	ldr	r3, [r3, #16]
 80057a6:	f003 0320 	and.w	r3, r3, #32
 80057aa:	2b20      	cmp	r3, #32
 80057ac:	d10e      	bne.n	80057cc <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	68db      	ldr	r3, [r3, #12]
 80057b4:	f003 0320 	and.w	r3, r3, #32
 80057b8:	2b20      	cmp	r3, #32
 80057ba:	d107      	bne.n	80057cc <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f06f 0220 	mvn.w	r2, #32
 80057c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80057c6:	6878      	ldr	r0, [r7, #4]
 80057c8:	f000 fe76 	bl	80064b8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80057cc:	bf00      	nop
 80057ce:	3708      	adds	r7, #8
 80057d0:	46bd      	mov	sp, r7
 80057d2:	bd80      	pop	{r7, pc}

080057d4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80057d4:	b580      	push	{r7, lr}
 80057d6:	b086      	sub	sp, #24
 80057d8:	af00      	add	r7, sp, #0
 80057da:	60f8      	str	r0, [r7, #12]
 80057dc:	60b9      	str	r1, [r7, #8]
 80057de:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80057e0:	2300      	movs	r3, #0
 80057e2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057ea:	2b01      	cmp	r3, #1
 80057ec:	d101      	bne.n	80057f2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80057ee:	2302      	movs	r3, #2
 80057f0:	e0ff      	b.n	80059f2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	2201      	movs	r2, #1
 80057f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	2b14      	cmp	r3, #20
 80057fe:	f200 80f0 	bhi.w	80059e2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005802:	a201      	add	r2, pc, #4	; (adr r2, 8005808 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005804:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005808:	0800585d 	.word	0x0800585d
 800580c:	080059e3 	.word	0x080059e3
 8005810:	080059e3 	.word	0x080059e3
 8005814:	080059e3 	.word	0x080059e3
 8005818:	0800589d 	.word	0x0800589d
 800581c:	080059e3 	.word	0x080059e3
 8005820:	080059e3 	.word	0x080059e3
 8005824:	080059e3 	.word	0x080059e3
 8005828:	080058df 	.word	0x080058df
 800582c:	080059e3 	.word	0x080059e3
 8005830:	080059e3 	.word	0x080059e3
 8005834:	080059e3 	.word	0x080059e3
 8005838:	0800591f 	.word	0x0800591f
 800583c:	080059e3 	.word	0x080059e3
 8005840:	080059e3 	.word	0x080059e3
 8005844:	080059e3 	.word	0x080059e3
 8005848:	08005961 	.word	0x08005961
 800584c:	080059e3 	.word	0x080059e3
 8005850:	080059e3 	.word	0x080059e3
 8005854:	080059e3 	.word	0x080059e3
 8005858:	080059a1 	.word	0x080059a1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	68b9      	ldr	r1, [r7, #8]
 8005862:	4618      	mov	r0, r3
 8005864:	f000 fa2a 	bl	8005cbc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	699a      	ldr	r2, [r3, #24]
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f042 0208 	orr.w	r2, r2, #8
 8005876:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	699a      	ldr	r2, [r3, #24]
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f022 0204 	bic.w	r2, r2, #4
 8005886:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	6999      	ldr	r1, [r3, #24]
 800588e:	68bb      	ldr	r3, [r7, #8]
 8005890:	691a      	ldr	r2, [r3, #16]
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	430a      	orrs	r2, r1
 8005898:	619a      	str	r2, [r3, #24]
      break;
 800589a:	e0a5      	b.n	80059e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	68b9      	ldr	r1, [r7, #8]
 80058a2:	4618      	mov	r0, r3
 80058a4:	f000 fa86 	bl	8005db4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	699a      	ldr	r2, [r3, #24]
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80058b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	699a      	ldr	r2, [r3, #24]
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80058c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	6999      	ldr	r1, [r3, #24]
 80058ce:	68bb      	ldr	r3, [r7, #8]
 80058d0:	691b      	ldr	r3, [r3, #16]
 80058d2:	021a      	lsls	r2, r3, #8
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	430a      	orrs	r2, r1
 80058da:	619a      	str	r2, [r3, #24]
      break;
 80058dc:	e084      	b.n	80059e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	68b9      	ldr	r1, [r7, #8]
 80058e4:	4618      	mov	r0, r3
 80058e6:	f000 fadf 	bl	8005ea8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	69da      	ldr	r2, [r3, #28]
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f042 0208 	orr.w	r2, r2, #8
 80058f8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	69da      	ldr	r2, [r3, #28]
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f022 0204 	bic.w	r2, r2, #4
 8005908:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	69d9      	ldr	r1, [r3, #28]
 8005910:	68bb      	ldr	r3, [r7, #8]
 8005912:	691a      	ldr	r2, [r3, #16]
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	430a      	orrs	r2, r1
 800591a:	61da      	str	r2, [r3, #28]
      break;
 800591c:	e064      	b.n	80059e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	68b9      	ldr	r1, [r7, #8]
 8005924:	4618      	mov	r0, r3
 8005926:	f000 fb37 	bl	8005f98 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	69da      	ldr	r2, [r3, #28]
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005938:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	69da      	ldr	r2, [r3, #28]
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005948:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	69d9      	ldr	r1, [r3, #28]
 8005950:	68bb      	ldr	r3, [r7, #8]
 8005952:	691b      	ldr	r3, [r3, #16]
 8005954:	021a      	lsls	r2, r3, #8
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	430a      	orrs	r2, r1
 800595c:	61da      	str	r2, [r3, #28]
      break;
 800595e:	e043      	b.n	80059e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	68b9      	ldr	r1, [r7, #8]
 8005966:	4618      	mov	r0, r3
 8005968:	f000 fb74 	bl	8006054 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f042 0208 	orr.w	r2, r2, #8
 800597a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f022 0204 	bic.w	r2, r2, #4
 800598a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005992:	68bb      	ldr	r3, [r7, #8]
 8005994:	691a      	ldr	r2, [r3, #16]
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	430a      	orrs	r2, r1
 800599c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800599e:	e023      	b.n	80059e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	68b9      	ldr	r1, [r7, #8]
 80059a6:	4618      	mov	r0, r3
 80059a8:	f000 fbac 	bl	8006104 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80059ba:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80059ca:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80059d2:	68bb      	ldr	r3, [r7, #8]
 80059d4:	691b      	ldr	r3, [r3, #16]
 80059d6:	021a      	lsls	r2, r3, #8
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	430a      	orrs	r2, r1
 80059de:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80059e0:	e002      	b.n	80059e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80059e2:	2301      	movs	r3, #1
 80059e4:	75fb      	strb	r3, [r7, #23]
      break;
 80059e6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	2200      	movs	r2, #0
 80059ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80059f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80059f2:	4618      	mov	r0, r3
 80059f4:	3718      	adds	r7, #24
 80059f6:	46bd      	mov	sp, r7
 80059f8:	bd80      	pop	{r7, pc}
 80059fa:	bf00      	nop

080059fc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80059fc:	b580      	push	{r7, lr}
 80059fe:	b084      	sub	sp, #16
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	6078      	str	r0, [r7, #4]
 8005a04:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005a06:	2300      	movs	r3, #0
 8005a08:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a10:	2b01      	cmp	r3, #1
 8005a12:	d101      	bne.n	8005a18 <HAL_TIM_ConfigClockSource+0x1c>
 8005a14:	2302      	movs	r3, #2
 8005a16:	e0b6      	b.n	8005b86 <HAL_TIM_ConfigClockSource+0x18a>
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2201      	movs	r2, #1
 8005a1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	2202      	movs	r2, #2
 8005a24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	689b      	ldr	r3, [r3, #8]
 8005a2e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005a30:	68bb      	ldr	r3, [r7, #8]
 8005a32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005a36:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005a3a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005a3c:	68bb      	ldr	r3, [r7, #8]
 8005a3e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005a42:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	68ba      	ldr	r2, [r7, #8]
 8005a4a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005a4c:	683b      	ldr	r3, [r7, #0]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a54:	d03e      	beq.n	8005ad4 <HAL_TIM_ConfigClockSource+0xd8>
 8005a56:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a5a:	f200 8087 	bhi.w	8005b6c <HAL_TIM_ConfigClockSource+0x170>
 8005a5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a62:	f000 8086 	beq.w	8005b72 <HAL_TIM_ConfigClockSource+0x176>
 8005a66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a6a:	d87f      	bhi.n	8005b6c <HAL_TIM_ConfigClockSource+0x170>
 8005a6c:	2b70      	cmp	r3, #112	; 0x70
 8005a6e:	d01a      	beq.n	8005aa6 <HAL_TIM_ConfigClockSource+0xaa>
 8005a70:	2b70      	cmp	r3, #112	; 0x70
 8005a72:	d87b      	bhi.n	8005b6c <HAL_TIM_ConfigClockSource+0x170>
 8005a74:	2b60      	cmp	r3, #96	; 0x60
 8005a76:	d050      	beq.n	8005b1a <HAL_TIM_ConfigClockSource+0x11e>
 8005a78:	2b60      	cmp	r3, #96	; 0x60
 8005a7a:	d877      	bhi.n	8005b6c <HAL_TIM_ConfigClockSource+0x170>
 8005a7c:	2b50      	cmp	r3, #80	; 0x50
 8005a7e:	d03c      	beq.n	8005afa <HAL_TIM_ConfigClockSource+0xfe>
 8005a80:	2b50      	cmp	r3, #80	; 0x50
 8005a82:	d873      	bhi.n	8005b6c <HAL_TIM_ConfigClockSource+0x170>
 8005a84:	2b40      	cmp	r3, #64	; 0x40
 8005a86:	d058      	beq.n	8005b3a <HAL_TIM_ConfigClockSource+0x13e>
 8005a88:	2b40      	cmp	r3, #64	; 0x40
 8005a8a:	d86f      	bhi.n	8005b6c <HAL_TIM_ConfigClockSource+0x170>
 8005a8c:	2b30      	cmp	r3, #48	; 0x30
 8005a8e:	d064      	beq.n	8005b5a <HAL_TIM_ConfigClockSource+0x15e>
 8005a90:	2b30      	cmp	r3, #48	; 0x30
 8005a92:	d86b      	bhi.n	8005b6c <HAL_TIM_ConfigClockSource+0x170>
 8005a94:	2b20      	cmp	r3, #32
 8005a96:	d060      	beq.n	8005b5a <HAL_TIM_ConfigClockSource+0x15e>
 8005a98:	2b20      	cmp	r3, #32
 8005a9a:	d867      	bhi.n	8005b6c <HAL_TIM_ConfigClockSource+0x170>
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d05c      	beq.n	8005b5a <HAL_TIM_ConfigClockSource+0x15e>
 8005aa0:	2b10      	cmp	r3, #16
 8005aa2:	d05a      	beq.n	8005b5a <HAL_TIM_ConfigClockSource+0x15e>
 8005aa4:	e062      	b.n	8005b6c <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005aaa:	683b      	ldr	r3, [r7, #0]
 8005aac:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005aae:	683b      	ldr	r3, [r7, #0]
 8005ab0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005ab2:	683b      	ldr	r3, [r7, #0]
 8005ab4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005ab6:	f000 fbf9 	bl	80062ac <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	689b      	ldr	r3, [r3, #8]
 8005ac0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005ac2:	68bb      	ldr	r3, [r7, #8]
 8005ac4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005ac8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	68ba      	ldr	r2, [r7, #8]
 8005ad0:	609a      	str	r2, [r3, #8]
      break;
 8005ad2:	e04f      	b.n	8005b74 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005adc:	683b      	ldr	r3, [r7, #0]
 8005ade:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005ae0:	683b      	ldr	r3, [r7, #0]
 8005ae2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005ae4:	f000 fbe2 	bl	80062ac <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	689a      	ldr	r2, [r3, #8]
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005af6:	609a      	str	r2, [r3, #8]
      break;
 8005af8:	e03c      	b.n	8005b74 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005afe:	683b      	ldr	r3, [r7, #0]
 8005b00:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005b02:	683b      	ldr	r3, [r7, #0]
 8005b04:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b06:	461a      	mov	r2, r3
 8005b08:	f000 fb56 	bl	80061b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	2150      	movs	r1, #80	; 0x50
 8005b12:	4618      	mov	r0, r3
 8005b14:	f000 fbaf 	bl	8006276 <TIM_ITRx_SetConfig>
      break;
 8005b18:	e02c      	b.n	8005b74 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005b1e:	683b      	ldr	r3, [r7, #0]
 8005b20:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005b22:	683b      	ldr	r3, [r7, #0]
 8005b24:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005b26:	461a      	mov	r2, r3
 8005b28:	f000 fb75 	bl	8006216 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	2160      	movs	r1, #96	; 0x60
 8005b32:	4618      	mov	r0, r3
 8005b34:	f000 fb9f 	bl	8006276 <TIM_ITRx_SetConfig>
      break;
 8005b38:	e01c      	b.n	8005b74 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005b3e:	683b      	ldr	r3, [r7, #0]
 8005b40:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005b42:	683b      	ldr	r3, [r7, #0]
 8005b44:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b46:	461a      	mov	r2, r3
 8005b48:	f000 fb36 	bl	80061b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	2140      	movs	r1, #64	; 0x40
 8005b52:	4618      	mov	r0, r3
 8005b54:	f000 fb8f 	bl	8006276 <TIM_ITRx_SetConfig>
      break;
 8005b58:	e00c      	b.n	8005b74 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681a      	ldr	r2, [r3, #0]
 8005b5e:	683b      	ldr	r3, [r7, #0]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	4619      	mov	r1, r3
 8005b64:	4610      	mov	r0, r2
 8005b66:	f000 fb86 	bl	8006276 <TIM_ITRx_SetConfig>
      break;
 8005b6a:	e003      	b.n	8005b74 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8005b6c:	2301      	movs	r3, #1
 8005b6e:	73fb      	strb	r3, [r7, #15]
      break;
 8005b70:	e000      	b.n	8005b74 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8005b72:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	2201      	movs	r2, #1
 8005b78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	2200      	movs	r2, #0
 8005b80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005b84:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b86:	4618      	mov	r0, r3
 8005b88:	3710      	adds	r7, #16
 8005b8a:	46bd      	mov	sp, r7
 8005b8c:	bd80      	pop	{r7, pc}

08005b8e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005b8e:	b480      	push	{r7}
 8005b90:	b083      	sub	sp, #12
 8005b92:	af00      	add	r7, sp, #0
 8005b94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005b96:	bf00      	nop
 8005b98:	370c      	adds	r7, #12
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba0:	4770      	bx	lr

08005ba2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005ba2:	b480      	push	{r7}
 8005ba4:	b083      	sub	sp, #12
 8005ba6:	af00      	add	r7, sp, #0
 8005ba8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005baa:	bf00      	nop
 8005bac:	370c      	adds	r7, #12
 8005bae:	46bd      	mov	sp, r7
 8005bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb4:	4770      	bx	lr

08005bb6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005bb6:	b480      	push	{r7}
 8005bb8:	b083      	sub	sp, #12
 8005bba:	af00      	add	r7, sp, #0
 8005bbc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005bbe:	bf00      	nop
 8005bc0:	370c      	adds	r7, #12
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc8:	4770      	bx	lr

08005bca <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005bca:	b480      	push	{r7}
 8005bcc:	b083      	sub	sp, #12
 8005bce:	af00      	add	r7, sp, #0
 8005bd0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005bd2:	bf00      	nop
 8005bd4:	370c      	adds	r7, #12
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bdc:	4770      	bx	lr
	...

08005be0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005be0:	b480      	push	{r7}
 8005be2:	b085      	sub	sp, #20
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	6078      	str	r0, [r7, #4]
 8005be8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	4a2e      	ldr	r2, [pc, #184]	; (8005cac <TIM_Base_SetConfig+0xcc>)
 8005bf4:	4293      	cmp	r3, r2
 8005bf6:	d007      	beq.n	8005c08 <TIM_Base_SetConfig+0x28>
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005bfe:	d003      	beq.n	8005c08 <TIM_Base_SetConfig+0x28>
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	4a2b      	ldr	r2, [pc, #172]	; (8005cb0 <TIM_Base_SetConfig+0xd0>)
 8005c04:	4293      	cmp	r3, r2
 8005c06:	d108      	bne.n	8005c1a <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c0e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005c10:	683b      	ldr	r3, [r7, #0]
 8005c12:	685b      	ldr	r3, [r3, #4]
 8005c14:	68fa      	ldr	r2, [r7, #12]
 8005c16:	4313      	orrs	r3, r2
 8005c18:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	4a23      	ldr	r2, [pc, #140]	; (8005cac <TIM_Base_SetConfig+0xcc>)
 8005c1e:	4293      	cmp	r3, r2
 8005c20:	d00f      	beq.n	8005c42 <TIM_Base_SetConfig+0x62>
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c28:	d00b      	beq.n	8005c42 <TIM_Base_SetConfig+0x62>
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	4a20      	ldr	r2, [pc, #128]	; (8005cb0 <TIM_Base_SetConfig+0xd0>)
 8005c2e:	4293      	cmp	r3, r2
 8005c30:	d007      	beq.n	8005c42 <TIM_Base_SetConfig+0x62>
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	4a1f      	ldr	r2, [pc, #124]	; (8005cb4 <TIM_Base_SetConfig+0xd4>)
 8005c36:	4293      	cmp	r3, r2
 8005c38:	d003      	beq.n	8005c42 <TIM_Base_SetConfig+0x62>
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	4a1e      	ldr	r2, [pc, #120]	; (8005cb8 <TIM_Base_SetConfig+0xd8>)
 8005c3e:	4293      	cmp	r3, r2
 8005c40:	d108      	bne.n	8005c54 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c48:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005c4a:	683b      	ldr	r3, [r7, #0]
 8005c4c:	68db      	ldr	r3, [r3, #12]
 8005c4e:	68fa      	ldr	r2, [r7, #12]
 8005c50:	4313      	orrs	r3, r2
 8005c52:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005c5a:	683b      	ldr	r3, [r7, #0]
 8005c5c:	695b      	ldr	r3, [r3, #20]
 8005c5e:	4313      	orrs	r3, r2
 8005c60:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	68fa      	ldr	r2, [r7, #12]
 8005c66:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005c68:	683b      	ldr	r3, [r7, #0]
 8005c6a:	689a      	ldr	r2, [r3, #8]
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005c70:	683b      	ldr	r3, [r7, #0]
 8005c72:	681a      	ldr	r2, [r3, #0]
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	4a0c      	ldr	r2, [pc, #48]	; (8005cac <TIM_Base_SetConfig+0xcc>)
 8005c7c:	4293      	cmp	r3, r2
 8005c7e:	d007      	beq.n	8005c90 <TIM_Base_SetConfig+0xb0>
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	4a0c      	ldr	r2, [pc, #48]	; (8005cb4 <TIM_Base_SetConfig+0xd4>)
 8005c84:	4293      	cmp	r3, r2
 8005c86:	d003      	beq.n	8005c90 <TIM_Base_SetConfig+0xb0>
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	4a0b      	ldr	r2, [pc, #44]	; (8005cb8 <TIM_Base_SetConfig+0xd8>)
 8005c8c:	4293      	cmp	r3, r2
 8005c8e:	d103      	bne.n	8005c98 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005c90:	683b      	ldr	r3, [r7, #0]
 8005c92:	691a      	ldr	r2, [r3, #16]
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	2201      	movs	r2, #1
 8005c9c:	615a      	str	r2, [r3, #20]
}
 8005c9e:	bf00      	nop
 8005ca0:	3714      	adds	r7, #20
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca8:	4770      	bx	lr
 8005caa:	bf00      	nop
 8005cac:	40012c00 	.word	0x40012c00
 8005cb0:	40000400 	.word	0x40000400
 8005cb4:	40014000 	.word	0x40014000
 8005cb8:	40014400 	.word	0x40014400

08005cbc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005cbc:	b480      	push	{r7}
 8005cbe:	b087      	sub	sp, #28
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	6078      	str	r0, [r7, #4]
 8005cc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	6a1b      	ldr	r3, [r3, #32]
 8005cca:	f023 0201 	bic.w	r2, r3, #1
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	6a1b      	ldr	r3, [r3, #32]
 8005cd6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	685b      	ldr	r3, [r3, #4]
 8005cdc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	699b      	ldr	r3, [r3, #24]
 8005ce2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005cea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	f023 0303 	bic.w	r3, r3, #3
 8005cf6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005cf8:	683b      	ldr	r3, [r7, #0]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	68fa      	ldr	r2, [r7, #12]
 8005cfe:	4313      	orrs	r3, r2
 8005d00:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005d02:	697b      	ldr	r3, [r7, #20]
 8005d04:	f023 0302 	bic.w	r3, r3, #2
 8005d08:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005d0a:	683b      	ldr	r3, [r7, #0]
 8005d0c:	689b      	ldr	r3, [r3, #8]
 8005d0e:	697a      	ldr	r2, [r7, #20]
 8005d10:	4313      	orrs	r3, r2
 8005d12:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	4a24      	ldr	r2, [pc, #144]	; (8005da8 <TIM_OC1_SetConfig+0xec>)
 8005d18:	4293      	cmp	r3, r2
 8005d1a:	d007      	beq.n	8005d2c <TIM_OC1_SetConfig+0x70>
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	4a23      	ldr	r2, [pc, #140]	; (8005dac <TIM_OC1_SetConfig+0xf0>)
 8005d20:	4293      	cmp	r3, r2
 8005d22:	d003      	beq.n	8005d2c <TIM_OC1_SetConfig+0x70>
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	4a22      	ldr	r2, [pc, #136]	; (8005db0 <TIM_OC1_SetConfig+0xf4>)
 8005d28:	4293      	cmp	r3, r2
 8005d2a:	d10c      	bne.n	8005d46 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005d2c:	697b      	ldr	r3, [r7, #20]
 8005d2e:	f023 0308 	bic.w	r3, r3, #8
 8005d32:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005d34:	683b      	ldr	r3, [r7, #0]
 8005d36:	68db      	ldr	r3, [r3, #12]
 8005d38:	697a      	ldr	r2, [r7, #20]
 8005d3a:	4313      	orrs	r3, r2
 8005d3c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005d3e:	697b      	ldr	r3, [r7, #20]
 8005d40:	f023 0304 	bic.w	r3, r3, #4
 8005d44:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	4a17      	ldr	r2, [pc, #92]	; (8005da8 <TIM_OC1_SetConfig+0xec>)
 8005d4a:	4293      	cmp	r3, r2
 8005d4c:	d007      	beq.n	8005d5e <TIM_OC1_SetConfig+0xa2>
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	4a16      	ldr	r2, [pc, #88]	; (8005dac <TIM_OC1_SetConfig+0xf0>)
 8005d52:	4293      	cmp	r3, r2
 8005d54:	d003      	beq.n	8005d5e <TIM_OC1_SetConfig+0xa2>
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	4a15      	ldr	r2, [pc, #84]	; (8005db0 <TIM_OC1_SetConfig+0xf4>)
 8005d5a:	4293      	cmp	r3, r2
 8005d5c:	d111      	bne.n	8005d82 <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005d5e:	693b      	ldr	r3, [r7, #16]
 8005d60:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005d64:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005d66:	693b      	ldr	r3, [r7, #16]
 8005d68:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005d6c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005d6e:	683b      	ldr	r3, [r7, #0]
 8005d70:	695b      	ldr	r3, [r3, #20]
 8005d72:	693a      	ldr	r2, [r7, #16]
 8005d74:	4313      	orrs	r3, r2
 8005d76:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005d78:	683b      	ldr	r3, [r7, #0]
 8005d7a:	699b      	ldr	r3, [r3, #24]
 8005d7c:	693a      	ldr	r2, [r7, #16]
 8005d7e:	4313      	orrs	r3, r2
 8005d80:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	693a      	ldr	r2, [r7, #16]
 8005d86:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	68fa      	ldr	r2, [r7, #12]
 8005d8c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005d8e:	683b      	ldr	r3, [r7, #0]
 8005d90:	685a      	ldr	r2, [r3, #4]
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	697a      	ldr	r2, [r7, #20]
 8005d9a:	621a      	str	r2, [r3, #32]
}
 8005d9c:	bf00      	nop
 8005d9e:	371c      	adds	r7, #28
 8005da0:	46bd      	mov	sp, r7
 8005da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da6:	4770      	bx	lr
 8005da8:	40012c00 	.word	0x40012c00
 8005dac:	40014000 	.word	0x40014000
 8005db0:	40014400 	.word	0x40014400

08005db4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005db4:	b480      	push	{r7}
 8005db6:	b087      	sub	sp, #28
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
 8005dbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	6a1b      	ldr	r3, [r3, #32]
 8005dc2:	f023 0210 	bic.w	r2, r3, #16
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	6a1b      	ldr	r3, [r3, #32]
 8005dce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	685b      	ldr	r3, [r3, #4]
 8005dd4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	699b      	ldr	r3, [r3, #24]
 8005dda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005de2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005de6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005dee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005df0:	683b      	ldr	r3, [r7, #0]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	021b      	lsls	r3, r3, #8
 8005df6:	68fa      	ldr	r2, [r7, #12]
 8005df8:	4313      	orrs	r3, r2
 8005dfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005dfc:	697b      	ldr	r3, [r7, #20]
 8005dfe:	f023 0320 	bic.w	r3, r3, #32
 8005e02:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005e04:	683b      	ldr	r3, [r7, #0]
 8005e06:	689b      	ldr	r3, [r3, #8]
 8005e08:	011b      	lsls	r3, r3, #4
 8005e0a:	697a      	ldr	r2, [r7, #20]
 8005e0c:	4313      	orrs	r3, r2
 8005e0e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	4a22      	ldr	r2, [pc, #136]	; (8005e9c <TIM_OC2_SetConfig+0xe8>)
 8005e14:	4293      	cmp	r3, r2
 8005e16:	d10d      	bne.n	8005e34 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005e18:	697b      	ldr	r3, [r7, #20]
 8005e1a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005e1e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005e20:	683b      	ldr	r3, [r7, #0]
 8005e22:	68db      	ldr	r3, [r3, #12]
 8005e24:	011b      	lsls	r3, r3, #4
 8005e26:	697a      	ldr	r2, [r7, #20]
 8005e28:	4313      	orrs	r3, r2
 8005e2a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005e2c:	697b      	ldr	r3, [r7, #20]
 8005e2e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e32:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	4a19      	ldr	r2, [pc, #100]	; (8005e9c <TIM_OC2_SetConfig+0xe8>)
 8005e38:	4293      	cmp	r3, r2
 8005e3a:	d007      	beq.n	8005e4c <TIM_OC2_SetConfig+0x98>
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	4a18      	ldr	r2, [pc, #96]	; (8005ea0 <TIM_OC2_SetConfig+0xec>)
 8005e40:	4293      	cmp	r3, r2
 8005e42:	d003      	beq.n	8005e4c <TIM_OC2_SetConfig+0x98>
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	4a17      	ldr	r2, [pc, #92]	; (8005ea4 <TIM_OC2_SetConfig+0xf0>)
 8005e48:	4293      	cmp	r3, r2
 8005e4a:	d113      	bne.n	8005e74 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005e4c:	693b      	ldr	r3, [r7, #16]
 8005e4e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005e52:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005e54:	693b      	ldr	r3, [r7, #16]
 8005e56:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005e5a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005e5c:	683b      	ldr	r3, [r7, #0]
 8005e5e:	695b      	ldr	r3, [r3, #20]
 8005e60:	009b      	lsls	r3, r3, #2
 8005e62:	693a      	ldr	r2, [r7, #16]
 8005e64:	4313      	orrs	r3, r2
 8005e66:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005e68:	683b      	ldr	r3, [r7, #0]
 8005e6a:	699b      	ldr	r3, [r3, #24]
 8005e6c:	009b      	lsls	r3, r3, #2
 8005e6e:	693a      	ldr	r2, [r7, #16]
 8005e70:	4313      	orrs	r3, r2
 8005e72:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	693a      	ldr	r2, [r7, #16]
 8005e78:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	68fa      	ldr	r2, [r7, #12]
 8005e7e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005e80:	683b      	ldr	r3, [r7, #0]
 8005e82:	685a      	ldr	r2, [r3, #4]
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	697a      	ldr	r2, [r7, #20]
 8005e8c:	621a      	str	r2, [r3, #32]
}
 8005e8e:	bf00      	nop
 8005e90:	371c      	adds	r7, #28
 8005e92:	46bd      	mov	sp, r7
 8005e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e98:	4770      	bx	lr
 8005e9a:	bf00      	nop
 8005e9c:	40012c00 	.word	0x40012c00
 8005ea0:	40014000 	.word	0x40014000
 8005ea4:	40014400 	.word	0x40014400

08005ea8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005ea8:	b480      	push	{r7}
 8005eaa:	b087      	sub	sp, #28
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	6078      	str	r0, [r7, #4]
 8005eb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	6a1b      	ldr	r3, [r3, #32]
 8005eb6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	6a1b      	ldr	r3, [r3, #32]
 8005ec2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	685b      	ldr	r3, [r3, #4]
 8005ec8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	69db      	ldr	r3, [r3, #28]
 8005ece:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005ed6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005eda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	f023 0303 	bic.w	r3, r3, #3
 8005ee2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005ee4:	683b      	ldr	r3, [r7, #0]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	68fa      	ldr	r2, [r7, #12]
 8005eea:	4313      	orrs	r3, r2
 8005eec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005eee:	697b      	ldr	r3, [r7, #20]
 8005ef0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005ef4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005ef6:	683b      	ldr	r3, [r7, #0]
 8005ef8:	689b      	ldr	r3, [r3, #8]
 8005efa:	021b      	lsls	r3, r3, #8
 8005efc:	697a      	ldr	r2, [r7, #20]
 8005efe:	4313      	orrs	r3, r2
 8005f00:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	4a21      	ldr	r2, [pc, #132]	; (8005f8c <TIM_OC3_SetConfig+0xe4>)
 8005f06:	4293      	cmp	r3, r2
 8005f08:	d10d      	bne.n	8005f26 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005f0a:	697b      	ldr	r3, [r7, #20]
 8005f0c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005f10:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005f12:	683b      	ldr	r3, [r7, #0]
 8005f14:	68db      	ldr	r3, [r3, #12]
 8005f16:	021b      	lsls	r3, r3, #8
 8005f18:	697a      	ldr	r2, [r7, #20]
 8005f1a:	4313      	orrs	r3, r2
 8005f1c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005f1e:	697b      	ldr	r3, [r7, #20]
 8005f20:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005f24:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	4a18      	ldr	r2, [pc, #96]	; (8005f8c <TIM_OC3_SetConfig+0xe4>)
 8005f2a:	4293      	cmp	r3, r2
 8005f2c:	d007      	beq.n	8005f3e <TIM_OC3_SetConfig+0x96>
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	4a17      	ldr	r2, [pc, #92]	; (8005f90 <TIM_OC3_SetConfig+0xe8>)
 8005f32:	4293      	cmp	r3, r2
 8005f34:	d003      	beq.n	8005f3e <TIM_OC3_SetConfig+0x96>
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	4a16      	ldr	r2, [pc, #88]	; (8005f94 <TIM_OC3_SetConfig+0xec>)
 8005f3a:	4293      	cmp	r3, r2
 8005f3c:	d113      	bne.n	8005f66 <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005f3e:	693b      	ldr	r3, [r7, #16]
 8005f40:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005f44:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005f46:	693b      	ldr	r3, [r7, #16]
 8005f48:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005f4c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005f4e:	683b      	ldr	r3, [r7, #0]
 8005f50:	695b      	ldr	r3, [r3, #20]
 8005f52:	011b      	lsls	r3, r3, #4
 8005f54:	693a      	ldr	r2, [r7, #16]
 8005f56:	4313      	orrs	r3, r2
 8005f58:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005f5a:	683b      	ldr	r3, [r7, #0]
 8005f5c:	699b      	ldr	r3, [r3, #24]
 8005f5e:	011b      	lsls	r3, r3, #4
 8005f60:	693a      	ldr	r2, [r7, #16]
 8005f62:	4313      	orrs	r3, r2
 8005f64:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	693a      	ldr	r2, [r7, #16]
 8005f6a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	68fa      	ldr	r2, [r7, #12]
 8005f70:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005f72:	683b      	ldr	r3, [r7, #0]
 8005f74:	685a      	ldr	r2, [r3, #4]
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	697a      	ldr	r2, [r7, #20]
 8005f7e:	621a      	str	r2, [r3, #32]
}
 8005f80:	bf00      	nop
 8005f82:	371c      	adds	r7, #28
 8005f84:	46bd      	mov	sp, r7
 8005f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8a:	4770      	bx	lr
 8005f8c:	40012c00 	.word	0x40012c00
 8005f90:	40014000 	.word	0x40014000
 8005f94:	40014400 	.word	0x40014400

08005f98 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005f98:	b480      	push	{r7}
 8005f9a:	b087      	sub	sp, #28
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	6078      	str	r0, [r7, #4]
 8005fa0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	6a1b      	ldr	r3, [r3, #32]
 8005fa6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	6a1b      	ldr	r3, [r3, #32]
 8005fb2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	685b      	ldr	r3, [r3, #4]
 8005fb8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	69db      	ldr	r3, [r3, #28]
 8005fbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005fc6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005fca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005fd2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005fd4:	683b      	ldr	r3, [r7, #0]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	021b      	lsls	r3, r3, #8
 8005fda:	68fa      	ldr	r2, [r7, #12]
 8005fdc:	4313      	orrs	r3, r2
 8005fde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005fe0:	693b      	ldr	r3, [r7, #16]
 8005fe2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005fe6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005fe8:	683b      	ldr	r3, [r7, #0]
 8005fea:	689b      	ldr	r3, [r3, #8]
 8005fec:	031b      	lsls	r3, r3, #12
 8005fee:	693a      	ldr	r2, [r7, #16]
 8005ff0:	4313      	orrs	r3, r2
 8005ff2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	4a14      	ldr	r2, [pc, #80]	; (8006048 <TIM_OC4_SetConfig+0xb0>)
 8005ff8:	4293      	cmp	r3, r2
 8005ffa:	d007      	beq.n	800600c <TIM_OC4_SetConfig+0x74>
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	4a13      	ldr	r2, [pc, #76]	; (800604c <TIM_OC4_SetConfig+0xb4>)
 8006000:	4293      	cmp	r3, r2
 8006002:	d003      	beq.n	800600c <TIM_OC4_SetConfig+0x74>
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	4a12      	ldr	r2, [pc, #72]	; (8006050 <TIM_OC4_SetConfig+0xb8>)
 8006008:	4293      	cmp	r3, r2
 800600a:	d109      	bne.n	8006020 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800600c:	697b      	ldr	r3, [r7, #20]
 800600e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006012:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006014:	683b      	ldr	r3, [r7, #0]
 8006016:	695b      	ldr	r3, [r3, #20]
 8006018:	019b      	lsls	r3, r3, #6
 800601a:	697a      	ldr	r2, [r7, #20]
 800601c:	4313      	orrs	r3, r2
 800601e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	697a      	ldr	r2, [r7, #20]
 8006024:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	68fa      	ldr	r2, [r7, #12]
 800602a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800602c:	683b      	ldr	r3, [r7, #0]
 800602e:	685a      	ldr	r2, [r3, #4]
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	693a      	ldr	r2, [r7, #16]
 8006038:	621a      	str	r2, [r3, #32]
}
 800603a:	bf00      	nop
 800603c:	371c      	adds	r7, #28
 800603e:	46bd      	mov	sp, r7
 8006040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006044:	4770      	bx	lr
 8006046:	bf00      	nop
 8006048:	40012c00 	.word	0x40012c00
 800604c:	40014000 	.word	0x40014000
 8006050:	40014400 	.word	0x40014400

08006054 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006054:	b480      	push	{r7}
 8006056:	b087      	sub	sp, #28
 8006058:	af00      	add	r7, sp, #0
 800605a:	6078      	str	r0, [r7, #4]
 800605c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	6a1b      	ldr	r3, [r3, #32]
 8006062:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	6a1b      	ldr	r3, [r3, #32]
 800606e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	685b      	ldr	r3, [r3, #4]
 8006074:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800607a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006082:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006086:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006088:	683b      	ldr	r3, [r7, #0]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	68fa      	ldr	r2, [r7, #12]
 800608e:	4313      	orrs	r3, r2
 8006090:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006092:	693b      	ldr	r3, [r7, #16]
 8006094:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006098:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800609a:	683b      	ldr	r3, [r7, #0]
 800609c:	689b      	ldr	r3, [r3, #8]
 800609e:	041b      	lsls	r3, r3, #16
 80060a0:	693a      	ldr	r2, [r7, #16]
 80060a2:	4313      	orrs	r3, r2
 80060a4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	4a13      	ldr	r2, [pc, #76]	; (80060f8 <TIM_OC5_SetConfig+0xa4>)
 80060aa:	4293      	cmp	r3, r2
 80060ac:	d007      	beq.n	80060be <TIM_OC5_SetConfig+0x6a>
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	4a12      	ldr	r2, [pc, #72]	; (80060fc <TIM_OC5_SetConfig+0xa8>)
 80060b2:	4293      	cmp	r3, r2
 80060b4:	d003      	beq.n	80060be <TIM_OC5_SetConfig+0x6a>
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	4a11      	ldr	r2, [pc, #68]	; (8006100 <TIM_OC5_SetConfig+0xac>)
 80060ba:	4293      	cmp	r3, r2
 80060bc:	d109      	bne.n	80060d2 <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80060be:	697b      	ldr	r3, [r7, #20]
 80060c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80060c4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80060c6:	683b      	ldr	r3, [r7, #0]
 80060c8:	695b      	ldr	r3, [r3, #20]
 80060ca:	021b      	lsls	r3, r3, #8
 80060cc:	697a      	ldr	r2, [r7, #20]
 80060ce:	4313      	orrs	r3, r2
 80060d0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	697a      	ldr	r2, [r7, #20]
 80060d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	68fa      	ldr	r2, [r7, #12]
 80060dc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80060de:	683b      	ldr	r3, [r7, #0]
 80060e0:	685a      	ldr	r2, [r3, #4]
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	693a      	ldr	r2, [r7, #16]
 80060ea:	621a      	str	r2, [r3, #32]
}
 80060ec:	bf00      	nop
 80060ee:	371c      	adds	r7, #28
 80060f0:	46bd      	mov	sp, r7
 80060f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f6:	4770      	bx	lr
 80060f8:	40012c00 	.word	0x40012c00
 80060fc:	40014000 	.word	0x40014000
 8006100:	40014400 	.word	0x40014400

08006104 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006104:	b480      	push	{r7}
 8006106:	b087      	sub	sp, #28
 8006108:	af00      	add	r7, sp, #0
 800610a:	6078      	str	r0, [r7, #4]
 800610c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	6a1b      	ldr	r3, [r3, #32]
 8006112:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	6a1b      	ldr	r3, [r3, #32]
 800611e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	685b      	ldr	r3, [r3, #4]
 8006124:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800612a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006132:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006136:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006138:	683b      	ldr	r3, [r7, #0]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	021b      	lsls	r3, r3, #8
 800613e:	68fa      	ldr	r2, [r7, #12]
 8006140:	4313      	orrs	r3, r2
 8006142:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006144:	693b      	ldr	r3, [r7, #16]
 8006146:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800614a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800614c:	683b      	ldr	r3, [r7, #0]
 800614e:	689b      	ldr	r3, [r3, #8]
 8006150:	051b      	lsls	r3, r3, #20
 8006152:	693a      	ldr	r2, [r7, #16]
 8006154:	4313      	orrs	r3, r2
 8006156:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	4a14      	ldr	r2, [pc, #80]	; (80061ac <TIM_OC6_SetConfig+0xa8>)
 800615c:	4293      	cmp	r3, r2
 800615e:	d007      	beq.n	8006170 <TIM_OC6_SetConfig+0x6c>
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	4a13      	ldr	r2, [pc, #76]	; (80061b0 <TIM_OC6_SetConfig+0xac>)
 8006164:	4293      	cmp	r3, r2
 8006166:	d003      	beq.n	8006170 <TIM_OC6_SetConfig+0x6c>
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	4a12      	ldr	r2, [pc, #72]	; (80061b4 <TIM_OC6_SetConfig+0xb0>)
 800616c:	4293      	cmp	r3, r2
 800616e:	d109      	bne.n	8006184 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006170:	697b      	ldr	r3, [r7, #20]
 8006172:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006176:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006178:	683b      	ldr	r3, [r7, #0]
 800617a:	695b      	ldr	r3, [r3, #20]
 800617c:	029b      	lsls	r3, r3, #10
 800617e:	697a      	ldr	r2, [r7, #20]
 8006180:	4313      	orrs	r3, r2
 8006182:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	697a      	ldr	r2, [r7, #20]
 8006188:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	68fa      	ldr	r2, [r7, #12]
 800618e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006190:	683b      	ldr	r3, [r7, #0]
 8006192:	685a      	ldr	r2, [r3, #4]
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	693a      	ldr	r2, [r7, #16]
 800619c:	621a      	str	r2, [r3, #32]
}
 800619e:	bf00      	nop
 80061a0:	371c      	adds	r7, #28
 80061a2:	46bd      	mov	sp, r7
 80061a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a8:	4770      	bx	lr
 80061aa:	bf00      	nop
 80061ac:	40012c00 	.word	0x40012c00
 80061b0:	40014000 	.word	0x40014000
 80061b4:	40014400 	.word	0x40014400

080061b8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80061b8:	b480      	push	{r7}
 80061ba:	b087      	sub	sp, #28
 80061bc:	af00      	add	r7, sp, #0
 80061be:	60f8      	str	r0, [r7, #12]
 80061c0:	60b9      	str	r1, [r7, #8]
 80061c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	6a1b      	ldr	r3, [r3, #32]
 80061c8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	6a1b      	ldr	r3, [r3, #32]
 80061ce:	f023 0201 	bic.w	r2, r3, #1
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	699b      	ldr	r3, [r3, #24]
 80061da:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80061dc:	693b      	ldr	r3, [r7, #16]
 80061de:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80061e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	011b      	lsls	r3, r3, #4
 80061e8:	693a      	ldr	r2, [r7, #16]
 80061ea:	4313      	orrs	r3, r2
 80061ec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80061ee:	697b      	ldr	r3, [r7, #20]
 80061f0:	f023 030a 	bic.w	r3, r3, #10
 80061f4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80061f6:	697a      	ldr	r2, [r7, #20]
 80061f8:	68bb      	ldr	r3, [r7, #8]
 80061fa:	4313      	orrs	r3, r2
 80061fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	693a      	ldr	r2, [r7, #16]
 8006202:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	697a      	ldr	r2, [r7, #20]
 8006208:	621a      	str	r2, [r3, #32]
}
 800620a:	bf00      	nop
 800620c:	371c      	adds	r7, #28
 800620e:	46bd      	mov	sp, r7
 8006210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006214:	4770      	bx	lr

08006216 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006216:	b480      	push	{r7}
 8006218:	b087      	sub	sp, #28
 800621a:	af00      	add	r7, sp, #0
 800621c:	60f8      	str	r0, [r7, #12]
 800621e:	60b9      	str	r1, [r7, #8]
 8006220:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	6a1b      	ldr	r3, [r3, #32]
 8006226:	f023 0210 	bic.w	r2, r3, #16
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	699b      	ldr	r3, [r3, #24]
 8006232:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	6a1b      	ldr	r3, [r3, #32]
 8006238:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800623a:	697b      	ldr	r3, [r7, #20]
 800623c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006240:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	031b      	lsls	r3, r3, #12
 8006246:	697a      	ldr	r2, [r7, #20]
 8006248:	4313      	orrs	r3, r2
 800624a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800624c:	693b      	ldr	r3, [r7, #16]
 800624e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006252:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006254:	68bb      	ldr	r3, [r7, #8]
 8006256:	011b      	lsls	r3, r3, #4
 8006258:	693a      	ldr	r2, [r7, #16]
 800625a:	4313      	orrs	r3, r2
 800625c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	697a      	ldr	r2, [r7, #20]
 8006262:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	693a      	ldr	r2, [r7, #16]
 8006268:	621a      	str	r2, [r3, #32]
}
 800626a:	bf00      	nop
 800626c:	371c      	adds	r7, #28
 800626e:	46bd      	mov	sp, r7
 8006270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006274:	4770      	bx	lr

08006276 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006276:	b480      	push	{r7}
 8006278:	b085      	sub	sp, #20
 800627a:	af00      	add	r7, sp, #0
 800627c:	6078      	str	r0, [r7, #4]
 800627e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	689b      	ldr	r3, [r3, #8]
 8006284:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800628c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800628e:	683a      	ldr	r2, [r7, #0]
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	4313      	orrs	r3, r2
 8006294:	f043 0307 	orr.w	r3, r3, #7
 8006298:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	68fa      	ldr	r2, [r7, #12]
 800629e:	609a      	str	r2, [r3, #8]
}
 80062a0:	bf00      	nop
 80062a2:	3714      	adds	r7, #20
 80062a4:	46bd      	mov	sp, r7
 80062a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062aa:	4770      	bx	lr

080062ac <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80062ac:	b480      	push	{r7}
 80062ae:	b087      	sub	sp, #28
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	60f8      	str	r0, [r7, #12]
 80062b4:	60b9      	str	r1, [r7, #8]
 80062b6:	607a      	str	r2, [r7, #4]
 80062b8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	689b      	ldr	r3, [r3, #8]
 80062be:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80062c0:	697b      	ldr	r3, [r7, #20]
 80062c2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80062c6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80062c8:	683b      	ldr	r3, [r7, #0]
 80062ca:	021a      	lsls	r2, r3, #8
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	431a      	orrs	r2, r3
 80062d0:	68bb      	ldr	r3, [r7, #8]
 80062d2:	4313      	orrs	r3, r2
 80062d4:	697a      	ldr	r2, [r7, #20]
 80062d6:	4313      	orrs	r3, r2
 80062d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	697a      	ldr	r2, [r7, #20]
 80062de:	609a      	str	r2, [r3, #8]
}
 80062e0:	bf00      	nop
 80062e2:	371c      	adds	r7, #28
 80062e4:	46bd      	mov	sp, r7
 80062e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ea:	4770      	bx	lr

080062ec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80062ec:	b480      	push	{r7}
 80062ee:	b085      	sub	sp, #20
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	6078      	str	r0, [r7, #4]
 80062f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80062fc:	2b01      	cmp	r3, #1
 80062fe:	d101      	bne.n	8006304 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006300:	2302      	movs	r3, #2
 8006302:	e054      	b.n	80063ae <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2201      	movs	r2, #1
 8006308:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	2202      	movs	r2, #2
 8006310:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	685b      	ldr	r3, [r3, #4]
 800631a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	689b      	ldr	r3, [r3, #8]
 8006322:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	4a24      	ldr	r2, [pc, #144]	; (80063bc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800632a:	4293      	cmp	r3, r2
 800632c:	d108      	bne.n	8006340 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006334:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006336:	683b      	ldr	r3, [r7, #0]
 8006338:	685b      	ldr	r3, [r3, #4]
 800633a:	68fa      	ldr	r2, [r7, #12]
 800633c:	4313      	orrs	r3, r2
 800633e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006346:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006348:	683b      	ldr	r3, [r7, #0]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	68fa      	ldr	r2, [r7, #12]
 800634e:	4313      	orrs	r3, r2
 8006350:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	68fa      	ldr	r2, [r7, #12]
 8006358:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	4a17      	ldr	r2, [pc, #92]	; (80063bc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006360:	4293      	cmp	r3, r2
 8006362:	d00e      	beq.n	8006382 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800636c:	d009      	beq.n	8006382 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	4a13      	ldr	r2, [pc, #76]	; (80063c0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006374:	4293      	cmp	r3, r2
 8006376:	d004      	beq.n	8006382 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	4a11      	ldr	r2, [pc, #68]	; (80063c4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800637e:	4293      	cmp	r3, r2
 8006380:	d10c      	bne.n	800639c <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006382:	68bb      	ldr	r3, [r7, #8]
 8006384:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006388:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800638a:	683b      	ldr	r3, [r7, #0]
 800638c:	689b      	ldr	r3, [r3, #8]
 800638e:	68ba      	ldr	r2, [r7, #8]
 8006390:	4313      	orrs	r3, r2
 8006392:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	68ba      	ldr	r2, [r7, #8]
 800639a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	2201      	movs	r2, #1
 80063a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	2200      	movs	r2, #0
 80063a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80063ac:	2300      	movs	r3, #0
}
 80063ae:	4618      	mov	r0, r3
 80063b0:	3714      	adds	r7, #20
 80063b2:	46bd      	mov	sp, r7
 80063b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b8:	4770      	bx	lr
 80063ba:	bf00      	nop
 80063bc:	40012c00 	.word	0x40012c00
 80063c0:	40000400 	.word	0x40000400
 80063c4:	40014000 	.word	0x40014000

080063c8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80063c8:	b480      	push	{r7}
 80063ca:	b085      	sub	sp, #20
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	6078      	str	r0, [r7, #4]
 80063d0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80063d2:	2300      	movs	r3, #0
 80063d4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80063dc:	2b01      	cmp	r3, #1
 80063de:	d101      	bne.n	80063e4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80063e0:	2302      	movs	r3, #2
 80063e2:	e060      	b.n	80064a6 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	2201      	movs	r2, #1
 80063e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80063f2:	683b      	ldr	r3, [r7, #0]
 80063f4:	68db      	ldr	r3, [r3, #12]
 80063f6:	4313      	orrs	r3, r2
 80063f8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006400:	683b      	ldr	r3, [r7, #0]
 8006402:	689b      	ldr	r3, [r3, #8]
 8006404:	4313      	orrs	r3, r2
 8006406:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800640e:	683b      	ldr	r3, [r7, #0]
 8006410:	685b      	ldr	r3, [r3, #4]
 8006412:	4313      	orrs	r3, r2
 8006414:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800641c:	683b      	ldr	r3, [r7, #0]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	4313      	orrs	r3, r2
 8006422:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800642a:	683b      	ldr	r3, [r7, #0]
 800642c:	691b      	ldr	r3, [r3, #16]
 800642e:	4313      	orrs	r3, r2
 8006430:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006438:	683b      	ldr	r3, [r7, #0]
 800643a:	695b      	ldr	r3, [r3, #20]
 800643c:	4313      	orrs	r3, r2
 800643e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006446:	683b      	ldr	r3, [r7, #0]
 8006448:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800644a:	4313      	orrs	r3, r2
 800644c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8006454:	683b      	ldr	r3, [r7, #0]
 8006456:	699b      	ldr	r3, [r3, #24]
 8006458:	041b      	lsls	r3, r3, #16
 800645a:	4313      	orrs	r3, r2
 800645c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	4a14      	ldr	r2, [pc, #80]	; (80064b4 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8006464:	4293      	cmp	r3, r2
 8006466:	d115      	bne.n	8006494 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800646e:	683b      	ldr	r3, [r7, #0]
 8006470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006472:	051b      	lsls	r3, r3, #20
 8006474:	4313      	orrs	r3, r2
 8006476:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800647e:	683b      	ldr	r3, [r7, #0]
 8006480:	69db      	ldr	r3, [r3, #28]
 8006482:	4313      	orrs	r3, r2
 8006484:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800648c:	683b      	ldr	r3, [r7, #0]
 800648e:	6a1b      	ldr	r3, [r3, #32]
 8006490:	4313      	orrs	r3, r2
 8006492:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	68fa      	ldr	r2, [r7, #12]
 800649a:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	2200      	movs	r2, #0
 80064a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80064a4:	2300      	movs	r3, #0
}
 80064a6:	4618      	mov	r0, r3
 80064a8:	3714      	adds	r7, #20
 80064aa:	46bd      	mov	sp, r7
 80064ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b0:	4770      	bx	lr
 80064b2:	bf00      	nop
 80064b4:	40012c00 	.word	0x40012c00

080064b8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80064b8:	b480      	push	{r7}
 80064ba:	b083      	sub	sp, #12
 80064bc:	af00      	add	r7, sp, #0
 80064be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80064c0:	bf00      	nop
 80064c2:	370c      	adds	r7, #12
 80064c4:	46bd      	mov	sp, r7
 80064c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ca:	4770      	bx	lr

080064cc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80064cc:	b480      	push	{r7}
 80064ce:	b083      	sub	sp, #12
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80064d4:	bf00      	nop
 80064d6:	370c      	adds	r7, #12
 80064d8:	46bd      	mov	sp, r7
 80064da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064de:	4770      	bx	lr

080064e0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80064e0:	b480      	push	{r7}
 80064e2:	b083      	sub	sp, #12
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80064e8:	bf00      	nop
 80064ea:	370c      	adds	r7, #12
 80064ec:	46bd      	mov	sp, r7
 80064ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f2:	4770      	bx	lr

080064f4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80064f4:	b580      	push	{r7, lr}
 80064f6:	b082      	sub	sp, #8
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d101      	bne.n	8006506 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006502:	2301      	movs	r3, #1
 8006504:	e040      	b.n	8006588 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800650a:	2b00      	cmp	r3, #0
 800650c:	d106      	bne.n	800651c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	2200      	movs	r2, #0
 8006512:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006516:	6878      	ldr	r0, [r7, #4]
 8006518:	f7fb fdc0 	bl	800209c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	2224      	movs	r2, #36	; 0x24
 8006520:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	681a      	ldr	r2, [r3, #0]
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	f022 0201 	bic.w	r2, r2, #1
 8006530:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006532:	6878      	ldr	r0, [r7, #4]
 8006534:	f000 fbde 	bl	8006cf4 <UART_SetConfig>
 8006538:	4603      	mov	r3, r0
 800653a:	2b01      	cmp	r3, #1
 800653c:	d101      	bne.n	8006542 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800653e:	2301      	movs	r3, #1
 8006540:	e022      	b.n	8006588 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006546:	2b00      	cmp	r3, #0
 8006548:	d002      	beq.n	8006550 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800654a:	6878      	ldr	r0, [r7, #4]
 800654c:	f000 fe58 	bl	8007200 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	685a      	ldr	r2, [r3, #4]
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800655e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	689a      	ldr	r2, [r3, #8]
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800656e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	681a      	ldr	r2, [r3, #0]
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	f042 0201 	orr.w	r2, r2, #1
 800657e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006580:	6878      	ldr	r0, [r7, #4]
 8006582:	f000 fedf 	bl	8007344 <UART_CheckIdleState>
 8006586:	4603      	mov	r3, r0
}
 8006588:	4618      	mov	r0, r3
 800658a:	3708      	adds	r7, #8
 800658c:	46bd      	mov	sp, r7
 800658e:	bd80      	pop	{r7, pc}

08006590 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8006590:	b480      	push	{r7}
 8006592:	b08b      	sub	sp, #44	; 0x2c
 8006594:	af00      	add	r7, sp, #0
 8006596:	60f8      	str	r0, [r7, #12]
 8006598:	60b9      	str	r1, [r7, #8]
 800659a:	4613      	mov	r3, r2
 800659c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80065a2:	2b20      	cmp	r3, #32
 80065a4:	d156      	bne.n	8006654 <HAL_UART_Transmit_IT+0xc4>
  {
    if ((pData == NULL) || (Size == 0U))
 80065a6:	68bb      	ldr	r3, [r7, #8]
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d002      	beq.n	80065b2 <HAL_UART_Transmit_IT+0x22>
 80065ac:	88fb      	ldrh	r3, [r7, #6]
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d101      	bne.n	80065b6 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 80065b2:	2301      	movs	r3, #1
 80065b4:	e04f      	b.n	8006656 <HAL_UART_Transmit_IT+0xc6>
    }

    __HAL_LOCK(huart);
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80065bc:	2b01      	cmp	r3, #1
 80065be:	d101      	bne.n	80065c4 <HAL_UART_Transmit_IT+0x34>
 80065c0:	2302      	movs	r3, #2
 80065c2:	e048      	b.n	8006656 <HAL_UART_Transmit_IT+0xc6>
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	2201      	movs	r2, #1
 80065c8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	68ba      	ldr	r2, [r7, #8]
 80065d0:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	88fa      	ldrh	r2, [r7, #6]
 80065d6:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	88fa      	ldrh	r2, [r7, #6]
 80065de:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	2200      	movs	r2, #0
 80065e6:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	2200      	movs	r2, #0
 80065ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	2221      	movs	r2, #33	; 0x21
 80065f4:	679a      	str	r2, [r3, #120]	; 0x78
      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	689b      	ldr	r3, [r3, #8]
 80065fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065fe:	d107      	bne.n	8006610 <HAL_UART_Transmit_IT+0x80>
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	691b      	ldr	r3, [r3, #16]
 8006604:	2b00      	cmp	r3, #0
 8006606:	d103      	bne.n	8006610 <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	4a16      	ldr	r2, [pc, #88]	; (8006664 <HAL_UART_Transmit_IT+0xd4>)
 800660c:	669a      	str	r2, [r3, #104]	; 0x68
 800660e:	e002      	b.n	8006616 <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	4a15      	ldr	r2, [pc, #84]	; (8006668 <HAL_UART_Transmit_IT+0xd8>)
 8006614:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	2200      	movs	r2, #0
 800661a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006624:	697b      	ldr	r3, [r7, #20]
 8006626:	e853 3f00 	ldrex	r3, [r3]
 800662a:	613b      	str	r3, [r7, #16]
   return(result);
 800662c:	693b      	ldr	r3, [r7, #16]
 800662e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006632:	627b      	str	r3, [r7, #36]	; 0x24
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	461a      	mov	r2, r3
 800663a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800663c:	623b      	str	r3, [r7, #32]
 800663e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006640:	69f9      	ldr	r1, [r7, #28]
 8006642:	6a3a      	ldr	r2, [r7, #32]
 8006644:	e841 2300 	strex	r3, r2, [r1]
 8006648:	61bb      	str	r3, [r7, #24]
   return(result);
 800664a:	69bb      	ldr	r3, [r7, #24]
 800664c:	2b00      	cmp	r3, #0
 800664e:	d1e6      	bne.n	800661e <HAL_UART_Transmit_IT+0x8e>
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 8006650:	2300      	movs	r3, #0
 8006652:	e000      	b.n	8006656 <HAL_UART_Transmit_IT+0xc6>
  }
  else
  {
    return HAL_BUSY;
 8006654:	2302      	movs	r3, #2
  }
}
 8006656:	4618      	mov	r0, r3
 8006658:	372c      	adds	r7, #44	; 0x2c
 800665a:	46bd      	mov	sp, r7
 800665c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006660:	4770      	bx	lr
 8006662:	bf00      	nop
 8006664:	0800789f 	.word	0x0800789f
 8006668:	080077e7 	.word	0x080077e7

0800666c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800666c:	b580      	push	{r7, lr}
 800666e:	b08a      	sub	sp, #40	; 0x28
 8006670:	af00      	add	r7, sp, #0
 8006672:	60f8      	str	r0, [r7, #12]
 8006674:	60b9      	str	r1, [r7, #8]
 8006676:	4613      	mov	r3, r2
 8006678:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800667e:	2b20      	cmp	r3, #32
 8006680:	d142      	bne.n	8006708 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006682:	68bb      	ldr	r3, [r7, #8]
 8006684:	2b00      	cmp	r3, #0
 8006686:	d002      	beq.n	800668e <HAL_UART_Receive_IT+0x22>
 8006688:	88fb      	ldrh	r3, [r7, #6]
 800668a:	2b00      	cmp	r3, #0
 800668c:	d101      	bne.n	8006692 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 800668e:	2301      	movs	r3, #1
 8006690:	e03b      	b.n	800670a <HAL_UART_Receive_IT+0x9e>
    }

    __HAL_LOCK(huart);
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8006698:	2b01      	cmp	r3, #1
 800669a:	d101      	bne.n	80066a0 <HAL_UART_Receive_IT+0x34>
 800669c:	2302      	movs	r3, #2
 800669e:	e034      	b.n	800670a <HAL_UART_Receive_IT+0x9e>
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	2201      	movs	r2, #1
 80066a4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	2200      	movs	r2, #0
 80066ac:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	4a18      	ldr	r2, [pc, #96]	; (8006714 <HAL_UART_Receive_IT+0xa8>)
 80066b4:	4293      	cmp	r3, r2
 80066b6:	d01f      	beq.n	80066f8 <HAL_UART_Receive_IT+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	685b      	ldr	r3, [r3, #4]
 80066be:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d018      	beq.n	80066f8 <HAL_UART_Receive_IT+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066cc:	697b      	ldr	r3, [r7, #20]
 80066ce:	e853 3f00 	ldrex	r3, [r3]
 80066d2:	613b      	str	r3, [r7, #16]
   return(result);
 80066d4:	693b      	ldr	r3, [r7, #16]
 80066d6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80066da:	627b      	str	r3, [r7, #36]	; 0x24
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	461a      	mov	r2, r3
 80066e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066e4:	623b      	str	r3, [r7, #32]
 80066e6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066e8:	69f9      	ldr	r1, [r7, #28]
 80066ea:	6a3a      	ldr	r2, [r7, #32]
 80066ec:	e841 2300 	strex	r3, r2, [r1]
 80066f0:	61bb      	str	r3, [r7, #24]
   return(result);
 80066f2:	69bb      	ldr	r3, [r7, #24]
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d1e6      	bne.n	80066c6 <HAL_UART_Receive_IT+0x5a>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80066f8:	88fb      	ldrh	r3, [r7, #6]
 80066fa:	461a      	mov	r2, r3
 80066fc:	68b9      	ldr	r1, [r7, #8]
 80066fe:	68f8      	ldr	r0, [r7, #12]
 8006700:	f000 ff2e 	bl	8007560 <UART_Start_Receive_IT>
 8006704:	4603      	mov	r3, r0
 8006706:	e000      	b.n	800670a <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8006708:	2302      	movs	r3, #2
  }
}
 800670a:	4618      	mov	r0, r3
 800670c:	3728      	adds	r7, #40	; 0x28
 800670e:	46bd      	mov	sp, r7
 8006710:	bd80      	pop	{r7, pc}
 8006712:	bf00      	nop
 8006714:	40008000 	.word	0x40008000

08006718 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006718:	b580      	push	{r7, lr}
 800671a:	b0ba      	sub	sp, #232	; 0xe8
 800671c:	af00      	add	r7, sp, #0
 800671e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	69db      	ldr	r3, [r3, #28]
 8006726:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	689b      	ldr	r3, [r3, #8]
 800673a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800673e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8006742:	f640 030f 	movw	r3, #2063	; 0x80f
 8006746:	4013      	ands	r3, r2
 8006748:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800674c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006750:	2b00      	cmp	r3, #0
 8006752:	d115      	bne.n	8006780 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006754:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006758:	f003 0320 	and.w	r3, r3, #32
 800675c:	2b00      	cmp	r3, #0
 800675e:	d00f      	beq.n	8006780 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006760:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006764:	f003 0320 	and.w	r3, r3, #32
 8006768:	2b00      	cmp	r3, #0
 800676a:	d009      	beq.n	8006780 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006770:	2b00      	cmp	r3, #0
 8006772:	f000 82a6 	beq.w	8006cc2 <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800677a:	6878      	ldr	r0, [r7, #4]
 800677c:	4798      	blx	r3
      }
      return;
 800677e:	e2a0      	b.n	8006cc2 <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8006780:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006784:	2b00      	cmp	r3, #0
 8006786:	f000 8117 	beq.w	80069b8 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800678a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800678e:	f003 0301 	and.w	r3, r3, #1
 8006792:	2b00      	cmp	r3, #0
 8006794:	d106      	bne.n	80067a4 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8006796:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800679a:	4b85      	ldr	r3, [pc, #532]	; (80069b0 <HAL_UART_IRQHandler+0x298>)
 800679c:	4013      	ands	r3, r2
 800679e:	2b00      	cmp	r3, #0
 80067a0:	f000 810a 	beq.w	80069b8 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80067a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80067a8:	f003 0301 	and.w	r3, r3, #1
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d011      	beq.n	80067d4 <HAL_UART_IRQHandler+0xbc>
 80067b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80067b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d00b      	beq.n	80067d4 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	2201      	movs	r2, #1
 80067c2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80067ca:	f043 0201 	orr.w	r2, r3, #1
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80067d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80067d8:	f003 0302 	and.w	r3, r3, #2
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d011      	beq.n	8006804 <HAL_UART_IRQHandler+0xec>
 80067e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80067e4:	f003 0301 	and.w	r3, r3, #1
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d00b      	beq.n	8006804 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	2202      	movs	r2, #2
 80067f2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80067fa:	f043 0204 	orr.w	r2, r3, #4
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006804:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006808:	f003 0304 	and.w	r3, r3, #4
 800680c:	2b00      	cmp	r3, #0
 800680e:	d011      	beq.n	8006834 <HAL_UART_IRQHandler+0x11c>
 8006810:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006814:	f003 0301 	and.w	r3, r3, #1
 8006818:	2b00      	cmp	r3, #0
 800681a:	d00b      	beq.n	8006834 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	2204      	movs	r2, #4
 8006822:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800682a:	f043 0202 	orr.w	r2, r3, #2
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006834:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006838:	f003 0308 	and.w	r3, r3, #8
 800683c:	2b00      	cmp	r3, #0
 800683e:	d017      	beq.n	8006870 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006840:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006844:	f003 0320 	and.w	r3, r3, #32
 8006848:	2b00      	cmp	r3, #0
 800684a:	d105      	bne.n	8006858 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800684c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006850:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006854:	2b00      	cmp	r3, #0
 8006856:	d00b      	beq.n	8006870 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	2208      	movs	r2, #8
 800685e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006866:	f043 0208 	orr.w	r2, r3, #8
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006870:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006874:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006878:	2b00      	cmp	r3, #0
 800687a:	d012      	beq.n	80068a2 <HAL_UART_IRQHandler+0x18a>
 800687c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006880:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006884:	2b00      	cmp	r3, #0
 8006886:	d00c      	beq.n	80068a2 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006890:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006898:	f043 0220 	orr.w	r2, r3, #32
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	f000 820c 	beq.w	8006cc6 <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80068ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80068b2:	f003 0320 	and.w	r3, r3, #32
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d00d      	beq.n	80068d6 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80068ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80068be:	f003 0320 	and.w	r3, r3, #32
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d007      	beq.n	80068d6 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d003      	beq.n	80068d6 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80068d2:	6878      	ldr	r0, [r7, #4]
 80068d4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80068dc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	689b      	ldr	r3, [r3, #8]
 80068e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068ea:	2b40      	cmp	r3, #64	; 0x40
 80068ec:	d005      	beq.n	80068fa <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80068ee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80068f2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d04f      	beq.n	800699a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80068fa:	6878      	ldr	r0, [r7, #4]
 80068fc:	f000 fefa 	bl	80076f4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	689b      	ldr	r3, [r3, #8]
 8006906:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800690a:	2b40      	cmp	r3, #64	; 0x40
 800690c:	d141      	bne.n	8006992 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	3308      	adds	r3, #8
 8006914:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006918:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800691c:	e853 3f00 	ldrex	r3, [r3]
 8006920:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006924:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006928:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800692c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	3308      	adds	r3, #8
 8006936:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800693a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800693e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006942:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006946:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800694a:	e841 2300 	strex	r3, r2, [r1]
 800694e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006952:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006956:	2b00      	cmp	r3, #0
 8006958:	d1d9      	bne.n	800690e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800695e:	2b00      	cmp	r3, #0
 8006960:	d013      	beq.n	800698a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006966:	4a13      	ldr	r2, [pc, #76]	; (80069b4 <HAL_UART_IRQHandler+0x29c>)
 8006968:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800696e:	4618      	mov	r0, r3
 8006970:	f7fc ff92 	bl	8003898 <HAL_DMA_Abort_IT>
 8006974:	4603      	mov	r3, r0
 8006976:	2b00      	cmp	r3, #0
 8006978:	d017      	beq.n	80069aa <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800697e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006980:	687a      	ldr	r2, [r7, #4]
 8006982:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8006984:	4610      	mov	r0, r2
 8006986:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006988:	e00f      	b.n	80069aa <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800698a:	6878      	ldr	r0, [r7, #4]
 800698c:	f7f9 ffca 	bl	8000924 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006990:	e00b      	b.n	80069aa <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006992:	6878      	ldr	r0, [r7, #4]
 8006994:	f7f9 ffc6 	bl	8000924 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006998:	e007      	b.n	80069aa <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800699a:	6878      	ldr	r0, [r7, #4]
 800699c:	f7f9 ffc2 	bl	8000924 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	2200      	movs	r2, #0
 80069a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 80069a8:	e18d      	b.n	8006cc6 <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80069aa:	bf00      	nop
    return;
 80069ac:	e18b      	b.n	8006cc6 <HAL_UART_IRQHandler+0x5ae>
 80069ae:	bf00      	nop
 80069b0:	04000120 	.word	0x04000120
 80069b4:	080077bb 	.word	0x080077bb

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80069bc:	2b01      	cmp	r3, #1
 80069be:	f040 8146 	bne.w	8006c4e <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80069c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80069c6:	f003 0310 	and.w	r3, r3, #16
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	f000 813f 	beq.w	8006c4e <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80069d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80069d4:	f003 0310 	and.w	r3, r3, #16
 80069d8:	2b00      	cmp	r3, #0
 80069da:	f000 8138 	beq.w	8006c4e <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	2210      	movs	r2, #16
 80069e4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	689b      	ldr	r3, [r3, #8]
 80069ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069f0:	2b40      	cmp	r3, #64	; 0x40
 80069f2:	f040 80b4 	bne.w	8006b5e <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	685b      	ldr	r3, [r3, #4]
 80069fe:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006a02:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	f000 815f 	beq.w	8006cca <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006a12:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006a16:	429a      	cmp	r2, r3
 8006a18:	f080 8157 	bcs.w	8006cca <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006a22:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	f003 0320 	and.w	r3, r3, #32
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	f040 8085 	bne.w	8006b42 <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a40:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006a44:	e853 3f00 	ldrex	r3, [r3]
 8006a48:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006a4c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006a50:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006a54:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	461a      	mov	r2, r3
 8006a5e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006a62:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006a66:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a6a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006a6e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006a72:	e841 2300 	strex	r3, r2, [r1]
 8006a76:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006a7a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d1da      	bne.n	8006a38 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	3308      	adds	r3, #8
 8006a88:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a8a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006a8c:	e853 3f00 	ldrex	r3, [r3]
 8006a90:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006a92:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006a94:	f023 0301 	bic.w	r3, r3, #1
 8006a98:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	3308      	adds	r3, #8
 8006aa2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006aa6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006aaa:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006aac:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006aae:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006ab2:	e841 2300 	strex	r3, r2, [r1]
 8006ab6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006ab8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d1e1      	bne.n	8006a82 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	3308      	adds	r3, #8
 8006ac4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ac6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006ac8:	e853 3f00 	ldrex	r3, [r3]
 8006acc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006ace:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006ad0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006ad4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	3308      	adds	r3, #8
 8006ade:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006ae2:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006ae4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ae6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006ae8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006aea:	e841 2300 	strex	r3, r2, [r1]
 8006aee:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006af0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d1e3      	bne.n	8006abe <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	2220      	movs	r2, #32
 8006afa:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	2200      	movs	r2, #0
 8006b00:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b0a:	e853 3f00 	ldrex	r3, [r3]
 8006b0e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006b10:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006b12:	f023 0310 	bic.w	r3, r3, #16
 8006b16:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	461a      	mov	r2, r3
 8006b20:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006b24:	65bb      	str	r3, [r7, #88]	; 0x58
 8006b26:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b28:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006b2a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006b2c:	e841 2300 	strex	r3, r2, [r1]
 8006b30:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006b32:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d1e4      	bne.n	8006b02 <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b3c:	4618      	mov	r0, r3
 8006b3e:	f7fc fe6d 	bl	800381c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006b4e:	b29b      	uxth	r3, r3
 8006b50:	1ad3      	subs	r3, r2, r3
 8006b52:	b29b      	uxth	r3, r3
 8006b54:	4619      	mov	r1, r3
 8006b56:	6878      	ldr	r0, [r7, #4]
 8006b58:	f000 f8c0 	bl	8006cdc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006b5c:	e0b5      	b.n	8006cca <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006b6a:	b29b      	uxth	r3, r3
 8006b6c:	1ad3      	subs	r3, r2, r3
 8006b6e:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006b78:	b29b      	uxth	r3, r3
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	f000 80a7 	beq.w	8006cce <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8006b80:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	f000 80a2 	beq.w	8006cce <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b92:	e853 3f00 	ldrex	r3, [r3]
 8006b96:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006b98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b9a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006b9e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	461a      	mov	r2, r3
 8006ba8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006bac:	647b      	str	r3, [r7, #68]	; 0x44
 8006bae:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bb0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006bb2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006bb4:	e841 2300 	strex	r3, r2, [r1]
 8006bb8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006bba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d1e4      	bne.n	8006b8a <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	3308      	adds	r3, #8
 8006bc6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bca:	e853 3f00 	ldrex	r3, [r3]
 8006bce:	623b      	str	r3, [r7, #32]
   return(result);
 8006bd0:	6a3b      	ldr	r3, [r7, #32]
 8006bd2:	f023 0301 	bic.w	r3, r3, #1
 8006bd6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	3308      	adds	r3, #8
 8006be0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006be4:	633a      	str	r2, [r7, #48]	; 0x30
 8006be6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006be8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006bea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006bec:	e841 2300 	strex	r3, r2, [r1]
 8006bf0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006bf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d1e3      	bne.n	8006bc0 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	2220      	movs	r2, #32
 8006bfc:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	2200      	movs	r2, #0
 8006c02:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	2200      	movs	r2, #0
 8006c08:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c10:	693b      	ldr	r3, [r7, #16]
 8006c12:	e853 3f00 	ldrex	r3, [r3]
 8006c16:	60fb      	str	r3, [r7, #12]
   return(result);
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	f023 0310 	bic.w	r3, r3, #16
 8006c1e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	461a      	mov	r2, r3
 8006c28:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006c2c:	61fb      	str	r3, [r7, #28]
 8006c2e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c30:	69b9      	ldr	r1, [r7, #24]
 8006c32:	69fa      	ldr	r2, [r7, #28]
 8006c34:	e841 2300 	strex	r3, r2, [r1]
 8006c38:	617b      	str	r3, [r7, #20]
   return(result);
 8006c3a:	697b      	ldr	r3, [r7, #20]
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d1e4      	bne.n	8006c0a <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006c40:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006c44:	4619      	mov	r1, r3
 8006c46:	6878      	ldr	r0, [r7, #4]
 8006c48:	f000 f848 	bl	8006cdc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006c4c:	e03f      	b.n	8006cce <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006c4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c52:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d00e      	beq.n	8006c78 <HAL_UART_IRQHandler+0x560>
 8006c5a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006c5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d008      	beq.n	8006c78 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006c6e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006c70:	6878      	ldr	r0, [r7, #4]
 8006c72:	f000 fffe 	bl	8007c72 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006c76:	e02d      	b.n	8006cd4 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006c78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d00e      	beq.n	8006ca2 <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006c84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d008      	beq.n	8006ca2 <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d01c      	beq.n	8006cd2 <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006c9c:	6878      	ldr	r0, [r7, #4]
 8006c9e:	4798      	blx	r3
    }
    return;
 8006ca0:	e017      	b.n	8006cd2 <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006ca2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ca6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d012      	beq.n	8006cd4 <HAL_UART_IRQHandler+0x5bc>
 8006cae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006cb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d00c      	beq.n	8006cd4 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 8006cba:	6878      	ldr	r0, [r7, #4]
 8006cbc:	f000 fe4f 	bl	800795e <UART_EndTransmit_IT>
    return;
 8006cc0:	e008      	b.n	8006cd4 <HAL_UART_IRQHandler+0x5bc>
      return;
 8006cc2:	bf00      	nop
 8006cc4:	e006      	b.n	8006cd4 <HAL_UART_IRQHandler+0x5bc>
    return;
 8006cc6:	bf00      	nop
 8006cc8:	e004      	b.n	8006cd4 <HAL_UART_IRQHandler+0x5bc>
      return;
 8006cca:	bf00      	nop
 8006ccc:	e002      	b.n	8006cd4 <HAL_UART_IRQHandler+0x5bc>
      return;
 8006cce:	bf00      	nop
 8006cd0:	e000      	b.n	8006cd4 <HAL_UART_IRQHandler+0x5bc>
    return;
 8006cd2:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8006cd4:	37e8      	adds	r7, #232	; 0xe8
 8006cd6:	46bd      	mov	sp, r7
 8006cd8:	bd80      	pop	{r7, pc}
 8006cda:	bf00      	nop

08006cdc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006cdc:	b480      	push	{r7}
 8006cde:	b083      	sub	sp, #12
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	6078      	str	r0, [r7, #4]
 8006ce4:	460b      	mov	r3, r1
 8006ce6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006ce8:	bf00      	nop
 8006cea:	370c      	adds	r7, #12
 8006cec:	46bd      	mov	sp, r7
 8006cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf2:	4770      	bx	lr

08006cf4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006cf4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006cf8:	b08a      	sub	sp, #40	; 0x28
 8006cfa:	af00      	add	r7, sp, #0
 8006cfc:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006cfe:	2300      	movs	r3, #0
 8006d00:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	689a      	ldr	r2, [r3, #8]
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	691b      	ldr	r3, [r3, #16]
 8006d0c:	431a      	orrs	r2, r3
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	695b      	ldr	r3, [r3, #20]
 8006d12:	431a      	orrs	r2, r3
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	69db      	ldr	r3, [r3, #28]
 8006d18:	4313      	orrs	r3, r2
 8006d1a:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	681a      	ldr	r2, [r3, #0]
 8006d22:	4ba5      	ldr	r3, [pc, #660]	; (8006fb8 <UART_SetConfig+0x2c4>)
 8006d24:	4013      	ands	r3, r2
 8006d26:	68fa      	ldr	r2, [r7, #12]
 8006d28:	6812      	ldr	r2, [r2, #0]
 8006d2a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006d2c:	430b      	orrs	r3, r1
 8006d2e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	685b      	ldr	r3, [r3, #4]
 8006d36:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	68da      	ldr	r2, [r3, #12]
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	430a      	orrs	r2, r1
 8006d44:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	699b      	ldr	r3, [r3, #24]
 8006d4a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	4a9a      	ldr	r2, [pc, #616]	; (8006fbc <UART_SetConfig+0x2c8>)
 8006d52:	4293      	cmp	r3, r2
 8006d54:	d004      	beq.n	8006d60 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	6a1b      	ldr	r3, [r3, #32]
 8006d5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d5c:	4313      	orrs	r3, r2
 8006d5e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	689b      	ldr	r3, [r3, #8]
 8006d66:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d70:	430a      	orrs	r2, r1
 8006d72:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	4a91      	ldr	r2, [pc, #580]	; (8006fc0 <UART_SetConfig+0x2cc>)
 8006d7a:	4293      	cmp	r3, r2
 8006d7c:	d126      	bne.n	8006dcc <UART_SetConfig+0xd8>
 8006d7e:	4b91      	ldr	r3, [pc, #580]	; (8006fc4 <UART_SetConfig+0x2d0>)
 8006d80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d84:	f003 0303 	and.w	r3, r3, #3
 8006d88:	2b03      	cmp	r3, #3
 8006d8a:	d81b      	bhi.n	8006dc4 <UART_SetConfig+0xd0>
 8006d8c:	a201      	add	r2, pc, #4	; (adr r2, 8006d94 <UART_SetConfig+0xa0>)
 8006d8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d92:	bf00      	nop
 8006d94:	08006da5 	.word	0x08006da5
 8006d98:	08006db5 	.word	0x08006db5
 8006d9c:	08006dad 	.word	0x08006dad
 8006da0:	08006dbd 	.word	0x08006dbd
 8006da4:	2301      	movs	r3, #1
 8006da6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006daa:	e0d6      	b.n	8006f5a <UART_SetConfig+0x266>
 8006dac:	2302      	movs	r3, #2
 8006dae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006db2:	e0d2      	b.n	8006f5a <UART_SetConfig+0x266>
 8006db4:	2304      	movs	r3, #4
 8006db6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006dba:	e0ce      	b.n	8006f5a <UART_SetConfig+0x266>
 8006dbc:	2308      	movs	r3, #8
 8006dbe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006dc2:	e0ca      	b.n	8006f5a <UART_SetConfig+0x266>
 8006dc4:	2310      	movs	r3, #16
 8006dc6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006dca:	e0c6      	b.n	8006f5a <UART_SetConfig+0x266>
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	4a7d      	ldr	r2, [pc, #500]	; (8006fc8 <UART_SetConfig+0x2d4>)
 8006dd2:	4293      	cmp	r3, r2
 8006dd4:	d138      	bne.n	8006e48 <UART_SetConfig+0x154>
 8006dd6:	4b7b      	ldr	r3, [pc, #492]	; (8006fc4 <UART_SetConfig+0x2d0>)
 8006dd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ddc:	f003 030c 	and.w	r3, r3, #12
 8006de0:	2b0c      	cmp	r3, #12
 8006de2:	d82d      	bhi.n	8006e40 <UART_SetConfig+0x14c>
 8006de4:	a201      	add	r2, pc, #4	; (adr r2, 8006dec <UART_SetConfig+0xf8>)
 8006de6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dea:	bf00      	nop
 8006dec:	08006e21 	.word	0x08006e21
 8006df0:	08006e41 	.word	0x08006e41
 8006df4:	08006e41 	.word	0x08006e41
 8006df8:	08006e41 	.word	0x08006e41
 8006dfc:	08006e31 	.word	0x08006e31
 8006e00:	08006e41 	.word	0x08006e41
 8006e04:	08006e41 	.word	0x08006e41
 8006e08:	08006e41 	.word	0x08006e41
 8006e0c:	08006e29 	.word	0x08006e29
 8006e10:	08006e41 	.word	0x08006e41
 8006e14:	08006e41 	.word	0x08006e41
 8006e18:	08006e41 	.word	0x08006e41
 8006e1c:	08006e39 	.word	0x08006e39
 8006e20:	2300      	movs	r3, #0
 8006e22:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006e26:	e098      	b.n	8006f5a <UART_SetConfig+0x266>
 8006e28:	2302      	movs	r3, #2
 8006e2a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006e2e:	e094      	b.n	8006f5a <UART_SetConfig+0x266>
 8006e30:	2304      	movs	r3, #4
 8006e32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006e36:	e090      	b.n	8006f5a <UART_SetConfig+0x266>
 8006e38:	2308      	movs	r3, #8
 8006e3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006e3e:	e08c      	b.n	8006f5a <UART_SetConfig+0x266>
 8006e40:	2310      	movs	r3, #16
 8006e42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006e46:	e088      	b.n	8006f5a <UART_SetConfig+0x266>
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	4a5f      	ldr	r2, [pc, #380]	; (8006fcc <UART_SetConfig+0x2d8>)
 8006e4e:	4293      	cmp	r3, r2
 8006e50:	d125      	bne.n	8006e9e <UART_SetConfig+0x1aa>
 8006e52:	4b5c      	ldr	r3, [pc, #368]	; (8006fc4 <UART_SetConfig+0x2d0>)
 8006e54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e58:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006e5c:	2b30      	cmp	r3, #48	; 0x30
 8006e5e:	d016      	beq.n	8006e8e <UART_SetConfig+0x19a>
 8006e60:	2b30      	cmp	r3, #48	; 0x30
 8006e62:	d818      	bhi.n	8006e96 <UART_SetConfig+0x1a2>
 8006e64:	2b20      	cmp	r3, #32
 8006e66:	d00a      	beq.n	8006e7e <UART_SetConfig+0x18a>
 8006e68:	2b20      	cmp	r3, #32
 8006e6a:	d814      	bhi.n	8006e96 <UART_SetConfig+0x1a2>
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d002      	beq.n	8006e76 <UART_SetConfig+0x182>
 8006e70:	2b10      	cmp	r3, #16
 8006e72:	d008      	beq.n	8006e86 <UART_SetConfig+0x192>
 8006e74:	e00f      	b.n	8006e96 <UART_SetConfig+0x1a2>
 8006e76:	2300      	movs	r3, #0
 8006e78:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006e7c:	e06d      	b.n	8006f5a <UART_SetConfig+0x266>
 8006e7e:	2302      	movs	r3, #2
 8006e80:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006e84:	e069      	b.n	8006f5a <UART_SetConfig+0x266>
 8006e86:	2304      	movs	r3, #4
 8006e88:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006e8c:	e065      	b.n	8006f5a <UART_SetConfig+0x266>
 8006e8e:	2308      	movs	r3, #8
 8006e90:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006e94:	e061      	b.n	8006f5a <UART_SetConfig+0x266>
 8006e96:	2310      	movs	r3, #16
 8006e98:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006e9c:	e05d      	b.n	8006f5a <UART_SetConfig+0x266>
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	4a4b      	ldr	r2, [pc, #300]	; (8006fd0 <UART_SetConfig+0x2dc>)
 8006ea4:	4293      	cmp	r3, r2
 8006ea6:	d125      	bne.n	8006ef4 <UART_SetConfig+0x200>
 8006ea8:	4b46      	ldr	r3, [pc, #280]	; (8006fc4 <UART_SetConfig+0x2d0>)
 8006eaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006eae:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006eb2:	2bc0      	cmp	r3, #192	; 0xc0
 8006eb4:	d016      	beq.n	8006ee4 <UART_SetConfig+0x1f0>
 8006eb6:	2bc0      	cmp	r3, #192	; 0xc0
 8006eb8:	d818      	bhi.n	8006eec <UART_SetConfig+0x1f8>
 8006eba:	2b80      	cmp	r3, #128	; 0x80
 8006ebc:	d00a      	beq.n	8006ed4 <UART_SetConfig+0x1e0>
 8006ebe:	2b80      	cmp	r3, #128	; 0x80
 8006ec0:	d814      	bhi.n	8006eec <UART_SetConfig+0x1f8>
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d002      	beq.n	8006ecc <UART_SetConfig+0x1d8>
 8006ec6:	2b40      	cmp	r3, #64	; 0x40
 8006ec8:	d008      	beq.n	8006edc <UART_SetConfig+0x1e8>
 8006eca:	e00f      	b.n	8006eec <UART_SetConfig+0x1f8>
 8006ecc:	2300      	movs	r3, #0
 8006ece:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006ed2:	e042      	b.n	8006f5a <UART_SetConfig+0x266>
 8006ed4:	2302      	movs	r3, #2
 8006ed6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006eda:	e03e      	b.n	8006f5a <UART_SetConfig+0x266>
 8006edc:	2304      	movs	r3, #4
 8006ede:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006ee2:	e03a      	b.n	8006f5a <UART_SetConfig+0x266>
 8006ee4:	2308      	movs	r3, #8
 8006ee6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006eea:	e036      	b.n	8006f5a <UART_SetConfig+0x266>
 8006eec:	2310      	movs	r3, #16
 8006eee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006ef2:	e032      	b.n	8006f5a <UART_SetConfig+0x266>
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	4a30      	ldr	r2, [pc, #192]	; (8006fbc <UART_SetConfig+0x2c8>)
 8006efa:	4293      	cmp	r3, r2
 8006efc:	d12a      	bne.n	8006f54 <UART_SetConfig+0x260>
 8006efe:	4b31      	ldr	r3, [pc, #196]	; (8006fc4 <UART_SetConfig+0x2d0>)
 8006f00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f04:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006f08:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006f0c:	d01a      	beq.n	8006f44 <UART_SetConfig+0x250>
 8006f0e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006f12:	d81b      	bhi.n	8006f4c <UART_SetConfig+0x258>
 8006f14:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006f18:	d00c      	beq.n	8006f34 <UART_SetConfig+0x240>
 8006f1a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006f1e:	d815      	bhi.n	8006f4c <UART_SetConfig+0x258>
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d003      	beq.n	8006f2c <UART_SetConfig+0x238>
 8006f24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f28:	d008      	beq.n	8006f3c <UART_SetConfig+0x248>
 8006f2a:	e00f      	b.n	8006f4c <UART_SetConfig+0x258>
 8006f2c:	2300      	movs	r3, #0
 8006f2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006f32:	e012      	b.n	8006f5a <UART_SetConfig+0x266>
 8006f34:	2302      	movs	r3, #2
 8006f36:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006f3a:	e00e      	b.n	8006f5a <UART_SetConfig+0x266>
 8006f3c:	2304      	movs	r3, #4
 8006f3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006f42:	e00a      	b.n	8006f5a <UART_SetConfig+0x266>
 8006f44:	2308      	movs	r3, #8
 8006f46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006f4a:	e006      	b.n	8006f5a <UART_SetConfig+0x266>
 8006f4c:	2310      	movs	r3, #16
 8006f4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006f52:	e002      	b.n	8006f5a <UART_SetConfig+0x266>
 8006f54:	2310      	movs	r3, #16
 8006f56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	4a17      	ldr	r2, [pc, #92]	; (8006fbc <UART_SetConfig+0x2c8>)
 8006f60:	4293      	cmp	r3, r2
 8006f62:	f040 808b 	bne.w	800707c <UART_SetConfig+0x388>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006f66:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006f6a:	2b08      	cmp	r3, #8
 8006f6c:	d834      	bhi.n	8006fd8 <UART_SetConfig+0x2e4>
 8006f6e:	a201      	add	r2, pc, #4	; (adr r2, 8006f74 <UART_SetConfig+0x280>)
 8006f70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f74:	08006f99 	.word	0x08006f99
 8006f78:	08006fd9 	.word	0x08006fd9
 8006f7c:	08006fa1 	.word	0x08006fa1
 8006f80:	08006fd9 	.word	0x08006fd9
 8006f84:	08006fa7 	.word	0x08006fa7
 8006f88:	08006fd9 	.word	0x08006fd9
 8006f8c:	08006fd9 	.word	0x08006fd9
 8006f90:	08006fd9 	.word	0x08006fd9
 8006f94:	08006faf 	.word	0x08006faf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006f98:	f7fd fd2a 	bl	80049f0 <HAL_RCC_GetPCLK1Freq>
 8006f9c:	61f8      	str	r0, [r7, #28]
        break;
 8006f9e:	e021      	b.n	8006fe4 <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006fa0:	4b0c      	ldr	r3, [pc, #48]	; (8006fd4 <UART_SetConfig+0x2e0>)
 8006fa2:	61fb      	str	r3, [r7, #28]
        break;
 8006fa4:	e01e      	b.n	8006fe4 <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006fa6:	f7fd fc8b 	bl	80048c0 <HAL_RCC_GetSysClockFreq>
 8006faa:	61f8      	str	r0, [r7, #28]
        break;
 8006fac:	e01a      	b.n	8006fe4 <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006fae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006fb2:	61fb      	str	r3, [r7, #28]
        break;
 8006fb4:	e016      	b.n	8006fe4 <UART_SetConfig+0x2f0>
 8006fb6:	bf00      	nop
 8006fb8:	efff69f3 	.word	0xefff69f3
 8006fbc:	40008000 	.word	0x40008000
 8006fc0:	40013800 	.word	0x40013800
 8006fc4:	40021000 	.word	0x40021000
 8006fc8:	40004400 	.word	0x40004400
 8006fcc:	40004800 	.word	0x40004800
 8006fd0:	40004c00 	.word	0x40004c00
 8006fd4:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8006fd8:	2300      	movs	r3, #0
 8006fda:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006fdc:	2301      	movs	r3, #1
 8006fde:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006fe2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006fe4:	69fb      	ldr	r3, [r7, #28]
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	f000 80fa 	beq.w	80071e0 <UART_SetConfig+0x4ec>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	685a      	ldr	r2, [r3, #4]
 8006ff0:	4613      	mov	r3, r2
 8006ff2:	005b      	lsls	r3, r3, #1
 8006ff4:	4413      	add	r3, r2
 8006ff6:	69fa      	ldr	r2, [r7, #28]
 8006ff8:	429a      	cmp	r2, r3
 8006ffa:	d305      	bcc.n	8007008 <UART_SetConfig+0x314>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	685b      	ldr	r3, [r3, #4]
 8007000:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007002:	69fa      	ldr	r2, [r7, #28]
 8007004:	429a      	cmp	r2, r3
 8007006:	d903      	bls.n	8007010 <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 8007008:	2301      	movs	r3, #1
 800700a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800700e:	e0e7      	b.n	80071e0 <UART_SetConfig+0x4ec>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8007010:	69fb      	ldr	r3, [r7, #28]
 8007012:	2200      	movs	r2, #0
 8007014:	461c      	mov	r4, r3
 8007016:	4615      	mov	r5, r2
 8007018:	f04f 0200 	mov.w	r2, #0
 800701c:	f04f 0300 	mov.w	r3, #0
 8007020:	022b      	lsls	r3, r5, #8
 8007022:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8007026:	0222      	lsls	r2, r4, #8
 8007028:	68f9      	ldr	r1, [r7, #12]
 800702a:	6849      	ldr	r1, [r1, #4]
 800702c:	0849      	lsrs	r1, r1, #1
 800702e:	2000      	movs	r0, #0
 8007030:	4688      	mov	r8, r1
 8007032:	4681      	mov	r9, r0
 8007034:	eb12 0a08 	adds.w	sl, r2, r8
 8007038:	eb43 0b09 	adc.w	fp, r3, r9
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	685b      	ldr	r3, [r3, #4]
 8007040:	2200      	movs	r2, #0
 8007042:	603b      	str	r3, [r7, #0]
 8007044:	607a      	str	r2, [r7, #4]
 8007046:	e9d7 2300 	ldrd	r2, r3, [r7]
 800704a:	4650      	mov	r0, sl
 800704c:	4659      	mov	r1, fp
 800704e:	f7f9 f8c7 	bl	80001e0 <__aeabi_uldivmod>
 8007052:	4602      	mov	r2, r0
 8007054:	460b      	mov	r3, r1
 8007056:	4613      	mov	r3, r2
 8007058:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800705a:	69bb      	ldr	r3, [r7, #24]
 800705c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007060:	d308      	bcc.n	8007074 <UART_SetConfig+0x380>
 8007062:	69bb      	ldr	r3, [r7, #24]
 8007064:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007068:	d204      	bcs.n	8007074 <UART_SetConfig+0x380>
        {
          huart->Instance->BRR = usartdiv;
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	69ba      	ldr	r2, [r7, #24]
 8007070:	60da      	str	r2, [r3, #12]
 8007072:	e0b5      	b.n	80071e0 <UART_SetConfig+0x4ec>
        }
        else
        {
          ret = HAL_ERROR;
 8007074:	2301      	movs	r3, #1
 8007076:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800707a:	e0b1      	b.n	80071e0 <UART_SetConfig+0x4ec>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	69db      	ldr	r3, [r3, #28]
 8007080:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007084:	d15d      	bne.n	8007142 <UART_SetConfig+0x44e>
  {
    switch (clocksource)
 8007086:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800708a:	2b08      	cmp	r3, #8
 800708c:	d827      	bhi.n	80070de <UART_SetConfig+0x3ea>
 800708e:	a201      	add	r2, pc, #4	; (adr r2, 8007094 <UART_SetConfig+0x3a0>)
 8007090:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007094:	080070b9 	.word	0x080070b9
 8007098:	080070c1 	.word	0x080070c1
 800709c:	080070c9 	.word	0x080070c9
 80070a0:	080070df 	.word	0x080070df
 80070a4:	080070cf 	.word	0x080070cf
 80070a8:	080070df 	.word	0x080070df
 80070ac:	080070df 	.word	0x080070df
 80070b0:	080070df 	.word	0x080070df
 80070b4:	080070d7 	.word	0x080070d7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80070b8:	f7fd fc9a 	bl	80049f0 <HAL_RCC_GetPCLK1Freq>
 80070bc:	61f8      	str	r0, [r7, #28]
        break;
 80070be:	e014      	b.n	80070ea <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80070c0:	f7fd fcac 	bl	8004a1c <HAL_RCC_GetPCLK2Freq>
 80070c4:	61f8      	str	r0, [r7, #28]
        break;
 80070c6:	e010      	b.n	80070ea <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80070c8:	4b4c      	ldr	r3, [pc, #304]	; (80071fc <UART_SetConfig+0x508>)
 80070ca:	61fb      	str	r3, [r7, #28]
        break;
 80070cc:	e00d      	b.n	80070ea <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80070ce:	f7fd fbf7 	bl	80048c0 <HAL_RCC_GetSysClockFreq>
 80070d2:	61f8      	str	r0, [r7, #28]
        break;
 80070d4:	e009      	b.n	80070ea <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80070d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80070da:	61fb      	str	r3, [r7, #28]
        break;
 80070dc:	e005      	b.n	80070ea <UART_SetConfig+0x3f6>
      default:
        pclk = 0U;
 80070de:	2300      	movs	r3, #0
 80070e0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80070e2:	2301      	movs	r3, #1
 80070e4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80070e8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80070ea:	69fb      	ldr	r3, [r7, #28]
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d077      	beq.n	80071e0 <UART_SetConfig+0x4ec>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80070f0:	69fb      	ldr	r3, [r7, #28]
 80070f2:	005a      	lsls	r2, r3, #1
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	685b      	ldr	r3, [r3, #4]
 80070f8:	085b      	lsrs	r3, r3, #1
 80070fa:	441a      	add	r2, r3
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	685b      	ldr	r3, [r3, #4]
 8007100:	fbb2 f3f3 	udiv	r3, r2, r3
 8007104:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007106:	69bb      	ldr	r3, [r7, #24]
 8007108:	2b0f      	cmp	r3, #15
 800710a:	d916      	bls.n	800713a <UART_SetConfig+0x446>
 800710c:	69bb      	ldr	r3, [r7, #24]
 800710e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007112:	d212      	bcs.n	800713a <UART_SetConfig+0x446>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007114:	69bb      	ldr	r3, [r7, #24]
 8007116:	b29b      	uxth	r3, r3
 8007118:	f023 030f 	bic.w	r3, r3, #15
 800711c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800711e:	69bb      	ldr	r3, [r7, #24]
 8007120:	085b      	lsrs	r3, r3, #1
 8007122:	b29b      	uxth	r3, r3
 8007124:	f003 0307 	and.w	r3, r3, #7
 8007128:	b29a      	uxth	r2, r3
 800712a:	8afb      	ldrh	r3, [r7, #22]
 800712c:	4313      	orrs	r3, r2
 800712e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	8afa      	ldrh	r2, [r7, #22]
 8007136:	60da      	str	r2, [r3, #12]
 8007138:	e052      	b.n	80071e0 <UART_SetConfig+0x4ec>
      }
      else
      {
        ret = HAL_ERROR;
 800713a:	2301      	movs	r3, #1
 800713c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007140:	e04e      	b.n	80071e0 <UART_SetConfig+0x4ec>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007142:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007146:	2b08      	cmp	r3, #8
 8007148:	d827      	bhi.n	800719a <UART_SetConfig+0x4a6>
 800714a:	a201      	add	r2, pc, #4	; (adr r2, 8007150 <UART_SetConfig+0x45c>)
 800714c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007150:	08007175 	.word	0x08007175
 8007154:	0800717d 	.word	0x0800717d
 8007158:	08007185 	.word	0x08007185
 800715c:	0800719b 	.word	0x0800719b
 8007160:	0800718b 	.word	0x0800718b
 8007164:	0800719b 	.word	0x0800719b
 8007168:	0800719b 	.word	0x0800719b
 800716c:	0800719b 	.word	0x0800719b
 8007170:	08007193 	.word	0x08007193
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007174:	f7fd fc3c 	bl	80049f0 <HAL_RCC_GetPCLK1Freq>
 8007178:	61f8      	str	r0, [r7, #28]
        break;
 800717a:	e014      	b.n	80071a6 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800717c:	f7fd fc4e 	bl	8004a1c <HAL_RCC_GetPCLK2Freq>
 8007180:	61f8      	str	r0, [r7, #28]
        break;
 8007182:	e010      	b.n	80071a6 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007184:	4b1d      	ldr	r3, [pc, #116]	; (80071fc <UART_SetConfig+0x508>)
 8007186:	61fb      	str	r3, [r7, #28]
        break;
 8007188:	e00d      	b.n	80071a6 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800718a:	f7fd fb99 	bl	80048c0 <HAL_RCC_GetSysClockFreq>
 800718e:	61f8      	str	r0, [r7, #28]
        break;
 8007190:	e009      	b.n	80071a6 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007192:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007196:	61fb      	str	r3, [r7, #28]
        break;
 8007198:	e005      	b.n	80071a6 <UART_SetConfig+0x4b2>
      default:
        pclk = 0U;
 800719a:	2300      	movs	r3, #0
 800719c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800719e:	2301      	movs	r3, #1
 80071a0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80071a4:	bf00      	nop
    }

    if (pclk != 0U)
 80071a6:	69fb      	ldr	r3, [r7, #28]
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d019      	beq.n	80071e0 <UART_SetConfig+0x4ec>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	685b      	ldr	r3, [r3, #4]
 80071b0:	085a      	lsrs	r2, r3, #1
 80071b2:	69fb      	ldr	r3, [r7, #28]
 80071b4:	441a      	add	r2, r3
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	685b      	ldr	r3, [r3, #4]
 80071ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80071be:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80071c0:	69bb      	ldr	r3, [r7, #24]
 80071c2:	2b0f      	cmp	r3, #15
 80071c4:	d909      	bls.n	80071da <UART_SetConfig+0x4e6>
 80071c6:	69bb      	ldr	r3, [r7, #24]
 80071c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80071cc:	d205      	bcs.n	80071da <UART_SetConfig+0x4e6>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80071ce:	69bb      	ldr	r3, [r7, #24]
 80071d0:	b29a      	uxth	r2, r3
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	60da      	str	r2, [r3, #12]
 80071d8:	e002      	b.n	80071e0 <UART_SetConfig+0x4ec>
      }
      else
      {
        ret = HAL_ERROR;
 80071da:	2301      	movs	r3, #1
 80071dc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	2200      	movs	r2, #0
 80071e4:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	2200      	movs	r2, #0
 80071ea:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80071ec:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80071f0:	4618      	mov	r0, r3
 80071f2:	3728      	adds	r7, #40	; 0x28
 80071f4:	46bd      	mov	sp, r7
 80071f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80071fa:	bf00      	nop
 80071fc:	00f42400 	.word	0x00f42400

08007200 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007200:	b480      	push	{r7}
 8007202:	b083      	sub	sp, #12
 8007204:	af00      	add	r7, sp, #0
 8007206:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800720c:	f003 0301 	and.w	r3, r3, #1
 8007210:	2b00      	cmp	r3, #0
 8007212:	d00a      	beq.n	800722a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	685b      	ldr	r3, [r3, #4]
 800721a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	430a      	orrs	r2, r1
 8007228:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800722e:	f003 0302 	and.w	r3, r3, #2
 8007232:	2b00      	cmp	r3, #0
 8007234:	d00a      	beq.n	800724c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	685b      	ldr	r3, [r3, #4]
 800723c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	430a      	orrs	r2, r1
 800724a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007250:	f003 0304 	and.w	r3, r3, #4
 8007254:	2b00      	cmp	r3, #0
 8007256:	d00a      	beq.n	800726e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	685b      	ldr	r3, [r3, #4]
 800725e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	430a      	orrs	r2, r1
 800726c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007272:	f003 0308 	and.w	r3, r3, #8
 8007276:	2b00      	cmp	r3, #0
 8007278:	d00a      	beq.n	8007290 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	685b      	ldr	r3, [r3, #4]
 8007280:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	430a      	orrs	r2, r1
 800728e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007294:	f003 0310 	and.w	r3, r3, #16
 8007298:	2b00      	cmp	r3, #0
 800729a:	d00a      	beq.n	80072b2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	689b      	ldr	r3, [r3, #8]
 80072a2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	430a      	orrs	r2, r1
 80072b0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072b6:	f003 0320 	and.w	r3, r3, #32
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d00a      	beq.n	80072d4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	689b      	ldr	r3, [r3, #8]
 80072c4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	430a      	orrs	r2, r1
 80072d2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d01a      	beq.n	8007316 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	685b      	ldr	r3, [r3, #4]
 80072e6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	430a      	orrs	r2, r1
 80072f4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80072fe:	d10a      	bne.n	8007316 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	685b      	ldr	r3, [r3, #4]
 8007306:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	430a      	orrs	r2, r1
 8007314:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800731a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800731e:	2b00      	cmp	r3, #0
 8007320:	d00a      	beq.n	8007338 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	685b      	ldr	r3, [r3, #4]
 8007328:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	430a      	orrs	r2, r1
 8007336:	605a      	str	r2, [r3, #4]
  }
}
 8007338:	bf00      	nop
 800733a:	370c      	adds	r7, #12
 800733c:	46bd      	mov	sp, r7
 800733e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007342:	4770      	bx	lr

08007344 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007344:	b580      	push	{r7, lr}
 8007346:	b086      	sub	sp, #24
 8007348:	af02      	add	r7, sp, #8
 800734a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	2200      	movs	r2, #0
 8007350:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007354:	f7fb f8b6 	bl	80024c4 <HAL_GetTick>
 8007358:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	f003 0308 	and.w	r3, r3, #8
 8007364:	2b08      	cmp	r3, #8
 8007366:	d10e      	bne.n	8007386 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007368:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800736c:	9300      	str	r3, [sp, #0]
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	2200      	movs	r2, #0
 8007372:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007376:	6878      	ldr	r0, [r7, #4]
 8007378:	f000 f82d 	bl	80073d6 <UART_WaitOnFlagUntilTimeout>
 800737c:	4603      	mov	r3, r0
 800737e:	2b00      	cmp	r3, #0
 8007380:	d001      	beq.n	8007386 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007382:	2303      	movs	r3, #3
 8007384:	e023      	b.n	80073ce <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	f003 0304 	and.w	r3, r3, #4
 8007390:	2b04      	cmp	r3, #4
 8007392:	d10e      	bne.n	80073b2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007394:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007398:	9300      	str	r3, [sp, #0]
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	2200      	movs	r2, #0
 800739e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80073a2:	6878      	ldr	r0, [r7, #4]
 80073a4:	f000 f817 	bl	80073d6 <UART_WaitOnFlagUntilTimeout>
 80073a8:	4603      	mov	r3, r0
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d001      	beq.n	80073b2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80073ae:	2303      	movs	r3, #3
 80073b0:	e00d      	b.n	80073ce <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	2220      	movs	r2, #32
 80073b6:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	2220      	movs	r2, #32
 80073bc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	2200      	movs	r2, #0
 80073c2:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	2200      	movs	r2, #0
 80073c8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80073cc:	2300      	movs	r3, #0
}
 80073ce:	4618      	mov	r0, r3
 80073d0:	3710      	adds	r7, #16
 80073d2:	46bd      	mov	sp, r7
 80073d4:	bd80      	pop	{r7, pc}

080073d6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80073d6:	b580      	push	{r7, lr}
 80073d8:	b09c      	sub	sp, #112	; 0x70
 80073da:	af00      	add	r7, sp, #0
 80073dc:	60f8      	str	r0, [r7, #12]
 80073de:	60b9      	str	r1, [r7, #8]
 80073e0:	603b      	str	r3, [r7, #0]
 80073e2:	4613      	mov	r3, r2
 80073e4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80073e6:	e0a5      	b.n	8007534 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80073e8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80073ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073ee:	f000 80a1 	beq.w	8007534 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80073f2:	f7fb f867 	bl	80024c4 <HAL_GetTick>
 80073f6:	4602      	mov	r2, r0
 80073f8:	683b      	ldr	r3, [r7, #0]
 80073fa:	1ad3      	subs	r3, r2, r3
 80073fc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80073fe:	429a      	cmp	r2, r3
 8007400:	d302      	bcc.n	8007408 <UART_WaitOnFlagUntilTimeout+0x32>
 8007402:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007404:	2b00      	cmp	r3, #0
 8007406:	d13e      	bne.n	8007486 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800740e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007410:	e853 3f00 	ldrex	r3, [r3]
 8007414:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007416:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007418:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800741c:	667b      	str	r3, [r7, #100]	; 0x64
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	461a      	mov	r2, r3
 8007424:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007426:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007428:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800742a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800742c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800742e:	e841 2300 	strex	r3, r2, [r1]
 8007432:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007434:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007436:	2b00      	cmp	r3, #0
 8007438:	d1e6      	bne.n	8007408 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	3308      	adds	r3, #8
 8007440:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007442:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007444:	e853 3f00 	ldrex	r3, [r3]
 8007448:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800744a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800744c:	f023 0301 	bic.w	r3, r3, #1
 8007450:	663b      	str	r3, [r7, #96]	; 0x60
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	3308      	adds	r3, #8
 8007458:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800745a:	64ba      	str	r2, [r7, #72]	; 0x48
 800745c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800745e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007460:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007462:	e841 2300 	strex	r3, r2, [r1]
 8007466:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007468:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800746a:	2b00      	cmp	r3, #0
 800746c:	d1e5      	bne.n	800743a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	2220      	movs	r2, #32
 8007472:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	2220      	movs	r2, #32
 8007478:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	2200      	movs	r2, #0
 800747e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8007482:	2303      	movs	r3, #3
 8007484:	e067      	b.n	8007556 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	f003 0304 	and.w	r3, r3, #4
 8007490:	2b00      	cmp	r3, #0
 8007492:	d04f      	beq.n	8007534 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	69db      	ldr	r3, [r3, #28]
 800749a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800749e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80074a2:	d147      	bne.n	8007534 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80074ac:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074b6:	e853 3f00 	ldrex	r3, [r3]
 80074ba:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80074bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074be:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80074c2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	461a      	mov	r2, r3
 80074ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80074cc:	637b      	str	r3, [r7, #52]	; 0x34
 80074ce:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074d0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80074d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80074d4:	e841 2300 	strex	r3, r2, [r1]
 80074d8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80074da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d1e6      	bne.n	80074ae <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	3308      	adds	r3, #8
 80074e6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074e8:	697b      	ldr	r3, [r7, #20]
 80074ea:	e853 3f00 	ldrex	r3, [r3]
 80074ee:	613b      	str	r3, [r7, #16]
   return(result);
 80074f0:	693b      	ldr	r3, [r7, #16]
 80074f2:	f023 0301 	bic.w	r3, r3, #1
 80074f6:	66bb      	str	r3, [r7, #104]	; 0x68
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	3308      	adds	r3, #8
 80074fe:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007500:	623a      	str	r2, [r7, #32]
 8007502:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007504:	69f9      	ldr	r1, [r7, #28]
 8007506:	6a3a      	ldr	r2, [r7, #32]
 8007508:	e841 2300 	strex	r3, r2, [r1]
 800750c:	61bb      	str	r3, [r7, #24]
   return(result);
 800750e:	69bb      	ldr	r3, [r7, #24]
 8007510:	2b00      	cmp	r3, #0
 8007512:	d1e5      	bne.n	80074e0 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	2220      	movs	r2, #32
 8007518:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	2220      	movs	r2, #32
 800751e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	2220      	movs	r2, #32
 8007524:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	2200      	movs	r2, #0
 800752c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8007530:	2303      	movs	r3, #3
 8007532:	e010      	b.n	8007556 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	69da      	ldr	r2, [r3, #28]
 800753a:	68bb      	ldr	r3, [r7, #8]
 800753c:	4013      	ands	r3, r2
 800753e:	68ba      	ldr	r2, [r7, #8]
 8007540:	429a      	cmp	r2, r3
 8007542:	bf0c      	ite	eq
 8007544:	2301      	moveq	r3, #1
 8007546:	2300      	movne	r3, #0
 8007548:	b2db      	uxtb	r3, r3
 800754a:	461a      	mov	r2, r3
 800754c:	79fb      	ldrb	r3, [r7, #7]
 800754e:	429a      	cmp	r2, r3
 8007550:	f43f af4a 	beq.w	80073e8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007554:	2300      	movs	r3, #0
}
 8007556:	4618      	mov	r0, r3
 8007558:	3770      	adds	r7, #112	; 0x70
 800755a:	46bd      	mov	sp, r7
 800755c:	bd80      	pop	{r7, pc}
	...

08007560 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007560:	b480      	push	{r7}
 8007562:	b097      	sub	sp, #92	; 0x5c
 8007564:	af00      	add	r7, sp, #0
 8007566:	60f8      	str	r0, [r7, #12]
 8007568:	60b9      	str	r1, [r7, #8]
 800756a:	4613      	mov	r3, r2
 800756c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	68ba      	ldr	r2, [r7, #8]
 8007572:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	88fa      	ldrh	r2, [r7, #6]
 8007578:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	88fa      	ldrh	r2, [r7, #6]
 8007580:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	2200      	movs	r2, #0
 8007588:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	689b      	ldr	r3, [r3, #8]
 800758e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007592:	d10e      	bne.n	80075b2 <UART_Start_Receive_IT+0x52>
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	691b      	ldr	r3, [r3, #16]
 8007598:	2b00      	cmp	r3, #0
 800759a:	d105      	bne.n	80075a8 <UART_Start_Receive_IT+0x48>
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	f240 12ff 	movw	r2, #511	; 0x1ff
 80075a2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80075a6:	e02d      	b.n	8007604 <UART_Start_Receive_IT+0xa4>
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	22ff      	movs	r2, #255	; 0xff
 80075ac:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80075b0:	e028      	b.n	8007604 <UART_Start_Receive_IT+0xa4>
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	689b      	ldr	r3, [r3, #8]
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d10d      	bne.n	80075d6 <UART_Start_Receive_IT+0x76>
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	691b      	ldr	r3, [r3, #16]
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d104      	bne.n	80075cc <UART_Start_Receive_IT+0x6c>
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	22ff      	movs	r2, #255	; 0xff
 80075c6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80075ca:	e01b      	b.n	8007604 <UART_Start_Receive_IT+0xa4>
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	227f      	movs	r2, #127	; 0x7f
 80075d0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80075d4:	e016      	b.n	8007604 <UART_Start_Receive_IT+0xa4>
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	689b      	ldr	r3, [r3, #8]
 80075da:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80075de:	d10d      	bne.n	80075fc <UART_Start_Receive_IT+0x9c>
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	691b      	ldr	r3, [r3, #16]
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d104      	bne.n	80075f2 <UART_Start_Receive_IT+0x92>
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	227f      	movs	r2, #127	; 0x7f
 80075ec:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80075f0:	e008      	b.n	8007604 <UART_Start_Receive_IT+0xa4>
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	223f      	movs	r2, #63	; 0x3f
 80075f6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80075fa:	e003      	b.n	8007604 <UART_Start_Receive_IT+0xa4>
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	2200      	movs	r2, #0
 8007600:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	2200      	movs	r2, #0
 8007608:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	2222      	movs	r2, #34	; 0x22
 8007610:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	3308      	adds	r3, #8
 8007618:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800761a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800761c:	e853 3f00 	ldrex	r3, [r3]
 8007620:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007622:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007624:	f043 0301 	orr.w	r3, r3, #1
 8007628:	657b      	str	r3, [r7, #84]	; 0x54
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	3308      	adds	r3, #8
 8007630:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007632:	64ba      	str	r2, [r7, #72]	; 0x48
 8007634:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007636:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007638:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800763a:	e841 2300 	strex	r3, r2, [r1]
 800763e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007640:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007642:	2b00      	cmp	r3, #0
 8007644:	d1e5      	bne.n	8007612 <UART_Start_Receive_IT+0xb2>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	689b      	ldr	r3, [r3, #8]
 800764a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800764e:	d107      	bne.n	8007660 <UART_Start_Receive_IT+0x100>
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	691b      	ldr	r3, [r3, #16]
 8007654:	2b00      	cmp	r3, #0
 8007656:	d103      	bne.n	8007660 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	4a24      	ldr	r2, [pc, #144]	; (80076ec <UART_Start_Receive_IT+0x18c>)
 800765c:	665a      	str	r2, [r3, #100]	; 0x64
 800765e:	e002      	b.n	8007666 <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	4a23      	ldr	r2, [pc, #140]	; (80076f0 <UART_Start_Receive_IT+0x190>)
 8007664:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	2200      	movs	r2, #0
 800766a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	691b      	ldr	r3, [r3, #16]
 8007672:	2b00      	cmp	r3, #0
 8007674:	d019      	beq.n	80076aa <UART_Start_Receive_IT+0x14a>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800767c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800767e:	e853 3f00 	ldrex	r3, [r3]
 8007682:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007686:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800768a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	461a      	mov	r2, r3
 8007692:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007694:	637b      	str	r3, [r7, #52]	; 0x34
 8007696:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007698:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800769a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800769c:	e841 2300 	strex	r3, r2, [r1]
 80076a0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80076a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d1e6      	bne.n	8007676 <UART_Start_Receive_IT+0x116>
 80076a8:	e018      	b.n	80076dc <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076b0:	697b      	ldr	r3, [r7, #20]
 80076b2:	e853 3f00 	ldrex	r3, [r3]
 80076b6:	613b      	str	r3, [r7, #16]
   return(result);
 80076b8:	693b      	ldr	r3, [r7, #16]
 80076ba:	f043 0320 	orr.w	r3, r3, #32
 80076be:	653b      	str	r3, [r7, #80]	; 0x50
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	461a      	mov	r2, r3
 80076c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80076c8:	623b      	str	r3, [r7, #32]
 80076ca:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076cc:	69f9      	ldr	r1, [r7, #28]
 80076ce:	6a3a      	ldr	r2, [r7, #32]
 80076d0:	e841 2300 	strex	r3, r2, [r1]
 80076d4:	61bb      	str	r3, [r7, #24]
   return(result);
 80076d6:	69bb      	ldr	r3, [r7, #24]
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d1e6      	bne.n	80076aa <UART_Start_Receive_IT+0x14a>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 80076dc:	2300      	movs	r3, #0
}
 80076de:	4618      	mov	r0, r3
 80076e0:	375c      	adds	r7, #92	; 0x5c
 80076e2:	46bd      	mov	sp, r7
 80076e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e8:	4770      	bx	lr
 80076ea:	bf00      	nop
 80076ec:	08007b13 	.word	0x08007b13
 80076f0:	080079b3 	.word	0x080079b3

080076f4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80076f4:	b480      	push	{r7}
 80076f6:	b095      	sub	sp, #84	; 0x54
 80076f8:	af00      	add	r7, sp, #0
 80076fa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007702:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007704:	e853 3f00 	ldrex	r3, [r3]
 8007708:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800770a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800770c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007710:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	461a      	mov	r2, r3
 8007718:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800771a:	643b      	str	r3, [r7, #64]	; 0x40
 800771c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800771e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007720:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007722:	e841 2300 	strex	r3, r2, [r1]
 8007726:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007728:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800772a:	2b00      	cmp	r3, #0
 800772c:	d1e6      	bne.n	80076fc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	3308      	adds	r3, #8
 8007734:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007736:	6a3b      	ldr	r3, [r7, #32]
 8007738:	e853 3f00 	ldrex	r3, [r3]
 800773c:	61fb      	str	r3, [r7, #28]
   return(result);
 800773e:	69fb      	ldr	r3, [r7, #28]
 8007740:	f023 0301 	bic.w	r3, r3, #1
 8007744:	64bb      	str	r3, [r7, #72]	; 0x48
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	3308      	adds	r3, #8
 800774c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800774e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007750:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007752:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007754:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007756:	e841 2300 	strex	r3, r2, [r1]
 800775a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800775c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800775e:	2b00      	cmp	r3, #0
 8007760:	d1e5      	bne.n	800772e <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007766:	2b01      	cmp	r3, #1
 8007768:	d118      	bne.n	800779c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	e853 3f00 	ldrex	r3, [r3]
 8007776:	60bb      	str	r3, [r7, #8]
   return(result);
 8007778:	68bb      	ldr	r3, [r7, #8]
 800777a:	f023 0310 	bic.w	r3, r3, #16
 800777e:	647b      	str	r3, [r7, #68]	; 0x44
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	461a      	mov	r2, r3
 8007786:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007788:	61bb      	str	r3, [r7, #24]
 800778a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800778c:	6979      	ldr	r1, [r7, #20]
 800778e:	69ba      	ldr	r2, [r7, #24]
 8007790:	e841 2300 	strex	r3, r2, [r1]
 8007794:	613b      	str	r3, [r7, #16]
   return(result);
 8007796:	693b      	ldr	r3, [r7, #16]
 8007798:	2b00      	cmp	r3, #0
 800779a:	d1e6      	bne.n	800776a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	2220      	movs	r2, #32
 80077a0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	2200      	movs	r2, #0
 80077a6:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	2200      	movs	r2, #0
 80077ac:	665a      	str	r2, [r3, #100]	; 0x64
}
 80077ae:	bf00      	nop
 80077b0:	3754      	adds	r7, #84	; 0x54
 80077b2:	46bd      	mov	sp, r7
 80077b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b8:	4770      	bx	lr

080077ba <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80077ba:	b580      	push	{r7, lr}
 80077bc:	b084      	sub	sp, #16
 80077be:	af00      	add	r7, sp, #0
 80077c0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077c6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	2200      	movs	r2, #0
 80077cc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	2200      	movs	r2, #0
 80077d4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80077d8:	68f8      	ldr	r0, [r7, #12]
 80077da:	f7f9 f8a3 	bl	8000924 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80077de:	bf00      	nop
 80077e0:	3710      	adds	r7, #16
 80077e2:	46bd      	mov	sp, r7
 80077e4:	bd80      	pop	{r7, pc}

080077e6 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 80077e6:	b480      	push	{r7}
 80077e8:	b08f      	sub	sp, #60	; 0x3c
 80077ea:	af00      	add	r7, sp, #0
 80077ec:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80077f2:	2b21      	cmp	r3, #33	; 0x21
 80077f4:	d14d      	bne.n	8007892 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80077fc:	b29b      	uxth	r3, r3
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d132      	bne.n	8007868 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007808:	6a3b      	ldr	r3, [r7, #32]
 800780a:	e853 3f00 	ldrex	r3, [r3]
 800780e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007810:	69fb      	ldr	r3, [r7, #28]
 8007812:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007816:	637b      	str	r3, [r7, #52]	; 0x34
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	461a      	mov	r2, r3
 800781e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007820:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007822:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007824:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007826:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007828:	e841 2300 	strex	r3, r2, [r1]
 800782c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800782e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007830:	2b00      	cmp	r3, #0
 8007832:	d1e6      	bne.n	8007802 <UART_TxISR_8BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	e853 3f00 	ldrex	r3, [r3]
 8007840:	60bb      	str	r3, [r7, #8]
   return(result);
 8007842:	68bb      	ldr	r3, [r7, #8]
 8007844:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007848:	633b      	str	r3, [r7, #48]	; 0x30
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	461a      	mov	r2, r3
 8007850:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007852:	61bb      	str	r3, [r7, #24]
 8007854:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007856:	6979      	ldr	r1, [r7, #20]
 8007858:	69ba      	ldr	r2, [r7, #24]
 800785a:	e841 2300 	strex	r3, r2, [r1]
 800785e:	613b      	str	r3, [r7, #16]
   return(result);
 8007860:	693b      	ldr	r3, [r7, #16]
 8007862:	2b00      	cmp	r3, #0
 8007864:	d1e6      	bne.n	8007834 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8007866:	e014      	b.n	8007892 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800786c:	781a      	ldrb	r2, [r3, #0]
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	b292      	uxth	r2, r2
 8007874:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800787a:	1c5a      	adds	r2, r3, #1
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007886:	b29b      	uxth	r3, r3
 8007888:	3b01      	subs	r3, #1
 800788a:	b29a      	uxth	r2, r3
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8007892:	bf00      	nop
 8007894:	373c      	adds	r7, #60	; 0x3c
 8007896:	46bd      	mov	sp, r7
 8007898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800789c:	4770      	bx	lr

0800789e <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800789e:	b480      	push	{r7}
 80078a0:	b091      	sub	sp, #68	; 0x44
 80078a2:	af00      	add	r7, sp, #0
 80078a4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80078aa:	2b21      	cmp	r3, #33	; 0x21
 80078ac:	d151      	bne.n	8007952 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80078b4:	b29b      	uxth	r3, r3
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d132      	bne.n	8007920 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078c2:	e853 3f00 	ldrex	r3, [r3]
 80078c6:	623b      	str	r3, [r7, #32]
   return(result);
 80078c8:	6a3b      	ldr	r3, [r7, #32]
 80078ca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80078ce:	63bb      	str	r3, [r7, #56]	; 0x38
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	461a      	mov	r2, r3
 80078d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078d8:	633b      	str	r3, [r7, #48]	; 0x30
 80078da:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078dc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80078de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80078e0:	e841 2300 	strex	r3, r2, [r1]
 80078e4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80078e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d1e6      	bne.n	80078ba <UART_TxISR_16BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078f2:	693b      	ldr	r3, [r7, #16]
 80078f4:	e853 3f00 	ldrex	r3, [r3]
 80078f8:	60fb      	str	r3, [r7, #12]
   return(result);
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007900:	637b      	str	r3, [r7, #52]	; 0x34
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	461a      	mov	r2, r3
 8007908:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800790a:	61fb      	str	r3, [r7, #28]
 800790c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800790e:	69b9      	ldr	r1, [r7, #24]
 8007910:	69fa      	ldr	r2, [r7, #28]
 8007912:	e841 2300 	strex	r3, r2, [r1]
 8007916:	617b      	str	r3, [r7, #20]
   return(result);
 8007918:	697b      	ldr	r3, [r7, #20]
 800791a:	2b00      	cmp	r3, #0
 800791c:	d1e6      	bne.n	80078ec <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800791e:	e018      	b.n	8007952 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007924:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8007926:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007928:	881a      	ldrh	r2, [r3, #0]
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007932:	b292      	uxth	r2, r2
 8007934:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800793a:	1c9a      	adds	r2, r3, #2
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007946:	b29b      	uxth	r3, r3
 8007948:	3b01      	subs	r3, #1
 800794a:	b29a      	uxth	r2, r3
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8007952:	bf00      	nop
 8007954:	3744      	adds	r7, #68	; 0x44
 8007956:	46bd      	mov	sp, r7
 8007958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800795c:	4770      	bx	lr

0800795e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800795e:	b580      	push	{r7, lr}
 8007960:	b088      	sub	sp, #32
 8007962:	af00      	add	r7, sp, #0
 8007964:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	e853 3f00 	ldrex	r3, [r3]
 8007972:	60bb      	str	r3, [r7, #8]
   return(result);
 8007974:	68bb      	ldr	r3, [r7, #8]
 8007976:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800797a:	61fb      	str	r3, [r7, #28]
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	461a      	mov	r2, r3
 8007982:	69fb      	ldr	r3, [r7, #28]
 8007984:	61bb      	str	r3, [r7, #24]
 8007986:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007988:	6979      	ldr	r1, [r7, #20]
 800798a:	69ba      	ldr	r2, [r7, #24]
 800798c:	e841 2300 	strex	r3, r2, [r1]
 8007990:	613b      	str	r3, [r7, #16]
   return(result);
 8007992:	693b      	ldr	r3, [r7, #16]
 8007994:	2b00      	cmp	r3, #0
 8007996:	d1e6      	bne.n	8007966 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	2220      	movs	r2, #32
 800799c:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	2200      	movs	r2, #0
 80079a2:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80079a4:	6878      	ldr	r0, [r7, #4]
 80079a6:	f7f9 f86f 	bl	8000a88 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80079aa:	bf00      	nop
 80079ac:	3720      	adds	r7, #32
 80079ae:	46bd      	mov	sp, r7
 80079b0:	bd80      	pop	{r7, pc}

080079b2 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80079b2:	b580      	push	{r7, lr}
 80079b4:	b096      	sub	sp, #88	; 0x58
 80079b6:	af00      	add	r7, sp, #0
 80079b8:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80079c0:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80079c8:	2b22      	cmp	r3, #34	; 0x22
 80079ca:	f040 8094 	bne.w	8007af6 <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80079d4:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80079d8:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80079dc:	b2d9      	uxtb	r1, r3
 80079de:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80079e2:	b2da      	uxtb	r2, r3
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079e8:	400a      	ands	r2, r1
 80079ea:	b2d2      	uxtb	r2, r2
 80079ec:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079f2:	1c5a      	adds	r2, r3, #1
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80079fe:	b29b      	uxth	r3, r3
 8007a00:	3b01      	subs	r3, #1
 8007a02:	b29a      	uxth	r2, r3
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007a10:	b29b      	uxth	r3, r3
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d179      	bne.n	8007b0a <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a1e:	e853 3f00 	ldrex	r3, [r3]
 8007a22:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007a24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a26:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007a2a:	653b      	str	r3, [r7, #80]	; 0x50
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	461a      	mov	r2, r3
 8007a32:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007a34:	647b      	str	r3, [r7, #68]	; 0x44
 8007a36:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a38:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007a3a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007a3c:	e841 2300 	strex	r3, r2, [r1]
 8007a40:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007a42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d1e6      	bne.n	8007a16 <UART_RxISR_8BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	3308      	adds	r3, #8
 8007a4e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a52:	e853 3f00 	ldrex	r3, [r3]
 8007a56:	623b      	str	r3, [r7, #32]
   return(result);
 8007a58:	6a3b      	ldr	r3, [r7, #32]
 8007a5a:	f023 0301 	bic.w	r3, r3, #1
 8007a5e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	3308      	adds	r3, #8
 8007a66:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007a68:	633a      	str	r2, [r7, #48]	; 0x30
 8007a6a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a6c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007a6e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a70:	e841 2300 	strex	r3, r2, [r1]
 8007a74:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007a76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d1e5      	bne.n	8007a48 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	2220      	movs	r2, #32
 8007a80:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	2200      	movs	r2, #0
 8007a86:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007a8c:	2b01      	cmp	r3, #1
 8007a8e:	d12e      	bne.n	8007aee <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	2200      	movs	r2, #0
 8007a94:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a9c:	693b      	ldr	r3, [r7, #16]
 8007a9e:	e853 3f00 	ldrex	r3, [r3]
 8007aa2:	60fb      	str	r3, [r7, #12]
   return(result);
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	f023 0310 	bic.w	r3, r3, #16
 8007aaa:	64bb      	str	r3, [r7, #72]	; 0x48
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	461a      	mov	r2, r3
 8007ab2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007ab4:	61fb      	str	r3, [r7, #28]
 8007ab6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ab8:	69b9      	ldr	r1, [r7, #24]
 8007aba:	69fa      	ldr	r2, [r7, #28]
 8007abc:	e841 2300 	strex	r3, r2, [r1]
 8007ac0:	617b      	str	r3, [r7, #20]
   return(result);
 8007ac2:	697b      	ldr	r3, [r7, #20]
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d1e6      	bne.n	8007a96 <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	69db      	ldr	r3, [r3, #28]
 8007ace:	f003 0310 	and.w	r3, r3, #16
 8007ad2:	2b10      	cmp	r3, #16
 8007ad4:	d103      	bne.n	8007ade <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	2210      	movs	r2, #16
 8007adc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007ae4:	4619      	mov	r1, r3
 8007ae6:	6878      	ldr	r0, [r7, #4]
 8007ae8:	f7ff f8f8 	bl	8006cdc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007aec:	e00d      	b.n	8007b0a <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8007aee:	6878      	ldr	r0, [r7, #4]
 8007af0:	f7f8 ff50 	bl	8000994 <HAL_UART_RxCpltCallback>
}
 8007af4:	e009      	b.n	8007b0a <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	8b1b      	ldrh	r3, [r3, #24]
 8007afc:	b29a      	uxth	r2, r3
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	f042 0208 	orr.w	r2, r2, #8
 8007b06:	b292      	uxth	r2, r2
 8007b08:	831a      	strh	r2, [r3, #24]
}
 8007b0a:	bf00      	nop
 8007b0c:	3758      	adds	r7, #88	; 0x58
 8007b0e:	46bd      	mov	sp, r7
 8007b10:	bd80      	pop	{r7, pc}

08007b12 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007b12:	b580      	push	{r7, lr}
 8007b14:	b096      	sub	sp, #88	; 0x58
 8007b16:	af00      	add	r7, sp, #0
 8007b18:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007b20:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007b28:	2b22      	cmp	r3, #34	; 0x22
 8007b2a:	f040 8094 	bne.w	8007c56 <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007b34:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b3c:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8007b3e:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8007b42:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8007b46:	4013      	ands	r3, r2
 8007b48:	b29a      	uxth	r2, r3
 8007b4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007b4c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b52:	1c9a      	adds	r2, r3, #2
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007b5e:	b29b      	uxth	r3, r3
 8007b60:	3b01      	subs	r3, #1
 8007b62:	b29a      	uxth	r2, r3
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007b70:	b29b      	uxth	r3, r3
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d179      	bne.n	8007c6a <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b7e:	e853 3f00 	ldrex	r3, [r3]
 8007b82:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007b84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b86:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007b8a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	461a      	mov	r2, r3
 8007b92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007b94:	643b      	str	r3, [r7, #64]	; 0x40
 8007b96:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b98:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007b9a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007b9c:	e841 2300 	strex	r3, r2, [r1]
 8007ba0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007ba2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d1e6      	bne.n	8007b76 <UART_RxISR_16BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	3308      	adds	r3, #8
 8007bae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bb0:	6a3b      	ldr	r3, [r7, #32]
 8007bb2:	e853 3f00 	ldrex	r3, [r3]
 8007bb6:	61fb      	str	r3, [r7, #28]
   return(result);
 8007bb8:	69fb      	ldr	r3, [r7, #28]
 8007bba:	f023 0301 	bic.w	r3, r3, #1
 8007bbe:	64bb      	str	r3, [r7, #72]	; 0x48
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	3308      	adds	r3, #8
 8007bc6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007bc8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007bca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bcc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007bce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007bd0:	e841 2300 	strex	r3, r2, [r1]
 8007bd4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d1e5      	bne.n	8007ba8 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	2220      	movs	r2, #32
 8007be0:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	2200      	movs	r2, #0
 8007be6:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007bec:	2b01      	cmp	r3, #1
 8007bee:	d12e      	bne.n	8007c4e <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	2200      	movs	r2, #0
 8007bf4:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	e853 3f00 	ldrex	r3, [r3]
 8007c02:	60bb      	str	r3, [r7, #8]
   return(result);
 8007c04:	68bb      	ldr	r3, [r7, #8]
 8007c06:	f023 0310 	bic.w	r3, r3, #16
 8007c0a:	647b      	str	r3, [r7, #68]	; 0x44
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	461a      	mov	r2, r3
 8007c12:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007c14:	61bb      	str	r3, [r7, #24]
 8007c16:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c18:	6979      	ldr	r1, [r7, #20]
 8007c1a:	69ba      	ldr	r2, [r7, #24]
 8007c1c:	e841 2300 	strex	r3, r2, [r1]
 8007c20:	613b      	str	r3, [r7, #16]
   return(result);
 8007c22:	693b      	ldr	r3, [r7, #16]
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d1e6      	bne.n	8007bf6 <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	69db      	ldr	r3, [r3, #28]
 8007c2e:	f003 0310 	and.w	r3, r3, #16
 8007c32:	2b10      	cmp	r3, #16
 8007c34:	d103      	bne.n	8007c3e <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	2210      	movs	r2, #16
 8007c3c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007c44:	4619      	mov	r1, r3
 8007c46:	6878      	ldr	r0, [r7, #4]
 8007c48:	f7ff f848 	bl	8006cdc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007c4c:	e00d      	b.n	8007c6a <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8007c4e:	6878      	ldr	r0, [r7, #4]
 8007c50:	f7f8 fea0 	bl	8000994 <HAL_UART_RxCpltCallback>
}
 8007c54:	e009      	b.n	8007c6a <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	8b1b      	ldrh	r3, [r3, #24]
 8007c5c:	b29a      	uxth	r2, r3
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	f042 0208 	orr.w	r2, r2, #8
 8007c66:	b292      	uxth	r2, r2
 8007c68:	831a      	strh	r2, [r3, #24]
}
 8007c6a:	bf00      	nop
 8007c6c:	3758      	adds	r7, #88	; 0x58
 8007c6e:	46bd      	mov	sp, r7
 8007c70:	bd80      	pop	{r7, pc}

08007c72 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007c72:	b480      	push	{r7}
 8007c74:	b083      	sub	sp, #12
 8007c76:	af00      	add	r7, sp, #0
 8007c78:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007c7a:	bf00      	nop
 8007c7c:	370c      	adds	r7, #12
 8007c7e:	46bd      	mov	sp, r7
 8007c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c84:	4770      	bx	lr

08007c86 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8007c86:	b480      	push	{r7}
 8007c88:	b085      	sub	sp, #20
 8007c8a:	af00      	add	r7, sp, #0
 8007c8c:	4603      	mov	r3, r0
 8007c8e:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8007c90:	2300      	movs	r3, #0
 8007c92:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8007c94:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007c98:	2b84      	cmp	r3, #132	; 0x84
 8007c9a:	d005      	beq.n	8007ca8 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8007c9c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	4413      	add	r3, r2
 8007ca4:	3303      	adds	r3, #3
 8007ca6:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8007ca8:	68fb      	ldr	r3, [r7, #12]
}
 8007caa:	4618      	mov	r0, r3
 8007cac:	3714      	adds	r7, #20
 8007cae:	46bd      	mov	sp, r7
 8007cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb4:	4770      	bx	lr

08007cb6 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8007cb6:	b580      	push	{r7, lr}
 8007cb8:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8007cba:	f000 fff9 	bl	8008cb0 <vTaskStartScheduler>
  
  return osOK;
 8007cbe:	2300      	movs	r3, #0
}
 8007cc0:	4618      	mov	r0, r3
 8007cc2:	bd80      	pop	{r7, pc}

08007cc4 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8007cc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007cc6:	b089      	sub	sp, #36	; 0x24
 8007cc8:	af04      	add	r7, sp, #16
 8007cca:	6078      	str	r0, [r7, #4]
 8007ccc:	6039      	str	r1, [r7, #0]
      return NULL;
    } 
  }
#elif( configSUPPORT_STATIC_ALLOCATION == 1 )

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	685c      	ldr	r4, [r3, #4]
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	691e      	ldr	r6, [r3, #16]
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007ce0:	4618      	mov	r0, r3
 8007ce2:	f7ff ffd0 	bl	8007c86 <makeFreeRtosPriority>
 8007ce6:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	695b      	ldr	r3, [r3, #20]
 8007cec:	687a      	ldr	r2, [r7, #4]
 8007cee:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007cf0:	9202      	str	r2, [sp, #8]
 8007cf2:	9301      	str	r3, [sp, #4]
 8007cf4:	9100      	str	r1, [sp, #0]
 8007cf6:	683b      	ldr	r3, [r7, #0]
 8007cf8:	4632      	mov	r2, r6
 8007cfa:	4629      	mov	r1, r5
 8007cfc:	4620      	mov	r0, r4
 8007cfe:	f000 fe59 	bl	80089b4 <xTaskCreateStatic>
 8007d02:	60f8      	str	r0, [r7, #12]
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8007d04:	68fb      	ldr	r3, [r7, #12]
}
 8007d06:	4618      	mov	r0, r3
 8007d08:	3714      	adds	r7, #20
 8007d0a:	46bd      	mov	sp, r7
 8007d0c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007d0e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8007d0e:	b580      	push	{r7, lr}
 8007d10:	b084      	sub	sp, #16
 8007d12:	af00      	add	r7, sp, #0
 8007d14:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d001      	beq.n	8007d24 <osDelay+0x16>
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	e000      	b.n	8007d26 <osDelay+0x18>
 8007d24:	2301      	movs	r3, #1
 8007d26:	4618      	mov	r0, r3
 8007d28:	f000 ff8e 	bl	8008c48 <vTaskDelay>
  
  return osOK;
 8007d2c:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8007d2e:	4618      	mov	r0, r3
 8007d30:	3710      	adds	r7, #16
 8007d32:	46bd      	mov	sp, r7
 8007d34:	bd80      	pop	{r7, pc}

08007d36 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007d36:	b480      	push	{r7}
 8007d38:	b083      	sub	sp, #12
 8007d3a:	af00      	add	r7, sp, #0
 8007d3c:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	f103 0208 	add.w	r2, r3, #8
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	f04f 32ff 	mov.w	r2, #4294967295
 8007d4e:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	f103 0208 	add.w	r2, r3, #8
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	f103 0208 	add.w	r2, r3, #8
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	2200      	movs	r2, #0
 8007d68:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007d6a:	bf00      	nop
 8007d6c:	370c      	adds	r7, #12
 8007d6e:	46bd      	mov	sp, r7
 8007d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d74:	4770      	bx	lr

08007d76 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007d76:	b480      	push	{r7}
 8007d78:	b083      	sub	sp, #12
 8007d7a:	af00      	add	r7, sp, #0
 8007d7c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	2200      	movs	r2, #0
 8007d82:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007d84:	bf00      	nop
 8007d86:	370c      	adds	r7, #12
 8007d88:	46bd      	mov	sp, r7
 8007d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d8e:	4770      	bx	lr

08007d90 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007d90:	b480      	push	{r7}
 8007d92:	b085      	sub	sp, #20
 8007d94:	af00      	add	r7, sp, #0
 8007d96:	6078      	str	r0, [r7, #4]
 8007d98:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	685b      	ldr	r3, [r3, #4]
 8007d9e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007da0:	683b      	ldr	r3, [r7, #0]
 8007da2:	68fa      	ldr	r2, [r7, #12]
 8007da4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	689a      	ldr	r2, [r3, #8]
 8007daa:	683b      	ldr	r3, [r7, #0]
 8007dac:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	689b      	ldr	r3, [r3, #8]
 8007db2:	683a      	ldr	r2, [r7, #0]
 8007db4:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	683a      	ldr	r2, [r7, #0]
 8007dba:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007dbc:	683b      	ldr	r3, [r7, #0]
 8007dbe:	687a      	ldr	r2, [r7, #4]
 8007dc0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	1c5a      	adds	r2, r3, #1
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	601a      	str	r2, [r3, #0]
}
 8007dcc:	bf00      	nop
 8007dce:	3714      	adds	r7, #20
 8007dd0:	46bd      	mov	sp, r7
 8007dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd6:	4770      	bx	lr

08007dd8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007dd8:	b480      	push	{r7}
 8007dda:	b085      	sub	sp, #20
 8007ddc:	af00      	add	r7, sp, #0
 8007dde:	6078      	str	r0, [r7, #4]
 8007de0:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007de2:	683b      	ldr	r3, [r7, #0]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007de8:	68bb      	ldr	r3, [r7, #8]
 8007dea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007dee:	d103      	bne.n	8007df8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	691b      	ldr	r3, [r3, #16]
 8007df4:	60fb      	str	r3, [r7, #12]
 8007df6:	e00c      	b.n	8007e12 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	3308      	adds	r3, #8
 8007dfc:	60fb      	str	r3, [r7, #12]
 8007dfe:	e002      	b.n	8007e06 <vListInsert+0x2e>
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	685b      	ldr	r3, [r3, #4]
 8007e04:	60fb      	str	r3, [r7, #12]
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	685b      	ldr	r3, [r3, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	68ba      	ldr	r2, [r7, #8]
 8007e0e:	429a      	cmp	r2, r3
 8007e10:	d2f6      	bcs.n	8007e00 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	685a      	ldr	r2, [r3, #4]
 8007e16:	683b      	ldr	r3, [r7, #0]
 8007e18:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007e1a:	683b      	ldr	r3, [r7, #0]
 8007e1c:	685b      	ldr	r3, [r3, #4]
 8007e1e:	683a      	ldr	r2, [r7, #0]
 8007e20:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007e22:	683b      	ldr	r3, [r7, #0]
 8007e24:	68fa      	ldr	r2, [r7, #12]
 8007e26:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	683a      	ldr	r2, [r7, #0]
 8007e2c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007e2e:	683b      	ldr	r3, [r7, #0]
 8007e30:	687a      	ldr	r2, [r7, #4]
 8007e32:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	1c5a      	adds	r2, r3, #1
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	601a      	str	r2, [r3, #0]
}
 8007e3e:	bf00      	nop
 8007e40:	3714      	adds	r7, #20
 8007e42:	46bd      	mov	sp, r7
 8007e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e48:	4770      	bx	lr

08007e4a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007e4a:	b480      	push	{r7}
 8007e4c:	b085      	sub	sp, #20
 8007e4e:	af00      	add	r7, sp, #0
 8007e50:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	691b      	ldr	r3, [r3, #16]
 8007e56:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	685b      	ldr	r3, [r3, #4]
 8007e5c:	687a      	ldr	r2, [r7, #4]
 8007e5e:	6892      	ldr	r2, [r2, #8]
 8007e60:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	689b      	ldr	r3, [r3, #8]
 8007e66:	687a      	ldr	r2, [r7, #4]
 8007e68:	6852      	ldr	r2, [r2, #4]
 8007e6a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	685b      	ldr	r3, [r3, #4]
 8007e70:	687a      	ldr	r2, [r7, #4]
 8007e72:	429a      	cmp	r2, r3
 8007e74:	d103      	bne.n	8007e7e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	689a      	ldr	r2, [r3, #8]
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	2200      	movs	r2, #0
 8007e82:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	1e5a      	subs	r2, r3, #1
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	681b      	ldr	r3, [r3, #0]
}
 8007e92:	4618      	mov	r0, r3
 8007e94:	3714      	adds	r7, #20
 8007e96:	46bd      	mov	sp, r7
 8007e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e9c:	4770      	bx	lr
	...

08007ea0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007ea0:	b580      	push	{r7, lr}
 8007ea2:	b084      	sub	sp, #16
 8007ea4:	af00      	add	r7, sp, #0
 8007ea6:	6078      	str	r0, [r7, #4]
 8007ea8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d10a      	bne.n	8007eca <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007eb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007eb8:	f383 8811 	msr	BASEPRI, r3
 8007ebc:	f3bf 8f6f 	isb	sy
 8007ec0:	f3bf 8f4f 	dsb	sy
 8007ec4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007ec6:	bf00      	nop
 8007ec8:	e7fe      	b.n	8007ec8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007eca:	f002 f86b 	bl	8009fa4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	681a      	ldr	r2, [r3, #0]
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ed6:	68f9      	ldr	r1, [r7, #12]
 8007ed8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007eda:	fb01 f303 	mul.w	r3, r1, r3
 8007ede:	441a      	add	r2, r3
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	2200      	movs	r2, #0
 8007ee8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	681a      	ldr	r2, [r3, #0]
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	681a      	ldr	r2, [r3, #0]
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007efa:	3b01      	subs	r3, #1
 8007efc:	68f9      	ldr	r1, [r7, #12]
 8007efe:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007f00:	fb01 f303 	mul.w	r3, r1, r3
 8007f04:	441a      	add	r2, r3
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	22ff      	movs	r2, #255	; 0xff
 8007f0e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	22ff      	movs	r2, #255	; 0xff
 8007f16:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8007f1a:	683b      	ldr	r3, [r7, #0]
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d114      	bne.n	8007f4a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	691b      	ldr	r3, [r3, #16]
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d01a      	beq.n	8007f5e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	3310      	adds	r3, #16
 8007f2c:	4618      	mov	r0, r3
 8007f2e:	f001 f943 	bl	80091b8 <xTaskRemoveFromEventList>
 8007f32:	4603      	mov	r3, r0
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d012      	beq.n	8007f5e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007f38:	4b0c      	ldr	r3, [pc, #48]	; (8007f6c <xQueueGenericReset+0xcc>)
 8007f3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007f3e:	601a      	str	r2, [r3, #0]
 8007f40:	f3bf 8f4f 	dsb	sy
 8007f44:	f3bf 8f6f 	isb	sy
 8007f48:	e009      	b.n	8007f5e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	3310      	adds	r3, #16
 8007f4e:	4618      	mov	r0, r3
 8007f50:	f7ff fef1 	bl	8007d36 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	3324      	adds	r3, #36	; 0x24
 8007f58:	4618      	mov	r0, r3
 8007f5a:	f7ff feec 	bl	8007d36 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007f5e:	f002 f851 	bl	800a004 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007f62:	2301      	movs	r3, #1
}
 8007f64:	4618      	mov	r0, r3
 8007f66:	3710      	adds	r7, #16
 8007f68:	46bd      	mov	sp, r7
 8007f6a:	bd80      	pop	{r7, pc}
 8007f6c:	e000ed04 	.word	0xe000ed04

08007f70 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007f70:	b580      	push	{r7, lr}
 8007f72:	b08e      	sub	sp, #56	; 0x38
 8007f74:	af02      	add	r7, sp, #8
 8007f76:	60f8      	str	r0, [r7, #12]
 8007f78:	60b9      	str	r1, [r7, #8]
 8007f7a:	607a      	str	r2, [r7, #4]
 8007f7c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d10a      	bne.n	8007f9a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8007f84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f88:	f383 8811 	msr	BASEPRI, r3
 8007f8c:	f3bf 8f6f 	isb	sy
 8007f90:	f3bf 8f4f 	dsb	sy
 8007f94:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007f96:	bf00      	nop
 8007f98:	e7fe      	b.n	8007f98 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007f9a:	683b      	ldr	r3, [r7, #0]
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d10a      	bne.n	8007fb6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8007fa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fa4:	f383 8811 	msr	BASEPRI, r3
 8007fa8:	f3bf 8f6f 	isb	sy
 8007fac:	f3bf 8f4f 	dsb	sy
 8007fb0:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007fb2:	bf00      	nop
 8007fb4:	e7fe      	b.n	8007fb4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d002      	beq.n	8007fc2 <xQueueGenericCreateStatic+0x52>
 8007fbc:	68bb      	ldr	r3, [r7, #8]
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d001      	beq.n	8007fc6 <xQueueGenericCreateStatic+0x56>
 8007fc2:	2301      	movs	r3, #1
 8007fc4:	e000      	b.n	8007fc8 <xQueueGenericCreateStatic+0x58>
 8007fc6:	2300      	movs	r3, #0
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d10a      	bne.n	8007fe2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8007fcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fd0:	f383 8811 	msr	BASEPRI, r3
 8007fd4:	f3bf 8f6f 	isb	sy
 8007fd8:	f3bf 8f4f 	dsb	sy
 8007fdc:	623b      	str	r3, [r7, #32]
}
 8007fde:	bf00      	nop
 8007fe0:	e7fe      	b.n	8007fe0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d102      	bne.n	8007fee <xQueueGenericCreateStatic+0x7e>
 8007fe8:	68bb      	ldr	r3, [r7, #8]
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d101      	bne.n	8007ff2 <xQueueGenericCreateStatic+0x82>
 8007fee:	2301      	movs	r3, #1
 8007ff0:	e000      	b.n	8007ff4 <xQueueGenericCreateStatic+0x84>
 8007ff2:	2300      	movs	r3, #0
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d10a      	bne.n	800800e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8007ff8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ffc:	f383 8811 	msr	BASEPRI, r3
 8008000:	f3bf 8f6f 	isb	sy
 8008004:	f3bf 8f4f 	dsb	sy
 8008008:	61fb      	str	r3, [r7, #28]
}
 800800a:	bf00      	nop
 800800c:	e7fe      	b.n	800800c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800800e:	2348      	movs	r3, #72	; 0x48
 8008010:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008012:	697b      	ldr	r3, [r7, #20]
 8008014:	2b48      	cmp	r3, #72	; 0x48
 8008016:	d00a      	beq.n	800802e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8008018:	f04f 0350 	mov.w	r3, #80	; 0x50
 800801c:	f383 8811 	msr	BASEPRI, r3
 8008020:	f3bf 8f6f 	isb	sy
 8008024:	f3bf 8f4f 	dsb	sy
 8008028:	61bb      	str	r3, [r7, #24]
}
 800802a:	bf00      	nop
 800802c:	e7fe      	b.n	800802c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800802e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008030:	683b      	ldr	r3, [r7, #0]
 8008032:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8008034:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008036:	2b00      	cmp	r3, #0
 8008038:	d009      	beq.n	800804e <xQueueGenericCreateStatic+0xde>
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800803a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800803e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008040:	9300      	str	r3, [sp, #0]
 8008042:	4613      	mov	r3, r2
 8008044:	687a      	ldr	r2, [r7, #4]
 8008046:	68b9      	ldr	r1, [r7, #8]
 8008048:	68f8      	ldr	r0, [r7, #12]
 800804a:	f000 f805 	bl	8008058 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800804e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8008050:	4618      	mov	r0, r3
 8008052:	3730      	adds	r7, #48	; 0x30
 8008054:	46bd      	mov	sp, r7
 8008056:	bd80      	pop	{r7, pc}

08008058 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008058:	b580      	push	{r7, lr}
 800805a:	b084      	sub	sp, #16
 800805c:	af00      	add	r7, sp, #0
 800805e:	60f8      	str	r0, [r7, #12]
 8008060:	60b9      	str	r1, [r7, #8]
 8008062:	607a      	str	r2, [r7, #4]
 8008064:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008066:	68bb      	ldr	r3, [r7, #8]
 8008068:	2b00      	cmp	r3, #0
 800806a:	d103      	bne.n	8008074 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800806c:	69bb      	ldr	r3, [r7, #24]
 800806e:	69ba      	ldr	r2, [r7, #24]
 8008070:	601a      	str	r2, [r3, #0]
 8008072:	e002      	b.n	800807a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008074:	69bb      	ldr	r3, [r7, #24]
 8008076:	687a      	ldr	r2, [r7, #4]
 8008078:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800807a:	69bb      	ldr	r3, [r7, #24]
 800807c:	68fa      	ldr	r2, [r7, #12]
 800807e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008080:	69bb      	ldr	r3, [r7, #24]
 8008082:	68ba      	ldr	r2, [r7, #8]
 8008084:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008086:	2101      	movs	r1, #1
 8008088:	69b8      	ldr	r0, [r7, #24]
 800808a:	f7ff ff09 	bl	8007ea0 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800808e:	bf00      	nop
 8008090:	3710      	adds	r7, #16
 8008092:	46bd      	mov	sp, r7
 8008094:	bd80      	pop	{r7, pc}
	...

08008098 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008098:	b580      	push	{r7, lr}
 800809a:	b08e      	sub	sp, #56	; 0x38
 800809c:	af00      	add	r7, sp, #0
 800809e:	60f8      	str	r0, [r7, #12]
 80080a0:	60b9      	str	r1, [r7, #8]
 80080a2:	607a      	str	r2, [r7, #4]
 80080a4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80080a6:	2300      	movs	r3, #0
 80080a8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80080ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d10a      	bne.n	80080ca <xQueueGenericSend+0x32>
	__asm volatile
 80080b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080b8:	f383 8811 	msr	BASEPRI, r3
 80080bc:	f3bf 8f6f 	isb	sy
 80080c0:	f3bf 8f4f 	dsb	sy
 80080c4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80080c6:	bf00      	nop
 80080c8:	e7fe      	b.n	80080c8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80080ca:	68bb      	ldr	r3, [r7, #8]
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d103      	bne.n	80080d8 <xQueueGenericSend+0x40>
 80080d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d101      	bne.n	80080dc <xQueueGenericSend+0x44>
 80080d8:	2301      	movs	r3, #1
 80080da:	e000      	b.n	80080de <xQueueGenericSend+0x46>
 80080dc:	2300      	movs	r3, #0
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d10a      	bne.n	80080f8 <xQueueGenericSend+0x60>
	__asm volatile
 80080e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080e6:	f383 8811 	msr	BASEPRI, r3
 80080ea:	f3bf 8f6f 	isb	sy
 80080ee:	f3bf 8f4f 	dsb	sy
 80080f2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80080f4:	bf00      	nop
 80080f6:	e7fe      	b.n	80080f6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80080f8:	683b      	ldr	r3, [r7, #0]
 80080fa:	2b02      	cmp	r3, #2
 80080fc:	d103      	bne.n	8008106 <xQueueGenericSend+0x6e>
 80080fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008100:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008102:	2b01      	cmp	r3, #1
 8008104:	d101      	bne.n	800810a <xQueueGenericSend+0x72>
 8008106:	2301      	movs	r3, #1
 8008108:	e000      	b.n	800810c <xQueueGenericSend+0x74>
 800810a:	2300      	movs	r3, #0
 800810c:	2b00      	cmp	r3, #0
 800810e:	d10a      	bne.n	8008126 <xQueueGenericSend+0x8e>
	__asm volatile
 8008110:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008114:	f383 8811 	msr	BASEPRI, r3
 8008118:	f3bf 8f6f 	isb	sy
 800811c:	f3bf 8f4f 	dsb	sy
 8008120:	623b      	str	r3, [r7, #32]
}
 8008122:	bf00      	nop
 8008124:	e7fe      	b.n	8008124 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008126:	f001 f9dd 	bl	80094e4 <xTaskGetSchedulerState>
 800812a:	4603      	mov	r3, r0
 800812c:	2b00      	cmp	r3, #0
 800812e:	d102      	bne.n	8008136 <xQueueGenericSend+0x9e>
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	2b00      	cmp	r3, #0
 8008134:	d101      	bne.n	800813a <xQueueGenericSend+0xa2>
 8008136:	2301      	movs	r3, #1
 8008138:	e000      	b.n	800813c <xQueueGenericSend+0xa4>
 800813a:	2300      	movs	r3, #0
 800813c:	2b00      	cmp	r3, #0
 800813e:	d10a      	bne.n	8008156 <xQueueGenericSend+0xbe>
	__asm volatile
 8008140:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008144:	f383 8811 	msr	BASEPRI, r3
 8008148:	f3bf 8f6f 	isb	sy
 800814c:	f3bf 8f4f 	dsb	sy
 8008150:	61fb      	str	r3, [r7, #28]
}
 8008152:	bf00      	nop
 8008154:	e7fe      	b.n	8008154 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008156:	f001 ff25 	bl	8009fa4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800815a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800815c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800815e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008160:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008162:	429a      	cmp	r2, r3
 8008164:	d302      	bcc.n	800816c <xQueueGenericSend+0xd4>
 8008166:	683b      	ldr	r3, [r7, #0]
 8008168:	2b02      	cmp	r3, #2
 800816a:	d129      	bne.n	80081c0 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800816c:	683a      	ldr	r2, [r7, #0]
 800816e:	68b9      	ldr	r1, [r7, #8]
 8008170:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008172:	f000 fa8b 	bl	800868c <prvCopyDataToQueue>
 8008176:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008178:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800817a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800817c:	2b00      	cmp	r3, #0
 800817e:	d010      	beq.n	80081a2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008180:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008182:	3324      	adds	r3, #36	; 0x24
 8008184:	4618      	mov	r0, r3
 8008186:	f001 f817 	bl	80091b8 <xTaskRemoveFromEventList>
 800818a:	4603      	mov	r3, r0
 800818c:	2b00      	cmp	r3, #0
 800818e:	d013      	beq.n	80081b8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008190:	4b3f      	ldr	r3, [pc, #252]	; (8008290 <xQueueGenericSend+0x1f8>)
 8008192:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008196:	601a      	str	r2, [r3, #0]
 8008198:	f3bf 8f4f 	dsb	sy
 800819c:	f3bf 8f6f 	isb	sy
 80081a0:	e00a      	b.n	80081b8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80081a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d007      	beq.n	80081b8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80081a8:	4b39      	ldr	r3, [pc, #228]	; (8008290 <xQueueGenericSend+0x1f8>)
 80081aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80081ae:	601a      	str	r2, [r3, #0]
 80081b0:	f3bf 8f4f 	dsb	sy
 80081b4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80081b8:	f001 ff24 	bl	800a004 <vPortExitCritical>
				return pdPASS;
 80081bc:	2301      	movs	r3, #1
 80081be:	e063      	b.n	8008288 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d103      	bne.n	80081ce <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80081c6:	f001 ff1d 	bl	800a004 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80081ca:	2300      	movs	r3, #0
 80081cc:	e05c      	b.n	8008288 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80081ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d106      	bne.n	80081e2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80081d4:	f107 0314 	add.w	r3, r7, #20
 80081d8:	4618      	mov	r0, r3
 80081da:	f001 f84f 	bl	800927c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80081de:	2301      	movs	r3, #1
 80081e0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80081e2:	f001 ff0f 	bl	800a004 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80081e6:	f000 fdc9 	bl	8008d7c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80081ea:	f001 fedb 	bl	8009fa4 <vPortEnterCritical>
 80081ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081f0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80081f4:	b25b      	sxtb	r3, r3
 80081f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081fa:	d103      	bne.n	8008204 <xQueueGenericSend+0x16c>
 80081fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081fe:	2200      	movs	r2, #0
 8008200:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008204:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008206:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800820a:	b25b      	sxtb	r3, r3
 800820c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008210:	d103      	bne.n	800821a <xQueueGenericSend+0x182>
 8008212:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008214:	2200      	movs	r2, #0
 8008216:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800821a:	f001 fef3 	bl	800a004 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800821e:	1d3a      	adds	r2, r7, #4
 8008220:	f107 0314 	add.w	r3, r7, #20
 8008224:	4611      	mov	r1, r2
 8008226:	4618      	mov	r0, r3
 8008228:	f001 f83e 	bl	80092a8 <xTaskCheckForTimeOut>
 800822c:	4603      	mov	r3, r0
 800822e:	2b00      	cmp	r3, #0
 8008230:	d124      	bne.n	800827c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008232:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008234:	f000 fb22 	bl	800887c <prvIsQueueFull>
 8008238:	4603      	mov	r3, r0
 800823a:	2b00      	cmp	r3, #0
 800823c:	d018      	beq.n	8008270 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800823e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008240:	3310      	adds	r3, #16
 8008242:	687a      	ldr	r2, [r7, #4]
 8008244:	4611      	mov	r1, r2
 8008246:	4618      	mov	r0, r3
 8008248:	f000 ff66 	bl	8009118 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800824c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800824e:	f000 faad 	bl	80087ac <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008252:	f000 fda1 	bl	8008d98 <xTaskResumeAll>
 8008256:	4603      	mov	r3, r0
 8008258:	2b00      	cmp	r3, #0
 800825a:	f47f af7c 	bne.w	8008156 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800825e:	4b0c      	ldr	r3, [pc, #48]	; (8008290 <xQueueGenericSend+0x1f8>)
 8008260:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008264:	601a      	str	r2, [r3, #0]
 8008266:	f3bf 8f4f 	dsb	sy
 800826a:	f3bf 8f6f 	isb	sy
 800826e:	e772      	b.n	8008156 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008270:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008272:	f000 fa9b 	bl	80087ac <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008276:	f000 fd8f 	bl	8008d98 <xTaskResumeAll>
 800827a:	e76c      	b.n	8008156 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800827c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800827e:	f000 fa95 	bl	80087ac <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008282:	f000 fd89 	bl	8008d98 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008286:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008288:	4618      	mov	r0, r3
 800828a:	3738      	adds	r7, #56	; 0x38
 800828c:	46bd      	mov	sp, r7
 800828e:	bd80      	pop	{r7, pc}
 8008290:	e000ed04 	.word	0xe000ed04

08008294 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008294:	b580      	push	{r7, lr}
 8008296:	b090      	sub	sp, #64	; 0x40
 8008298:	af00      	add	r7, sp, #0
 800829a:	60f8      	str	r0, [r7, #12]
 800829c:	60b9      	str	r1, [r7, #8]
 800829e:	607a      	str	r2, [r7, #4]
 80082a0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80082a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d10a      	bne.n	80082c2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80082ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082b0:	f383 8811 	msr	BASEPRI, r3
 80082b4:	f3bf 8f6f 	isb	sy
 80082b8:	f3bf 8f4f 	dsb	sy
 80082bc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80082be:	bf00      	nop
 80082c0:	e7fe      	b.n	80082c0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80082c2:	68bb      	ldr	r3, [r7, #8]
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d103      	bne.n	80082d0 <xQueueGenericSendFromISR+0x3c>
 80082c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d101      	bne.n	80082d4 <xQueueGenericSendFromISR+0x40>
 80082d0:	2301      	movs	r3, #1
 80082d2:	e000      	b.n	80082d6 <xQueueGenericSendFromISR+0x42>
 80082d4:	2300      	movs	r3, #0
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d10a      	bne.n	80082f0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80082da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082de:	f383 8811 	msr	BASEPRI, r3
 80082e2:	f3bf 8f6f 	isb	sy
 80082e6:	f3bf 8f4f 	dsb	sy
 80082ea:	627b      	str	r3, [r7, #36]	; 0x24
}
 80082ec:	bf00      	nop
 80082ee:	e7fe      	b.n	80082ee <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80082f0:	683b      	ldr	r3, [r7, #0]
 80082f2:	2b02      	cmp	r3, #2
 80082f4:	d103      	bne.n	80082fe <xQueueGenericSendFromISR+0x6a>
 80082f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80082fa:	2b01      	cmp	r3, #1
 80082fc:	d101      	bne.n	8008302 <xQueueGenericSendFromISR+0x6e>
 80082fe:	2301      	movs	r3, #1
 8008300:	e000      	b.n	8008304 <xQueueGenericSendFromISR+0x70>
 8008302:	2300      	movs	r3, #0
 8008304:	2b00      	cmp	r3, #0
 8008306:	d10a      	bne.n	800831e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8008308:	f04f 0350 	mov.w	r3, #80	; 0x50
 800830c:	f383 8811 	msr	BASEPRI, r3
 8008310:	f3bf 8f6f 	isb	sy
 8008314:	f3bf 8f4f 	dsb	sy
 8008318:	623b      	str	r3, [r7, #32]
}
 800831a:	bf00      	nop
 800831c:	e7fe      	b.n	800831c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800831e:	f001 ff23 	bl	800a168 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008322:	f3ef 8211 	mrs	r2, BASEPRI
 8008326:	f04f 0350 	mov.w	r3, #80	; 0x50
 800832a:	f383 8811 	msr	BASEPRI, r3
 800832e:	f3bf 8f6f 	isb	sy
 8008332:	f3bf 8f4f 	dsb	sy
 8008336:	61fa      	str	r2, [r7, #28]
 8008338:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800833a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800833c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800833e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008340:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008342:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008344:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008346:	429a      	cmp	r2, r3
 8008348:	d302      	bcc.n	8008350 <xQueueGenericSendFromISR+0xbc>
 800834a:	683b      	ldr	r3, [r7, #0]
 800834c:	2b02      	cmp	r3, #2
 800834e:	d12f      	bne.n	80083b0 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008350:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008352:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008356:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800835a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800835c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800835e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008360:	683a      	ldr	r2, [r7, #0]
 8008362:	68b9      	ldr	r1, [r7, #8]
 8008364:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008366:	f000 f991 	bl	800868c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800836a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800836e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008372:	d112      	bne.n	800839a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008374:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008378:	2b00      	cmp	r3, #0
 800837a:	d016      	beq.n	80083aa <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800837c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800837e:	3324      	adds	r3, #36	; 0x24
 8008380:	4618      	mov	r0, r3
 8008382:	f000 ff19 	bl	80091b8 <xTaskRemoveFromEventList>
 8008386:	4603      	mov	r3, r0
 8008388:	2b00      	cmp	r3, #0
 800838a:	d00e      	beq.n	80083aa <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	2b00      	cmp	r3, #0
 8008390:	d00b      	beq.n	80083aa <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	2201      	movs	r2, #1
 8008396:	601a      	str	r2, [r3, #0]
 8008398:	e007      	b.n	80083aa <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800839a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800839e:	3301      	adds	r3, #1
 80083a0:	b2db      	uxtb	r3, r3
 80083a2:	b25a      	sxtb	r2, r3
 80083a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80083aa:	2301      	movs	r3, #1
 80083ac:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80083ae:	e001      	b.n	80083b4 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80083b0:	2300      	movs	r3, #0
 80083b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80083b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083b6:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80083b8:	697b      	ldr	r3, [r7, #20]
 80083ba:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80083be:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80083c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80083c2:	4618      	mov	r0, r3
 80083c4:	3740      	adds	r7, #64	; 0x40
 80083c6:	46bd      	mov	sp, r7
 80083c8:	bd80      	pop	{r7, pc}
	...

080083cc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80083cc:	b580      	push	{r7, lr}
 80083ce:	b08c      	sub	sp, #48	; 0x30
 80083d0:	af00      	add	r7, sp, #0
 80083d2:	60f8      	str	r0, [r7, #12]
 80083d4:	60b9      	str	r1, [r7, #8]
 80083d6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80083d8:	2300      	movs	r3, #0
 80083da:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80083e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d10a      	bne.n	80083fc <xQueueReceive+0x30>
	__asm volatile
 80083e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083ea:	f383 8811 	msr	BASEPRI, r3
 80083ee:	f3bf 8f6f 	isb	sy
 80083f2:	f3bf 8f4f 	dsb	sy
 80083f6:	623b      	str	r3, [r7, #32]
}
 80083f8:	bf00      	nop
 80083fa:	e7fe      	b.n	80083fa <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80083fc:	68bb      	ldr	r3, [r7, #8]
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d103      	bne.n	800840a <xQueueReceive+0x3e>
 8008402:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008406:	2b00      	cmp	r3, #0
 8008408:	d101      	bne.n	800840e <xQueueReceive+0x42>
 800840a:	2301      	movs	r3, #1
 800840c:	e000      	b.n	8008410 <xQueueReceive+0x44>
 800840e:	2300      	movs	r3, #0
 8008410:	2b00      	cmp	r3, #0
 8008412:	d10a      	bne.n	800842a <xQueueReceive+0x5e>
	__asm volatile
 8008414:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008418:	f383 8811 	msr	BASEPRI, r3
 800841c:	f3bf 8f6f 	isb	sy
 8008420:	f3bf 8f4f 	dsb	sy
 8008424:	61fb      	str	r3, [r7, #28]
}
 8008426:	bf00      	nop
 8008428:	e7fe      	b.n	8008428 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800842a:	f001 f85b 	bl	80094e4 <xTaskGetSchedulerState>
 800842e:	4603      	mov	r3, r0
 8008430:	2b00      	cmp	r3, #0
 8008432:	d102      	bne.n	800843a <xQueueReceive+0x6e>
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	2b00      	cmp	r3, #0
 8008438:	d101      	bne.n	800843e <xQueueReceive+0x72>
 800843a:	2301      	movs	r3, #1
 800843c:	e000      	b.n	8008440 <xQueueReceive+0x74>
 800843e:	2300      	movs	r3, #0
 8008440:	2b00      	cmp	r3, #0
 8008442:	d10a      	bne.n	800845a <xQueueReceive+0x8e>
	__asm volatile
 8008444:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008448:	f383 8811 	msr	BASEPRI, r3
 800844c:	f3bf 8f6f 	isb	sy
 8008450:	f3bf 8f4f 	dsb	sy
 8008454:	61bb      	str	r3, [r7, #24]
}
 8008456:	bf00      	nop
 8008458:	e7fe      	b.n	8008458 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800845a:	f001 fda3 	bl	8009fa4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800845e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008460:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008462:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008466:	2b00      	cmp	r3, #0
 8008468:	d01f      	beq.n	80084aa <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800846a:	68b9      	ldr	r1, [r7, #8]
 800846c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800846e:	f000 f977 	bl	8008760 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008474:	1e5a      	subs	r2, r3, #1
 8008476:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008478:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800847a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800847c:	691b      	ldr	r3, [r3, #16]
 800847e:	2b00      	cmp	r3, #0
 8008480:	d00f      	beq.n	80084a2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008482:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008484:	3310      	adds	r3, #16
 8008486:	4618      	mov	r0, r3
 8008488:	f000 fe96 	bl	80091b8 <xTaskRemoveFromEventList>
 800848c:	4603      	mov	r3, r0
 800848e:	2b00      	cmp	r3, #0
 8008490:	d007      	beq.n	80084a2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008492:	4b3d      	ldr	r3, [pc, #244]	; (8008588 <xQueueReceive+0x1bc>)
 8008494:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008498:	601a      	str	r2, [r3, #0]
 800849a:	f3bf 8f4f 	dsb	sy
 800849e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80084a2:	f001 fdaf 	bl	800a004 <vPortExitCritical>
				return pdPASS;
 80084a6:	2301      	movs	r3, #1
 80084a8:	e069      	b.n	800857e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d103      	bne.n	80084b8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80084b0:	f001 fda8 	bl	800a004 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80084b4:	2300      	movs	r3, #0
 80084b6:	e062      	b.n	800857e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80084b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d106      	bne.n	80084cc <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80084be:	f107 0310 	add.w	r3, r7, #16
 80084c2:	4618      	mov	r0, r3
 80084c4:	f000 feda 	bl	800927c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80084c8:	2301      	movs	r3, #1
 80084ca:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80084cc:	f001 fd9a 	bl	800a004 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80084d0:	f000 fc54 	bl	8008d7c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80084d4:	f001 fd66 	bl	8009fa4 <vPortEnterCritical>
 80084d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084da:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80084de:	b25b      	sxtb	r3, r3
 80084e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084e4:	d103      	bne.n	80084ee <xQueueReceive+0x122>
 80084e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084e8:	2200      	movs	r2, #0
 80084ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80084ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084f0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80084f4:	b25b      	sxtb	r3, r3
 80084f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084fa:	d103      	bne.n	8008504 <xQueueReceive+0x138>
 80084fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084fe:	2200      	movs	r2, #0
 8008500:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008504:	f001 fd7e 	bl	800a004 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008508:	1d3a      	adds	r2, r7, #4
 800850a:	f107 0310 	add.w	r3, r7, #16
 800850e:	4611      	mov	r1, r2
 8008510:	4618      	mov	r0, r3
 8008512:	f000 fec9 	bl	80092a8 <xTaskCheckForTimeOut>
 8008516:	4603      	mov	r3, r0
 8008518:	2b00      	cmp	r3, #0
 800851a:	d123      	bne.n	8008564 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800851c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800851e:	f000 f997 	bl	8008850 <prvIsQueueEmpty>
 8008522:	4603      	mov	r3, r0
 8008524:	2b00      	cmp	r3, #0
 8008526:	d017      	beq.n	8008558 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008528:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800852a:	3324      	adds	r3, #36	; 0x24
 800852c:	687a      	ldr	r2, [r7, #4]
 800852e:	4611      	mov	r1, r2
 8008530:	4618      	mov	r0, r3
 8008532:	f000 fdf1 	bl	8009118 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008536:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008538:	f000 f938 	bl	80087ac <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800853c:	f000 fc2c 	bl	8008d98 <xTaskResumeAll>
 8008540:	4603      	mov	r3, r0
 8008542:	2b00      	cmp	r3, #0
 8008544:	d189      	bne.n	800845a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8008546:	4b10      	ldr	r3, [pc, #64]	; (8008588 <xQueueReceive+0x1bc>)
 8008548:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800854c:	601a      	str	r2, [r3, #0]
 800854e:	f3bf 8f4f 	dsb	sy
 8008552:	f3bf 8f6f 	isb	sy
 8008556:	e780      	b.n	800845a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008558:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800855a:	f000 f927 	bl	80087ac <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800855e:	f000 fc1b 	bl	8008d98 <xTaskResumeAll>
 8008562:	e77a      	b.n	800845a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008564:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008566:	f000 f921 	bl	80087ac <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800856a:	f000 fc15 	bl	8008d98 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800856e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008570:	f000 f96e 	bl	8008850 <prvIsQueueEmpty>
 8008574:	4603      	mov	r3, r0
 8008576:	2b00      	cmp	r3, #0
 8008578:	f43f af6f 	beq.w	800845a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800857c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800857e:	4618      	mov	r0, r3
 8008580:	3730      	adds	r7, #48	; 0x30
 8008582:	46bd      	mov	sp, r7
 8008584:	bd80      	pop	{r7, pc}
 8008586:	bf00      	nop
 8008588:	e000ed04 	.word	0xe000ed04

0800858c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800858c:	b580      	push	{r7, lr}
 800858e:	b08e      	sub	sp, #56	; 0x38
 8008590:	af00      	add	r7, sp, #0
 8008592:	60f8      	str	r0, [r7, #12]
 8008594:	60b9      	str	r1, [r7, #8]
 8008596:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800859c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d10a      	bne.n	80085b8 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 80085a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085a6:	f383 8811 	msr	BASEPRI, r3
 80085aa:	f3bf 8f6f 	isb	sy
 80085ae:	f3bf 8f4f 	dsb	sy
 80085b2:	623b      	str	r3, [r7, #32]
}
 80085b4:	bf00      	nop
 80085b6:	e7fe      	b.n	80085b6 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80085b8:	68bb      	ldr	r3, [r7, #8]
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d103      	bne.n	80085c6 <xQueueReceiveFromISR+0x3a>
 80085be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d101      	bne.n	80085ca <xQueueReceiveFromISR+0x3e>
 80085c6:	2301      	movs	r3, #1
 80085c8:	e000      	b.n	80085cc <xQueueReceiveFromISR+0x40>
 80085ca:	2300      	movs	r3, #0
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d10a      	bne.n	80085e6 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 80085d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085d4:	f383 8811 	msr	BASEPRI, r3
 80085d8:	f3bf 8f6f 	isb	sy
 80085dc:	f3bf 8f4f 	dsb	sy
 80085e0:	61fb      	str	r3, [r7, #28]
}
 80085e2:	bf00      	nop
 80085e4:	e7fe      	b.n	80085e4 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80085e6:	f001 fdbf 	bl	800a168 <vPortValidateInterruptPriority>
	__asm volatile
 80085ea:	f3ef 8211 	mrs	r2, BASEPRI
 80085ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085f2:	f383 8811 	msr	BASEPRI, r3
 80085f6:	f3bf 8f6f 	isb	sy
 80085fa:	f3bf 8f4f 	dsb	sy
 80085fe:	61ba      	str	r2, [r7, #24]
 8008600:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8008602:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008604:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008606:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008608:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800860a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800860c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800860e:	2b00      	cmp	r3, #0
 8008610:	d02f      	beq.n	8008672 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8008612:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008614:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008618:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800861c:	68b9      	ldr	r1, [r7, #8]
 800861e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008620:	f000 f89e 	bl	8008760 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008624:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008626:	1e5a      	subs	r2, r3, #1
 8008628:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800862a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800862c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008630:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008634:	d112      	bne.n	800865c <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008636:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008638:	691b      	ldr	r3, [r3, #16]
 800863a:	2b00      	cmp	r3, #0
 800863c:	d016      	beq.n	800866c <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800863e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008640:	3310      	adds	r3, #16
 8008642:	4618      	mov	r0, r3
 8008644:	f000 fdb8 	bl	80091b8 <xTaskRemoveFromEventList>
 8008648:	4603      	mov	r3, r0
 800864a:	2b00      	cmp	r3, #0
 800864c:	d00e      	beq.n	800866c <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	2b00      	cmp	r3, #0
 8008652:	d00b      	beq.n	800866c <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	2201      	movs	r2, #1
 8008658:	601a      	str	r2, [r3, #0]
 800865a:	e007      	b.n	800866c <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800865c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008660:	3301      	adds	r3, #1
 8008662:	b2db      	uxtb	r3, r3
 8008664:	b25a      	sxtb	r2, r3
 8008666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008668:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800866c:	2301      	movs	r3, #1
 800866e:	637b      	str	r3, [r7, #52]	; 0x34
 8008670:	e001      	b.n	8008676 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8008672:	2300      	movs	r3, #0
 8008674:	637b      	str	r3, [r7, #52]	; 0x34
 8008676:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008678:	613b      	str	r3, [r7, #16]
	__asm volatile
 800867a:	693b      	ldr	r3, [r7, #16]
 800867c:	f383 8811 	msr	BASEPRI, r3
}
 8008680:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008682:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008684:	4618      	mov	r0, r3
 8008686:	3738      	adds	r7, #56	; 0x38
 8008688:	46bd      	mov	sp, r7
 800868a:	bd80      	pop	{r7, pc}

0800868c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800868c:	b580      	push	{r7, lr}
 800868e:	b086      	sub	sp, #24
 8008690:	af00      	add	r7, sp, #0
 8008692:	60f8      	str	r0, [r7, #12]
 8008694:	60b9      	str	r1, [r7, #8]
 8008696:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008698:	2300      	movs	r3, #0
 800869a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086a0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d10d      	bne.n	80086c6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d14d      	bne.n	800874e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	689b      	ldr	r3, [r3, #8]
 80086b6:	4618      	mov	r0, r3
 80086b8:	f000 ff32 	bl	8009520 <xTaskPriorityDisinherit>
 80086bc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	2200      	movs	r2, #0
 80086c2:	609a      	str	r2, [r3, #8]
 80086c4:	e043      	b.n	800874e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d119      	bne.n	8008700 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	6858      	ldr	r0, [r3, #4]
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086d4:	461a      	mov	r2, r3
 80086d6:	68b9      	ldr	r1, [r7, #8]
 80086d8:	f001 fff7 	bl	800a6ca <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	685a      	ldr	r2, [r3, #4]
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086e4:	441a      	add	r2, r3
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	685a      	ldr	r2, [r3, #4]
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	689b      	ldr	r3, [r3, #8]
 80086f2:	429a      	cmp	r2, r3
 80086f4:	d32b      	bcc.n	800874e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	681a      	ldr	r2, [r3, #0]
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	605a      	str	r2, [r3, #4]
 80086fe:	e026      	b.n	800874e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	68d8      	ldr	r0, [r3, #12]
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008708:	461a      	mov	r2, r3
 800870a:	68b9      	ldr	r1, [r7, #8]
 800870c:	f001 ffdd 	bl	800a6ca <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	68da      	ldr	r2, [r3, #12]
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008718:	425b      	negs	r3, r3
 800871a:	441a      	add	r2, r3
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	68da      	ldr	r2, [r3, #12]
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	429a      	cmp	r2, r3
 800872a:	d207      	bcs.n	800873c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	689a      	ldr	r2, [r3, #8]
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008734:	425b      	negs	r3, r3
 8008736:	441a      	add	r2, r3
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	2b02      	cmp	r3, #2
 8008740:	d105      	bne.n	800874e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008742:	693b      	ldr	r3, [r7, #16]
 8008744:	2b00      	cmp	r3, #0
 8008746:	d002      	beq.n	800874e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008748:	693b      	ldr	r3, [r7, #16]
 800874a:	3b01      	subs	r3, #1
 800874c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800874e:	693b      	ldr	r3, [r7, #16]
 8008750:	1c5a      	adds	r2, r3, #1
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8008756:	697b      	ldr	r3, [r7, #20]
}
 8008758:	4618      	mov	r0, r3
 800875a:	3718      	adds	r7, #24
 800875c:	46bd      	mov	sp, r7
 800875e:	bd80      	pop	{r7, pc}

08008760 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008760:	b580      	push	{r7, lr}
 8008762:	b082      	sub	sp, #8
 8008764:	af00      	add	r7, sp, #0
 8008766:	6078      	str	r0, [r7, #4]
 8008768:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800876e:	2b00      	cmp	r3, #0
 8008770:	d018      	beq.n	80087a4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	68da      	ldr	r2, [r3, #12]
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800877a:	441a      	add	r2, r3
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	68da      	ldr	r2, [r3, #12]
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	689b      	ldr	r3, [r3, #8]
 8008788:	429a      	cmp	r2, r3
 800878a:	d303      	bcc.n	8008794 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	681a      	ldr	r2, [r3, #0]
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	68d9      	ldr	r1, [r3, #12]
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800879c:	461a      	mov	r2, r3
 800879e:	6838      	ldr	r0, [r7, #0]
 80087a0:	f001 ff93 	bl	800a6ca <memcpy>
	}
}
 80087a4:	bf00      	nop
 80087a6:	3708      	adds	r7, #8
 80087a8:	46bd      	mov	sp, r7
 80087aa:	bd80      	pop	{r7, pc}

080087ac <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80087ac:	b580      	push	{r7, lr}
 80087ae:	b084      	sub	sp, #16
 80087b0:	af00      	add	r7, sp, #0
 80087b2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80087b4:	f001 fbf6 	bl	8009fa4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80087be:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80087c0:	e011      	b.n	80087e6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d012      	beq.n	80087f0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	3324      	adds	r3, #36	; 0x24
 80087ce:	4618      	mov	r0, r3
 80087d0:	f000 fcf2 	bl	80091b8 <xTaskRemoveFromEventList>
 80087d4:	4603      	mov	r3, r0
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d001      	beq.n	80087de <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80087da:	f000 fdc7 	bl	800936c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80087de:	7bfb      	ldrb	r3, [r7, #15]
 80087e0:	3b01      	subs	r3, #1
 80087e2:	b2db      	uxtb	r3, r3
 80087e4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80087e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	dce9      	bgt.n	80087c2 <prvUnlockQueue+0x16>
 80087ee:	e000      	b.n	80087f2 <prvUnlockQueue+0x46>
					break;
 80087f0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	22ff      	movs	r2, #255	; 0xff
 80087f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80087fa:	f001 fc03 	bl	800a004 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80087fe:	f001 fbd1 	bl	8009fa4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008808:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800880a:	e011      	b.n	8008830 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	691b      	ldr	r3, [r3, #16]
 8008810:	2b00      	cmp	r3, #0
 8008812:	d012      	beq.n	800883a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	3310      	adds	r3, #16
 8008818:	4618      	mov	r0, r3
 800881a:	f000 fccd 	bl	80091b8 <xTaskRemoveFromEventList>
 800881e:	4603      	mov	r3, r0
 8008820:	2b00      	cmp	r3, #0
 8008822:	d001      	beq.n	8008828 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008824:	f000 fda2 	bl	800936c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008828:	7bbb      	ldrb	r3, [r7, #14]
 800882a:	3b01      	subs	r3, #1
 800882c:	b2db      	uxtb	r3, r3
 800882e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008830:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008834:	2b00      	cmp	r3, #0
 8008836:	dce9      	bgt.n	800880c <prvUnlockQueue+0x60>
 8008838:	e000      	b.n	800883c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800883a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	22ff      	movs	r2, #255	; 0xff
 8008840:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8008844:	f001 fbde 	bl	800a004 <vPortExitCritical>
}
 8008848:	bf00      	nop
 800884a:	3710      	adds	r7, #16
 800884c:	46bd      	mov	sp, r7
 800884e:	bd80      	pop	{r7, pc}

08008850 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008850:	b580      	push	{r7, lr}
 8008852:	b084      	sub	sp, #16
 8008854:	af00      	add	r7, sp, #0
 8008856:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008858:	f001 fba4 	bl	8009fa4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008860:	2b00      	cmp	r3, #0
 8008862:	d102      	bne.n	800886a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008864:	2301      	movs	r3, #1
 8008866:	60fb      	str	r3, [r7, #12]
 8008868:	e001      	b.n	800886e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800886a:	2300      	movs	r3, #0
 800886c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800886e:	f001 fbc9 	bl	800a004 <vPortExitCritical>

	return xReturn;
 8008872:	68fb      	ldr	r3, [r7, #12]
}
 8008874:	4618      	mov	r0, r3
 8008876:	3710      	adds	r7, #16
 8008878:	46bd      	mov	sp, r7
 800887a:	bd80      	pop	{r7, pc}

0800887c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800887c:	b580      	push	{r7, lr}
 800887e:	b084      	sub	sp, #16
 8008880:	af00      	add	r7, sp, #0
 8008882:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008884:	f001 fb8e 	bl	8009fa4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008890:	429a      	cmp	r2, r3
 8008892:	d102      	bne.n	800889a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008894:	2301      	movs	r3, #1
 8008896:	60fb      	str	r3, [r7, #12]
 8008898:	e001      	b.n	800889e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800889a:	2300      	movs	r3, #0
 800889c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800889e:	f001 fbb1 	bl	800a004 <vPortExitCritical>

	return xReturn;
 80088a2:	68fb      	ldr	r3, [r7, #12]
}
 80088a4:	4618      	mov	r0, r3
 80088a6:	3710      	adds	r7, #16
 80088a8:	46bd      	mov	sp, r7
 80088aa:	bd80      	pop	{r7, pc}

080088ac <xQueueIsQueueFullFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueIsQueueFullFromISR( const QueueHandle_t xQueue )
{
 80088ac:	b480      	push	{r7}
 80088ae:	b087      	sub	sp, #28
 80088b0:	af00      	add	r7, sp, #0
 80088b2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;
Queue_t * const pxQueue = xQueue;
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	613b      	str	r3, [r7, #16]

	configASSERT( pxQueue );
 80088b8:	693b      	ldr	r3, [r7, #16]
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d10a      	bne.n	80088d4 <xQueueIsQueueFullFromISR+0x28>
	__asm volatile
 80088be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088c2:	f383 8811 	msr	BASEPRI, r3
 80088c6:	f3bf 8f6f 	isb	sy
 80088ca:	f3bf 8f4f 	dsb	sy
 80088ce:	60fb      	str	r3, [r7, #12]
}
 80088d0:	bf00      	nop
 80088d2:	e7fe      	b.n	80088d2 <xQueueIsQueueFullFromISR+0x26>
	if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80088d4:	693b      	ldr	r3, [r7, #16]
 80088d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80088d8:	693b      	ldr	r3, [r7, #16]
 80088da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80088dc:	429a      	cmp	r2, r3
 80088de:	d102      	bne.n	80088e6 <xQueueIsQueueFullFromISR+0x3a>
	{
		xReturn = pdTRUE;
 80088e0:	2301      	movs	r3, #1
 80088e2:	617b      	str	r3, [r7, #20]
 80088e4:	e001      	b.n	80088ea <xQueueIsQueueFullFromISR+0x3e>
	}
	else
	{
		xReturn = pdFALSE;
 80088e6:	2300      	movs	r3, #0
 80088e8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80088ea:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80088ec:	4618      	mov	r0, r3
 80088ee:	371c      	adds	r7, #28
 80088f0:	46bd      	mov	sp, r7
 80088f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f6:	4770      	bx	lr

080088f8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80088f8:	b480      	push	{r7}
 80088fa:	b085      	sub	sp, #20
 80088fc:	af00      	add	r7, sp, #0
 80088fe:	6078      	str	r0, [r7, #4]
 8008900:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008902:	2300      	movs	r3, #0
 8008904:	60fb      	str	r3, [r7, #12]
 8008906:	e014      	b.n	8008932 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008908:	4a0f      	ldr	r2, [pc, #60]	; (8008948 <vQueueAddToRegistry+0x50>)
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008910:	2b00      	cmp	r3, #0
 8008912:	d10b      	bne.n	800892c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008914:	490c      	ldr	r1, [pc, #48]	; (8008948 <vQueueAddToRegistry+0x50>)
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	683a      	ldr	r2, [r7, #0]
 800891a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800891e:	4a0a      	ldr	r2, [pc, #40]	; (8008948 <vQueueAddToRegistry+0x50>)
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	00db      	lsls	r3, r3, #3
 8008924:	4413      	add	r3, r2
 8008926:	687a      	ldr	r2, [r7, #4]
 8008928:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800892a:	e006      	b.n	800893a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	3301      	adds	r3, #1
 8008930:	60fb      	str	r3, [r7, #12]
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	2b07      	cmp	r3, #7
 8008936:	d9e7      	bls.n	8008908 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008938:	bf00      	nop
 800893a:	bf00      	nop
 800893c:	3714      	adds	r7, #20
 800893e:	46bd      	mov	sp, r7
 8008940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008944:	4770      	bx	lr
 8008946:	bf00      	nop
 8008948:	20005e5c 	.word	0x20005e5c

0800894c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800894c:	b580      	push	{r7, lr}
 800894e:	b086      	sub	sp, #24
 8008950:	af00      	add	r7, sp, #0
 8008952:	60f8      	str	r0, [r7, #12]
 8008954:	60b9      	str	r1, [r7, #8]
 8008956:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800895c:	f001 fb22 	bl	8009fa4 <vPortEnterCritical>
 8008960:	697b      	ldr	r3, [r7, #20]
 8008962:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008966:	b25b      	sxtb	r3, r3
 8008968:	f1b3 3fff 	cmp.w	r3, #4294967295
 800896c:	d103      	bne.n	8008976 <vQueueWaitForMessageRestricted+0x2a>
 800896e:	697b      	ldr	r3, [r7, #20]
 8008970:	2200      	movs	r2, #0
 8008972:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008976:	697b      	ldr	r3, [r7, #20]
 8008978:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800897c:	b25b      	sxtb	r3, r3
 800897e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008982:	d103      	bne.n	800898c <vQueueWaitForMessageRestricted+0x40>
 8008984:	697b      	ldr	r3, [r7, #20]
 8008986:	2200      	movs	r2, #0
 8008988:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800898c:	f001 fb3a 	bl	800a004 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008990:	697b      	ldr	r3, [r7, #20]
 8008992:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008994:	2b00      	cmp	r3, #0
 8008996:	d106      	bne.n	80089a6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008998:	697b      	ldr	r3, [r7, #20]
 800899a:	3324      	adds	r3, #36	; 0x24
 800899c:	687a      	ldr	r2, [r7, #4]
 800899e:	68b9      	ldr	r1, [r7, #8]
 80089a0:	4618      	mov	r0, r3
 80089a2:	f000 fbdd 	bl	8009160 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80089a6:	6978      	ldr	r0, [r7, #20]
 80089a8:	f7ff ff00 	bl	80087ac <prvUnlockQueue>
	}
 80089ac:	bf00      	nop
 80089ae:	3718      	adds	r7, #24
 80089b0:	46bd      	mov	sp, r7
 80089b2:	bd80      	pop	{r7, pc}

080089b4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80089b4:	b580      	push	{r7, lr}
 80089b6:	b08e      	sub	sp, #56	; 0x38
 80089b8:	af04      	add	r7, sp, #16
 80089ba:	60f8      	str	r0, [r7, #12]
 80089bc:	60b9      	str	r1, [r7, #8]
 80089be:	607a      	str	r2, [r7, #4]
 80089c0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80089c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d10a      	bne.n	80089de <xTaskCreateStatic+0x2a>
	__asm volatile
 80089c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089cc:	f383 8811 	msr	BASEPRI, r3
 80089d0:	f3bf 8f6f 	isb	sy
 80089d4:	f3bf 8f4f 	dsb	sy
 80089d8:	623b      	str	r3, [r7, #32]
}
 80089da:	bf00      	nop
 80089dc:	e7fe      	b.n	80089dc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80089de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d10a      	bne.n	80089fa <xTaskCreateStatic+0x46>
	__asm volatile
 80089e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089e8:	f383 8811 	msr	BASEPRI, r3
 80089ec:	f3bf 8f6f 	isb	sy
 80089f0:	f3bf 8f4f 	dsb	sy
 80089f4:	61fb      	str	r3, [r7, #28]
}
 80089f6:	bf00      	nop
 80089f8:	e7fe      	b.n	80089f8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80089fa:	2354      	movs	r3, #84	; 0x54
 80089fc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80089fe:	693b      	ldr	r3, [r7, #16]
 8008a00:	2b54      	cmp	r3, #84	; 0x54
 8008a02:	d00a      	beq.n	8008a1a <xTaskCreateStatic+0x66>
	__asm volatile
 8008a04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a08:	f383 8811 	msr	BASEPRI, r3
 8008a0c:	f3bf 8f6f 	isb	sy
 8008a10:	f3bf 8f4f 	dsb	sy
 8008a14:	61bb      	str	r3, [r7, #24]
}
 8008a16:	bf00      	nop
 8008a18:	e7fe      	b.n	8008a18 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008a1a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008a1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d01a      	beq.n	8008a58 <xTaskCreateStatic+0xa4>
 8008a22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d017      	beq.n	8008a58 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008a28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a2a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a2e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008a30:	631a      	str	r2, [r3, #48]	; 0x30
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008a32:	2300      	movs	r3, #0
 8008a34:	9303      	str	r3, [sp, #12]
 8008a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a38:	9302      	str	r3, [sp, #8]
 8008a3a:	f107 0314 	add.w	r3, r7, #20
 8008a3e:	9301      	str	r3, [sp, #4]
 8008a40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a42:	9300      	str	r3, [sp, #0]
 8008a44:	683b      	ldr	r3, [r7, #0]
 8008a46:	687a      	ldr	r2, [r7, #4]
 8008a48:	68b9      	ldr	r1, [r7, #8]
 8008a4a:	68f8      	ldr	r0, [r7, #12]
 8008a4c:	f000 f80b 	bl	8008a66 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008a50:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008a52:	f000 f88f 	bl	8008b74 <prvAddNewTaskToReadyList>
 8008a56:	e001      	b.n	8008a5c <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 8008a58:	2300      	movs	r3, #0
 8008a5a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008a5c:	697b      	ldr	r3, [r7, #20]
	}
 8008a5e:	4618      	mov	r0, r3
 8008a60:	3728      	adds	r7, #40	; 0x28
 8008a62:	46bd      	mov	sp, r7
 8008a64:	bd80      	pop	{r7, pc}

08008a66 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008a66:	b580      	push	{r7, lr}
 8008a68:	b088      	sub	sp, #32
 8008a6a:	af00      	add	r7, sp, #0
 8008a6c:	60f8      	str	r0, [r7, #12]
 8008a6e:	60b9      	str	r1, [r7, #8]
 8008a70:	607a      	str	r2, [r7, #4]
 8008a72:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008a74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a76:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008a7e:	3b01      	subs	r3, #1
 8008a80:	009b      	lsls	r3, r3, #2
 8008a82:	4413      	add	r3, r2
 8008a84:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008a86:	69bb      	ldr	r3, [r7, #24]
 8008a88:	f023 0307 	bic.w	r3, r3, #7
 8008a8c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008a8e:	69bb      	ldr	r3, [r7, #24]
 8008a90:	f003 0307 	and.w	r3, r3, #7
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d00a      	beq.n	8008aae <prvInitialiseNewTask+0x48>
	__asm volatile
 8008a98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a9c:	f383 8811 	msr	BASEPRI, r3
 8008aa0:	f3bf 8f6f 	isb	sy
 8008aa4:	f3bf 8f4f 	dsb	sy
 8008aa8:	617b      	str	r3, [r7, #20]
}
 8008aaa:	bf00      	nop
 8008aac:	e7fe      	b.n	8008aac <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008aae:	68bb      	ldr	r3, [r7, #8]
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d01f      	beq.n	8008af4 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008ab4:	2300      	movs	r3, #0
 8008ab6:	61fb      	str	r3, [r7, #28]
 8008ab8:	e012      	b.n	8008ae0 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008aba:	68ba      	ldr	r2, [r7, #8]
 8008abc:	69fb      	ldr	r3, [r7, #28]
 8008abe:	4413      	add	r3, r2
 8008ac0:	7819      	ldrb	r1, [r3, #0]
 8008ac2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008ac4:	69fb      	ldr	r3, [r7, #28]
 8008ac6:	4413      	add	r3, r2
 8008ac8:	3334      	adds	r3, #52	; 0x34
 8008aca:	460a      	mov	r2, r1
 8008acc:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008ace:	68ba      	ldr	r2, [r7, #8]
 8008ad0:	69fb      	ldr	r3, [r7, #28]
 8008ad2:	4413      	add	r3, r2
 8008ad4:	781b      	ldrb	r3, [r3, #0]
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d006      	beq.n	8008ae8 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008ada:	69fb      	ldr	r3, [r7, #28]
 8008adc:	3301      	adds	r3, #1
 8008ade:	61fb      	str	r3, [r7, #28]
 8008ae0:	69fb      	ldr	r3, [r7, #28]
 8008ae2:	2b0f      	cmp	r3, #15
 8008ae4:	d9e9      	bls.n	8008aba <prvInitialiseNewTask+0x54>
 8008ae6:	e000      	b.n	8008aea <prvInitialiseNewTask+0x84>
			{
				break;
 8008ae8:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008aea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008aec:	2200      	movs	r2, #0
 8008aee:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008af2:	e003      	b.n	8008afc <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008af4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008af6:	2200      	movs	r2, #0
 8008af8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008afc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008afe:	2b06      	cmp	r3, #6
 8008b00:	d901      	bls.n	8008b06 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008b02:	2306      	movs	r3, #6
 8008b04:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008b06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b08:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008b0a:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008b0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b0e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008b10:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8008b12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b14:	2200      	movs	r2, #0
 8008b16:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008b18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b1a:	3304      	adds	r3, #4
 8008b1c:	4618      	mov	r0, r3
 8008b1e:	f7ff f92a 	bl	8007d76 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008b22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b24:	3318      	adds	r3, #24
 8008b26:	4618      	mov	r0, r3
 8008b28:	f7ff f925 	bl	8007d76 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008b2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b2e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008b30:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008b32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b34:	f1c3 0207 	rsb	r2, r3, #7
 8008b38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b3a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008b3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b3e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008b40:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008b42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b44:	2200      	movs	r2, #0
 8008b46:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008b48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b4a:	2200      	movs	r2, #0
 8008b4c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008b50:	683a      	ldr	r2, [r7, #0]
 8008b52:	68f9      	ldr	r1, [r7, #12]
 8008b54:	69b8      	ldr	r0, [r7, #24]
 8008b56:	f001 f8f7 	bl	8009d48 <pxPortInitialiseStack>
 8008b5a:	4602      	mov	r2, r0
 8008b5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b5e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008b60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d002      	beq.n	8008b6c <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008b66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008b6a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008b6c:	bf00      	nop
 8008b6e:	3720      	adds	r7, #32
 8008b70:	46bd      	mov	sp, r7
 8008b72:	bd80      	pop	{r7, pc}

08008b74 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008b74:	b580      	push	{r7, lr}
 8008b76:	b082      	sub	sp, #8
 8008b78:	af00      	add	r7, sp, #0
 8008b7a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008b7c:	f001 fa12 	bl	8009fa4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008b80:	4b2a      	ldr	r3, [pc, #168]	; (8008c2c <prvAddNewTaskToReadyList+0xb8>)
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	3301      	adds	r3, #1
 8008b86:	4a29      	ldr	r2, [pc, #164]	; (8008c2c <prvAddNewTaskToReadyList+0xb8>)
 8008b88:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008b8a:	4b29      	ldr	r3, [pc, #164]	; (8008c30 <prvAddNewTaskToReadyList+0xbc>)
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d109      	bne.n	8008ba6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008b92:	4a27      	ldr	r2, [pc, #156]	; (8008c30 <prvAddNewTaskToReadyList+0xbc>)
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008b98:	4b24      	ldr	r3, [pc, #144]	; (8008c2c <prvAddNewTaskToReadyList+0xb8>)
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	2b01      	cmp	r3, #1
 8008b9e:	d110      	bne.n	8008bc2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008ba0:	f000 fc08 	bl	80093b4 <prvInitialiseTaskLists>
 8008ba4:	e00d      	b.n	8008bc2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008ba6:	4b23      	ldr	r3, [pc, #140]	; (8008c34 <prvAddNewTaskToReadyList+0xc0>)
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d109      	bne.n	8008bc2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008bae:	4b20      	ldr	r3, [pc, #128]	; (8008c30 <prvAddNewTaskToReadyList+0xbc>)
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bb8:	429a      	cmp	r2, r3
 8008bba:	d802      	bhi.n	8008bc2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008bbc:	4a1c      	ldr	r2, [pc, #112]	; (8008c30 <prvAddNewTaskToReadyList+0xbc>)
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008bc2:	4b1d      	ldr	r3, [pc, #116]	; (8008c38 <prvAddNewTaskToReadyList+0xc4>)
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	3301      	adds	r3, #1
 8008bc8:	4a1b      	ldr	r2, [pc, #108]	; (8008c38 <prvAddNewTaskToReadyList+0xc4>)
 8008bca:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bd0:	2201      	movs	r2, #1
 8008bd2:	409a      	lsls	r2, r3
 8008bd4:	4b19      	ldr	r3, [pc, #100]	; (8008c3c <prvAddNewTaskToReadyList+0xc8>)
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	4313      	orrs	r3, r2
 8008bda:	4a18      	ldr	r2, [pc, #96]	; (8008c3c <prvAddNewTaskToReadyList+0xc8>)
 8008bdc:	6013      	str	r3, [r2, #0]
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008be2:	4613      	mov	r3, r2
 8008be4:	009b      	lsls	r3, r3, #2
 8008be6:	4413      	add	r3, r2
 8008be8:	009b      	lsls	r3, r3, #2
 8008bea:	4a15      	ldr	r2, [pc, #84]	; (8008c40 <prvAddNewTaskToReadyList+0xcc>)
 8008bec:	441a      	add	r2, r3
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	3304      	adds	r3, #4
 8008bf2:	4619      	mov	r1, r3
 8008bf4:	4610      	mov	r0, r2
 8008bf6:	f7ff f8cb 	bl	8007d90 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008bfa:	f001 fa03 	bl	800a004 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008bfe:	4b0d      	ldr	r3, [pc, #52]	; (8008c34 <prvAddNewTaskToReadyList+0xc0>)
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d00e      	beq.n	8008c24 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008c06:	4b0a      	ldr	r3, [pc, #40]	; (8008c30 <prvAddNewTaskToReadyList+0xbc>)
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c10:	429a      	cmp	r2, r3
 8008c12:	d207      	bcs.n	8008c24 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008c14:	4b0b      	ldr	r3, [pc, #44]	; (8008c44 <prvAddNewTaskToReadyList+0xd0>)
 8008c16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008c1a:	601a      	str	r2, [r3, #0]
 8008c1c:	f3bf 8f4f 	dsb	sy
 8008c20:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008c24:	bf00      	nop
 8008c26:	3708      	adds	r7, #8
 8008c28:	46bd      	mov	sp, r7
 8008c2a:	bd80      	pop	{r7, pc}
 8008c2c:	20005f9c 	.word	0x20005f9c
 8008c30:	20005e9c 	.word	0x20005e9c
 8008c34:	20005fa8 	.word	0x20005fa8
 8008c38:	20005fb8 	.word	0x20005fb8
 8008c3c:	20005fa4 	.word	0x20005fa4
 8008c40:	20005ea0 	.word	0x20005ea0
 8008c44:	e000ed04 	.word	0xe000ed04

08008c48 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008c48:	b580      	push	{r7, lr}
 8008c4a:	b084      	sub	sp, #16
 8008c4c:	af00      	add	r7, sp, #0
 8008c4e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008c50:	2300      	movs	r3, #0
 8008c52:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d017      	beq.n	8008c8a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008c5a:	4b13      	ldr	r3, [pc, #76]	; (8008ca8 <vTaskDelay+0x60>)
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d00a      	beq.n	8008c78 <vTaskDelay+0x30>
	__asm volatile
 8008c62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c66:	f383 8811 	msr	BASEPRI, r3
 8008c6a:	f3bf 8f6f 	isb	sy
 8008c6e:	f3bf 8f4f 	dsb	sy
 8008c72:	60bb      	str	r3, [r7, #8]
}
 8008c74:	bf00      	nop
 8008c76:	e7fe      	b.n	8008c76 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008c78:	f000 f880 	bl	8008d7c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008c7c:	2100      	movs	r1, #0
 8008c7e:	6878      	ldr	r0, [r7, #4]
 8008c80:	f000 fcd4 	bl	800962c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008c84:	f000 f888 	bl	8008d98 <xTaskResumeAll>
 8008c88:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d107      	bne.n	8008ca0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8008c90:	4b06      	ldr	r3, [pc, #24]	; (8008cac <vTaskDelay+0x64>)
 8008c92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008c96:	601a      	str	r2, [r3, #0]
 8008c98:	f3bf 8f4f 	dsb	sy
 8008c9c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008ca0:	bf00      	nop
 8008ca2:	3710      	adds	r7, #16
 8008ca4:	46bd      	mov	sp, r7
 8008ca6:	bd80      	pop	{r7, pc}
 8008ca8:	20005fc4 	.word	0x20005fc4
 8008cac:	e000ed04 	.word	0xe000ed04

08008cb0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008cb0:	b580      	push	{r7, lr}
 8008cb2:	b08a      	sub	sp, #40	; 0x28
 8008cb4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008cb6:	2300      	movs	r3, #0
 8008cb8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008cba:	2300      	movs	r3, #0
 8008cbc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008cbe:	463a      	mov	r2, r7
 8008cc0:	1d39      	adds	r1, r7, #4
 8008cc2:	f107 0308 	add.w	r3, r7, #8
 8008cc6:	4618      	mov	r0, r3
 8008cc8:	f7f8 f9b8 	bl	800103c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008ccc:	6839      	ldr	r1, [r7, #0]
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	68ba      	ldr	r2, [r7, #8]
 8008cd2:	9202      	str	r2, [sp, #8]
 8008cd4:	9301      	str	r3, [sp, #4]
 8008cd6:	2300      	movs	r3, #0
 8008cd8:	9300      	str	r3, [sp, #0]
 8008cda:	2300      	movs	r3, #0
 8008cdc:	460a      	mov	r2, r1
 8008cde:	4921      	ldr	r1, [pc, #132]	; (8008d64 <vTaskStartScheduler+0xb4>)
 8008ce0:	4821      	ldr	r0, [pc, #132]	; (8008d68 <vTaskStartScheduler+0xb8>)
 8008ce2:	f7ff fe67 	bl	80089b4 <xTaskCreateStatic>
 8008ce6:	4603      	mov	r3, r0
 8008ce8:	4a20      	ldr	r2, [pc, #128]	; (8008d6c <vTaskStartScheduler+0xbc>)
 8008cea:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008cec:	4b1f      	ldr	r3, [pc, #124]	; (8008d6c <vTaskStartScheduler+0xbc>)
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d002      	beq.n	8008cfa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008cf4:	2301      	movs	r3, #1
 8008cf6:	617b      	str	r3, [r7, #20]
 8008cf8:	e001      	b.n	8008cfe <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008cfa:	2300      	movs	r3, #0
 8008cfc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008cfe:	697b      	ldr	r3, [r7, #20]
 8008d00:	2b01      	cmp	r3, #1
 8008d02:	d102      	bne.n	8008d0a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008d04:	f000 fcf8 	bl	80096f8 <xTimerCreateTimerTask>
 8008d08:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008d0a:	697b      	ldr	r3, [r7, #20]
 8008d0c:	2b01      	cmp	r3, #1
 8008d0e:	d116      	bne.n	8008d3e <vTaskStartScheduler+0x8e>
	__asm volatile
 8008d10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d14:	f383 8811 	msr	BASEPRI, r3
 8008d18:	f3bf 8f6f 	isb	sy
 8008d1c:	f3bf 8f4f 	dsb	sy
 8008d20:	613b      	str	r3, [r7, #16]
}
 8008d22:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008d24:	4b12      	ldr	r3, [pc, #72]	; (8008d70 <vTaskStartScheduler+0xc0>)
 8008d26:	f04f 32ff 	mov.w	r2, #4294967295
 8008d2a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008d2c:	4b11      	ldr	r3, [pc, #68]	; (8008d74 <vTaskStartScheduler+0xc4>)
 8008d2e:	2201      	movs	r2, #1
 8008d30:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008d32:	4b11      	ldr	r3, [pc, #68]	; (8008d78 <vTaskStartScheduler+0xc8>)
 8008d34:	2200      	movs	r2, #0
 8008d36:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008d38:	f001 f892 	bl	8009e60 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008d3c:	e00e      	b.n	8008d5c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008d3e:	697b      	ldr	r3, [r7, #20]
 8008d40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d44:	d10a      	bne.n	8008d5c <vTaskStartScheduler+0xac>
	__asm volatile
 8008d46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d4a:	f383 8811 	msr	BASEPRI, r3
 8008d4e:	f3bf 8f6f 	isb	sy
 8008d52:	f3bf 8f4f 	dsb	sy
 8008d56:	60fb      	str	r3, [r7, #12]
}
 8008d58:	bf00      	nop
 8008d5a:	e7fe      	b.n	8008d5a <vTaskStartScheduler+0xaa>
}
 8008d5c:	bf00      	nop
 8008d5e:	3718      	adds	r7, #24
 8008d60:	46bd      	mov	sp, r7
 8008d62:	bd80      	pop	{r7, pc}
 8008d64:	0800ac18 	.word	0x0800ac18
 8008d68:	08009385 	.word	0x08009385
 8008d6c:	20005fc0 	.word	0x20005fc0
 8008d70:	20005fbc 	.word	0x20005fbc
 8008d74:	20005fa8 	.word	0x20005fa8
 8008d78:	20005fa0 	.word	0x20005fa0

08008d7c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008d7c:	b480      	push	{r7}
 8008d7e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008d80:	4b04      	ldr	r3, [pc, #16]	; (8008d94 <vTaskSuspendAll+0x18>)
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	3301      	adds	r3, #1
 8008d86:	4a03      	ldr	r2, [pc, #12]	; (8008d94 <vTaskSuspendAll+0x18>)
 8008d88:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8008d8a:	bf00      	nop
 8008d8c:	46bd      	mov	sp, r7
 8008d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d92:	4770      	bx	lr
 8008d94:	20005fc4 	.word	0x20005fc4

08008d98 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008d98:	b580      	push	{r7, lr}
 8008d9a:	b084      	sub	sp, #16
 8008d9c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008d9e:	2300      	movs	r3, #0
 8008da0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008da2:	2300      	movs	r3, #0
 8008da4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008da6:	4b41      	ldr	r3, [pc, #260]	; (8008eac <xTaskResumeAll+0x114>)
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d10a      	bne.n	8008dc4 <xTaskResumeAll+0x2c>
	__asm volatile
 8008dae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008db2:	f383 8811 	msr	BASEPRI, r3
 8008db6:	f3bf 8f6f 	isb	sy
 8008dba:	f3bf 8f4f 	dsb	sy
 8008dbe:	603b      	str	r3, [r7, #0]
}
 8008dc0:	bf00      	nop
 8008dc2:	e7fe      	b.n	8008dc2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008dc4:	f001 f8ee 	bl	8009fa4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008dc8:	4b38      	ldr	r3, [pc, #224]	; (8008eac <xTaskResumeAll+0x114>)
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	3b01      	subs	r3, #1
 8008dce:	4a37      	ldr	r2, [pc, #220]	; (8008eac <xTaskResumeAll+0x114>)
 8008dd0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008dd2:	4b36      	ldr	r3, [pc, #216]	; (8008eac <xTaskResumeAll+0x114>)
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d161      	bne.n	8008e9e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008dda:	4b35      	ldr	r3, [pc, #212]	; (8008eb0 <xTaskResumeAll+0x118>)
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d05d      	beq.n	8008e9e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008de2:	e02e      	b.n	8008e42 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008de4:	4b33      	ldr	r3, [pc, #204]	; (8008eb4 <xTaskResumeAll+0x11c>)
 8008de6:	68db      	ldr	r3, [r3, #12]
 8008de8:	68db      	ldr	r3, [r3, #12]
 8008dea:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	3318      	adds	r3, #24
 8008df0:	4618      	mov	r0, r3
 8008df2:	f7ff f82a 	bl	8007e4a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	3304      	adds	r3, #4
 8008dfa:	4618      	mov	r0, r3
 8008dfc:	f7ff f825 	bl	8007e4a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e04:	2201      	movs	r2, #1
 8008e06:	409a      	lsls	r2, r3
 8008e08:	4b2b      	ldr	r3, [pc, #172]	; (8008eb8 <xTaskResumeAll+0x120>)
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	4313      	orrs	r3, r2
 8008e0e:	4a2a      	ldr	r2, [pc, #168]	; (8008eb8 <xTaskResumeAll+0x120>)
 8008e10:	6013      	str	r3, [r2, #0]
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e16:	4613      	mov	r3, r2
 8008e18:	009b      	lsls	r3, r3, #2
 8008e1a:	4413      	add	r3, r2
 8008e1c:	009b      	lsls	r3, r3, #2
 8008e1e:	4a27      	ldr	r2, [pc, #156]	; (8008ebc <xTaskResumeAll+0x124>)
 8008e20:	441a      	add	r2, r3
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	3304      	adds	r3, #4
 8008e26:	4619      	mov	r1, r3
 8008e28:	4610      	mov	r0, r2
 8008e2a:	f7fe ffb1 	bl	8007d90 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e32:	4b23      	ldr	r3, [pc, #140]	; (8008ec0 <xTaskResumeAll+0x128>)
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e38:	429a      	cmp	r2, r3
 8008e3a:	d302      	bcc.n	8008e42 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8008e3c:	4b21      	ldr	r3, [pc, #132]	; (8008ec4 <xTaskResumeAll+0x12c>)
 8008e3e:	2201      	movs	r2, #1
 8008e40:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008e42:	4b1c      	ldr	r3, [pc, #112]	; (8008eb4 <xTaskResumeAll+0x11c>)
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d1cc      	bne.n	8008de4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d001      	beq.n	8008e54 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008e50:	f000 fb28 	bl	80094a4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008e54:	4b1c      	ldr	r3, [pc, #112]	; (8008ec8 <xTaskResumeAll+0x130>)
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d010      	beq.n	8008e82 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008e60:	f000 f846 	bl	8008ef0 <xTaskIncrementTick>
 8008e64:	4603      	mov	r3, r0
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d002      	beq.n	8008e70 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8008e6a:	4b16      	ldr	r3, [pc, #88]	; (8008ec4 <xTaskResumeAll+0x12c>)
 8008e6c:	2201      	movs	r2, #1
 8008e6e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	3b01      	subs	r3, #1
 8008e74:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d1f1      	bne.n	8008e60 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8008e7c:	4b12      	ldr	r3, [pc, #72]	; (8008ec8 <xTaskResumeAll+0x130>)
 8008e7e:	2200      	movs	r2, #0
 8008e80:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008e82:	4b10      	ldr	r3, [pc, #64]	; (8008ec4 <xTaskResumeAll+0x12c>)
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d009      	beq.n	8008e9e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008e8a:	2301      	movs	r3, #1
 8008e8c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008e8e:	4b0f      	ldr	r3, [pc, #60]	; (8008ecc <xTaskResumeAll+0x134>)
 8008e90:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008e94:	601a      	str	r2, [r3, #0]
 8008e96:	f3bf 8f4f 	dsb	sy
 8008e9a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008e9e:	f001 f8b1 	bl	800a004 <vPortExitCritical>

	return xAlreadyYielded;
 8008ea2:	68bb      	ldr	r3, [r7, #8]
}
 8008ea4:	4618      	mov	r0, r3
 8008ea6:	3710      	adds	r7, #16
 8008ea8:	46bd      	mov	sp, r7
 8008eaa:	bd80      	pop	{r7, pc}
 8008eac:	20005fc4 	.word	0x20005fc4
 8008eb0:	20005f9c 	.word	0x20005f9c
 8008eb4:	20005f5c 	.word	0x20005f5c
 8008eb8:	20005fa4 	.word	0x20005fa4
 8008ebc:	20005ea0 	.word	0x20005ea0
 8008ec0:	20005e9c 	.word	0x20005e9c
 8008ec4:	20005fb0 	.word	0x20005fb0
 8008ec8:	20005fac 	.word	0x20005fac
 8008ecc:	e000ed04 	.word	0xe000ed04

08008ed0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008ed0:	b480      	push	{r7}
 8008ed2:	b083      	sub	sp, #12
 8008ed4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008ed6:	4b05      	ldr	r3, [pc, #20]	; (8008eec <xTaskGetTickCount+0x1c>)
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008edc:	687b      	ldr	r3, [r7, #4]
}
 8008ede:	4618      	mov	r0, r3
 8008ee0:	370c      	adds	r7, #12
 8008ee2:	46bd      	mov	sp, r7
 8008ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee8:	4770      	bx	lr
 8008eea:	bf00      	nop
 8008eec:	20005fa0 	.word	0x20005fa0

08008ef0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008ef0:	b580      	push	{r7, lr}
 8008ef2:	b086      	sub	sp, #24
 8008ef4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008ef6:	2300      	movs	r3, #0
 8008ef8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008efa:	4b4e      	ldr	r3, [pc, #312]	; (8009034 <xTaskIncrementTick+0x144>)
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	f040 808e 	bne.w	8009020 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008f04:	4b4c      	ldr	r3, [pc, #304]	; (8009038 <xTaskIncrementTick+0x148>)
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	3301      	adds	r3, #1
 8008f0a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008f0c:	4a4a      	ldr	r2, [pc, #296]	; (8009038 <xTaskIncrementTick+0x148>)
 8008f0e:	693b      	ldr	r3, [r7, #16]
 8008f10:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008f12:	693b      	ldr	r3, [r7, #16]
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d120      	bne.n	8008f5a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8008f18:	4b48      	ldr	r3, [pc, #288]	; (800903c <xTaskIncrementTick+0x14c>)
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d00a      	beq.n	8008f38 <xTaskIncrementTick+0x48>
	__asm volatile
 8008f22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f26:	f383 8811 	msr	BASEPRI, r3
 8008f2a:	f3bf 8f6f 	isb	sy
 8008f2e:	f3bf 8f4f 	dsb	sy
 8008f32:	603b      	str	r3, [r7, #0]
}
 8008f34:	bf00      	nop
 8008f36:	e7fe      	b.n	8008f36 <xTaskIncrementTick+0x46>
 8008f38:	4b40      	ldr	r3, [pc, #256]	; (800903c <xTaskIncrementTick+0x14c>)
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	60fb      	str	r3, [r7, #12]
 8008f3e:	4b40      	ldr	r3, [pc, #256]	; (8009040 <xTaskIncrementTick+0x150>)
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	4a3e      	ldr	r2, [pc, #248]	; (800903c <xTaskIncrementTick+0x14c>)
 8008f44:	6013      	str	r3, [r2, #0]
 8008f46:	4a3e      	ldr	r2, [pc, #248]	; (8009040 <xTaskIncrementTick+0x150>)
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	6013      	str	r3, [r2, #0]
 8008f4c:	4b3d      	ldr	r3, [pc, #244]	; (8009044 <xTaskIncrementTick+0x154>)
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	3301      	adds	r3, #1
 8008f52:	4a3c      	ldr	r2, [pc, #240]	; (8009044 <xTaskIncrementTick+0x154>)
 8008f54:	6013      	str	r3, [r2, #0]
 8008f56:	f000 faa5 	bl	80094a4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008f5a:	4b3b      	ldr	r3, [pc, #236]	; (8009048 <xTaskIncrementTick+0x158>)
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	693a      	ldr	r2, [r7, #16]
 8008f60:	429a      	cmp	r2, r3
 8008f62:	d348      	bcc.n	8008ff6 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008f64:	4b35      	ldr	r3, [pc, #212]	; (800903c <xTaskIncrementTick+0x14c>)
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d104      	bne.n	8008f78 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008f6e:	4b36      	ldr	r3, [pc, #216]	; (8009048 <xTaskIncrementTick+0x158>)
 8008f70:	f04f 32ff 	mov.w	r2, #4294967295
 8008f74:	601a      	str	r2, [r3, #0]
					break;
 8008f76:	e03e      	b.n	8008ff6 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008f78:	4b30      	ldr	r3, [pc, #192]	; (800903c <xTaskIncrementTick+0x14c>)
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	68db      	ldr	r3, [r3, #12]
 8008f7e:	68db      	ldr	r3, [r3, #12]
 8008f80:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008f82:	68bb      	ldr	r3, [r7, #8]
 8008f84:	685b      	ldr	r3, [r3, #4]
 8008f86:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008f88:	693a      	ldr	r2, [r7, #16]
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	429a      	cmp	r2, r3
 8008f8e:	d203      	bcs.n	8008f98 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008f90:	4a2d      	ldr	r2, [pc, #180]	; (8009048 <xTaskIncrementTick+0x158>)
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008f96:	e02e      	b.n	8008ff6 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008f98:	68bb      	ldr	r3, [r7, #8]
 8008f9a:	3304      	adds	r3, #4
 8008f9c:	4618      	mov	r0, r3
 8008f9e:	f7fe ff54 	bl	8007e4a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008fa2:	68bb      	ldr	r3, [r7, #8]
 8008fa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d004      	beq.n	8008fb4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008faa:	68bb      	ldr	r3, [r7, #8]
 8008fac:	3318      	adds	r3, #24
 8008fae:	4618      	mov	r0, r3
 8008fb0:	f7fe ff4b 	bl	8007e4a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008fb4:	68bb      	ldr	r3, [r7, #8]
 8008fb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fb8:	2201      	movs	r2, #1
 8008fba:	409a      	lsls	r2, r3
 8008fbc:	4b23      	ldr	r3, [pc, #140]	; (800904c <xTaskIncrementTick+0x15c>)
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	4313      	orrs	r3, r2
 8008fc2:	4a22      	ldr	r2, [pc, #136]	; (800904c <xTaskIncrementTick+0x15c>)
 8008fc4:	6013      	str	r3, [r2, #0]
 8008fc6:	68bb      	ldr	r3, [r7, #8]
 8008fc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008fca:	4613      	mov	r3, r2
 8008fcc:	009b      	lsls	r3, r3, #2
 8008fce:	4413      	add	r3, r2
 8008fd0:	009b      	lsls	r3, r3, #2
 8008fd2:	4a1f      	ldr	r2, [pc, #124]	; (8009050 <xTaskIncrementTick+0x160>)
 8008fd4:	441a      	add	r2, r3
 8008fd6:	68bb      	ldr	r3, [r7, #8]
 8008fd8:	3304      	adds	r3, #4
 8008fda:	4619      	mov	r1, r3
 8008fdc:	4610      	mov	r0, r2
 8008fde:	f7fe fed7 	bl	8007d90 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008fe2:	68bb      	ldr	r3, [r7, #8]
 8008fe4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008fe6:	4b1b      	ldr	r3, [pc, #108]	; (8009054 <xTaskIncrementTick+0x164>)
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fec:	429a      	cmp	r2, r3
 8008fee:	d3b9      	bcc.n	8008f64 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8008ff0:	2301      	movs	r3, #1
 8008ff2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008ff4:	e7b6      	b.n	8008f64 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008ff6:	4b17      	ldr	r3, [pc, #92]	; (8009054 <xTaskIncrementTick+0x164>)
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ffc:	4914      	ldr	r1, [pc, #80]	; (8009050 <xTaskIncrementTick+0x160>)
 8008ffe:	4613      	mov	r3, r2
 8009000:	009b      	lsls	r3, r3, #2
 8009002:	4413      	add	r3, r2
 8009004:	009b      	lsls	r3, r3, #2
 8009006:	440b      	add	r3, r1
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	2b01      	cmp	r3, #1
 800900c:	d901      	bls.n	8009012 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800900e:	2301      	movs	r3, #1
 8009010:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8009012:	4b11      	ldr	r3, [pc, #68]	; (8009058 <xTaskIncrementTick+0x168>)
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	2b00      	cmp	r3, #0
 8009018:	d007      	beq.n	800902a <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800901a:	2301      	movs	r3, #1
 800901c:	617b      	str	r3, [r7, #20]
 800901e:	e004      	b.n	800902a <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8009020:	4b0e      	ldr	r3, [pc, #56]	; (800905c <xTaskIncrementTick+0x16c>)
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	3301      	adds	r3, #1
 8009026:	4a0d      	ldr	r2, [pc, #52]	; (800905c <xTaskIncrementTick+0x16c>)
 8009028:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800902a:	697b      	ldr	r3, [r7, #20]
}
 800902c:	4618      	mov	r0, r3
 800902e:	3718      	adds	r7, #24
 8009030:	46bd      	mov	sp, r7
 8009032:	bd80      	pop	{r7, pc}
 8009034:	20005fc4 	.word	0x20005fc4
 8009038:	20005fa0 	.word	0x20005fa0
 800903c:	20005f54 	.word	0x20005f54
 8009040:	20005f58 	.word	0x20005f58
 8009044:	20005fb4 	.word	0x20005fb4
 8009048:	20005fbc 	.word	0x20005fbc
 800904c:	20005fa4 	.word	0x20005fa4
 8009050:	20005ea0 	.word	0x20005ea0
 8009054:	20005e9c 	.word	0x20005e9c
 8009058:	20005fb0 	.word	0x20005fb0
 800905c:	20005fac 	.word	0x20005fac

08009060 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009060:	b480      	push	{r7}
 8009062:	b087      	sub	sp, #28
 8009064:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009066:	4b27      	ldr	r3, [pc, #156]	; (8009104 <vTaskSwitchContext+0xa4>)
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	2b00      	cmp	r3, #0
 800906c:	d003      	beq.n	8009076 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800906e:	4b26      	ldr	r3, [pc, #152]	; (8009108 <vTaskSwitchContext+0xa8>)
 8009070:	2201      	movs	r2, #1
 8009072:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009074:	e03f      	b.n	80090f6 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8009076:	4b24      	ldr	r3, [pc, #144]	; (8009108 <vTaskSwitchContext+0xa8>)
 8009078:	2200      	movs	r2, #0
 800907a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800907c:	4b23      	ldr	r3, [pc, #140]	; (800910c <vTaskSwitchContext+0xac>)
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	fab3 f383 	clz	r3, r3
 8009088:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800908a:	7afb      	ldrb	r3, [r7, #11]
 800908c:	f1c3 031f 	rsb	r3, r3, #31
 8009090:	617b      	str	r3, [r7, #20]
 8009092:	491f      	ldr	r1, [pc, #124]	; (8009110 <vTaskSwitchContext+0xb0>)
 8009094:	697a      	ldr	r2, [r7, #20]
 8009096:	4613      	mov	r3, r2
 8009098:	009b      	lsls	r3, r3, #2
 800909a:	4413      	add	r3, r2
 800909c:	009b      	lsls	r3, r3, #2
 800909e:	440b      	add	r3, r1
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d10a      	bne.n	80090bc <vTaskSwitchContext+0x5c>
	__asm volatile
 80090a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090aa:	f383 8811 	msr	BASEPRI, r3
 80090ae:	f3bf 8f6f 	isb	sy
 80090b2:	f3bf 8f4f 	dsb	sy
 80090b6:	607b      	str	r3, [r7, #4]
}
 80090b8:	bf00      	nop
 80090ba:	e7fe      	b.n	80090ba <vTaskSwitchContext+0x5a>
 80090bc:	697a      	ldr	r2, [r7, #20]
 80090be:	4613      	mov	r3, r2
 80090c0:	009b      	lsls	r3, r3, #2
 80090c2:	4413      	add	r3, r2
 80090c4:	009b      	lsls	r3, r3, #2
 80090c6:	4a12      	ldr	r2, [pc, #72]	; (8009110 <vTaskSwitchContext+0xb0>)
 80090c8:	4413      	add	r3, r2
 80090ca:	613b      	str	r3, [r7, #16]
 80090cc:	693b      	ldr	r3, [r7, #16]
 80090ce:	685b      	ldr	r3, [r3, #4]
 80090d0:	685a      	ldr	r2, [r3, #4]
 80090d2:	693b      	ldr	r3, [r7, #16]
 80090d4:	605a      	str	r2, [r3, #4]
 80090d6:	693b      	ldr	r3, [r7, #16]
 80090d8:	685a      	ldr	r2, [r3, #4]
 80090da:	693b      	ldr	r3, [r7, #16]
 80090dc:	3308      	adds	r3, #8
 80090de:	429a      	cmp	r2, r3
 80090e0:	d104      	bne.n	80090ec <vTaskSwitchContext+0x8c>
 80090e2:	693b      	ldr	r3, [r7, #16]
 80090e4:	685b      	ldr	r3, [r3, #4]
 80090e6:	685a      	ldr	r2, [r3, #4]
 80090e8:	693b      	ldr	r3, [r7, #16]
 80090ea:	605a      	str	r2, [r3, #4]
 80090ec:	693b      	ldr	r3, [r7, #16]
 80090ee:	685b      	ldr	r3, [r3, #4]
 80090f0:	68db      	ldr	r3, [r3, #12]
 80090f2:	4a08      	ldr	r2, [pc, #32]	; (8009114 <vTaskSwitchContext+0xb4>)
 80090f4:	6013      	str	r3, [r2, #0]
}
 80090f6:	bf00      	nop
 80090f8:	371c      	adds	r7, #28
 80090fa:	46bd      	mov	sp, r7
 80090fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009100:	4770      	bx	lr
 8009102:	bf00      	nop
 8009104:	20005fc4 	.word	0x20005fc4
 8009108:	20005fb0 	.word	0x20005fb0
 800910c:	20005fa4 	.word	0x20005fa4
 8009110:	20005ea0 	.word	0x20005ea0
 8009114:	20005e9c 	.word	0x20005e9c

08009118 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009118:	b580      	push	{r7, lr}
 800911a:	b084      	sub	sp, #16
 800911c:	af00      	add	r7, sp, #0
 800911e:	6078      	str	r0, [r7, #4]
 8009120:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	2b00      	cmp	r3, #0
 8009126:	d10a      	bne.n	800913e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8009128:	f04f 0350 	mov.w	r3, #80	; 0x50
 800912c:	f383 8811 	msr	BASEPRI, r3
 8009130:	f3bf 8f6f 	isb	sy
 8009134:	f3bf 8f4f 	dsb	sy
 8009138:	60fb      	str	r3, [r7, #12]
}
 800913a:	bf00      	nop
 800913c:	e7fe      	b.n	800913c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800913e:	4b07      	ldr	r3, [pc, #28]	; (800915c <vTaskPlaceOnEventList+0x44>)
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	3318      	adds	r3, #24
 8009144:	4619      	mov	r1, r3
 8009146:	6878      	ldr	r0, [r7, #4]
 8009148:	f7fe fe46 	bl	8007dd8 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800914c:	2101      	movs	r1, #1
 800914e:	6838      	ldr	r0, [r7, #0]
 8009150:	f000 fa6c 	bl	800962c <prvAddCurrentTaskToDelayedList>
}
 8009154:	bf00      	nop
 8009156:	3710      	adds	r7, #16
 8009158:	46bd      	mov	sp, r7
 800915a:	bd80      	pop	{r7, pc}
 800915c:	20005e9c 	.word	0x20005e9c

08009160 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009160:	b580      	push	{r7, lr}
 8009162:	b086      	sub	sp, #24
 8009164:	af00      	add	r7, sp, #0
 8009166:	60f8      	str	r0, [r7, #12]
 8009168:	60b9      	str	r1, [r7, #8]
 800916a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	2b00      	cmp	r3, #0
 8009170:	d10a      	bne.n	8009188 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8009172:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009176:	f383 8811 	msr	BASEPRI, r3
 800917a:	f3bf 8f6f 	isb	sy
 800917e:	f3bf 8f4f 	dsb	sy
 8009182:	617b      	str	r3, [r7, #20]
}
 8009184:	bf00      	nop
 8009186:	e7fe      	b.n	8009186 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009188:	4b0a      	ldr	r3, [pc, #40]	; (80091b4 <vTaskPlaceOnEventListRestricted+0x54>)
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	3318      	adds	r3, #24
 800918e:	4619      	mov	r1, r3
 8009190:	68f8      	ldr	r0, [r7, #12]
 8009192:	f7fe fdfd 	bl	8007d90 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	2b00      	cmp	r3, #0
 800919a:	d002      	beq.n	80091a2 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800919c:	f04f 33ff 	mov.w	r3, #4294967295
 80091a0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80091a2:	6879      	ldr	r1, [r7, #4]
 80091a4:	68b8      	ldr	r0, [r7, #8]
 80091a6:	f000 fa41 	bl	800962c <prvAddCurrentTaskToDelayedList>
	}
 80091aa:	bf00      	nop
 80091ac:	3718      	adds	r7, #24
 80091ae:	46bd      	mov	sp, r7
 80091b0:	bd80      	pop	{r7, pc}
 80091b2:	bf00      	nop
 80091b4:	20005e9c 	.word	0x20005e9c

080091b8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80091b8:	b580      	push	{r7, lr}
 80091ba:	b086      	sub	sp, #24
 80091bc:	af00      	add	r7, sp, #0
 80091be:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	68db      	ldr	r3, [r3, #12]
 80091c4:	68db      	ldr	r3, [r3, #12]
 80091c6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80091c8:	693b      	ldr	r3, [r7, #16]
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d10a      	bne.n	80091e4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80091ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091d2:	f383 8811 	msr	BASEPRI, r3
 80091d6:	f3bf 8f6f 	isb	sy
 80091da:	f3bf 8f4f 	dsb	sy
 80091de:	60fb      	str	r3, [r7, #12]
}
 80091e0:	bf00      	nop
 80091e2:	e7fe      	b.n	80091e2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80091e4:	693b      	ldr	r3, [r7, #16]
 80091e6:	3318      	adds	r3, #24
 80091e8:	4618      	mov	r0, r3
 80091ea:	f7fe fe2e 	bl	8007e4a <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80091ee:	4b1d      	ldr	r3, [pc, #116]	; (8009264 <xTaskRemoveFromEventList+0xac>)
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d11c      	bne.n	8009230 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80091f6:	693b      	ldr	r3, [r7, #16]
 80091f8:	3304      	adds	r3, #4
 80091fa:	4618      	mov	r0, r3
 80091fc:	f7fe fe25 	bl	8007e4a <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009200:	693b      	ldr	r3, [r7, #16]
 8009202:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009204:	2201      	movs	r2, #1
 8009206:	409a      	lsls	r2, r3
 8009208:	4b17      	ldr	r3, [pc, #92]	; (8009268 <xTaskRemoveFromEventList+0xb0>)
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	4313      	orrs	r3, r2
 800920e:	4a16      	ldr	r2, [pc, #88]	; (8009268 <xTaskRemoveFromEventList+0xb0>)
 8009210:	6013      	str	r3, [r2, #0]
 8009212:	693b      	ldr	r3, [r7, #16]
 8009214:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009216:	4613      	mov	r3, r2
 8009218:	009b      	lsls	r3, r3, #2
 800921a:	4413      	add	r3, r2
 800921c:	009b      	lsls	r3, r3, #2
 800921e:	4a13      	ldr	r2, [pc, #76]	; (800926c <xTaskRemoveFromEventList+0xb4>)
 8009220:	441a      	add	r2, r3
 8009222:	693b      	ldr	r3, [r7, #16]
 8009224:	3304      	adds	r3, #4
 8009226:	4619      	mov	r1, r3
 8009228:	4610      	mov	r0, r2
 800922a:	f7fe fdb1 	bl	8007d90 <vListInsertEnd>
 800922e:	e005      	b.n	800923c <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009230:	693b      	ldr	r3, [r7, #16]
 8009232:	3318      	adds	r3, #24
 8009234:	4619      	mov	r1, r3
 8009236:	480e      	ldr	r0, [pc, #56]	; (8009270 <xTaskRemoveFromEventList+0xb8>)
 8009238:	f7fe fdaa 	bl	8007d90 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800923c:	693b      	ldr	r3, [r7, #16]
 800923e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009240:	4b0c      	ldr	r3, [pc, #48]	; (8009274 <xTaskRemoveFromEventList+0xbc>)
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009246:	429a      	cmp	r2, r3
 8009248:	d905      	bls.n	8009256 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800924a:	2301      	movs	r3, #1
 800924c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800924e:	4b0a      	ldr	r3, [pc, #40]	; (8009278 <xTaskRemoveFromEventList+0xc0>)
 8009250:	2201      	movs	r2, #1
 8009252:	601a      	str	r2, [r3, #0]
 8009254:	e001      	b.n	800925a <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8009256:	2300      	movs	r3, #0
 8009258:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800925a:	697b      	ldr	r3, [r7, #20]
}
 800925c:	4618      	mov	r0, r3
 800925e:	3718      	adds	r7, #24
 8009260:	46bd      	mov	sp, r7
 8009262:	bd80      	pop	{r7, pc}
 8009264:	20005fc4 	.word	0x20005fc4
 8009268:	20005fa4 	.word	0x20005fa4
 800926c:	20005ea0 	.word	0x20005ea0
 8009270:	20005f5c 	.word	0x20005f5c
 8009274:	20005e9c 	.word	0x20005e9c
 8009278:	20005fb0 	.word	0x20005fb0

0800927c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800927c:	b480      	push	{r7}
 800927e:	b083      	sub	sp, #12
 8009280:	af00      	add	r7, sp, #0
 8009282:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009284:	4b06      	ldr	r3, [pc, #24]	; (80092a0 <vTaskInternalSetTimeOutState+0x24>)
 8009286:	681a      	ldr	r2, [r3, #0]
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800928c:	4b05      	ldr	r3, [pc, #20]	; (80092a4 <vTaskInternalSetTimeOutState+0x28>)
 800928e:	681a      	ldr	r2, [r3, #0]
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	605a      	str	r2, [r3, #4]
}
 8009294:	bf00      	nop
 8009296:	370c      	adds	r7, #12
 8009298:	46bd      	mov	sp, r7
 800929a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800929e:	4770      	bx	lr
 80092a0:	20005fb4 	.word	0x20005fb4
 80092a4:	20005fa0 	.word	0x20005fa0

080092a8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80092a8:	b580      	push	{r7, lr}
 80092aa:	b088      	sub	sp, #32
 80092ac:	af00      	add	r7, sp, #0
 80092ae:	6078      	str	r0, [r7, #4]
 80092b0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d10a      	bne.n	80092ce <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80092b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092bc:	f383 8811 	msr	BASEPRI, r3
 80092c0:	f3bf 8f6f 	isb	sy
 80092c4:	f3bf 8f4f 	dsb	sy
 80092c8:	613b      	str	r3, [r7, #16]
}
 80092ca:	bf00      	nop
 80092cc:	e7fe      	b.n	80092cc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80092ce:	683b      	ldr	r3, [r7, #0]
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d10a      	bne.n	80092ea <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80092d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092d8:	f383 8811 	msr	BASEPRI, r3
 80092dc:	f3bf 8f6f 	isb	sy
 80092e0:	f3bf 8f4f 	dsb	sy
 80092e4:	60fb      	str	r3, [r7, #12]
}
 80092e6:	bf00      	nop
 80092e8:	e7fe      	b.n	80092e8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80092ea:	f000 fe5b 	bl	8009fa4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80092ee:	4b1d      	ldr	r3, [pc, #116]	; (8009364 <xTaskCheckForTimeOut+0xbc>)
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	685b      	ldr	r3, [r3, #4]
 80092f8:	69ba      	ldr	r2, [r7, #24]
 80092fa:	1ad3      	subs	r3, r2, r3
 80092fc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80092fe:	683b      	ldr	r3, [r7, #0]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009306:	d102      	bne.n	800930e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009308:	2300      	movs	r3, #0
 800930a:	61fb      	str	r3, [r7, #28]
 800930c:	e023      	b.n	8009356 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	681a      	ldr	r2, [r3, #0]
 8009312:	4b15      	ldr	r3, [pc, #84]	; (8009368 <xTaskCheckForTimeOut+0xc0>)
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	429a      	cmp	r2, r3
 8009318:	d007      	beq.n	800932a <xTaskCheckForTimeOut+0x82>
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	685b      	ldr	r3, [r3, #4]
 800931e:	69ba      	ldr	r2, [r7, #24]
 8009320:	429a      	cmp	r2, r3
 8009322:	d302      	bcc.n	800932a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009324:	2301      	movs	r3, #1
 8009326:	61fb      	str	r3, [r7, #28]
 8009328:	e015      	b.n	8009356 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800932a:	683b      	ldr	r3, [r7, #0]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	697a      	ldr	r2, [r7, #20]
 8009330:	429a      	cmp	r2, r3
 8009332:	d20b      	bcs.n	800934c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009334:	683b      	ldr	r3, [r7, #0]
 8009336:	681a      	ldr	r2, [r3, #0]
 8009338:	697b      	ldr	r3, [r7, #20]
 800933a:	1ad2      	subs	r2, r2, r3
 800933c:	683b      	ldr	r3, [r7, #0]
 800933e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009340:	6878      	ldr	r0, [r7, #4]
 8009342:	f7ff ff9b 	bl	800927c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009346:	2300      	movs	r3, #0
 8009348:	61fb      	str	r3, [r7, #28]
 800934a:	e004      	b.n	8009356 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800934c:	683b      	ldr	r3, [r7, #0]
 800934e:	2200      	movs	r2, #0
 8009350:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009352:	2301      	movs	r3, #1
 8009354:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009356:	f000 fe55 	bl	800a004 <vPortExitCritical>

	return xReturn;
 800935a:	69fb      	ldr	r3, [r7, #28]
}
 800935c:	4618      	mov	r0, r3
 800935e:	3720      	adds	r7, #32
 8009360:	46bd      	mov	sp, r7
 8009362:	bd80      	pop	{r7, pc}
 8009364:	20005fa0 	.word	0x20005fa0
 8009368:	20005fb4 	.word	0x20005fb4

0800936c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800936c:	b480      	push	{r7}
 800936e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009370:	4b03      	ldr	r3, [pc, #12]	; (8009380 <vTaskMissedYield+0x14>)
 8009372:	2201      	movs	r2, #1
 8009374:	601a      	str	r2, [r3, #0]
}
 8009376:	bf00      	nop
 8009378:	46bd      	mov	sp, r7
 800937a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800937e:	4770      	bx	lr
 8009380:	20005fb0 	.word	0x20005fb0

08009384 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009384:	b580      	push	{r7, lr}
 8009386:	b082      	sub	sp, #8
 8009388:	af00      	add	r7, sp, #0
 800938a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800938c:	f000 f852 	bl	8009434 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009390:	4b06      	ldr	r3, [pc, #24]	; (80093ac <prvIdleTask+0x28>)
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	2b01      	cmp	r3, #1
 8009396:	d9f9      	bls.n	800938c <prvIdleTask+0x8>
			{
				taskYIELD();
 8009398:	4b05      	ldr	r3, [pc, #20]	; (80093b0 <prvIdleTask+0x2c>)
 800939a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800939e:	601a      	str	r2, [r3, #0]
 80093a0:	f3bf 8f4f 	dsb	sy
 80093a4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80093a8:	e7f0      	b.n	800938c <prvIdleTask+0x8>
 80093aa:	bf00      	nop
 80093ac:	20005ea0 	.word	0x20005ea0
 80093b0:	e000ed04 	.word	0xe000ed04

080093b4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80093b4:	b580      	push	{r7, lr}
 80093b6:	b082      	sub	sp, #8
 80093b8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80093ba:	2300      	movs	r3, #0
 80093bc:	607b      	str	r3, [r7, #4]
 80093be:	e00c      	b.n	80093da <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80093c0:	687a      	ldr	r2, [r7, #4]
 80093c2:	4613      	mov	r3, r2
 80093c4:	009b      	lsls	r3, r3, #2
 80093c6:	4413      	add	r3, r2
 80093c8:	009b      	lsls	r3, r3, #2
 80093ca:	4a12      	ldr	r2, [pc, #72]	; (8009414 <prvInitialiseTaskLists+0x60>)
 80093cc:	4413      	add	r3, r2
 80093ce:	4618      	mov	r0, r3
 80093d0:	f7fe fcb1 	bl	8007d36 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	3301      	adds	r3, #1
 80093d8:	607b      	str	r3, [r7, #4]
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	2b06      	cmp	r3, #6
 80093de:	d9ef      	bls.n	80093c0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80093e0:	480d      	ldr	r0, [pc, #52]	; (8009418 <prvInitialiseTaskLists+0x64>)
 80093e2:	f7fe fca8 	bl	8007d36 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80093e6:	480d      	ldr	r0, [pc, #52]	; (800941c <prvInitialiseTaskLists+0x68>)
 80093e8:	f7fe fca5 	bl	8007d36 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80093ec:	480c      	ldr	r0, [pc, #48]	; (8009420 <prvInitialiseTaskLists+0x6c>)
 80093ee:	f7fe fca2 	bl	8007d36 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80093f2:	480c      	ldr	r0, [pc, #48]	; (8009424 <prvInitialiseTaskLists+0x70>)
 80093f4:	f7fe fc9f 	bl	8007d36 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80093f8:	480b      	ldr	r0, [pc, #44]	; (8009428 <prvInitialiseTaskLists+0x74>)
 80093fa:	f7fe fc9c 	bl	8007d36 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80093fe:	4b0b      	ldr	r3, [pc, #44]	; (800942c <prvInitialiseTaskLists+0x78>)
 8009400:	4a05      	ldr	r2, [pc, #20]	; (8009418 <prvInitialiseTaskLists+0x64>)
 8009402:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009404:	4b0a      	ldr	r3, [pc, #40]	; (8009430 <prvInitialiseTaskLists+0x7c>)
 8009406:	4a05      	ldr	r2, [pc, #20]	; (800941c <prvInitialiseTaskLists+0x68>)
 8009408:	601a      	str	r2, [r3, #0]
}
 800940a:	bf00      	nop
 800940c:	3708      	adds	r7, #8
 800940e:	46bd      	mov	sp, r7
 8009410:	bd80      	pop	{r7, pc}
 8009412:	bf00      	nop
 8009414:	20005ea0 	.word	0x20005ea0
 8009418:	20005f2c 	.word	0x20005f2c
 800941c:	20005f40 	.word	0x20005f40
 8009420:	20005f5c 	.word	0x20005f5c
 8009424:	20005f70 	.word	0x20005f70
 8009428:	20005f88 	.word	0x20005f88
 800942c:	20005f54 	.word	0x20005f54
 8009430:	20005f58 	.word	0x20005f58

08009434 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009434:	b580      	push	{r7, lr}
 8009436:	b082      	sub	sp, #8
 8009438:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800943a:	e019      	b.n	8009470 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800943c:	f000 fdb2 	bl	8009fa4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009440:	4b10      	ldr	r3, [pc, #64]	; (8009484 <prvCheckTasksWaitingTermination+0x50>)
 8009442:	68db      	ldr	r3, [r3, #12]
 8009444:	68db      	ldr	r3, [r3, #12]
 8009446:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	3304      	adds	r3, #4
 800944c:	4618      	mov	r0, r3
 800944e:	f7fe fcfc 	bl	8007e4a <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009452:	4b0d      	ldr	r3, [pc, #52]	; (8009488 <prvCheckTasksWaitingTermination+0x54>)
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	3b01      	subs	r3, #1
 8009458:	4a0b      	ldr	r2, [pc, #44]	; (8009488 <prvCheckTasksWaitingTermination+0x54>)
 800945a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800945c:	4b0b      	ldr	r3, [pc, #44]	; (800948c <prvCheckTasksWaitingTermination+0x58>)
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	3b01      	subs	r3, #1
 8009462:	4a0a      	ldr	r2, [pc, #40]	; (800948c <prvCheckTasksWaitingTermination+0x58>)
 8009464:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009466:	f000 fdcd 	bl	800a004 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800946a:	6878      	ldr	r0, [r7, #4]
 800946c:	f000 f810 	bl	8009490 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009470:	4b06      	ldr	r3, [pc, #24]	; (800948c <prvCheckTasksWaitingTermination+0x58>)
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	2b00      	cmp	r3, #0
 8009476:	d1e1      	bne.n	800943c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009478:	bf00      	nop
 800947a:	bf00      	nop
 800947c:	3708      	adds	r7, #8
 800947e:	46bd      	mov	sp, r7
 8009480:	bd80      	pop	{r7, pc}
 8009482:	bf00      	nop
 8009484:	20005f70 	.word	0x20005f70
 8009488:	20005f9c 	.word	0x20005f9c
 800948c:	20005f84 	.word	0x20005f84

08009490 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009490:	b480      	push	{r7}
 8009492:	b083      	sub	sp, #12
 8009494:	af00      	add	r7, sp, #0
 8009496:	6078      	str	r0, [r7, #4]
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009498:	bf00      	nop
 800949a:	370c      	adds	r7, #12
 800949c:	46bd      	mov	sp, r7
 800949e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094a2:	4770      	bx	lr

080094a4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80094a4:	b480      	push	{r7}
 80094a6:	b083      	sub	sp, #12
 80094a8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80094aa:	4b0c      	ldr	r3, [pc, #48]	; (80094dc <prvResetNextTaskUnblockTime+0x38>)
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	d104      	bne.n	80094be <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80094b4:	4b0a      	ldr	r3, [pc, #40]	; (80094e0 <prvResetNextTaskUnblockTime+0x3c>)
 80094b6:	f04f 32ff 	mov.w	r2, #4294967295
 80094ba:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80094bc:	e008      	b.n	80094d0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80094be:	4b07      	ldr	r3, [pc, #28]	; (80094dc <prvResetNextTaskUnblockTime+0x38>)
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	68db      	ldr	r3, [r3, #12]
 80094c4:	68db      	ldr	r3, [r3, #12]
 80094c6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	685b      	ldr	r3, [r3, #4]
 80094cc:	4a04      	ldr	r2, [pc, #16]	; (80094e0 <prvResetNextTaskUnblockTime+0x3c>)
 80094ce:	6013      	str	r3, [r2, #0]
}
 80094d0:	bf00      	nop
 80094d2:	370c      	adds	r7, #12
 80094d4:	46bd      	mov	sp, r7
 80094d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094da:	4770      	bx	lr
 80094dc:	20005f54 	.word	0x20005f54
 80094e0:	20005fbc 	.word	0x20005fbc

080094e4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80094e4:	b480      	push	{r7}
 80094e6:	b083      	sub	sp, #12
 80094e8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80094ea:	4b0b      	ldr	r3, [pc, #44]	; (8009518 <xTaskGetSchedulerState+0x34>)
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d102      	bne.n	80094f8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80094f2:	2301      	movs	r3, #1
 80094f4:	607b      	str	r3, [r7, #4]
 80094f6:	e008      	b.n	800950a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80094f8:	4b08      	ldr	r3, [pc, #32]	; (800951c <xTaskGetSchedulerState+0x38>)
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d102      	bne.n	8009506 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009500:	2302      	movs	r3, #2
 8009502:	607b      	str	r3, [r7, #4]
 8009504:	e001      	b.n	800950a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009506:	2300      	movs	r3, #0
 8009508:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800950a:	687b      	ldr	r3, [r7, #4]
	}
 800950c:	4618      	mov	r0, r3
 800950e:	370c      	adds	r7, #12
 8009510:	46bd      	mov	sp, r7
 8009512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009516:	4770      	bx	lr
 8009518:	20005fa8 	.word	0x20005fa8
 800951c:	20005fc4 	.word	0x20005fc4

08009520 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009520:	b580      	push	{r7, lr}
 8009522:	b086      	sub	sp, #24
 8009524:	af00      	add	r7, sp, #0
 8009526:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800952c:	2300      	movs	r3, #0
 800952e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	2b00      	cmp	r3, #0
 8009534:	d06e      	beq.n	8009614 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009536:	4b3a      	ldr	r3, [pc, #232]	; (8009620 <xTaskPriorityDisinherit+0x100>)
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	693a      	ldr	r2, [r7, #16]
 800953c:	429a      	cmp	r2, r3
 800953e:	d00a      	beq.n	8009556 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8009540:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009544:	f383 8811 	msr	BASEPRI, r3
 8009548:	f3bf 8f6f 	isb	sy
 800954c:	f3bf 8f4f 	dsb	sy
 8009550:	60fb      	str	r3, [r7, #12]
}
 8009552:	bf00      	nop
 8009554:	e7fe      	b.n	8009554 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8009556:	693b      	ldr	r3, [r7, #16]
 8009558:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800955a:	2b00      	cmp	r3, #0
 800955c:	d10a      	bne.n	8009574 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800955e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009562:	f383 8811 	msr	BASEPRI, r3
 8009566:	f3bf 8f6f 	isb	sy
 800956a:	f3bf 8f4f 	dsb	sy
 800956e:	60bb      	str	r3, [r7, #8]
}
 8009570:	bf00      	nop
 8009572:	e7fe      	b.n	8009572 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8009574:	693b      	ldr	r3, [r7, #16]
 8009576:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009578:	1e5a      	subs	r2, r3, #1
 800957a:	693b      	ldr	r3, [r7, #16]
 800957c:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800957e:	693b      	ldr	r3, [r7, #16]
 8009580:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009582:	693b      	ldr	r3, [r7, #16]
 8009584:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009586:	429a      	cmp	r2, r3
 8009588:	d044      	beq.n	8009614 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800958a:	693b      	ldr	r3, [r7, #16]
 800958c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800958e:	2b00      	cmp	r3, #0
 8009590:	d140      	bne.n	8009614 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009592:	693b      	ldr	r3, [r7, #16]
 8009594:	3304      	adds	r3, #4
 8009596:	4618      	mov	r0, r3
 8009598:	f7fe fc57 	bl	8007e4a <uxListRemove>
 800959c:	4603      	mov	r3, r0
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d115      	bne.n	80095ce <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80095a2:	693b      	ldr	r3, [r7, #16]
 80095a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80095a6:	491f      	ldr	r1, [pc, #124]	; (8009624 <xTaskPriorityDisinherit+0x104>)
 80095a8:	4613      	mov	r3, r2
 80095aa:	009b      	lsls	r3, r3, #2
 80095ac:	4413      	add	r3, r2
 80095ae:	009b      	lsls	r3, r3, #2
 80095b0:	440b      	add	r3, r1
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d10a      	bne.n	80095ce <xTaskPriorityDisinherit+0xae>
 80095b8:	693b      	ldr	r3, [r7, #16]
 80095ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095bc:	2201      	movs	r2, #1
 80095be:	fa02 f303 	lsl.w	r3, r2, r3
 80095c2:	43da      	mvns	r2, r3
 80095c4:	4b18      	ldr	r3, [pc, #96]	; (8009628 <xTaskPriorityDisinherit+0x108>)
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	4013      	ands	r3, r2
 80095ca:	4a17      	ldr	r2, [pc, #92]	; (8009628 <xTaskPriorityDisinherit+0x108>)
 80095cc:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80095ce:	693b      	ldr	r3, [r7, #16]
 80095d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80095d2:	693b      	ldr	r3, [r7, #16]
 80095d4:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80095d6:	693b      	ldr	r3, [r7, #16]
 80095d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095da:	f1c3 0207 	rsb	r2, r3, #7
 80095de:	693b      	ldr	r3, [r7, #16]
 80095e0:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80095e2:	693b      	ldr	r3, [r7, #16]
 80095e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095e6:	2201      	movs	r2, #1
 80095e8:	409a      	lsls	r2, r3
 80095ea:	4b0f      	ldr	r3, [pc, #60]	; (8009628 <xTaskPriorityDisinherit+0x108>)
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	4313      	orrs	r3, r2
 80095f0:	4a0d      	ldr	r2, [pc, #52]	; (8009628 <xTaskPriorityDisinherit+0x108>)
 80095f2:	6013      	str	r3, [r2, #0]
 80095f4:	693b      	ldr	r3, [r7, #16]
 80095f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80095f8:	4613      	mov	r3, r2
 80095fa:	009b      	lsls	r3, r3, #2
 80095fc:	4413      	add	r3, r2
 80095fe:	009b      	lsls	r3, r3, #2
 8009600:	4a08      	ldr	r2, [pc, #32]	; (8009624 <xTaskPriorityDisinherit+0x104>)
 8009602:	441a      	add	r2, r3
 8009604:	693b      	ldr	r3, [r7, #16]
 8009606:	3304      	adds	r3, #4
 8009608:	4619      	mov	r1, r3
 800960a:	4610      	mov	r0, r2
 800960c:	f7fe fbc0 	bl	8007d90 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009610:	2301      	movs	r3, #1
 8009612:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009614:	697b      	ldr	r3, [r7, #20]
	}
 8009616:	4618      	mov	r0, r3
 8009618:	3718      	adds	r7, #24
 800961a:	46bd      	mov	sp, r7
 800961c:	bd80      	pop	{r7, pc}
 800961e:	bf00      	nop
 8009620:	20005e9c 	.word	0x20005e9c
 8009624:	20005ea0 	.word	0x20005ea0
 8009628:	20005fa4 	.word	0x20005fa4

0800962c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800962c:	b580      	push	{r7, lr}
 800962e:	b084      	sub	sp, #16
 8009630:	af00      	add	r7, sp, #0
 8009632:	6078      	str	r0, [r7, #4]
 8009634:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009636:	4b29      	ldr	r3, [pc, #164]	; (80096dc <prvAddCurrentTaskToDelayedList+0xb0>)
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800963c:	4b28      	ldr	r3, [pc, #160]	; (80096e0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	3304      	adds	r3, #4
 8009642:	4618      	mov	r0, r3
 8009644:	f7fe fc01 	bl	8007e4a <uxListRemove>
 8009648:	4603      	mov	r3, r0
 800964a:	2b00      	cmp	r3, #0
 800964c:	d10b      	bne.n	8009666 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800964e:	4b24      	ldr	r3, [pc, #144]	; (80096e0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009654:	2201      	movs	r2, #1
 8009656:	fa02 f303 	lsl.w	r3, r2, r3
 800965a:	43da      	mvns	r2, r3
 800965c:	4b21      	ldr	r3, [pc, #132]	; (80096e4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	4013      	ands	r3, r2
 8009662:	4a20      	ldr	r2, [pc, #128]	; (80096e4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8009664:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	f1b3 3fff 	cmp.w	r3, #4294967295
 800966c:	d10a      	bne.n	8009684 <prvAddCurrentTaskToDelayedList+0x58>
 800966e:	683b      	ldr	r3, [r7, #0]
 8009670:	2b00      	cmp	r3, #0
 8009672:	d007      	beq.n	8009684 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009674:	4b1a      	ldr	r3, [pc, #104]	; (80096e0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	3304      	adds	r3, #4
 800967a:	4619      	mov	r1, r3
 800967c:	481a      	ldr	r0, [pc, #104]	; (80096e8 <prvAddCurrentTaskToDelayedList+0xbc>)
 800967e:	f7fe fb87 	bl	8007d90 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009682:	e026      	b.n	80096d2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009684:	68fa      	ldr	r2, [r7, #12]
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	4413      	add	r3, r2
 800968a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800968c:	4b14      	ldr	r3, [pc, #80]	; (80096e0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	68ba      	ldr	r2, [r7, #8]
 8009692:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009694:	68ba      	ldr	r2, [r7, #8]
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	429a      	cmp	r2, r3
 800969a:	d209      	bcs.n	80096b0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800969c:	4b13      	ldr	r3, [pc, #76]	; (80096ec <prvAddCurrentTaskToDelayedList+0xc0>)
 800969e:	681a      	ldr	r2, [r3, #0]
 80096a0:	4b0f      	ldr	r3, [pc, #60]	; (80096e0 <prvAddCurrentTaskToDelayedList+0xb4>)
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	3304      	adds	r3, #4
 80096a6:	4619      	mov	r1, r3
 80096a8:	4610      	mov	r0, r2
 80096aa:	f7fe fb95 	bl	8007dd8 <vListInsert>
}
 80096ae:	e010      	b.n	80096d2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80096b0:	4b0f      	ldr	r3, [pc, #60]	; (80096f0 <prvAddCurrentTaskToDelayedList+0xc4>)
 80096b2:	681a      	ldr	r2, [r3, #0]
 80096b4:	4b0a      	ldr	r3, [pc, #40]	; (80096e0 <prvAddCurrentTaskToDelayedList+0xb4>)
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	3304      	adds	r3, #4
 80096ba:	4619      	mov	r1, r3
 80096bc:	4610      	mov	r0, r2
 80096be:	f7fe fb8b 	bl	8007dd8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80096c2:	4b0c      	ldr	r3, [pc, #48]	; (80096f4 <prvAddCurrentTaskToDelayedList+0xc8>)
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	68ba      	ldr	r2, [r7, #8]
 80096c8:	429a      	cmp	r2, r3
 80096ca:	d202      	bcs.n	80096d2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80096cc:	4a09      	ldr	r2, [pc, #36]	; (80096f4 <prvAddCurrentTaskToDelayedList+0xc8>)
 80096ce:	68bb      	ldr	r3, [r7, #8]
 80096d0:	6013      	str	r3, [r2, #0]
}
 80096d2:	bf00      	nop
 80096d4:	3710      	adds	r7, #16
 80096d6:	46bd      	mov	sp, r7
 80096d8:	bd80      	pop	{r7, pc}
 80096da:	bf00      	nop
 80096dc:	20005fa0 	.word	0x20005fa0
 80096e0:	20005e9c 	.word	0x20005e9c
 80096e4:	20005fa4 	.word	0x20005fa4
 80096e8:	20005f88 	.word	0x20005f88
 80096ec:	20005f58 	.word	0x20005f58
 80096f0:	20005f54 	.word	0x20005f54
 80096f4:	20005fbc 	.word	0x20005fbc

080096f8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80096f8:	b580      	push	{r7, lr}
 80096fa:	b08a      	sub	sp, #40	; 0x28
 80096fc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80096fe:	2300      	movs	r3, #0
 8009700:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8009702:	f000 fae1 	bl	8009cc8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8009706:	4b1c      	ldr	r3, [pc, #112]	; (8009778 <xTimerCreateTimerTask+0x80>)
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	2b00      	cmp	r3, #0
 800970c:	d021      	beq.n	8009752 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800970e:	2300      	movs	r3, #0
 8009710:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009712:	2300      	movs	r3, #0
 8009714:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009716:	1d3a      	adds	r2, r7, #4
 8009718:	f107 0108 	add.w	r1, r7, #8
 800971c:	f107 030c 	add.w	r3, r7, #12
 8009720:	4618      	mov	r0, r3
 8009722:	f7f7 fca5 	bl	8001070 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009726:	6879      	ldr	r1, [r7, #4]
 8009728:	68bb      	ldr	r3, [r7, #8]
 800972a:	68fa      	ldr	r2, [r7, #12]
 800972c:	9202      	str	r2, [sp, #8]
 800972e:	9301      	str	r3, [sp, #4]
 8009730:	2302      	movs	r3, #2
 8009732:	9300      	str	r3, [sp, #0]
 8009734:	2300      	movs	r3, #0
 8009736:	460a      	mov	r2, r1
 8009738:	4910      	ldr	r1, [pc, #64]	; (800977c <xTimerCreateTimerTask+0x84>)
 800973a:	4811      	ldr	r0, [pc, #68]	; (8009780 <xTimerCreateTimerTask+0x88>)
 800973c:	f7ff f93a 	bl	80089b4 <xTaskCreateStatic>
 8009740:	4603      	mov	r3, r0
 8009742:	4a10      	ldr	r2, [pc, #64]	; (8009784 <xTimerCreateTimerTask+0x8c>)
 8009744:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8009746:	4b0f      	ldr	r3, [pc, #60]	; (8009784 <xTimerCreateTimerTask+0x8c>)
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	2b00      	cmp	r3, #0
 800974c:	d001      	beq.n	8009752 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800974e:	2301      	movs	r3, #1
 8009750:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8009752:	697b      	ldr	r3, [r7, #20]
 8009754:	2b00      	cmp	r3, #0
 8009756:	d10a      	bne.n	800976e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8009758:	f04f 0350 	mov.w	r3, #80	; 0x50
 800975c:	f383 8811 	msr	BASEPRI, r3
 8009760:	f3bf 8f6f 	isb	sy
 8009764:	f3bf 8f4f 	dsb	sy
 8009768:	613b      	str	r3, [r7, #16]
}
 800976a:	bf00      	nop
 800976c:	e7fe      	b.n	800976c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800976e:	697b      	ldr	r3, [r7, #20]
}
 8009770:	4618      	mov	r0, r3
 8009772:	3718      	adds	r7, #24
 8009774:	46bd      	mov	sp, r7
 8009776:	bd80      	pop	{r7, pc}
 8009778:	20005ff8 	.word	0x20005ff8
 800977c:	0800ac20 	.word	0x0800ac20
 8009780:	080098bd 	.word	0x080098bd
 8009784:	20005ffc 	.word	0x20005ffc

08009788 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009788:	b580      	push	{r7, lr}
 800978a:	b08a      	sub	sp, #40	; 0x28
 800978c:	af00      	add	r7, sp, #0
 800978e:	60f8      	str	r0, [r7, #12]
 8009790:	60b9      	str	r1, [r7, #8]
 8009792:	607a      	str	r2, [r7, #4]
 8009794:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8009796:	2300      	movs	r3, #0
 8009798:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	2b00      	cmp	r3, #0
 800979e:	d10a      	bne.n	80097b6 <xTimerGenericCommand+0x2e>
	__asm volatile
 80097a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097a4:	f383 8811 	msr	BASEPRI, r3
 80097a8:	f3bf 8f6f 	isb	sy
 80097ac:	f3bf 8f4f 	dsb	sy
 80097b0:	623b      	str	r3, [r7, #32]
}
 80097b2:	bf00      	nop
 80097b4:	e7fe      	b.n	80097b4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80097b6:	4b1a      	ldr	r3, [pc, #104]	; (8009820 <xTimerGenericCommand+0x98>)
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d02a      	beq.n	8009814 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80097be:	68bb      	ldr	r3, [r7, #8]
 80097c0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80097ca:	68bb      	ldr	r3, [r7, #8]
 80097cc:	2b05      	cmp	r3, #5
 80097ce:	dc18      	bgt.n	8009802 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80097d0:	f7ff fe88 	bl	80094e4 <xTaskGetSchedulerState>
 80097d4:	4603      	mov	r3, r0
 80097d6:	2b02      	cmp	r3, #2
 80097d8:	d109      	bne.n	80097ee <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80097da:	4b11      	ldr	r3, [pc, #68]	; (8009820 <xTimerGenericCommand+0x98>)
 80097dc:	6818      	ldr	r0, [r3, #0]
 80097de:	f107 0114 	add.w	r1, r7, #20
 80097e2:	2300      	movs	r3, #0
 80097e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80097e6:	f7fe fc57 	bl	8008098 <xQueueGenericSend>
 80097ea:	6278      	str	r0, [r7, #36]	; 0x24
 80097ec:	e012      	b.n	8009814 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80097ee:	4b0c      	ldr	r3, [pc, #48]	; (8009820 <xTimerGenericCommand+0x98>)
 80097f0:	6818      	ldr	r0, [r3, #0]
 80097f2:	f107 0114 	add.w	r1, r7, #20
 80097f6:	2300      	movs	r3, #0
 80097f8:	2200      	movs	r2, #0
 80097fa:	f7fe fc4d 	bl	8008098 <xQueueGenericSend>
 80097fe:	6278      	str	r0, [r7, #36]	; 0x24
 8009800:	e008      	b.n	8009814 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009802:	4b07      	ldr	r3, [pc, #28]	; (8009820 <xTimerGenericCommand+0x98>)
 8009804:	6818      	ldr	r0, [r3, #0]
 8009806:	f107 0114 	add.w	r1, r7, #20
 800980a:	2300      	movs	r3, #0
 800980c:	683a      	ldr	r2, [r7, #0]
 800980e:	f7fe fd41 	bl	8008294 <xQueueGenericSendFromISR>
 8009812:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009816:	4618      	mov	r0, r3
 8009818:	3728      	adds	r7, #40	; 0x28
 800981a:	46bd      	mov	sp, r7
 800981c:	bd80      	pop	{r7, pc}
 800981e:	bf00      	nop
 8009820:	20005ff8 	.word	0x20005ff8

08009824 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009824:	b580      	push	{r7, lr}
 8009826:	b088      	sub	sp, #32
 8009828:	af02      	add	r7, sp, #8
 800982a:	6078      	str	r0, [r7, #4]
 800982c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800982e:	4b22      	ldr	r3, [pc, #136]	; (80098b8 <prvProcessExpiredTimer+0x94>)
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	68db      	ldr	r3, [r3, #12]
 8009834:	68db      	ldr	r3, [r3, #12]
 8009836:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009838:	697b      	ldr	r3, [r7, #20]
 800983a:	3304      	adds	r3, #4
 800983c:	4618      	mov	r0, r3
 800983e:	f7fe fb04 	bl	8007e4a <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009842:	697b      	ldr	r3, [r7, #20]
 8009844:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009848:	f003 0304 	and.w	r3, r3, #4
 800984c:	2b00      	cmp	r3, #0
 800984e:	d022      	beq.n	8009896 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009850:	697b      	ldr	r3, [r7, #20]
 8009852:	699a      	ldr	r2, [r3, #24]
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	18d1      	adds	r1, r2, r3
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	683a      	ldr	r2, [r7, #0]
 800985c:	6978      	ldr	r0, [r7, #20]
 800985e:	f000 f8d1 	bl	8009a04 <prvInsertTimerInActiveList>
 8009862:	4603      	mov	r3, r0
 8009864:	2b00      	cmp	r3, #0
 8009866:	d01f      	beq.n	80098a8 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009868:	2300      	movs	r3, #0
 800986a:	9300      	str	r3, [sp, #0]
 800986c:	2300      	movs	r3, #0
 800986e:	687a      	ldr	r2, [r7, #4]
 8009870:	2100      	movs	r1, #0
 8009872:	6978      	ldr	r0, [r7, #20]
 8009874:	f7ff ff88 	bl	8009788 <xTimerGenericCommand>
 8009878:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800987a:	693b      	ldr	r3, [r7, #16]
 800987c:	2b00      	cmp	r3, #0
 800987e:	d113      	bne.n	80098a8 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8009880:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009884:	f383 8811 	msr	BASEPRI, r3
 8009888:	f3bf 8f6f 	isb	sy
 800988c:	f3bf 8f4f 	dsb	sy
 8009890:	60fb      	str	r3, [r7, #12]
}
 8009892:	bf00      	nop
 8009894:	e7fe      	b.n	8009894 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009896:	697b      	ldr	r3, [r7, #20]
 8009898:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800989c:	f023 0301 	bic.w	r3, r3, #1
 80098a0:	b2da      	uxtb	r2, r3
 80098a2:	697b      	ldr	r3, [r7, #20]
 80098a4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80098a8:	697b      	ldr	r3, [r7, #20]
 80098aa:	6a1b      	ldr	r3, [r3, #32]
 80098ac:	6978      	ldr	r0, [r7, #20]
 80098ae:	4798      	blx	r3
}
 80098b0:	bf00      	nop
 80098b2:	3718      	adds	r7, #24
 80098b4:	46bd      	mov	sp, r7
 80098b6:	bd80      	pop	{r7, pc}
 80098b8:	20005ff0 	.word	0x20005ff0

080098bc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80098bc:	b580      	push	{r7, lr}
 80098be:	b084      	sub	sp, #16
 80098c0:	af00      	add	r7, sp, #0
 80098c2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80098c4:	f107 0308 	add.w	r3, r7, #8
 80098c8:	4618      	mov	r0, r3
 80098ca:	f000 f857 	bl	800997c <prvGetNextExpireTime>
 80098ce:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80098d0:	68bb      	ldr	r3, [r7, #8]
 80098d2:	4619      	mov	r1, r3
 80098d4:	68f8      	ldr	r0, [r7, #12]
 80098d6:	f000 f803 	bl	80098e0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80098da:	f000 f8d5 	bl	8009a88 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80098de:	e7f1      	b.n	80098c4 <prvTimerTask+0x8>

080098e0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80098e0:	b580      	push	{r7, lr}
 80098e2:	b084      	sub	sp, #16
 80098e4:	af00      	add	r7, sp, #0
 80098e6:	6078      	str	r0, [r7, #4]
 80098e8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80098ea:	f7ff fa47 	bl	8008d7c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80098ee:	f107 0308 	add.w	r3, r7, #8
 80098f2:	4618      	mov	r0, r3
 80098f4:	f000 f866 	bl	80099c4 <prvSampleTimeNow>
 80098f8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80098fa:	68bb      	ldr	r3, [r7, #8]
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d130      	bne.n	8009962 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009900:	683b      	ldr	r3, [r7, #0]
 8009902:	2b00      	cmp	r3, #0
 8009904:	d10a      	bne.n	800991c <prvProcessTimerOrBlockTask+0x3c>
 8009906:	687a      	ldr	r2, [r7, #4]
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	429a      	cmp	r2, r3
 800990c:	d806      	bhi.n	800991c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800990e:	f7ff fa43 	bl	8008d98 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009912:	68f9      	ldr	r1, [r7, #12]
 8009914:	6878      	ldr	r0, [r7, #4]
 8009916:	f7ff ff85 	bl	8009824 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800991a:	e024      	b.n	8009966 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800991c:	683b      	ldr	r3, [r7, #0]
 800991e:	2b00      	cmp	r3, #0
 8009920:	d008      	beq.n	8009934 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009922:	4b13      	ldr	r3, [pc, #76]	; (8009970 <prvProcessTimerOrBlockTask+0x90>)
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	2b00      	cmp	r3, #0
 800992a:	d101      	bne.n	8009930 <prvProcessTimerOrBlockTask+0x50>
 800992c:	2301      	movs	r3, #1
 800992e:	e000      	b.n	8009932 <prvProcessTimerOrBlockTask+0x52>
 8009930:	2300      	movs	r3, #0
 8009932:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009934:	4b0f      	ldr	r3, [pc, #60]	; (8009974 <prvProcessTimerOrBlockTask+0x94>)
 8009936:	6818      	ldr	r0, [r3, #0]
 8009938:	687a      	ldr	r2, [r7, #4]
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	1ad3      	subs	r3, r2, r3
 800993e:	683a      	ldr	r2, [r7, #0]
 8009940:	4619      	mov	r1, r3
 8009942:	f7ff f803 	bl	800894c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009946:	f7ff fa27 	bl	8008d98 <xTaskResumeAll>
 800994a:	4603      	mov	r3, r0
 800994c:	2b00      	cmp	r3, #0
 800994e:	d10a      	bne.n	8009966 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009950:	4b09      	ldr	r3, [pc, #36]	; (8009978 <prvProcessTimerOrBlockTask+0x98>)
 8009952:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009956:	601a      	str	r2, [r3, #0]
 8009958:	f3bf 8f4f 	dsb	sy
 800995c:	f3bf 8f6f 	isb	sy
}
 8009960:	e001      	b.n	8009966 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009962:	f7ff fa19 	bl	8008d98 <xTaskResumeAll>
}
 8009966:	bf00      	nop
 8009968:	3710      	adds	r7, #16
 800996a:	46bd      	mov	sp, r7
 800996c:	bd80      	pop	{r7, pc}
 800996e:	bf00      	nop
 8009970:	20005ff4 	.word	0x20005ff4
 8009974:	20005ff8 	.word	0x20005ff8
 8009978:	e000ed04 	.word	0xe000ed04

0800997c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800997c:	b480      	push	{r7}
 800997e:	b085      	sub	sp, #20
 8009980:	af00      	add	r7, sp, #0
 8009982:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009984:	4b0e      	ldr	r3, [pc, #56]	; (80099c0 <prvGetNextExpireTime+0x44>)
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	2b00      	cmp	r3, #0
 800998c:	d101      	bne.n	8009992 <prvGetNextExpireTime+0x16>
 800998e:	2201      	movs	r2, #1
 8009990:	e000      	b.n	8009994 <prvGetNextExpireTime+0x18>
 8009992:	2200      	movs	r2, #0
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	2b00      	cmp	r3, #0
 800999e:	d105      	bne.n	80099ac <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80099a0:	4b07      	ldr	r3, [pc, #28]	; (80099c0 <prvGetNextExpireTime+0x44>)
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	68db      	ldr	r3, [r3, #12]
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	60fb      	str	r3, [r7, #12]
 80099aa:	e001      	b.n	80099b0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80099ac:	2300      	movs	r3, #0
 80099ae:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80099b0:	68fb      	ldr	r3, [r7, #12]
}
 80099b2:	4618      	mov	r0, r3
 80099b4:	3714      	adds	r7, #20
 80099b6:	46bd      	mov	sp, r7
 80099b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099bc:	4770      	bx	lr
 80099be:	bf00      	nop
 80099c0:	20005ff0 	.word	0x20005ff0

080099c4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80099c4:	b580      	push	{r7, lr}
 80099c6:	b084      	sub	sp, #16
 80099c8:	af00      	add	r7, sp, #0
 80099ca:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80099cc:	f7ff fa80 	bl	8008ed0 <xTaskGetTickCount>
 80099d0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80099d2:	4b0b      	ldr	r3, [pc, #44]	; (8009a00 <prvSampleTimeNow+0x3c>)
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	68fa      	ldr	r2, [r7, #12]
 80099d8:	429a      	cmp	r2, r3
 80099da:	d205      	bcs.n	80099e8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80099dc:	f000 f910 	bl	8009c00 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	2201      	movs	r2, #1
 80099e4:	601a      	str	r2, [r3, #0]
 80099e6:	e002      	b.n	80099ee <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	2200      	movs	r2, #0
 80099ec:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80099ee:	4a04      	ldr	r2, [pc, #16]	; (8009a00 <prvSampleTimeNow+0x3c>)
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80099f4:	68fb      	ldr	r3, [r7, #12]
}
 80099f6:	4618      	mov	r0, r3
 80099f8:	3710      	adds	r7, #16
 80099fa:	46bd      	mov	sp, r7
 80099fc:	bd80      	pop	{r7, pc}
 80099fe:	bf00      	nop
 8009a00:	20006000 	.word	0x20006000

08009a04 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009a04:	b580      	push	{r7, lr}
 8009a06:	b086      	sub	sp, #24
 8009a08:	af00      	add	r7, sp, #0
 8009a0a:	60f8      	str	r0, [r7, #12]
 8009a0c:	60b9      	str	r1, [r7, #8]
 8009a0e:	607a      	str	r2, [r7, #4]
 8009a10:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009a12:	2300      	movs	r3, #0
 8009a14:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	68ba      	ldr	r2, [r7, #8]
 8009a1a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	68fa      	ldr	r2, [r7, #12]
 8009a20:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009a22:	68ba      	ldr	r2, [r7, #8]
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	429a      	cmp	r2, r3
 8009a28:	d812      	bhi.n	8009a50 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009a2a:	687a      	ldr	r2, [r7, #4]
 8009a2c:	683b      	ldr	r3, [r7, #0]
 8009a2e:	1ad2      	subs	r2, r2, r3
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	699b      	ldr	r3, [r3, #24]
 8009a34:	429a      	cmp	r2, r3
 8009a36:	d302      	bcc.n	8009a3e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009a38:	2301      	movs	r3, #1
 8009a3a:	617b      	str	r3, [r7, #20]
 8009a3c:	e01b      	b.n	8009a76 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009a3e:	4b10      	ldr	r3, [pc, #64]	; (8009a80 <prvInsertTimerInActiveList+0x7c>)
 8009a40:	681a      	ldr	r2, [r3, #0]
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	3304      	adds	r3, #4
 8009a46:	4619      	mov	r1, r3
 8009a48:	4610      	mov	r0, r2
 8009a4a:	f7fe f9c5 	bl	8007dd8 <vListInsert>
 8009a4e:	e012      	b.n	8009a76 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009a50:	687a      	ldr	r2, [r7, #4]
 8009a52:	683b      	ldr	r3, [r7, #0]
 8009a54:	429a      	cmp	r2, r3
 8009a56:	d206      	bcs.n	8009a66 <prvInsertTimerInActiveList+0x62>
 8009a58:	68ba      	ldr	r2, [r7, #8]
 8009a5a:	683b      	ldr	r3, [r7, #0]
 8009a5c:	429a      	cmp	r2, r3
 8009a5e:	d302      	bcc.n	8009a66 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009a60:	2301      	movs	r3, #1
 8009a62:	617b      	str	r3, [r7, #20]
 8009a64:	e007      	b.n	8009a76 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009a66:	4b07      	ldr	r3, [pc, #28]	; (8009a84 <prvInsertTimerInActiveList+0x80>)
 8009a68:	681a      	ldr	r2, [r3, #0]
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	3304      	adds	r3, #4
 8009a6e:	4619      	mov	r1, r3
 8009a70:	4610      	mov	r0, r2
 8009a72:	f7fe f9b1 	bl	8007dd8 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009a76:	697b      	ldr	r3, [r7, #20]
}
 8009a78:	4618      	mov	r0, r3
 8009a7a:	3718      	adds	r7, #24
 8009a7c:	46bd      	mov	sp, r7
 8009a7e:	bd80      	pop	{r7, pc}
 8009a80:	20005ff4 	.word	0x20005ff4
 8009a84:	20005ff0 	.word	0x20005ff0

08009a88 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009a88:	b580      	push	{r7, lr}
 8009a8a:	b08c      	sub	sp, #48	; 0x30
 8009a8c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009a8e:	e0a3      	b.n	8009bd8 <prvProcessReceivedCommands+0x150>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009a90:	68bb      	ldr	r3, [r7, #8]
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	f2c0 80a0 	blt.w	8009bd8 <prvProcessReceivedCommands+0x150>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009a98:	693b      	ldr	r3, [r7, #16]
 8009a9a:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a9e:	695b      	ldr	r3, [r3, #20]
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d004      	beq.n	8009aae <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009aa6:	3304      	adds	r3, #4
 8009aa8:	4618      	mov	r0, r3
 8009aaa:	f7fe f9ce 	bl	8007e4a <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009aae:	1d3b      	adds	r3, r7, #4
 8009ab0:	4618      	mov	r0, r3
 8009ab2:	f7ff ff87 	bl	80099c4 <prvSampleTimeNow>
 8009ab6:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 8009ab8:	68bb      	ldr	r3, [r7, #8]
 8009aba:	2b09      	cmp	r3, #9
 8009abc:	f200 808b 	bhi.w	8009bd6 <prvProcessReceivedCommands+0x14e>
 8009ac0:	a201      	add	r2, pc, #4	; (adr r2, 8009ac8 <prvProcessReceivedCommands+0x40>)
 8009ac2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ac6:	bf00      	nop
 8009ac8:	08009af1 	.word	0x08009af1
 8009acc:	08009af1 	.word	0x08009af1
 8009ad0:	08009af1 	.word	0x08009af1
 8009ad4:	08009b65 	.word	0x08009b65
 8009ad8:	08009b79 	.word	0x08009b79
 8009adc:	08009bc3 	.word	0x08009bc3
 8009ae0:	08009af1 	.word	0x08009af1
 8009ae4:	08009af1 	.word	0x08009af1
 8009ae8:	08009b65 	.word	0x08009b65
 8009aec:	08009b79 	.word	0x08009b79
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009af2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009af6:	f043 0301 	orr.w	r3, r3, #1
 8009afa:	b2da      	uxtb	r2, r3
 8009afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009afe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009b02:	68fa      	ldr	r2, [r7, #12]
 8009b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b06:	699b      	ldr	r3, [r3, #24]
 8009b08:	18d1      	adds	r1, r2, r3
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	6a3a      	ldr	r2, [r7, #32]
 8009b0e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009b10:	f7ff ff78 	bl	8009a04 <prvInsertTimerInActiveList>
 8009b14:	4603      	mov	r3, r0
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d05e      	beq.n	8009bd8 <prvProcessReceivedCommands+0x150>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b1c:	6a1b      	ldr	r3, [r3, #32]
 8009b1e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009b20:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b24:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009b28:	f003 0304 	and.w	r3, r3, #4
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d053      	beq.n	8009bd8 <prvProcessReceivedCommands+0x150>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009b30:	68fa      	ldr	r2, [r7, #12]
 8009b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b34:	699b      	ldr	r3, [r3, #24]
 8009b36:	441a      	add	r2, r3
 8009b38:	2300      	movs	r3, #0
 8009b3a:	9300      	str	r3, [sp, #0]
 8009b3c:	2300      	movs	r3, #0
 8009b3e:	2100      	movs	r1, #0
 8009b40:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009b42:	f7ff fe21 	bl	8009788 <xTimerGenericCommand>
 8009b46:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 8009b48:	69fb      	ldr	r3, [r7, #28]
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d144      	bne.n	8009bd8 <prvProcessReceivedCommands+0x150>
	__asm volatile
 8009b4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b52:	f383 8811 	msr	BASEPRI, r3
 8009b56:	f3bf 8f6f 	isb	sy
 8009b5a:	f3bf 8f4f 	dsb	sy
 8009b5e:	61bb      	str	r3, [r7, #24]
}
 8009b60:	bf00      	nop
 8009b62:	e7fe      	b.n	8009b62 <prvProcessReceivedCommands+0xda>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b66:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009b6a:	f023 0301 	bic.w	r3, r3, #1
 8009b6e:	b2da      	uxtb	r2, r3
 8009b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b72:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					break;
 8009b76:	e02f      	b.n	8009bd8 <prvProcessReceivedCommands+0x150>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b7a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009b7e:	f043 0301 	orr.w	r3, r3, #1
 8009b82:	b2da      	uxtb	r2, r3
 8009b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b86:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009b8a:	68fa      	ldr	r2, [r7, #12]
 8009b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b8e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b92:	699b      	ldr	r3, [r3, #24]
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	d10a      	bne.n	8009bae <prvProcessReceivedCommands+0x126>
	__asm volatile
 8009b98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b9c:	f383 8811 	msr	BASEPRI, r3
 8009ba0:	f3bf 8f6f 	isb	sy
 8009ba4:	f3bf 8f4f 	dsb	sy
 8009ba8:	617b      	str	r3, [r7, #20]
}
 8009baa:	bf00      	nop
 8009bac:	e7fe      	b.n	8009bac <prvProcessReceivedCommands+0x124>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bb0:	699a      	ldr	r2, [r3, #24]
 8009bb2:	6a3b      	ldr	r3, [r7, #32]
 8009bb4:	18d1      	adds	r1, r2, r3
 8009bb6:	6a3b      	ldr	r3, [r7, #32]
 8009bb8:	6a3a      	ldr	r2, [r7, #32]
 8009bba:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009bbc:	f7ff ff22 	bl	8009a04 <prvInsertTimerInActiveList>
					break;
 8009bc0:	e00a      	b.n	8009bd8 <prvProcessReceivedCommands+0x150>
					{
						/* If dynamic allocation is not enabled, the memory
						could not have been dynamically allocated. So there is
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bc4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009bc8:	f023 0301 	bic.w	r3, r3, #1
 8009bcc:	b2da      	uxtb	r2, r3
 8009bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bd0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009bd4:	e000      	b.n	8009bd8 <prvProcessReceivedCommands+0x150>

				default	:
					/* Don't expect to get here. */
					break;
 8009bd6:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009bd8:	4b08      	ldr	r3, [pc, #32]	; (8009bfc <prvProcessReceivedCommands+0x174>)
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	f107 0108 	add.w	r1, r7, #8
 8009be0:	2200      	movs	r2, #0
 8009be2:	4618      	mov	r0, r3
 8009be4:	f7fe fbf2 	bl	80083cc <xQueueReceive>
 8009be8:	4603      	mov	r3, r0
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	f47f af50 	bne.w	8009a90 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8009bf0:	bf00      	nop
 8009bf2:	bf00      	nop
 8009bf4:	3728      	adds	r7, #40	; 0x28
 8009bf6:	46bd      	mov	sp, r7
 8009bf8:	bd80      	pop	{r7, pc}
 8009bfa:	bf00      	nop
 8009bfc:	20005ff8 	.word	0x20005ff8

08009c00 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009c00:	b580      	push	{r7, lr}
 8009c02:	b088      	sub	sp, #32
 8009c04:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009c06:	e048      	b.n	8009c9a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009c08:	4b2d      	ldr	r3, [pc, #180]	; (8009cc0 <prvSwitchTimerLists+0xc0>)
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	68db      	ldr	r3, [r3, #12]
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009c12:	4b2b      	ldr	r3, [pc, #172]	; (8009cc0 <prvSwitchTimerLists+0xc0>)
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	68db      	ldr	r3, [r3, #12]
 8009c18:	68db      	ldr	r3, [r3, #12]
 8009c1a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	3304      	adds	r3, #4
 8009c20:	4618      	mov	r0, r3
 8009c22:	f7fe f912 	bl	8007e4a <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	6a1b      	ldr	r3, [r3, #32]
 8009c2a:	68f8      	ldr	r0, [r7, #12]
 8009c2c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009c34:	f003 0304 	and.w	r3, r3, #4
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d02e      	beq.n	8009c9a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	699b      	ldr	r3, [r3, #24]
 8009c40:	693a      	ldr	r2, [r7, #16]
 8009c42:	4413      	add	r3, r2
 8009c44:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009c46:	68ba      	ldr	r2, [r7, #8]
 8009c48:	693b      	ldr	r3, [r7, #16]
 8009c4a:	429a      	cmp	r2, r3
 8009c4c:	d90e      	bls.n	8009c6c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	68ba      	ldr	r2, [r7, #8]
 8009c52:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	68fa      	ldr	r2, [r7, #12]
 8009c58:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009c5a:	4b19      	ldr	r3, [pc, #100]	; (8009cc0 <prvSwitchTimerLists+0xc0>)
 8009c5c:	681a      	ldr	r2, [r3, #0]
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	3304      	adds	r3, #4
 8009c62:	4619      	mov	r1, r3
 8009c64:	4610      	mov	r0, r2
 8009c66:	f7fe f8b7 	bl	8007dd8 <vListInsert>
 8009c6a:	e016      	b.n	8009c9a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009c6c:	2300      	movs	r3, #0
 8009c6e:	9300      	str	r3, [sp, #0]
 8009c70:	2300      	movs	r3, #0
 8009c72:	693a      	ldr	r2, [r7, #16]
 8009c74:	2100      	movs	r1, #0
 8009c76:	68f8      	ldr	r0, [r7, #12]
 8009c78:	f7ff fd86 	bl	8009788 <xTimerGenericCommand>
 8009c7c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	d10a      	bne.n	8009c9a <prvSwitchTimerLists+0x9a>
	__asm volatile
 8009c84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c88:	f383 8811 	msr	BASEPRI, r3
 8009c8c:	f3bf 8f6f 	isb	sy
 8009c90:	f3bf 8f4f 	dsb	sy
 8009c94:	603b      	str	r3, [r7, #0]
}
 8009c96:	bf00      	nop
 8009c98:	e7fe      	b.n	8009c98 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009c9a:	4b09      	ldr	r3, [pc, #36]	; (8009cc0 <prvSwitchTimerLists+0xc0>)
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d1b1      	bne.n	8009c08 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009ca4:	4b06      	ldr	r3, [pc, #24]	; (8009cc0 <prvSwitchTimerLists+0xc0>)
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009caa:	4b06      	ldr	r3, [pc, #24]	; (8009cc4 <prvSwitchTimerLists+0xc4>)
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	4a04      	ldr	r2, [pc, #16]	; (8009cc0 <prvSwitchTimerLists+0xc0>)
 8009cb0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009cb2:	4a04      	ldr	r2, [pc, #16]	; (8009cc4 <prvSwitchTimerLists+0xc4>)
 8009cb4:	697b      	ldr	r3, [r7, #20]
 8009cb6:	6013      	str	r3, [r2, #0]
}
 8009cb8:	bf00      	nop
 8009cba:	3718      	adds	r7, #24
 8009cbc:	46bd      	mov	sp, r7
 8009cbe:	bd80      	pop	{r7, pc}
 8009cc0:	20005ff0 	.word	0x20005ff0
 8009cc4:	20005ff4 	.word	0x20005ff4

08009cc8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009cc8:	b580      	push	{r7, lr}
 8009cca:	b082      	sub	sp, #8
 8009ccc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009cce:	f000 f969 	bl	8009fa4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009cd2:	4b15      	ldr	r3, [pc, #84]	; (8009d28 <prvCheckForValidListAndQueue+0x60>)
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d120      	bne.n	8009d1c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009cda:	4814      	ldr	r0, [pc, #80]	; (8009d2c <prvCheckForValidListAndQueue+0x64>)
 8009cdc:	f7fe f82b 	bl	8007d36 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009ce0:	4813      	ldr	r0, [pc, #76]	; (8009d30 <prvCheckForValidListAndQueue+0x68>)
 8009ce2:	f7fe f828 	bl	8007d36 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009ce6:	4b13      	ldr	r3, [pc, #76]	; (8009d34 <prvCheckForValidListAndQueue+0x6c>)
 8009ce8:	4a10      	ldr	r2, [pc, #64]	; (8009d2c <prvCheckForValidListAndQueue+0x64>)
 8009cea:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009cec:	4b12      	ldr	r3, [pc, #72]	; (8009d38 <prvCheckForValidListAndQueue+0x70>)
 8009cee:	4a10      	ldr	r2, [pc, #64]	; (8009d30 <prvCheckForValidListAndQueue+0x68>)
 8009cf0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009cf2:	2300      	movs	r3, #0
 8009cf4:	9300      	str	r3, [sp, #0]
 8009cf6:	4b11      	ldr	r3, [pc, #68]	; (8009d3c <prvCheckForValidListAndQueue+0x74>)
 8009cf8:	4a11      	ldr	r2, [pc, #68]	; (8009d40 <prvCheckForValidListAndQueue+0x78>)
 8009cfa:	210c      	movs	r1, #12
 8009cfc:	200a      	movs	r0, #10
 8009cfe:	f7fe f937 	bl	8007f70 <xQueueGenericCreateStatic>
 8009d02:	4603      	mov	r3, r0
 8009d04:	4a08      	ldr	r2, [pc, #32]	; (8009d28 <prvCheckForValidListAndQueue+0x60>)
 8009d06:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009d08:	4b07      	ldr	r3, [pc, #28]	; (8009d28 <prvCheckForValidListAndQueue+0x60>)
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d005      	beq.n	8009d1c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009d10:	4b05      	ldr	r3, [pc, #20]	; (8009d28 <prvCheckForValidListAndQueue+0x60>)
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	490b      	ldr	r1, [pc, #44]	; (8009d44 <prvCheckForValidListAndQueue+0x7c>)
 8009d16:	4618      	mov	r0, r3
 8009d18:	f7fe fdee 	bl	80088f8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009d1c:	f000 f972 	bl	800a004 <vPortExitCritical>
}
 8009d20:	bf00      	nop
 8009d22:	46bd      	mov	sp, r7
 8009d24:	bd80      	pop	{r7, pc}
 8009d26:	bf00      	nop
 8009d28:	20005ff8 	.word	0x20005ff8
 8009d2c:	20005fc8 	.word	0x20005fc8
 8009d30:	20005fdc 	.word	0x20005fdc
 8009d34:	20005ff0 	.word	0x20005ff0
 8009d38:	20005ff4 	.word	0x20005ff4
 8009d3c:	2000607c 	.word	0x2000607c
 8009d40:	20006004 	.word	0x20006004
 8009d44:	0800ac28 	.word	0x0800ac28

08009d48 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009d48:	b480      	push	{r7}
 8009d4a:	b085      	sub	sp, #20
 8009d4c:	af00      	add	r7, sp, #0
 8009d4e:	60f8      	str	r0, [r7, #12]
 8009d50:	60b9      	str	r1, [r7, #8]
 8009d52:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	3b04      	subs	r3, #4
 8009d58:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009d5a:	68fb      	ldr	r3, [r7, #12]
 8009d5c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009d60:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	3b04      	subs	r3, #4
 8009d66:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009d68:	68bb      	ldr	r3, [r7, #8]
 8009d6a:	f023 0201 	bic.w	r2, r3, #1
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	3b04      	subs	r3, #4
 8009d76:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009d78:	4a0c      	ldr	r2, [pc, #48]	; (8009dac <pxPortInitialiseStack+0x64>)
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	3b14      	subs	r3, #20
 8009d82:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009d84:	687a      	ldr	r2, [r7, #4]
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	3b04      	subs	r3, #4
 8009d8e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	f06f 0202 	mvn.w	r2, #2
 8009d96:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	3b20      	subs	r3, #32
 8009d9c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009d9e:	68fb      	ldr	r3, [r7, #12]
}
 8009da0:	4618      	mov	r0, r3
 8009da2:	3714      	adds	r7, #20
 8009da4:	46bd      	mov	sp, r7
 8009da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009daa:	4770      	bx	lr
 8009dac:	08009db1 	.word	0x08009db1

08009db0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009db0:	b480      	push	{r7}
 8009db2:	b085      	sub	sp, #20
 8009db4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009db6:	2300      	movs	r3, #0
 8009db8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009dba:	4b12      	ldr	r3, [pc, #72]	; (8009e04 <prvTaskExitError+0x54>)
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009dc2:	d00a      	beq.n	8009dda <prvTaskExitError+0x2a>
	__asm volatile
 8009dc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dc8:	f383 8811 	msr	BASEPRI, r3
 8009dcc:	f3bf 8f6f 	isb	sy
 8009dd0:	f3bf 8f4f 	dsb	sy
 8009dd4:	60fb      	str	r3, [r7, #12]
}
 8009dd6:	bf00      	nop
 8009dd8:	e7fe      	b.n	8009dd8 <prvTaskExitError+0x28>
	__asm volatile
 8009dda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dde:	f383 8811 	msr	BASEPRI, r3
 8009de2:	f3bf 8f6f 	isb	sy
 8009de6:	f3bf 8f4f 	dsb	sy
 8009dea:	60bb      	str	r3, [r7, #8]
}
 8009dec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009dee:	bf00      	nop
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d0fc      	beq.n	8009df0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009df6:	bf00      	nop
 8009df8:	bf00      	nop
 8009dfa:	3714      	adds	r7, #20
 8009dfc:	46bd      	mov	sp, r7
 8009dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e02:	4770      	bx	lr
 8009e04:	2000000c 	.word	0x2000000c
	...

08009e10 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009e10:	4b07      	ldr	r3, [pc, #28]	; (8009e30 <pxCurrentTCBConst2>)
 8009e12:	6819      	ldr	r1, [r3, #0]
 8009e14:	6808      	ldr	r0, [r1, #0]
 8009e16:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e1a:	f380 8809 	msr	PSP, r0
 8009e1e:	f3bf 8f6f 	isb	sy
 8009e22:	f04f 0000 	mov.w	r0, #0
 8009e26:	f380 8811 	msr	BASEPRI, r0
 8009e2a:	4770      	bx	lr
 8009e2c:	f3af 8000 	nop.w

08009e30 <pxCurrentTCBConst2>:
 8009e30:	20005e9c 	.word	0x20005e9c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009e34:	bf00      	nop
 8009e36:	bf00      	nop

08009e38 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009e38:	4808      	ldr	r0, [pc, #32]	; (8009e5c <prvPortStartFirstTask+0x24>)
 8009e3a:	6800      	ldr	r0, [r0, #0]
 8009e3c:	6800      	ldr	r0, [r0, #0]
 8009e3e:	f380 8808 	msr	MSP, r0
 8009e42:	f04f 0000 	mov.w	r0, #0
 8009e46:	f380 8814 	msr	CONTROL, r0
 8009e4a:	b662      	cpsie	i
 8009e4c:	b661      	cpsie	f
 8009e4e:	f3bf 8f4f 	dsb	sy
 8009e52:	f3bf 8f6f 	isb	sy
 8009e56:	df00      	svc	0
 8009e58:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009e5a:	bf00      	nop
 8009e5c:	e000ed08 	.word	0xe000ed08

08009e60 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009e60:	b580      	push	{r7, lr}
 8009e62:	b086      	sub	sp, #24
 8009e64:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009e66:	4b46      	ldr	r3, [pc, #280]	; (8009f80 <xPortStartScheduler+0x120>)
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	4a46      	ldr	r2, [pc, #280]	; (8009f84 <xPortStartScheduler+0x124>)
 8009e6c:	4293      	cmp	r3, r2
 8009e6e:	d10a      	bne.n	8009e86 <xPortStartScheduler+0x26>
	__asm volatile
 8009e70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e74:	f383 8811 	msr	BASEPRI, r3
 8009e78:	f3bf 8f6f 	isb	sy
 8009e7c:	f3bf 8f4f 	dsb	sy
 8009e80:	613b      	str	r3, [r7, #16]
}
 8009e82:	bf00      	nop
 8009e84:	e7fe      	b.n	8009e84 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009e86:	4b3e      	ldr	r3, [pc, #248]	; (8009f80 <xPortStartScheduler+0x120>)
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	4a3f      	ldr	r2, [pc, #252]	; (8009f88 <xPortStartScheduler+0x128>)
 8009e8c:	4293      	cmp	r3, r2
 8009e8e:	d10a      	bne.n	8009ea6 <xPortStartScheduler+0x46>
	__asm volatile
 8009e90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e94:	f383 8811 	msr	BASEPRI, r3
 8009e98:	f3bf 8f6f 	isb	sy
 8009e9c:	f3bf 8f4f 	dsb	sy
 8009ea0:	60fb      	str	r3, [r7, #12]
}
 8009ea2:	bf00      	nop
 8009ea4:	e7fe      	b.n	8009ea4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009ea6:	4b39      	ldr	r3, [pc, #228]	; (8009f8c <xPortStartScheduler+0x12c>)
 8009ea8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009eaa:	697b      	ldr	r3, [r7, #20]
 8009eac:	781b      	ldrb	r3, [r3, #0]
 8009eae:	b2db      	uxtb	r3, r3
 8009eb0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009eb2:	697b      	ldr	r3, [r7, #20]
 8009eb4:	22ff      	movs	r2, #255	; 0xff
 8009eb6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009eb8:	697b      	ldr	r3, [r7, #20]
 8009eba:	781b      	ldrb	r3, [r3, #0]
 8009ebc:	b2db      	uxtb	r3, r3
 8009ebe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009ec0:	78fb      	ldrb	r3, [r7, #3]
 8009ec2:	b2db      	uxtb	r3, r3
 8009ec4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009ec8:	b2da      	uxtb	r2, r3
 8009eca:	4b31      	ldr	r3, [pc, #196]	; (8009f90 <xPortStartScheduler+0x130>)
 8009ecc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009ece:	4b31      	ldr	r3, [pc, #196]	; (8009f94 <xPortStartScheduler+0x134>)
 8009ed0:	2207      	movs	r2, #7
 8009ed2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009ed4:	e009      	b.n	8009eea <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8009ed6:	4b2f      	ldr	r3, [pc, #188]	; (8009f94 <xPortStartScheduler+0x134>)
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	3b01      	subs	r3, #1
 8009edc:	4a2d      	ldr	r2, [pc, #180]	; (8009f94 <xPortStartScheduler+0x134>)
 8009ede:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009ee0:	78fb      	ldrb	r3, [r7, #3]
 8009ee2:	b2db      	uxtb	r3, r3
 8009ee4:	005b      	lsls	r3, r3, #1
 8009ee6:	b2db      	uxtb	r3, r3
 8009ee8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009eea:	78fb      	ldrb	r3, [r7, #3]
 8009eec:	b2db      	uxtb	r3, r3
 8009eee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009ef2:	2b80      	cmp	r3, #128	; 0x80
 8009ef4:	d0ef      	beq.n	8009ed6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009ef6:	4b27      	ldr	r3, [pc, #156]	; (8009f94 <xPortStartScheduler+0x134>)
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	f1c3 0307 	rsb	r3, r3, #7
 8009efe:	2b04      	cmp	r3, #4
 8009f00:	d00a      	beq.n	8009f18 <xPortStartScheduler+0xb8>
	__asm volatile
 8009f02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f06:	f383 8811 	msr	BASEPRI, r3
 8009f0a:	f3bf 8f6f 	isb	sy
 8009f0e:	f3bf 8f4f 	dsb	sy
 8009f12:	60bb      	str	r3, [r7, #8]
}
 8009f14:	bf00      	nop
 8009f16:	e7fe      	b.n	8009f16 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009f18:	4b1e      	ldr	r3, [pc, #120]	; (8009f94 <xPortStartScheduler+0x134>)
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	021b      	lsls	r3, r3, #8
 8009f1e:	4a1d      	ldr	r2, [pc, #116]	; (8009f94 <xPortStartScheduler+0x134>)
 8009f20:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009f22:	4b1c      	ldr	r3, [pc, #112]	; (8009f94 <xPortStartScheduler+0x134>)
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009f2a:	4a1a      	ldr	r2, [pc, #104]	; (8009f94 <xPortStartScheduler+0x134>)
 8009f2c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	b2da      	uxtb	r2, r3
 8009f32:	697b      	ldr	r3, [r7, #20]
 8009f34:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009f36:	4b18      	ldr	r3, [pc, #96]	; (8009f98 <xPortStartScheduler+0x138>)
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	4a17      	ldr	r2, [pc, #92]	; (8009f98 <xPortStartScheduler+0x138>)
 8009f3c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009f40:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009f42:	4b15      	ldr	r3, [pc, #84]	; (8009f98 <xPortStartScheduler+0x138>)
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	4a14      	ldr	r2, [pc, #80]	; (8009f98 <xPortStartScheduler+0x138>)
 8009f48:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8009f4c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009f4e:	f000 f8dd 	bl	800a10c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009f52:	4b12      	ldr	r3, [pc, #72]	; (8009f9c <xPortStartScheduler+0x13c>)
 8009f54:	2200      	movs	r2, #0
 8009f56:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009f58:	f000 f8fc 	bl	800a154 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009f5c:	4b10      	ldr	r3, [pc, #64]	; (8009fa0 <xPortStartScheduler+0x140>)
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	4a0f      	ldr	r2, [pc, #60]	; (8009fa0 <xPortStartScheduler+0x140>)
 8009f62:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009f66:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009f68:	f7ff ff66 	bl	8009e38 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009f6c:	f7ff f878 	bl	8009060 <vTaskSwitchContext>
	prvTaskExitError();
 8009f70:	f7ff ff1e 	bl	8009db0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009f74:	2300      	movs	r3, #0
}
 8009f76:	4618      	mov	r0, r3
 8009f78:	3718      	adds	r7, #24
 8009f7a:	46bd      	mov	sp, r7
 8009f7c:	bd80      	pop	{r7, pc}
 8009f7e:	bf00      	nop
 8009f80:	e000ed00 	.word	0xe000ed00
 8009f84:	410fc271 	.word	0x410fc271
 8009f88:	410fc270 	.word	0x410fc270
 8009f8c:	e000e400 	.word	0xe000e400
 8009f90:	200060c4 	.word	0x200060c4
 8009f94:	200060c8 	.word	0x200060c8
 8009f98:	e000ed20 	.word	0xe000ed20
 8009f9c:	2000000c 	.word	0x2000000c
 8009fa0:	e000ef34 	.word	0xe000ef34

08009fa4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009fa4:	b480      	push	{r7}
 8009fa6:	b083      	sub	sp, #12
 8009fa8:	af00      	add	r7, sp, #0
	__asm volatile
 8009faa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fae:	f383 8811 	msr	BASEPRI, r3
 8009fb2:	f3bf 8f6f 	isb	sy
 8009fb6:	f3bf 8f4f 	dsb	sy
 8009fba:	607b      	str	r3, [r7, #4]
}
 8009fbc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009fbe:	4b0f      	ldr	r3, [pc, #60]	; (8009ffc <vPortEnterCritical+0x58>)
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	3301      	adds	r3, #1
 8009fc4:	4a0d      	ldr	r2, [pc, #52]	; (8009ffc <vPortEnterCritical+0x58>)
 8009fc6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009fc8:	4b0c      	ldr	r3, [pc, #48]	; (8009ffc <vPortEnterCritical+0x58>)
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	2b01      	cmp	r3, #1
 8009fce:	d10f      	bne.n	8009ff0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009fd0:	4b0b      	ldr	r3, [pc, #44]	; (800a000 <vPortEnterCritical+0x5c>)
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	b2db      	uxtb	r3, r3
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d00a      	beq.n	8009ff0 <vPortEnterCritical+0x4c>
	__asm volatile
 8009fda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fde:	f383 8811 	msr	BASEPRI, r3
 8009fe2:	f3bf 8f6f 	isb	sy
 8009fe6:	f3bf 8f4f 	dsb	sy
 8009fea:	603b      	str	r3, [r7, #0]
}
 8009fec:	bf00      	nop
 8009fee:	e7fe      	b.n	8009fee <vPortEnterCritical+0x4a>
	}
}
 8009ff0:	bf00      	nop
 8009ff2:	370c      	adds	r7, #12
 8009ff4:	46bd      	mov	sp, r7
 8009ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ffa:	4770      	bx	lr
 8009ffc:	2000000c 	.word	0x2000000c
 800a000:	e000ed04 	.word	0xe000ed04

0800a004 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a004:	b480      	push	{r7}
 800a006:	b083      	sub	sp, #12
 800a008:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a00a:	4b12      	ldr	r3, [pc, #72]	; (800a054 <vPortExitCritical+0x50>)
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d10a      	bne.n	800a028 <vPortExitCritical+0x24>
	__asm volatile
 800a012:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a016:	f383 8811 	msr	BASEPRI, r3
 800a01a:	f3bf 8f6f 	isb	sy
 800a01e:	f3bf 8f4f 	dsb	sy
 800a022:	607b      	str	r3, [r7, #4]
}
 800a024:	bf00      	nop
 800a026:	e7fe      	b.n	800a026 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a028:	4b0a      	ldr	r3, [pc, #40]	; (800a054 <vPortExitCritical+0x50>)
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	3b01      	subs	r3, #1
 800a02e:	4a09      	ldr	r2, [pc, #36]	; (800a054 <vPortExitCritical+0x50>)
 800a030:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a032:	4b08      	ldr	r3, [pc, #32]	; (800a054 <vPortExitCritical+0x50>)
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	2b00      	cmp	r3, #0
 800a038:	d105      	bne.n	800a046 <vPortExitCritical+0x42>
 800a03a:	2300      	movs	r3, #0
 800a03c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a03e:	683b      	ldr	r3, [r7, #0]
 800a040:	f383 8811 	msr	BASEPRI, r3
}
 800a044:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a046:	bf00      	nop
 800a048:	370c      	adds	r7, #12
 800a04a:	46bd      	mov	sp, r7
 800a04c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a050:	4770      	bx	lr
 800a052:	bf00      	nop
 800a054:	2000000c 	.word	0x2000000c
	...

0800a060 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a060:	f3ef 8009 	mrs	r0, PSP
 800a064:	f3bf 8f6f 	isb	sy
 800a068:	4b15      	ldr	r3, [pc, #84]	; (800a0c0 <pxCurrentTCBConst>)
 800a06a:	681a      	ldr	r2, [r3, #0]
 800a06c:	f01e 0f10 	tst.w	lr, #16
 800a070:	bf08      	it	eq
 800a072:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a076:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a07a:	6010      	str	r0, [r2, #0]
 800a07c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a080:	f04f 0050 	mov.w	r0, #80	; 0x50
 800a084:	f380 8811 	msr	BASEPRI, r0
 800a088:	f3bf 8f4f 	dsb	sy
 800a08c:	f3bf 8f6f 	isb	sy
 800a090:	f7fe ffe6 	bl	8009060 <vTaskSwitchContext>
 800a094:	f04f 0000 	mov.w	r0, #0
 800a098:	f380 8811 	msr	BASEPRI, r0
 800a09c:	bc09      	pop	{r0, r3}
 800a09e:	6819      	ldr	r1, [r3, #0]
 800a0a0:	6808      	ldr	r0, [r1, #0]
 800a0a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0a6:	f01e 0f10 	tst.w	lr, #16
 800a0aa:	bf08      	it	eq
 800a0ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a0b0:	f380 8809 	msr	PSP, r0
 800a0b4:	f3bf 8f6f 	isb	sy
 800a0b8:	4770      	bx	lr
 800a0ba:	bf00      	nop
 800a0bc:	f3af 8000 	nop.w

0800a0c0 <pxCurrentTCBConst>:
 800a0c0:	20005e9c 	.word	0x20005e9c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a0c4:	bf00      	nop
 800a0c6:	bf00      	nop

0800a0c8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a0c8:	b580      	push	{r7, lr}
 800a0ca:	b082      	sub	sp, #8
 800a0cc:	af00      	add	r7, sp, #0
	__asm volatile
 800a0ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0d2:	f383 8811 	msr	BASEPRI, r3
 800a0d6:	f3bf 8f6f 	isb	sy
 800a0da:	f3bf 8f4f 	dsb	sy
 800a0de:	607b      	str	r3, [r7, #4]
}
 800a0e0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a0e2:	f7fe ff05 	bl	8008ef0 <xTaskIncrementTick>
 800a0e6:	4603      	mov	r3, r0
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	d003      	beq.n	800a0f4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a0ec:	4b06      	ldr	r3, [pc, #24]	; (800a108 <SysTick_Handler+0x40>)
 800a0ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a0f2:	601a      	str	r2, [r3, #0]
 800a0f4:	2300      	movs	r3, #0
 800a0f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a0f8:	683b      	ldr	r3, [r7, #0]
 800a0fa:	f383 8811 	msr	BASEPRI, r3
}
 800a0fe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a100:	bf00      	nop
 800a102:	3708      	adds	r7, #8
 800a104:	46bd      	mov	sp, r7
 800a106:	bd80      	pop	{r7, pc}
 800a108:	e000ed04 	.word	0xe000ed04

0800a10c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a10c:	b480      	push	{r7}
 800a10e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a110:	4b0b      	ldr	r3, [pc, #44]	; (800a140 <vPortSetupTimerInterrupt+0x34>)
 800a112:	2200      	movs	r2, #0
 800a114:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a116:	4b0b      	ldr	r3, [pc, #44]	; (800a144 <vPortSetupTimerInterrupt+0x38>)
 800a118:	2200      	movs	r2, #0
 800a11a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a11c:	4b0a      	ldr	r3, [pc, #40]	; (800a148 <vPortSetupTimerInterrupt+0x3c>)
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	4a0a      	ldr	r2, [pc, #40]	; (800a14c <vPortSetupTimerInterrupt+0x40>)
 800a122:	fba2 2303 	umull	r2, r3, r2, r3
 800a126:	099b      	lsrs	r3, r3, #6
 800a128:	4a09      	ldr	r2, [pc, #36]	; (800a150 <vPortSetupTimerInterrupt+0x44>)
 800a12a:	3b01      	subs	r3, #1
 800a12c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a12e:	4b04      	ldr	r3, [pc, #16]	; (800a140 <vPortSetupTimerInterrupt+0x34>)
 800a130:	2207      	movs	r2, #7
 800a132:	601a      	str	r2, [r3, #0]
}
 800a134:	bf00      	nop
 800a136:	46bd      	mov	sp, r7
 800a138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a13c:	4770      	bx	lr
 800a13e:	bf00      	nop
 800a140:	e000e010 	.word	0xe000e010
 800a144:	e000e018 	.word	0xe000e018
 800a148:	20000000 	.word	0x20000000
 800a14c:	10624dd3 	.word	0x10624dd3
 800a150:	e000e014 	.word	0xe000e014

0800a154 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a154:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800a164 <vPortEnableVFP+0x10>
 800a158:	6801      	ldr	r1, [r0, #0]
 800a15a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800a15e:	6001      	str	r1, [r0, #0]
 800a160:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a162:	bf00      	nop
 800a164:	e000ed88 	.word	0xe000ed88

0800a168 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a168:	b480      	push	{r7}
 800a16a:	b085      	sub	sp, #20
 800a16c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a16e:	f3ef 8305 	mrs	r3, IPSR
 800a172:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	2b0f      	cmp	r3, #15
 800a178:	d914      	bls.n	800a1a4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a17a:	4a17      	ldr	r2, [pc, #92]	; (800a1d8 <vPortValidateInterruptPriority+0x70>)
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	4413      	add	r3, r2
 800a180:	781b      	ldrb	r3, [r3, #0]
 800a182:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a184:	4b15      	ldr	r3, [pc, #84]	; (800a1dc <vPortValidateInterruptPriority+0x74>)
 800a186:	781b      	ldrb	r3, [r3, #0]
 800a188:	7afa      	ldrb	r2, [r7, #11]
 800a18a:	429a      	cmp	r2, r3
 800a18c:	d20a      	bcs.n	800a1a4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800a18e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a192:	f383 8811 	msr	BASEPRI, r3
 800a196:	f3bf 8f6f 	isb	sy
 800a19a:	f3bf 8f4f 	dsb	sy
 800a19e:	607b      	str	r3, [r7, #4]
}
 800a1a0:	bf00      	nop
 800a1a2:	e7fe      	b.n	800a1a2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a1a4:	4b0e      	ldr	r3, [pc, #56]	; (800a1e0 <vPortValidateInterruptPriority+0x78>)
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a1ac:	4b0d      	ldr	r3, [pc, #52]	; (800a1e4 <vPortValidateInterruptPriority+0x7c>)
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	429a      	cmp	r2, r3
 800a1b2:	d90a      	bls.n	800a1ca <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800a1b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1b8:	f383 8811 	msr	BASEPRI, r3
 800a1bc:	f3bf 8f6f 	isb	sy
 800a1c0:	f3bf 8f4f 	dsb	sy
 800a1c4:	603b      	str	r3, [r7, #0]
}
 800a1c6:	bf00      	nop
 800a1c8:	e7fe      	b.n	800a1c8 <vPortValidateInterruptPriority+0x60>
	}
 800a1ca:	bf00      	nop
 800a1cc:	3714      	adds	r7, #20
 800a1ce:	46bd      	mov	sp, r7
 800a1d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1d4:	4770      	bx	lr
 800a1d6:	bf00      	nop
 800a1d8:	e000e3f0 	.word	0xe000e3f0
 800a1dc:	200060c4 	.word	0x200060c4
 800a1e0:	e000ed0c 	.word	0xe000ed0c
 800a1e4:	200060c8 	.word	0x200060c8

0800a1e8 <std>:
 800a1e8:	2300      	movs	r3, #0
 800a1ea:	b510      	push	{r4, lr}
 800a1ec:	4604      	mov	r4, r0
 800a1ee:	e9c0 3300 	strd	r3, r3, [r0]
 800a1f2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a1f6:	6083      	str	r3, [r0, #8]
 800a1f8:	8181      	strh	r1, [r0, #12]
 800a1fa:	6643      	str	r3, [r0, #100]	; 0x64
 800a1fc:	81c2      	strh	r2, [r0, #14]
 800a1fe:	6183      	str	r3, [r0, #24]
 800a200:	4619      	mov	r1, r3
 800a202:	2208      	movs	r2, #8
 800a204:	305c      	adds	r0, #92	; 0x5c
 800a206:	f000 f9e5 	bl	800a5d4 <memset>
 800a20a:	4b0d      	ldr	r3, [pc, #52]	; (800a240 <std+0x58>)
 800a20c:	6263      	str	r3, [r4, #36]	; 0x24
 800a20e:	4b0d      	ldr	r3, [pc, #52]	; (800a244 <std+0x5c>)
 800a210:	62a3      	str	r3, [r4, #40]	; 0x28
 800a212:	4b0d      	ldr	r3, [pc, #52]	; (800a248 <std+0x60>)
 800a214:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a216:	4b0d      	ldr	r3, [pc, #52]	; (800a24c <std+0x64>)
 800a218:	6323      	str	r3, [r4, #48]	; 0x30
 800a21a:	4b0d      	ldr	r3, [pc, #52]	; (800a250 <std+0x68>)
 800a21c:	6224      	str	r4, [r4, #32]
 800a21e:	429c      	cmp	r4, r3
 800a220:	d006      	beq.n	800a230 <std+0x48>
 800a222:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800a226:	4294      	cmp	r4, r2
 800a228:	d002      	beq.n	800a230 <std+0x48>
 800a22a:	33d0      	adds	r3, #208	; 0xd0
 800a22c:	429c      	cmp	r4, r3
 800a22e:	d105      	bne.n	800a23c <std+0x54>
 800a230:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a234:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a238:	f000 ba44 	b.w	800a6c4 <__retarget_lock_init_recursive>
 800a23c:	bd10      	pop	{r4, pc}
 800a23e:	bf00      	nop
 800a240:	0800a425 	.word	0x0800a425
 800a244:	0800a447 	.word	0x0800a447
 800a248:	0800a47f 	.word	0x0800a47f
 800a24c:	0800a4a3 	.word	0x0800a4a3
 800a250:	200060cc 	.word	0x200060cc

0800a254 <stdio_exit_handler>:
 800a254:	4a02      	ldr	r2, [pc, #8]	; (800a260 <stdio_exit_handler+0xc>)
 800a256:	4903      	ldr	r1, [pc, #12]	; (800a264 <stdio_exit_handler+0x10>)
 800a258:	4803      	ldr	r0, [pc, #12]	; (800a268 <stdio_exit_handler+0x14>)
 800a25a:	f000 b869 	b.w	800a330 <_fwalk_sglue>
 800a25e:	bf00      	nop
 800a260:	20000010 	.word	0x20000010
 800a264:	0800a9e5 	.word	0x0800a9e5
 800a268:	2000001c 	.word	0x2000001c

0800a26c <cleanup_stdio>:
 800a26c:	6841      	ldr	r1, [r0, #4]
 800a26e:	4b0c      	ldr	r3, [pc, #48]	; (800a2a0 <cleanup_stdio+0x34>)
 800a270:	4299      	cmp	r1, r3
 800a272:	b510      	push	{r4, lr}
 800a274:	4604      	mov	r4, r0
 800a276:	d001      	beq.n	800a27c <cleanup_stdio+0x10>
 800a278:	f000 fbb4 	bl	800a9e4 <_fflush_r>
 800a27c:	68a1      	ldr	r1, [r4, #8]
 800a27e:	4b09      	ldr	r3, [pc, #36]	; (800a2a4 <cleanup_stdio+0x38>)
 800a280:	4299      	cmp	r1, r3
 800a282:	d002      	beq.n	800a28a <cleanup_stdio+0x1e>
 800a284:	4620      	mov	r0, r4
 800a286:	f000 fbad 	bl	800a9e4 <_fflush_r>
 800a28a:	68e1      	ldr	r1, [r4, #12]
 800a28c:	4b06      	ldr	r3, [pc, #24]	; (800a2a8 <cleanup_stdio+0x3c>)
 800a28e:	4299      	cmp	r1, r3
 800a290:	d004      	beq.n	800a29c <cleanup_stdio+0x30>
 800a292:	4620      	mov	r0, r4
 800a294:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a298:	f000 bba4 	b.w	800a9e4 <_fflush_r>
 800a29c:	bd10      	pop	{r4, pc}
 800a29e:	bf00      	nop
 800a2a0:	200060cc 	.word	0x200060cc
 800a2a4:	20006134 	.word	0x20006134
 800a2a8:	2000619c 	.word	0x2000619c

0800a2ac <global_stdio_init.part.0>:
 800a2ac:	b510      	push	{r4, lr}
 800a2ae:	4b0b      	ldr	r3, [pc, #44]	; (800a2dc <global_stdio_init.part.0+0x30>)
 800a2b0:	4c0b      	ldr	r4, [pc, #44]	; (800a2e0 <global_stdio_init.part.0+0x34>)
 800a2b2:	4a0c      	ldr	r2, [pc, #48]	; (800a2e4 <global_stdio_init.part.0+0x38>)
 800a2b4:	601a      	str	r2, [r3, #0]
 800a2b6:	4620      	mov	r0, r4
 800a2b8:	2200      	movs	r2, #0
 800a2ba:	2104      	movs	r1, #4
 800a2bc:	f7ff ff94 	bl	800a1e8 <std>
 800a2c0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800a2c4:	2201      	movs	r2, #1
 800a2c6:	2109      	movs	r1, #9
 800a2c8:	f7ff ff8e 	bl	800a1e8 <std>
 800a2cc:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800a2d0:	2202      	movs	r2, #2
 800a2d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a2d6:	2112      	movs	r1, #18
 800a2d8:	f7ff bf86 	b.w	800a1e8 <std>
 800a2dc:	20006204 	.word	0x20006204
 800a2e0:	200060cc 	.word	0x200060cc
 800a2e4:	0800a255 	.word	0x0800a255

0800a2e8 <__sfp_lock_acquire>:
 800a2e8:	4801      	ldr	r0, [pc, #4]	; (800a2f0 <__sfp_lock_acquire+0x8>)
 800a2ea:	f000 b9ec 	b.w	800a6c6 <__retarget_lock_acquire_recursive>
 800a2ee:	bf00      	nop
 800a2f0:	2000620d 	.word	0x2000620d

0800a2f4 <__sfp_lock_release>:
 800a2f4:	4801      	ldr	r0, [pc, #4]	; (800a2fc <__sfp_lock_release+0x8>)
 800a2f6:	f000 b9e7 	b.w	800a6c8 <__retarget_lock_release_recursive>
 800a2fa:	bf00      	nop
 800a2fc:	2000620d 	.word	0x2000620d

0800a300 <__sinit>:
 800a300:	b510      	push	{r4, lr}
 800a302:	4604      	mov	r4, r0
 800a304:	f7ff fff0 	bl	800a2e8 <__sfp_lock_acquire>
 800a308:	6a23      	ldr	r3, [r4, #32]
 800a30a:	b11b      	cbz	r3, 800a314 <__sinit+0x14>
 800a30c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a310:	f7ff bff0 	b.w	800a2f4 <__sfp_lock_release>
 800a314:	4b04      	ldr	r3, [pc, #16]	; (800a328 <__sinit+0x28>)
 800a316:	6223      	str	r3, [r4, #32]
 800a318:	4b04      	ldr	r3, [pc, #16]	; (800a32c <__sinit+0x2c>)
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d1f5      	bne.n	800a30c <__sinit+0xc>
 800a320:	f7ff ffc4 	bl	800a2ac <global_stdio_init.part.0>
 800a324:	e7f2      	b.n	800a30c <__sinit+0xc>
 800a326:	bf00      	nop
 800a328:	0800a26d 	.word	0x0800a26d
 800a32c:	20006204 	.word	0x20006204

0800a330 <_fwalk_sglue>:
 800a330:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a334:	4607      	mov	r7, r0
 800a336:	4688      	mov	r8, r1
 800a338:	4614      	mov	r4, r2
 800a33a:	2600      	movs	r6, #0
 800a33c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a340:	f1b9 0901 	subs.w	r9, r9, #1
 800a344:	d505      	bpl.n	800a352 <_fwalk_sglue+0x22>
 800a346:	6824      	ldr	r4, [r4, #0]
 800a348:	2c00      	cmp	r4, #0
 800a34a:	d1f7      	bne.n	800a33c <_fwalk_sglue+0xc>
 800a34c:	4630      	mov	r0, r6
 800a34e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a352:	89ab      	ldrh	r3, [r5, #12]
 800a354:	2b01      	cmp	r3, #1
 800a356:	d907      	bls.n	800a368 <_fwalk_sglue+0x38>
 800a358:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a35c:	3301      	adds	r3, #1
 800a35e:	d003      	beq.n	800a368 <_fwalk_sglue+0x38>
 800a360:	4629      	mov	r1, r5
 800a362:	4638      	mov	r0, r7
 800a364:	47c0      	blx	r8
 800a366:	4306      	orrs	r6, r0
 800a368:	3568      	adds	r5, #104	; 0x68
 800a36a:	e7e9      	b.n	800a340 <_fwalk_sglue+0x10>

0800a36c <_puts_r>:
 800a36c:	6a03      	ldr	r3, [r0, #32]
 800a36e:	b570      	push	{r4, r5, r6, lr}
 800a370:	6884      	ldr	r4, [r0, #8]
 800a372:	4605      	mov	r5, r0
 800a374:	460e      	mov	r6, r1
 800a376:	b90b      	cbnz	r3, 800a37c <_puts_r+0x10>
 800a378:	f7ff ffc2 	bl	800a300 <__sinit>
 800a37c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a37e:	07db      	lsls	r3, r3, #31
 800a380:	d405      	bmi.n	800a38e <_puts_r+0x22>
 800a382:	89a3      	ldrh	r3, [r4, #12]
 800a384:	0598      	lsls	r0, r3, #22
 800a386:	d402      	bmi.n	800a38e <_puts_r+0x22>
 800a388:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a38a:	f000 f99c 	bl	800a6c6 <__retarget_lock_acquire_recursive>
 800a38e:	89a3      	ldrh	r3, [r4, #12]
 800a390:	0719      	lsls	r1, r3, #28
 800a392:	d513      	bpl.n	800a3bc <_puts_r+0x50>
 800a394:	6923      	ldr	r3, [r4, #16]
 800a396:	b18b      	cbz	r3, 800a3bc <_puts_r+0x50>
 800a398:	3e01      	subs	r6, #1
 800a39a:	68a3      	ldr	r3, [r4, #8]
 800a39c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a3a0:	3b01      	subs	r3, #1
 800a3a2:	60a3      	str	r3, [r4, #8]
 800a3a4:	b9e9      	cbnz	r1, 800a3e2 <_puts_r+0x76>
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	da2e      	bge.n	800a408 <_puts_r+0x9c>
 800a3aa:	4622      	mov	r2, r4
 800a3ac:	210a      	movs	r1, #10
 800a3ae:	4628      	mov	r0, r5
 800a3b0:	f000 f87b 	bl	800a4aa <__swbuf_r>
 800a3b4:	3001      	adds	r0, #1
 800a3b6:	d007      	beq.n	800a3c8 <_puts_r+0x5c>
 800a3b8:	250a      	movs	r5, #10
 800a3ba:	e007      	b.n	800a3cc <_puts_r+0x60>
 800a3bc:	4621      	mov	r1, r4
 800a3be:	4628      	mov	r0, r5
 800a3c0:	f000 f8b0 	bl	800a524 <__swsetup_r>
 800a3c4:	2800      	cmp	r0, #0
 800a3c6:	d0e7      	beq.n	800a398 <_puts_r+0x2c>
 800a3c8:	f04f 35ff 	mov.w	r5, #4294967295
 800a3cc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a3ce:	07da      	lsls	r2, r3, #31
 800a3d0:	d405      	bmi.n	800a3de <_puts_r+0x72>
 800a3d2:	89a3      	ldrh	r3, [r4, #12]
 800a3d4:	059b      	lsls	r3, r3, #22
 800a3d6:	d402      	bmi.n	800a3de <_puts_r+0x72>
 800a3d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a3da:	f000 f975 	bl	800a6c8 <__retarget_lock_release_recursive>
 800a3de:	4628      	mov	r0, r5
 800a3e0:	bd70      	pop	{r4, r5, r6, pc}
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	da04      	bge.n	800a3f0 <_puts_r+0x84>
 800a3e6:	69a2      	ldr	r2, [r4, #24]
 800a3e8:	429a      	cmp	r2, r3
 800a3ea:	dc06      	bgt.n	800a3fa <_puts_r+0x8e>
 800a3ec:	290a      	cmp	r1, #10
 800a3ee:	d004      	beq.n	800a3fa <_puts_r+0x8e>
 800a3f0:	6823      	ldr	r3, [r4, #0]
 800a3f2:	1c5a      	adds	r2, r3, #1
 800a3f4:	6022      	str	r2, [r4, #0]
 800a3f6:	7019      	strb	r1, [r3, #0]
 800a3f8:	e7cf      	b.n	800a39a <_puts_r+0x2e>
 800a3fa:	4622      	mov	r2, r4
 800a3fc:	4628      	mov	r0, r5
 800a3fe:	f000 f854 	bl	800a4aa <__swbuf_r>
 800a402:	3001      	adds	r0, #1
 800a404:	d1c9      	bne.n	800a39a <_puts_r+0x2e>
 800a406:	e7df      	b.n	800a3c8 <_puts_r+0x5c>
 800a408:	6823      	ldr	r3, [r4, #0]
 800a40a:	250a      	movs	r5, #10
 800a40c:	1c5a      	adds	r2, r3, #1
 800a40e:	6022      	str	r2, [r4, #0]
 800a410:	701d      	strb	r5, [r3, #0]
 800a412:	e7db      	b.n	800a3cc <_puts_r+0x60>

0800a414 <puts>:
 800a414:	4b02      	ldr	r3, [pc, #8]	; (800a420 <puts+0xc>)
 800a416:	4601      	mov	r1, r0
 800a418:	6818      	ldr	r0, [r3, #0]
 800a41a:	f7ff bfa7 	b.w	800a36c <_puts_r>
 800a41e:	bf00      	nop
 800a420:	20000068 	.word	0x20000068

0800a424 <__sread>:
 800a424:	b510      	push	{r4, lr}
 800a426:	460c      	mov	r4, r1
 800a428:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a42c:	f000 f8fc 	bl	800a628 <_read_r>
 800a430:	2800      	cmp	r0, #0
 800a432:	bfab      	itete	ge
 800a434:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a436:	89a3      	ldrhlt	r3, [r4, #12]
 800a438:	181b      	addge	r3, r3, r0
 800a43a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a43e:	bfac      	ite	ge
 800a440:	6563      	strge	r3, [r4, #84]	; 0x54
 800a442:	81a3      	strhlt	r3, [r4, #12]
 800a444:	bd10      	pop	{r4, pc}

0800a446 <__swrite>:
 800a446:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a44a:	461f      	mov	r7, r3
 800a44c:	898b      	ldrh	r3, [r1, #12]
 800a44e:	05db      	lsls	r3, r3, #23
 800a450:	4605      	mov	r5, r0
 800a452:	460c      	mov	r4, r1
 800a454:	4616      	mov	r6, r2
 800a456:	d505      	bpl.n	800a464 <__swrite+0x1e>
 800a458:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a45c:	2302      	movs	r3, #2
 800a45e:	2200      	movs	r2, #0
 800a460:	f000 f8d0 	bl	800a604 <_lseek_r>
 800a464:	89a3      	ldrh	r3, [r4, #12]
 800a466:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a46a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a46e:	81a3      	strh	r3, [r4, #12]
 800a470:	4632      	mov	r2, r6
 800a472:	463b      	mov	r3, r7
 800a474:	4628      	mov	r0, r5
 800a476:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a47a:	f000 b8e7 	b.w	800a64c <_write_r>

0800a47e <__sseek>:
 800a47e:	b510      	push	{r4, lr}
 800a480:	460c      	mov	r4, r1
 800a482:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a486:	f000 f8bd 	bl	800a604 <_lseek_r>
 800a48a:	1c43      	adds	r3, r0, #1
 800a48c:	89a3      	ldrh	r3, [r4, #12]
 800a48e:	bf15      	itete	ne
 800a490:	6560      	strne	r0, [r4, #84]	; 0x54
 800a492:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a496:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a49a:	81a3      	strheq	r3, [r4, #12]
 800a49c:	bf18      	it	ne
 800a49e:	81a3      	strhne	r3, [r4, #12]
 800a4a0:	bd10      	pop	{r4, pc}

0800a4a2 <__sclose>:
 800a4a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a4a6:	f000 b89d 	b.w	800a5e4 <_close_r>

0800a4aa <__swbuf_r>:
 800a4aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4ac:	460e      	mov	r6, r1
 800a4ae:	4614      	mov	r4, r2
 800a4b0:	4605      	mov	r5, r0
 800a4b2:	b118      	cbz	r0, 800a4bc <__swbuf_r+0x12>
 800a4b4:	6a03      	ldr	r3, [r0, #32]
 800a4b6:	b90b      	cbnz	r3, 800a4bc <__swbuf_r+0x12>
 800a4b8:	f7ff ff22 	bl	800a300 <__sinit>
 800a4bc:	69a3      	ldr	r3, [r4, #24]
 800a4be:	60a3      	str	r3, [r4, #8]
 800a4c0:	89a3      	ldrh	r3, [r4, #12]
 800a4c2:	071a      	lsls	r2, r3, #28
 800a4c4:	d525      	bpl.n	800a512 <__swbuf_r+0x68>
 800a4c6:	6923      	ldr	r3, [r4, #16]
 800a4c8:	b31b      	cbz	r3, 800a512 <__swbuf_r+0x68>
 800a4ca:	6823      	ldr	r3, [r4, #0]
 800a4cc:	6922      	ldr	r2, [r4, #16]
 800a4ce:	1a98      	subs	r0, r3, r2
 800a4d0:	6963      	ldr	r3, [r4, #20]
 800a4d2:	b2f6      	uxtb	r6, r6
 800a4d4:	4283      	cmp	r3, r0
 800a4d6:	4637      	mov	r7, r6
 800a4d8:	dc04      	bgt.n	800a4e4 <__swbuf_r+0x3a>
 800a4da:	4621      	mov	r1, r4
 800a4dc:	4628      	mov	r0, r5
 800a4de:	f000 fa81 	bl	800a9e4 <_fflush_r>
 800a4e2:	b9e0      	cbnz	r0, 800a51e <__swbuf_r+0x74>
 800a4e4:	68a3      	ldr	r3, [r4, #8]
 800a4e6:	3b01      	subs	r3, #1
 800a4e8:	60a3      	str	r3, [r4, #8]
 800a4ea:	6823      	ldr	r3, [r4, #0]
 800a4ec:	1c5a      	adds	r2, r3, #1
 800a4ee:	6022      	str	r2, [r4, #0]
 800a4f0:	701e      	strb	r6, [r3, #0]
 800a4f2:	6962      	ldr	r2, [r4, #20]
 800a4f4:	1c43      	adds	r3, r0, #1
 800a4f6:	429a      	cmp	r2, r3
 800a4f8:	d004      	beq.n	800a504 <__swbuf_r+0x5a>
 800a4fa:	89a3      	ldrh	r3, [r4, #12]
 800a4fc:	07db      	lsls	r3, r3, #31
 800a4fe:	d506      	bpl.n	800a50e <__swbuf_r+0x64>
 800a500:	2e0a      	cmp	r6, #10
 800a502:	d104      	bne.n	800a50e <__swbuf_r+0x64>
 800a504:	4621      	mov	r1, r4
 800a506:	4628      	mov	r0, r5
 800a508:	f000 fa6c 	bl	800a9e4 <_fflush_r>
 800a50c:	b938      	cbnz	r0, 800a51e <__swbuf_r+0x74>
 800a50e:	4638      	mov	r0, r7
 800a510:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a512:	4621      	mov	r1, r4
 800a514:	4628      	mov	r0, r5
 800a516:	f000 f805 	bl	800a524 <__swsetup_r>
 800a51a:	2800      	cmp	r0, #0
 800a51c:	d0d5      	beq.n	800a4ca <__swbuf_r+0x20>
 800a51e:	f04f 37ff 	mov.w	r7, #4294967295
 800a522:	e7f4      	b.n	800a50e <__swbuf_r+0x64>

0800a524 <__swsetup_r>:
 800a524:	b538      	push	{r3, r4, r5, lr}
 800a526:	4b2a      	ldr	r3, [pc, #168]	; (800a5d0 <__swsetup_r+0xac>)
 800a528:	4605      	mov	r5, r0
 800a52a:	6818      	ldr	r0, [r3, #0]
 800a52c:	460c      	mov	r4, r1
 800a52e:	b118      	cbz	r0, 800a538 <__swsetup_r+0x14>
 800a530:	6a03      	ldr	r3, [r0, #32]
 800a532:	b90b      	cbnz	r3, 800a538 <__swsetup_r+0x14>
 800a534:	f7ff fee4 	bl	800a300 <__sinit>
 800a538:	89a3      	ldrh	r3, [r4, #12]
 800a53a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a53e:	0718      	lsls	r0, r3, #28
 800a540:	d422      	bmi.n	800a588 <__swsetup_r+0x64>
 800a542:	06d9      	lsls	r1, r3, #27
 800a544:	d407      	bmi.n	800a556 <__swsetup_r+0x32>
 800a546:	2309      	movs	r3, #9
 800a548:	602b      	str	r3, [r5, #0]
 800a54a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a54e:	81a3      	strh	r3, [r4, #12]
 800a550:	f04f 30ff 	mov.w	r0, #4294967295
 800a554:	e034      	b.n	800a5c0 <__swsetup_r+0x9c>
 800a556:	0758      	lsls	r0, r3, #29
 800a558:	d512      	bpl.n	800a580 <__swsetup_r+0x5c>
 800a55a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a55c:	b141      	cbz	r1, 800a570 <__swsetup_r+0x4c>
 800a55e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a562:	4299      	cmp	r1, r3
 800a564:	d002      	beq.n	800a56c <__swsetup_r+0x48>
 800a566:	4628      	mov	r0, r5
 800a568:	f000 f8be 	bl	800a6e8 <_free_r>
 800a56c:	2300      	movs	r3, #0
 800a56e:	6363      	str	r3, [r4, #52]	; 0x34
 800a570:	89a3      	ldrh	r3, [r4, #12]
 800a572:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a576:	81a3      	strh	r3, [r4, #12]
 800a578:	2300      	movs	r3, #0
 800a57a:	6063      	str	r3, [r4, #4]
 800a57c:	6923      	ldr	r3, [r4, #16]
 800a57e:	6023      	str	r3, [r4, #0]
 800a580:	89a3      	ldrh	r3, [r4, #12]
 800a582:	f043 0308 	orr.w	r3, r3, #8
 800a586:	81a3      	strh	r3, [r4, #12]
 800a588:	6923      	ldr	r3, [r4, #16]
 800a58a:	b94b      	cbnz	r3, 800a5a0 <__swsetup_r+0x7c>
 800a58c:	89a3      	ldrh	r3, [r4, #12]
 800a58e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a592:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a596:	d003      	beq.n	800a5a0 <__swsetup_r+0x7c>
 800a598:	4621      	mov	r1, r4
 800a59a:	4628      	mov	r0, r5
 800a59c:	f000 fa70 	bl	800aa80 <__smakebuf_r>
 800a5a0:	89a0      	ldrh	r0, [r4, #12]
 800a5a2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a5a6:	f010 0301 	ands.w	r3, r0, #1
 800a5aa:	d00a      	beq.n	800a5c2 <__swsetup_r+0x9e>
 800a5ac:	2300      	movs	r3, #0
 800a5ae:	60a3      	str	r3, [r4, #8]
 800a5b0:	6963      	ldr	r3, [r4, #20]
 800a5b2:	425b      	negs	r3, r3
 800a5b4:	61a3      	str	r3, [r4, #24]
 800a5b6:	6923      	ldr	r3, [r4, #16]
 800a5b8:	b943      	cbnz	r3, 800a5cc <__swsetup_r+0xa8>
 800a5ba:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a5be:	d1c4      	bne.n	800a54a <__swsetup_r+0x26>
 800a5c0:	bd38      	pop	{r3, r4, r5, pc}
 800a5c2:	0781      	lsls	r1, r0, #30
 800a5c4:	bf58      	it	pl
 800a5c6:	6963      	ldrpl	r3, [r4, #20]
 800a5c8:	60a3      	str	r3, [r4, #8]
 800a5ca:	e7f4      	b.n	800a5b6 <__swsetup_r+0x92>
 800a5cc:	2000      	movs	r0, #0
 800a5ce:	e7f7      	b.n	800a5c0 <__swsetup_r+0x9c>
 800a5d0:	20000068 	.word	0x20000068

0800a5d4 <memset>:
 800a5d4:	4402      	add	r2, r0
 800a5d6:	4603      	mov	r3, r0
 800a5d8:	4293      	cmp	r3, r2
 800a5da:	d100      	bne.n	800a5de <memset+0xa>
 800a5dc:	4770      	bx	lr
 800a5de:	f803 1b01 	strb.w	r1, [r3], #1
 800a5e2:	e7f9      	b.n	800a5d8 <memset+0x4>

0800a5e4 <_close_r>:
 800a5e4:	b538      	push	{r3, r4, r5, lr}
 800a5e6:	4d06      	ldr	r5, [pc, #24]	; (800a600 <_close_r+0x1c>)
 800a5e8:	2300      	movs	r3, #0
 800a5ea:	4604      	mov	r4, r0
 800a5ec:	4608      	mov	r0, r1
 800a5ee:	602b      	str	r3, [r5, #0]
 800a5f0:	f7f7 f92b 	bl	800184a <_close>
 800a5f4:	1c43      	adds	r3, r0, #1
 800a5f6:	d102      	bne.n	800a5fe <_close_r+0x1a>
 800a5f8:	682b      	ldr	r3, [r5, #0]
 800a5fa:	b103      	cbz	r3, 800a5fe <_close_r+0x1a>
 800a5fc:	6023      	str	r3, [r4, #0]
 800a5fe:	bd38      	pop	{r3, r4, r5, pc}
 800a600:	20006208 	.word	0x20006208

0800a604 <_lseek_r>:
 800a604:	b538      	push	{r3, r4, r5, lr}
 800a606:	4d07      	ldr	r5, [pc, #28]	; (800a624 <_lseek_r+0x20>)
 800a608:	4604      	mov	r4, r0
 800a60a:	4608      	mov	r0, r1
 800a60c:	4611      	mov	r1, r2
 800a60e:	2200      	movs	r2, #0
 800a610:	602a      	str	r2, [r5, #0]
 800a612:	461a      	mov	r2, r3
 800a614:	f7f7 f940 	bl	8001898 <_lseek>
 800a618:	1c43      	adds	r3, r0, #1
 800a61a:	d102      	bne.n	800a622 <_lseek_r+0x1e>
 800a61c:	682b      	ldr	r3, [r5, #0]
 800a61e:	b103      	cbz	r3, 800a622 <_lseek_r+0x1e>
 800a620:	6023      	str	r3, [r4, #0]
 800a622:	bd38      	pop	{r3, r4, r5, pc}
 800a624:	20006208 	.word	0x20006208

0800a628 <_read_r>:
 800a628:	b538      	push	{r3, r4, r5, lr}
 800a62a:	4d07      	ldr	r5, [pc, #28]	; (800a648 <_read_r+0x20>)
 800a62c:	4604      	mov	r4, r0
 800a62e:	4608      	mov	r0, r1
 800a630:	4611      	mov	r1, r2
 800a632:	2200      	movs	r2, #0
 800a634:	602a      	str	r2, [r5, #0]
 800a636:	461a      	mov	r2, r3
 800a638:	f7f7 f8ce 	bl	80017d8 <_read>
 800a63c:	1c43      	adds	r3, r0, #1
 800a63e:	d102      	bne.n	800a646 <_read_r+0x1e>
 800a640:	682b      	ldr	r3, [r5, #0]
 800a642:	b103      	cbz	r3, 800a646 <_read_r+0x1e>
 800a644:	6023      	str	r3, [r4, #0]
 800a646:	bd38      	pop	{r3, r4, r5, pc}
 800a648:	20006208 	.word	0x20006208

0800a64c <_write_r>:
 800a64c:	b538      	push	{r3, r4, r5, lr}
 800a64e:	4d07      	ldr	r5, [pc, #28]	; (800a66c <_write_r+0x20>)
 800a650:	4604      	mov	r4, r0
 800a652:	4608      	mov	r0, r1
 800a654:	4611      	mov	r1, r2
 800a656:	2200      	movs	r2, #0
 800a658:	602a      	str	r2, [r5, #0]
 800a65a:	461a      	mov	r2, r3
 800a65c:	f7f7 f8d9 	bl	8001812 <_write>
 800a660:	1c43      	adds	r3, r0, #1
 800a662:	d102      	bne.n	800a66a <_write_r+0x1e>
 800a664:	682b      	ldr	r3, [r5, #0]
 800a666:	b103      	cbz	r3, 800a66a <_write_r+0x1e>
 800a668:	6023      	str	r3, [r4, #0]
 800a66a:	bd38      	pop	{r3, r4, r5, pc}
 800a66c:	20006208 	.word	0x20006208

0800a670 <__errno>:
 800a670:	4b01      	ldr	r3, [pc, #4]	; (800a678 <__errno+0x8>)
 800a672:	6818      	ldr	r0, [r3, #0]
 800a674:	4770      	bx	lr
 800a676:	bf00      	nop
 800a678:	20000068 	.word	0x20000068

0800a67c <__libc_init_array>:
 800a67c:	b570      	push	{r4, r5, r6, lr}
 800a67e:	4d0d      	ldr	r5, [pc, #52]	; (800a6b4 <__libc_init_array+0x38>)
 800a680:	4c0d      	ldr	r4, [pc, #52]	; (800a6b8 <__libc_init_array+0x3c>)
 800a682:	1b64      	subs	r4, r4, r5
 800a684:	10a4      	asrs	r4, r4, #2
 800a686:	2600      	movs	r6, #0
 800a688:	42a6      	cmp	r6, r4
 800a68a:	d109      	bne.n	800a6a0 <__libc_init_array+0x24>
 800a68c:	4d0b      	ldr	r5, [pc, #44]	; (800a6bc <__libc_init_array+0x40>)
 800a68e:	4c0c      	ldr	r4, [pc, #48]	; (800a6c0 <__libc_init_array+0x44>)
 800a690:	f000 fa64 	bl	800ab5c <_init>
 800a694:	1b64      	subs	r4, r4, r5
 800a696:	10a4      	asrs	r4, r4, #2
 800a698:	2600      	movs	r6, #0
 800a69a:	42a6      	cmp	r6, r4
 800a69c:	d105      	bne.n	800a6aa <__libc_init_array+0x2e>
 800a69e:	bd70      	pop	{r4, r5, r6, pc}
 800a6a0:	f855 3b04 	ldr.w	r3, [r5], #4
 800a6a4:	4798      	blx	r3
 800a6a6:	3601      	adds	r6, #1
 800a6a8:	e7ee      	b.n	800a688 <__libc_init_array+0xc>
 800a6aa:	f855 3b04 	ldr.w	r3, [r5], #4
 800a6ae:	4798      	blx	r3
 800a6b0:	3601      	adds	r6, #1
 800a6b2:	e7f2      	b.n	800a69a <__libc_init_array+0x1e>
 800a6b4:	0800ac80 	.word	0x0800ac80
 800a6b8:	0800ac80 	.word	0x0800ac80
 800a6bc:	0800ac80 	.word	0x0800ac80
 800a6c0:	0800ac84 	.word	0x0800ac84

0800a6c4 <__retarget_lock_init_recursive>:
 800a6c4:	4770      	bx	lr

0800a6c6 <__retarget_lock_acquire_recursive>:
 800a6c6:	4770      	bx	lr

0800a6c8 <__retarget_lock_release_recursive>:
 800a6c8:	4770      	bx	lr

0800a6ca <memcpy>:
 800a6ca:	440a      	add	r2, r1
 800a6cc:	4291      	cmp	r1, r2
 800a6ce:	f100 33ff 	add.w	r3, r0, #4294967295
 800a6d2:	d100      	bne.n	800a6d6 <memcpy+0xc>
 800a6d4:	4770      	bx	lr
 800a6d6:	b510      	push	{r4, lr}
 800a6d8:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a6dc:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a6e0:	4291      	cmp	r1, r2
 800a6e2:	d1f9      	bne.n	800a6d8 <memcpy+0xe>
 800a6e4:	bd10      	pop	{r4, pc}
	...

0800a6e8 <_free_r>:
 800a6e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a6ea:	2900      	cmp	r1, #0
 800a6ec:	d044      	beq.n	800a778 <_free_r+0x90>
 800a6ee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a6f2:	9001      	str	r0, [sp, #4]
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	f1a1 0404 	sub.w	r4, r1, #4
 800a6fa:	bfb8      	it	lt
 800a6fc:	18e4      	addlt	r4, r4, r3
 800a6fe:	f000 f8df 	bl	800a8c0 <__malloc_lock>
 800a702:	4a1e      	ldr	r2, [pc, #120]	; (800a77c <_free_r+0x94>)
 800a704:	9801      	ldr	r0, [sp, #4]
 800a706:	6813      	ldr	r3, [r2, #0]
 800a708:	b933      	cbnz	r3, 800a718 <_free_r+0x30>
 800a70a:	6063      	str	r3, [r4, #4]
 800a70c:	6014      	str	r4, [r2, #0]
 800a70e:	b003      	add	sp, #12
 800a710:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a714:	f000 b8da 	b.w	800a8cc <__malloc_unlock>
 800a718:	42a3      	cmp	r3, r4
 800a71a:	d908      	bls.n	800a72e <_free_r+0x46>
 800a71c:	6825      	ldr	r5, [r4, #0]
 800a71e:	1961      	adds	r1, r4, r5
 800a720:	428b      	cmp	r3, r1
 800a722:	bf01      	itttt	eq
 800a724:	6819      	ldreq	r1, [r3, #0]
 800a726:	685b      	ldreq	r3, [r3, #4]
 800a728:	1949      	addeq	r1, r1, r5
 800a72a:	6021      	streq	r1, [r4, #0]
 800a72c:	e7ed      	b.n	800a70a <_free_r+0x22>
 800a72e:	461a      	mov	r2, r3
 800a730:	685b      	ldr	r3, [r3, #4]
 800a732:	b10b      	cbz	r3, 800a738 <_free_r+0x50>
 800a734:	42a3      	cmp	r3, r4
 800a736:	d9fa      	bls.n	800a72e <_free_r+0x46>
 800a738:	6811      	ldr	r1, [r2, #0]
 800a73a:	1855      	adds	r5, r2, r1
 800a73c:	42a5      	cmp	r5, r4
 800a73e:	d10b      	bne.n	800a758 <_free_r+0x70>
 800a740:	6824      	ldr	r4, [r4, #0]
 800a742:	4421      	add	r1, r4
 800a744:	1854      	adds	r4, r2, r1
 800a746:	42a3      	cmp	r3, r4
 800a748:	6011      	str	r1, [r2, #0]
 800a74a:	d1e0      	bne.n	800a70e <_free_r+0x26>
 800a74c:	681c      	ldr	r4, [r3, #0]
 800a74e:	685b      	ldr	r3, [r3, #4]
 800a750:	6053      	str	r3, [r2, #4]
 800a752:	440c      	add	r4, r1
 800a754:	6014      	str	r4, [r2, #0]
 800a756:	e7da      	b.n	800a70e <_free_r+0x26>
 800a758:	d902      	bls.n	800a760 <_free_r+0x78>
 800a75a:	230c      	movs	r3, #12
 800a75c:	6003      	str	r3, [r0, #0]
 800a75e:	e7d6      	b.n	800a70e <_free_r+0x26>
 800a760:	6825      	ldr	r5, [r4, #0]
 800a762:	1961      	adds	r1, r4, r5
 800a764:	428b      	cmp	r3, r1
 800a766:	bf04      	itt	eq
 800a768:	6819      	ldreq	r1, [r3, #0]
 800a76a:	685b      	ldreq	r3, [r3, #4]
 800a76c:	6063      	str	r3, [r4, #4]
 800a76e:	bf04      	itt	eq
 800a770:	1949      	addeq	r1, r1, r5
 800a772:	6021      	streq	r1, [r4, #0]
 800a774:	6054      	str	r4, [r2, #4]
 800a776:	e7ca      	b.n	800a70e <_free_r+0x26>
 800a778:	b003      	add	sp, #12
 800a77a:	bd30      	pop	{r4, r5, pc}
 800a77c:	20006210 	.word	0x20006210

0800a780 <sbrk_aligned>:
 800a780:	b570      	push	{r4, r5, r6, lr}
 800a782:	4e0e      	ldr	r6, [pc, #56]	; (800a7bc <sbrk_aligned+0x3c>)
 800a784:	460c      	mov	r4, r1
 800a786:	6831      	ldr	r1, [r6, #0]
 800a788:	4605      	mov	r5, r0
 800a78a:	b911      	cbnz	r1, 800a792 <sbrk_aligned+0x12>
 800a78c:	f000 f9d6 	bl	800ab3c <_sbrk_r>
 800a790:	6030      	str	r0, [r6, #0]
 800a792:	4621      	mov	r1, r4
 800a794:	4628      	mov	r0, r5
 800a796:	f000 f9d1 	bl	800ab3c <_sbrk_r>
 800a79a:	1c43      	adds	r3, r0, #1
 800a79c:	d00a      	beq.n	800a7b4 <sbrk_aligned+0x34>
 800a79e:	1cc4      	adds	r4, r0, #3
 800a7a0:	f024 0403 	bic.w	r4, r4, #3
 800a7a4:	42a0      	cmp	r0, r4
 800a7a6:	d007      	beq.n	800a7b8 <sbrk_aligned+0x38>
 800a7a8:	1a21      	subs	r1, r4, r0
 800a7aa:	4628      	mov	r0, r5
 800a7ac:	f000 f9c6 	bl	800ab3c <_sbrk_r>
 800a7b0:	3001      	adds	r0, #1
 800a7b2:	d101      	bne.n	800a7b8 <sbrk_aligned+0x38>
 800a7b4:	f04f 34ff 	mov.w	r4, #4294967295
 800a7b8:	4620      	mov	r0, r4
 800a7ba:	bd70      	pop	{r4, r5, r6, pc}
 800a7bc:	20006214 	.word	0x20006214

0800a7c0 <_malloc_r>:
 800a7c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a7c4:	1ccd      	adds	r5, r1, #3
 800a7c6:	f025 0503 	bic.w	r5, r5, #3
 800a7ca:	3508      	adds	r5, #8
 800a7cc:	2d0c      	cmp	r5, #12
 800a7ce:	bf38      	it	cc
 800a7d0:	250c      	movcc	r5, #12
 800a7d2:	2d00      	cmp	r5, #0
 800a7d4:	4607      	mov	r7, r0
 800a7d6:	db01      	blt.n	800a7dc <_malloc_r+0x1c>
 800a7d8:	42a9      	cmp	r1, r5
 800a7da:	d905      	bls.n	800a7e8 <_malloc_r+0x28>
 800a7dc:	230c      	movs	r3, #12
 800a7de:	603b      	str	r3, [r7, #0]
 800a7e0:	2600      	movs	r6, #0
 800a7e2:	4630      	mov	r0, r6
 800a7e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a7e8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800a8bc <_malloc_r+0xfc>
 800a7ec:	f000 f868 	bl	800a8c0 <__malloc_lock>
 800a7f0:	f8d8 3000 	ldr.w	r3, [r8]
 800a7f4:	461c      	mov	r4, r3
 800a7f6:	bb5c      	cbnz	r4, 800a850 <_malloc_r+0x90>
 800a7f8:	4629      	mov	r1, r5
 800a7fa:	4638      	mov	r0, r7
 800a7fc:	f7ff ffc0 	bl	800a780 <sbrk_aligned>
 800a800:	1c43      	adds	r3, r0, #1
 800a802:	4604      	mov	r4, r0
 800a804:	d155      	bne.n	800a8b2 <_malloc_r+0xf2>
 800a806:	f8d8 4000 	ldr.w	r4, [r8]
 800a80a:	4626      	mov	r6, r4
 800a80c:	2e00      	cmp	r6, #0
 800a80e:	d145      	bne.n	800a89c <_malloc_r+0xdc>
 800a810:	2c00      	cmp	r4, #0
 800a812:	d048      	beq.n	800a8a6 <_malloc_r+0xe6>
 800a814:	6823      	ldr	r3, [r4, #0]
 800a816:	4631      	mov	r1, r6
 800a818:	4638      	mov	r0, r7
 800a81a:	eb04 0903 	add.w	r9, r4, r3
 800a81e:	f000 f98d 	bl	800ab3c <_sbrk_r>
 800a822:	4581      	cmp	r9, r0
 800a824:	d13f      	bne.n	800a8a6 <_malloc_r+0xe6>
 800a826:	6821      	ldr	r1, [r4, #0]
 800a828:	1a6d      	subs	r5, r5, r1
 800a82a:	4629      	mov	r1, r5
 800a82c:	4638      	mov	r0, r7
 800a82e:	f7ff ffa7 	bl	800a780 <sbrk_aligned>
 800a832:	3001      	adds	r0, #1
 800a834:	d037      	beq.n	800a8a6 <_malloc_r+0xe6>
 800a836:	6823      	ldr	r3, [r4, #0]
 800a838:	442b      	add	r3, r5
 800a83a:	6023      	str	r3, [r4, #0]
 800a83c:	f8d8 3000 	ldr.w	r3, [r8]
 800a840:	2b00      	cmp	r3, #0
 800a842:	d038      	beq.n	800a8b6 <_malloc_r+0xf6>
 800a844:	685a      	ldr	r2, [r3, #4]
 800a846:	42a2      	cmp	r2, r4
 800a848:	d12b      	bne.n	800a8a2 <_malloc_r+0xe2>
 800a84a:	2200      	movs	r2, #0
 800a84c:	605a      	str	r2, [r3, #4]
 800a84e:	e00f      	b.n	800a870 <_malloc_r+0xb0>
 800a850:	6822      	ldr	r2, [r4, #0]
 800a852:	1b52      	subs	r2, r2, r5
 800a854:	d41f      	bmi.n	800a896 <_malloc_r+0xd6>
 800a856:	2a0b      	cmp	r2, #11
 800a858:	d917      	bls.n	800a88a <_malloc_r+0xca>
 800a85a:	1961      	adds	r1, r4, r5
 800a85c:	42a3      	cmp	r3, r4
 800a85e:	6025      	str	r5, [r4, #0]
 800a860:	bf18      	it	ne
 800a862:	6059      	strne	r1, [r3, #4]
 800a864:	6863      	ldr	r3, [r4, #4]
 800a866:	bf08      	it	eq
 800a868:	f8c8 1000 	streq.w	r1, [r8]
 800a86c:	5162      	str	r2, [r4, r5]
 800a86e:	604b      	str	r3, [r1, #4]
 800a870:	4638      	mov	r0, r7
 800a872:	f104 060b 	add.w	r6, r4, #11
 800a876:	f000 f829 	bl	800a8cc <__malloc_unlock>
 800a87a:	f026 0607 	bic.w	r6, r6, #7
 800a87e:	1d23      	adds	r3, r4, #4
 800a880:	1af2      	subs	r2, r6, r3
 800a882:	d0ae      	beq.n	800a7e2 <_malloc_r+0x22>
 800a884:	1b9b      	subs	r3, r3, r6
 800a886:	50a3      	str	r3, [r4, r2]
 800a888:	e7ab      	b.n	800a7e2 <_malloc_r+0x22>
 800a88a:	42a3      	cmp	r3, r4
 800a88c:	6862      	ldr	r2, [r4, #4]
 800a88e:	d1dd      	bne.n	800a84c <_malloc_r+0x8c>
 800a890:	f8c8 2000 	str.w	r2, [r8]
 800a894:	e7ec      	b.n	800a870 <_malloc_r+0xb0>
 800a896:	4623      	mov	r3, r4
 800a898:	6864      	ldr	r4, [r4, #4]
 800a89a:	e7ac      	b.n	800a7f6 <_malloc_r+0x36>
 800a89c:	4634      	mov	r4, r6
 800a89e:	6876      	ldr	r6, [r6, #4]
 800a8a0:	e7b4      	b.n	800a80c <_malloc_r+0x4c>
 800a8a2:	4613      	mov	r3, r2
 800a8a4:	e7cc      	b.n	800a840 <_malloc_r+0x80>
 800a8a6:	230c      	movs	r3, #12
 800a8a8:	603b      	str	r3, [r7, #0]
 800a8aa:	4638      	mov	r0, r7
 800a8ac:	f000 f80e 	bl	800a8cc <__malloc_unlock>
 800a8b0:	e797      	b.n	800a7e2 <_malloc_r+0x22>
 800a8b2:	6025      	str	r5, [r4, #0]
 800a8b4:	e7dc      	b.n	800a870 <_malloc_r+0xb0>
 800a8b6:	605b      	str	r3, [r3, #4]
 800a8b8:	deff      	udf	#255	; 0xff
 800a8ba:	bf00      	nop
 800a8bc:	20006210 	.word	0x20006210

0800a8c0 <__malloc_lock>:
 800a8c0:	4801      	ldr	r0, [pc, #4]	; (800a8c8 <__malloc_lock+0x8>)
 800a8c2:	f7ff bf00 	b.w	800a6c6 <__retarget_lock_acquire_recursive>
 800a8c6:	bf00      	nop
 800a8c8:	2000620c 	.word	0x2000620c

0800a8cc <__malloc_unlock>:
 800a8cc:	4801      	ldr	r0, [pc, #4]	; (800a8d4 <__malloc_unlock+0x8>)
 800a8ce:	f7ff befb 	b.w	800a6c8 <__retarget_lock_release_recursive>
 800a8d2:	bf00      	nop
 800a8d4:	2000620c 	.word	0x2000620c

0800a8d8 <__sflush_r>:
 800a8d8:	898a      	ldrh	r2, [r1, #12]
 800a8da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a8de:	4605      	mov	r5, r0
 800a8e0:	0710      	lsls	r0, r2, #28
 800a8e2:	460c      	mov	r4, r1
 800a8e4:	d458      	bmi.n	800a998 <__sflush_r+0xc0>
 800a8e6:	684b      	ldr	r3, [r1, #4]
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	dc05      	bgt.n	800a8f8 <__sflush_r+0x20>
 800a8ec:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	dc02      	bgt.n	800a8f8 <__sflush_r+0x20>
 800a8f2:	2000      	movs	r0, #0
 800a8f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a8f8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a8fa:	2e00      	cmp	r6, #0
 800a8fc:	d0f9      	beq.n	800a8f2 <__sflush_r+0x1a>
 800a8fe:	2300      	movs	r3, #0
 800a900:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a904:	682f      	ldr	r7, [r5, #0]
 800a906:	6a21      	ldr	r1, [r4, #32]
 800a908:	602b      	str	r3, [r5, #0]
 800a90a:	d032      	beq.n	800a972 <__sflush_r+0x9a>
 800a90c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a90e:	89a3      	ldrh	r3, [r4, #12]
 800a910:	075a      	lsls	r2, r3, #29
 800a912:	d505      	bpl.n	800a920 <__sflush_r+0x48>
 800a914:	6863      	ldr	r3, [r4, #4]
 800a916:	1ac0      	subs	r0, r0, r3
 800a918:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a91a:	b10b      	cbz	r3, 800a920 <__sflush_r+0x48>
 800a91c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a91e:	1ac0      	subs	r0, r0, r3
 800a920:	2300      	movs	r3, #0
 800a922:	4602      	mov	r2, r0
 800a924:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a926:	6a21      	ldr	r1, [r4, #32]
 800a928:	4628      	mov	r0, r5
 800a92a:	47b0      	blx	r6
 800a92c:	1c43      	adds	r3, r0, #1
 800a92e:	89a3      	ldrh	r3, [r4, #12]
 800a930:	d106      	bne.n	800a940 <__sflush_r+0x68>
 800a932:	6829      	ldr	r1, [r5, #0]
 800a934:	291d      	cmp	r1, #29
 800a936:	d82b      	bhi.n	800a990 <__sflush_r+0xb8>
 800a938:	4a29      	ldr	r2, [pc, #164]	; (800a9e0 <__sflush_r+0x108>)
 800a93a:	410a      	asrs	r2, r1
 800a93c:	07d6      	lsls	r6, r2, #31
 800a93e:	d427      	bmi.n	800a990 <__sflush_r+0xb8>
 800a940:	2200      	movs	r2, #0
 800a942:	6062      	str	r2, [r4, #4]
 800a944:	04d9      	lsls	r1, r3, #19
 800a946:	6922      	ldr	r2, [r4, #16]
 800a948:	6022      	str	r2, [r4, #0]
 800a94a:	d504      	bpl.n	800a956 <__sflush_r+0x7e>
 800a94c:	1c42      	adds	r2, r0, #1
 800a94e:	d101      	bne.n	800a954 <__sflush_r+0x7c>
 800a950:	682b      	ldr	r3, [r5, #0]
 800a952:	b903      	cbnz	r3, 800a956 <__sflush_r+0x7e>
 800a954:	6560      	str	r0, [r4, #84]	; 0x54
 800a956:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a958:	602f      	str	r7, [r5, #0]
 800a95a:	2900      	cmp	r1, #0
 800a95c:	d0c9      	beq.n	800a8f2 <__sflush_r+0x1a>
 800a95e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a962:	4299      	cmp	r1, r3
 800a964:	d002      	beq.n	800a96c <__sflush_r+0x94>
 800a966:	4628      	mov	r0, r5
 800a968:	f7ff febe 	bl	800a6e8 <_free_r>
 800a96c:	2000      	movs	r0, #0
 800a96e:	6360      	str	r0, [r4, #52]	; 0x34
 800a970:	e7c0      	b.n	800a8f4 <__sflush_r+0x1c>
 800a972:	2301      	movs	r3, #1
 800a974:	4628      	mov	r0, r5
 800a976:	47b0      	blx	r6
 800a978:	1c41      	adds	r1, r0, #1
 800a97a:	d1c8      	bne.n	800a90e <__sflush_r+0x36>
 800a97c:	682b      	ldr	r3, [r5, #0]
 800a97e:	2b00      	cmp	r3, #0
 800a980:	d0c5      	beq.n	800a90e <__sflush_r+0x36>
 800a982:	2b1d      	cmp	r3, #29
 800a984:	d001      	beq.n	800a98a <__sflush_r+0xb2>
 800a986:	2b16      	cmp	r3, #22
 800a988:	d101      	bne.n	800a98e <__sflush_r+0xb6>
 800a98a:	602f      	str	r7, [r5, #0]
 800a98c:	e7b1      	b.n	800a8f2 <__sflush_r+0x1a>
 800a98e:	89a3      	ldrh	r3, [r4, #12]
 800a990:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a994:	81a3      	strh	r3, [r4, #12]
 800a996:	e7ad      	b.n	800a8f4 <__sflush_r+0x1c>
 800a998:	690f      	ldr	r7, [r1, #16]
 800a99a:	2f00      	cmp	r7, #0
 800a99c:	d0a9      	beq.n	800a8f2 <__sflush_r+0x1a>
 800a99e:	0793      	lsls	r3, r2, #30
 800a9a0:	680e      	ldr	r6, [r1, #0]
 800a9a2:	bf08      	it	eq
 800a9a4:	694b      	ldreq	r3, [r1, #20]
 800a9a6:	600f      	str	r7, [r1, #0]
 800a9a8:	bf18      	it	ne
 800a9aa:	2300      	movne	r3, #0
 800a9ac:	eba6 0807 	sub.w	r8, r6, r7
 800a9b0:	608b      	str	r3, [r1, #8]
 800a9b2:	f1b8 0f00 	cmp.w	r8, #0
 800a9b6:	dd9c      	ble.n	800a8f2 <__sflush_r+0x1a>
 800a9b8:	6a21      	ldr	r1, [r4, #32]
 800a9ba:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a9bc:	4643      	mov	r3, r8
 800a9be:	463a      	mov	r2, r7
 800a9c0:	4628      	mov	r0, r5
 800a9c2:	47b0      	blx	r6
 800a9c4:	2800      	cmp	r0, #0
 800a9c6:	dc06      	bgt.n	800a9d6 <__sflush_r+0xfe>
 800a9c8:	89a3      	ldrh	r3, [r4, #12]
 800a9ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a9ce:	81a3      	strh	r3, [r4, #12]
 800a9d0:	f04f 30ff 	mov.w	r0, #4294967295
 800a9d4:	e78e      	b.n	800a8f4 <__sflush_r+0x1c>
 800a9d6:	4407      	add	r7, r0
 800a9d8:	eba8 0800 	sub.w	r8, r8, r0
 800a9dc:	e7e9      	b.n	800a9b2 <__sflush_r+0xda>
 800a9de:	bf00      	nop
 800a9e0:	dfbffffe 	.word	0xdfbffffe

0800a9e4 <_fflush_r>:
 800a9e4:	b538      	push	{r3, r4, r5, lr}
 800a9e6:	690b      	ldr	r3, [r1, #16]
 800a9e8:	4605      	mov	r5, r0
 800a9ea:	460c      	mov	r4, r1
 800a9ec:	b913      	cbnz	r3, 800a9f4 <_fflush_r+0x10>
 800a9ee:	2500      	movs	r5, #0
 800a9f0:	4628      	mov	r0, r5
 800a9f2:	bd38      	pop	{r3, r4, r5, pc}
 800a9f4:	b118      	cbz	r0, 800a9fe <_fflush_r+0x1a>
 800a9f6:	6a03      	ldr	r3, [r0, #32]
 800a9f8:	b90b      	cbnz	r3, 800a9fe <_fflush_r+0x1a>
 800a9fa:	f7ff fc81 	bl	800a300 <__sinit>
 800a9fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	d0f3      	beq.n	800a9ee <_fflush_r+0xa>
 800aa06:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800aa08:	07d0      	lsls	r0, r2, #31
 800aa0a:	d404      	bmi.n	800aa16 <_fflush_r+0x32>
 800aa0c:	0599      	lsls	r1, r3, #22
 800aa0e:	d402      	bmi.n	800aa16 <_fflush_r+0x32>
 800aa10:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800aa12:	f7ff fe58 	bl	800a6c6 <__retarget_lock_acquire_recursive>
 800aa16:	4628      	mov	r0, r5
 800aa18:	4621      	mov	r1, r4
 800aa1a:	f7ff ff5d 	bl	800a8d8 <__sflush_r>
 800aa1e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800aa20:	07da      	lsls	r2, r3, #31
 800aa22:	4605      	mov	r5, r0
 800aa24:	d4e4      	bmi.n	800a9f0 <_fflush_r+0xc>
 800aa26:	89a3      	ldrh	r3, [r4, #12]
 800aa28:	059b      	lsls	r3, r3, #22
 800aa2a:	d4e1      	bmi.n	800a9f0 <_fflush_r+0xc>
 800aa2c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800aa2e:	f7ff fe4b 	bl	800a6c8 <__retarget_lock_release_recursive>
 800aa32:	e7dd      	b.n	800a9f0 <_fflush_r+0xc>

0800aa34 <__swhatbuf_r>:
 800aa34:	b570      	push	{r4, r5, r6, lr}
 800aa36:	460c      	mov	r4, r1
 800aa38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aa3c:	2900      	cmp	r1, #0
 800aa3e:	b096      	sub	sp, #88	; 0x58
 800aa40:	4615      	mov	r5, r2
 800aa42:	461e      	mov	r6, r3
 800aa44:	da0d      	bge.n	800aa62 <__swhatbuf_r+0x2e>
 800aa46:	89a3      	ldrh	r3, [r4, #12]
 800aa48:	f013 0f80 	tst.w	r3, #128	; 0x80
 800aa4c:	f04f 0100 	mov.w	r1, #0
 800aa50:	bf0c      	ite	eq
 800aa52:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800aa56:	2340      	movne	r3, #64	; 0x40
 800aa58:	2000      	movs	r0, #0
 800aa5a:	6031      	str	r1, [r6, #0]
 800aa5c:	602b      	str	r3, [r5, #0]
 800aa5e:	b016      	add	sp, #88	; 0x58
 800aa60:	bd70      	pop	{r4, r5, r6, pc}
 800aa62:	466a      	mov	r2, sp
 800aa64:	f000 f848 	bl	800aaf8 <_fstat_r>
 800aa68:	2800      	cmp	r0, #0
 800aa6a:	dbec      	blt.n	800aa46 <__swhatbuf_r+0x12>
 800aa6c:	9901      	ldr	r1, [sp, #4]
 800aa6e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800aa72:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800aa76:	4259      	negs	r1, r3
 800aa78:	4159      	adcs	r1, r3
 800aa7a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aa7e:	e7eb      	b.n	800aa58 <__swhatbuf_r+0x24>

0800aa80 <__smakebuf_r>:
 800aa80:	898b      	ldrh	r3, [r1, #12]
 800aa82:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800aa84:	079d      	lsls	r5, r3, #30
 800aa86:	4606      	mov	r6, r0
 800aa88:	460c      	mov	r4, r1
 800aa8a:	d507      	bpl.n	800aa9c <__smakebuf_r+0x1c>
 800aa8c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800aa90:	6023      	str	r3, [r4, #0]
 800aa92:	6123      	str	r3, [r4, #16]
 800aa94:	2301      	movs	r3, #1
 800aa96:	6163      	str	r3, [r4, #20]
 800aa98:	b002      	add	sp, #8
 800aa9a:	bd70      	pop	{r4, r5, r6, pc}
 800aa9c:	ab01      	add	r3, sp, #4
 800aa9e:	466a      	mov	r2, sp
 800aaa0:	f7ff ffc8 	bl	800aa34 <__swhatbuf_r>
 800aaa4:	9900      	ldr	r1, [sp, #0]
 800aaa6:	4605      	mov	r5, r0
 800aaa8:	4630      	mov	r0, r6
 800aaaa:	f7ff fe89 	bl	800a7c0 <_malloc_r>
 800aaae:	b948      	cbnz	r0, 800aac4 <__smakebuf_r+0x44>
 800aab0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aab4:	059a      	lsls	r2, r3, #22
 800aab6:	d4ef      	bmi.n	800aa98 <__smakebuf_r+0x18>
 800aab8:	f023 0303 	bic.w	r3, r3, #3
 800aabc:	f043 0302 	orr.w	r3, r3, #2
 800aac0:	81a3      	strh	r3, [r4, #12]
 800aac2:	e7e3      	b.n	800aa8c <__smakebuf_r+0xc>
 800aac4:	89a3      	ldrh	r3, [r4, #12]
 800aac6:	6020      	str	r0, [r4, #0]
 800aac8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aacc:	81a3      	strh	r3, [r4, #12]
 800aace:	9b00      	ldr	r3, [sp, #0]
 800aad0:	6163      	str	r3, [r4, #20]
 800aad2:	9b01      	ldr	r3, [sp, #4]
 800aad4:	6120      	str	r0, [r4, #16]
 800aad6:	b15b      	cbz	r3, 800aaf0 <__smakebuf_r+0x70>
 800aad8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800aadc:	4630      	mov	r0, r6
 800aade:	f000 f81d 	bl	800ab1c <_isatty_r>
 800aae2:	b128      	cbz	r0, 800aaf0 <__smakebuf_r+0x70>
 800aae4:	89a3      	ldrh	r3, [r4, #12]
 800aae6:	f023 0303 	bic.w	r3, r3, #3
 800aaea:	f043 0301 	orr.w	r3, r3, #1
 800aaee:	81a3      	strh	r3, [r4, #12]
 800aaf0:	89a3      	ldrh	r3, [r4, #12]
 800aaf2:	431d      	orrs	r5, r3
 800aaf4:	81a5      	strh	r5, [r4, #12]
 800aaf6:	e7cf      	b.n	800aa98 <__smakebuf_r+0x18>

0800aaf8 <_fstat_r>:
 800aaf8:	b538      	push	{r3, r4, r5, lr}
 800aafa:	4d07      	ldr	r5, [pc, #28]	; (800ab18 <_fstat_r+0x20>)
 800aafc:	2300      	movs	r3, #0
 800aafe:	4604      	mov	r4, r0
 800ab00:	4608      	mov	r0, r1
 800ab02:	4611      	mov	r1, r2
 800ab04:	602b      	str	r3, [r5, #0]
 800ab06:	f7f6 feac 	bl	8001862 <_fstat>
 800ab0a:	1c43      	adds	r3, r0, #1
 800ab0c:	d102      	bne.n	800ab14 <_fstat_r+0x1c>
 800ab0e:	682b      	ldr	r3, [r5, #0]
 800ab10:	b103      	cbz	r3, 800ab14 <_fstat_r+0x1c>
 800ab12:	6023      	str	r3, [r4, #0]
 800ab14:	bd38      	pop	{r3, r4, r5, pc}
 800ab16:	bf00      	nop
 800ab18:	20006208 	.word	0x20006208

0800ab1c <_isatty_r>:
 800ab1c:	b538      	push	{r3, r4, r5, lr}
 800ab1e:	4d06      	ldr	r5, [pc, #24]	; (800ab38 <_isatty_r+0x1c>)
 800ab20:	2300      	movs	r3, #0
 800ab22:	4604      	mov	r4, r0
 800ab24:	4608      	mov	r0, r1
 800ab26:	602b      	str	r3, [r5, #0]
 800ab28:	f7f6 feab 	bl	8001882 <_isatty>
 800ab2c:	1c43      	adds	r3, r0, #1
 800ab2e:	d102      	bne.n	800ab36 <_isatty_r+0x1a>
 800ab30:	682b      	ldr	r3, [r5, #0]
 800ab32:	b103      	cbz	r3, 800ab36 <_isatty_r+0x1a>
 800ab34:	6023      	str	r3, [r4, #0]
 800ab36:	bd38      	pop	{r3, r4, r5, pc}
 800ab38:	20006208 	.word	0x20006208

0800ab3c <_sbrk_r>:
 800ab3c:	b538      	push	{r3, r4, r5, lr}
 800ab3e:	4d06      	ldr	r5, [pc, #24]	; (800ab58 <_sbrk_r+0x1c>)
 800ab40:	2300      	movs	r3, #0
 800ab42:	4604      	mov	r4, r0
 800ab44:	4608      	mov	r0, r1
 800ab46:	602b      	str	r3, [r5, #0]
 800ab48:	f7f6 feb4 	bl	80018b4 <_sbrk>
 800ab4c:	1c43      	adds	r3, r0, #1
 800ab4e:	d102      	bne.n	800ab56 <_sbrk_r+0x1a>
 800ab50:	682b      	ldr	r3, [r5, #0]
 800ab52:	b103      	cbz	r3, 800ab56 <_sbrk_r+0x1a>
 800ab54:	6023      	str	r3, [r4, #0]
 800ab56:	bd38      	pop	{r3, r4, r5, pc}
 800ab58:	20006208 	.word	0x20006208

0800ab5c <_init>:
 800ab5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab5e:	bf00      	nop
 800ab60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ab62:	bc08      	pop	{r3}
 800ab64:	469e      	mov	lr, r3
 800ab66:	4770      	bx	lr

0800ab68 <_fini>:
 800ab68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab6a:	bf00      	nop
 800ab6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ab6e:	bc08      	pop	{r3}
 800ab70:	469e      	mov	lr, r3
 800ab72:	4770      	bx	lr
