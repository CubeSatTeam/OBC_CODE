
ADCS_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001228c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000009b0  08012430  08012430  00013430  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012de0  08012de0  00014200  2**0
                  CONTENTS
  4 .ARM          00000008  08012de0  08012de0  00013de0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012de8  08012de8  00014200  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012de8  08012de8  00013de8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012dec  08012dec  00013dec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000200  20000000  08012df0  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00023710  20000200  08012ff0  00014200  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20023910  08012ff0  00014910  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00014200  2**0
                  CONTENTS, READONLY
 12 .debug_info   00029e8e  00000000  00000000  00014230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006521  00000000  00000000  0003e0be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002278  00000000  00000000  000445e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001ab4  00000000  00000000  00046858  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002b45a  00000000  00000000  0004830c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002ffe6  00000000  00000000  00073766  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fc92d  00000000  00000000  000a374c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001a0079  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a114  00000000  00000000  001a00bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000085  00000000  00000000  001aa1d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000200 	.word	0x20000200
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08012414 	.word	0x08012414

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000204 	.word	0x20000204
 80001dc:	08012414 	.word	0x08012414

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b96a 	b.w	8000f44 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	460c      	mov	r4, r1
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d14e      	bne.n	8000d32 <__udivmoddi4+0xaa>
 8000c94:	4694      	mov	ip, r2
 8000c96:	458c      	cmp	ip, r1
 8000c98:	4686      	mov	lr, r0
 8000c9a:	fab2 f282 	clz	r2, r2
 8000c9e:	d962      	bls.n	8000d66 <__udivmoddi4+0xde>
 8000ca0:	b14a      	cbz	r2, 8000cb6 <__udivmoddi4+0x2e>
 8000ca2:	f1c2 0320 	rsb	r3, r2, #32
 8000ca6:	4091      	lsls	r1, r2
 8000ca8:	fa20 f303 	lsr.w	r3, r0, r3
 8000cac:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cb0:	4319      	orrs	r1, r3
 8000cb2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cb6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cba:	fa1f f68c 	uxth.w	r6, ip
 8000cbe:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cc2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cc6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cca:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cce:	fb04 f106 	mul.w	r1, r4, r6
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	d90a      	bls.n	8000cec <__udivmoddi4+0x64>
 8000cd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cda:	f104 30ff 	add.w	r0, r4, #4294967295
 8000cde:	f080 8112 	bcs.w	8000f06 <__udivmoddi4+0x27e>
 8000ce2:	4299      	cmp	r1, r3
 8000ce4:	f240 810f 	bls.w	8000f06 <__udivmoddi4+0x27e>
 8000ce8:	3c02      	subs	r4, #2
 8000cea:	4463      	add	r3, ip
 8000cec:	1a59      	subs	r1, r3, r1
 8000cee:	fa1f f38e 	uxth.w	r3, lr
 8000cf2:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cf6:	fb07 1110 	mls	r1, r7, r0, r1
 8000cfa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cfe:	fb00 f606 	mul.w	r6, r0, r6
 8000d02:	429e      	cmp	r6, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x94>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d0e:	f080 80fc 	bcs.w	8000f0a <__udivmoddi4+0x282>
 8000d12:	429e      	cmp	r6, r3
 8000d14:	f240 80f9 	bls.w	8000f0a <__udivmoddi4+0x282>
 8000d18:	4463      	add	r3, ip
 8000d1a:	3802      	subs	r0, #2
 8000d1c:	1b9b      	subs	r3, r3, r6
 8000d1e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d22:	2100      	movs	r1, #0
 8000d24:	b11d      	cbz	r5, 8000d2e <__udivmoddi4+0xa6>
 8000d26:	40d3      	lsrs	r3, r2
 8000d28:	2200      	movs	r2, #0
 8000d2a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d32:	428b      	cmp	r3, r1
 8000d34:	d905      	bls.n	8000d42 <__udivmoddi4+0xba>
 8000d36:	b10d      	cbz	r5, 8000d3c <__udivmoddi4+0xb4>
 8000d38:	e9c5 0100 	strd	r0, r1, [r5]
 8000d3c:	2100      	movs	r1, #0
 8000d3e:	4608      	mov	r0, r1
 8000d40:	e7f5      	b.n	8000d2e <__udivmoddi4+0xa6>
 8000d42:	fab3 f183 	clz	r1, r3
 8000d46:	2900      	cmp	r1, #0
 8000d48:	d146      	bne.n	8000dd8 <__udivmoddi4+0x150>
 8000d4a:	42a3      	cmp	r3, r4
 8000d4c:	d302      	bcc.n	8000d54 <__udivmoddi4+0xcc>
 8000d4e:	4290      	cmp	r0, r2
 8000d50:	f0c0 80f0 	bcc.w	8000f34 <__udivmoddi4+0x2ac>
 8000d54:	1a86      	subs	r6, r0, r2
 8000d56:	eb64 0303 	sbc.w	r3, r4, r3
 8000d5a:	2001      	movs	r0, #1
 8000d5c:	2d00      	cmp	r5, #0
 8000d5e:	d0e6      	beq.n	8000d2e <__udivmoddi4+0xa6>
 8000d60:	e9c5 6300 	strd	r6, r3, [r5]
 8000d64:	e7e3      	b.n	8000d2e <__udivmoddi4+0xa6>
 8000d66:	2a00      	cmp	r2, #0
 8000d68:	f040 8090 	bne.w	8000e8c <__udivmoddi4+0x204>
 8000d6c:	eba1 040c 	sub.w	r4, r1, ip
 8000d70:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d74:	fa1f f78c 	uxth.w	r7, ip
 8000d78:	2101      	movs	r1, #1
 8000d7a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d7e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d82:	fb08 4416 	mls	r4, r8, r6, r4
 8000d86:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d8a:	fb07 f006 	mul.w	r0, r7, r6
 8000d8e:	4298      	cmp	r0, r3
 8000d90:	d908      	bls.n	8000da4 <__udivmoddi4+0x11c>
 8000d92:	eb1c 0303 	adds.w	r3, ip, r3
 8000d96:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d9a:	d202      	bcs.n	8000da2 <__udivmoddi4+0x11a>
 8000d9c:	4298      	cmp	r0, r3
 8000d9e:	f200 80cd 	bhi.w	8000f3c <__udivmoddi4+0x2b4>
 8000da2:	4626      	mov	r6, r4
 8000da4:	1a1c      	subs	r4, r3, r0
 8000da6:	fa1f f38e 	uxth.w	r3, lr
 8000daa:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dae:	fb08 4410 	mls	r4, r8, r0, r4
 8000db2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000db6:	fb00 f707 	mul.w	r7, r0, r7
 8000dba:	429f      	cmp	r7, r3
 8000dbc:	d908      	bls.n	8000dd0 <__udivmoddi4+0x148>
 8000dbe:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000dc6:	d202      	bcs.n	8000dce <__udivmoddi4+0x146>
 8000dc8:	429f      	cmp	r7, r3
 8000dca:	f200 80b0 	bhi.w	8000f2e <__udivmoddi4+0x2a6>
 8000dce:	4620      	mov	r0, r4
 8000dd0:	1bdb      	subs	r3, r3, r7
 8000dd2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dd6:	e7a5      	b.n	8000d24 <__udivmoddi4+0x9c>
 8000dd8:	f1c1 0620 	rsb	r6, r1, #32
 8000ddc:	408b      	lsls	r3, r1
 8000dde:	fa22 f706 	lsr.w	r7, r2, r6
 8000de2:	431f      	orrs	r7, r3
 8000de4:	fa20 fc06 	lsr.w	ip, r0, r6
 8000de8:	fa04 f301 	lsl.w	r3, r4, r1
 8000dec:	ea43 030c 	orr.w	r3, r3, ip
 8000df0:	40f4      	lsrs	r4, r6
 8000df2:	fa00 f801 	lsl.w	r8, r0, r1
 8000df6:	0c38      	lsrs	r0, r7, #16
 8000df8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000dfc:	fbb4 fef0 	udiv	lr, r4, r0
 8000e00:	fa1f fc87 	uxth.w	ip, r7
 8000e04:	fb00 441e 	mls	r4, r0, lr, r4
 8000e08:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e0c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e10:	45a1      	cmp	r9, r4
 8000e12:	fa02 f201 	lsl.w	r2, r2, r1
 8000e16:	d90a      	bls.n	8000e2e <__udivmoddi4+0x1a6>
 8000e18:	193c      	adds	r4, r7, r4
 8000e1a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e1e:	f080 8084 	bcs.w	8000f2a <__udivmoddi4+0x2a2>
 8000e22:	45a1      	cmp	r9, r4
 8000e24:	f240 8081 	bls.w	8000f2a <__udivmoddi4+0x2a2>
 8000e28:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e2c:	443c      	add	r4, r7
 8000e2e:	eba4 0409 	sub.w	r4, r4, r9
 8000e32:	fa1f f983 	uxth.w	r9, r3
 8000e36:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e3a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e3e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e42:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e46:	45a4      	cmp	ip, r4
 8000e48:	d907      	bls.n	8000e5a <__udivmoddi4+0x1d2>
 8000e4a:	193c      	adds	r4, r7, r4
 8000e4c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e50:	d267      	bcs.n	8000f22 <__udivmoddi4+0x29a>
 8000e52:	45a4      	cmp	ip, r4
 8000e54:	d965      	bls.n	8000f22 <__udivmoddi4+0x29a>
 8000e56:	3b02      	subs	r3, #2
 8000e58:	443c      	add	r4, r7
 8000e5a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e5e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e62:	eba4 040c 	sub.w	r4, r4, ip
 8000e66:	429c      	cmp	r4, r3
 8000e68:	46ce      	mov	lr, r9
 8000e6a:	469c      	mov	ip, r3
 8000e6c:	d351      	bcc.n	8000f12 <__udivmoddi4+0x28a>
 8000e6e:	d04e      	beq.n	8000f0e <__udivmoddi4+0x286>
 8000e70:	b155      	cbz	r5, 8000e88 <__udivmoddi4+0x200>
 8000e72:	ebb8 030e 	subs.w	r3, r8, lr
 8000e76:	eb64 040c 	sbc.w	r4, r4, ip
 8000e7a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e7e:	40cb      	lsrs	r3, r1
 8000e80:	431e      	orrs	r6, r3
 8000e82:	40cc      	lsrs	r4, r1
 8000e84:	e9c5 6400 	strd	r6, r4, [r5]
 8000e88:	2100      	movs	r1, #0
 8000e8a:	e750      	b.n	8000d2e <__udivmoddi4+0xa6>
 8000e8c:	f1c2 0320 	rsb	r3, r2, #32
 8000e90:	fa20 f103 	lsr.w	r1, r0, r3
 8000e94:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e98:	fa24 f303 	lsr.w	r3, r4, r3
 8000e9c:	4094      	lsls	r4, r2
 8000e9e:	430c      	orrs	r4, r1
 8000ea0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ea4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ea8:	fa1f f78c 	uxth.w	r7, ip
 8000eac:	fbb3 f0f8 	udiv	r0, r3, r8
 8000eb0:	fb08 3110 	mls	r1, r8, r0, r3
 8000eb4:	0c23      	lsrs	r3, r4, #16
 8000eb6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eba:	fb00 f107 	mul.w	r1, r0, r7
 8000ebe:	4299      	cmp	r1, r3
 8000ec0:	d908      	bls.n	8000ed4 <__udivmoddi4+0x24c>
 8000ec2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ec6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000eca:	d22c      	bcs.n	8000f26 <__udivmoddi4+0x29e>
 8000ecc:	4299      	cmp	r1, r3
 8000ece:	d92a      	bls.n	8000f26 <__udivmoddi4+0x29e>
 8000ed0:	3802      	subs	r0, #2
 8000ed2:	4463      	add	r3, ip
 8000ed4:	1a5b      	subs	r3, r3, r1
 8000ed6:	b2a4      	uxth	r4, r4
 8000ed8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000edc:	fb08 3311 	mls	r3, r8, r1, r3
 8000ee0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ee4:	fb01 f307 	mul.w	r3, r1, r7
 8000ee8:	42a3      	cmp	r3, r4
 8000eea:	d908      	bls.n	8000efe <__udivmoddi4+0x276>
 8000eec:	eb1c 0404 	adds.w	r4, ip, r4
 8000ef0:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ef4:	d213      	bcs.n	8000f1e <__udivmoddi4+0x296>
 8000ef6:	42a3      	cmp	r3, r4
 8000ef8:	d911      	bls.n	8000f1e <__udivmoddi4+0x296>
 8000efa:	3902      	subs	r1, #2
 8000efc:	4464      	add	r4, ip
 8000efe:	1ae4      	subs	r4, r4, r3
 8000f00:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f04:	e739      	b.n	8000d7a <__udivmoddi4+0xf2>
 8000f06:	4604      	mov	r4, r0
 8000f08:	e6f0      	b.n	8000cec <__udivmoddi4+0x64>
 8000f0a:	4608      	mov	r0, r1
 8000f0c:	e706      	b.n	8000d1c <__udivmoddi4+0x94>
 8000f0e:	45c8      	cmp	r8, r9
 8000f10:	d2ae      	bcs.n	8000e70 <__udivmoddi4+0x1e8>
 8000f12:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f16:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f1a:	3801      	subs	r0, #1
 8000f1c:	e7a8      	b.n	8000e70 <__udivmoddi4+0x1e8>
 8000f1e:	4631      	mov	r1, r6
 8000f20:	e7ed      	b.n	8000efe <__udivmoddi4+0x276>
 8000f22:	4603      	mov	r3, r0
 8000f24:	e799      	b.n	8000e5a <__udivmoddi4+0x1d2>
 8000f26:	4630      	mov	r0, r6
 8000f28:	e7d4      	b.n	8000ed4 <__udivmoddi4+0x24c>
 8000f2a:	46d6      	mov	lr, sl
 8000f2c:	e77f      	b.n	8000e2e <__udivmoddi4+0x1a6>
 8000f2e:	4463      	add	r3, ip
 8000f30:	3802      	subs	r0, #2
 8000f32:	e74d      	b.n	8000dd0 <__udivmoddi4+0x148>
 8000f34:	4606      	mov	r6, r0
 8000f36:	4623      	mov	r3, r4
 8000f38:	4608      	mov	r0, r1
 8000f3a:	e70f      	b.n	8000d5c <__udivmoddi4+0xd4>
 8000f3c:	3e02      	subs	r6, #2
 8000f3e:	4463      	add	r3, ip
 8000f40:	e730      	b.n	8000da4 <__udivmoddi4+0x11c>
 8000f42:	bf00      	nop

08000f44 <__aeabi_idiv0>:
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop

08000f48 <computeChecksum>:
circular_buffer_handle rxcBuff; //rx and search buffer
uint8_t rxBuffer[IMU_BUFFER_LEN]; //memory buffer for rxBuff
uint8_t tmpBuff[IMU_BUFFER_LEN]; //temporary buffer where to store received packets

//function to compute message checksum
static uint8_t computeChecksum(imu_packet_struct * pckt){
 8000f48:	b480      	push	{r7}
 8000f4a:	b085      	sub	sp, #20
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
	if(pckt==NULL) return 0;
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d101      	bne.n	8000f5a <computeChecksum+0x12>
 8000f56:	2300      	movs	r3, #0
 8000f58:	e01e      	b.n	8000f98 <computeChecksum+0x50>

	uint8_t crc=IMU_BID+pckt->mid+pckt->len;
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	781a      	ldrb	r2, [r3, #0]
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	785b      	ldrb	r3, [r3, #1]
 8000f62:	4413      	add	r3, r2
 8000f64:	b2db      	uxtb	r3, r3
 8000f66:	3b01      	subs	r3, #1
 8000f68:	73fb      	strb	r3, [r7, #15]
	for(uint32_t d=0;d<pckt->len;d++){
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	60bb      	str	r3, [r7, #8]
 8000f6e:	e00a      	b.n	8000f86 <computeChecksum+0x3e>
		crc+=pckt->data[d];
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	685a      	ldr	r2, [r3, #4]
 8000f74:	68bb      	ldr	r3, [r7, #8]
 8000f76:	4413      	add	r3, r2
 8000f78:	781a      	ldrb	r2, [r3, #0]
 8000f7a:	7bfb      	ldrb	r3, [r7, #15]
 8000f7c:	4413      	add	r3, r2
 8000f7e:	73fb      	strb	r3, [r7, #15]
	for(uint32_t d=0;d<pckt->len;d++){
 8000f80:	68bb      	ldr	r3, [r7, #8]
 8000f82:	3301      	adds	r3, #1
 8000f84:	60bb      	str	r3, [r7, #8]
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	785b      	ldrb	r3, [r3, #1]
 8000f8a:	461a      	mov	r2, r3
 8000f8c:	68bb      	ldr	r3, [r7, #8]
 8000f8e:	4293      	cmp	r3, r2
 8000f90:	d3ee      	bcc.n	8000f70 <computeChecksum+0x28>
	}
	return -crc;
 8000f92:	7bfb      	ldrb	r3, [r7, #15]
 8000f94:	425b      	negs	r3, r3
 8000f96:	b2db      	uxtb	r3, r3
}
 8000f98:	4618      	mov	r0, r3
 8000f9a:	3714      	adds	r7, #20
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa2:	4770      	bx	lr

08000fa4 <sendMsg>:

//function to send message
static void sendMsg(UART_HandleTypeDef* IMUhandle, imu_packet_struct * pckt){
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b084      	sub	sp, #16
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
 8000fac:	6039      	str	r1, [r7, #0]
	if(pckt==NULL) return;
 8000fae:	683b      	ldr	r3, [r7, #0]
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d033      	beq.n	800101c <sendMsg+0x78>

	uint8_t tmp=IMU_PREAMBLE;
 8000fb4:	23fa      	movs	r3, #250	@ 0xfa
 8000fb6:	73fb      	strb	r3, [r7, #15]
	sendDriver_UART(IMUhandle, &tmp, 1);
 8000fb8:	f107 030f 	add.w	r3, r7, #15
 8000fbc:	2201      	movs	r2, #1
 8000fbe:	4619      	mov	r1, r3
 8000fc0:	6878      	ldr	r0, [r7, #4]
 8000fc2:	f000 fbc7 	bl	8001754 <sendDriver_UART>
	tmp=IMU_BID;
 8000fc6:	23ff      	movs	r3, #255	@ 0xff
 8000fc8:	73fb      	strb	r3, [r7, #15]
	sendDriver_UART(IMUhandle, &tmp, 1);
 8000fca:	f107 030f 	add.w	r3, r7, #15
 8000fce:	2201      	movs	r2, #1
 8000fd0:	4619      	mov	r1, r3
 8000fd2:	6878      	ldr	r0, [r7, #4]
 8000fd4:	f000 fbbe 	bl	8001754 <sendDriver_UART>
	sendDriver_UART(IMUhandle, &pckt->mid, 1);
 8000fd8:	683b      	ldr	r3, [r7, #0]
 8000fda:	2201      	movs	r2, #1
 8000fdc:	4619      	mov	r1, r3
 8000fde:	6878      	ldr	r0, [r7, #4]
 8000fe0:	f000 fbb8 	bl	8001754 <sendDriver_UART>
	sendDriver_UART(IMUhandle, &pckt->len, 1);
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	3301      	adds	r3, #1
 8000fe8:	2201      	movs	r2, #1
 8000fea:	4619      	mov	r1, r3
 8000fec:	6878      	ldr	r0, [r7, #4]
 8000fee:	f000 fbb1 	bl	8001754 <sendDriver_UART>
	sendDriver_UART(IMUhandle, pckt->data, pckt->len);
 8000ff2:	683b      	ldr	r3, [r7, #0]
 8000ff4:	6859      	ldr	r1, [r3, #4]
 8000ff6:	683b      	ldr	r3, [r7, #0]
 8000ff8:	785b      	ldrb	r3, [r3, #1]
 8000ffa:	461a      	mov	r2, r3
 8000ffc:	6878      	ldr	r0, [r7, #4]
 8000ffe:	f000 fba9 	bl	8001754 <sendDriver_UART>
	tmp=computeChecksum(pckt);
 8001002:	6838      	ldr	r0, [r7, #0]
 8001004:	f7ff ffa0 	bl	8000f48 <computeChecksum>
 8001008:	4603      	mov	r3, r0
 800100a:	73fb      	strb	r3, [r7, #15]
	sendDriver_UART(IMUhandle, &tmp, 1);
 800100c:	f107 030f 	add.w	r3, r7, #15
 8001010:	2201      	movs	r2, #1
 8001012:	4619      	mov	r1, r3
 8001014:	6878      	ldr	r0, [r7, #4]
 8001016:	f000 fb9d 	bl	8001754 <sendDriver_UART>
 800101a:	e000      	b.n	800101e <sendMsg+0x7a>
	if(pckt==NULL) return;
 800101c:	bf00      	nop
}
 800101e:	3710      	adds	r7, #16
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}

08001024 <receiveMsg>:
//NB. not checking crc is risky for many reasons but one of the worst is that
//len field could arrive corrupted so always check that len is the expected one
//format can be passed if a specific mid and len are required, otherwise can be left to NULL
//the buffer is automatically shifted out and filled at every call, user can eventually
//flush buffers before calling to get most recent messages
static uint8_t receiveMsg(UART_HandleTypeDef* IMUhandle, imu_packet_struct * pckt, imu_packet_struct* format, uint8_t checkCRC, uint32_t timeout){
 8001024:	b590      	push	{r4, r7, lr}
 8001026:	b099      	sub	sp, #100	@ 0x64
 8001028:	af02      	add	r7, sp, #8
 800102a:	60f8      	str	r0, [r7, #12]
 800102c:	60b9      	str	r1, [r7, #8]
 800102e:	607a      	str	r2, [r7, #4]
 8001030:	70fb      	strb	r3, [r7, #3]
	uint32_t startTick=HAL_GetTick();
 8001032:	f005 f95b 	bl	80062ec <HAL_GetTick>
 8001036:	6538      	str	r0, [r7, #80]	@ 0x50
	uint8_t len=0; //temporary variable to store target number of bytes to search
 8001038:	2300      	movs	r3, #0
 800103a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	uint8_t mid=0; //temporary variable to store message id
 800103e:	2300      	movs	r3, #0
 8001040:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56
	typedef enum{
		_header,
		_packet
	} search_phase;

	search_phase phase=_header;
 8001044:	2300      	movs	r3, #0
 8001046:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55

	uint8_t headTail[4]={IMU_PREAMBLE,IMU_BID,0,0};
 800104a:	f64f 73fa 	movw	r3, #65530	@ 0xfffa
 800104e:	64fb      	str	r3, [r7, #76]	@ 0x4c

	search_frame_rule rule;

	rule.head=(uint8_t *) headTail;
 8001050:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001054:	633b      	str	r3, [r7, #48]	@ 0x30
	rule.tail=NULL;
 8001056:	2300      	movs	r3, #0
 8001058:	63bb      	str	r3, [r7, #56]	@ 0x38
	rule.tailLen=0;
 800105a:	2300      	movs	r3, #0
 800105c:	63fb      	str	r3, [r7, #60]	@ 0x3c
	rule.maxLen=0;
 800105e:	2300      	movs	r3, #0
 8001060:	647b      	str	r3, [r7, #68]	@ 0x44
	rule.policy=soft;
 8001062:	2302      	movs	r3, #2
 8001064:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48

	circular_buffer_handle foundPckt;
	imu_packet_struct tmpPckt;
	tmpPckt.data=tmpBuff;
 8001068:	4b5c      	ldr	r3, [pc, #368]	@ (80011dc <receiveMsg+0x1b8>)
 800106a:	61fb      	str	r3, [r7, #28]

	do{
		//filling buffer until is full or no more bytes available
		while(!cBuffFull(&rxcBuff)){ //fill buffer with new packets
 800106c:	e010      	b.n	8001090 <receiveMsg+0x6c>
			uint8_t c;
			if(receiveDriver_UART(IMUhandle, &c, 1)){
 800106e:	f107 0317 	add.w	r3, r7, #23
 8001072:	2201      	movs	r2, #1
 8001074:	4619      	mov	r1, r3
 8001076:	68f8      	ldr	r0, [r7, #12]
 8001078:	f000 fb1a 	bl	80016b0 <receiveDriver_UART>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	d00d      	beq.n	800109e <receiveMsg+0x7a>
				cBuffPush(&rxcBuff, &c, 1,1);
 8001082:	f107 0117 	add.w	r1, r7, #23
 8001086:	2301      	movs	r3, #1
 8001088:	2201      	movs	r2, #1
 800108a:	4855      	ldr	r0, [pc, #340]	@ (80011e0 <receiveMsg+0x1bc>)
 800108c:	f001 fa5f 	bl	800254e <cBuffPush>
		while(!cBuffFull(&rxcBuff)){ //fill buffer with new packets
 8001090:	4853      	ldr	r0, [pc, #332]	@ (80011e0 <receiveMsg+0x1bc>)
 8001092:	f001 fd50 	bl	8002b36 <cBuffFull>
 8001096:	4603      	mov	r3, r0
 8001098:	2b00      	cmp	r3, #0
 800109a:	d0e8      	beq.n	800106e <receiveMsg+0x4a>
 800109c:	e000      	b.n	80010a0 <receiveMsg+0x7c>
			}else{
				break;
 800109e:	bf00      	nop
			}
		}

		//analyzing buffer
		if(phase==_header){ //if we are searching an header
 80010a0:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d129      	bne.n	80010fc <receiveMsg+0xd8>

			if(format!=NULL){	//if format specified
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d00b      	beq.n	80010c6 <receiveMsg+0xa2>
				mid=format->mid;
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	781b      	ldrb	r3, [r3, #0]
 80010b2:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56
				len=format->len;
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	785b      	ldrb	r3, [r3, #1]
 80010ba:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
				phase=_packet;
 80010be:	2301      	movs	r3, #1
 80010c0:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
				continue;	//jump to packet search
 80010c4:	e07b      	b.n	80011be <receiveMsg+0x19a>
			}

			//search a complete xbus header (shiftOut disabled)
			rule.headLen=2;
 80010c6:	2302      	movs	r3, #2
 80010c8:	637b      	str	r3, [r7, #52]	@ 0x34
			rule.minLen=2;
 80010ca:	2302      	movs	r3, #2
 80010cc:	643b      	str	r3, [r7, #64]	@ 0x40
			if(searchFrameAdvance(&rxcBuff, &foundPckt, &rule, SHIFTOUT_FULL | SHIFTOUT_CURR | SHIFTOUT_FAST)){	//if we found a header, get MID and LEN fields
 80010ce:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 80010d2:	f107 0120 	add.w	r1, r7, #32
 80010d6:	2313      	movs	r3, #19
 80010d8:	4841      	ldr	r0, [pc, #260]	@ (80011e0 <receiveMsg+0x1bc>)
 80010da:	f002 f82c 	bl	8003136 <searchFrameAdvance>
 80010de:	4603      	mov	r3, r0
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d06c      	beq.n	80011be <receiveMsg+0x19a>
				mid=foundPckt.buff[2];
 80010e4:	6a3b      	ldr	r3, [r7, #32]
 80010e6:	789b      	ldrb	r3, [r3, #2]
 80010e8:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56
				len=foundPckt.buff[3];
 80010ec:	6a3b      	ldr	r3, [r7, #32]
 80010ee:	78db      	ldrb	r3, [r3, #3]
 80010f0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
				phase=_packet;
 80010f4:	2301      	movs	r3, #1
 80010f6:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
 80010fa:	e060      	b.n	80011be <receiveMsg+0x19a>
			}
		}else if(phase==_packet){
 80010fc:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8001100:	2b01      	cmp	r3, #1
 8001102:	d159      	bne.n	80011b8 <receiveMsg+0x194>
			headTail[2]=mid;
 8001104:	f897 3056 	ldrb.w	r3, [r7, #86]	@ 0x56
 8001108:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
			headTail[3]=len;
 800110c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8001110:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
			rule.headLen=4;
 8001114:	2304      	movs	r3, #4
 8001116:	637b      	str	r3, [r7, #52]	@ 0x34
			rule.minLen=len+1;	//len+1 to house CRC
 8001118:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800111c:	3301      	adds	r3, #1
 800111e:	643b      	str	r3, [r7, #64]	@ 0x40

			//search for the complete packet with shiftOut active
			if(searchFrameAdvance(&rxcBuff, &foundPckt, &rule, SHIFTOUT_FULL | SHIFTOUT_NEXT | SHIFTOUT_FAST)){
 8001120:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8001124:	f107 0120 	add.w	r1, r7, #32
 8001128:	2315      	movs	r3, #21
 800112a:	482d      	ldr	r0, [pc, #180]	@ (80011e0 <receiveMsg+0x1bc>)
 800112c:	f002 f803 	bl	8003136 <searchFrameAdvance>
 8001130:	4603      	mov	r3, r0
 8001132:	2b00      	cmp	r3, #0
 8001134:	d043      	beq.n	80011be <receiveMsg+0x19a>
#if enable_printf
				printf("RAW IMU FRAME:\n");
#endif
				//cBuffPrint(&foundPckt,PRINTBUFF_HEX | PRINTBUFF_NOEMPTY);

				tmpPckt.mid=mid;
 8001136:	f897 3056 	ldrb.w	r3, [r7, #86]	@ 0x56
 800113a:	763b      	strb	r3, [r7, #24]
				tmpPckt.len=len;
 800113c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8001140:	767b      	strb	r3, [r7, #25]
				if(len!=0) cBuffRead(&foundPckt,tmpPckt.data,foundPckt.elemNum,0,4);
 8001142:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8001146:	2b00      	cmp	r3, #0
 8001148:	d008      	beq.n	800115c <receiveMsg+0x138>
 800114a:	69f9      	ldr	r1, [r7, #28]
 800114c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800114e:	f107 0020 	add.w	r0, r7, #32
 8001152:	2304      	movs	r3, #4
 8001154:	9300      	str	r3, [sp, #0]
 8001156:	2300      	movs	r3, #0
 8001158:	f001 fad3 	bl	8002702 <cBuffRead>

				if(pckt!=NULL){ //if we want the packet to be output
 800115c:	68bb      	ldr	r3, [r7, #8]
 800115e:	2b00      	cmp	r3, #0
 8001160:	d00e      	beq.n	8001180 <receiveMsg+0x15c>
					pckt->mid=mid;
 8001162:	68bb      	ldr	r3, [r7, #8]
 8001164:	f897 2056 	ldrb.w	r2, [r7, #86]	@ 0x56
 8001168:	701a      	strb	r2, [r3, #0]
					pckt->len=len;
 800116a:	68bb      	ldr	r3, [r7, #8]
 800116c:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8001170:	705a      	strb	r2, [r3, #1]
					if(len!=0) pckt->data=tmpPckt.data;
 8001172:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8001176:	2b00      	cmp	r3, #0
 8001178:	d002      	beq.n	8001180 <receiveMsg+0x15c>
 800117a:	69fa      	ldr	r2, [r7, #28]
 800117c:	68bb      	ldr	r3, [r7, #8]
 800117e:	605a      	str	r2, [r3, #4]
				}

				//if crc must be checked
				if(checkCRC){
 8001180:	78fb      	ldrb	r3, [r7, #3]
 8001182:	2b00      	cmp	r3, #0
 8001184:	d016      	beq.n	80011b4 <receiveMsg+0x190>
					if(cBuffReadByte(&foundPckt,1,0)==computeChecksum(&tmpPckt)){	//if correct crc
 8001186:	f107 0320 	add.w	r3, r7, #32
 800118a:	2200      	movs	r2, #0
 800118c:	2101      	movs	r1, #1
 800118e:	4618      	mov	r0, r3
 8001190:	f001 fc88 	bl	8002aa4 <cBuffReadByte>
 8001194:	4603      	mov	r3, r0
 8001196:	461c      	mov	r4, r3
 8001198:	f107 0318 	add.w	r3, r7, #24
 800119c:	4618      	mov	r0, r3
 800119e:	f7ff fed3 	bl	8000f48 <computeChecksum>
 80011a2:	4603      	mov	r3, r0
 80011a4:	429c      	cmp	r4, r3
 80011a6:	d101      	bne.n	80011ac <receiveMsg+0x188>
						return 1;
 80011a8:	2301      	movs	r3, #1
 80011aa:	e012      	b.n	80011d2 <receiveMsg+0x1ae>
					}else phase=_header;	//continue search from next byte
 80011ac:	2300      	movs	r3, #0
 80011ae:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
 80011b2:	e004      	b.n	80011be <receiveMsg+0x19a>
				}else return 1;
 80011b4:	2301      	movs	r3, #1
 80011b6:	e00c      	b.n	80011d2 <receiveMsg+0x1ae>
#if enable_printf
				printf("Checksum verification failed!\n");
#endif
			}
		}else{
			phase=_header;	//in case of any state error, return to default state
 80011b8:	2300      	movs	r3, #0
 80011ba:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
		}

	}while((HAL_GetTick()-startTick) < timeout);
 80011be:	f005 f895 	bl	80062ec <HAL_GetTick>
 80011c2:	4602      	mov	r2, r0
 80011c4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80011c6:	1ad3      	subs	r3, r2, r3
 80011c8:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80011ca:	429a      	cmp	r2, r3
 80011cc:	f63f af60 	bhi.w	8001090 <receiveMsg+0x6c>

	return 0;
 80011d0:	2300      	movs	r3, #0
}
 80011d2:	4618      	mov	r0, r3
 80011d4:	375c      	adds	r7, #92	@ 0x5c
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd90      	pop	{r4, r7, pc}
 80011da:	bf00      	nop
 80011dc:	20000290 	.word	0x20000290
 80011e0:	2000021c 	.word	0x2000021c

080011e4 <imuAckTransaction>:

//function to send command to imu and wait for the right acknowledge
//the ack should be the next received or the transaction is considered failed
//returns 1 if ack received, 0 otherwise
static uint8_t imuAckTransaction(UART_HandleTypeDef* IMUhandle, imu_packet_struct * cmd, imu_packet_struct * ack, uint32_t timeout){
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b086      	sub	sp, #24
 80011e8:	af02      	add	r7, sp, #8
 80011ea:	60f8      	str	r0, [r7, #12]
 80011ec:	60b9      	str	r1, [r7, #8]
 80011ee:	607a      	str	r2, [r7, #4]
 80011f0:	603b      	str	r3, [r7, #0]
	if(cmd==NULL || ack==NULL) return 0;
 80011f2:	68bb      	ldr	r3, [r7, #8]
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d002      	beq.n	80011fe <imuAckTransaction+0x1a>
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d101      	bne.n	8001202 <imuAckTransaction+0x1e>
 80011fe:	2300      	movs	r3, #0
 8001200:	e014      	b.n	800122c <imuAckTransaction+0x48>

	cBuffFlush(&rxcBuff); //flush circular buffer
 8001202:	480c      	ldr	r0, [pc, #48]	@ (8001234 <imuAckTransaction+0x50>)
 8001204:	f001 fc86 	bl	8002b14 <cBuffFlush>

	sendMsg(IMUhandle, cmd);
 8001208:	68b9      	ldr	r1, [r7, #8]
 800120a:	68f8      	ldr	r0, [r7, #12]
 800120c:	f7ff feca 	bl	8000fa4 <sendMsg>

    if(receiveMsg(IMUhandle, NULL, ack, 1, timeout)){
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	9300      	str	r3, [sp, #0]
 8001214:	2301      	movs	r3, #1
 8001216:	687a      	ldr	r2, [r7, #4]
 8001218:	2100      	movs	r1, #0
 800121a:	68f8      	ldr	r0, [r7, #12]
 800121c:	f7ff ff02 	bl	8001024 <receiveMsg>
 8001220:	4603      	mov	r3, r0
 8001222:	2b00      	cmp	r3, #0
 8001224:	d001      	beq.n	800122a <imuAckTransaction+0x46>
    	return 1;
 8001226:	2301      	movs	r3, #1
 8001228:	e000      	b.n	800122c <imuAckTransaction+0x48>
    }else{
    	return 0;
 800122a:	2300      	movs	r3, #0
    }

}
 800122c:	4618      	mov	r0, r3
 800122e:	3710      	adds	r7, #16
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}
 8001234:	2000021c 	.word	0x2000021c

08001238 <initIMUConfig>:

uint8_t initIMUConfig(UART_HandleTypeDef* IMUhandle){
 8001238:	b580      	push	{r7, lr}
 800123a:	b08a      	sub	sp, #40	@ 0x28
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
	//initializing circular buffer
	cBuffInit(&rxcBuff, rxBuffer, sizeof(rxBuffer),0);
 8001240:	2300      	movs	r3, #0
 8001242:	2264      	movs	r2, #100	@ 0x64
 8001244:	493d      	ldr	r1, [pc, #244]	@ (800133c <initIMUConfig+0x104>)
 8001246:	483e      	ldr	r0, [pc, #248]	@ (8001340 <initIMUConfig+0x108>)
 8001248:	f001 f902 	bl	8002450 <cBuffInit>

    HAL_Delay(500);
 800124c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001250:	f005 f858 	bl	8006304 <HAL_Delay>

    flushRXDriver_UART(IMUhandle);
 8001254:	6878      	ldr	r0, [r7, #4]
 8001256:	f000 fb2f 	bl	80018b8 <flushRXDriver_UART>

    imu_packet_struct cmd;
    imu_packet_struct ack;

    cmd.len=0;
 800125a:	2300      	movs	r3, #0
 800125c:	757b      	strb	r3, [r7, #21]
    ack.len=0;
 800125e:	2300      	movs	r3, #0
 8001260:	737b      	strb	r3, [r7, #13]

    //going to config mode
    cmd.mid=IMU_GOTO_CONFIG_MID;
 8001262:	2330      	movs	r3, #48	@ 0x30
 8001264:	753b      	strb	r3, [r7, #20]
    ack.mid=IMU_GOTO_CONFIG_ACK_MID;
 8001266:	2331      	movs	r3, #49	@ 0x31
 8001268:	733b      	strb	r3, [r7, #12]
    for(uint32_t retry=0;retry<IMU_CONFIG_RETRY;retry++){
 800126a:	2300      	movs	r3, #0
 800126c:	627b      	str	r3, [r7, #36]	@ 0x24
 800126e:	e012      	b.n	8001296 <initIMUConfig+0x5e>
    	if(imuAckTransaction(IMUhandle,&cmd,&ack,IMU_ACK_DELAY)) break;
 8001270:	f107 020c 	add.w	r2, r7, #12
 8001274:	f107 0114 	add.w	r1, r7, #20
 8001278:	2364      	movs	r3, #100	@ 0x64
 800127a:	6878      	ldr	r0, [r7, #4]
 800127c:	f7ff ffb2 	bl	80011e4 <imuAckTransaction>
 8001280:	4603      	mov	r3, r0
 8001282:	2b00      	cmp	r3, #0
 8001284:	d10b      	bne.n	800129e <initIMUConfig+0x66>
    	else if(retry==(IMU_CONFIG_RETRY-1)) return 0;
 8001286:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001288:	2b01      	cmp	r3, #1
 800128a:	d101      	bne.n	8001290 <initIMUConfig+0x58>
 800128c:	2300      	movs	r3, #0
 800128e:	e050      	b.n	8001332 <initIMUConfig+0xfa>
    for(uint32_t retry=0;retry<IMU_CONFIG_RETRY;retry++){
 8001290:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001292:	3301      	adds	r3, #1
 8001294:	627b      	str	r3, [r7, #36]	@ 0x24
 8001296:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001298:	2b01      	cmp	r3, #1
 800129a:	d9e9      	bls.n	8001270 <initIMUConfig+0x38>
 800129c:	e000      	b.n	80012a0 <initIMUConfig+0x68>
    	if(imuAckTransaction(IMUhandle,&cmd,&ack,IMU_ACK_DELAY)) break;
 800129e:	bf00      	nop
    }

    //set output config
    cmd.mid=IMU_SET_OCONFIG_MID;
 80012a0:	23c0      	movs	r3, #192	@ 0xc0
 80012a2:	753b      	strb	r3, [r7, #20]
    cmd.len=IMU_SET_OCONFIG_LEN;
 80012a4:	230c      	movs	r3, #12
 80012a6:	757b      	strb	r3, [r7, #21]
    cmd.data=(uint8_t *)outputConfigData;
 80012a8:	4b26      	ldr	r3, [pc, #152]	@ (8001344 <initIMUConfig+0x10c>)
 80012aa:	61bb      	str	r3, [r7, #24]
	ack.mid=IMU_SET_OCONFIG_ACK_MID;
 80012ac:	23c1      	movs	r3, #193	@ 0xc1
 80012ae:	733b      	strb	r3, [r7, #12]
	ack.len=IMU_SET_OCONFIG_ACK_LEN;
 80012b0:	230c      	movs	r3, #12
 80012b2:	737b      	strb	r3, [r7, #13]
	for(uint32_t retry=0;retry<IMU_CONFIG_RETRY;retry++){
 80012b4:	2300      	movs	r3, #0
 80012b6:	623b      	str	r3, [r7, #32]
 80012b8:	e012      	b.n	80012e0 <initIMUConfig+0xa8>
		if(imuAckTransaction(IMUhandle,&cmd,&ack,IMU_ACK_DELAY)) break;
 80012ba:	f107 020c 	add.w	r2, r7, #12
 80012be:	f107 0114 	add.w	r1, r7, #20
 80012c2:	2364      	movs	r3, #100	@ 0x64
 80012c4:	6878      	ldr	r0, [r7, #4]
 80012c6:	f7ff ff8d 	bl	80011e4 <imuAckTransaction>
 80012ca:	4603      	mov	r3, r0
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d10b      	bne.n	80012e8 <initIMUConfig+0xb0>
		else if(retry==(IMU_CONFIG_RETRY-1)) return 0;
 80012d0:	6a3b      	ldr	r3, [r7, #32]
 80012d2:	2b01      	cmp	r3, #1
 80012d4:	d101      	bne.n	80012da <initIMUConfig+0xa2>
 80012d6:	2300      	movs	r3, #0
 80012d8:	e02b      	b.n	8001332 <initIMUConfig+0xfa>
	for(uint32_t retry=0;retry<IMU_CONFIG_RETRY;retry++){
 80012da:	6a3b      	ldr	r3, [r7, #32]
 80012dc:	3301      	adds	r3, #1
 80012de:	623b      	str	r3, [r7, #32]
 80012e0:	6a3b      	ldr	r3, [r7, #32]
 80012e2:	2b01      	cmp	r3, #1
 80012e4:	d9e9      	bls.n	80012ba <initIMUConfig+0x82>
 80012e6:	e000      	b.n	80012ea <initIMUConfig+0xb2>
		if(imuAckTransaction(IMUhandle,&cmd,&ack,IMU_ACK_DELAY)) break;
 80012e8:	bf00      	nop
	}

    //go to measurement state
    cmd.mid=IMU_GOTO_MEAS_MID;
 80012ea:	2310      	movs	r3, #16
 80012ec:	753b      	strb	r3, [r7, #20]
    cmd.len=0;
 80012ee:	2300      	movs	r3, #0
 80012f0:	757b      	strb	r3, [r7, #21]
	ack.mid=IMU_GOTO_MEAS_ACK_MID;
 80012f2:	2311      	movs	r3, #17
 80012f4:	733b      	strb	r3, [r7, #12]
	ack.len=0;
 80012f6:	2300      	movs	r3, #0
 80012f8:	737b      	strb	r3, [r7, #13]
	for(uint32_t retry=0;retry<IMU_CONFIG_RETRY;retry++){
 80012fa:	2300      	movs	r3, #0
 80012fc:	61fb      	str	r3, [r7, #28]
 80012fe:	e012      	b.n	8001326 <initIMUConfig+0xee>
		if(imuAckTransaction(IMUhandle,&cmd,&ack,IMU_ACK_DELAY)) break;
 8001300:	f107 020c 	add.w	r2, r7, #12
 8001304:	f107 0114 	add.w	r1, r7, #20
 8001308:	2364      	movs	r3, #100	@ 0x64
 800130a:	6878      	ldr	r0, [r7, #4]
 800130c:	f7ff ff6a 	bl	80011e4 <imuAckTransaction>
 8001310:	4603      	mov	r3, r0
 8001312:	2b00      	cmp	r3, #0
 8001314:	d10b      	bne.n	800132e <initIMUConfig+0xf6>
		else if(retry==(IMU_CONFIG_RETRY-1)) return 0;
 8001316:	69fb      	ldr	r3, [r7, #28]
 8001318:	2b01      	cmp	r3, #1
 800131a:	d101      	bne.n	8001320 <initIMUConfig+0xe8>
 800131c:	2300      	movs	r3, #0
 800131e:	e008      	b.n	8001332 <initIMUConfig+0xfa>
	for(uint32_t retry=0;retry<IMU_CONFIG_RETRY;retry++){
 8001320:	69fb      	ldr	r3, [r7, #28]
 8001322:	3301      	adds	r3, #1
 8001324:	61fb      	str	r3, [r7, #28]
 8001326:	69fb      	ldr	r3, [r7, #28]
 8001328:	2b01      	cmp	r3, #1
 800132a:	d9e9      	bls.n	8001300 <initIMUConfig+0xc8>
 800132c:	e000      	b.n	8001330 <initIMUConfig+0xf8>
		if(imuAckTransaction(IMUhandle,&cmd,&ack,IMU_ACK_DELAY)) break;
 800132e:	bf00      	nop
	}

	return 1;
 8001330:	2301      	movs	r3, #1
}
 8001332:	4618      	mov	r0, r3
 8001334:	3728      	adds	r7, #40	@ 0x28
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}
 800133a:	bf00      	nop
 800133c:	2000022c 	.word	0x2000022c
 8001340:	2000021c 	.word	0x2000021c
 8001344:	080127e4 	.word	0x080127e4

08001348 <writeIMUDataArray>:
}

/* Extract fields from IMU data field and converts it into host order before placing it inside data array*/
// frame is data field buffer, data is output data array, dataSize is number of data fields
void writeIMUDataArray(uint8_t* frame, uint32_t* data, uint32_t dataSize)
{
 8001348:	b480      	push	{r7}
 800134a:	b089      	sub	sp, #36	@ 0x24
 800134c:	af00      	add	r7, sp, #0
 800134e:	60f8      	str	r0, [r7, #12]
 8001350:	60b9      	str	r1, [r7, #8]
 8001352:	607a      	str	r2, [r7, #4]
	for(uint32_t d=0;d<dataSize;d++){
 8001354:	2300      	movs	r3, #0
 8001356:	61fb      	str	r3, [r7, #28]
 8001358:	e024      	b.n	80013a4 <writeIMUDataArray+0x5c>
		uint32_t raw=0;
 800135a:	2300      	movs	r3, #0
 800135c:	61bb      	str	r3, [r7, #24]
		for(uint32_t byte=0;byte<4;byte++){
 800135e:	2300      	movs	r3, #0
 8001360:	617b      	str	r3, [r7, #20]
 8001362:	e013      	b.n	800138c <writeIMUDataArray+0x44>
			raw|=((uint32_t)frame[d*4+byte])<<(8*(3-byte));
 8001364:	69fb      	ldr	r3, [r7, #28]
 8001366:	009a      	lsls	r2, r3, #2
 8001368:	697b      	ldr	r3, [r7, #20]
 800136a:	4413      	add	r3, r2
 800136c:	68fa      	ldr	r2, [r7, #12]
 800136e:	4413      	add	r3, r2
 8001370:	781b      	ldrb	r3, [r3, #0]
 8001372:	461a      	mov	r2, r3
 8001374:	697b      	ldr	r3, [r7, #20]
 8001376:	f1c3 0303 	rsb	r3, r3, #3
 800137a:	00db      	lsls	r3, r3, #3
 800137c:	fa02 f303 	lsl.w	r3, r2, r3
 8001380:	69ba      	ldr	r2, [r7, #24]
 8001382:	4313      	orrs	r3, r2
 8001384:	61bb      	str	r3, [r7, #24]
		for(uint32_t byte=0;byte<4;byte++){
 8001386:	697b      	ldr	r3, [r7, #20]
 8001388:	3301      	adds	r3, #1
 800138a:	617b      	str	r3, [r7, #20]
 800138c:	697b      	ldr	r3, [r7, #20]
 800138e:	2b03      	cmp	r3, #3
 8001390:	d9e8      	bls.n	8001364 <writeIMUDataArray+0x1c>
		}
		data[d]=raw;
 8001392:	69fb      	ldr	r3, [r7, #28]
 8001394:	009b      	lsls	r3, r3, #2
 8001396:	68ba      	ldr	r2, [r7, #8]
 8001398:	4413      	add	r3, r2
 800139a:	69ba      	ldr	r2, [r7, #24]
 800139c:	601a      	str	r2, [r3, #0]
	for(uint32_t d=0;d<dataSize;d++){
 800139e:	69fb      	ldr	r3, [r7, #28]
 80013a0:	3301      	adds	r3, #1
 80013a2:	61fb      	str	r3, [r7, #28]
 80013a4:	69fa      	ldr	r2, [r7, #28]
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	429a      	cmp	r2, r3
 80013aa:	d3d6      	bcc.n	800135a <writeIMUDataArray+0x12>
	}
	return;
 80013ac:	bf00      	nop
}
 80013ae:	3724      	adds	r7, #36	@ 0x24
 80013b0:	46bd      	mov	sp, r7
 80013b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b6:	4770      	bx	lr

080013b8 <readIMUPacket>:

uint8_t readIMUPacket(UART_HandleTypeDef* IMUhandle, float gyroscope[3], float magnetometer[3], float accelerometer[3] ,uint32_t timeout)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b08a      	sub	sp, #40	@ 0x28
 80013bc:	af02      	add	r7, sp, #8
 80013be:	60f8      	str	r0, [r7, #12]
 80013c0:	60b9      	str	r1, [r7, #8]
 80013c2:	607a      	str	r2, [r7, #4]
 80013c4:	603b      	str	r3, [r7, #0]
	//flush driver rx buffer
	cBuffFlush(&rxcBuff); //flushing local buffer
 80013c6:	481a      	ldr	r0, [pc, #104]	@ (8001430 <readIMUPacket+0x78>)
 80013c8:	f001 fba4 	bl	8002b14 <cBuffFlush>

	imu_packet_struct format={
 80013cc:	f107 0318 	add.w	r3, r7, #24
 80013d0:	2200      	movs	r2, #0
 80013d2:	601a      	str	r2, [r3, #0]
 80013d4:	605a      	str	r2, [r3, #4]
 80013d6:	2336      	movs	r3, #54	@ 0x36
 80013d8:	763b      	strb	r3, [r7, #24]
 80013da:	232d      	movs	r3, #45	@ 0x2d
 80013dc:	767b      	strb	r3, [r7, #25]
		.len=IMU_DATA_PACKET_LEN,
	};

	imu_packet_struct meas;

	if(receiveMsg(IMUhandle,&meas, &format, 1, timeout)){
 80013de:	f107 0218 	add.w	r2, r7, #24
 80013e2:	f107 0110 	add.w	r1, r7, #16
 80013e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80013e8:	9300      	str	r3, [sp, #0]
 80013ea:	2301      	movs	r3, #1
 80013ec:	68f8      	ldr	r0, [r7, #12]
 80013ee:	f7ff fe19 	bl	8001024 <receiveMsg>
 80013f2:	4603      	mov	r3, r0
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d016      	beq.n	8001426 <readIMUPacket+0x6e>
		//found packet

		//writing acc data
		writeIMUDataArray(&meas.data[IMU_DATA_ACC_INDEX], (uint32_t*)accelerometer, 3);
 80013f8:	697b      	ldr	r3, [r7, #20]
 80013fa:	3321      	adds	r3, #33	@ 0x21
 80013fc:	2203      	movs	r2, #3
 80013fe:	6839      	ldr	r1, [r7, #0]
 8001400:	4618      	mov	r0, r3
 8001402:	f7ff ffa1 	bl	8001348 <writeIMUDataArray>
		//writing gyro data
		writeIMUDataArray(&meas.data[IMU_DATA_GYRO_INDEX], (uint32_t*)gyroscope, 3);
 8001406:	697b      	ldr	r3, [r7, #20]
 8001408:	3303      	adds	r3, #3
 800140a:	2203      	movs	r2, #3
 800140c:	68b9      	ldr	r1, [r7, #8]
 800140e:	4618      	mov	r0, r3
 8001410:	f7ff ff9a 	bl	8001348 <writeIMUDataArray>
		//writing mag data
		writeIMUDataArray(&meas.data[IMU_DATA_MAG_INDEX], (uint32_t*)magnetometer, 3);
 8001414:	697b      	ldr	r3, [r7, #20]
 8001416:	3312      	adds	r3, #18
 8001418:	2203      	movs	r2, #3
 800141a:	6879      	ldr	r1, [r7, #4]
 800141c:	4618      	mov	r0, r3
 800141e:	f7ff ff93 	bl	8001348 <writeIMUDataArray>

		return 1;
 8001422:	2301      	movs	r3, #1
 8001424:	e000      	b.n	8001428 <readIMUPacket+0x70>
	}

	return 0;
 8001426:	2300      	movs	r3, #0
}
 8001428:	4618      	mov	r0, r3
 800142a:	3720      	adds	r7, #32
 800142c:	46bd      	mov	sp, r7
 800142e:	bd80      	pop	{r7, pc}
 8001430:	2000021c 	.word	0x2000021c

08001434 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001434:	b480      	push	{r7}
 8001436:	b083      	sub	sp, #12
 8001438:	af00      	add	r7, sp, #0
 800143a:	4603      	mov	r3, r0
 800143c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800143e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001442:	2b00      	cmp	r3, #0
 8001444:	db0b      	blt.n	800145e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001446:	79fb      	ldrb	r3, [r7, #7]
 8001448:	f003 021f 	and.w	r2, r3, #31
 800144c:	4907      	ldr	r1, [pc, #28]	@ (800146c <__NVIC_EnableIRQ+0x38>)
 800144e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001452:	095b      	lsrs	r3, r3, #5
 8001454:	2001      	movs	r0, #1
 8001456:	fa00 f202 	lsl.w	r2, r0, r2
 800145a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800145e:	bf00      	nop
 8001460:	370c      	adds	r7, #12
 8001462:	46bd      	mov	sp, r7
 8001464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001468:	4770      	bx	lr
 800146a:	bf00      	nop
 800146c:	e000e100 	.word	0xe000e100

08001470 <__NVIC_GetEnableIRQ>:
  \return             0  Interrupt is not enabled.
  \return             1  Interrupt is enabled.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE uint32_t __NVIC_GetEnableIRQ(IRQn_Type IRQn)
{
 8001470:	b480      	push	{r7}
 8001472:	b083      	sub	sp, #12
 8001474:	af00      	add	r7, sp, #0
 8001476:	4603      	mov	r3, r0
 8001478:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800147a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800147e:	2b00      	cmp	r3, #0
 8001480:	db0d      	blt.n	800149e <__NVIC_GetEnableIRQ+0x2e>
  {
    return((uint32_t)(((NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
 8001482:	4a0a      	ldr	r2, [pc, #40]	@ (80014ac <__NVIC_GetEnableIRQ+0x3c>)
 8001484:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001488:	095b      	lsrs	r3, r3, #5
 800148a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800148e:	79fb      	ldrb	r3, [r7, #7]
 8001490:	f003 031f 	and.w	r3, r3, #31
 8001494:	fa22 f303 	lsr.w	r3, r2, r3
 8001498:	f003 0301 	and.w	r3, r3, #1
 800149c:	e000      	b.n	80014a0 <__NVIC_GetEnableIRQ+0x30>
  }
  else
  {
    return(0U);
 800149e:	2300      	movs	r3, #0
  }
}
 80014a0:	4618      	mov	r0, r3
 80014a2:	370c      	adds	r7, #12
 80014a4:	46bd      	mov	sp, r7
 80014a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014aa:	4770      	bx	lr
 80014ac:	e000e100 	.word	0xe000e100

080014b0 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80014b0:	b480      	push	{r7}
 80014b2:	b083      	sub	sp, #12
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	4603      	mov	r3, r0
 80014b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	db12      	blt.n	80014e8 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014c2:	79fb      	ldrb	r3, [r7, #7]
 80014c4:	f003 021f 	and.w	r2, r3, #31
 80014c8:	490a      	ldr	r1, [pc, #40]	@ (80014f4 <__NVIC_DisableIRQ+0x44>)
 80014ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ce:	095b      	lsrs	r3, r3, #5
 80014d0:	2001      	movs	r0, #1
 80014d2:	fa00 f202 	lsl.w	r2, r0, r2
 80014d6:	3320      	adds	r3, #32
 80014d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80014dc:	f3bf 8f4f 	dsb	sy
}
 80014e0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80014e2:	f3bf 8f6f 	isb	sy
}
 80014e6:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80014e8:	bf00      	nop
 80014ea:	370c      	adds	r7, #12
 80014ec:	46bd      	mov	sp, r7
 80014ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f2:	4770      	bx	lr
 80014f4:	e000e100 	.word	0xe000e100

080014f8 <initDriver_UART>:
} DriverHandel_UART;

volatile DriverHandel_UART _driverHandle_UART[MAX_UART_HANDLE]; 	//handle structures array

void initDriver_UART()
{
 80014f8:	b480      	push	{r7}
 80014fa:	b083      	sub	sp, #12
 80014fc:	af00      	add	r7, sp, #0
    //initializing the data structure
    for(uint32_t handleIndex = 0; handleIndex < MAX_UART_HANDLE; handleIndex++)
 80014fe:	2300      	movs	r3, #0
 8001500:	607b      	str	r3, [r7, #4]
 8001502:	e00b      	b.n	800151c <initDriver_UART+0x24>
    {
        _driverHandle_UART[handleIndex]._usageFlag = 0;
 8001504:	4a0a      	ldr	r2, [pc, #40]	@ (8001530 <initDriver_UART+0x38>)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	f241 11a8 	movw	r1, #4520	@ 0x11a8
 800150c:	fb01 f303 	mul.w	r3, r1, r3
 8001510:	4413      	add	r3, r2
 8001512:	2200      	movs	r2, #0
 8001514:	701a      	strb	r2, [r3, #0]
    for(uint32_t handleIndex = 0; handleIndex < MAX_UART_HANDLE; handleIndex++)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	3301      	adds	r3, #1
 800151a:	607b      	str	r3, [r7, #4]
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	2b03      	cmp	r3, #3
 8001520:	d9f0      	bls.n	8001504 <initDriver_UART+0xc>
    }
}
 8001522:	bf00      	nop
 8001524:	bf00      	nop
 8001526:	370c      	adds	r7, #12
 8001528:	46bd      	mov	sp, r7
 800152a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152e:	4770      	bx	lr
 8001530:	200002f4 	.word	0x200002f4

08001534 <addDriver_UART>:

uint8_t addDriver_UART(UART_HandleTypeDef* huartHandle, IRQn_Type irq, fifo_policy policyRX)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b086      	sub	sp, #24
 8001538:	af02      	add	r7, sp, #8
 800153a:	6078      	str	r0, [r7, #4]
 800153c:	460b      	mov	r3, r1
 800153e:	70fb      	strb	r3, [r7, #3]
 8001540:	4613      	mov	r3, r2
 8001542:	70bb      	strb	r3, [r7, #2]
    //scan the data structure to find a free position (or if the handle is already inserted)
    for(uint32_t handleIndex = 0; handleIndex < MAX_UART_HANDLE; handleIndex++)
 8001544:	2300      	movs	r3, #0
 8001546:	60fb      	str	r3, [r7, #12]
 8001548:	e0a6      	b.n	8001698 <addDriver_UART+0x164>
    {
        //if it finds an occupied position
        if(_driverHandle_UART[handleIndex]._usageFlag == 1)
 800154a:	4a58      	ldr	r2, [pc, #352]	@ (80016ac <addDriver_UART+0x178>)
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	f241 11a8 	movw	r1, #4520	@ 0x11a8
 8001552:	fb01 f303 	mul.w	r3, r1, r3
 8001556:	4413      	add	r3, r2
 8001558:	781b      	ldrb	r3, [r3, #0]
 800155a:	b2db      	uxtb	r3, r3
 800155c:	2b01      	cmp	r3, #1
 800155e:	d10e      	bne.n	800157e <addDriver_UART+0x4a>
        {
            //if the handle is already inside the structure
            if(_driverHandle_UART[handleIndex]._huartHandle == huartHandle)
 8001560:	4a52      	ldr	r2, [pc, #328]	@ (80016ac <addDriver_UART+0x178>)
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	f241 11a8 	movw	r1, #4520	@ 0x11a8
 8001568:	fb01 f303 	mul.w	r3, r1, r3
 800156c:	4413      	add	r3, r2
 800156e:	3304      	adds	r3, #4
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	687a      	ldr	r2, [r7, #4]
 8001574:	429a      	cmp	r2, r3
 8001576:	f040 808c 	bne.w	8001692 <addDriver_UART+0x15e>
            {
                //error
                return 1; 
 800157a:	2301      	movs	r3, #1
 800157c:	e091      	b.n	80016a2 <addDriver_UART+0x16e>
            }
        }
        else
        {
        	//disable the IRQ
        	uint32_t irqState=NVIC_GetEnableIRQ(irq);
 800157e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001582:	4618      	mov	r0, r3
 8001584:	f7ff ff74 	bl	8001470 <__NVIC_GetEnableIRQ>
 8001588:	60b8      	str	r0, [r7, #8]
        	NVIC_DisableIRQ(irq);
 800158a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800158e:	4618      	mov	r0, r3
 8001590:	f7ff ff8e 	bl	80014b0 <__NVIC_DisableIRQ>

            //intialize the strcture for this handle
            _driverHandle_UART[handleIndex]._huartHandle = huartHandle;
 8001594:	4a45      	ldr	r2, [pc, #276]	@ (80016ac <addDriver_UART+0x178>)
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	f241 11a8 	movw	r1, #4520	@ 0x11a8
 800159c:	fb01 f303 	mul.w	r3, r1, r3
 80015a0:	4413      	add	r3, r2
 80015a2:	3304      	adds	r3, #4
 80015a4:	687a      	ldr	r2, [r7, #4]
 80015a6:	601a      	str	r2, [r3, #0]
            _driverHandle_UART[handleIndex]._rxQueueHandle = xQueueCreateStatic(SERIAL_RX_BUFF_LEN,1,(void*)&_driverHandle_UART[handleIndex]._rxQueueStorageBuffer,&_driverHandle_UART[handleIndex]._rxQueueBuffer);
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	f241 12a8 	movw	r2, #4520	@ 0x11a8
 80015ae:	fb02 f303 	mul.w	r3, r2, r3
 80015b2:	3310      	adds	r3, #16
 80015b4:	4a3d      	ldr	r2, [pc, #244]	@ (80016ac <addDriver_UART+0x178>)
 80015b6:	441a      	add	r2, r3
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	f241 11a8 	movw	r1, #4520	@ 0x11a8
 80015be:	fb01 f303 	mul.w	r3, r1, r3
 80015c2:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 80015c6:	4939      	ldr	r1, [pc, #228]	@ (80016ac <addDriver_UART+0x178>)
 80015c8:	440b      	add	r3, r1
 80015ca:	2100      	movs	r1, #0
 80015cc:	9100      	str	r1, [sp, #0]
 80015ce:	2101      	movs	r1, #1
 80015d0:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80015d4:	f00b fe5a 	bl	800d28c <xQueueGenericCreateStatic>
 80015d8:	4602      	mov	r2, r0
 80015da:	4934      	ldr	r1, [pc, #208]	@ (80016ac <addDriver_UART+0x178>)
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	f241 10a8 	movw	r0, #4520	@ 0x11a8
 80015e2:	fb00 f303 	mul.w	r3, r0, r3
 80015e6:	440b      	add	r3, r1
 80015e8:	330c      	adds	r3, #12
 80015ea:	601a      	str	r2, [r3, #0]
            _driverHandle_UART[handleIndex]._txQueueHandle = xQueueCreateStatic(SERIAL_TX_BUFF_LEN,1,(void*)&_driverHandle_UART[handleIndex]._txQueueStorageBuffer,&_driverHandle_UART[handleIndex]._txQueueBuffer);
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	f241 12a8 	movw	r2, #4520	@ 0x11a8
 80015f2:	fb02 f303 	mul.w	r3, r2, r3
 80015f6:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 80015fa:	4a2c      	ldr	r2, [pc, #176]	@ (80016ac <addDriver_UART+0x178>)
 80015fc:	4413      	add	r3, r2
 80015fe:	1d1a      	adds	r2, r3, #4
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	f241 11a8 	movw	r1, #4520	@ 0x11a8
 8001606:	fb01 f303 	mul.w	r3, r1, r3
 800160a:	f503 538a 	add.w	r3, r3, #4416	@ 0x1140
 800160e:	3318      	adds	r3, #24
 8001610:	4926      	ldr	r1, [pc, #152]	@ (80016ac <addDriver_UART+0x178>)
 8001612:	440b      	add	r3, r1
 8001614:	3304      	adds	r3, #4
 8001616:	2100      	movs	r1, #0
 8001618:	9100      	str	r1, [sp, #0]
 800161a:	2101      	movs	r1, #1
 800161c:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8001620:	f00b fe34 	bl	800d28c <xQueueGenericCreateStatic>
 8001624:	4602      	mov	r2, r0
 8001626:	4921      	ldr	r1, [pc, #132]	@ (80016ac <addDriver_UART+0x178>)
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	f241 10a8 	movw	r0, #4520	@ 0x11a8
 800162e:	fb00 f303 	mul.w	r3, r0, r3
 8001632:	440b      	add	r3, r1
 8001634:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 8001638:	601a      	str	r2, [r3, #0]
            _driverHandle_UART[handleIndex]._usageFlag = 1;
 800163a:	4a1c      	ldr	r2, [pc, #112]	@ (80016ac <addDriver_UART+0x178>)
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	f241 11a8 	movw	r1, #4520	@ 0x11a8
 8001642:	fb01 f303 	mul.w	r3, r1, r3
 8001646:	4413      	add	r3, r2
 8001648:	2201      	movs	r2, #1
 800164a:	701a      	strb	r2, [r3, #0]
            _driverHandle_UART[handleIndex]._policyRX = policyRX;
 800164c:	4a17      	ldr	r2, [pc, #92]	@ (80016ac <addDriver_UART+0x178>)
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	f241 11a8 	movw	r1, #4520	@ 0x11a8
 8001654:	fb01 f303 	mul.w	r3, r1, r3
 8001658:	4413      	add	r3, r2
 800165a:	f503 538d 	add.w	r3, r3, #4512	@ 0x11a0
 800165e:	3304      	adds	r3, #4
 8001660:	78ba      	ldrb	r2, [r7, #2]
 8001662:	701a      	strb	r2, [r3, #0]

            HAL_UART_Receive_IT(huartHandle,&_driverHandle_UART[handleIndex]._rxByte,1);
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	f241 12a8 	movw	r2, #4520	@ 0x11a8
 800166a:	fb02 f303 	mul.w	r3, r2, r3
 800166e:	4a0f      	ldr	r2, [pc, #60]	@ (80016ac <addDriver_UART+0x178>)
 8001670:	4413      	add	r3, r2
 8001672:	3301      	adds	r3, #1
 8001674:	2201      	movs	r2, #1
 8001676:	4619      	mov	r1, r3
 8001678:	6878      	ldr	r0, [r7, #4]
 800167a:	f00a f891 	bl	800b7a0 <HAL_UART_Receive_IT>

            if(irqState) NVIC_EnableIRQ(irq);
 800167e:	68bb      	ldr	r3, [r7, #8]
 8001680:	2b00      	cmp	r3, #0
 8001682:	d004      	beq.n	800168e <addDriver_UART+0x15a>
 8001684:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001688:	4618      	mov	r0, r3
 800168a:	f7ff fed3 	bl	8001434 <__NVIC_EnableIRQ>

            return 0;
 800168e:	2300      	movs	r3, #0
 8001690:	e007      	b.n	80016a2 <addDriver_UART+0x16e>
    for(uint32_t handleIndex = 0; handleIndex < MAX_UART_HANDLE; handleIndex++)
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	3301      	adds	r3, #1
 8001696:	60fb      	str	r3, [r7, #12]
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	2b03      	cmp	r3, #3
 800169c:	f67f af55 	bls.w	800154a <addDriver_UART+0x16>
        }
    }
    return 1;
 80016a0:	2301      	movs	r3, #1
}
 80016a2:	4618      	mov	r0, r3
 80016a4:	3710      	adds	r7, #16
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd80      	pop	{r7, pc}
 80016aa:	bf00      	nop
 80016ac:	200002f4 	.word	0x200002f4

080016b0 <receiveDriver_UART>:

uint32_t receiveDriver_UART(UART_HandleTypeDef* huartHandle, uint8_t* buff, uint32_t size){
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b086      	sub	sp, #24
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	60f8      	str	r0, [r7, #12]
 80016b8:	60b9      	str	r1, [r7, #8]
 80016ba:	607a      	str	r2, [r7, #4]

    if(size == 0) return 0;
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d101      	bne.n	80016c6 <receiveDriver_UART+0x16>
 80016c2:	2300      	movs	r3, #0
 80016c4:	e03f      	b.n	8001746 <receiveDriver_UART+0x96>

    //scanning the array with the structures to find the handle
    for(uint32_t handleIndex = 0; handleIndex < MAX_UART_HANDLE; handleIndex++)
 80016c6:	2300      	movs	r3, #0
 80016c8:	617b      	str	r3, [r7, #20]
 80016ca:	e038      	b.n	800173e <receiveDriver_UART+0x8e>
    {
        //if it finds the handle
        if((_driverHandle_UART[handleIndex]._usageFlag == 1) && (huartHandle == _driverHandle_UART[handleIndex]._huartHandle))
 80016cc:	4a20      	ldr	r2, [pc, #128]	@ (8001750 <receiveDriver_UART+0xa0>)
 80016ce:	697b      	ldr	r3, [r7, #20]
 80016d0:	f241 11a8 	movw	r1, #4520	@ 0x11a8
 80016d4:	fb01 f303 	mul.w	r3, r1, r3
 80016d8:	4413      	add	r3, r2
 80016da:	781b      	ldrb	r3, [r3, #0]
 80016dc:	b2db      	uxtb	r3, r3
 80016de:	2b01      	cmp	r3, #1
 80016e0:	d12a      	bne.n	8001738 <receiveDriver_UART+0x88>
 80016e2:	4a1b      	ldr	r2, [pc, #108]	@ (8001750 <receiveDriver_UART+0xa0>)
 80016e4:	697b      	ldr	r3, [r7, #20]
 80016e6:	f241 11a8 	movw	r1, #4520	@ 0x11a8
 80016ea:	fb01 f303 	mul.w	r3, r1, r3
 80016ee:	4413      	add	r3, r2
 80016f0:	3304      	adds	r3, #4
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	68fa      	ldr	r2, [r7, #12]
 80016f6:	429a      	cmp	r2, r3
 80016f8:	d11e      	bne.n	8001738 <receiveDriver_UART+0x88>
        {
        	uint8_t rxNum=0;
 80016fa:	2300      	movs	r3, #0
 80016fc:	74fb      	strb	r3, [r7, #19]
        	while(rxNum<size && xQueueReceive(_driverHandle_UART[handleIndex]._rxQueueHandle,&buff[rxNum],0)==pdTRUE){
 80016fe:	e002      	b.n	8001706 <receiveDriver_UART+0x56>
        		rxNum++;
 8001700:	7cfb      	ldrb	r3, [r7, #19]
 8001702:	3301      	adds	r3, #1
 8001704:	74fb      	strb	r3, [r7, #19]
        	while(rxNum<size && xQueueReceive(_driverHandle_UART[handleIndex]._rxQueueHandle,&buff[rxNum],0)==pdTRUE){
 8001706:	7cfb      	ldrb	r3, [r7, #19]
 8001708:	687a      	ldr	r2, [r7, #4]
 800170a:	429a      	cmp	r2, r3
 800170c:	d912      	bls.n	8001734 <receiveDriver_UART+0x84>
 800170e:	4a10      	ldr	r2, [pc, #64]	@ (8001750 <receiveDriver_UART+0xa0>)
 8001710:	697b      	ldr	r3, [r7, #20]
 8001712:	f241 11a8 	movw	r1, #4520	@ 0x11a8
 8001716:	fb01 f303 	mul.w	r3, r1, r3
 800171a:	4413      	add	r3, r2
 800171c:	330c      	adds	r3, #12
 800171e:	6818      	ldr	r0, [r3, #0]
 8001720:	7cfb      	ldrb	r3, [r7, #19]
 8001722:	68ba      	ldr	r2, [r7, #8]
 8001724:	4413      	add	r3, r2
 8001726:	2200      	movs	r2, #0
 8001728:	4619      	mov	r1, r3
 800172a:	f00c f81d 	bl	800d768 <xQueueReceive>
 800172e:	4603      	mov	r3, r0
 8001730:	2b01      	cmp	r3, #1
 8001732:	d0e5      	beq.n	8001700 <receiveDriver_UART+0x50>
        	}

            //0 bytes read
            return rxNum;
 8001734:	7cfb      	ldrb	r3, [r7, #19]
 8001736:	e006      	b.n	8001746 <receiveDriver_UART+0x96>
    for(uint32_t handleIndex = 0; handleIndex < MAX_UART_HANDLE; handleIndex++)
 8001738:	697b      	ldr	r3, [r7, #20]
 800173a:	3301      	adds	r3, #1
 800173c:	617b      	str	r3, [r7, #20]
 800173e:	697b      	ldr	r3, [r7, #20]
 8001740:	2b03      	cmp	r3, #3
 8001742:	d9c3      	bls.n	80016cc <receiveDriver_UART+0x1c>
            HAL_UART_Receive_IT(huartHandle,&_driverHandle_UART[handleIndex]._rxByte,1);
            //NVIC_EnableIRQ(_driverHandle_UART[handleIndex]._irq);

        }
    }
    return 0;
 8001744:	2300      	movs	r3, #0
}
 8001746:	4618      	mov	r0, r3
 8001748:	3718      	adds	r7, #24
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	200002f4 	.word	0x200002f4

08001754 <sendDriver_UART>:

uint32_t sendDriver_UART(UART_HandleTypeDef* huartHandle,uint8_t* buff,uint32_t size){
 8001754:	b580      	push	{r7, lr}
 8001756:	b086      	sub	sp, #24
 8001758:	af00      	add	r7, sp, #0
 800175a:	60f8      	str	r0, [r7, #12]
 800175c:	60b9      	str	r1, [r7, #8]
 800175e:	607a      	str	r2, [r7, #4]
	if(size == 0) return 0;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	2b00      	cmp	r3, #0
 8001764:	d101      	bne.n	800176a <sendDriver_UART+0x16>
 8001766:	2300      	movs	r3, #0
 8001768:	e0a0      	b.n	80018ac <sendDriver_UART+0x158>

	//scanning the array with the structures to find the handle
	for(uint32_t handleIndex = 0; handleIndex < MAX_UART_HANDLE; handleIndex++)
 800176a:	2300      	movs	r3, #0
 800176c:	617b      	str	r3, [r7, #20]
 800176e:	e098      	b.n	80018a2 <sendDriver_UART+0x14e>
	{
		//if it finds the handle
		if((_driverHandle_UART[handleIndex]._usageFlag == 1) && (huartHandle == _driverHandle_UART[handleIndex]._huartHandle))
 8001770:	4a50      	ldr	r2, [pc, #320]	@ (80018b4 <sendDriver_UART+0x160>)
 8001772:	697b      	ldr	r3, [r7, #20]
 8001774:	f241 11a8 	movw	r1, #4520	@ 0x11a8
 8001778:	fb01 f303 	mul.w	r3, r1, r3
 800177c:	4413      	add	r3, r2
 800177e:	781b      	ldrb	r3, [r3, #0]
 8001780:	b2db      	uxtb	r3, r3
 8001782:	2b01      	cmp	r3, #1
 8001784:	f040 808a 	bne.w	800189c <sendDriver_UART+0x148>
 8001788:	4a4a      	ldr	r2, [pc, #296]	@ (80018b4 <sendDriver_UART+0x160>)
 800178a:	697b      	ldr	r3, [r7, #20]
 800178c:	f241 11a8 	movw	r1, #4520	@ 0x11a8
 8001790:	fb01 f303 	mul.w	r3, r1, r3
 8001794:	4413      	add	r3, r2
 8001796:	3304      	adds	r3, #4
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	68fa      	ldr	r2, [r7, #12]
 800179c:	429a      	cmp	r2, r3
 800179e:	d17d      	bne.n	800189c <sendDriver_UART+0x148>
		{
			//inserting bytes inside queue
			uint8_t txNum=0;
 80017a0:	2300      	movs	r3, #0
 80017a2:	74fb      	strb	r3, [r7, #19]
			while((txNum+1)<size && xQueueSendToBack(_driverHandle_UART[handleIndex]._txQueueHandle,&buff[txNum],0)==pdTRUE){
 80017a4:	e002      	b.n	80017ac <sendDriver_UART+0x58>
				txNum++;
 80017a6:	7cfb      	ldrb	r3, [r7, #19]
 80017a8:	3301      	adds	r3, #1
 80017aa:	74fb      	strb	r3, [r7, #19]
			while((txNum+1)<size && xQueueSendToBack(_driverHandle_UART[handleIndex]._txQueueHandle,&buff[txNum],0)==pdTRUE){
 80017ac:	7cfb      	ldrb	r3, [r7, #19]
 80017ae:	3301      	adds	r3, #1
 80017b0:	461a      	mov	r2, r3
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	4293      	cmp	r3, r2
 80017b6:	d913      	bls.n	80017e0 <sendDriver_UART+0x8c>
 80017b8:	4a3e      	ldr	r2, [pc, #248]	@ (80018b4 <sendDriver_UART+0x160>)
 80017ba:	697b      	ldr	r3, [r7, #20]
 80017bc:	f241 11a8 	movw	r1, #4520	@ 0x11a8
 80017c0:	fb01 f303 	mul.w	r3, r1, r3
 80017c4:	4413      	add	r3, r2
 80017c6:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 80017ca:	6818      	ldr	r0, [r3, #0]
 80017cc:	7cfb      	ldrb	r3, [r7, #19]
 80017ce:	68ba      	ldr	r2, [r7, #8]
 80017d0:	18d1      	adds	r1, r2, r3
 80017d2:	2300      	movs	r3, #0
 80017d4:	2200      	movs	r2, #0
 80017d6:	f00b fe27 	bl	800d428 <xQueueGenericSend>
 80017da:	4603      	mov	r3, r0
 80017dc:	2b01      	cmp	r3, #1
 80017de:	d0e2      	beq.n	80017a6 <sendDriver_UART+0x52>
			}
			//if no transmission ongoing and pipe is not empty, start transmission now
            //disable the IRQ
        	NVIC_DisableIRQ(_driverHandle_UART[handleIndex]._irq);
 80017e0:	4a34      	ldr	r2, [pc, #208]	@ (80018b4 <sendDriver_UART+0x160>)
 80017e2:	697b      	ldr	r3, [r7, #20]
 80017e4:	f241 11a8 	movw	r1, #4520	@ 0x11a8
 80017e8:	fb01 f303 	mul.w	r3, r1, r3
 80017ec:	4413      	add	r3, r2
 80017ee:	3308      	adds	r3, #8
 80017f0:	781b      	ldrb	r3, [r3, #0]
 80017f2:	b25b      	sxtb	r3, r3
 80017f4:	4618      	mov	r0, r3
 80017f6:	f7ff fe5b 	bl	80014b0 <__NVIC_DisableIRQ>

			if(huartHandle->gState == HAL_UART_STATE_READY){
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80017fe:	2b20      	cmp	r3, #32
 8001800:	d126      	bne.n	8001850 <sendDriver_UART+0xfc>
				_driverHandle_UART[handleIndex]._txByte=buff[txNum];
 8001802:	7cfb      	ldrb	r3, [r7, #19]
 8001804:	68ba      	ldr	r2, [r7, #8]
 8001806:	4413      	add	r3, r2
 8001808:	7818      	ldrb	r0, [r3, #0]
 800180a:	4a2a      	ldr	r2, [pc, #168]	@ (80018b4 <sendDriver_UART+0x160>)
 800180c:	697b      	ldr	r3, [r7, #20]
 800180e:	f241 11a8 	movw	r1, #4520	@ 0x11a8
 8001812:	fb01 f303 	mul.w	r3, r1, r3
 8001816:	4413      	add	r3, r2
 8001818:	3302      	adds	r3, #2
 800181a:	4602      	mov	r2, r0
 800181c:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit_IT(_driverHandle_UART[handleIndex]._huartHandle, &_driverHandle_UART[handleIndex]._txByte, 1); //try restarting transmit if not ongoing
 800181e:	4a25      	ldr	r2, [pc, #148]	@ (80018b4 <sendDriver_UART+0x160>)
 8001820:	697b      	ldr	r3, [r7, #20]
 8001822:	f241 11a8 	movw	r1, #4520	@ 0x11a8
 8001826:	fb01 f303 	mul.w	r3, r1, r3
 800182a:	4413      	add	r3, r2
 800182c:	3304      	adds	r3, #4
 800182e:	6818      	ldr	r0, [r3, #0]
 8001830:	697b      	ldr	r3, [r7, #20]
 8001832:	f241 12a8 	movw	r2, #4520	@ 0x11a8
 8001836:	fb02 f303 	mul.w	r3, r2, r3
 800183a:	4a1e      	ldr	r2, [pc, #120]	@ (80018b4 <sendDriver_UART+0x160>)
 800183c:	4413      	add	r3, r2
 800183e:	3302      	adds	r3, #2
 8001840:	2201      	movs	r2, #1
 8001842:	4619      	mov	r1, r3
 8001844:	f009 ff3e 	bl	800b6c4 <HAL_UART_Transmit_IT>
				txNum++;
 8001848:	7cfb      	ldrb	r3, [r7, #19]
 800184a:	3301      	adds	r3, #1
 800184c:	74fb      	strb	r3, [r7, #19]
 800184e:	e016      	b.n	800187e <sendDriver_UART+0x12a>
			}else{
				if(xQueueSendToBack(_driverHandle_UART[handleIndex]._txQueueHandle,&buff[txNum],0)==pdTRUE){
 8001850:	4a18      	ldr	r2, [pc, #96]	@ (80018b4 <sendDriver_UART+0x160>)
 8001852:	697b      	ldr	r3, [r7, #20]
 8001854:	f241 11a8 	movw	r1, #4520	@ 0x11a8
 8001858:	fb01 f303 	mul.w	r3, r1, r3
 800185c:	4413      	add	r3, r2
 800185e:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 8001862:	6818      	ldr	r0, [r3, #0]
 8001864:	7cfb      	ldrb	r3, [r7, #19]
 8001866:	68ba      	ldr	r2, [r7, #8]
 8001868:	18d1      	adds	r1, r2, r3
 800186a:	2300      	movs	r3, #0
 800186c:	2200      	movs	r2, #0
 800186e:	f00b fddb 	bl	800d428 <xQueueGenericSend>
 8001872:	4603      	mov	r3, r0
 8001874:	2b01      	cmp	r3, #1
 8001876:	d102      	bne.n	800187e <sendDriver_UART+0x12a>
					txNum++;
 8001878:	7cfb      	ldrb	r3, [r7, #19]
 800187a:	3301      	adds	r3, #1
 800187c:	74fb      	strb	r3, [r7, #19]
                }
			}

            NVIC_EnableIRQ(_driverHandle_UART[handleIndex]._irq);
 800187e:	4a0d      	ldr	r2, [pc, #52]	@ (80018b4 <sendDriver_UART+0x160>)
 8001880:	697b      	ldr	r3, [r7, #20]
 8001882:	f241 11a8 	movw	r1, #4520	@ 0x11a8
 8001886:	fb01 f303 	mul.w	r3, r1, r3
 800188a:	4413      	add	r3, r2
 800188c:	3308      	adds	r3, #8
 800188e:	781b      	ldrb	r3, [r3, #0]
 8001890:	b25b      	sxtb	r3, r3
 8001892:	4618      	mov	r0, r3
 8001894:	f7ff fdce 	bl	8001434 <__NVIC_EnableIRQ>

			return txNum;
 8001898:	7cfb      	ldrb	r3, [r7, #19]
 800189a:	e007      	b.n	80018ac <sendDriver_UART+0x158>
	for(uint32_t handleIndex = 0; handleIndex < MAX_UART_HANDLE; handleIndex++)
 800189c:	697b      	ldr	r3, [r7, #20]
 800189e:	3301      	adds	r3, #1
 80018a0:	617b      	str	r3, [r7, #20]
 80018a2:	697b      	ldr	r3, [r7, #20]
 80018a4:	2b03      	cmp	r3, #3
 80018a6:	f67f af63 	bls.w	8001770 <sendDriver_UART+0x1c>
		}
	}

	return 0;
 80018aa:	2300      	movs	r3, #0
}
 80018ac:	4618      	mov	r0, r3
 80018ae:	3718      	adds	r7, #24
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bd80      	pop	{r7, pc}
 80018b4:	200002f4 	.word	0x200002f4

080018b8 <flushRXDriver_UART>:

void flushRXDriver_UART(UART_HandleTypeDef* huartHandle){
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b084      	sub	sp, #16
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
	//scanning the structure array
	for(uint32_t handleIndex = 0; handleIndex < MAX_UART_HANDLE; handleIndex++)
 80018c0:	2300      	movs	r3, #0
 80018c2:	60fb      	str	r3, [r7, #12]
 80018c4:	e026      	b.n	8001914 <flushRXDriver_UART+0x5c>
	{
		//if it finds the handle in the structure
		if(_driverHandle_UART[handleIndex]._usageFlag == 1 && huartHandle == _driverHandle_UART[handleIndex]._huartHandle)
 80018c6:	4a17      	ldr	r2, [pc, #92]	@ (8001924 <flushRXDriver_UART+0x6c>)
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	f241 11a8 	movw	r1, #4520	@ 0x11a8
 80018ce:	fb01 f303 	mul.w	r3, r1, r3
 80018d2:	4413      	add	r3, r2
 80018d4:	781b      	ldrb	r3, [r3, #0]
 80018d6:	b2db      	uxtb	r3, r3
 80018d8:	2b01      	cmp	r3, #1
 80018da:	d118      	bne.n	800190e <flushRXDriver_UART+0x56>
 80018dc:	4a11      	ldr	r2, [pc, #68]	@ (8001924 <flushRXDriver_UART+0x6c>)
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	f241 11a8 	movw	r1, #4520	@ 0x11a8
 80018e4:	fb01 f303 	mul.w	r3, r1, r3
 80018e8:	4413      	add	r3, r2
 80018ea:	3304      	adds	r3, #4
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	687a      	ldr	r2, [r7, #4]
 80018f0:	429a      	cmp	r2, r3
 80018f2:	d10c      	bne.n	800190e <flushRXDriver_UART+0x56>
		{
			//flushing queue
			xQueueReset(_driverHandle_UART[handleIndex]._rxQueueHandle);
 80018f4:	4a0b      	ldr	r2, [pc, #44]	@ (8001924 <flushRXDriver_UART+0x6c>)
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	f241 11a8 	movw	r1, #4520	@ 0x11a8
 80018fc:	fb01 f303 	mul.w	r3, r1, r3
 8001900:	4413      	add	r3, r2
 8001902:	330c      	adds	r3, #12
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	2100      	movs	r1, #0
 8001908:	4618      	mov	r0, r3
 800190a:	f00b fc55 	bl	800d1b8 <xQueueGenericReset>
	for(uint32_t handleIndex = 0; handleIndex < MAX_UART_HANDLE; handleIndex++)
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	3301      	adds	r3, #1
 8001912:	60fb      	str	r3, [r7, #12]
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	2b03      	cmp	r3, #3
 8001918:	d9d5      	bls.n	80018c6 <flushRXDriver_UART+0xe>
		}
	}
}
 800191a:	bf00      	nop
 800191c:	bf00      	nop
 800191e:	3710      	adds	r7, #16
 8001920:	46bd      	mov	sp, r7
 8001922:	bd80      	pop	{r7, pc}
 8001924:	200002f4 	.word	0x200002f4

08001928 <HAL_UART_ErrorCallback>:
			xQueueReset(_driverHandle_UART[handleIndex]._txQueueHandle);
		}
	}
}

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huartHandle){
 8001928:	b580      	push	{r7, lr}
 800192a:	b084      	sub	sp, #16
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
//scanning the array with the structures to find the handle

    for(uint32_t handleIndex = 0; handleIndex < MAX_UART_HANDLE; handleIndex++)
 8001930:	2300      	movs	r3, #0
 8001932:	60fb      	str	r3, [r7, #12]
 8001934:	e027      	b.n	8001986 <HAL_UART_ErrorCallback+0x5e>
    {
        //if it finds the handle
        if((_driverHandle_UART[handleIndex]._usageFlag == 1) && (huartHandle == _driverHandle_UART[handleIndex]._huartHandle))
 8001936:	4a17      	ldr	r2, [pc, #92]	@ (8001994 <HAL_UART_ErrorCallback+0x6c>)
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	f241 11a8 	movw	r1, #4520	@ 0x11a8
 800193e:	fb01 f303 	mul.w	r3, r1, r3
 8001942:	4413      	add	r3, r2
 8001944:	781b      	ldrb	r3, [r3, #0]
 8001946:	b2db      	uxtb	r3, r3
 8001948:	2b01      	cmp	r3, #1
 800194a:	d119      	bne.n	8001980 <HAL_UART_ErrorCallback+0x58>
 800194c:	4a11      	ldr	r2, [pc, #68]	@ (8001994 <HAL_UART_ErrorCallback+0x6c>)
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	f241 11a8 	movw	r1, #4520	@ 0x11a8
 8001954:	fb01 f303 	mul.w	r3, r1, r3
 8001958:	4413      	add	r3, r2
 800195a:	3304      	adds	r3, #4
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	687a      	ldr	r2, [r7, #4]
 8001960:	429a      	cmp	r2, r3
 8001962:	d10d      	bne.n	8001980 <HAL_UART_ErrorCallback+0x58>
        {
            HAL_UART_Receive_IT(huartHandle,&_driverHandle_UART[handleIndex]._rxByte,1);
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	f241 12a8 	movw	r2, #4520	@ 0x11a8
 800196a:	fb02 f303 	mul.w	r3, r2, r3
 800196e:	4a09      	ldr	r2, [pc, #36]	@ (8001994 <HAL_UART_ErrorCallback+0x6c>)
 8001970:	4413      	add	r3, r2
 8001972:	3301      	adds	r3, #1
 8001974:	2201      	movs	r2, #1
 8001976:	4619      	mov	r1, r3
 8001978:	6878      	ldr	r0, [r7, #4]
 800197a:	f009 ff11 	bl	800b7a0 <HAL_UART_Receive_IT>
            return;
 800197e:	e006      	b.n	800198e <HAL_UART_ErrorCallback+0x66>
    for(uint32_t handleIndex = 0; handleIndex < MAX_UART_HANDLE; handleIndex++)
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	3301      	adds	r3, #1
 8001984:	60fb      	str	r3, [r7, #12]
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	2b03      	cmp	r3, #3
 800198a:	d9d4      	bls.n	8001936 <HAL_UART_ErrorCallback+0xe>
        }
    }
    return;
 800198c:	bf00      	nop
    
}
 800198e:	3710      	adds	r7, #16
 8001990:	46bd      	mov	sp, r7
 8001992:	bd80      	pop	{r7, pc}
 8001994:	200002f4 	.word	0x200002f4

08001998 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b084      	sub	sp, #16
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
	//scanning the structure array
    for(uint32_t handleIndex = 0; handleIndex < MAX_UART_HANDLE; handleIndex++)
 80019a0:	2300      	movs	r3, #0
 80019a2:	60fb      	str	r3, [r7, #12]
 80019a4:	e068      	b.n	8001a78 <HAL_UART_RxCpltCallback+0xe0>
    {
        //if it finds the handle in the structure
        if(_driverHandle_UART[handleIndex]._usageFlag == 1 && huart == _driverHandle_UART[handleIndex]._huartHandle)
 80019a6:	4a38      	ldr	r2, [pc, #224]	@ (8001a88 <HAL_UART_RxCpltCallback+0xf0>)
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	f241 11a8 	movw	r1, #4520	@ 0x11a8
 80019ae:	fb01 f303 	mul.w	r3, r1, r3
 80019b2:	4413      	add	r3, r2
 80019b4:	781b      	ldrb	r3, [r3, #0]
 80019b6:	b2db      	uxtb	r3, r3
 80019b8:	2b01      	cmp	r3, #1
 80019ba:	d15a      	bne.n	8001a72 <HAL_UART_RxCpltCallback+0xda>
 80019bc:	4a32      	ldr	r2, [pc, #200]	@ (8001a88 <HAL_UART_RxCpltCallback+0xf0>)
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	f241 11a8 	movw	r1, #4520	@ 0x11a8
 80019c4:	fb01 f303 	mul.w	r3, r1, r3
 80019c8:	4413      	add	r3, r2
 80019ca:	3304      	adds	r3, #4
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	687a      	ldr	r2, [r7, #4]
 80019d0:	429a      	cmp	r2, r3
 80019d2:	d14e      	bne.n	8001a72 <HAL_UART_RxCpltCallback+0xda>
        {
        	if(_driverHandle_UART[handleIndex]._policyRX==keep_new && xQueueIsQueueFullFromISR(_driverHandle_UART[handleIndex]._rxQueueHandle)){
 80019d4:	4a2c      	ldr	r2, [pc, #176]	@ (8001a88 <HAL_UART_RxCpltCallback+0xf0>)
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	f241 11a8 	movw	r1, #4520	@ 0x11a8
 80019dc:	fb01 f303 	mul.w	r3, r1, r3
 80019e0:	4413      	add	r3, r2
 80019e2:	f503 538d 	add.w	r3, r3, #4512	@ 0x11a0
 80019e6:	3304      	adds	r3, #4
 80019e8:	781b      	ldrb	r3, [r3, #0]
 80019ea:	b2db      	uxtb	r3, r3
 80019ec:	2b01      	cmp	r3, #1
 80019ee:	d11d      	bne.n	8001a2c <HAL_UART_RxCpltCallback+0x94>
 80019f0:	4a25      	ldr	r2, [pc, #148]	@ (8001a88 <HAL_UART_RxCpltCallback+0xf0>)
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	f241 11a8 	movw	r1, #4520	@ 0x11a8
 80019f8:	fb01 f303 	mul.w	r3, r1, r3
 80019fc:	4413      	add	r3, r2
 80019fe:	330c      	adds	r3, #12
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	4618      	mov	r0, r3
 8001a04:	f00c f924 	bl	800dc50 <xQueueIsQueueFullFromISR>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d00e      	beq.n	8001a2c <HAL_UART_RxCpltCallback+0x94>
        		uint8_t c;
        		xQueueReceiveFromISR(_driverHandle_UART[handleIndex]._rxQueueHandle, &c, NULL);
 8001a0e:	4a1e      	ldr	r2, [pc, #120]	@ (8001a88 <HAL_UART_RxCpltCallback+0xf0>)
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	f241 11a8 	movw	r1, #4520	@ 0x11a8
 8001a16:	fb01 f303 	mul.w	r3, r1, r3
 8001a1a:	4413      	add	r3, r2
 8001a1c:	330c      	adds	r3, #12
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f107 010b 	add.w	r1, r7, #11
 8001a24:	2200      	movs	r2, #0
 8001a26:	4618      	mov	r0, r3
 8001a28:	f00b ff80 	bl	800d92c <xQueueReceiveFromISR>
        	}

            xQueueSendToBackFromISR(_driverHandle_UART[handleIndex]._rxQueueHandle,(void*)&_driverHandle_UART[handleIndex]._rxByte,NULL);
 8001a2c:	4a16      	ldr	r2, [pc, #88]	@ (8001a88 <HAL_UART_RxCpltCallback+0xf0>)
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	f241 11a8 	movw	r1, #4520	@ 0x11a8
 8001a34:	fb01 f303 	mul.w	r3, r1, r3
 8001a38:	4413      	add	r3, r2
 8001a3a:	330c      	adds	r3, #12
 8001a3c:	6818      	ldr	r0, [r3, #0]
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	f241 12a8 	movw	r2, #4520	@ 0x11a8
 8001a44:	fb02 f303 	mul.w	r3, r2, r3
 8001a48:	4a0f      	ldr	r2, [pc, #60]	@ (8001a88 <HAL_UART_RxCpltCallback+0xf0>)
 8001a4a:	4413      	add	r3, r2
 8001a4c:	1c59      	adds	r1, r3, #1
 8001a4e:	2300      	movs	r3, #0
 8001a50:	2200      	movs	r2, #0
 8001a52:	f00b fdeb 	bl	800d62c <xQueueGenericSendFromISR>

            //relaunching ISR
            HAL_UART_Receive_IT(huart,&_driverHandle_UART[handleIndex]._rxByte,1);
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	f241 12a8 	movw	r2, #4520	@ 0x11a8
 8001a5c:	fb02 f303 	mul.w	r3, r2, r3
 8001a60:	4a09      	ldr	r2, [pc, #36]	@ (8001a88 <HAL_UART_RxCpltCallback+0xf0>)
 8001a62:	4413      	add	r3, r2
 8001a64:	3301      	adds	r3, #1
 8001a66:	2201      	movs	r2, #1
 8001a68:	4619      	mov	r1, r3
 8001a6a:	6878      	ldr	r0, [r7, #4]
 8001a6c:	f009 fe98 	bl	800b7a0 <HAL_UART_Receive_IT>

            return;
 8001a70:	e006      	b.n	8001a80 <HAL_UART_RxCpltCallback+0xe8>
    for(uint32_t handleIndex = 0; handleIndex < MAX_UART_HANDLE; handleIndex++)
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	3301      	adds	r3, #1
 8001a76:	60fb      	str	r3, [r7, #12]
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	2b03      	cmp	r3, #3
 8001a7c:	d993      	bls.n	80019a6 <HAL_UART_RxCpltCallback+0xe>
        }
    }
	return;
 8001a7e:	bf00      	nop
}
 8001a80:	3710      	adds	r7, #16
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}
 8001a86:	bf00      	nop
 8001a88:	200002f4 	.word	0x200002f4

08001a8c <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b084      	sub	sp, #16
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
	//scanning the structure array
    for(uint32_t handleIndex = 0; handleIndex < MAX_UART_HANDLE; handleIndex++)
 8001a94:	2300      	movs	r3, #0
 8001a96:	60fb      	str	r3, [r7, #12]
 8001a98:	e048      	b.n	8001b2c <HAL_UART_TxCpltCallback+0xa0>
    {
        //if it finds the handle in the structure
        if(_driverHandle_UART[handleIndex]._usageFlag == 1 && huart == _driverHandle_UART[handleIndex]._huartHandle)
 8001a9a:	4a28      	ldr	r2, [pc, #160]	@ (8001b3c <HAL_UART_TxCpltCallback+0xb0>)
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	f241 11a8 	movw	r1, #4520	@ 0x11a8
 8001aa2:	fb01 f303 	mul.w	r3, r1, r3
 8001aa6:	4413      	add	r3, r2
 8001aa8:	781b      	ldrb	r3, [r3, #0]
 8001aaa:	b2db      	uxtb	r3, r3
 8001aac:	2b01      	cmp	r3, #1
 8001aae:	d13a      	bne.n	8001b26 <HAL_UART_TxCpltCallback+0x9a>
 8001ab0:	4a22      	ldr	r2, [pc, #136]	@ (8001b3c <HAL_UART_TxCpltCallback+0xb0>)
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	f241 11a8 	movw	r1, #4520	@ 0x11a8
 8001ab8:	fb01 f303 	mul.w	r3, r1, r3
 8001abc:	4413      	add	r3, r2
 8001abe:	3304      	adds	r3, #4
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	687a      	ldr	r2, [r7, #4]
 8001ac4:	429a      	cmp	r2, r3
 8001ac6:	d12e      	bne.n	8001b26 <HAL_UART_TxCpltCallback+0x9a>
        {
            
			if(xQueueReceiveFromISR(_driverHandle_UART[handleIndex]._txQueueHandle,&_driverHandle_UART[handleIndex]._txByte,NULL)==pdTRUE){
 8001ac8:	4a1c      	ldr	r2, [pc, #112]	@ (8001b3c <HAL_UART_TxCpltCallback+0xb0>)
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	f241 11a8 	movw	r1, #4520	@ 0x11a8
 8001ad0:	fb01 f303 	mul.w	r3, r1, r3
 8001ad4:	4413      	add	r3, r2
 8001ad6:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 8001ada:	6818      	ldr	r0, [r3, #0]
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	f241 12a8 	movw	r2, #4520	@ 0x11a8
 8001ae2:	fb02 f303 	mul.w	r3, r2, r3
 8001ae6:	4a15      	ldr	r2, [pc, #84]	@ (8001b3c <HAL_UART_TxCpltCallback+0xb0>)
 8001ae8:	4413      	add	r3, r2
 8001aea:	3302      	adds	r3, #2
 8001aec:	2200      	movs	r2, #0
 8001aee:	4619      	mov	r1, r3
 8001af0:	f00b ff1c 	bl	800d92c <xQueueReceiveFromISR>
 8001af4:	4603      	mov	r3, r0
 8001af6:	2b01      	cmp	r3, #1
 8001af8:	d11c      	bne.n	8001b34 <HAL_UART_TxCpltCallback+0xa8>
				HAL_UART_Transmit_IT(_driverHandle_UART[handleIndex]._huartHandle, &_driverHandle_UART[handleIndex]._txByte, 1);
 8001afa:	4a10      	ldr	r2, [pc, #64]	@ (8001b3c <HAL_UART_TxCpltCallback+0xb0>)
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	f241 11a8 	movw	r1, #4520	@ 0x11a8
 8001b02:	fb01 f303 	mul.w	r3, r1, r3
 8001b06:	4413      	add	r3, r2
 8001b08:	3304      	adds	r3, #4
 8001b0a:	6818      	ldr	r0, [r3, #0]
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	f241 12a8 	movw	r2, #4520	@ 0x11a8
 8001b12:	fb02 f303 	mul.w	r3, r2, r3
 8001b16:	4a09      	ldr	r2, [pc, #36]	@ (8001b3c <HAL_UART_TxCpltCallback+0xb0>)
 8001b18:	4413      	add	r3, r2
 8001b1a:	3302      	adds	r3, #2
 8001b1c:	2201      	movs	r2, #1
 8001b1e:	4619      	mov	r1, r3
 8001b20:	f009 fdd0 	bl	800b6c4 <HAL_UART_Transmit_IT>
			}

            return;
 8001b24:	e006      	b.n	8001b34 <HAL_UART_TxCpltCallback+0xa8>
    for(uint32_t handleIndex = 0; handleIndex < MAX_UART_HANDLE; handleIndex++)
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	3301      	adds	r3, #1
 8001b2a:	60fb      	str	r3, [r7, #12]
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	2b03      	cmp	r3, #3
 8001b30:	d9b3      	bls.n	8001a9a <HAL_UART_TxCpltCallback+0xe>
        }
    }
	return;
 8001b32:	e000      	b.n	8001b36 <HAL_UART_TxCpltCallback+0xaa>
            return;
 8001b34:	bf00      	nop

}
 8001b36:	3710      	adds	r7, #16
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bd80      	pop	{r7, pc}
 8001b3c:	200002f4 	.word	0x200002f4

08001b40 <init_actuator_handler>:
//PWM freq puo variare tra 4Hz e 200Khz
//Duty cycle must be written in percentage in this function!!!
//dir = 1; -> FORWARD
//dir = 0; -> REVERSE
void init_actuator_handler(Actuator_struct *act,TIM_HandleTypeDef* htim,uint32_t pwm_channel1,uint32_t pwm_channel2,uint32_t pwm_freq,uint8_t duty_cycle)
{
 8001b40:	b5b0      	push	{r4, r5, r7, lr}
 8001b42:	b086      	sub	sp, #24
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	60f8      	str	r0, [r7, #12]
 8001b48:	60b9      	str	r1, [r7, #8]
 8001b4a:	607a      	str	r2, [r7, #4]
 8001b4c:	603b      	str	r3, [r7, #0]
	act->htim=htim;
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	68ba      	ldr	r2, [r7, #8]
 8001b52:	601a      	str	r2, [r3, #0]
	act->pwm_channel1=pwm_channel1;
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	687a      	ldr	r2, [r7, #4]
 8001b58:	609a      	str	r2, [r3, #8]
	act->pwm_channel2=pwm_channel2;
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	683a      	ldr	r2, [r7, #0]
 8001b5e:	60da      	str	r2, [r3, #12]
	act->duty_cycle = duty_cycle;
 8001b60:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001b64:	ee07 3a90 	vmov	s15, r3
 8001b68:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	edc3 7a04 	vstr	s15, [r3, #16]
	act->dir = 1; //Initially FORWARD
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	2201      	movs	r2, #1
 8001b76:	751a      	strb	r2, [r3, #20]

	HAL_TIM_PWM_Stop(act->htim,pwm_channel1);
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	6879      	ldr	r1, [r7, #4]
 8001b7e:	4618      	mov	r0, r3
 8001b80:	f008 fcf4 	bl	800a56c <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(act->htim,pwm_channel2);
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	6839      	ldr	r1, [r7, #0]
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	f008 fcee 	bl	800a56c <HAL_TIM_PWM_Stop>

	if(pwm_freq > 200000)  pwm_freq = 200000;
 8001b90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b92:	4a9b      	ldr	r2, [pc, #620]	@ (8001e00 <init_actuator_handler+0x2c0>)
 8001b94:	4293      	cmp	r3, r2
 8001b96:	d902      	bls.n	8001b9e <init_actuator_handler+0x5e>
 8001b98:	4b99      	ldr	r3, [pc, #612]	@ (8001e00 <init_actuator_handler+0x2c0>)
 8001b9a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001b9c:	e004      	b.n	8001ba8 <init_actuator_handler+0x68>
	else if(pwm_freq < 4) pwm_freq = 4;
 8001b9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ba0:	2b03      	cmp	r3, #3
 8001ba2:	d801      	bhi.n	8001ba8 <init_actuator_handler+0x68>
 8001ba4:	2304      	movs	r3, #4
 8001ba6:	62bb      	str	r3, [r7, #40]	@ 0x28
	uint32_t prescaler = (40000000 / (pwm_freq * (act->htim->Init.Period + 1))) - 1;
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	68db      	ldr	r3, [r3, #12]
 8001bae:	3301      	adds	r3, #1
 8001bb0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001bb2:	fb02 f303 	mul.w	r3, r2, r3
 8001bb6:	4a93      	ldr	r2, [pc, #588]	@ (8001e04 <init_actuator_handler+0x2c4>)
 8001bb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bbc:	3b01      	subs	r3, #1
 8001bbe:	617b      	str	r3, [r7, #20]

	// Aggiornare il prescaler
	__HAL_TIM_SET_PRESCALER(act->htim, prescaler);
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	697a      	ldr	r2, [r7, #20]
 8001bc8:	629a      	str	r2, [r3, #40]	@ 0x28


	uint32_t update_value = (uint32_t)roundf((float)(act->htim->Instance->ARR) * (act->duty_cycle * 0.01));
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bd2:	ee07 3a90 	vmov	s15, r3
 8001bd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001bda:	ee17 0a90 	vmov	r0, s15
 8001bde:	f7fe fcbb 	bl	8000558 <__aeabi_f2d>
 8001be2:	4604      	mov	r4, r0
 8001be4:	460d      	mov	r5, r1
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	691b      	ldr	r3, [r3, #16]
 8001bea:	4618      	mov	r0, r3
 8001bec:	f7fe fcb4 	bl	8000558 <__aeabi_f2d>
 8001bf0:	a381      	add	r3, pc, #516	@ (adr r3, 8001df8 <init_actuator_handler+0x2b8>)
 8001bf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bf6:	f7fe fd07 	bl	8000608 <__aeabi_dmul>
 8001bfa:	4602      	mov	r2, r0
 8001bfc:	460b      	mov	r3, r1
 8001bfe:	4620      	mov	r0, r4
 8001c00:	4629      	mov	r1, r5
 8001c02:	f7fe fd01 	bl	8000608 <__aeabi_dmul>
 8001c06:	4602      	mov	r2, r0
 8001c08:	460b      	mov	r3, r1
 8001c0a:	4610      	mov	r0, r2
 8001c0c:	4619      	mov	r1, r3
 8001c0e:	f7fe ffd3 	bl	8000bb8 <__aeabi_d2f>
 8001c12:	4603      	mov	r3, r0
 8001c14:	ee00 3a10 	vmov	s0, r3
 8001c18:	f010 fa22 	bl	8012060 <roundf>
 8001c1c:	eef0 7a40 	vmov.f32	s15, s0
 8001c20:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001c24:	ee17 3a90 	vmov	r3, s15
 8001c28:	613b      	str	r3, [r7, #16]
	//if(update_value > act->htim->Instance->ARR)	update_value = act->htim->Instance->ARR;
	__HAL_TIM_SET_COMPARE(act->htim, act->pwm_channel1, (uint32_t)(roundf(act->htim->Instance->ARR)));
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	689b      	ldr	r3, [r3, #8]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d110      	bne.n	8001c54 <init_actuator_handler+0x114>
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c3a:	ee07 3a90 	vmov	s15, r3
 8001c3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001c4c:	ee17 2a90 	vmov	r2, s15
 8001c50:	635a      	str	r2, [r3, #52]	@ 0x34
 8001c52:	e063      	b.n	8001d1c <init_actuator_handler+0x1dc>
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	689b      	ldr	r3, [r3, #8]
 8001c58:	2b04      	cmp	r3, #4
 8001c5a:	d110      	bne.n	8001c7e <init_actuator_handler+0x13e>
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c64:	ee07 3a90 	vmov	s15, r3
 8001c68:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	681a      	ldr	r2, [r3, #0]
 8001c72:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001c76:	ee17 3a90 	vmov	r3, s15
 8001c7a:	6393      	str	r3, [r2, #56]	@ 0x38
 8001c7c:	e04e      	b.n	8001d1c <init_actuator_handler+0x1dc>
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	689b      	ldr	r3, [r3, #8]
 8001c82:	2b08      	cmp	r3, #8
 8001c84:	d110      	bne.n	8001ca8 <init_actuator_handler+0x168>
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c8e:	ee07 3a90 	vmov	s15, r3
 8001c92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	681a      	ldr	r2, [r3, #0]
 8001c9c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001ca0:	ee17 3a90 	vmov	r3, s15
 8001ca4:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8001ca6:	e039      	b.n	8001d1c <init_actuator_handler+0x1dc>
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	689b      	ldr	r3, [r3, #8]
 8001cac:	2b0c      	cmp	r3, #12
 8001cae:	d110      	bne.n	8001cd2 <init_actuator_handler+0x192>
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cb8:	ee07 3a90 	vmov	s15, r3
 8001cbc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	681a      	ldr	r2, [r3, #0]
 8001cc6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001cca:	ee17 3a90 	vmov	r3, s15
 8001cce:	6413      	str	r3, [r2, #64]	@ 0x40
 8001cd0:	e024      	b.n	8001d1c <init_actuator_handler+0x1dc>
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	689b      	ldr	r3, [r3, #8]
 8001cd6:	2b10      	cmp	r3, #16
 8001cd8:	d110      	bne.n	8001cfc <init_actuator_handler+0x1bc>
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ce2:	ee07 3a90 	vmov	s15, r3
 8001ce6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	681a      	ldr	r2, [r3, #0]
 8001cf0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001cf4:	ee17 3a90 	vmov	r3, s15
 8001cf8:	6593      	str	r3, [r2, #88]	@ 0x58
 8001cfa:	e00f      	b.n	8001d1c <init_actuator_handler+0x1dc>
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d04:	ee07 3a90 	vmov	s15, r3
 8001d08:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	681a      	ldr	r2, [r3, #0]
 8001d12:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001d16:	ee17 3a90 	vmov	r3, s15
 8001d1a:	65d3      	str	r3, [r2, #92]	@ 0x5c
	__HAL_TIM_SET_COMPARE(act->htim, act->pwm_channel2, (uint32_t)(roundf(update_value)));
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	68db      	ldr	r3, [r3, #12]
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d10d      	bne.n	8001d40 <init_actuator_handler+0x200>
 8001d24:	693b      	ldr	r3, [r7, #16]
 8001d26:	ee07 3a90 	vmov	s15, r3
 8001d2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001d38:	ee17 2a90 	vmov	r2, s15
 8001d3c:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8001d3e:	e054      	b.n	8001dea <init_actuator_handler+0x2aa>
	__HAL_TIM_SET_COMPARE(act->htim, act->pwm_channel2, (uint32_t)(roundf(update_value)));
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	68db      	ldr	r3, [r3, #12]
 8001d44:	2b04      	cmp	r3, #4
 8001d46:	d10d      	bne.n	8001d64 <init_actuator_handler+0x224>
 8001d48:	693b      	ldr	r3, [r7, #16]
 8001d4a:	ee07 3a90 	vmov	s15, r3
 8001d4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	681a      	ldr	r2, [r3, #0]
 8001d58:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001d5c:	ee17 3a90 	vmov	r3, s15
 8001d60:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8001d62:	e042      	b.n	8001dea <init_actuator_handler+0x2aa>
	__HAL_TIM_SET_COMPARE(act->htim, act->pwm_channel2, (uint32_t)(roundf(update_value)));
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	68db      	ldr	r3, [r3, #12]
 8001d68:	2b08      	cmp	r3, #8
 8001d6a:	d10d      	bne.n	8001d88 <init_actuator_handler+0x248>
 8001d6c:	693b      	ldr	r3, [r7, #16]
 8001d6e:	ee07 3a90 	vmov	s15, r3
 8001d72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	681a      	ldr	r2, [r3, #0]
 8001d7c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001d80:	ee17 3a90 	vmov	r3, s15
 8001d84:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8001d86:	e030      	b.n	8001dea <init_actuator_handler+0x2aa>
	__HAL_TIM_SET_COMPARE(act->htim, act->pwm_channel2, (uint32_t)(roundf(update_value)));
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	68db      	ldr	r3, [r3, #12]
 8001d8c:	2b0c      	cmp	r3, #12
 8001d8e:	d10d      	bne.n	8001dac <init_actuator_handler+0x26c>
 8001d90:	693b      	ldr	r3, [r7, #16]
 8001d92:	ee07 3a90 	vmov	s15, r3
 8001d96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	681a      	ldr	r2, [r3, #0]
 8001da0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001da4:	ee17 3a90 	vmov	r3, s15
 8001da8:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8001daa:	e01e      	b.n	8001dea <init_actuator_handler+0x2aa>
	__HAL_TIM_SET_COMPARE(act->htim, act->pwm_channel2, (uint32_t)(roundf(update_value)));
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	68db      	ldr	r3, [r3, #12]
 8001db0:	2b10      	cmp	r3, #16
 8001db2:	d10d      	bne.n	8001dd0 <init_actuator_handler+0x290>
 8001db4:	693b      	ldr	r3, [r7, #16]
 8001db6:	ee07 3a90 	vmov	s15, r3
 8001dba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	681a      	ldr	r2, [r3, #0]
 8001dc4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001dc8:	ee17 3a90 	vmov	r3, s15
 8001dcc:	6593      	str	r3, [r2, #88]	@ 0x58
}
 8001dce:	e00c      	b.n	8001dea <init_actuator_handler+0x2aa>
	__HAL_TIM_SET_COMPARE(act->htim, act->pwm_channel2, (uint32_t)(roundf(update_value)));
 8001dd0:	693b      	ldr	r3, [r7, #16]
 8001dd2:	ee07 3a90 	vmov	s15, r3
 8001dd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	681a      	ldr	r2, [r3, #0]
 8001de0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001de4:	ee17 3a90 	vmov	r3, s15
 8001de8:	65d3      	str	r3, [r2, #92]	@ 0x5c
}
 8001dea:	bf00      	nop
 8001dec:	3718      	adds	r7, #24
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bdb0      	pop	{r4, r5, r7, pc}
 8001df2:	bf00      	nop
 8001df4:	f3af 8000 	nop.w
 8001df8:	47ae147b 	.word	0x47ae147b
 8001dfc:	3f847ae1 	.word	0x3f847ae1
 8001e00:	00030d40 	.word	0x00030d40
 8001e04:	02625a00 	.word	0x02625a00

08001e08 <get_actuator_current>:

void get_actuator_current(ADC_HandleTypeDef *hadc,volatile float voltagebuf[],volatile float currentbuf[],uint8_t Channels_mask[])
{
 8001e08:	b590      	push	{r4, r7, lr}
 8001e0a:	b089      	sub	sp, #36	@ 0x24
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	60f8      	str	r0, [r7, #12]
 8001e10:	60b9      	str	r1, [r7, #8]
 8001e12:	607a      	str	r2, [r7, #4]
 8001e14:	603b      	str	r3, [r7, #0]
	volatile uint16_t adc_raw[NUM_DRIVERS];
	if(Channels_mask[0] == 1)
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	781b      	ldrb	r3, [r3, #0]
 8001e1a:	2b01      	cmp	r3, #1
 8001e1c:	d13e      	bne.n	8001e9c <get_actuator_current+0x94>
	{
		ADC_Select_CH1(hadc);
 8001e1e:	68f8      	ldr	r0, [r7, #12]
 8001e20:	f000 f972 	bl	8002108 <ADC_Select_CH1>
		HAL_ADC_Start(hadc);
 8001e24:	68f8      	ldr	r0, [r7, #12]
 8001e26:	f004 fe05 	bl	8006a34 <HAL_ADC_Start>
		if (HAL_ADC_PollForConversion(hadc, 10) != HAL_OK)
 8001e2a:	210a      	movs	r1, #10
 8001e2c:	68f8      	ldr	r0, [r7, #12]
 8001e2e:	f004 fe97 	bl	8006b60 <HAL_ADC_PollForConversion>
 8001e32:	4603      	mov	r3, r0
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d002      	beq.n	8001e3e <get_actuator_current+0x36>
		{
			Error_Handler();
 8001e38:	f002 f85a 	bl	8003ef0 <Error_Handler>
 8001e3c:	e02b      	b.n	8001e96 <get_actuator_current+0x8e>
		}
		else
		{
			adc_raw[0] = HAL_ADC_GetValue(hadc);
 8001e3e:	68f8      	ldr	r0, [r7, #12]
 8001e40:	f004 ff1d 	bl	8006c7e <HAL_ADC_GetValue>
 8001e44:	4603      	mov	r3, r0
 8001e46:	b29b      	uxth	r3, r3
 8001e48:	82bb      	strh	r3, [r7, #20]
			voltagebuf[0] = (volatile float)adc_raw[0] * (3.3/(pow(2,12) - 1));
 8001e4a:	8abb      	ldrh	r3, [r7, #20]
 8001e4c:	b29b      	uxth	r3, r3
 8001e4e:	ee07 3a90 	vmov	s15, r3
 8001e52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e56:	ee17 0a90 	vmov	r0, s15
 8001e5a:	f7fe fb7d 	bl	8000558 <__aeabi_f2d>
 8001e5e:	a3a2      	add	r3, pc, #648	@ (adr r3, 80020e8 <get_actuator_current+0x2e0>)
 8001e60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e64:	f7fe fbd0 	bl	8000608 <__aeabi_dmul>
 8001e68:	4602      	mov	r2, r0
 8001e6a:	460b      	mov	r3, r1
 8001e6c:	4610      	mov	r0, r2
 8001e6e:	4619      	mov	r1, r3
 8001e70:	f7fe fea2 	bl	8000bb8 <__aeabi_d2f>
 8001e74:	4602      	mov	r2, r0
 8001e76:	68bb      	ldr	r3, [r7, #8]
 8001e78:	601a      	str	r2, [r3, #0]
			currentbuf[0] = (volatile float)(voltagebuf[0]/(Rsense[0]*Aipropri));
 8001e7a:	68bb      	ldr	r3, [r7, #8]
 8001e7c:	edd3 6a00 	vldr	s13, [r3]
 8001e80:	ed9f 7a9b 	vldr	s14, [pc, #620]	@ 80020f0 <get_actuator_current+0x2e8>
 8001e84:	eddf 7a9b 	vldr	s15, [pc, #620]	@ 80020f4 <get_actuator_current+0x2ec>
 8001e88:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e8c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	edc3 7a00 	vstr	s15, [r3]
#if enable_printf
			printf("Channel 1 digits: %d,voltage value:  %f v, current value: %f A \n",adc_raw[0],voltagebuf[0],currentbuf[0]);
#endif
		}
		HAL_ADC_Stop(hadc);
 8001e96:	68f8      	ldr	r0, [r7, #12]
 8001e98:	f004 fe2f 	bl	8006afa <HAL_ADC_Stop>
	}
	if(Channels_mask[1] == 1)
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	3301      	adds	r3, #1
 8001ea0:	781b      	ldrb	r3, [r3, #0]
 8001ea2:	2b01      	cmp	r3, #1
 8001ea4:	d141      	bne.n	8001f2a <get_actuator_current+0x122>
	{
		ADC_Select_CH2(hadc);
 8001ea6:	68f8      	ldr	r0, [r7, #12]
 8001ea8:	f000 f956 	bl	8002158 <ADC_Select_CH2>
		HAL_ADC_Start(hadc);
 8001eac:	68f8      	ldr	r0, [r7, #12]
 8001eae:	f004 fdc1 	bl	8006a34 <HAL_ADC_Start>
		if (HAL_ADC_PollForConversion(hadc, 10) != HAL_OK)
 8001eb2:	210a      	movs	r1, #10
 8001eb4:	68f8      	ldr	r0, [r7, #12]
 8001eb6:	f004 fe53 	bl	8006b60 <HAL_ADC_PollForConversion>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d002      	beq.n	8001ec6 <get_actuator_current+0xbe>
		{
			Error_Handler();
 8001ec0:	f002 f816 	bl	8003ef0 <Error_Handler>
 8001ec4:	e02e      	b.n	8001f24 <get_actuator_current+0x11c>
		}
		else
		{
			adc_raw[1] = HAL_ADC_GetValue(hadc);
 8001ec6:	68f8      	ldr	r0, [r7, #12]
 8001ec8:	f004 fed9 	bl	8006c7e <HAL_ADC_GetValue>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	b29b      	uxth	r3, r3
 8001ed0:	82fb      	strh	r3, [r7, #22]
			voltagebuf[1] = (volatile float)adc_raw[1] * (3.3/(pow(2,12) - 1));
 8001ed2:	8afb      	ldrh	r3, [r7, #22]
 8001ed4:	b29b      	uxth	r3, r3
 8001ed6:	ee07 3a90 	vmov	s15, r3
 8001eda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001ede:	ee17 0a90 	vmov	r0, s15
 8001ee2:	f7fe fb39 	bl	8000558 <__aeabi_f2d>
 8001ee6:	a380      	add	r3, pc, #512	@ (adr r3, 80020e8 <get_actuator_current+0x2e0>)
 8001ee8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001eec:	f7fe fb8c 	bl	8000608 <__aeabi_dmul>
 8001ef0:	4602      	mov	r2, r0
 8001ef2:	460b      	mov	r3, r1
 8001ef4:	4610      	mov	r0, r2
 8001ef6:	4619      	mov	r1, r3
 8001ef8:	68bb      	ldr	r3, [r7, #8]
 8001efa:	1d1c      	adds	r4, r3, #4
 8001efc:	f7fe fe5c 	bl	8000bb8 <__aeabi_d2f>
 8001f00:	4603      	mov	r3, r0
 8001f02:	6023      	str	r3, [r4, #0]
			currentbuf[1] = (volatile float)(voltagebuf[1]/(Rsense[1]*Aipropri));
 8001f04:	68bb      	ldr	r3, [r7, #8]
 8001f06:	3304      	adds	r3, #4
 8001f08:	edd3 6a00 	vldr	s13, [r3]
 8001f0c:	ed9f 7a7a 	vldr	s14, [pc, #488]	@ 80020f8 <get_actuator_current+0x2f0>
 8001f10:	eddf 7a78 	vldr	s15, [pc, #480]	@ 80020f4 <get_actuator_current+0x2ec>
 8001f14:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	3304      	adds	r3, #4
 8001f1c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001f20:	edc3 7a00 	vstr	s15, [r3]
#if enable_printf
			printf("Channel 2 digits: %d,voltage value:  %f v, current value: %f A \n",adc_raw[1],voltagebuf[1],currentbuf[1]);
#endif
		}
		HAL_ADC_Stop(hadc);
 8001f24:	68f8      	ldr	r0, [r7, #12]
 8001f26:	f004 fde8 	bl	8006afa <HAL_ADC_Stop>
	}
	if(Channels_mask[2] == 1)
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	3302      	adds	r3, #2
 8001f2e:	781b      	ldrb	r3, [r3, #0]
 8001f30:	2b01      	cmp	r3, #1
 8001f32:	d142      	bne.n	8001fba <get_actuator_current+0x1b2>
	{
		ADC_Select_CH3(hadc);
 8001f34:	68f8      	ldr	r0, [r7, #12]
 8001f36:	f000 f937 	bl	80021a8 <ADC_Select_CH3>
		HAL_ADC_Start(hadc);
 8001f3a:	68f8      	ldr	r0, [r7, #12]
 8001f3c:	f004 fd7a 	bl	8006a34 <HAL_ADC_Start>
		if (HAL_ADC_PollForConversion(hadc, 10) != HAL_OK)
 8001f40:	210a      	movs	r1, #10
 8001f42:	68f8      	ldr	r0, [r7, #12]
 8001f44:	f004 fe0c 	bl	8006b60 <HAL_ADC_PollForConversion>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d002      	beq.n	8001f54 <get_actuator_current+0x14c>
		{
			Error_Handler();
 8001f4e:	f001 ffcf 	bl	8003ef0 <Error_Handler>
 8001f52:	e02f      	b.n	8001fb4 <get_actuator_current+0x1ac>
		}
		else
		{
			adc_raw[2] = HAL_ADC_GetValue(hadc);
 8001f54:	68f8      	ldr	r0, [r7, #12]
 8001f56:	f004 fe92 	bl	8006c7e <HAL_ADC_GetValue>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	b29b      	uxth	r3, r3
 8001f5e:	833b      	strh	r3, [r7, #24]
			voltagebuf[2] = (volatile float)adc_raw[2] * (3.3/(pow(2,12) - 1));
 8001f60:	8b3b      	ldrh	r3, [r7, #24]
 8001f62:	b29b      	uxth	r3, r3
 8001f64:	ee07 3a90 	vmov	s15, r3
 8001f68:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f6c:	ee17 0a90 	vmov	r0, s15
 8001f70:	f7fe faf2 	bl	8000558 <__aeabi_f2d>
 8001f74:	a35c      	add	r3, pc, #368	@ (adr r3, 80020e8 <get_actuator_current+0x2e0>)
 8001f76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f7a:	f7fe fb45 	bl	8000608 <__aeabi_dmul>
 8001f7e:	4602      	mov	r2, r0
 8001f80:	460b      	mov	r3, r1
 8001f82:	4610      	mov	r0, r2
 8001f84:	4619      	mov	r1, r3
 8001f86:	68bb      	ldr	r3, [r7, #8]
 8001f88:	f103 0408 	add.w	r4, r3, #8
 8001f8c:	f7fe fe14 	bl	8000bb8 <__aeabi_d2f>
 8001f90:	4603      	mov	r3, r0
 8001f92:	6023      	str	r3, [r4, #0]
			currentbuf[2] = (volatile float)(voltagebuf[2]/(Rsense[2]*Aipropri));
 8001f94:	68bb      	ldr	r3, [r7, #8]
 8001f96:	3308      	adds	r3, #8
 8001f98:	edd3 6a00 	vldr	s13, [r3]
 8001f9c:	ed9f 7a57 	vldr	s14, [pc, #348]	@ 80020fc <get_actuator_current+0x2f4>
 8001fa0:	eddf 7a54 	vldr	s15, [pc, #336]	@ 80020f4 <get_actuator_current+0x2ec>
 8001fa4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	3308      	adds	r3, #8
 8001fac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001fb0:	edc3 7a00 	vstr	s15, [r3]
#if enable_printf
			printf("Channel 3 digits: %d,voltage value:  %f v, current value: %f A \n",adc_raw[2],voltagebuf[2],currentbuf[2]);
#endif
		}
		HAL_ADC_Stop(hadc);
 8001fb4:	68f8      	ldr	r0, [r7, #12]
 8001fb6:	f004 fda0 	bl	8006afa <HAL_ADC_Stop>
	}
	if(Channels_mask[3] == 1)
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	3303      	adds	r3, #3
 8001fbe:	781b      	ldrb	r3, [r3, #0]
 8001fc0:	2b01      	cmp	r3, #1
 8001fc2:	d142      	bne.n	800204a <get_actuator_current+0x242>
	{
		ADC_Select_CH4(hadc);
 8001fc4:	68f8      	ldr	r0, [r7, #12]
 8001fc6:	f000 f917 	bl	80021f8 <ADC_Select_CH4>
		HAL_ADC_Start(hadc);
 8001fca:	68f8      	ldr	r0, [r7, #12]
 8001fcc:	f004 fd32 	bl	8006a34 <HAL_ADC_Start>
		if (HAL_ADC_PollForConversion(hadc, 10) != HAL_OK)
 8001fd0:	210a      	movs	r1, #10
 8001fd2:	68f8      	ldr	r0, [r7, #12]
 8001fd4:	f004 fdc4 	bl	8006b60 <HAL_ADC_PollForConversion>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d002      	beq.n	8001fe4 <get_actuator_current+0x1dc>
		{
			Error_Handler();
 8001fde:	f001 ff87 	bl	8003ef0 <Error_Handler>
 8001fe2:	e02f      	b.n	8002044 <get_actuator_current+0x23c>
		}
		else
		{
			adc_raw[3] = HAL_ADC_GetValue(hadc);
 8001fe4:	68f8      	ldr	r0, [r7, #12]
 8001fe6:	f004 fe4a 	bl	8006c7e <HAL_ADC_GetValue>
 8001fea:	4603      	mov	r3, r0
 8001fec:	b29b      	uxth	r3, r3
 8001fee:	837b      	strh	r3, [r7, #26]
			voltagebuf[3] = (volatile float)adc_raw[3] * (3.3/(pow(2,12) - 1));
 8001ff0:	8b7b      	ldrh	r3, [r7, #26]
 8001ff2:	b29b      	uxth	r3, r3
 8001ff4:	ee07 3a90 	vmov	s15, r3
 8001ff8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001ffc:	ee17 0a90 	vmov	r0, s15
 8002000:	f7fe faaa 	bl	8000558 <__aeabi_f2d>
 8002004:	a338      	add	r3, pc, #224	@ (adr r3, 80020e8 <get_actuator_current+0x2e0>)
 8002006:	e9d3 2300 	ldrd	r2, r3, [r3]
 800200a:	f7fe fafd 	bl	8000608 <__aeabi_dmul>
 800200e:	4602      	mov	r2, r0
 8002010:	460b      	mov	r3, r1
 8002012:	4610      	mov	r0, r2
 8002014:	4619      	mov	r1, r3
 8002016:	68bb      	ldr	r3, [r7, #8]
 8002018:	f103 040c 	add.w	r4, r3, #12
 800201c:	f7fe fdcc 	bl	8000bb8 <__aeabi_d2f>
 8002020:	4603      	mov	r3, r0
 8002022:	6023      	str	r3, [r4, #0]
			currentbuf[3] = (volatile float)(voltagebuf[3]/(Rsense[3]*Aipropri));
 8002024:	68bb      	ldr	r3, [r7, #8]
 8002026:	330c      	adds	r3, #12
 8002028:	edd3 6a00 	vldr	s13, [r3]
 800202c:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 8002100 <get_actuator_current+0x2f8>
 8002030:	eddf 7a30 	vldr	s15, [pc, #192]	@ 80020f4 <get_actuator_current+0x2ec>
 8002034:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	330c      	adds	r3, #12
 800203c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002040:	edc3 7a00 	vstr	s15, [r3]
#if enable_printf
			printf("Channel 4 digits: %d,voltage value:  %f v, current value: %f A \n",adc_raw[3],voltagebuf[3],currentbuf[3]);
#endif
		}
		HAL_ADC_Stop(hadc);
 8002044:	68f8      	ldr	r0, [r7, #12]
 8002046:	f004 fd58 	bl	8006afa <HAL_ADC_Stop>
	}
	if(Channels_mask[4] == 1)
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	3304      	adds	r3, #4
 800204e:	781b      	ldrb	r3, [r3, #0]
 8002050:	2b01      	cmp	r3, #1
 8002052:	d142      	bne.n	80020da <get_actuator_current+0x2d2>
	{
		ADC_Select_CH16(hadc);
 8002054:	68f8      	ldr	r0, [r7, #12]
 8002056:	f000 f8f7 	bl	8002248 <ADC_Select_CH16>
		HAL_ADC_Start(hadc);
 800205a:	68f8      	ldr	r0, [r7, #12]
 800205c:	f004 fcea 	bl	8006a34 <HAL_ADC_Start>
		if (HAL_ADC_PollForConversion(hadc,10) != HAL_OK)
 8002060:	210a      	movs	r1, #10
 8002062:	68f8      	ldr	r0, [r7, #12]
 8002064:	f004 fd7c 	bl	8006b60 <HAL_ADC_PollForConversion>
 8002068:	4603      	mov	r3, r0
 800206a:	2b00      	cmp	r3, #0
 800206c:	d002      	beq.n	8002074 <get_actuator_current+0x26c>
		{
			Error_Handler();
 800206e:	f001 ff3f 	bl	8003ef0 <Error_Handler>
 8002072:	e02f      	b.n	80020d4 <get_actuator_current+0x2cc>
		}
		else
		{
			adc_raw[4] = HAL_ADC_GetValue(hadc);
 8002074:	68f8      	ldr	r0, [r7, #12]
 8002076:	f004 fe02 	bl	8006c7e <HAL_ADC_GetValue>
 800207a:	4603      	mov	r3, r0
 800207c:	b29b      	uxth	r3, r3
 800207e:	83bb      	strh	r3, [r7, #28]
			voltagebuf[4] = (volatile float)adc_raw[4] * (3.3/(pow(2,12) - 1));
 8002080:	8bbb      	ldrh	r3, [r7, #28]
 8002082:	b29b      	uxth	r3, r3
 8002084:	ee07 3a90 	vmov	s15, r3
 8002088:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800208c:	ee17 0a90 	vmov	r0, s15
 8002090:	f7fe fa62 	bl	8000558 <__aeabi_f2d>
 8002094:	a314      	add	r3, pc, #80	@ (adr r3, 80020e8 <get_actuator_current+0x2e0>)
 8002096:	e9d3 2300 	ldrd	r2, r3, [r3]
 800209a:	f7fe fab5 	bl	8000608 <__aeabi_dmul>
 800209e:	4602      	mov	r2, r0
 80020a0:	460b      	mov	r3, r1
 80020a2:	4610      	mov	r0, r2
 80020a4:	4619      	mov	r1, r3
 80020a6:	68bb      	ldr	r3, [r7, #8]
 80020a8:	f103 0410 	add.w	r4, r3, #16
 80020ac:	f7fe fd84 	bl	8000bb8 <__aeabi_d2f>
 80020b0:	4603      	mov	r3, r0
 80020b2:	6023      	str	r3, [r4, #0]
			currentbuf[4] = (volatile float)(voltagebuf[4]/(Rsense[4]*Aipropri));
 80020b4:	68bb      	ldr	r3, [r7, #8]
 80020b6:	3310      	adds	r3, #16
 80020b8:	edd3 6a00 	vldr	s13, [r3]
 80020bc:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 8002104 <get_actuator_current+0x2fc>
 80020c0:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 80020f4 <get_actuator_current+0x2ec>
 80020c4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	3310      	adds	r3, #16
 80020cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80020d0:	edc3 7a00 	vstr	s15, [r3]
#if enable_printf
			printf("Channel 16 digits: %d,voltage value:  %f v, current value: %f A \n",adc_raw[4],voltagebuf[4],currentbuf[4]);
#endif
		}
		HAL_ADC_Stop(hadc);
 80020d4:	68f8      	ldr	r0, [r7, #12]
 80020d6:	f004 fd10 	bl	8006afa <HAL_ADC_Stop>
	}
}
 80020da:	bf00      	nop
 80020dc:	3724      	adds	r7, #36	@ 0x24
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd90      	pop	{r4, r7, pc}
 80020e2:	bf00      	nop
 80020e4:	f3af 8000 	nop.w
 80020e8:	e734d9b4 	.word	0xe734d9b4
 80020ec:	3f4a680c 	.word	0x3f4a680c
 80020f0:	44f6a000 	.word	0x44f6a000
 80020f4:	3ace703b 	.word	0x3ace703b
 80020f8:	44fd8000 	.word	0x44fd8000
 80020fc:	44f54000 	.word	0x44f54000
 8002100:	44f90000 	.word	0x44f90000
 8002104:	44f76000 	.word	0x44f76000

08002108 <ADC_Select_CH1>:
	printf("PWM signals stopped !! \n");
#endif
}

void ADC_Select_CH1 (ADC_HandleTypeDef *hadc)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b088      	sub	sp, #32
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
	  ADC_ChannelConfTypeDef sConfig = {0};
 8002110:	f107 0308 	add.w	r3, r7, #8
 8002114:	2200      	movs	r2, #0
 8002116:	601a      	str	r2, [r3, #0]
 8002118:	605a      	str	r2, [r3, #4]
 800211a:	609a      	str	r2, [r3, #8]
 800211c:	60da      	str	r2, [r3, #12]
 800211e:	611a      	str	r2, [r3, #16]
 8002120:	615a      	str	r2, [r3, #20]
	  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	  */
	  sConfig.Channel = ADC_CHANNEL_1;
 8002122:	4b0c      	ldr	r3, [pc, #48]	@ (8002154 <ADC_Select_CH1+0x4c>)
 8002124:	60bb      	str	r3, [r7, #8]
	  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002126:	2306      	movs	r3, #6
 8002128:	60fb      	str	r3, [r7, #12]
	  sConfig.SamplingTime = ADC_SAMPLETIME_247CYCLES_5;
 800212a:	2306      	movs	r3, #6
 800212c:	613b      	str	r3, [r7, #16]
	  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800212e:	237f      	movs	r3, #127	@ 0x7f
 8002130:	617b      	str	r3, [r7, #20]
	  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002132:	2304      	movs	r3, #4
 8002134:	61bb      	str	r3, [r7, #24]
	  if (HAL_ADC_ConfigChannel(hadc, &sConfig) != HAL_OK)
 8002136:	f107 0308 	add.w	r3, r7, #8
 800213a:	4619      	mov	r1, r3
 800213c:	6878      	ldr	r0, [r7, #4]
 800213e:	f004 fdab 	bl	8006c98 <HAL_ADC_ConfigChannel>
 8002142:	4603      	mov	r3, r0
 8002144:	2b00      	cmp	r3, #0
 8002146:	d001      	beq.n	800214c <ADC_Select_CH1+0x44>
	  {
	    Error_Handler();
 8002148:	f001 fed2 	bl	8003ef0 <Error_Handler>
	  }
}
 800214c:	bf00      	nop
 800214e:	3720      	adds	r7, #32
 8002150:	46bd      	mov	sp, r7
 8002152:	bd80      	pop	{r7, pc}
 8002154:	04300002 	.word	0x04300002

08002158 <ADC_Select_CH2>:

void ADC_Select_CH2 (ADC_HandleTypeDef *hadc)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b088      	sub	sp, #32
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
	ADC_ChannelConfTypeDef sConfig = {0};
 8002160:	f107 0308 	add.w	r3, r7, #8
 8002164:	2200      	movs	r2, #0
 8002166:	601a      	str	r2, [r3, #0]
 8002168:	605a      	str	r2, [r3, #4]
 800216a:	609a      	str	r2, [r3, #8]
 800216c:	60da      	str	r2, [r3, #12]
 800216e:	611a      	str	r2, [r3, #16]
 8002170:	615a      	str	r2, [r3, #20]
	  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	  */
	  sConfig.Channel = ADC_CHANNEL_2;
 8002172:	4b0c      	ldr	r3, [pc, #48]	@ (80021a4 <ADC_Select_CH2+0x4c>)
 8002174:	60bb      	str	r3, [r7, #8]
	  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002176:	2306      	movs	r3, #6
 8002178:	60fb      	str	r3, [r7, #12]
	  sConfig.SamplingTime = ADC_SAMPLETIME_247CYCLES_5 ;
 800217a:	2306      	movs	r3, #6
 800217c:	613b      	str	r3, [r7, #16]
	  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800217e:	237f      	movs	r3, #127	@ 0x7f
 8002180:	617b      	str	r3, [r7, #20]
	  	  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002182:	2304      	movs	r3, #4
 8002184:	61bb      	str	r3, [r7, #24]
	  if (HAL_ADC_ConfigChannel(hadc, &sConfig) != HAL_OK)
 8002186:	f107 0308 	add.w	r3, r7, #8
 800218a:	4619      	mov	r1, r3
 800218c:	6878      	ldr	r0, [r7, #4]
 800218e:	f004 fd83 	bl	8006c98 <HAL_ADC_ConfigChannel>
 8002192:	4603      	mov	r3, r0
 8002194:	2b00      	cmp	r3, #0
 8002196:	d001      	beq.n	800219c <ADC_Select_CH2+0x44>
	  {
	    Error_Handler();
 8002198:	f001 feaa 	bl	8003ef0 <Error_Handler>
	  }
}
 800219c:	bf00      	nop
 800219e:	3720      	adds	r7, #32
 80021a0:	46bd      	mov	sp, r7
 80021a2:	bd80      	pop	{r7, pc}
 80021a4:	08600004 	.word	0x08600004

080021a8 <ADC_Select_CH3>:

void ADC_Select_CH3 (ADC_HandleTypeDef *hadc)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b088      	sub	sp, #32
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
	ADC_ChannelConfTypeDef sConfig = {0};
 80021b0:	f107 0308 	add.w	r3, r7, #8
 80021b4:	2200      	movs	r2, #0
 80021b6:	601a      	str	r2, [r3, #0]
 80021b8:	605a      	str	r2, [r3, #4]
 80021ba:	609a      	str	r2, [r3, #8]
 80021bc:	60da      	str	r2, [r3, #12]
 80021be:	611a      	str	r2, [r3, #16]
 80021c0:	615a      	str	r2, [r3, #20]
	  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	  */
	  sConfig.Channel = ADC_CHANNEL_3;
 80021c2:	4b0c      	ldr	r3, [pc, #48]	@ (80021f4 <ADC_Select_CH3+0x4c>)
 80021c4:	60bb      	str	r3, [r7, #8]
	  sConfig.Rank = ADC_REGULAR_RANK_1;
 80021c6:	2306      	movs	r3, #6
 80021c8:	60fb      	str	r3, [r7, #12]
	  sConfig.SamplingTime = ADC_SAMPLETIME_247CYCLES_5;
 80021ca:	2306      	movs	r3, #6
 80021cc:	613b      	str	r3, [r7, #16]
	  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80021ce:	237f      	movs	r3, #127	@ 0x7f
 80021d0:	617b      	str	r3, [r7, #20]
	  	  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80021d2:	2304      	movs	r3, #4
 80021d4:	61bb      	str	r3, [r7, #24]
	  if (HAL_ADC_ConfigChannel(hadc, &sConfig) != HAL_OK)
 80021d6:	f107 0308 	add.w	r3, r7, #8
 80021da:	4619      	mov	r1, r3
 80021dc:	6878      	ldr	r0, [r7, #4]
 80021de:	f004 fd5b 	bl	8006c98 <HAL_ADC_ConfigChannel>
 80021e2:	4603      	mov	r3, r0
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d001      	beq.n	80021ec <ADC_Select_CH3+0x44>
	  {
	    Error_Handler();
 80021e8:	f001 fe82 	bl	8003ef0 <Error_Handler>
	  }
}
 80021ec:	bf00      	nop
 80021ee:	3720      	adds	r7, #32
 80021f0:	46bd      	mov	sp, r7
 80021f2:	bd80      	pop	{r7, pc}
 80021f4:	0c900008 	.word	0x0c900008

080021f8 <ADC_Select_CH4>:

void ADC_Select_CH4 (ADC_HandleTypeDef *hadc)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b088      	sub	sp, #32
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
	ADC_ChannelConfTypeDef sConfig = {0};
 8002200:	f107 0308 	add.w	r3, r7, #8
 8002204:	2200      	movs	r2, #0
 8002206:	601a      	str	r2, [r3, #0]
 8002208:	605a      	str	r2, [r3, #4]
 800220a:	609a      	str	r2, [r3, #8]
 800220c:	60da      	str	r2, [r3, #12]
 800220e:	611a      	str	r2, [r3, #16]
 8002210:	615a      	str	r2, [r3, #20]
	  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	  */
	  sConfig.Channel = ADC_CHANNEL_4;
 8002212:	4b0c      	ldr	r3, [pc, #48]	@ (8002244 <ADC_Select_CH4+0x4c>)
 8002214:	60bb      	str	r3, [r7, #8]
	  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002216:	2306      	movs	r3, #6
 8002218:	60fb      	str	r3, [r7, #12]
	  sConfig.SamplingTime = ADC_SAMPLETIME_247CYCLES_5;
 800221a:	2306      	movs	r3, #6
 800221c:	613b      	str	r3, [r7, #16]
	  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800221e:	237f      	movs	r3, #127	@ 0x7f
 8002220:	617b      	str	r3, [r7, #20]
	  	  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002222:	2304      	movs	r3, #4
 8002224:	61bb      	str	r3, [r7, #24]
	  if (HAL_ADC_ConfigChannel(hadc, &sConfig) != HAL_OK)
 8002226:	f107 0308 	add.w	r3, r7, #8
 800222a:	4619      	mov	r1, r3
 800222c:	6878      	ldr	r0, [r7, #4]
 800222e:	f004 fd33 	bl	8006c98 <HAL_ADC_ConfigChannel>
 8002232:	4603      	mov	r3, r0
 8002234:	2b00      	cmp	r3, #0
 8002236:	d001      	beq.n	800223c <ADC_Select_CH4+0x44>
	  {
	    Error_Handler();
 8002238:	f001 fe5a 	bl	8003ef0 <Error_Handler>
	  }
}
 800223c:	bf00      	nop
 800223e:	3720      	adds	r7, #32
 8002240:	46bd      	mov	sp, r7
 8002242:	bd80      	pop	{r7, pc}
 8002244:	10c00010 	.word	0x10c00010

08002248 <ADC_Select_CH16>:

void ADC_Select_CH16 (ADC_HandleTypeDef *hadc)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b088      	sub	sp, #32
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
	ADC_ChannelConfTypeDef sConfig = {0};
 8002250:	f107 0308 	add.w	r3, r7, #8
 8002254:	2200      	movs	r2, #0
 8002256:	601a      	str	r2, [r3, #0]
 8002258:	605a      	str	r2, [r3, #4]
 800225a:	609a      	str	r2, [r3, #8]
 800225c:	60da      	str	r2, [r3, #12]
 800225e:	611a      	str	r2, [r3, #16]
 8002260:	615a      	str	r2, [r3, #20]
	  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	  */
	  sConfig.Channel = ADC_CHANNEL_16;
 8002262:	4b0c      	ldr	r3, [pc, #48]	@ (8002294 <ADC_Select_CH16+0x4c>)
 8002264:	60bb      	str	r3, [r7, #8]
	  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002266:	2306      	movs	r3, #6
 8002268:	60fb      	str	r3, [r7, #12]
	  sConfig.SamplingTime = ADC_SAMPLETIME_247CYCLES_5 ;sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800226a:	2306      	movs	r3, #6
 800226c:	613b      	str	r3, [r7, #16]
 800226e:	237f      	movs	r3, #127	@ 0x7f
 8002270:	617b      	str	r3, [r7, #20]
	  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002272:	2304      	movs	r3, #4
 8002274:	61bb      	str	r3, [r7, #24]
	  if (HAL_ADC_ConfigChannel(hadc, &sConfig) != HAL_OK)
 8002276:	f107 0308 	add.w	r3, r7, #8
 800227a:	4619      	mov	r1, r3
 800227c:	6878      	ldr	r0, [r7, #4]
 800227e:	f004 fd0b 	bl	8006c98 <HAL_ADC_ConfigChannel>
 8002282:	4603      	mov	r3, r0
 8002284:	2b00      	cmp	r3, #0
 8002286:	d001      	beq.n	800228c <ADC_Select_CH16+0x44>
	  {
	    Error_Handler();
 8002288:	f001 fe32 	bl	8003ef0 <Error_Handler>
	  }
}
 800228c:	bf00      	nop
 800228e:	3720      	adds	r7, #32
 8002290:	46bd      	mov	sp, r7
 8002292:	bd80      	pop	{r7, pc}
 8002294:	43210000 	.word	0x43210000

08002298 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b086      	sub	sp, #24
 800229c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800229e:	463b      	mov	r3, r7
 80022a0:	2200      	movs	r2, #0
 80022a2:	601a      	str	r2, [r3, #0]
 80022a4:	605a      	str	r2, [r3, #4]
 80022a6:	609a      	str	r2, [r3, #8]
 80022a8:	60da      	str	r2, [r3, #12]
 80022aa:	611a      	str	r2, [r3, #16]
 80022ac:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80022ae:	4b24      	ldr	r3, [pc, #144]	@ (8002340 <MX_ADC1_Init+0xa8>)
 80022b0:	4a24      	ldr	r2, [pc, #144]	@ (8002344 <MX_ADC1_Init+0xac>)
 80022b2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 80022b4:	4b22      	ldr	r3, [pc, #136]	@ (8002340 <MX_ADC1_Init+0xa8>)
 80022b6:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80022ba:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80022bc:	4b20      	ldr	r3, [pc, #128]	@ (8002340 <MX_ADC1_Init+0xa8>)
 80022be:	2200      	movs	r2, #0
 80022c0:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80022c2:	4b1f      	ldr	r3, [pc, #124]	@ (8002340 <MX_ADC1_Init+0xa8>)
 80022c4:	2200      	movs	r2, #0
 80022c6:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80022c8:	4b1d      	ldr	r3, [pc, #116]	@ (8002340 <MX_ADC1_Init+0xa8>)
 80022ca:	2201      	movs	r2, #1
 80022cc:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80022ce:	4b1c      	ldr	r3, [pc, #112]	@ (8002340 <MX_ADC1_Init+0xa8>)
 80022d0:	2204      	movs	r2, #4
 80022d2:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80022d4:	4b1a      	ldr	r3, [pc, #104]	@ (8002340 <MX_ADC1_Init+0xa8>)
 80022d6:	2200      	movs	r2, #0
 80022d8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80022da:	4b19      	ldr	r3, [pc, #100]	@ (8002340 <MX_ADC1_Init+0xa8>)
 80022dc:	2201      	movs	r2, #1
 80022de:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80022e0:	4b17      	ldr	r3, [pc, #92]	@ (8002340 <MX_ADC1_Init+0xa8>)
 80022e2:	2201      	movs	r2, #1
 80022e4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80022e6:	4b16      	ldr	r3, [pc, #88]	@ (8002340 <MX_ADC1_Init+0xa8>)
 80022e8:	2200      	movs	r2, #0
 80022ea:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80022ee:	4b14      	ldr	r3, [pc, #80]	@ (8002340 <MX_ADC1_Init+0xa8>)
 80022f0:	2200      	movs	r2, #0
 80022f2:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80022f4:	4b12      	ldr	r3, [pc, #72]	@ (8002340 <MX_ADC1_Init+0xa8>)
 80022f6:	2200      	movs	r2, #0
 80022f8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80022fa:	4b11      	ldr	r3, [pc, #68]	@ (8002340 <MX_ADC1_Init+0xa8>)
 80022fc:	2200      	movs	r2, #0
 80022fe:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002302:	4b0f      	ldr	r3, [pc, #60]	@ (8002340 <MX_ADC1_Init+0xa8>)
 8002304:	2200      	movs	r2, #0
 8002306:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = ENABLE;
 8002308:	4b0d      	ldr	r3, [pc, #52]	@ (8002340 <MX_ADC1_Init+0xa8>)
 800230a:	2201      	movs	r2, #1
 800230c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_16;
 8002310:	4b0b      	ldr	r3, [pc, #44]	@ (8002340 <MX_ADC1_Init+0xa8>)
 8002312:	220c      	movs	r2, #12
 8002314:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_4;
 8002316:	4b0a      	ldr	r3, [pc, #40]	@ (8002340 <MX_ADC1_Init+0xa8>)
 8002318:	2280      	movs	r2, #128	@ 0x80
 800231a:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc1.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 800231c:	4b08      	ldr	r3, [pc, #32]	@ (8002340 <MX_ADC1_Init+0xa8>)
 800231e:	2200      	movs	r2, #0
 8002320:	645a      	str	r2, [r3, #68]	@ 0x44
  hadc1.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 8002322:	4b07      	ldr	r3, [pc, #28]	@ (8002340 <MX_ADC1_Init+0xa8>)
 8002324:	2201      	movs	r2, #1
 8002326:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002328:	4805      	ldr	r0, [pc, #20]	@ (8002340 <MX_ADC1_Init+0xa8>)
 800232a:	f004 fa37 	bl	800679c <HAL_ADC_Init>
 800232e:	4603      	mov	r3, r0
 8002330:	2b00      	cmp	r3, #0
 8002332:	d001      	beq.n	8002338 <MX_ADC1_Init+0xa0>
  {
    Error_Handler();
 8002334:	f001 fddc 	bl	8003ef0 <Error_Handler>
//  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002338:	bf00      	nop
 800233a:	3718      	adds	r7, #24
 800233c:	46bd      	mov	sp, r7
 800233e:	bd80      	pop	{r7, pc}
 8002340:	20004994 	.word	0x20004994
 8002344:	50040000 	.word	0x50040000

08002348 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b0a4      	sub	sp, #144	@ 0x90
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002350:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8002354:	2200      	movs	r2, #0
 8002356:	601a      	str	r2, [r3, #0]
 8002358:	605a      	str	r2, [r3, #4]
 800235a:	609a      	str	r2, [r3, #8]
 800235c:	60da      	str	r2, [r3, #12]
 800235e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002360:	f107 0314 	add.w	r3, r7, #20
 8002364:	2268      	movs	r2, #104	@ 0x68
 8002366:	2100      	movs	r1, #0
 8002368:	4618      	mov	r0, r3
 800236a:	f00e f857 	bl	801041c <memset>
  if(adcHandle->Instance==ADC1)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4a33      	ldr	r2, [pc, #204]	@ (8002440 <HAL_ADC_MspInit+0xf8>)
 8002374:	4293      	cmp	r3, r2
 8002376:	d15e      	bne.n	8002436 <HAL_ADC_MspInit+0xee>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8002378:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800237c:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800237e:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8002382:	673b      	str	r3, [r7, #112]	@ 0x70
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8002384:	2302      	movs	r3, #2
 8002386:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8002388:	2301      	movs	r3, #1
 800238a:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 800238c:	2308      	movs	r3, #8
 800238e:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8002390:	2307      	movs	r3, #7
 8002392:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8002394:	2302      	movs	r3, #2
 8002396:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV4;
 8002398:	2304      	movs	r3, #4
 800239a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 800239c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80023a0:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80023a2:	f107 0314 	add.w	r3, r7, #20
 80023a6:	4618      	mov	r0, r3
 80023a8:	f006 fd5c 	bl	8008e64 <HAL_RCCEx_PeriphCLKConfig>
 80023ac:	4603      	mov	r3, r0
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d001      	beq.n	80023b6 <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 80023b2:	f001 fd9d 	bl	8003ef0 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80023b6:	4b23      	ldr	r3, [pc, #140]	@ (8002444 <HAL_ADC_MspInit+0xfc>)
 80023b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023ba:	4a22      	ldr	r2, [pc, #136]	@ (8002444 <HAL_ADC_MspInit+0xfc>)
 80023bc:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80023c0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80023c2:	4b20      	ldr	r3, [pc, #128]	@ (8002444 <HAL_ADC_MspInit+0xfc>)
 80023c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023c6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80023ca:	613b      	str	r3, [r7, #16]
 80023cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80023ce:	4b1d      	ldr	r3, [pc, #116]	@ (8002444 <HAL_ADC_MspInit+0xfc>)
 80023d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023d2:	4a1c      	ldr	r2, [pc, #112]	@ (8002444 <HAL_ADC_MspInit+0xfc>)
 80023d4:	f043 0304 	orr.w	r3, r3, #4
 80023d8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80023da:	4b1a      	ldr	r3, [pc, #104]	@ (8002444 <HAL_ADC_MspInit+0xfc>)
 80023dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023de:	f003 0304 	and.w	r3, r3, #4
 80023e2:	60fb      	str	r3, [r7, #12]
 80023e4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023e6:	4b17      	ldr	r3, [pc, #92]	@ (8002444 <HAL_ADC_MspInit+0xfc>)
 80023e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023ea:	4a16      	ldr	r2, [pc, #88]	@ (8002444 <HAL_ADC_MspInit+0xfc>)
 80023ec:	f043 0302 	orr.w	r3, r3, #2
 80023f0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80023f2:	4b14      	ldr	r3, [pc, #80]	@ (8002444 <HAL_ADC_MspInit+0xfc>)
 80023f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023f6:	f003 0302 	and.w	r3, r3, #2
 80023fa:	60bb      	str	r3, [r7, #8]
 80023fc:	68bb      	ldr	r3, [r7, #8]
    PC1     ------> ADC1_IN2
    PC2     ------> ADC1_IN3
    PC3     ------> ADC1_IN4
    PB1     ------> ADC1_IN16
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80023fe:	230f      	movs	r3, #15
 8002400:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8002402:	230b      	movs	r3, #11
 8002404:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002408:	2300      	movs	r3, #0
 800240a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800240e:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8002412:	4619      	mov	r1, r3
 8002414:	480c      	ldr	r0, [pc, #48]	@ (8002448 <HAL_ADC_MspInit+0x100>)
 8002416:	f005 fcc5 	bl	8007da4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800241a:	2302      	movs	r3, #2
 800241c:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800241e:	230b      	movs	r3, #11
 8002420:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002424:	2300      	movs	r3, #0
 8002426:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800242a:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 800242e:	4619      	mov	r1, r3
 8002430:	4806      	ldr	r0, [pc, #24]	@ (800244c <HAL_ADC_MspInit+0x104>)
 8002432:	f005 fcb7 	bl	8007da4 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8002436:	bf00      	nop
 8002438:	3790      	adds	r7, #144	@ 0x90
 800243a:	46bd      	mov	sp, r7
 800243c:	bd80      	pop	{r7, pc}
 800243e:	bf00      	nop
 8002440:	50040000 	.word	0x50040000
 8002444:	40021000 	.word	0x40021000
 8002448:	48000800 	.word	0x48000800
 800244c:	48000400 	.word	0x48000400

08002450 <cBuffInit>:
	if(handle==NULL) return 0;

	return (handle->elemNum == 0);
}

void cBuffInit(circular_buffer_handle* handle, uint8_t* buff, uint32_t buffLen, uint32_t elemNum){
 8002450:	b480      	push	{r7}
 8002452:	b085      	sub	sp, #20
 8002454:	af00      	add	r7, sp, #0
 8002456:	60f8      	str	r0, [r7, #12]
 8002458:	60b9      	str	r1, [r7, #8]
 800245a:	607a      	str	r2, [r7, #4]
 800245c:	603b      	str	r3, [r7, #0]
	if(handle== NULL || buff==NULL) return;
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	2b00      	cmp	r3, #0
 8002462:	d00f      	beq.n	8002484 <cBuffInit+0x34>
 8002464:	68bb      	ldr	r3, [r7, #8]
 8002466:	2b00      	cmp	r3, #0
 8002468:	d00c      	beq.n	8002484 <cBuffInit+0x34>

	handle->buff=buff;
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	68ba      	ldr	r2, [r7, #8]
 800246e:	601a      	str	r2, [r3, #0]
	handle->buffLen=buffLen;
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	687a      	ldr	r2, [r7, #4]
 8002474:	605a      	str	r2, [r3, #4]
	handle->startIndex=0;
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	2200      	movs	r2, #0
 800247a:	60da      	str	r2, [r3, #12]
	handle->elemNum=elemNum;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	683a      	ldr	r2, [r7, #0]
 8002480:	609a      	str	r2, [r3, #8]

	return;
 8002482:	e000      	b.n	8002486 <cBuffInit+0x36>
	if(handle== NULL || buff==NULL) return;
 8002484:	bf00      	nop
}
 8002486:	3714      	adds	r7, #20
 8002488:	46bd      	mov	sp, r7
 800248a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248e:	4770      	bx	lr

08002490 <cBuffGetVirtIndex>:
		printf("\n");

}
#endif

uint32_t cBuffGetVirtIndex(circular_buffer_handle* handle,uint32_t memIndex){
 8002490:	b480      	push	{r7}
 8002492:	b083      	sub	sp, #12
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
 8002498:	6039      	str	r1, [r7, #0]
	//special case when startIndex==0 is not critical but present to speed-up execution
	//of plain buffer functions based on circular buffer functions
	if(handle==NULL || handle->buffLen==0) return memIndex;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2b00      	cmp	r3, #0
 800249e:	d003      	beq.n	80024a8 <cBuffGetVirtIndex+0x18>
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d101      	bne.n	80024ac <cBuffGetVirtIndex+0x1c>
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	e019      	b.n	80024e0 <cBuffGetVirtIndex+0x50>

	memIndex=memIndex % handle->buffLen;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	685a      	ldr	r2, [r3, #4]
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	fbb3 f1f2 	udiv	r1, r3, r2
 80024b6:	fb01 f202 	mul.w	r2, r1, r2
 80024ba:	1a9b      	subs	r3, r3, r2
 80024bc:	603b      	str	r3, [r7, #0]

	if(handle->startIndex<=memIndex){
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	68db      	ldr	r3, [r3, #12]
 80024c2:	683a      	ldr	r2, [r7, #0]
 80024c4:	429a      	cmp	r2, r3
 80024c6:	d304      	bcc.n	80024d2 <cBuffGetVirtIndex+0x42>
		return memIndex-handle->startIndex;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	68db      	ldr	r3, [r3, #12]
 80024cc:	683a      	ldr	r2, [r7, #0]
 80024ce:	1ad3      	subs	r3, r2, r3
 80024d0:	e006      	b.n	80024e0 <cBuffGetVirtIndex+0x50>
	}else{
		return handle->buffLen-handle->startIndex+memIndex;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	685a      	ldr	r2, [r3, #4]
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	68db      	ldr	r3, [r3, #12]
 80024da:	1ad2      	subs	r2, r2, r3
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	4413      	add	r3, r2
	}
}
 80024e0:	4618      	mov	r0, r3
 80024e2:	370c      	adds	r7, #12
 80024e4:	46bd      	mov	sp, r7
 80024e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ea:	4770      	bx	lr

080024ec <cBuffGetMemIndex>:

uint32_t cBuffGetMemIndex(circular_buffer_handle* handle,uint32_t virtIndex){
 80024ec:	b480      	push	{r7}
 80024ee:	b083      	sub	sp, #12
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
 80024f4:	6039      	str	r1, [r7, #0]
	//special case when startIndex==0 is not critical but present to speed-up execution
	//of plain buffer functions based on circular buffer functions
	if(handle==NULL || handle->buffLen==0) return virtIndex;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d003      	beq.n	8002504 <cBuffGetMemIndex+0x18>
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d101      	bne.n	8002508 <cBuffGetMemIndex+0x1c>
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	e01c      	b.n	8002542 <cBuffGetMemIndex+0x56>

	virtIndex=virtIndex % handle->buffLen;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	685a      	ldr	r2, [r3, #4]
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	fbb3 f1f2 	udiv	r1, r3, r2
 8002512:	fb01 f202 	mul.w	r2, r1, r2
 8002516:	1a9b      	subs	r3, r3, r2
 8002518:	603b      	str	r3, [r7, #0]

	if(virtIndex<(handle->buffLen-handle->startIndex)){
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	685a      	ldr	r2, [r3, #4]
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	68db      	ldr	r3, [r3, #12]
 8002522:	1ad3      	subs	r3, r2, r3
 8002524:	683a      	ldr	r2, [r7, #0]
 8002526:	429a      	cmp	r2, r3
 8002528:	d204      	bcs.n	8002534 <cBuffGetMemIndex+0x48>
		return handle->startIndex+virtIndex;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	68da      	ldr	r2, [r3, #12]
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	4413      	add	r3, r2
 8002532:	e006      	b.n	8002542 <cBuffGetMemIndex+0x56>
	}else{
		return virtIndex-(handle->buffLen-handle->startIndex);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	68da      	ldr	r2, [r3, #12]
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	1ad2      	subs	r2, r2, r3
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	4413      	add	r3, r2
	}
}
 8002542:	4618      	mov	r0, r3
 8002544:	370c      	adds	r7, #12
 8002546:	46bd      	mov	sp, r7
 8002548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254c:	4770      	bx	lr

0800254e <cBuffPush>:

void cBuffPush(circular_buffer_handle* handle, uint8_t* data, uint32_t dataLen, uint8_t ht){
 800254e:	b580      	push	{r7, lr}
 8002550:	b086      	sub	sp, #24
 8002552:	af00      	add	r7, sp, #0
 8002554:	60f8      	str	r0, [r7, #12]
 8002556:	60b9      	str	r1, [r7, #8]
 8002558:	607a      	str	r2, [r7, #4]
 800255a:	70fb      	strb	r3, [r7, #3]
	if(handle==NULL || handle->buffLen==0 || dataLen==0 || data==NULL) return;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d06d      	beq.n	800263e <cBuffPush+0xf0>
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	2b00      	cmp	r3, #0
 8002568:	d069      	beq.n	800263e <cBuffPush+0xf0>
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	2b00      	cmp	r3, #0
 800256e:	d066      	beq.n	800263e <cBuffPush+0xf0>
 8002570:	68bb      	ldr	r3, [r7, #8]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d063      	beq.n	800263e <cBuffPush+0xf0>

	uint32_t pushMemIndx;
	if(ht==0){ //push before head
 8002576:	78fb      	ldrb	r3, [r7, #3]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d108      	bne.n	800258e <cBuffPush+0x40>
		//we will start pushing from buffLen-1 virtual index
		pushMemIndx=cBuffGetMemIndex(handle,handle->buffLen-1);
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	3b01      	subs	r3, #1
 8002582:	4619      	mov	r1, r3
 8002584:	68f8      	ldr	r0, [r7, #12]
 8002586:	f7ff ffb1 	bl	80024ec <cBuffGetMemIndex>
 800258a:	6178      	str	r0, [r7, #20]
 800258c:	e006      	b.n	800259c <cBuffPush+0x4e>
	}else{ //push after tail
		//we will start pushing from elemNum virtual index
		pushMemIndx=cBuffGetMemIndex(handle,handle->elemNum);
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	689b      	ldr	r3, [r3, #8]
 8002592:	4619      	mov	r1, r3
 8002594:	68f8      	ldr	r0, [r7, #12]
 8002596:	f7ff ffa9 	bl	80024ec <cBuffGetMemIndex>
 800259a:	6178      	str	r0, [r7, #20]
	}

	for(uint32_t d=0;d<dataLen;d++){
 800259c:	2300      	movs	r3, #0
 800259e:	613b      	str	r3, [r7, #16]
 80025a0:	e048      	b.n	8002634 <cBuffPush+0xe6>
		if(ht==0){ //push to head
 80025a2:	78fb      	ldrb	r3, [r7, #3]
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d11f      	bne.n	80025e8 <cBuffPush+0x9a>
			//we push data starting from buffer end, going backwards
			//handle->buff[pushMemIndx]=data[dataLen-1-d]; //not tested, push following inverse order
			handle->buff[pushMemIndx]=data[d];
 80025a8:	68ba      	ldr	r2, [r7, #8]
 80025aa:	693b      	ldr	r3, [r7, #16]
 80025ac:	441a      	add	r2, r3
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	6819      	ldr	r1, [r3, #0]
 80025b2:	697b      	ldr	r3, [r7, #20]
 80025b4:	440b      	add	r3, r1
 80025b6:	7812      	ldrb	r2, [r2, #0]
 80025b8:	701a      	strb	r2, [r3, #0]
			//if buffer was not full before pushing
			if(handle->elemNum<handle->buffLen){
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	689a      	ldr	r2, [r3, #8]
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	429a      	cmp	r2, r3
 80025c4:	d204      	bcs.n	80025d0 <cBuffPush+0x82>
				//increasing element number counter
				handle->elemNum++;
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	689b      	ldr	r3, [r3, #8]
 80025ca:	1c5a      	adds	r2, r3, #1
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	609a      	str	r2, [r3, #8]
			}
			//new start index is the one we pushed into
			handle->startIndex=pushMemIndx;
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	697a      	ldr	r2, [r7, #20]
 80025d4:	60da      	str	r2, [r3, #12]
			pushMemIndx=cBuffGetMemIndex(handle,handle->buffLen-1);
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	3b01      	subs	r3, #1
 80025dc:	4619      	mov	r1, r3
 80025de:	68f8      	ldr	r0, [r7, #12]
 80025e0:	f7ff ff84 	bl	80024ec <cBuffGetMemIndex>
 80025e4:	6178      	str	r0, [r7, #20]
 80025e6:	e022      	b.n	800262e <cBuffPush+0xe0>
		}else{ //push to tail
			//we push data following the data buffer order
			handle->buff[pushMemIndx]=data[d];
 80025e8:	68ba      	ldr	r2, [r7, #8]
 80025ea:	693b      	ldr	r3, [r7, #16]
 80025ec:	441a      	add	r2, r3
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	6819      	ldr	r1, [r3, #0]
 80025f2:	697b      	ldr	r3, [r7, #20]
 80025f4:	440b      	add	r3, r1
 80025f6:	7812      	ldrb	r2, [r2, #0]
 80025f8:	701a      	strb	r2, [r3, #0]
			//if buffer was not full before pushing
			if(handle->elemNum<handle->buffLen){
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	689a      	ldr	r2, [r3, #8]
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	685b      	ldr	r3, [r3, #4]
 8002602:	429a      	cmp	r2, r3
 8002604:	d205      	bcs.n	8002612 <cBuffPush+0xc4>
				//increasing element number counter
				handle->elemNum++;
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	689b      	ldr	r3, [r3, #8]
 800260a:	1c5a      	adds	r2, r3, #1
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	609a      	str	r2, [r3, #8]
 8002610:	e006      	b.n	8002620 <cBuffPush+0xd2>
			}else{
				//moving start index to virtual index 1
				handle->startIndex=cBuffGetMemIndex(handle,1);
 8002612:	2101      	movs	r1, #1
 8002614:	68f8      	ldr	r0, [r7, #12]
 8002616:	f7ff ff69 	bl	80024ec <cBuffGetMemIndex>
 800261a:	4602      	mov	r2, r0
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	60da      	str	r2, [r3, #12]
			}
			pushMemIndx=cBuffGetMemIndex(handle,handle->elemNum);
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	689b      	ldr	r3, [r3, #8]
 8002624:	4619      	mov	r1, r3
 8002626:	68f8      	ldr	r0, [r7, #12]
 8002628:	f7ff ff60 	bl	80024ec <cBuffGetMemIndex>
 800262c:	6178      	str	r0, [r7, #20]
	for(uint32_t d=0;d<dataLen;d++){
 800262e:	693b      	ldr	r3, [r7, #16]
 8002630:	3301      	adds	r3, #1
 8002632:	613b      	str	r3, [r7, #16]
 8002634:	693a      	ldr	r2, [r7, #16]
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	429a      	cmp	r2, r3
 800263a:	d3b2      	bcc.n	80025a2 <cBuffPush+0x54>
		}

	}

	return;
 800263c:	e000      	b.n	8002640 <cBuffPush+0xf2>
	if(handle==NULL || handle->buffLen==0 || dataLen==0 || data==NULL) return;
 800263e:	bf00      	nop
}
 8002640:	3718      	adds	r7, #24
 8002642:	46bd      	mov	sp, r7
 8002644:	bd80      	pop	{r7, pc}

08002646 <cBuffPushToFill>:

uint32_t cBuffPushToFill(circular_buffer_handle* handle, uint8_t* data, uint32_t dataLen, uint8_t ht){
 8002646:	b580      	push	{r7, lr}
 8002648:	b086      	sub	sp, #24
 800264a:	af00      	add	r7, sp, #0
 800264c:	60f8      	str	r0, [r7, #12]
 800264e:	60b9      	str	r1, [r7, #8]
 8002650:	607a      	str	r2, [r7, #4]
 8002652:	70fb      	strb	r3, [r7, #3]
	if(handle==NULL || handle->buffLen==0 || dataLen==0 || data==NULL) return 0;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d009      	beq.n	800266e <cBuffPushToFill+0x28>
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d005      	beq.n	800266e <cBuffPushToFill+0x28>
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2b00      	cmp	r3, #0
 8002666:	d002      	beq.n	800266e <cBuffPushToFill+0x28>
 8002668:	68bb      	ldr	r3, [r7, #8]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d101      	bne.n	8002672 <cBuffPushToFill+0x2c>
 800266e:	2300      	movs	r3, #0
 8002670:	e012      	b.n	8002698 <cBuffPushToFill+0x52>

	//compute the available space
	uint32_t available=handle->buffLen-handle->elemNum;
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	685a      	ldr	r2, [r3, #4]
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	689b      	ldr	r3, [r3, #8]
 800267a:	1ad3      	subs	r3, r2, r3
 800267c:	617b      	str	r3, [r7, #20]

	//compute the minimum between available and dataLen
	if(dataLen<available) available=dataLen;
 800267e:	687a      	ldr	r2, [r7, #4]
 8002680:	697b      	ldr	r3, [r7, #20]
 8002682:	429a      	cmp	r2, r3
 8002684:	d201      	bcs.n	800268a <cBuffPushToFill+0x44>
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	617b      	str	r3, [r7, #20]

	//pushing bytes
	cBuffPush(handle,data,available,ht);
 800268a:	78fb      	ldrb	r3, [r7, #3]
 800268c:	697a      	ldr	r2, [r7, #20]
 800268e:	68b9      	ldr	r1, [r7, #8]
 8002690:	68f8      	ldr	r0, [r7, #12]
 8002692:	f7ff ff5c 	bl	800254e <cBuffPush>

	return available;
 8002696:	697b      	ldr	r3, [r7, #20]
}
 8002698:	4618      	mov	r0, r3
 800269a:	3718      	adds	r7, #24
 800269c:	46bd      	mov	sp, r7
 800269e:	bd80      	pop	{r7, pc}

080026a0 <cBuffPull>:

uint32_t cBuffPull(circular_buffer_handle* handle, uint8_t* data, uint32_t dataLen, uint8_t ht){
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b088      	sub	sp, #32
 80026a4:	af02      	add	r7, sp, #8
 80026a6:	60f8      	str	r0, [r7, #12]
 80026a8:	60b9      	str	r1, [r7, #8]
 80026aa:	607a      	str	r2, [r7, #4]
 80026ac:	70fb      	strb	r3, [r7, #3]
	if(handle==NULL || handle->buffLen==0 || dataLen==0) return 0;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d006      	beq.n	80026c2 <cBuffPull+0x22>
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d002      	beq.n	80026c2 <cBuffPull+0x22>
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d101      	bne.n	80026c6 <cBuffPull+0x26>
 80026c2:	2300      	movs	r3, #0
 80026c4:	e019      	b.n	80026fa <cBuffPull+0x5a>

	//expoiting cBuffRead function to perform data reading
	uint32_t retVal=cBuffRead(handle,data,dataLen,ht,0);
 80026c6:	78fb      	ldrb	r3, [r7, #3]
 80026c8:	2200      	movs	r2, #0
 80026ca:	9200      	str	r2, [sp, #0]
 80026cc:	687a      	ldr	r2, [r7, #4]
 80026ce:	68b9      	ldr	r1, [r7, #8]
 80026d0:	68f8      	ldr	r0, [r7, #12]
 80026d2:	f000 f816 	bl	8002702 <cBuffRead>
 80026d6:	6178      	str	r0, [r7, #20]

	//updating start index and elements number
	if(ht==0){ //pull from head
 80026d8:	78fb      	ldrb	r3, [r7, #3]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d106      	bne.n	80026ec <cBuffPull+0x4c>
		handle->startIndex=cBuffGetMemIndex(handle,retVal);
 80026de:	6979      	ldr	r1, [r7, #20]
 80026e0:	68f8      	ldr	r0, [r7, #12]
 80026e2:	f7ff ff03 	bl	80024ec <cBuffGetMemIndex>
 80026e6:	4602      	mov	r2, r0
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	60da      	str	r2, [r3, #12]
	}

	handle->elemNum=handle->elemNum-retVal;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	689a      	ldr	r2, [r3, #8]
 80026f0:	697b      	ldr	r3, [r7, #20]
 80026f2:	1ad2      	subs	r2, r2, r3
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	609a      	str	r2, [r3, #8]

	return retVal;
 80026f8:	697b      	ldr	r3, [r7, #20]
}
 80026fa:	4618      	mov	r0, r3
 80026fc:	3718      	adds	r7, #24
 80026fe:	46bd      	mov	sp, r7
 8002700:	bd80      	pop	{r7, pc}

08002702 <cBuffRead>:

	return retVal;
	
}

uint32_t cBuffRead(circular_buffer_handle* handle, uint8_t* data, uint32_t dataLen, uint8_t ht, uint32_t off){
 8002702:	b590      	push	{r4, r7, lr}
 8002704:	b087      	sub	sp, #28
 8002706:	af00      	add	r7, sp, #0
 8002708:	60f8      	str	r0, [r7, #12]
 800270a:	60b9      	str	r1, [r7, #8]
 800270c:	607a      	str	r2, [r7, #4]
 800270e:	70fb      	strb	r3, [r7, #3]
	if(handle==NULL || handle->elemNum==0 || dataLen==0 || off>=handle->elemNum) return 0;
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d00b      	beq.n	800272e <cBuffRead+0x2c>
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	689b      	ldr	r3, [r3, #8]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d007      	beq.n	800272e <cBuffRead+0x2c>
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d004      	beq.n	800272e <cBuffRead+0x2c>
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	689b      	ldr	r3, [r3, #8]
 8002728:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800272a:	429a      	cmp	r2, r3
 800272c:	d301      	bcc.n	8002732 <cBuffRead+0x30>
 800272e:	2300      	movs	r3, #0
 8002730:	e044      	b.n	80027bc <cBuffRead+0xba>

	//determinign the actual number of bytes we can read
	uint32_t retVal;
	if(dataLen<=handle->elemNum-off){
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	689a      	ldr	r2, [r3, #8]
 8002736:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002738:	1ad3      	subs	r3, r2, r3
 800273a:	687a      	ldr	r2, [r7, #4]
 800273c:	429a      	cmp	r2, r3
 800273e:	d802      	bhi.n	8002746 <cBuffRead+0x44>
		retVal=dataLen;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	617b      	str	r3, [r7, #20]
 8002744:	e004      	b.n	8002750 <cBuffRead+0x4e>
	}else{
		retVal=handle->elemNum-off;
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	689a      	ldr	r2, [r3, #8]
 800274a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800274c:	1ad3      	subs	r3, r2, r3
 800274e:	617b      	str	r3, [r7, #20]
	}

	if(data!=NULL){ //data reading happens only if data is not NULL
 8002750:	68bb      	ldr	r3, [r7, #8]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d031      	beq.n	80027ba <cBuffRead+0xb8>
		for(uint32_t d=0; d<retVal; d++){
 8002756:	2300      	movs	r3, #0
 8002758:	613b      	str	r3, [r7, #16]
 800275a:	e02a      	b.n	80027b2 <cBuffRead+0xb0>
			if(ht==0){ //read from head
 800275c:	78fb      	ldrb	r3, [r7, #3]
 800275e:	2b00      	cmp	r3, #0
 8002760:	d110      	bne.n	8002784 <cBuffRead+0x82>
				//reading data starting from head
				data[d]=handle->buff[cBuffGetMemIndex(handle,d+off)];
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681c      	ldr	r4, [r3, #0]
 8002766:	693a      	ldr	r2, [r7, #16]
 8002768:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800276a:	4413      	add	r3, r2
 800276c:	4619      	mov	r1, r3
 800276e:	68f8      	ldr	r0, [r7, #12]
 8002770:	f7ff febc 	bl	80024ec <cBuffGetMemIndex>
 8002774:	4603      	mov	r3, r0
 8002776:	18e2      	adds	r2, r4, r3
 8002778:	68b9      	ldr	r1, [r7, #8]
 800277a:	693b      	ldr	r3, [r7, #16]
 800277c:	440b      	add	r3, r1
 800277e:	7812      	ldrb	r2, [r2, #0]
 8002780:	701a      	strb	r2, [r3, #0]
 8002782:	e013      	b.n	80027ac <cBuffRead+0xaa>
			}else{ //read from tail
				//reading data starting from tail
				//data[retVal-1-d]=handle->buff[cBuffGetMemIndex(handle,handle->elemNum-1-d)]; //inverted read order, not tested
				data[d]=handle->buff[cBuffGetMemIndex(handle,handle->elemNum-1-d-off)];
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	681c      	ldr	r4, [r3, #0]
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	689a      	ldr	r2, [r3, #8]
 800278c:	693b      	ldr	r3, [r7, #16]
 800278e:	1ad2      	subs	r2, r2, r3
 8002790:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002792:	1ad3      	subs	r3, r2, r3
 8002794:	3b01      	subs	r3, #1
 8002796:	4619      	mov	r1, r3
 8002798:	68f8      	ldr	r0, [r7, #12]
 800279a:	f7ff fea7 	bl	80024ec <cBuffGetMemIndex>
 800279e:	4603      	mov	r3, r0
 80027a0:	18e2      	adds	r2, r4, r3
 80027a2:	68b9      	ldr	r1, [r7, #8]
 80027a4:	693b      	ldr	r3, [r7, #16]
 80027a6:	440b      	add	r3, r1
 80027a8:	7812      	ldrb	r2, [r2, #0]
 80027aa:	701a      	strb	r2, [r3, #0]
		for(uint32_t d=0; d<retVal; d++){
 80027ac:	693b      	ldr	r3, [r7, #16]
 80027ae:	3301      	adds	r3, #1
 80027b0:	613b      	str	r3, [r7, #16]
 80027b2:	693a      	ldr	r2, [r7, #16]
 80027b4:	697b      	ldr	r3, [r7, #20]
 80027b6:	429a      	cmp	r2, r3
 80027b8:	d3d0      	bcc.n	800275c <cBuffRead+0x5a>
			}
		}
	}

	return retVal;
 80027ba:	697b      	ldr	r3, [r7, #20]
	
}
 80027bc:	4618      	mov	r0, r3
 80027be:	371c      	adds	r7, #28
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bd90      	pop	{r4, r7, pc}

080027c4 <cBuffCut>:

uint32_t cBuffCut(circular_buffer_handle* handle, uint8_t* data, uint32_t dataLen, uint8_t ht, uint32_t off){
 80027c4:	b5b0      	push	{r4, r5, r7, lr}
 80027c6:	b08e      	sub	sp, #56	@ 0x38
 80027c8:	af02      	add	r7, sp, #8
 80027ca:	60f8      	str	r0, [r7, #12]
 80027cc:	60b9      	str	r1, [r7, #8]
 80027ce:	607a      	str	r2, [r7, #4]
 80027d0:	70fb      	strb	r3, [r7, #3]
	if(handle==NULL || handle->elemNum==0 || dataLen==0 || off>=handle->elemNum) return 0;
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d00b      	beq.n	80027f0 <cBuffCut+0x2c>
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	689b      	ldr	r3, [r3, #8]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d007      	beq.n	80027f0 <cBuffCut+0x2c>
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d004      	beq.n	80027f0 <cBuffCut+0x2c>
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	689b      	ldr	r3, [r3, #8]
 80027ea:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80027ec:	429a      	cmp	r2, r3
 80027ee:	d301      	bcc.n	80027f4 <cBuffCut+0x30>
 80027f0:	2300      	movs	r3, #0
 80027f2:	e0c5      	b.n	8002980 <cBuffCut+0x1bc>

	//reading data (using cBuffRead)
	uint32_t readLen=cBuffRead(handle,data,dataLen,ht,off);
 80027f4:	78fa      	ldrb	r2, [r7, #3]
 80027f6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80027f8:	9300      	str	r3, [sp, #0]
 80027fa:	4613      	mov	r3, r2
 80027fc:	687a      	ldr	r2, [r7, #4]
 80027fe:	68b9      	ldr	r1, [r7, #8]
 8002800:	68f8      	ldr	r0, [r7, #12]
 8002802:	f7ff ff7e 	bl	8002702 <cBuffRead>
 8002806:	6178      	str	r0, [r7, #20]

	//returning immediately if nothing to cut
	if(readLen==0) return readLen;
 8002808:	697b      	ldr	r3, [r7, #20]
 800280a:	2b00      	cmp	r3, #0
 800280c:	d101      	bne.n	8002812 <cBuffCut+0x4e>
 800280e:	697b      	ldr	r3, [r7, #20]
 8002810:	e0b6      	b.n	8002980 <cBuffCut+0x1bc>

	//cutting data from buffer
	//determining the smaller portion of buffer to shift
	uint32_t shiftStart=0; //start of shift (virtual)
 8002812:	2300      	movs	r3, #0
 8002814:	62fb      	str	r3, [r7, #44]	@ 0x2c
	uint32_t shiftDest=0; //shift destination (virtual)
 8002816:	2300      	movs	r3, #0
 8002818:	62bb      	str	r3, [r7, #40]	@ 0x28
	uint32_t shiftLen=0; //length of shift
 800281a:	2300      	movs	r3, #0
 800281c:	627b      	str	r3, [r7, #36]	@ 0x24
	uint8_t shiftPiece=0; //shortest memory piece to shift (0:first 1:second)
 800281e:	2300      	movs	r3, #0
 8002820:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	if(off<=(handle->elemNum-off-readLen)){ //first buffer piece is shortes
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	689a      	ldr	r2, [r3, #8]
 8002828:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800282a:	1ad2      	subs	r2, r2, r3
 800282c:	697b      	ldr	r3, [r7, #20]
 800282e:	1ad3      	subs	r3, r2, r3
 8002830:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002832:	429a      	cmp	r2, r3
 8002834:	d824      	bhi.n	8002880 <cBuffCut+0xbc>
		shiftStart=(ht==0) ? off-1 : handle->elemNum-off;
 8002836:	78fb      	ldrb	r3, [r7, #3]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d102      	bne.n	8002842 <cBuffCut+0x7e>
 800283c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800283e:	3b01      	subs	r3, #1
 8002840:	e003      	b.n	800284a <cBuffCut+0x86>
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	689a      	ldr	r2, [r3, #8]
 8002846:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002848:	1ad3      	subs	r3, r2, r3
 800284a:	62fb      	str	r3, [r7, #44]	@ 0x2c
		shiftDest=(ht==0) ? off-1+readLen : handle->elemNum-off-readLen;
 800284c:	78fb      	ldrb	r3, [r7, #3]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d104      	bne.n	800285c <cBuffCut+0x98>
 8002852:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002854:	697b      	ldr	r3, [r7, #20]
 8002856:	4413      	add	r3, r2
 8002858:	3b01      	subs	r3, #1
 800285a:	e005      	b.n	8002868 <cBuffCut+0xa4>
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	689a      	ldr	r2, [r3, #8]
 8002860:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002862:	1ad2      	subs	r2, r2, r3
 8002864:	697b      	ldr	r3, [r7, #20]
 8002866:	1ad3      	subs	r3, r2, r3
 8002868:	62bb      	str	r3, [r7, #40]	@ 0x28
		shiftLen=off;
 800286a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800286c:	627b      	str	r3, [r7, #36]	@ 0x24
		shiftPiece=(ht==0) ? 0 : 1;
 800286e:	78fb      	ldrb	r3, [r7, #3]
 8002870:	2b00      	cmp	r3, #0
 8002872:	bf14      	ite	ne
 8002874:	2301      	movne	r3, #1
 8002876:	2300      	moveq	r3, #0
 8002878:	b2db      	uxtb	r3, r3
 800287a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800287e:	e028      	b.n	80028d2 <cBuffCut+0x10e>
	}else{ //second buffer piece is shortest
		shiftStart=(ht==0) ? off+readLen : handle->elemNum-off-1-readLen;
 8002880:	78fb      	ldrb	r3, [r7, #3]
 8002882:	2b00      	cmp	r3, #0
 8002884:	d103      	bne.n	800288e <cBuffCut+0xca>
 8002886:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002888:	697b      	ldr	r3, [r7, #20]
 800288a:	4413      	add	r3, r2
 800288c:	e006      	b.n	800289c <cBuffCut+0xd8>
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	689a      	ldr	r2, [r3, #8]
 8002892:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002894:	1ad2      	subs	r2, r2, r3
 8002896:	697b      	ldr	r3, [r7, #20]
 8002898:	1ad3      	subs	r3, r2, r3
 800289a:	3b01      	subs	r3, #1
 800289c:	62fb      	str	r3, [r7, #44]	@ 0x2c
		shiftDest=(ht==0) ? off : handle->elemNum-off-1;
 800289e:	78fb      	ldrb	r3, [r7, #3]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d005      	beq.n	80028b0 <cBuffCut+0xec>
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	689a      	ldr	r2, [r3, #8]
 80028a8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80028aa:	1ad3      	subs	r3, r2, r3
 80028ac:	3b01      	subs	r3, #1
 80028ae:	e000      	b.n	80028b2 <cBuffCut+0xee>
 80028b0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80028b2:	62bb      	str	r3, [r7, #40]	@ 0x28
		shiftLen=handle->elemNum-off-readLen;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	689a      	ldr	r2, [r3, #8]
 80028b8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80028ba:	1ad2      	subs	r2, r2, r3
 80028bc:	697b      	ldr	r3, [r7, #20]
 80028be:	1ad3      	subs	r3, r2, r3
 80028c0:	627b      	str	r3, [r7, #36]	@ 0x24
		shiftPiece=(ht==0) ? 1 : 0;
 80028c2:	78fb      	ldrb	r3, [r7, #3]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	bf0c      	ite	eq
 80028c8:	2301      	moveq	r3, #1
 80028ca:	2300      	movne	r3, #0
 80028cc:	b2db      	uxtb	r3, r3
 80028ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	}
	//actual shift
	if(!shiftPiece){ //shift first memory part forward
 80028d2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d129      	bne.n	800292e <cBuffCut+0x16a>
		for(uint32_t b=0;b<shiftLen;b++){
 80028da:	2300      	movs	r3, #0
 80028dc:	61fb      	str	r3, [r7, #28]
 80028de:	e01a      	b.n	8002916 <cBuffCut+0x152>
			handle->buff[cBuffGetMemIndex(handle,shiftDest-b)]=handle->buff[cBuffGetMemIndex(handle,shiftStart-b)];
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	681c      	ldr	r4, [r3, #0]
 80028e4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80028e6:	69fb      	ldr	r3, [r7, #28]
 80028e8:	1ad3      	subs	r3, r2, r3
 80028ea:	4619      	mov	r1, r3
 80028ec:	68f8      	ldr	r0, [r7, #12]
 80028ee:	f7ff fdfd 	bl	80024ec <cBuffGetMemIndex>
 80028f2:	4603      	mov	r3, r0
 80028f4:	441c      	add	r4, r3
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681d      	ldr	r5, [r3, #0]
 80028fa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80028fc:	69fb      	ldr	r3, [r7, #28]
 80028fe:	1ad3      	subs	r3, r2, r3
 8002900:	4619      	mov	r1, r3
 8002902:	68f8      	ldr	r0, [r7, #12]
 8002904:	f7ff fdf2 	bl	80024ec <cBuffGetMemIndex>
 8002908:	4603      	mov	r3, r0
 800290a:	442b      	add	r3, r5
 800290c:	7822      	ldrb	r2, [r4, #0]
 800290e:	701a      	strb	r2, [r3, #0]
		for(uint32_t b=0;b<shiftLen;b++){
 8002910:	69fb      	ldr	r3, [r7, #28]
 8002912:	3301      	adds	r3, #1
 8002914:	61fb      	str	r3, [r7, #28]
 8002916:	69fa      	ldr	r2, [r7, #28]
 8002918:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800291a:	429a      	cmp	r2, r3
 800291c:	d3e0      	bcc.n	80028e0 <cBuffCut+0x11c>
		}
		//changing start index
		handle->startIndex=cBuffGetMemIndex(handle,readLen);
 800291e:	6979      	ldr	r1, [r7, #20]
 8002920:	68f8      	ldr	r0, [r7, #12]
 8002922:	f7ff fde3 	bl	80024ec <cBuffGetMemIndex>
 8002926:	4602      	mov	r2, r0
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	60da      	str	r2, [r3, #12]
 800292c:	e021      	b.n	8002972 <cBuffCut+0x1ae>

	}else{ //shift second memory part backwards
		for(uint32_t b=0;b<shiftLen;b++){
 800292e:	2300      	movs	r3, #0
 8002930:	61bb      	str	r3, [r7, #24]
 8002932:	e01a      	b.n	800296a <cBuffCut+0x1a6>
			handle->buff[cBuffGetMemIndex(handle,shiftDest+b)]=handle->buff[cBuffGetMemIndex(handle,shiftStart+b)];
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	681c      	ldr	r4, [r3, #0]
 8002938:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800293a:	69bb      	ldr	r3, [r7, #24]
 800293c:	4413      	add	r3, r2
 800293e:	4619      	mov	r1, r3
 8002940:	68f8      	ldr	r0, [r7, #12]
 8002942:	f7ff fdd3 	bl	80024ec <cBuffGetMemIndex>
 8002946:	4603      	mov	r3, r0
 8002948:	441c      	add	r4, r3
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681d      	ldr	r5, [r3, #0]
 800294e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002950:	69bb      	ldr	r3, [r7, #24]
 8002952:	4413      	add	r3, r2
 8002954:	4619      	mov	r1, r3
 8002956:	68f8      	ldr	r0, [r7, #12]
 8002958:	f7ff fdc8 	bl	80024ec <cBuffGetMemIndex>
 800295c:	4603      	mov	r3, r0
 800295e:	442b      	add	r3, r5
 8002960:	7822      	ldrb	r2, [r4, #0]
 8002962:	701a      	strb	r2, [r3, #0]
		for(uint32_t b=0;b<shiftLen;b++){
 8002964:	69bb      	ldr	r3, [r7, #24]
 8002966:	3301      	adds	r3, #1
 8002968:	61bb      	str	r3, [r7, #24]
 800296a:	69ba      	ldr	r2, [r7, #24]
 800296c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800296e:	429a      	cmp	r2, r3
 8002970:	d3e0      	bcc.n	8002934 <cBuffCut+0x170>
		}
	}
	//changing elemnum
	handle->elemNum=handle->elemNum-readLen;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	689a      	ldr	r2, [r3, #8]
 8002976:	697b      	ldr	r3, [r7, #20]
 8002978:	1ad2      	subs	r2, r2, r3
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	609a      	str	r2, [r3, #8]

	return readLen;
 800297e:	697b      	ldr	r3, [r7, #20]
}
 8002980:	4618      	mov	r0, r3
 8002982:	3730      	adds	r7, #48	@ 0x30
 8002984:	46bd      	mov	sp, r7
 8002986:	bdb0      	pop	{r4, r5, r7, pc}

08002988 <cBuffPushRead>:

uint32_t cBuffPushRead(circular_buffer_handle* dest, circular_buffer_handle* source, uint32_t len, uint8_t htDest, uint8_t htSource){
 8002988:	b580      	push	{r7, lr}
 800298a:	b08a      	sub	sp, #40	@ 0x28
 800298c:	af02      	add	r7, sp, #8
 800298e:	60f8      	str	r0, [r7, #12]
 8002990:	60b9      	str	r1, [r7, #8]
 8002992:	607a      	str	r2, [r7, #4]
 8002994:	70fb      	strb	r3, [r7, #3]
	if(dest==NULL || source==NULL || dest->buffLen==0 || source->buffLen==0 || len==0) return 0;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	2b00      	cmp	r3, #0
 800299a:	d00d      	beq.n	80029b8 <cBuffPushRead+0x30>
 800299c:	68bb      	ldr	r3, [r7, #8]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d00a      	beq.n	80029b8 <cBuffPushRead+0x30>
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d006      	beq.n	80029b8 <cBuffPushRead+0x30>
 80029aa:	68bb      	ldr	r3, [r7, #8]
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d002      	beq.n	80029b8 <cBuffPushRead+0x30>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d101      	bne.n	80029bc <cBuffPushRead+0x34>
 80029b8:	2300      	movs	r3, #0
 80029ba:	e034      	b.n	8002a26 <cBuffPushRead+0x9e>

	//actual number of moved bytes
	uint32_t retVal=len;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	61fb      	str	r3, [r7, #28]
	if(source->elemNum<retVal) retVal=source->elemNum;
 80029c0:	68bb      	ldr	r3, [r7, #8]
 80029c2:	689b      	ldr	r3, [r3, #8]
 80029c4:	69fa      	ldr	r2, [r7, #28]
 80029c6:	429a      	cmp	r2, r3
 80029c8:	d902      	bls.n	80029d0 <cBuffPushRead+0x48>
 80029ca:	68bb      	ldr	r3, [r7, #8]
 80029cc:	689b      	ldr	r3, [r3, #8]
 80029ce:	61fb      	str	r3, [r7, #28]
	if((dest->buffLen-dest->elemNum)<retVal) retVal=dest->buffLen-dest->elemNum;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	685a      	ldr	r2, [r3, #4]
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	689b      	ldr	r3, [r3, #8]
 80029d8:	1ad3      	subs	r3, r2, r3
 80029da:	69fa      	ldr	r2, [r7, #28]
 80029dc:	429a      	cmp	r2, r3
 80029de:	d905      	bls.n	80029ec <cBuffPushRead+0x64>
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	685a      	ldr	r2, [r3, #4]
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	689b      	ldr	r3, [r3, #8]
 80029e8:	1ad3      	subs	r3, r2, r3
 80029ea:	61fb      	str	r3, [r7, #28]

	//moving bytes
	uint8_t byte;
	for(uint32_t b=0;b<retVal;b++){
 80029ec:	2300      	movs	r3, #0
 80029ee:	61bb      	str	r3, [r7, #24]
 80029f0:	e014      	b.n	8002a1c <cBuffPushRead+0x94>
		cBuffRead(source,&byte,1,htSource,b);
 80029f2:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 80029f6:	f107 0117 	add.w	r1, r7, #23
 80029fa:	69bb      	ldr	r3, [r7, #24]
 80029fc:	9300      	str	r3, [sp, #0]
 80029fe:	4613      	mov	r3, r2
 8002a00:	2201      	movs	r2, #1
 8002a02:	68b8      	ldr	r0, [r7, #8]
 8002a04:	f7ff fe7d 	bl	8002702 <cBuffRead>
		cBuffPush(dest,&byte,1,htDest);
 8002a08:	78fb      	ldrb	r3, [r7, #3]
 8002a0a:	f107 0117 	add.w	r1, r7, #23
 8002a0e:	2201      	movs	r2, #1
 8002a10:	68f8      	ldr	r0, [r7, #12]
 8002a12:	f7ff fd9c 	bl	800254e <cBuffPush>
	for(uint32_t b=0;b<retVal;b++){
 8002a16:	69bb      	ldr	r3, [r7, #24]
 8002a18:	3301      	adds	r3, #1
 8002a1a:	61bb      	str	r3, [r7, #24]
 8002a1c:	69ba      	ldr	r2, [r7, #24]
 8002a1e:	69fb      	ldr	r3, [r7, #28]
 8002a20:	429a      	cmp	r2, r3
 8002a22:	d3e6      	bcc.n	80029f2 <cBuffPushRead+0x6a>
	}

	return retVal;
 8002a24:	69fb      	ldr	r3, [r7, #28]
}
 8002a26:	4618      	mov	r0, r3
 8002a28:	3720      	adds	r7, #32
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bd80      	pop	{r7, pc}

08002a2e <cBuffPushPull>:

uint32_t cBuffPushPull(circular_buffer_handle* dest, circular_buffer_handle* source, uint32_t len, uint8_t htDest, uint8_t htSource){
 8002a2e:	b580      	push	{r7, lr}
 8002a30:	b088      	sub	sp, #32
 8002a32:	af02      	add	r7, sp, #8
 8002a34:	60f8      	str	r0, [r7, #12]
 8002a36:	60b9      	str	r1, [r7, #8]
 8002a38:	607a      	str	r2, [r7, #4]
 8002a3a:	70fb      	strb	r3, [r7, #3]
	if(dest==NULL || source==NULL || dest->buffLen==0 || source->buffLen==0 || len==0) return 0;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d00d      	beq.n	8002a5e <cBuffPushPull+0x30>
 8002a42:	68bb      	ldr	r3, [r7, #8]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d00a      	beq.n	8002a5e <cBuffPushPull+0x30>
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d006      	beq.n	8002a5e <cBuffPushPull+0x30>
 8002a50:	68bb      	ldr	r3, [r7, #8]
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d002      	beq.n	8002a5e <cBuffPushPull+0x30>
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d101      	bne.n	8002a62 <cBuffPushPull+0x34>
 8002a5e:	2300      	movs	r3, #0
 8002a60:	e01c      	b.n	8002a9c <cBuffPushPull+0x6e>

	//moving using cBuffPushRead
	uint32_t retVal=cBuffPushRead(dest,source,len,htDest,htSource);
 8002a62:	78fa      	ldrb	r2, [r7, #3]
 8002a64:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002a68:	9300      	str	r3, [sp, #0]
 8002a6a:	4613      	mov	r3, r2
 8002a6c:	687a      	ldr	r2, [r7, #4]
 8002a6e:	68b9      	ldr	r1, [r7, #8]
 8002a70:	68f8      	ldr	r0, [r7, #12]
 8002a72:	f7ff ff89 	bl	8002988 <cBuffPushRead>
 8002a76:	6178      	str	r0, [r7, #20]
	//decreasing element number and chaning startIndex of source
	source->elemNum-=retVal;
 8002a78:	68bb      	ldr	r3, [r7, #8]
 8002a7a:	689a      	ldr	r2, [r3, #8]
 8002a7c:	697b      	ldr	r3, [r7, #20]
 8002a7e:	1ad2      	subs	r2, r2, r3
 8002a80:	68bb      	ldr	r3, [r7, #8]
 8002a82:	609a      	str	r2, [r3, #8]
	if(!htSource) source->startIndex=cBuffGetMemIndex(source,retVal);
 8002a84:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d106      	bne.n	8002a9a <cBuffPushPull+0x6c>
 8002a8c:	6979      	ldr	r1, [r7, #20]
 8002a8e:	68b8      	ldr	r0, [r7, #8]
 8002a90:	f7ff fd2c 	bl	80024ec <cBuffGetMemIndex>
 8002a94:	4602      	mov	r2, r0
 8002a96:	68bb      	ldr	r3, [r7, #8]
 8002a98:	60da      	str	r2, [r3, #12]

	return retVal;
 8002a9a:	697b      	ldr	r3, [r7, #20]
}
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	3718      	adds	r7, #24
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	bd80      	pop	{r7, pc}

08002aa4 <cBuffReadByte>:
	else handle->buff[cBuffGetMemIndex(handle,handle->elemNum-1-off)]=val;

	return;
}

uint8_t cBuffReadByte(circular_buffer_handle* handle, uint8_t ht, uint32_t off){
 8002aa4:	b590      	push	{r4, r7, lr}
 8002aa6:	b085      	sub	sp, #20
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	60f8      	str	r0, [r7, #12]
 8002aac:	460b      	mov	r3, r1
 8002aae:	607a      	str	r2, [r7, #4]
 8002ab0:	72fb      	strb	r3, [r7, #11]
	if(handle==NULL || handle->buffLen==0 || handle->elemNum==0 || off>=handle->elemNum) return 0;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d00c      	beq.n	8002ad2 <cBuffReadByte+0x2e>
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d008      	beq.n	8002ad2 <cBuffReadByte+0x2e>
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	689b      	ldr	r3, [r3, #8]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d004      	beq.n	8002ad2 <cBuffReadByte+0x2e>
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	689b      	ldr	r3, [r3, #8]
 8002acc:	687a      	ldr	r2, [r7, #4]
 8002ace:	429a      	cmp	r2, r3
 8002ad0:	d301      	bcc.n	8002ad6 <cBuffReadByte+0x32>
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	e01a      	b.n	8002b0c <cBuffReadByte+0x68>

	if(!ht) return handle->buff[cBuffGetMemIndex(handle,off)];
 8002ad6:	7afb      	ldrb	r3, [r7, #11]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d109      	bne.n	8002af0 <cBuffReadByte+0x4c>
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	681c      	ldr	r4, [r3, #0]
 8002ae0:	6879      	ldr	r1, [r7, #4]
 8002ae2:	68f8      	ldr	r0, [r7, #12]
 8002ae4:	f7ff fd02 	bl	80024ec <cBuffGetMemIndex>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	4423      	add	r3, r4
 8002aec:	781b      	ldrb	r3, [r3, #0]
 8002aee:	e00d      	b.n	8002b0c <cBuffReadByte+0x68>
	//else
	return handle->buff[cBuffGetMemIndex(handle,handle->elemNum-1-off)];
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	681c      	ldr	r4, [r3, #0]
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	689a      	ldr	r2, [r3, #8]
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	1ad3      	subs	r3, r2, r3
 8002afc:	3b01      	subs	r3, #1
 8002afe:	4619      	mov	r1, r3
 8002b00:	68f8      	ldr	r0, [r7, #12]
 8002b02:	f7ff fcf3 	bl	80024ec <cBuffGetMemIndex>
 8002b06:	4603      	mov	r3, r0
 8002b08:	4423      	add	r3, r4
 8002b0a:	781b      	ldrb	r3, [r3, #0]
}
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	3714      	adds	r7, #20
 8002b10:	46bd      	mov	sp, r7
 8002b12:	bd90      	pop	{r4, r7, pc}

08002b14 <cBuffFlush>:
	//finally assigning the new start index to the buffer
	handle->startIndex=tmpBuff.startIndex;
	return;
}

void cBuffFlush(circular_buffer_handle* handle){
 8002b14:	b480      	push	{r7}
 8002b16:	b083      	sub	sp, #12
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
	if(handle==NULL) return;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d003      	beq.n	8002b2a <cBuffFlush+0x16>

	handle->elemNum=0;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	2200      	movs	r2, #0
 8002b26:	609a      	str	r2, [r3, #8]

	return;
 8002b28:	e000      	b.n	8002b2c <cBuffFlush+0x18>
	if(handle==NULL) return;
 8002b2a:	bf00      	nop
}
 8002b2c:	370c      	adds	r7, #12
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b34:	4770      	bx	lr

08002b36 <cBuffFull>:

uint8_t cBuffFull(circular_buffer_handle* handle){
 8002b36:	b480      	push	{r7}
 8002b38:	b083      	sub	sp, #12
 8002b3a:	af00      	add	r7, sp, #0
 8002b3c:	6078      	str	r0, [r7, #4]
	if(handle==NULL) return 0;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d101      	bne.n	8002b48 <cBuffFull+0x12>
 8002b44:	2300      	movs	r3, #0
 8002b46:	e008      	b.n	8002b5a <cBuffFull+0x24>

	return (handle->elemNum == handle->buffLen);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	689a      	ldr	r2, [r3, #8]
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	429a      	cmp	r2, r3
 8002b52:	bf0c      	ite	eq
 8002b54:	2301      	moveq	r3, #1
 8002b56:	2300      	movne	r3, #0
 8002b58:	b2db      	uxtb	r3, r3
}
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	370c      	adds	r7, #12
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b64:	4770      	bx	lr

08002b66 <cBuffToCirc>:
	dest->buff=pHandle->buff;
	dest->buffLen=pHandle->buffLen;
	dest->elemNum=pHandle->elemNum;
}

void cBuffToCirc(circular_buffer_handle* dest, circular_buffer_handle* cHandle){
 8002b66:	b480      	push	{r7}
 8002b68:	b083      	sub	sp, #12
 8002b6a:	af00      	add	r7, sp, #0
 8002b6c:	6078      	str	r0, [r7, #4]
 8002b6e:	6039      	str	r1, [r7, #0]
	if(dest==NULL || cHandle==NULL) return;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d013      	beq.n	8002b9e <cBuffToCirc+0x38>
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d010      	beq.n	8002b9e <cBuffToCirc+0x38>

	dest->buff=cHandle->buff;
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	681a      	ldr	r2, [r3, #0]
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	601a      	str	r2, [r3, #0]
	dest->buffLen=cHandle->buffLen;
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	685a      	ldr	r2, [r3, #4]
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	605a      	str	r2, [r3, #4]
	dest->elemNum=cHandle->elemNum;
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	689a      	ldr	r2, [r3, #8]
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	609a      	str	r2, [r3, #8]
	dest->startIndex=cHandle->startIndex;
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	68da      	ldr	r2, [r3, #12]
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	60da      	str	r2, [r3, #12]
 8002b9c:	e000      	b.n	8002ba0 <cBuffToCirc+0x3a>
	if(dest==NULL || cHandle==NULL) return;
 8002b9e:	bf00      	nop
}
 8002ba0:	370c      	adds	r7, #12
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba8:	4770      	bx	lr
	...

08002bac <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8002bb0:	4b17      	ldr	r3, [pc, #92]	@ (8002c10 <MX_CAN1_Init+0x64>)
 8002bb2:	4a18      	ldr	r2, [pc, #96]	@ (8002c14 <MX_CAN1_Init+0x68>)
 8002bb4:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 8002bb6:	4b16      	ldr	r3, [pc, #88]	@ (8002c10 <MX_CAN1_Init+0x64>)
 8002bb8:	2210      	movs	r2, #16
 8002bba:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8002bbc:	4b14      	ldr	r3, [pc, #80]	@ (8002c10 <MX_CAN1_Init+0x64>)
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8002bc2:	4b13      	ldr	r3, [pc, #76]	@ (8002c10 <MX_CAN1_Init+0x64>)
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_6TQ;
 8002bc8:	4b11      	ldr	r3, [pc, #68]	@ (8002c10 <MX_CAN1_Init+0x64>)
 8002bca:	f44f 22a0 	mov.w	r2, #327680	@ 0x50000
 8002bce:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8002bd0:	4b0f      	ldr	r3, [pc, #60]	@ (8002c10 <MX_CAN1_Init+0x64>)
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8002bd6:	4b0e      	ldr	r3, [pc, #56]	@ (8002c10 <MX_CAN1_Init+0x64>)
 8002bd8:	2200      	movs	r2, #0
 8002bda:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8002bdc:	4b0c      	ldr	r3, [pc, #48]	@ (8002c10 <MX_CAN1_Init+0x64>)
 8002bde:	2200      	movs	r2, #0
 8002be0:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8002be2:	4b0b      	ldr	r3, [pc, #44]	@ (8002c10 <MX_CAN1_Init+0x64>)
 8002be4:	2200      	movs	r2, #0
 8002be6:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8002be8:	4b09      	ldr	r3, [pc, #36]	@ (8002c10 <MX_CAN1_Init+0x64>)
 8002bea:	2200      	movs	r2, #0
 8002bec:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8002bee:	4b08      	ldr	r3, [pc, #32]	@ (8002c10 <MX_CAN1_Init+0x64>)
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8002bf4:	4b06      	ldr	r3, [pc, #24]	@ (8002c10 <MX_CAN1_Init+0x64>)
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8002bfa:	4805      	ldr	r0, [pc, #20]	@ (8002c10 <MX_CAN1_Init+0x64>)
 8002bfc:	f004 fe74 	bl	80078e8 <HAL_CAN_Init>
 8002c00:	4603      	mov	r3, r0
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d001      	beq.n	8002c0a <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 8002c06:	f001 f973 	bl	8003ef0 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8002c0a:	bf00      	nop
 8002c0c:	bd80      	pop	{r7, pc}
 8002c0e:	bf00      	nop
 8002c10:	200049fc 	.word	0x200049fc
 8002c14:	40006400 	.word	0x40006400

08002c18 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b08a      	sub	sp, #40	@ 0x28
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c20:	f107 0314 	add.w	r3, r7, #20
 8002c24:	2200      	movs	r2, #0
 8002c26:	601a      	str	r2, [r3, #0]
 8002c28:	605a      	str	r2, [r3, #4]
 8002c2a:	609a      	str	r2, [r3, #8]
 8002c2c:	60da      	str	r2, [r3, #12]
 8002c2e:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4a1f      	ldr	r2, [pc, #124]	@ (8002cb4 <HAL_CAN_MspInit+0x9c>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d138      	bne.n	8002cac <HAL_CAN_MspInit+0x94>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8002c3a:	4b1f      	ldr	r3, [pc, #124]	@ (8002cb8 <HAL_CAN_MspInit+0xa0>)
 8002c3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c3e:	4a1e      	ldr	r2, [pc, #120]	@ (8002cb8 <HAL_CAN_MspInit+0xa0>)
 8002c40:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002c44:	6593      	str	r3, [r2, #88]	@ 0x58
 8002c46:	4b1c      	ldr	r3, [pc, #112]	@ (8002cb8 <HAL_CAN_MspInit+0xa0>)
 8002c48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c4a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c4e:	613b      	str	r3, [r7, #16]
 8002c50:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c52:	4b19      	ldr	r3, [pc, #100]	@ (8002cb8 <HAL_CAN_MspInit+0xa0>)
 8002c54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c56:	4a18      	ldr	r2, [pc, #96]	@ (8002cb8 <HAL_CAN_MspInit+0xa0>)
 8002c58:	f043 0302 	orr.w	r3, r3, #2
 8002c5c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002c5e:	4b16      	ldr	r3, [pc, #88]	@ (8002cb8 <HAL_CAN_MspInit+0xa0>)
 8002c60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c62:	f003 0302 	and.w	r3, r3, #2
 8002c66:	60fb      	str	r3, [r7, #12]
 8002c68:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB5     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002c6a:	2320      	movs	r3, #32
 8002c6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c6e:	2302      	movs	r3, #2
 8002c70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c72:	2300      	movs	r3, #0
 8002c74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c76:	2303      	movs	r3, #3
 8002c78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_CAN1;
 8002c7a:	2303      	movs	r3, #3
 8002c7c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c7e:	f107 0314 	add.w	r3, r7, #20
 8002c82:	4619      	mov	r1, r3
 8002c84:	480d      	ldr	r0, [pc, #52]	@ (8002cbc <HAL_CAN_MspInit+0xa4>)
 8002c86:	f005 f88d 	bl	8007da4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002c8a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002c8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c90:	2302      	movs	r3, #2
 8002c92:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c94:	2300      	movs	r3, #0
 8002c96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c98:	2303      	movs	r3, #3
 8002c9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8002c9c:	2309      	movs	r3, #9
 8002c9e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ca0:	f107 0314 	add.w	r3, r7, #20
 8002ca4:	4619      	mov	r1, r3
 8002ca6:	4805      	ldr	r0, [pc, #20]	@ (8002cbc <HAL_CAN_MspInit+0xa4>)
 8002ca8:	f005 f87c 	bl	8007da4 <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8002cac:	bf00      	nop
 8002cae:	3728      	adds	r7, #40	@ 0x28
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	bd80      	pop	{r7, pc}
 8002cb4:	40006400 	.word	0x40006400
 8002cb8:	40021000 	.word	0x40021000
 8002cbc:	48000400 	.word	0x48000400

08002cc0 <checkByteIsPartOfPattern>:
 * The function will also set the integer pointed by indx to the index of the byte inside the pattern array
 * (if correspondance is found), if indx is not needed it can be set to NULL, if multiple possible indexes are found, 
 * the indxPolicy will determine if the lowest (indxPolicy==0) or highest (indxPolicy!=0) index is written.
 */
static uint8_t checkByteIsPartOfPattern(circular_buffer_handle* handle, uint32_t pos, uint8_t* patt, \
		uint32_t pattLen, uint32_t* indx, uint8_t indxPolicy){
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b08c      	sub	sp, #48	@ 0x30
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	60f8      	str	r0, [r7, #12]
 8002cc8:	60b9      	str	r1, [r7, #8]
 8002cca:	607a      	str	r2, [r7, #4]
 8002ccc:	603b      	str	r3, [r7, #0]

	if(handle==NULL || handle->elemNum==0 || patt==NULL || pattLen==0 || pos>=handle->elemNum) return 0;
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d00e      	beq.n	8002cf2 <checkByteIsPartOfPattern+0x32>
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	689b      	ldr	r3, [r3, #8]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d00a      	beq.n	8002cf2 <checkByteIsPartOfPattern+0x32>
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d007      	beq.n	8002cf2 <checkByteIsPartOfPattern+0x32>
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d004      	beq.n	8002cf2 <checkByteIsPartOfPattern+0x32>
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	689b      	ldr	r3, [r3, #8]
 8002cec:	68ba      	ldr	r2, [r7, #8]
 8002cee:	429a      	cmp	r2, r3
 8002cf0:	d301      	bcc.n	8002cf6 <checkByteIsPartOfPattern+0x36>
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	e091      	b.n	8002e1a <checkByteIsPartOfPattern+0x15a>

	//check if complete correspondance is possible
	if(handle->elemNum>=pattLen){
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	689b      	ldr	r3, [r3, #8]
 8002cfa:	683a      	ldr	r2, [r7, #0]
 8002cfc:	429a      	cmp	r2, r3
 8002cfe:	d860      	bhi.n	8002dc2 <checkByteIsPartOfPattern+0x102>
		uint32_t startShift; //first shift of patt that is possible inside buff
		uint32_t endShift;	//last shift(+1) of patt that is possible inside buff

		//computing start and end shift
		//if there's no space for pattern until end of buffer (because we are too near the end of the buffer)
		if((handle->elemNum-pattLen)<pos) startShift=pos-(handle->elemNum-pattLen); else startShift=0;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	689a      	ldr	r2, [r3, #8]
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	1ad3      	subs	r3, r2, r3
 8002d08:	68ba      	ldr	r2, [r7, #8]
 8002d0a:	429a      	cmp	r2, r3
 8002d0c:	d907      	bls.n	8002d1e <checkByteIsPartOfPattern+0x5e>
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	689b      	ldr	r3, [r3, #8]
 8002d12:	683a      	ldr	r2, [r7, #0]
 8002d14:	1ad3      	subs	r3, r2, r3
 8002d16:	68ba      	ldr	r2, [r7, #8]
 8002d18:	4413      	add	r3, r2
 8002d1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002d1c:	e001      	b.n	8002d22 <checkByteIsPartOfPattern+0x62>
 8002d1e:	2300      	movs	r3, #0
 8002d20:	62fb      	str	r3, [r7, #44]	@ 0x2c
		//if there's no space for pattern from begin of buffer (because we are too near the begin of the buffer)
		if(pos<(pattLen-1)) endShift=pos+1; else endShift=pattLen;
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	3b01      	subs	r3, #1
 8002d26:	68ba      	ldr	r2, [r7, #8]
 8002d28:	429a      	cmp	r2, r3
 8002d2a:	d203      	bcs.n	8002d34 <checkByteIsPartOfPattern+0x74>
 8002d2c:	68bb      	ldr	r3, [r7, #8]
 8002d2e:	3301      	adds	r3, #1
 8002d30:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002d32:	e001      	b.n	8002d38 <checkByteIsPartOfPattern+0x78>
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	62bb      	str	r3, [r7, #40]	@ 0x28


		for(uint32_t s=0;s<(endShift-startShift);s++){ //loop to check all possible shifts
 8002d38:	2300      	movs	r3, #0
 8002d3a:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d3c:	e03b      	b.n	8002db6 <checkByteIsPartOfPattern+0xf6>
			uint32_t shift;
			if(!indxPolicy) shift=startShift+s;
 8002d3e:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d104      	bne.n	8002d50 <checkByteIsPartOfPattern+0x90>
 8002d46:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002d48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d4a:	4413      	add	r3, r2
 8002d4c:	623b      	str	r3, [r7, #32]
 8002d4e:	e004      	b.n	8002d5a <checkByteIsPartOfPattern+0x9a>
			else			shift=endShift-1-s;
 8002d50:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002d52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d54:	1ad3      	subs	r3, r2, r3
 8002d56:	3b01      	subs	r3, #1
 8002d58:	623b      	str	r3, [r7, #32]

			uint8_t complete=1;
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	77fb      	strb	r3, [r7, #31]
			for(uint32_t p=0;p<pattLen;p++){
 8002d5e:	2300      	movs	r3, #0
 8002d60:	61bb      	str	r3, [r7, #24]
 8002d62:	e016      	b.n	8002d92 <checkByteIsPartOfPattern+0xd2>
				if(cBuffReadByte(handle,0,pos-shift+p)!=patt[p]){
 8002d64:	68ba      	ldr	r2, [r7, #8]
 8002d66:	6a3b      	ldr	r3, [r7, #32]
 8002d68:	1ad2      	subs	r2, r2, r3
 8002d6a:	69bb      	ldr	r3, [r7, #24]
 8002d6c:	4413      	add	r3, r2
 8002d6e:	461a      	mov	r2, r3
 8002d70:	2100      	movs	r1, #0
 8002d72:	68f8      	ldr	r0, [r7, #12]
 8002d74:	f7ff fe96 	bl	8002aa4 <cBuffReadByte>
 8002d78:	4603      	mov	r3, r0
 8002d7a:	4619      	mov	r1, r3
 8002d7c:	687a      	ldr	r2, [r7, #4]
 8002d7e:	69bb      	ldr	r3, [r7, #24]
 8002d80:	4413      	add	r3, r2
 8002d82:	781b      	ldrb	r3, [r3, #0]
 8002d84:	4299      	cmp	r1, r3
 8002d86:	d001      	beq.n	8002d8c <checkByteIsPartOfPattern+0xcc>
					complete=0;
 8002d88:	2300      	movs	r3, #0
 8002d8a:	77fb      	strb	r3, [r7, #31]
			for(uint32_t p=0;p<pattLen;p++){
 8002d8c:	69bb      	ldr	r3, [r7, #24]
 8002d8e:	3301      	adds	r3, #1
 8002d90:	61bb      	str	r3, [r7, #24]
 8002d92:	69ba      	ldr	r2, [r7, #24]
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	429a      	cmp	r2, r3
 8002d98:	d3e4      	bcc.n	8002d64 <checkByteIsPartOfPattern+0xa4>
				}
			}

			if(complete){ //complete correspondance found
 8002d9a:	7ffb      	ldrb	r3, [r7, #31]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d007      	beq.n	8002db0 <checkByteIsPartOfPattern+0xf0>
				if(indx!=NULL) *indx=shift;
 8002da0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d002      	beq.n	8002dac <checkByteIsPartOfPattern+0xec>
 8002da6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002da8:	6a3a      	ldr	r2, [r7, #32]
 8002daa:	601a      	str	r2, [r3, #0]
				return 2;
 8002dac:	2302      	movs	r3, #2
 8002dae:	e034      	b.n	8002e1a <checkByteIsPartOfPattern+0x15a>
		for(uint32_t s=0;s<(endShift-startShift);s++){ //loop to check all possible shifts
 8002db0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002db2:	3301      	adds	r3, #1
 8002db4:	627b      	str	r3, [r7, #36]	@ 0x24
 8002db6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002db8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002dba:	1ad3      	subs	r3, r2, r3
 8002dbc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002dbe:	429a      	cmp	r2, r3
 8002dc0:	d3bd      	bcc.n	8002d3e <checkByteIsPartOfPattern+0x7e>
			}
		}
	}

	//check for partial correspondance
	for(uint32_t p=0;p<pattLen;p++){
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	617b      	str	r3, [r7, #20]
 8002dc6:	e023      	b.n	8002e10 <checkByteIsPartOfPattern+0x150>

		uint32_t shift;
		if(!indxPolicy) shift=p;
 8002dc8:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d102      	bne.n	8002dd6 <checkByteIsPartOfPattern+0x116>
 8002dd0:	697b      	ldr	r3, [r7, #20]
 8002dd2:	613b      	str	r3, [r7, #16]
 8002dd4:	e004      	b.n	8002de0 <checkByteIsPartOfPattern+0x120>
		else			shift=pattLen-1-p;
 8002dd6:	683a      	ldr	r2, [r7, #0]
 8002dd8:	697b      	ldr	r3, [r7, #20]
 8002dda:	1ad3      	subs	r3, r2, r3
 8002ddc:	3b01      	subs	r3, #1
 8002dde:	613b      	str	r3, [r7, #16]

		if(cBuffReadByte(handle,0,pos)==patt[shift]){
 8002de0:	68ba      	ldr	r2, [r7, #8]
 8002de2:	2100      	movs	r1, #0
 8002de4:	68f8      	ldr	r0, [r7, #12]
 8002de6:	f7ff fe5d 	bl	8002aa4 <cBuffReadByte>
 8002dea:	4603      	mov	r3, r0
 8002dec:	4619      	mov	r1, r3
 8002dee:	687a      	ldr	r2, [r7, #4]
 8002df0:	693b      	ldr	r3, [r7, #16]
 8002df2:	4413      	add	r3, r2
 8002df4:	781b      	ldrb	r3, [r3, #0]
 8002df6:	4299      	cmp	r1, r3
 8002df8:	d107      	bne.n	8002e0a <checkByteIsPartOfPattern+0x14a>
			//partial correspondance found
			if(indx!=NULL) *indx=shift;
 8002dfa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d002      	beq.n	8002e06 <checkByteIsPartOfPattern+0x146>
 8002e00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e02:	693a      	ldr	r2, [r7, #16]
 8002e04:	601a      	str	r2, [r3, #0]
			return 1;
 8002e06:	2301      	movs	r3, #1
 8002e08:	e007      	b.n	8002e1a <checkByteIsPartOfPattern+0x15a>
	for(uint32_t p=0;p<pattLen;p++){
 8002e0a:	697b      	ldr	r3, [r7, #20]
 8002e0c:	3301      	adds	r3, #1
 8002e0e:	617b      	str	r3, [r7, #20]
 8002e10:	697a      	ldr	r2, [r7, #20]
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	429a      	cmp	r2, r3
 8002e16:	d3d7      	bcc.n	8002dc8 <checkByteIsPartOfPattern+0x108>
		}
	}

	return 0;
 8002e18:	2300      	movs	r3, #0
}
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	3730      	adds	r7, #48	@ 0x30
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bd80      	pop	{r7, pc}

08002e22 <searchFrame>:

uint32_t searchFrame(circular_buffer_handle* stream, circular_buffer_handle* frame, search_frame_rule * rule){
 8002e22:	b580      	push	{r7, lr}
 8002e24:	b094      	sub	sp, #80	@ 0x50
 8002e26:	af02      	add	r7, sp, #8
 8002e28:	60f8      	str	r0, [r7, #12]
 8002e2a:	60b9      	str	r1, [r7, #8]
 8002e2c:	607a      	str	r2, [r7, #4]
	//guard checks
	if(stream==NULL || stream->buff == NULL || rule==NULL || stream->elemNum==0 || rule->headLen==0 || rule->head==NULL) return stream->elemNum;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d012      	beq.n	8002e5a <searchFrame+0x38>
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d00e      	beq.n	8002e5a <searchFrame+0x38>
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d00b      	beq.n	8002e5a <searchFrame+0x38>
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	689b      	ldr	r3, [r3, #8]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d007      	beq.n	8002e5a <searchFrame+0x38>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d003      	beq.n	8002e5a <searchFrame+0x38>
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d102      	bne.n	8002e60 <searchFrame+0x3e>
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	689b      	ldr	r3, [r3, #8]
 8002e5e:	e166      	b.n	800312e <searchFrame+0x30c>
	//If packet cannot fit in available bytes
	if(stream->elemNum<(rule->headLen+rule->minLen+rule->tailLen)) return stream->elemNum;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	689a      	ldr	r2, [r3, #8]
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6859      	ldr	r1, [r3, #4]
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	691b      	ldr	r3, [r3, #16]
 8002e6c:	4419      	add	r1, r3
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	68db      	ldr	r3, [r3, #12]
 8002e72:	440b      	add	r3, r1
 8002e74:	429a      	cmp	r2, r3
 8002e76:	d202      	bcs.n	8002e7e <searchFrame+0x5c>
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	689b      	ldr	r3, [r3, #8]
 8002e7c:	e157      	b.n	800312e <searchFrame+0x30c>
	    _waiting,
	    _inside
	} machine_state;

	//variables and flags
	machine_state state=_waiting;	//decoding state machine state
 8002e7e:	2300      	movs	r3, #0
 8002e80:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    uint32_t startPos=0;	//temporary variable were we save the last byte of head
 8002e84:	2300      	movs	r3, #0
 8002e86:	643b      	str	r3, [r7, #64]	@ 0x40

	uint8_t headPart=0;	//flag to signal if this byte is part of a partial (if 1) or complete (if 2) head
 8002e88:	2300      	movs	r3, #0
 8002e8a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
	uint8_t tailPart=0;	//flag to signal if this byte is part of a partial (if 1) or complete (if 2) tail
 8002e8e:	2300      	movs	r3, #0
 8002e90:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
	uint32_t headIndex=0;	//variable that will contain the index of the byte inside head (if part of it)
 8002e94:	2300      	movs	r3, #0
 8002e96:	61bb      	str	r3, [r7, #24]
	uint32_t tailIndex=0;	//variable that will contain the index of the byte inside tail (if part of it)
 8002e98:	2300      	movs	r3, #0
 8002e9a:	617b      	str	r3, [r7, #20]
	uint8_t forbiddenByte=0; //flag to signal that current byte is of forbidden type (head/tail or parts of it depending on mode)
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29

	uint8_t canBeFirst=0; //flag to signal if the current byte can be the first byte of a frame (last byte of head)
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
	uint8_t canBeLast=0; //flag to signal if the current byte can be the last byte of a frame
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	uint8_t minLenFlag=0;//flag to signal that the minimum length prerequisite has been satisfied
 8002eae:	2300      	movs	r3, #0
 8002eb0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	uint32_t currLen=0; //current packet length (head and tail excluded)
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	63bb      	str	r3, [r7, #56]	@ 0x38

    if(rule->policy != hard && rule->policy!=medium) rule->policy=soft;	//correct eventual policy error
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	7e1b      	ldrb	r3, [r3, #24]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d006      	beq.n	8002ece <searchFrame+0xac>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	7e1b      	ldrb	r3, [r3, #24]
 8002ec4:	2b01      	cmp	r3, #1
 8002ec6:	d002      	beq.n	8002ece <searchFrame+0xac>
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2202      	movs	r2, #2
 8002ecc:	761a      	strb	r2, [r3, #24]

	//scanning each byte inside the buffer (avoiding to check the last tailLen bytes)
	for(int b=0;b<(stream->elemNum-rule->tailLen);b++){
 8002ece:	2300      	movs	r3, #0
 8002ed0:	637b      	str	r3, [r7, #52]	@ 0x34
 8002ed2:	e121      	b.n	8003118 <searchFrame+0x2f6>

		//checking if byte can be part of a head or be a head end
        headPart=checkByteIsPartOfPattern(stream, b, rule->head, rule->headLen, &headIndex, 1);
 8002ed4:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681a      	ldr	r2, [r3, #0]
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6858      	ldr	r0, [r3, #4]
 8002ede:	2301      	movs	r3, #1
 8002ee0:	9301      	str	r3, [sp, #4]
 8002ee2:	f107 0318 	add.w	r3, r7, #24
 8002ee6:	9300      	str	r3, [sp, #0]
 8002ee8:	4603      	mov	r3, r0
 8002eea:	68f8      	ldr	r0, [r7, #12]
 8002eec:	f7ff fee8 	bl	8002cc0 <checkByteIsPartOfPattern>
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

        //checking if byte can be part of a tail or be a tail begin
        //if mode is tail-less, tailPart will always remain 0
        tailPart=checkByteIsPartOfPattern(stream, b, rule->tail, rule->tailLen, &tailIndex, 0);
 8002ef6:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	689a      	ldr	r2, [r3, #8]
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	68d8      	ldr	r0, [r3, #12]
 8002f00:	2300      	movs	r3, #0
 8002f02:	9301      	str	r3, [sp, #4]
 8002f04:	f107 0314 	add.w	r3, r7, #20
 8002f08:	9300      	str	r3, [sp, #0]
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	68f8      	ldr	r0, [r7, #12]
 8002f0e:	f7ff fed7 	bl	8002cc0 <checkByteIsPartOfPattern>
 8002f12:	4603      	mov	r3, r0
 8002f14:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a

		//check if byte is forbidden byte
		//for readibility i divided the assignment in different lines
		forbiddenByte=(rule->policy!=soft) && (headPart==2 || tailPart==2 || ((rule->policy==hard) && (headPart==1 || tailPart==1)));
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	7e1b      	ldrb	r3, [r3, #24]
 8002f1c:	2b02      	cmp	r3, #2
 8002f1e:	d015      	beq.n	8002f4c <searchFrame+0x12a>
 8002f20:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8002f24:	2b02      	cmp	r3, #2
 8002f26:	d00f      	beq.n	8002f48 <searchFrame+0x126>
 8002f28:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8002f2c:	2b02      	cmp	r3, #2
 8002f2e:	d00b      	beq.n	8002f48 <searchFrame+0x126>
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	7e1b      	ldrb	r3, [r3, #24]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d109      	bne.n	8002f4c <searchFrame+0x12a>
 8002f38:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8002f3c:	2b01      	cmp	r3, #1
 8002f3e:	d003      	beq.n	8002f48 <searchFrame+0x126>
 8002f40:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8002f44:	2b01      	cmp	r3, #1
 8002f46:	d101      	bne.n	8002f4c <searchFrame+0x12a>
 8002f48:	2301      	movs	r3, #1
 8002f4a:	e000      	b.n	8002f4e <searchFrame+0x12c>
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29

		//checking minLen and maxLen policies
		if(state==_inside){
 8002f52:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8002f56:	2b01      	cmp	r3, #1
 8002f58:	d104      	bne.n	8002f64 <searchFrame+0x142>
			currLen=b-startPos;
 8002f5a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002f5c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002f5e:	1ad3      	subs	r3, r2, r3
 8002f60:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002f62:	e001      	b.n	8002f68 <searchFrame+0x146>
		}else{
			currLen=0;
 8002f64:	2300      	movs	r3, #0
 8002f66:	63bb      	str	r3, [r7, #56]	@ 0x38
		}
		//the second part is to account for head bytes that are also last bytes
		minLenFlag=currLen>=rule->minLen;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	691b      	ldr	r3, [r3, #16]
 8002f6c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002f6e:	429a      	cmp	r2, r3
 8002f70:	bf2c      	ite	cs
 8002f72:	2301      	movcs	r3, #1
 8002f74:	2300      	movcc	r3, #0
 8002f76:	b2db      	uxtb	r3, r3
 8002f78:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		forbiddenByte=forbiddenByte || ((rule->maxLen!=0) && (currLen > rule->maxLen));
 8002f7c:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d108      	bne.n	8002f96 <searchFrame+0x174>
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	695b      	ldr	r3, [r3, #20]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d006      	beq.n	8002f9a <searchFrame+0x178>
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	695b      	ldr	r3, [r3, #20]
 8002f90:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002f92:	429a      	cmp	r2, r3
 8002f94:	d901      	bls.n	8002f9a <searchFrame+0x178>
 8002f96:	2301      	movs	r3, #1
 8002f98:	e000      	b.n	8002f9c <searchFrame+0x17a>
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29

		//checking if current byte can be the first frame byte (last head byte)
		canBeFirst=(headPart==2) && (headIndex==(rule->headLen-1));
 8002fa0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8002fa4:	2b02      	cmp	r3, #2
 8002fa6:	d107      	bne.n	8002fb8 <searchFrame+0x196>
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	685b      	ldr	r3, [r3, #4]
 8002fac:	1e5a      	subs	r2, r3, #1
 8002fae:	69bb      	ldr	r3, [r7, #24]
 8002fb0:	429a      	cmp	r2, r3
 8002fb2:	d101      	bne.n	8002fb8 <searchFrame+0x196>
 8002fb4:	2301      	movs	r3, #1
 8002fb6:	e000      	b.n	8002fba <searchFrame+0x198>
 8002fb8:	2300      	movs	r3, #0
 8002fba:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28

		//checking if current byte can be the last frame byte
		if(minLenFlag){
 8002fbe:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d02b      	beq.n	800301e <searchFrame+0x1fc>
			if(rule->tail== NULL || rule->tailLen==0){//tail-less mode
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	689b      	ldr	r3, [r3, #8]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d003      	beq.n	8002fd6 <searchFrame+0x1b4>
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	68db      	ldr	r3, [r3, #12]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d103      	bne.n	8002fde <searchFrame+0x1bc>
				canBeLast=1; 
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8002fdc:	e01f      	b.n	800301e <searchFrame+0x1fc>
			}else{ //normal mode
				uint32_t tmpTailIndex;
				canBeLast=checkByteIsPartOfPattern(stream, b+1, rule->tail, rule->tailLen, &tmpTailIndex, 0);
 8002fde:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002fe0:	3301      	adds	r3, #1
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	689a      	ldr	r2, [r3, #8]
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	68d9      	ldr	r1, [r3, #12]
 8002fec:	2300      	movs	r3, #0
 8002fee:	9301      	str	r3, [sp, #4]
 8002ff0:	f107 0310 	add.w	r3, r7, #16
 8002ff4:	9300      	str	r3, [sp, #0]
 8002ff6:	460b      	mov	r3, r1
 8002ff8:	4601      	mov	r1, r0
 8002ffa:	68f8      	ldr	r0, [r7, #12]
 8002ffc:	f7ff fe60 	bl	8002cc0 <checkByteIsPartOfPattern>
 8003000:	4603      	mov	r3, r0
 8003002:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
				canBeLast=(canBeLast == 2) && (tmpTailIndex==0);
 8003006:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800300a:	2b02      	cmp	r3, #2
 800300c:	d104      	bne.n	8003018 <searchFrame+0x1f6>
 800300e:	693b      	ldr	r3, [r7, #16]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d101      	bne.n	8003018 <searchFrame+0x1f6>
 8003014:	2301      	movs	r3, #1
 8003016:	e000      	b.n	800301a <searchFrame+0x1f8>
 8003018:	2300      	movs	r3, #0
 800301a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
			}
		}

		//STATE MACHINE
		if(state==_waiting){ 		//if we are waiting for the frame to begin
 800301e:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8003022:	2b00      	cmp	r3, #0
 8003024:	d135      	bne.n	8003092 <searchFrame+0x270>
			if(canBeFirst){ //if we found a frame start
 8003026:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800302a:	2b00      	cmp	r3, #0
 800302c:	d071      	beq.n	8003112 <searchFrame+0x2f0>
				state=_inside;
 800302e:	2301      	movs	r3, #1
 8003030:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
				startPos=b;
 8003034:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003036:	643b      	str	r3, [r7, #64]	@ 0x40

				//we check if we already found a 0 length frame
				if(canBeLast){
 8003038:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800303c:	2b00      	cmp	r3, #0
 800303e:	d068      	beq.n	8003112 <searchFrame+0x2f0>
					//frame found!

					//computing packet length and starting virtual index
					uint32_t tmpLen=rule->headLen;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	685b      	ldr	r3, [r3, #4]
 8003044:	633b      	str	r3, [r7, #48]	@ 0x30
					if(rule->tail!=NULL) tmpLen+=rule->tailLen;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	689b      	ldr	r3, [r3, #8]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d004      	beq.n	8003058 <searchFrame+0x236>
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	68db      	ldr	r3, [r3, #12]
 8003052:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003054:	4413      	add	r3, r2
 8003056:	633b      	str	r3, [r7, #48]	@ 0x30
					uint32_t startVIndex=startPos+1-rule->headLen;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800305e:	1ad3      	subs	r3, r2, r3
 8003060:	3301      	adds	r3, #1
 8003062:	61fb      	str	r3, [r7, #28]

					//filling output handle
					if(frame!=NULL){
 8003064:	68bb      	ldr	r3, [r7, #8]
 8003066:	2b00      	cmp	r3, #0
 8003068:	d011      	beq.n	800308e <searchFrame+0x26c>
						frame->buff=stream->buff;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681a      	ldr	r2, [r3, #0]
 800306e:	68bb      	ldr	r3, [r7, #8]
 8003070:	601a      	str	r2, [r3, #0]
						frame->buffLen=stream->buffLen;
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	685a      	ldr	r2, [r3, #4]
 8003076:	68bb      	ldr	r3, [r7, #8]
 8003078:	605a      	str	r2, [r3, #4]
						frame->elemNum=tmpLen;
 800307a:	68bb      	ldr	r3, [r7, #8]
 800307c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800307e:	609a      	str	r2, [r3, #8]
						frame->startIndex=cBuffGetMemIndex(stream,startVIndex);
 8003080:	69f9      	ldr	r1, [r7, #28]
 8003082:	68f8      	ldr	r0, [r7, #12]
 8003084:	f7ff fa32 	bl	80024ec <cBuffGetMemIndex>
 8003088:	4602      	mov	r2, r0
 800308a:	68bb      	ldr	r3, [r7, #8]
 800308c:	60da      	str	r2, [r3, #12]
					}
					return startVIndex;
 800308e:	69fb      	ldr	r3, [r7, #28]
 8003090:	e04d      	b.n	800312e <searchFrame+0x30c>
				}
			}
		}else if(state==_inside){
 8003092:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8003096:	2b01      	cmp	r3, #1
 8003098:	d138      	bne.n	800310c <searchFrame+0x2ea>
			/* checks priority:
			 * Forbidden bytes? -> discard frame and eventually restart with next possible frame
			 * Last frame byte? -> frame found!
			 */

			if(forbiddenByte){
 800309a:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d005      	beq.n	80030ae <searchFrame+0x28c>
				//discard frame and eventually restart with next possible frame
				//state back to waiting
				state=_waiting;
 80030a2:	2300      	movs	r3, #0
 80030a4:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
				//after this iteration b will be incremented to the byte next to the old head
				//this can be optimized by taking note of the first occurrence of canBeFirst
				//and jumping there but for now this is enough 
				b=startPos;
 80030a8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80030aa:	637b      	str	r3, [r7, #52]	@ 0x34
 80030ac:	e031      	b.n	8003112 <searchFrame+0x2f0>

			}else if(canBeLast){
 80030ae:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d02d      	beq.n	8003112 <searchFrame+0x2f0>
				//frame found!

				//computing packet length and starting virtual index
				uint32_t tmpLen=currLen+rule->headLen;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80030bc:	4413      	add	r3, r2
 80030be:	62fb      	str	r3, [r7, #44]	@ 0x2c
				if(rule->tail!=NULL) tmpLen+=rule->tailLen;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	689b      	ldr	r3, [r3, #8]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d004      	beq.n	80030d2 <searchFrame+0x2b0>
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	68db      	ldr	r3, [r3, #12]
 80030cc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80030ce:	4413      	add	r3, r2
 80030d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
				uint32_t startVIndex=startPos+1-rule->headLen;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	685b      	ldr	r3, [r3, #4]
 80030d6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80030d8:	1ad3      	subs	r3, r2, r3
 80030da:	3301      	adds	r3, #1
 80030dc:	623b      	str	r3, [r7, #32]

				//filling output handle
				if(frame!=NULL){
 80030de:	68bb      	ldr	r3, [r7, #8]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d011      	beq.n	8003108 <searchFrame+0x2e6>
					frame->buff=stream->buff;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681a      	ldr	r2, [r3, #0]
 80030e8:	68bb      	ldr	r3, [r7, #8]
 80030ea:	601a      	str	r2, [r3, #0]
					frame->buffLen=stream->buffLen;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	685a      	ldr	r2, [r3, #4]
 80030f0:	68bb      	ldr	r3, [r7, #8]
 80030f2:	605a      	str	r2, [r3, #4]
					frame->elemNum=tmpLen;
 80030f4:	68bb      	ldr	r3, [r7, #8]
 80030f6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80030f8:	609a      	str	r2, [r3, #8]
					frame->startIndex=cBuffGetMemIndex(stream,startVIndex);
 80030fa:	6a39      	ldr	r1, [r7, #32]
 80030fc:	68f8      	ldr	r0, [r7, #12]
 80030fe:	f7ff f9f5 	bl	80024ec <cBuffGetMemIndex>
 8003102:	4602      	mov	r2, r0
 8003104:	68bb      	ldr	r3, [r7, #8]
 8003106:	60da      	str	r2, [r3, #12]
				}
				return startVIndex;
 8003108:	6a3b      	ldr	r3, [r7, #32]
 800310a:	e010      	b.n	800312e <searchFrame+0x30c>
			}
		}else{
			//to manage state errors (should never happen)
			state=_waiting;
 800310c:	2300      	movs	r3, #0
 800310e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	for(int b=0;b<(stream->elemNum-rule->tailLen);b++){
 8003112:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003114:	3301      	adds	r3, #1
 8003116:	637b      	str	r3, [r7, #52]	@ 0x34
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	689a      	ldr	r2, [r3, #8]
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	68db      	ldr	r3, [r3, #12]
 8003120:	1ad2      	subs	r2, r2, r3
 8003122:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003124:	429a      	cmp	r2, r3
 8003126:	f63f aed5 	bhi.w	8002ed4 <searchFrame+0xb2>
		}

    }
	//no valid packet found :(
	return stream->elemNum;
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	689b      	ldr	r3, [r3, #8]
}
 800312e:	4618      	mov	r0, r3
 8003130:	3748      	adds	r7, #72	@ 0x48
 8003132:	46bd      	mov	sp, r7
 8003134:	bd80      	pop	{r7, pc}

08003136 <searchFrameAdvance>:


uint8_t searchFrameAdvance(circular_buffer_handle* stream, circular_buffer_handle* frame, search_frame_rule * rule, uint8_t shiftFlags){
 8003136:	b580      	push	{r7, lr}
 8003138:	b08e      	sub	sp, #56	@ 0x38
 800313a:	af00      	add	r7, sp, #0
 800313c:	60f8      	str	r0, [r7, #12]
 800313e:	60b9      	str	r1, [r7, #8]
 8003140:	607a      	str	r2, [r7, #4]
 8003142:	70fb      	strb	r3, [r7, #3]
	if(stream==NULL || stream->buff == NULL || rule==NULL || stream->elemNum==0 || rule->headLen==0 || rule->head==NULL) return 0;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d012      	beq.n	8003170 <searchFrameAdvance+0x3a>
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d00e      	beq.n	8003170 <searchFrameAdvance+0x3a>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d00b      	beq.n	8003170 <searchFrameAdvance+0x3a>
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	689b      	ldr	r3, [r3, #8]
 800315c:	2b00      	cmp	r3, #0
 800315e:	d007      	beq.n	8003170 <searchFrameAdvance+0x3a>
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	685b      	ldr	r3, [r3, #4]
 8003164:	2b00      	cmp	r3, #0
 8003166:	d003      	beq.n	8003170 <searchFrameAdvance+0x3a>
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	2b00      	cmp	r3, #0
 800316e:	d101      	bne.n	8003174 <searchFrameAdvance+0x3e>
 8003170:	2300      	movs	r3, #0
 8003172:	e06a      	b.n	800324a <searchFrameAdvance+0x114>

	uint32_t startVIndex;
	uint8_t found=0;
 8003174:	2300      	movs	r3, #0
 8003176:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

	//we start searching for the frame by using searchFrame
	startVIndex=searchFrame(stream, frame, rule);
 800317a:	687a      	ldr	r2, [r7, #4]
 800317c:	68b9      	ldr	r1, [r7, #8]
 800317e:	68f8      	ldr	r0, [r7, #12]
 8003180:	f7ff fe4f 	bl	8002e22 <searchFrame>
 8003184:	6338      	str	r0, [r7, #48]	@ 0x30

	//if frame was found
	if(startVIndex!=stream->elemNum){
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	689b      	ldr	r3, [r3, #8]
 800318a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800318c:	429a      	cmp	r2, r3
 800318e:	d026      	beq.n	80031de <searchFrameAdvance+0xa8>
		found=1;
 8003190:	2301      	movs	r3, #1
 8003192:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		//shift out depending on flags SHIFTOUT_CURR, SHIFTOUT_NEXT and SHIFTOUT_FOUND
		if(shiftFlags & (SHIFTOUT_CURR | SHIFTOUT_NEXT | SHIFTOUT_FOUND)){ 
 8003196:	78fb      	ldrb	r3, [r7, #3]
 8003198:	f003 030e 	and.w	r3, r3, #14
 800319c:	2b00      	cmp	r3, #0
 800319e:	d02f      	beq.n	8003200 <searchFrameAdvance+0xca>
			cBuffPull(stream, NULL, startVIndex, 0);
 80031a0:	2300      	movs	r3, #0
 80031a2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80031a4:	2100      	movs	r1, #0
 80031a6:	68f8      	ldr	r0, [r7, #12]
 80031a8:	f7ff fa7a 	bl	80026a0 <cBuffPull>
			if(shiftFlags & SHIFTOUT_FOUND) cBuffPull(stream, NULL, frame->elemNum, 0);
 80031ac:	78fb      	ldrb	r3, [r7, #3]
 80031ae:	f003 0308 	and.w	r3, r3, #8
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d007      	beq.n	80031c6 <searchFrameAdvance+0x90>
 80031b6:	68bb      	ldr	r3, [r7, #8]
 80031b8:	689a      	ldr	r2, [r3, #8]
 80031ba:	2300      	movs	r3, #0
 80031bc:	2100      	movs	r1, #0
 80031be:	68f8      	ldr	r0, [r7, #12]
 80031c0:	f7ff fa6e 	bl	80026a0 <cBuffPull>
 80031c4:	e01c      	b.n	8003200 <searchFrameAdvance+0xca>
			else if(shiftFlags & SHIFTOUT_NEXT) cBuffPull(stream, NULL, 1, 0);
 80031c6:	78fb      	ldrb	r3, [r7, #3]
 80031c8:	f003 0304 	and.w	r3, r3, #4
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d017      	beq.n	8003200 <searchFrameAdvance+0xca>
 80031d0:	2300      	movs	r3, #0
 80031d2:	2201      	movs	r2, #1
 80031d4:	2100      	movs	r1, #0
 80031d6:	68f8      	ldr	r0, [r7, #12]
 80031d8:	f7ff fa62 	bl	80026a0 <cBuffPull>
 80031dc:	e010      	b.n	8003200 <searchFrameAdvance+0xca>
		}
	}else{
		//if no packet was found check for SHIFTOUT_FULL flag
		if((shiftFlags & SHIFTOUT_FULL) && cBuffFull(stream)) cBuffPull(stream, NULL, 1, 0);
 80031de:	78fb      	ldrb	r3, [r7, #3]
 80031e0:	f003 0301 	and.w	r3, r3, #1
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d00b      	beq.n	8003200 <searchFrameAdvance+0xca>
 80031e8:	68f8      	ldr	r0, [r7, #12]
 80031ea:	f7ff fca4 	bl	8002b36 <cBuffFull>
 80031ee:	4603      	mov	r3, r0
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d005      	beq.n	8003200 <searchFrameAdvance+0xca>
 80031f4:	2300      	movs	r3, #0
 80031f6:	2201      	movs	r2, #1
 80031f8:	2100      	movs	r1, #0
 80031fa:	68f8      	ldr	r0, [r7, #12]
 80031fc:	f7ff fa50 	bl	80026a0 <cBuffPull>
	}

	//regardless of packet found or not, perform SHIFTOUT_FAST if requested
	if(shiftFlags & SHIFTOUT_FAST){
 8003200:	78fb      	ldrb	r3, [r7, #3]
 8003202:	f003 0310 	and.w	r3, r3, #16
 8003206:	2b00      	cmp	r3, #0
 8003208:	d01d      	beq.n	8003246 <searchFrameAdvance+0x110>
		//temporary rule for searcing next occurrence of first head byte
		search_frame_rule tmpRule={ 
			.head=rule->head,
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
		search_frame_rule tmpRule={ 
 800320e:	613b      	str	r3, [r7, #16]
 8003210:	2301      	movs	r3, #1
 8003212:	617b      	str	r3, [r7, #20]
 8003214:	2300      	movs	r3, #0
 8003216:	61bb      	str	r3, [r7, #24]
 8003218:	2300      	movs	r3, #0
 800321a:	61fb      	str	r3, [r7, #28]
 800321c:	2300      	movs	r3, #0
 800321e:	623b      	str	r3, [r7, #32]
 8003220:	2300      	movs	r3, #0
 8003222:	627b      	str	r3, [r7, #36]	@ 0x24
 8003224:	2300      	movs	r3, #0
 8003226:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
			.tail=NULL,
			.tailLen=0,
			.policy=hard,
		};
		//search next occurrence of first head byte
		uint32_t nextHead=searchFrame(stream,NULL,&tmpRule);
 800322a:	f107 0310 	add.w	r3, r7, #16
 800322e:	461a      	mov	r2, r3
 8003230:	2100      	movs	r1, #0
 8003232:	68f8      	ldr	r0, [r7, #12]
 8003234:	f7ff fdf5 	bl	8002e22 <searchFrame>
 8003238:	62f8      	str	r0, [r7, #44]	@ 0x2c

		cBuffPull(stream, NULL, nextHead, 0);
 800323a:	2300      	movs	r3, #0
 800323c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800323e:	2100      	movs	r1, #0
 8003240:	68f8      	ldr	r0, [r7, #12]
 8003242:	f7ff fa2d 	bl	80026a0 <cBuffPull>
	}

	return found;
 8003246:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
}
 800324a:	4618      	mov	r0, r3
 800324c:	3738      	adds	r7, #56	@ 0x38
 800324e:	46bd      	mov	sp, r7
 8003250:	bd80      	pop	{r7, pc}
	...

08003254 <txFunc1>:
void OBC_Comm_Task(void const * argument);


//defining serial line I/O functions
//using UART driver
uint8_t txFunc1(uint8_t byte){
 8003254:	b580      	push	{r7, lr}
 8003256:	b082      	sub	sp, #8
 8003258:	af00      	add	r7, sp, #0
 800325a:	4603      	mov	r3, r0
 800325c:	71fb      	strb	r3, [r7, #7]
	return (sendDriver_UART(&huart1, &byte, 1)!=0);
 800325e:	1dfb      	adds	r3, r7, #7
 8003260:	2201      	movs	r2, #1
 8003262:	4619      	mov	r1, r3
 8003264:	4806      	ldr	r0, [pc, #24]	@ (8003280 <txFunc1+0x2c>)
 8003266:	f7fe fa75 	bl	8001754 <sendDriver_UART>
 800326a:	4603      	mov	r3, r0
 800326c:	2b00      	cmp	r3, #0
 800326e:	bf14      	ite	ne
 8003270:	2301      	movne	r3, #1
 8003272:	2300      	moveq	r3, #0
 8003274:	b2db      	uxtb	r3, r3
}
 8003276:	4618      	mov	r0, r3
 8003278:	3708      	adds	r7, #8
 800327a:	46bd      	mov	sp, r7
 800327c:	bd80      	pop	{r7, pc}
 800327e:	bf00      	nop
 8003280:	200233c4 	.word	0x200233c4

08003284 <rxFunc1>:
uint8_t rxFunc1(uint8_t* byte){
 8003284:	b580      	push	{r7, lr}
 8003286:	b082      	sub	sp, #8
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
	return (receiveDriver_UART(&huart1, byte, 1)!=0);
 800328c:	2201      	movs	r2, #1
 800328e:	6879      	ldr	r1, [r7, #4]
 8003290:	4806      	ldr	r0, [pc, #24]	@ (80032ac <rxFunc1+0x28>)
 8003292:	f7fe fa0d 	bl	80016b0 <receiveDriver_UART>
 8003296:	4603      	mov	r3, r0
 8003298:	2b00      	cmp	r3, #0
 800329a:	bf14      	ite	ne
 800329c:	2301      	movne	r3, #1
 800329e:	2300      	moveq	r3, #0
 80032a0:	b2db      	uxtb	r3, r3
}
 80032a2:	4618      	mov	r0, r3
 80032a4:	3708      	adds	r7, #8
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bd80      	pop	{r7, pc}
 80032aa:	bf00      	nop
 80032ac:	200233c4 	.word	0x200233c4

080032b0 <sdlTimeTick>:
uint8_t rxFunc4(uint8_t* byte){
	return (receiveDriver_UART(&huart4, byte, 1)!=0);
}

//defining tick function for timeouts
uint32_t sdlTimeTick(){
 80032b0:	b580      	push	{r7, lr}
 80032b2:	af00      	add	r7, sp, #0
	return HAL_GetTick();
 80032b4:	f003 f81a 	bl	80062ec <HAL_GetTick>
 80032b8:	4603      	mov	r3, r0
}
 80032ba:	4618      	mov	r0, r3
 80032bc:	bd80      	pop	{r7, pc}
	...

080032c0 <__io_putchar>:

/*PUTCHAR_PROTOTYPE{
   HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
   return ch;
}*/
PUTCHAR_PROTOTYPE{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b084      	sub	sp, #16
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
	uint8_t c=(uint8_t)ch;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	b2db      	uxtb	r3, r3
 80032cc:	73fb      	strb	r3, [r7, #15]
	sendDriver_UART(&huart2,&c,1);
 80032ce:	f107 030f 	add.w	r3, r7, #15
 80032d2:	2201      	movs	r2, #1
 80032d4:	4619      	mov	r1, r3
 80032d6:	4804      	ldr	r0, [pc, #16]	@ (80032e8 <__io_putchar+0x28>)
 80032d8:	f7fe fa3c 	bl	8001754 <sendDriver_UART>
	return c;
 80032dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80032de:	4618      	mov	r0, r3
 80032e0:	3710      	adds	r7, #16
 80032e2:	46bd      	mov	sp, r7
 80032e4:	bd80      	pop	{r7, pc}
 80032e6:	bf00      	nop
 80032e8:	20023448 	.word	0x20023448

080032ec <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80032ec:	b480      	push	{r7}
 80032ee:	b085      	sub	sp, #20
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	60f8      	str	r0, [r7, #12]
 80032f4:	60b9      	str	r1, [r7, #8]
 80032f6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	4a07      	ldr	r2, [pc, #28]	@ (8003318 <vApplicationGetIdleTaskMemory+0x2c>)
 80032fc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80032fe:	68bb      	ldr	r3, [r7, #8]
 8003300:	4a06      	ldr	r2, [pc, #24]	@ (800331c <vApplicationGetIdleTaskMemory+0x30>)
 8003302:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2280      	movs	r2, #128	@ 0x80
 8003308:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800330a:	bf00      	nop
 800330c:	3714      	adds	r7, #20
 800330e:	46bd      	mov	sp, r7
 8003310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003314:	4770      	bx	lr
 8003316:	bf00      	nop
 8003318:	2001e278 	.word	0x2001e278
 800331c:	2001e2cc 	.word	0x2001e2cc

08003320 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 8003320:	b480      	push	{r7}
 8003322:	b085      	sub	sp, #20
 8003324:	af00      	add	r7, sp, #0
 8003326:	60f8      	str	r0, [r7, #12]
 8003328:	60b9      	str	r1, [r7, #8]
 800332a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	4a07      	ldr	r2, [pc, #28]	@ (800334c <vApplicationGetTimerTaskMemory+0x2c>)
 8003330:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 8003332:	68bb      	ldr	r3, [r7, #8]
 8003334:	4a06      	ldr	r2, [pc, #24]	@ (8003350 <vApplicationGetTimerTaskMemory+0x30>)
 8003336:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800333e:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8003340:	bf00      	nop
 8003342:	3714      	adds	r7, #20
 8003344:	46bd      	mov	sp, r7
 8003346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334a:	4770      	bx	lr
 800334c:	2001e4cc 	.word	0x2001e4cc
 8003350:	2001e520 	.word	0x2001e520

08003354 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8003354:	b5b0      	push	{r4, r5, r7, lr}
 8003356:	b0bc      	sub	sp, #240	@ 0xf0
 8003358:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */

	initDriver_UART();
 800335a:	f7fe f8cd 	bl	80014f8 <initDriver_UART>
	//UART1 = for printf
	addDriver_UART(&huart2,USART2_IRQn,keep_old);
 800335e:	2200      	movs	r2, #0
 8003360:	2126      	movs	r1, #38	@ 0x26
 8003362:	4883      	ldr	r0, [pc, #524]	@ (8003570 <MX_FREERTOS_Init+0x21c>)
 8003364:	f7fe f8e6 	bl	8001534 <addDriver_UART>
	//UART1 = for OBC communication
	addDriver_UART(&huart1,USART1_IRQn,keep_old);
 8003368:	2200      	movs	r2, #0
 800336a:	2125      	movs	r1, #37	@ 0x25
 800336c:	4881      	ldr	r0, [pc, #516]	@ (8003574 <MX_FREERTOS_Init+0x220>)
 800336e:	f7fe f8e1 	bl	8001534 <addDriver_UART>
	//UART1 = for IMU
	addDriver_UART(&huart4,UART4_IRQn,keep_new);
 8003372:	2201      	movs	r2, #1
 8003374:	2134      	movs	r1, #52	@ 0x34
 8003376:	4880      	ldr	r0, [pc, #512]	@ (8003578 <MX_FREERTOS_Init+0x224>)
 8003378:	f7fe f8dc 	bl	8001534 <addDriver_UART>

  /* USER CODE END Init */

  /* USER CODE BEGIN RTOS_MUTEX */
  /* add mutexes, ... */
	ControlMutex = xSemaphoreCreateMutexStatic(&xControlMutexBuffer);
 800337c:	497f      	ldr	r1, [pc, #508]	@ (800357c <MX_FREERTOS_Init+0x228>)
 800337e:	2001      	movs	r0, #1
 8003380:	f00a f836 	bl	800d3f0 <xQueueCreateMutexStatic>
 8003384:	4603      	mov	r3, r0
 8003386:	4a7e      	ldr	r2, [pc, #504]	@ (8003580 <MX_FREERTOS_Init+0x22c>)
 8003388:	6013      	str	r3, [r2, #0]
	configASSERT(ControlMutex);
 800338a:	4b7d      	ldr	r3, [pc, #500]	@ (8003580 <MX_FREERTOS_Init+0x22c>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	2b00      	cmp	r3, #0
 8003390:	d10c      	bne.n	80033ac <MX_FREERTOS_Init+0x58>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003392:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003396:	f383 8811 	msr	BASEPRI, r3
 800339a:	f3bf 8f6f 	isb	sy
 800339e:	f3bf 8f4f 	dsb	sy
 80033a2:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80033a6:	bf00      	nop
 80033a8:	bf00      	nop
 80033aa:	e7fd      	b.n	80033a8 <MX_FREERTOS_Init+0x54>
	xSemaphoreGive(ControlMutex);
 80033ac:	4b74      	ldr	r3, [pc, #464]	@ (8003580 <MX_FREERTOS_Init+0x22c>)
 80033ae:	6818      	ldr	r0, [r3, #0]
 80033b0:	2300      	movs	r3, #0
 80033b2:	2200      	movs	r2, #0
 80033b4:	2100      	movs	r1, #0
 80033b6:	f00a f837 	bl	800d428 <xQueueGenericSend>
	IMURead_ControlMutex = xSemaphoreCreateMutexStatic(&xIMURead_ControlMutexBuffer);
 80033ba:	4972      	ldr	r1, [pc, #456]	@ (8003584 <MX_FREERTOS_Init+0x230>)
 80033bc:	2001      	movs	r0, #1
 80033be:	f00a f817 	bl	800d3f0 <xQueueCreateMutexStatic>
 80033c2:	4603      	mov	r3, r0
 80033c4:	4a70      	ldr	r2, [pc, #448]	@ (8003588 <MX_FREERTOS_Init+0x234>)
 80033c6:	6013      	str	r3, [r2, #0]
	configASSERT(IMURead_ControlMutex);
 80033c8:	4b6f      	ldr	r3, [pc, #444]	@ (8003588 <MX_FREERTOS_Init+0x234>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d10c      	bne.n	80033ea <MX_FREERTOS_Init+0x96>
	__asm volatile
 80033d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80033d4:	f383 8811 	msr	BASEPRI, r3
 80033d8:	f3bf 8f6f 	isb	sy
 80033dc:	f3bf 8f4f 	dsb	sy
 80033e0:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
}
 80033e4:	bf00      	nop
 80033e6:	bf00      	nop
 80033e8:	e7fd      	b.n	80033e6 <MX_FREERTOS_Init+0x92>
	xSemaphoreGive(IMURead_ControlMutex);
 80033ea:	4b67      	ldr	r3, [pc, #412]	@ (8003588 <MX_FREERTOS_Init+0x234>)
 80033ec:	6818      	ldr	r0, [r3, #0]
 80033ee:	2300      	movs	r3, #0
 80033f0:	2200      	movs	r2, #0
 80033f2:	2100      	movs	r1, #0
 80033f4:	f00a f818 	bl	800d428 <xQueueGenericSend>

  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of setAttitudeSem */
	osSemaphoreStaticDef(setAttitudeSem, &setAttitudeSemControlBlock);
 80033f8:	2300      	movs	r3, #0
 80033fa:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80033fe:	4b63      	ldr	r3, [pc, #396]	@ (800358c <MX_FREERTOS_Init+0x238>)
 8003400:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
	setAttitudeSemHandle = osSemaphoreCreate(osSemaphore(setAttitudeSem), 1);
 8003404:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 8003408:	2101      	movs	r1, #1
 800340a:	4618      	mov	r0, r3
 800340c:	f009 fd3e 	bl	800ce8c <osSemaphoreCreate>
 8003410:	4603      	mov	r3, r0
 8003412:	4a5f      	ldr	r2, [pc, #380]	@ (8003590 <MX_FREERTOS_Init+0x23c>)
 8003414:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  /* definition and creation of IMUQueue1 */
	osMessageQStaticDef(IMUQueue1, 512, uint32_t,IMUQueue1Buffer, &IMUQueue1ControlBlock);
 8003416:	4b5f      	ldr	r3, [pc, #380]	@ (8003594 <MX_FREERTOS_Init+0x240>)
 8003418:	f107 04d0 	add.w	r4, r7, #208	@ 0xd0
 800341c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800341e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	IMUQueue1Handle = osMessageCreate(osMessageQ(IMUQueue1), NULL);
 8003422:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 8003426:	2100      	movs	r1, #0
 8003428:	4618      	mov	r0, r3
 800342a:	f009 fd47 	bl	800cebc <osMessageCreate>
 800342e:	4603      	mov	r3, r0
 8003430:	4a59      	ldr	r2, [pc, #356]	@ (8003598 <MX_FREERTOS_Init+0x244>)
 8003432:	6013      	str	r3, [r2, #0]
  /* definition and creation of IMUQueue2 */
	osMessageQStaticDef(IMUQueue2, 512, uint32_t, IMUQueue2Buffer, &IMUQueue2ControlBlock);
 8003434:	4b59      	ldr	r3, [pc, #356]	@ (800359c <MX_FREERTOS_Init+0x248>)
 8003436:	f107 04c0 	add.w	r4, r7, #192	@ 0xc0
 800343a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800343c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	IMUQueue2Handle = osMessageCreate(osMessageQ(IMUQueue2), NULL);
 8003440:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 8003444:	2100      	movs	r1, #0
 8003446:	4618      	mov	r0, r3
 8003448:	f009 fd38 	bl	800cebc <osMessageCreate>
 800344c:	4603      	mov	r3, r0
 800344e:	4a54      	ldr	r2, [pc, #336]	@ (80035a0 <MX_FREERTOS_Init+0x24c>)
 8003450:	6013      	str	r3, [r2, #0]
  /* definition and creation of ADCSHouseKeepingQueue */
	osMessageQStaticDef(ADCSHouseKeepingQueue, 512, uint32_t, ADCSHouseKeepingQueueBuffer, &ADCSHouseKeepingQueueControlBlock);
 8003452:	4b54      	ldr	r3, [pc, #336]	@ (80035a4 <MX_FREERTOS_Init+0x250>)
 8003454:	f107 04b0 	add.w	r4, r7, #176	@ 0xb0
 8003458:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800345a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	ADCSHouseKeepingQueueHandle = osMessageCreate(osMessageQ(ADCSHouseKeepingQueue), NULL);
 800345e:	f107 03b0 	add.w	r3, r7, #176	@ 0xb0
 8003462:	2100      	movs	r1, #0
 8003464:	4618      	mov	r0, r3
 8003466:	f009 fd29 	bl	800cebc <osMessageCreate>
 800346a:	4603      	mov	r3, r0
 800346c:	4a4e      	ldr	r2, [pc, #312]	@ (80035a8 <MX_FREERTOS_Init+0x254>)
 800346e:	6013      	str	r3, [r2, #0]
  /* definition and creation of setAttitudeADCSQueue */
	osMessageQStaticDef(setAttitudeADCSQueue, 512, uint32_t,setAttitudeADCSQueueBuffer, &setAttitudeADCSQueueControlBlock);
 8003470:	4b4e      	ldr	r3, [pc, #312]	@ (80035ac <MX_FREERTOS_Init+0x258>)
 8003472:	f107 04a0 	add.w	r4, r7, #160	@ 0xa0
 8003476:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003478:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	setAttitudeADCSQueueHandle = osMessageCreate(osMessageQ(setAttitudeADCSQueue), NULL);
 800347c:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 8003480:	2100      	movs	r1, #0
 8003482:	4618      	mov	r0, r3
 8003484:	f009 fd1a 	bl	800cebc <osMessageCreate>
 8003488:	4603      	mov	r3, r0
 800348a:	4a49      	ldr	r2, [pc, #292]	@ (80035b0 <MX_FREERTOS_Init+0x25c>)
 800348c:	6013      	str	r3, [r2, #0]
  /* definition and creation of setOpModeADCSQueue */
	osMessageQStaticDef(setOpModeADCSQueue, 32, uint32_t,setOpModeADCSQueueBuffer, &setOpModeADCSQueueControlBlock);
 800348e:	4b49      	ldr	r3, [pc, #292]	@ (80035b4 <MX_FREERTOS_Init+0x260>)
 8003490:	f107 0490 	add.w	r4, r7, #144	@ 0x90
 8003494:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003496:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	setOpModeADCSQueueHandle = osMessageCreate(osMessageQ(setOpModeADCSQueue), NULL);
 800349a:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 800349e:	2100      	movs	r1, #0
 80034a0:	4618      	mov	r0, r3
 80034a2:	f009 fd0b 	bl	800cebc <osMessageCreate>
 80034a6:	4603      	mov	r3, r0
 80034a8:	4a43      	ldr	r2, [pc, #268]	@ (80035b8 <MX_FREERTOS_Init+0x264>)
 80034aa:	6013      	str	r3, [r2, #0]

  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
	osThreadStaticDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128, defaultTaskBuffer, &defaultTaskControlBlock);
 80034ac:	4b43      	ldr	r3, [pc, #268]	@ (80035bc <MX_FREERTOS_Init+0x268>)
 80034ae:	f107 0474 	add.w	r4, r7, #116	@ 0x74
 80034b2:	461d      	mov	r5, r3
 80034b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80034b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80034b8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80034bc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80034c0:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 80034c4:	2100      	movs	r1, #0
 80034c6:	4618      	mov	r0, r3
 80034c8:	f009 fca7 	bl	800ce1a <osThreadCreate>
 80034cc:	4603      	mov	r3, r0
 80034ce:	4a3c      	ldr	r2, [pc, #240]	@ (80035c0 <MX_FREERTOS_Init+0x26c>)
 80034d0:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* definition and creation of FirstCheckTask */
    osThreadStaticDef(FirstCheckTask, Check_current_temp, osPriorityAboveNormal, 0, stack_size, FirstCheckTaskBuffer, &FirstCheckTaskControlBlock);
 80034d2:	4b3c      	ldr	r3, [pc, #240]	@ (80035c4 <MX_FREERTOS_Init+0x270>)
 80034d4:	f107 0458 	add.w	r4, r7, #88	@ 0x58
 80034d8:	461d      	mov	r5, r3
 80034da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80034dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80034de:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80034e2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  	FirstCheckTaskHandle = osThreadCreate(osThread(FirstCheckTask), NULL);
 80034e6:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80034ea:	2100      	movs	r1, #0
 80034ec:	4618      	mov	r0, r3
 80034ee:	f009 fc94 	bl	800ce1a <osThreadCreate>
 80034f2:	4603      	mov	r3, r0
 80034f4:	4a34      	ldr	r2, [pc, #208]	@ (80035c8 <MX_FREERTOS_Init+0x274>)
 80034f6:	6013      	str	r3, [r2, #0]
  /* definition and creation of ControlAlgorithmTask */
	osThreadStaticDef(ControlAlgorithmTask, Control_Algorithm_Task, osPriorityNormal, 0,stack_size, ControlAlgorithmTaskBuffer, &ControlAlgorithmTaskControlBlock);
 80034f8:	4b34      	ldr	r3, [pc, #208]	@ (80035cc <MX_FREERTOS_Init+0x278>)
 80034fa:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 80034fe:	461d      	mov	r5, r3
 8003500:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003502:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003504:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003508:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	ControlAlgorithmTaskHandle = osThreadCreate(osThread(ControlAlgorithmTask), NULL);
 800350c:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8003510:	2100      	movs	r1, #0
 8003512:	4618      	mov	r0, r3
 8003514:	f009 fc81 	bl	800ce1a <osThreadCreate>
 8003518:	4603      	mov	r3, r0
 800351a:	4a2d      	ldr	r2, [pc, #180]	@ (80035d0 <MX_FREERTOS_Init+0x27c>)
 800351c:	6013      	str	r3, [r2, #0]
  /* definition and creation of IMUTask */
	osThreadStaticDef(IMUTask, IMU_Task, osPriorityNormal, 0,stack_size, IMUTaskBuffer, &IMUTaskControlBlock);
 800351e:	4b2d      	ldr	r3, [pc, #180]	@ (80035d4 <MX_FREERTOS_Init+0x280>)
 8003520:	f107 0420 	add.w	r4, r7, #32
 8003524:	461d      	mov	r5, r3
 8003526:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003528:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800352a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800352e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	IMUTaskHandle = osThreadCreate(osThread(IMUTask), NULL);
 8003532:	f107 0320 	add.w	r3, r7, #32
 8003536:	2100      	movs	r1, #0
 8003538:	4618      	mov	r0, r3
 800353a:	f009 fc6e 	bl	800ce1a <osThreadCreate>
 800353e:	4603      	mov	r3, r0
 8003540:	4a25      	ldr	r2, [pc, #148]	@ (80035d8 <MX_FREERTOS_Init+0x284>)
 8003542:	6013      	str	r3, [r2, #0]
  /* definition and creation of OBC_CommTaskHandle */
	osThreadStaticDef(OBC_CommTask, OBC_Comm_Task, osPriorityAboveNormal, 0,stack_size1, OBC_CommTaskBuffer, &OBC_CommTaskControlBlock);
 8003544:	4b25      	ldr	r3, [pc, #148]	@ (80035dc <MX_FREERTOS_Init+0x288>)
 8003546:	1d3c      	adds	r4, r7, #4
 8003548:	461d      	mov	r5, r3
 800354a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800354c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800354e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003552:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	OBC_CommTaskHandle = osThreadCreate(osThread(OBC_CommTask), NULL);
 8003556:	1d3b      	adds	r3, r7, #4
 8003558:	2100      	movs	r1, #0
 800355a:	4618      	mov	r0, r3
 800355c:	f009 fc5d 	bl	800ce1a <osThreadCreate>
 8003560:	4603      	mov	r3, r0
 8003562:	4a1f      	ldr	r2, [pc, #124]	@ (80035e0 <MX_FREERTOS_Init+0x28c>)
 8003564:	6013      	str	r3, [r2, #0]


  /* USER CODE END RTOS_THREADS */

}
 8003566:	bf00      	nop
 8003568:	37f0      	adds	r7, #240	@ 0xf0
 800356a:	46bd      	mov	sp, r7
 800356c:	bdb0      	pop	{r4, r5, r7, pc}
 800356e:	bf00      	nop
 8003570:	20023448 	.word	0x20023448
 8003574:	200233c4 	.word	0x200233c4
 8003578:	20023340 	.word	0x20023340
 800357c:	20018da4 	.word	0x20018da4
 8003580:	20018da0 	.word	0x20018da0
 8003584:	20018df0 	.word	0x20018df0
 8003588:	20018dec 	.word	0x20018dec
 800358c:	2001e230 	.word	0x2001e230
 8003590:	2001e22c 	.word	0x2001e22c
 8003594:	08012430 	.word	0x08012430
 8003598:	20019284 	.word	0x20019284
 800359c:	08012440 	.word	0x08012440
 80035a0:	2001b6d0 	.word	0x2001b6d0
 80035a4:	08012450 	.word	0x08012450
 80035a8:	20018e38 	.word	0x20018e38
 80035ac:	08012460 	.word	0x08012460
 80035b0:	2001db1c 	.word	0x2001db1c
 80035b4:	08012470 	.word	0x08012470
 80035b8:	2001df68 	.word	0x2001df68
 80035bc:	0801248c 	.word	0x0801248c
 80035c0:	2001dfd4 	.word	0x2001dfd4
 80035c4:	080124b8 	.word	0x080124b8
 80035c8:	20004c40 	.word	0x20004c40
 80035cc:	080124ec 	.word	0x080124ec
 80035d0:	20008c98 	.word	0x20008c98
 80035d4:	08012510 	.word	0x08012510
 80035d8:	2000ccf0 	.word	0x2000ccf0
 80035dc:	0801253c 	.word	0x0801253c
 80035e0:	20010d48 	.word	0x20010d48

080035e4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b082      	sub	sp, #8
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80035ec:	2001      	movs	r0, #1
 80035ee:	f009 fc39 	bl	800ce64 <osDelay>
 80035f2:	e7fb      	b.n	80035ec <StartDefaultTask+0x8>

080035f4 <Check_current_temp>:
/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */


void Check_current_temp(void const * argument)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b090      	sub	sp, #64	@ 0x40
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Check_pwr_temp */
	//declaring serial line
	//static serial_line_handle line;
	//Inizialize Serial Line for UART3
	//sdlInitLine(&line,&txFunc3,&rxFunc3,50,2);
	init_tempsens_handler(&ntc_values);
 80035fc:	483e      	ldr	r0, [pc, #248]	@ (80036f8 <Check_current_temp+0x104>)
 80035fe:	f000 fdab 	bl	8004158 <init_tempsens_handler>
	volatile float currentbuf[NUM_ACTUATORS],voltagebuf[NUM_ACTUATORS];
	Current_Temp_Struct *local_current_temp_struct = (Current_Temp_Struct*) malloc(sizeof(Current_Temp_Struct));
 8003602:	2034      	movs	r0, #52	@ 0x34
 8003604:	f00b ffea 	bl	800f5dc <malloc>
 8003608:	4603      	mov	r3, r0
 800360a:	637b      	str	r3, [r7, #52]	@ 0x34
	static uint8_t count = 0;
	
	/*Start calibration */
	if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED) !=  HAL_OK)
 800360c:	217f      	movs	r1, #127	@ 0x7f
 800360e:	483b      	ldr	r0, [pc, #236]	@ (80036fc <Check_current_temp+0x108>)
 8003610:	f004 f90a 	bl	8007828 <HAL_ADCEx_Calibration_Start>
#endif
		//----------------------------------------------------------------------

		//GET TEMPERATURES------------------------------------------------------
		//float prev1 = HAL_GetTick();
		get_temperatures(&hspi2,&ntc_values,count);
 8003614:	4b3a      	ldr	r3, [pc, #232]	@ (8003700 <Check_current_temp+0x10c>)
 8003616:	781b      	ldrb	r3, [r3, #0]
 8003618:	461a      	mov	r2, r3
 800361a:	4937      	ldr	r1, [pc, #220]	@ (80036f8 <Check_current_temp+0x104>)
 800361c:	4839      	ldr	r0, [pc, #228]	@ (8003704 <Check_current_temp+0x110>)
 800361e:	f000 fff7 	bl	8004610 <get_temperatures>
		//float next1 = HAL_GetTick();
		//printf("Execussion of get_temperatures: %.1f ms\n",next1-prev1);
		count ++;
 8003622:	4b37      	ldr	r3, [pc, #220]	@ (8003700 <Check_current_temp+0x10c>)
 8003624:	781b      	ldrb	r3, [r3, #0]
 8003626:	3301      	adds	r3, #1
 8003628:	b2da      	uxtb	r2, r3
 800362a:	4b35      	ldr	r3, [pc, #212]	@ (8003700 <Check_current_temp+0x10c>)
 800362c:	701a      	strb	r2, [r3, #0]
		//----------------------------------------------------------------------

		//GET ACTUATORS CURRENT
		get_actuator_current(&hadc1,voltagebuf,currentbuf,Channels_mask);
 800362e:	f107 0220 	add.w	r2, r7, #32
 8003632:	f107 010c 	add.w	r1, r7, #12
 8003636:	4b34      	ldr	r3, [pc, #208]	@ (8003708 <Check_current_temp+0x114>)
 8003638:	4830      	ldr	r0, [pc, #192]	@ (80036fc <Check_current_temp+0x108>)
 800363a:	f7fe fbe5 	bl	8001e08 <get_actuator_current>
				error_status = 3;
			}

		}
		 */
		switch(error_status)
 800363e:	4b33      	ldr	r3, [pc, #204]	@ (800370c <Check_current_temp+0x118>)
 8003640:	781b      	ldrb	r3, [r3, #0]
 8003642:	2b05      	cmp	r3, #5
 8003644:	d852      	bhi.n	80036ec <Check_current_temp+0xf8>
 8003646:	a201      	add	r2, pc, #4	@ (adr r2, 800364c <Check_current_temp+0x58>)
 8003648:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800364c:	08003665 	.word	0x08003665
 8003650:	080036ed 	.word	0x080036ed
 8003654:	080036ed 	.word	0x080036ed
 8003658:	080036ed 	.word	0x080036ed
 800365c:	080036ed 	.word	0x080036ed
 8003660:	080036ed 	.word	0x080036ed
		{
			case 0:
				//ALL IS OK
				//Send Housekeeping to OBC task
				
				if (local_current_temp_struct == NULL) {
 8003664:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003666:	2b00      	cmp	r3, #0
 8003668:	d03f      	beq.n	80036ea <Check_current_temp+0xf6>
					   printf("IMU TASK: allocazione struttura fallita !\n");
#endif
				}
				else
				{
					if(count == 8)
 800366a:	4b25      	ldr	r3, [pc, #148]	@ (8003700 <Check_current_temp+0x10c>)
 800366c:	781b      	ldrb	r3, [r3, #0]
 800366e:	2b08      	cmp	r3, #8
 8003670:	d13b      	bne.n	80036ea <Check_current_temp+0xf6>
					{
						for(int i=0;i<NUM_ACTUATORS;i++)
 8003672:	2300      	movs	r3, #0
 8003674:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003676:	e00d      	b.n	8003694 <Check_current_temp+0xa0>
						{
							local_current_temp_struct->current[i] = currentbuf[i];
 8003678:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800367a:	009b      	lsls	r3, r3, #2
 800367c:	3340      	adds	r3, #64	@ 0x40
 800367e:	443b      	add	r3, r7
 8003680:	3b20      	subs	r3, #32
 8003682:	681a      	ldr	r2, [r3, #0]
 8003684:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8003686:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003688:	009b      	lsls	r3, r3, #2
 800368a:	440b      	add	r3, r1
 800368c:	601a      	str	r2, [r3, #0]
						for(int i=0;i<NUM_ACTUATORS;i++)
 800368e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003690:	3301      	adds	r3, #1
 8003692:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003694:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003696:	2b04      	cmp	r3, #4
 8003698:	ddee      	ble.n	8003678 <Check_current_temp+0x84>
#if enable_printf
							printf("Task check: Current n%d,value: %f,current vect:%f \n",i+1,local_current_temp_struct->current[i],currentbuf[i]);
#endif
			    		}
						for(int i=NUM_ACTUATORS;i<NUM_TEMP_SENS+NUM_ACTUATORS;i++)
 800369a:	2305      	movs	r3, #5
 800369c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800369e:	e010      	b.n	80036c2 <Check_current_temp+0xce>
						{
							local_current_temp_struct->temperature[i - NUM_ACTUATORS] = ntc_values.temp[i - NUM_ACTUATORS];
 80036a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036a2:	1f5a      	subs	r2, r3, #5
 80036a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036a6:	3b05      	subs	r3, #5
 80036a8:	4913      	ldr	r1, [pc, #76]	@ (80036f8 <Check_current_temp+0x104>)
 80036aa:	0092      	lsls	r2, r2, #2
 80036ac:	440a      	add	r2, r1
 80036ae:	6812      	ldr	r2, [r2, #0]
 80036b0:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80036b2:	3304      	adds	r3, #4
 80036b4:	009b      	lsls	r3, r3, #2
 80036b6:	440b      	add	r3, r1
 80036b8:	3304      	adds	r3, #4
 80036ba:	601a      	str	r2, [r3, #0]
						for(int i=NUM_ACTUATORS;i<NUM_TEMP_SENS+NUM_ACTUATORS;i++)
 80036bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036be:	3301      	adds	r3, #1
 80036c0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80036c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036c4:	2b0c      	cmp	r3, #12
 80036c6:	ddeb      	ble.n	80036a0 <Check_current_temp+0xac>
							printf("Task check: Temperature n%d,ntc value: %f,value: %f \n",i-4,ntc_values.temp[i-NUM_ACTUATORS],local_current_temp_struct->temperature[i-NUM_ACTUATORS]);
#endif
						}

						//Invio queue a OBC Task
						if (osMessagePut(ADCSHouseKeepingQueueHandle,(uint32_t)local_current_temp_struct,300) != osOK) {
 80036c8:	4b11      	ldr	r3, [pc, #68]	@ (8003710 <Check_current_temp+0x11c>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80036ce:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80036d2:	4618      	mov	r0, r3
 80036d4:	f009 fc08 	bl	800cee8 <osMessagePut>
 80036d8:	4603      	mov	r3, r0
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d002      	beq.n	80036e4 <Check_current_temp+0xf0>
#if enable_printf
			    		   	printf("Invio a OBC Task fallito \n");
#endif
			       			free(local_current_temp_struct); // Ensure the receiving task has time to process
 80036de:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80036e0:	f00b ff84 	bl	800f5ec <free>
						} else {
#if enable_printf
			    		    printf("Dati Inviati a OBC Task\n");
#endif
						}
						count = 0;
 80036e4:	4b06      	ldr	r3, [pc, #24]	@ (8003700 <Check_current_temp+0x10c>)
 80036e6:	2200      	movs	r2, #0
 80036e8:	701a      	strb	r2, [r3, #0]
					}
				}
				break;
 80036ea:	bf00      	nop
				break;

		}
		//volatile next = HAL_GetTick();
		//printf("Execussion of check task: %.1f ms\n",next-prev);
	    osDelay(300);
 80036ec:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80036f0:	f009 fbb8 	bl	800ce64 <osDelay>
		get_temperatures(&hspi2,&ntc_values,count);
 80036f4:	e78e      	b.n	8003614 <Check_current_temp+0x20>
 80036f6:	bf00      	nop
 80036f8:	20004a24 	.word	0x20004a24
 80036fc:	20004994 	.word	0x20004994
 8003700:	2001e920 	.word	0x2001e920
 8003704:	200231a8 	.word	0x200231a8
 8003708:	20000000 	.word	0x20000000
 800370c:	20004c3c 	.word	0x20004c3c
 8003710:	20018e38 	.word	0x20018e38

08003714 <OBC_Comm_Task>:
  /* USER CODE END Check_pwr_temp */
}


void OBC_Comm_Task(void const * argument)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	f5ad 6d10 	sub.w	sp, sp, #2304	@ 0x900
 800371a:	af02      	add	r7, sp, #8
 800371c:	f607 03f8 	addw	r3, r7, #2296	@ 0x8f8
 8003720:	f6a3 03e4 	subw	r3, r3, #2276	@ 0x8e4
 8003724:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN OBC_Comm_Task */
	static serial_line_handle line1;
	//Inizialize Serial Line for UART1
	sdlInitLine(&line1,&txFunc1,&rxFunc1,50,2);
 8003726:	2302      	movs	r3, #2
 8003728:	9300      	str	r3, [sp, #0]
 800372a:	2332      	movs	r3, #50	@ 0x32
 800372c:	4a9d      	ldr	r2, [pc, #628]	@ (80039a4 <OBC_Comm_Task+0x290>)
 800372e:	499e      	ldr	r1, [pc, #632]	@ (80039a8 <OBC_Comm_Task+0x294>)
 8003730:	489e      	ldr	r0, [pc, #632]	@ (80039ac <OBC_Comm_Task+0x298>)
 8003732:	f001 fcd9 	bl	80050e8 <sdlInitLine>

	uint8_t opmode=0;
 8003736:	2300      	movs	r3, #0
 8003738:	f887 38f7 	strb.w	r3, [r7, #2295]	@ 0x8f7
	uint32_t rxLen;

	setAttitudeADCS *RxAttitude = (setAttitudeADCS*) malloc(sizeof(setAttitudeADCS));
 800373c:	2031      	movs	r0, #49	@ 0x31
 800373e:	f00b ff4d 	bl	800f5dc <malloc>
 8003742:	4603      	mov	r3, r0
 8003744:	f8c7 38e4 	str.w	r3, [r7, #2276]	@ 0x8e4
	housekeepingADCS TxHousekeeping;
	attitudeADCS TxAttitude;
	setOpmodeADCS RxOpMode;
	//opmodeADCS TxOpMode;
	osEvent retvalue1,retvalue;
	uint8_t cnt1 = 0,cnt2 = 0;
 8003748:	2300      	movs	r3, #0
 800374a:	f887 38f6 	strb.w	r3, [r7, #2294]	@ 0x8f6
 800374e:	2300      	movs	r3, #0
 8003750:	f887 38f5 	strb.w	r3, [r7, #2293]	@ 0x8f5
#if enable_printf
	  //printf("We are in OBC TASK \n");
#endif
	  /*-------------------RECEIVE FROM OBC-------------------------*/
	  //trying to receive a message
	  rxLen=sdlReceive(&line1,(uint8_t *)rxBuff,sizeof(rxBuff));
 8003754:	f107 0320 	add.w	r3, r7, #32
 8003758:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800375c:	4619      	mov	r1, r3
 800375e:	4893      	ldr	r0, [pc, #588]	@ (80039ac <OBC_Comm_Task+0x298>)
 8003760:	f001 fd7f 	bl	8005262 <sdlReceive>
 8003764:	f8c7 08e0 	str.w	r0, [r7, #2272]	@ 0x8e0
	  if(rxLen){
 8003768:	f8d7 38e0 	ldr.w	r3, [r7, #2272]	@ 0x8e0
 800376c:	2b00      	cmp	r3, #0
 800376e:	d052      	beq.n	8003816 <OBC_Comm_Task+0x102>
#if enable_printf
	  	printf("OBC TASK: Received %lu bytes !!!!!!!!!!!!\n",rxLen);
#endif
	  	if(rxBuff[0]==SETOPMODEADCS_CODE && rxLen==sizeof(setOpmodeADCS)){
 8003770:	f607 03f8 	addw	r3, r7, #2296	@ 0x8f8
 8003774:	f6a3 03d8 	subw	r3, r3, #2264	@ 0x8d8
 8003778:	781b      	ldrb	r3, [r3, #0]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d10f      	bne.n	800379e <OBC_Comm_Task+0x8a>
 800377e:	f8d7 38e0 	ldr.w	r3, [r7, #2272]	@ 0x8e0
 8003782:	2b02      	cmp	r3, #2
 8003784:	d10b      	bne.n	800379e <OBC_Comm_Task+0x8a>
#if enable_printf
	  		printf("Received setOpmodeADCS message\n");
#endif
	  		//setOpmodeADCS msgStruct;
	  		memcpy(&RxOpMode,rxBuff,sizeof(setOpmodeADCS));
 8003786:	f607 03f8 	addw	r3, r7, #2296	@ 0x8f8
 800378a:	f6a3 03d8 	subw	r3, r3, #2264	@ 0x8d8
 800378e:	881b      	ldrh	r3, [r3, #0]
 8003790:	f8a7 3838 	strh.w	r3, [r7, #2104]	@ 0x838
	  		opmode=RxOpMode.opmode;
 8003794:	f897 3839 	ldrb.w	r3, [r7, #2105]	@ 0x839
 8003798:	f887 38f7 	strb.w	r3, [r7, #2295]	@ 0x8f7
 800379c:	e03b      	b.n	8003816 <OBC_Comm_Task+0x102>
#if enable_printf
	  		printf("Opmode changed to %u\n",opmode);
#endif
	  	}else if(rxBuff[0]==SETATTITUDEADCS_CODE && rxLen==sizeof(setAttitudeADCS)){
 800379e:	f607 03f8 	addw	r3, r7, #2296	@ 0x8f8
 80037a2:	f6a3 03d8 	subw	r3, r3, #2264	@ 0x8d8
 80037a6:	781b      	ldrb	r3, [r3, #0]
 80037a8:	2b01      	cmp	r3, #1
 80037aa:	d134      	bne.n	8003816 <OBC_Comm_Task+0x102>
 80037ac:	f8d7 38e0 	ldr.w	r3, [r7, #2272]	@ 0x8e0
 80037b0:	2b31      	cmp	r3, #49	@ 0x31
 80037b2:	d11b      	bne.n	80037ec <OBC_Comm_Task+0xd8>
#if enable_printf
  			printf("OBC TASK:Received setAttitudeADCS message!!!!!!!!!\n");
#endif
  			//do something...
  			//Send opMode = setattitudeadcs to Control Task
			if (RxAttitude == NULL) {
 80037b4:	f8d7 38e4 	ldr.w	r3, [r7, #2276]	@ 0x8e4
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d02c      	beq.n	8003816 <OBC_Comm_Task+0x102>
					   printf("OBC TASK: allocazione struttura RxAttitude fallita !\n");
#endif
			}
			else
			{
				memcpy(RxAttitude,rxBuff,sizeof(setAttitudeADCS));
 80037bc:	f107 0320 	add.w	r3, r7, #32
 80037c0:	2231      	movs	r2, #49	@ 0x31
 80037c2:	4619      	mov	r1, r3
 80037c4:	f8d7 08e4 	ldr.w	r0, [r7, #2276]	@ 0x8e4
 80037c8:	f00c feb7 	bl	801053a <memcpy>

				//Send Attitude Queue to Control Task
			 	if (osMessagePut(setAttitudeADCSQueueHandle,(uint32_t)RxAttitude,200) != osOK) {
 80037cc:	4b78      	ldr	r3, [pc, #480]	@ (80039b0 <OBC_Comm_Task+0x29c>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f8d7 18e4 	ldr.w	r1, [r7, #2276]	@ 0x8e4
 80037d4:	22c8      	movs	r2, #200	@ 0xc8
 80037d6:	4618      	mov	r0, r3
 80037d8:	f009 fb86 	bl	800cee8 <osMessagePut>
 80037dc:	4603      	mov	r3, r0
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d019      	beq.n	8003816 <OBC_Comm_Task+0x102>
#if enable_printf
			    	printf("Invio a Control Task fallito \n");
#endif
			       	free(RxAttitude); // Ensure the receiving task has time to process
 80037e2:	f8d7 08e4 	ldr.w	r0, [r7, #2276]	@ 0x8e4
 80037e6:	f00b ff01 	bl	800f5ec <free>
 80037ea:	e014      	b.n	8003816 <OBC_Comm_Task+0x102>
			        printf("Dati Inviati a Control Task\n");
#endif
			 	}
			}
	  		
	  	}else if(rxBuff[0]==ATTITUDEADCS_CODE && rxLen==sizeof(attitudeADCS)){
 80037ec:	f607 03f8 	addw	r3, r7, #2296	@ 0x8f8
 80037f0:	f6a3 03d8 	subw	r3, r3, #2264	@ 0x8d8
 80037f4:	781b      	ldrb	r3, [r3, #0]
 80037f6:	2b15      	cmp	r3, #21
 80037f8:	d10d      	bne.n	8003816 <OBC_Comm_Task+0x102>
 80037fa:	f8d7 38e0 	ldr.w	r3, [r7, #2272]	@ 0x8e0
 80037fe:	2b4d      	cmp	r3, #77	@ 0x4d
 8003800:	d009      	beq.n	8003816 <OBC_Comm_Task+0x102>
#if enable_printf
  			printf("Received attitudeADCS message\n");
#endif
  			//do something...
  			//(in theory this should never arrive to ADCS)
	  	}else if(rxBuff[0]==HOUSEKEEPINGADCS_CODE && rxLen==sizeof(housekeepingADCS)){
 8003802:	f607 03f8 	addw	r3, r7, #2296	@ 0x8f8
 8003806:	f6a3 03d8 	subw	r3, r3, #2264	@ 0x8d8
 800380a:	781b      	ldrb	r3, [r3, #0]
 800380c:	2b16      	cmp	r3, #22
 800380e:	d102      	bne.n	8003816 <OBC_Comm_Task+0x102>
 8003810:	f8d7 38e0 	ldr.w	r3, [r7, #2272]	@ 0x8e0
 8003814:	2b53      	cmp	r3, #83	@ 0x53
	  telemetryStruct.temp1=...;
	  telemetryStruct.speed=...;
	  .....*/
	
	 //Receive HouseKeeping sensor values via Queue
	retvalue = osMessageGet(ADCSHouseKeepingQueueHandle,300);
 8003816:	4b67      	ldr	r3, [pc, #412]	@ (80039b4 <OBC_Comm_Task+0x2a0>)
 8003818:	6819      	ldr	r1, [r3, #0]
 800381a:	463b      	mov	r3, r7
 800381c:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003820:	4618      	mov	r0, r3
 8003822:	f009 fba1 	bl	800cf68 <osMessageGet>
 8003826:	f607 03f8 	addw	r3, r7, #2296	@ 0x8f8
 800382a:	f6a3 02f8 	subw	r2, r3, #2296	@ 0x8f8
 800382e:	f507 6302 	add.w	r3, r7, #2080	@ 0x820
 8003832:	ca07      	ldmia	r2, {r0, r1, r2}
 8003834:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	//printf("OBC Task: Tick_Time: %lu \n",HAL_GetTick());

	if (retvalue.status == osEventMessage)
 8003838:	f8d7 3820 	ldr.w	r3, [r7, #2080]	@ 0x820
 800383c:	2b10      	cmp	r3, #16
 800383e:	d139      	bne.n	80038b4 <OBC_Comm_Task+0x1a0>
	{
		cnt1++;
 8003840:	f897 38f6 	ldrb.w	r3, [r7, #2294]	@ 0x8f6
 8003844:	3301      	adds	r3, #1
 8003846:	f887 38f6 	strb.w	r3, [r7, #2294]	@ 0x8f6
		processCombinedData((void*)&retvalue,(void *)&TxHousekeeping,receive_Current_Tempqueue_OBC);
 800384a:	f607 018c 	addw	r1, r7, #2188	@ 0x88c
 800384e:	f507 6302 	add.w	r3, r7, #2080	@ 0x820
 8003852:	4a59      	ldr	r2, [pc, #356]	@ (80039b8 <OBC_Comm_Task+0x2a4>)
 8003854:	4618      	mov	r0, r3
 8003856:	f000 fb9b 	bl	8003f90 <processCombinedData>
		//in this case we just send the local copy of the structure
		//ALWAYS remember to set message code (use the generated defines

		//printf("OBC: Trying to send attitude \n");
		//finally we send the message
		if(cnt1 == 1)
 800385a:	f897 38f6 	ldrb.w	r3, [r7, #2294]	@ 0x8f6
 800385e:	2b01      	cmp	r3, #1
 8003860:	d128      	bne.n	80038b4 <OBC_Comm_Task+0x1a0>
		{
			printf("OBC TASK: after 5 counts: %lu \n",HAL_GetTick());
 8003862:	f002 fd43 	bl	80062ec <HAL_GetTick>
 8003866:	4603      	mov	r3, r0
 8003868:	4619      	mov	r1, r3
 800386a:	4854      	ldr	r0, [pc, #336]	@ (80039bc <OBC_Comm_Task+0x2a8>)
 800386c:	f00c fc8e 	bl	801018c <iprintf>
			TxAttitude.code=ATTITUDEADCS_CODE;
 8003870:	2315      	movs	r3, #21
 8003872:	f887 383c 	strb.w	r3, [r7, #2108]	@ 0x83c
			TxAttitude.ticktime=HAL_GetTick();
 8003876:	f002 fd39 	bl	80062ec <HAL_GetTick>
 800387a:	4603      	mov	r3, r0
 800387c:	f8c7 3885 	str.w	r3, [r7, #2181]	@ 0x885
		if(sdlSend(&line1,(uint8_t *)&TxAttitude,sizeof(attitudeADCS),1)){
 8003880:	f607 013c 	addw	r1, r7, #2108	@ 0x83c
 8003884:	2301      	movs	r3, #1
 8003886:	224d      	movs	r2, #77	@ 0x4d
 8003888:	4848      	ldr	r0, [pc, #288]	@ (80039ac <OBC_Comm_Task+0x298>)
 800388a:	f001 fc85 	bl	8005198 <sdlSend>
 800388e:	4603      	mov	r3, r0
 8003890:	2b00      	cmp	r3, #0
 8003892:	d00c      	beq.n	80038ae <OBC_Comm_Task+0x19a>
			if(sentAttitudeMessages==5)
			{
				printf("OBC: Sent %lu attitudeADCS messages bytes:%d\n",sentAttitudeMessages,sizeof(attitudeADCS));
				sentAttitudeMessages=0;
			}*/
			for(uint32_t y=0;y<sizeof(attitudeADCS);y++){
 8003894:	2300      	movs	r3, #0
 8003896:	f8c7 38f0 	str.w	r3, [r7, #2288]	@ 0x8f0
 800389a:	e004      	b.n	80038a6 <OBC_Comm_Task+0x192>
 800389c:	f8d7 38f0 	ldr.w	r3, [r7, #2288]	@ 0x8f0
 80038a0:	3301      	adds	r3, #1
 80038a2:	f8c7 38f0 	str.w	r3, [r7, #2288]	@ 0x8f0
 80038a6:	f8d7 38f0 	ldr.w	r3, [r7, #2288]	@ 0x8f0
 80038aa:	2b4c      	cmp	r3, #76	@ 0x4c
 80038ac:	d9f6      	bls.n	800389c <OBC_Comm_Task+0x188>
#if enable_printf
			printf("OBC: Failed to send attitudeADCS \n");
#endif

		}
		cnt1 = 0;
 80038ae:	2300      	movs	r3, #0
 80038b0:	f887 38f6 	strb.w	r3, [r7, #2294]	@ 0x8f6
		}
	}

	//Receive Telemetry IMU via Queue
	retvalue1 = osMessageGet(IMUQueue2Handle, 300);
 80038b4:	4b42      	ldr	r3, [pc, #264]	@ (80039c0 <OBC_Comm_Task+0x2ac>)
 80038b6:	6819      	ldr	r1, [r3, #0]
 80038b8:	463b      	mov	r3, r7
 80038ba:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80038be:	4618      	mov	r0, r3
 80038c0:	f009 fb52 	bl	800cf68 <osMessageGet>
 80038c4:	f607 03f8 	addw	r3, r7, #2296	@ 0x8f8
 80038c8:	f6a3 02f8 	subw	r2, r3, #2296	@ 0x8f8
 80038cc:	f607 032c 	addw	r3, r7, #2092	@ 0x82c
 80038d0:	ca07      	ldmia	r2, {r0, r1, r2}
 80038d2:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	if (retvalue1.status == osEventMessage)
 80038d6:	f8d7 382c 	ldr.w	r3, [r7, #2092]	@ 0x82c
 80038da:	2b10      	cmp	r3, #16
 80038dc:	d139      	bne.n	8003952 <OBC_Comm_Task+0x23e>
	{
		cnt2++;
 80038de:	f897 38f5 	ldrb.w	r3, [r7, #2293]	@ 0x8f5
 80038e2:	3301      	adds	r3, #1
 80038e4:	f887 38f5 	strb.w	r3, [r7, #2293]	@ 0x8f5
		processCombinedData((void*)&retvalue1,(void *)&TxAttitude,receive_IMUqueue_OBC);
 80038e8:	f607 013c 	addw	r1, r7, #2108	@ 0x83c
 80038ec:	f607 032c 	addw	r3, r7, #2092	@ 0x82c
 80038f0:	4a34      	ldr	r2, [pc, #208]	@ (80039c4 <OBC_Comm_Task+0x2b0>)
 80038f2:	4618      	mov	r0, r3
 80038f4:	f000 fb4c 	bl	8003f90 <processCombinedData>
		//in this case we just fill the structure with random values
		//ALWAYS remember to set message code (use the generated defines
		if(cnt2 == 3)
 80038f8:	f897 38f5 	ldrb.w	r3, [r7, #2293]	@ 0x8f5
 80038fc:	2b03      	cmp	r3, #3
 80038fe:	d128      	bne.n	8003952 <OBC_Comm_Task+0x23e>
		{
			printf("OBC TASK: after 7 counts: %lu \n",HAL_GetTick());
 8003900:	f002 fcf4 	bl	80062ec <HAL_GetTick>
 8003904:	4603      	mov	r3, r0
 8003906:	4619      	mov	r1, r3
 8003908:	482f      	ldr	r0, [pc, #188]	@ (80039c8 <OBC_Comm_Task+0x2b4>)
 800390a:	f00c fc3f 	bl	801018c <iprintf>
			TxHousekeeping.code=HOUSEKEEPINGADCS_CODE;
 800390e:	2316      	movs	r3, #22
 8003910:	f887 388c 	strb.w	r3, [r7, #2188]	@ 0x88c
			TxHousekeeping.ticktime=HAL_GetTick();
 8003914:	f002 fcea 	bl	80062ec <HAL_GetTick>
 8003918:	4603      	mov	r3, r0
 800391a:	f8c7 38db 	str.w	r3, [r7, #2267]	@ 0x8db
			//printf("OBC: Trying to send housekeeping \n");
			//finally we send the message
		if(sdlSend(&line1,(uint8_t *)&TxHousekeeping,sizeof(housekeepingADCS),1))
 800391e:	f607 018c 	addw	r1, r7, #2188	@ 0x88c
 8003922:	2301      	movs	r3, #1
 8003924:	2253      	movs	r2, #83	@ 0x53
 8003926:	4821      	ldr	r0, [pc, #132]	@ (80039ac <OBC_Comm_Task+0x298>)
 8003928:	f001 fc36 	bl	8005198 <sdlSend>
 800392c:	4603      	mov	r3, r0
 800392e:	2b00      	cmp	r3, #0
 8003930:	d00c      	beq.n	800394c <OBC_Comm_Task+0x238>
		{
#if enable_printf
		  	printf("OBC: Sent housekeepingADCS bytes:%d \n",sizeof(housekeepingADCS));
#endif
		 	for(uint32_t y=0;y<sizeof(housekeepingADCS);y++){
 8003932:	2300      	movs	r3, #0
 8003934:	f8c7 38ec 	str.w	r3, [r7, #2284]	@ 0x8ec
 8003938:	e004      	b.n	8003944 <OBC_Comm_Task+0x230>
 800393a:	f8d7 38ec 	ldr.w	r3, [r7, #2284]	@ 0x8ec
 800393e:	3301      	adds	r3, #1
 8003940:	f8c7 38ec 	str.w	r3, [r7, #2284]	@ 0x8ec
 8003944:	f8d7 38ec 	ldr.w	r3, [r7, #2284]	@ 0x8ec
 8003948:	2b52      	cmp	r3, #82	@ 0x52
 800394a:	d9f6      	bls.n	800393a <OBC_Comm_Task+0x226>
		else{
#if enable_printf
			printf("OBC: Failed to send housekeepingADCS \n");
#endif
		}
		cnt2 = 0;
 800394c:	2300      	movs	r3, #0
 800394e:	f887 38f5 	strb.w	r3, [r7, #2293]	@ 0x8f5
		}

	}

	opmodeADCS opmodeMsg;
	opmodeMsg.opmode=opmode;
 8003952:	f607 03f8 	addw	r3, r7, #2296	@ 0x8f8
 8003956:	f6a3 03dc 	subw	r3, r3, #2268	@ 0x8dc
 800395a:	f897 28f7 	ldrb.w	r2, [r7, #2295]	@ 0x8f7
 800395e:	705a      	strb	r2, [r3, #1]
	//ALWAYS remember to set message code (use the generated defines
	opmodeMsg.code=OPMODEADCS_CODE;
 8003960:	f607 03f8 	addw	r3, r7, #2296	@ 0x8f8
 8003964:	f6a3 03dc 	subw	r3, r3, #2268	@ 0x8dc
 8003968:	2214      	movs	r2, #20
 800396a:	701a      	strb	r2, [r3, #0]
	//finally we send the message (WITH ACK REQUESTED)
	//printf("OBC: Trying to send opmodeADCS \n");
	if(sdlSend(&line1,(uint8_t *)&opmodeMsg,sizeof(opmodeADCS),1))
 800396c:	f107 011c 	add.w	r1, r7, #28
 8003970:	2301      	movs	r3, #1
 8003972:	2202      	movs	r2, #2
 8003974:	480d      	ldr	r0, [pc, #52]	@ (80039ac <OBC_Comm_Task+0x298>)
 8003976:	f001 fc0f 	bl	8005198 <sdlSend>
 800397a:	4603      	mov	r3, r0
 800397c:	2b00      	cmp	r3, #0
 800397e:	d00c      	beq.n	800399a <OBC_Comm_Task+0x286>
	{
#if enable_printf
	  	printf("OBC : Sent opmodeADCS bytes:%d \n",sizeof(opmodeADCS));
#endif
	  for(uint32_t y=0;y<sizeof(opmodeADCS);y++){
 8003980:	2300      	movs	r3, #0
 8003982:	f8c7 38e8 	str.w	r3, [r7, #2280]	@ 0x8e8
 8003986:	e004      	b.n	8003992 <OBC_Comm_Task+0x27e>
 8003988:	f8d7 38e8 	ldr.w	r3, [r7, #2280]	@ 0x8e8
 800398c:	3301      	adds	r3, #1
 800398e:	f8c7 38e8 	str.w	r3, [r7, #2280]	@ 0x8e8
 8003992:	f8d7 38e8 	ldr.w	r3, [r7, #2280]	@ 0x8e8
 8003996:	2b01      	cmp	r3, #1
 8003998:	d9f6      	bls.n	8003988 <OBC_Comm_Task+0x274>
		printf("OBC: Failed to send opmodeADCS \n");
#endif
	}


  	osDelay(400);
 800399a:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 800399e:	f009 fa61 	bl	800ce64 <osDelay>
  {
 80039a2:	e6d7      	b.n	8003754 <OBC_Comm_Task+0x40>
 80039a4:	08003285 	.word	0x08003285
 80039a8:	08003255 	.word	0x08003255
 80039ac:	2001e924 	.word	0x2001e924
 80039b0:	2001db1c 	.word	0x2001db1c
 80039b4:	20018e38 	.word	0x20018e38
 80039b8:	080040a5 	.word	0x080040a5
 80039bc:	08012558 	.word	0x08012558
 80039c0:	2001b6d0 	.word	0x2001b6d0
 80039c4:	0800402d 	.word	0x0800402d
 80039c8:	08012578 	.word	0x08012578

080039cc <Control_Algorithm_Task>:
  }
  /* USER CODE END OBC_Comm_Task */
}

void Control_Algorithm_Task(void const * argument)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b090      	sub	sp, #64	@ 0x40
 80039d0:	af02      	add	r7, sp, #8
 80039d2:	6178      	str	r0, [r7, #20]
  /* USER CODE BEGIN Control_Algorithm_Task */
	uint8_t flag = 0;
 80039d4:	2300      	movs	r3, #0
 80039d6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	osEvent retvalue,retvalue1;

	//Inizialize actuators struct
	init_actuator_handler(&Reaction1,&htim1,TIM_CHANNEL_1,TIM_CHANNEL_2,100000,50); //100 khz
 80039da:	2332      	movs	r3, #50	@ 0x32
 80039dc:	9301      	str	r3, [sp, #4]
 80039de:	4b35      	ldr	r3, [pc, #212]	@ (8003ab4 <Control_Algorithm_Task+0xe8>)
 80039e0:	9300      	str	r3, [sp, #0]
 80039e2:	2304      	movs	r3, #4
 80039e4:	2200      	movs	r2, #0
 80039e6:	4934      	ldr	r1, [pc, #208]	@ (8003ab8 <Control_Algorithm_Task+0xec>)
 80039e8:	4834      	ldr	r0, [pc, #208]	@ (8003abc <Control_Algorithm_Task+0xf0>)
 80039ea:	f7fe f8a9 	bl	8001b40 <init_actuator_handler>
	init_actuator_handler(&Reaction2,&htim2,TIM_CHANNEL_3,TIM_CHANNEL_4,20000,50);
 80039ee:	2332      	movs	r3, #50	@ 0x32
 80039f0:	9301      	str	r3, [sp, #4]
 80039f2:	f644 6320 	movw	r3, #20000	@ 0x4e20
 80039f6:	9300      	str	r3, [sp, #0]
 80039f8:	230c      	movs	r3, #12
 80039fa:	2208      	movs	r2, #8
 80039fc:	4930      	ldr	r1, [pc, #192]	@ (8003ac0 <Control_Algorithm_Task+0xf4>)
 80039fe:	4831      	ldr	r0, [pc, #196]	@ (8003ac4 <Control_Algorithm_Task+0xf8>)
 8003a00:	f7fe f89e 	bl	8001b40 <init_actuator_handler>
	init_actuator_handler(&MagneTorquer1,&htim3,TIM_CHANNEL_1,TIM_CHANNEL_2,89000,50); //89 khz
 8003a04:	2332      	movs	r3, #50	@ 0x32
 8003a06:	9301      	str	r3, [sp, #4]
 8003a08:	4b2f      	ldr	r3, [pc, #188]	@ (8003ac8 <Control_Algorithm_Task+0xfc>)
 8003a0a:	9300      	str	r3, [sp, #0]
 8003a0c:	2304      	movs	r3, #4
 8003a0e:	2200      	movs	r2, #0
 8003a10:	492e      	ldr	r1, [pc, #184]	@ (8003acc <Control_Algorithm_Task+0x100>)
 8003a12:	482f      	ldr	r0, [pc, #188]	@ (8003ad0 <Control_Algorithm_Task+0x104>)
 8003a14:	f7fe f894 	bl	8001b40 <init_actuator_handler>
	init_actuator_handler(&MagneTorquer2,&htim3,TIM_CHANNEL_3,TIM_CHANNEL_4,10000,50);
 8003a18:	2332      	movs	r3, #50	@ 0x32
 8003a1a:	9301      	str	r3, [sp, #4]
 8003a1c:	f242 7310 	movw	r3, #10000	@ 0x2710
 8003a20:	9300      	str	r3, [sp, #0]
 8003a22:	230c      	movs	r3, #12
 8003a24:	2208      	movs	r2, #8
 8003a26:	4929      	ldr	r1, [pc, #164]	@ (8003acc <Control_Algorithm_Task+0x100>)
 8003a28:	482a      	ldr	r0, [pc, #168]	@ (8003ad4 <Control_Algorithm_Task+0x108>)
 8003a2a:	f7fe f889 	bl	8001b40 <init_actuator_handler>
	init_actuator_handler(&MagneTorquer3,&htim2,TIM_CHANNEL_1,TIM_CHANNEL_2,94000,50); //94 khz
 8003a2e:	2332      	movs	r3, #50	@ 0x32
 8003a30:	9301      	str	r3, [sp, #4]
 8003a32:	4b29      	ldr	r3, [pc, #164]	@ (8003ad8 <Control_Algorithm_Task+0x10c>)
 8003a34:	9300      	str	r3, [sp, #0]
 8003a36:	2304      	movs	r3, #4
 8003a38:	2200      	movs	r2, #0
 8003a3a:	4921      	ldr	r1, [pc, #132]	@ (8003ac0 <Control_Algorithm_Task+0xf4>)
 8003a3c:	4827      	ldr	r0, [pc, #156]	@ (8003adc <Control_Algorithm_Task+0x110>)
 8003a3e:	f7fe f87f 	bl	8001b40 <init_actuator_handler>

	//Inizialize PID struct
	PID_INIT(&PID_Inputs);
 8003a42:	4827      	ldr	r0, [pc, #156]	@ (8003ae0 <Control_Algorithm_Task+0x114>)
 8003a44:	f000 fa5a 	bl	8003efc <PID_INIT>
#if enable_printf
		//printf("We are in Control Algorithm TASK \n");
#endif
		//Receive Telemetry IMU via Queue

		retvalue1 = osMessageGet(setAttitudeADCSQueueHandle,200);
 8003a48:	4b26      	ldr	r3, [pc, #152]	@ (8003ae4 <Control_Algorithm_Task+0x118>)
 8003a4a:	6819      	ldr	r1, [r3, #0]
 8003a4c:	463b      	mov	r3, r7
 8003a4e:	22c8      	movs	r2, #200	@ 0xc8
 8003a50:	4618      	mov	r0, r3
 8003a52:	f009 fa89 	bl	800cf68 <osMessageGet>
 8003a56:	f107 031c 	add.w	r3, r7, #28
 8003a5a:	463a      	mov	r2, r7
 8003a5c:	ca07      	ldmia	r2, {r0, r1, r2}
 8003a5e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		processCombinedData((void*)&retvalue1,(void *)&PID_Inputs,receive_Attitudequeue_control);
 8003a62:	f107 031c 	add.w	r3, r7, #28
 8003a66:	4a20      	ldr	r2, [pc, #128]	@ (8003ae8 <Control_Algorithm_Task+0x11c>)
 8003a68:	491d      	ldr	r1, [pc, #116]	@ (8003ae0 <Control_Algorithm_Task+0x114>)
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	f000 fa90 	bl	8003f90 <processCombinedData>

		retvalue = osMessageGet(IMUQueue1Handle, 300);
 8003a70:	4b1e      	ldr	r3, [pc, #120]	@ (8003aec <Control_Algorithm_Task+0x120>)
 8003a72:	6819      	ldr	r1, [r3, #0]
 8003a74:	463b      	mov	r3, r7
 8003a76:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	f009 fa74 	bl	800cf68 <osMessageGet>
 8003a80:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003a84:	463a      	mov	r2, r7
 8003a86:	ca07      	ldmia	r2, {r0, r1, r2}
 8003a88:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		processCombinedData((void*)&retvalue,(void *)&PID_Inputs,receive_IMUqueue_control);
 8003a8c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003a90:	4a17      	ldr	r2, [pc, #92]	@ (8003af0 <Control_Algorithm_Task+0x124>)
 8003a92:	4913      	ldr	r1, [pc, #76]	@ (8003ae0 <Control_Algorithm_Task+0x114>)
 8003a94:	4618      	mov	r0, r3
 8003a96:	f000 fa7b 	bl	8003f90 <processCombinedData>
		//PID_main(&PID_Inputs);

		//Update PWM values
		//X Magnetorquer

		if(!flag)
 8003a9a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d102      	bne.n	8003aa8 <Control_Algorithm_Task+0xdc>
//			actuator_START(&Reaction1);
//			actuator_START(&Reaction2);
//			actuator_START(&MagneTorquer1);
//			actuator_START(&MagneTorquer2);
//			actuator_START(&MagneTorquer3);
			flag = 1;
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
			//Spegnere i magnetorquer
			xSemaphoreGive(IMURead_ControlMutex);
			printf("Control Task : Released IMURead_ControlMutex control");
		}
		*/
		osDelay(500);
 8003aa8:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8003aac:	f009 f9da 	bl	800ce64 <osDelay>
		retvalue1 = osMessageGet(setAttitudeADCSQueueHandle,200);
 8003ab0:	e7ca      	b.n	8003a48 <Control_Algorithm_Task+0x7c>
 8003ab2:	bf00      	nop
 8003ab4:	000186a0 	.word	0x000186a0
 8003ab8:	2002325c 	.word	0x2002325c
 8003abc:	20004bc4 	.word	0x20004bc4
 8003ac0:	200232a8 	.word	0x200232a8
 8003ac4:	20004bdc 	.word	0x20004bdc
 8003ac8:	00015ba8 	.word	0x00015ba8
 8003acc:	200232f4 	.word	0x200232f4
 8003ad0:	20004bf4 	.word	0x20004bf4
 8003ad4:	20004c0c 	.word	0x20004c0c
 8003ad8:	00016f30 	.word	0x00016f30
 8003adc:	20004c24 	.word	0x20004c24
 8003ae0:	20004a70 	.word	0x20004a70
 8003ae4:	2001db1c 	.word	0x2001db1c
 8003ae8:	0800413d 	.word	0x0800413d
 8003aec:	20019284 	.word	0x20019284
 8003af0:	08003fad 	.word	0x08003fad

08003af4 <IMU_Task>:
	}
  /* USER CODE END Control_Algorithm_Task */
}

void IMU_Task(void const * argument)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b090      	sub	sp, #64	@ 0x40
 8003af8:	af02      	add	r7, sp, #8
 8003afa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN IMU_Task */
#if enable_printf
	printf("Initializing IMU \n");
#endif
	//uint8_t ret = 1;
	uint8_t ret = initIMUConfig(&huart4);
 8003afc:	485e      	ldr	r0, [pc, #376]	@ (8003c78 <IMU_Task+0x184>)
 8003afe:	f7fd fb9b 	bl	8001238 <initIMUConfig>
 8003b02:	4603      	mov	r3, r0
 8003b04:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
#if enable_printf
	if(ret) printf("IMU correctly configured \n");
	else printf("Error configuring IMU \n");
#endif

	float gyro[3]={1,2,3};
 8003b08:	4a5c      	ldr	r2, [pc, #368]	@ (8003c7c <IMU_Task+0x188>)
 8003b0a:	f107 0320 	add.w	r3, r7, #32
 8003b0e:	ca07      	ldmia	r2, {r0, r1, r2}
 8003b10:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	float mag[3]={4,5,6};
 8003b14:	4a5a      	ldr	r2, [pc, #360]	@ (8003c80 <IMU_Task+0x18c>)
 8003b16:	f107 0314 	add.w	r3, r7, #20
 8003b1a:	ca07      	ldmia	r2, {r0, r1, r2}
 8003b1c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	float acc[3] = {7,8,9};
 8003b20:	4a58      	ldr	r2, [pc, #352]	@ (8003c84 <IMU_Task+0x190>)
 8003b22:	f107 0308 	add.w	r3, r7, #8
 8003b26:	ca07      	ldmia	r2, {r0, r1, r2}
 8003b28:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	imu_queue_struct *local_imu_struct =(imu_queue_struct*) malloc(sizeof(imu_queue_struct));
 8003b2c:	2024      	movs	r0, #36	@ 0x24
 8003b2e:	f00b fd55 	bl	800f5dc <malloc>
 8003b32:	4603      	mov	r3, r0
 8003b34:	62fb      	str	r3, [r7, #44]	@ 0x2c
		//queste due linee per l'UART
		//Se voglio far comunicare IMU e Nucleo con solo le 2 linee UART tx ed Rx basta che disabilito l'hardware flow control
		//da CubeMx.


		ret=readIMUPacket(&huart4, gyro, mag, acc, 500); //mag measured in Gauss(G) unit -> 1G = 10^-4 Tesla
 8003b36:	f107 0308 	add.w	r3, r7, #8
 8003b3a:	f107 0214 	add.w	r2, r7, #20
 8003b3e:	f107 0120 	add.w	r1, r7, #32
 8003b42:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8003b46:	9000      	str	r0, [sp, #0]
 8003b48:	484b      	ldr	r0, [pc, #300]	@ (8003c78 <IMU_Task+0x184>)
 8003b4a:	f7fd fc35 	bl	80013b8 <readIMUPacket>
 8003b4e:	4603      	mov	r3, r0
 8003b50:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
		mag[0]/=10000; //1G = 10^-4 Tesla
 8003b54:	ed97 7a05 	vldr	s14, [r7, #20]
 8003b58:	eddf 6a4b 	vldr	s13, [pc, #300]	@ 8003c88 <IMU_Task+0x194>
 8003b5c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003b60:	edc7 7a05 	vstr	s15, [r7, #20]
		mag[1]/=10000; //1G = 10^-4 Tesla
 8003b64:	ed97 7a06 	vldr	s14, [r7, #24]
 8003b68:	eddf 6a47 	vldr	s13, [pc, #284]	@ 8003c88 <IMU_Task+0x194>
 8003b6c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003b70:	edc7 7a06 	vstr	s15, [r7, #24]
		mag[2]/=10000; //1G = 10^-4 Tesla
 8003b74:	ed97 7a07 	vldr	s14, [r7, #28]
 8003b78:	eddf 6a43 	vldr	s13, [pc, #268]	@ 8003c88 <IMU_Task+0x194>
 8003b7c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003b80:	edc7 7a07 	vstr	s15, [r7, #28]
			printf("IMU Task : Taken IMURead_Control control");
			ret=readIMUPacket(&huart4, gyro, mag, 50);
			xSemaphoreGive(IMURead_ControlMutex);
			printf("IMU Task : Released IMURead_Control control");
		}*/
		if(ret)
 8003b84:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d06d      	beq.n	8003c68 <IMU_Task+0x174>
			for(uint32_t field=0; field<3;field++){
				printf("%f \t",mag[field]);
			}
			printf("\n");*/

			if (local_imu_struct == NULL) {
 8003b8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d103      	bne.n	8003b9a <IMU_Task+0xa6>
				printf("IMU TASK: allocazione struttura fallita !\n");
 8003b92:	483e      	ldr	r0, [pc, #248]	@ (8003c8c <IMU_Task+0x198>)
 8003b94:	f00c fb62 	bl	801025c <puts>
 8003b98:	e7cd      	b.n	8003b36 <IMU_Task+0x42>
			}
			else
			{
				//Riempio struct con valori letti da IMU,per poi inviareli a Task Controllo
				for (int i = 0; i < 3; i++)
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	637b      	str	r3, [r7, #52]	@ 0x34
 8003b9e:	e035      	b.n	8003c0c <IMU_Task+0x118>
				{
					local_imu_struct->gyro_msr[i] = gyro[i];
 8003ba0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ba2:	009b      	lsls	r3, r3, #2
 8003ba4:	3338      	adds	r3, #56	@ 0x38
 8003ba6:	443b      	add	r3, r7
 8003ba8:	3b18      	subs	r3, #24
 8003baa:	681a      	ldr	r2, [r3, #0]
 8003bac:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003bae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003bb0:	009b      	lsls	r3, r3, #2
 8003bb2:	440b      	add	r3, r1
 8003bb4:	601a      	str	r2, [r3, #0]
					local_imu_struct->mag_msr[i] = mag[i];
 8003bb6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003bb8:	009b      	lsls	r3, r3, #2
 8003bba:	3338      	adds	r3, #56	@ 0x38
 8003bbc:	443b      	add	r3, r7
 8003bbe:	3b24      	subs	r3, #36	@ 0x24
 8003bc0:	681a      	ldr	r2, [r3, #0]
 8003bc2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003bc4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003bc6:	3302      	adds	r3, #2
 8003bc8:	009b      	lsls	r3, r3, #2
 8003bca:	440b      	add	r3, r1
 8003bcc:	3304      	adds	r3, #4
 8003bce:	601a      	str	r2, [r3, #0]
					local_imu_struct->acc_msr[i] = acc[i];
 8003bd0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003bd2:	009b      	lsls	r3, r3, #2
 8003bd4:	3338      	adds	r3, #56	@ 0x38
 8003bd6:	443b      	add	r3, r7
 8003bd8:	3b30      	subs	r3, #48	@ 0x30
 8003bda:	681a      	ldr	r2, [r3, #0]
 8003bdc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003bde:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003be0:	3306      	adds	r3, #6
 8003be2:	009b      	lsls	r3, r3, #2
 8003be4:	440b      	add	r3, r1
 8003be6:	601a      	str	r2, [r3, #0]
					printf("AAAAAAAAAAAAAAAAAAAAAAA  Accelerometer axis %d, value %f AAAAAAAAAAAAAA", i, acc[i]);
 8003be8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003bea:	009b      	lsls	r3, r3, #2
 8003bec:	3338      	adds	r3, #56	@ 0x38
 8003bee:	443b      	add	r3, r7
 8003bf0:	3b30      	subs	r3, #48	@ 0x30
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	f7fc fcaf 	bl	8000558 <__aeabi_f2d>
 8003bfa:	4602      	mov	r2, r0
 8003bfc:	460b      	mov	r3, r1
 8003bfe:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8003c00:	4823      	ldr	r0, [pc, #140]	@ (8003c90 <IMU_Task+0x19c>)
 8003c02:	f00c fac3 	bl	801018c <iprintf>
				for (int i = 0; i < 3; i++)
 8003c06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c08:	3301      	adds	r3, #1
 8003c0a:	637b      	str	r3, [r7, #52]	@ 0x34
 8003c0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c0e:	2b02      	cmp	r3, #2
 8003c10:	ddc6      	ble.n	8003ba0 <IMU_Task+0xac>
				}
				//Invio queue a Control Task
			 	if (osMessagePut(IMUQueue1Handle,(uint32_t)local_imu_struct,300) != osOK) {
 8003c12:	4b20      	ldr	r3, [pc, #128]	@ (8003c94 <IMU_Task+0x1a0>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003c18:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	f009 f963 	bl	800cee8 <osMessagePut>
 8003c22:	4603      	mov	r3, r0
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d006      	beq.n	8003c36 <IMU_Task+0x142>
			    	printf("Invio a Control Task fallito \n");
 8003c28:	481b      	ldr	r0, [pc, #108]	@ (8003c98 <IMU_Task+0x1a4>)
 8003c2a:	f00c fb17 	bl	801025c <puts>
			       	free(local_imu_struct); // Ensure the receiving task has time to process
 8003c2e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003c30:	f00b fcdc 	bl	800f5ec <free>
 8003c34:	e002      	b.n	8003c3c <IMU_Task+0x148>
				} else {
			        printf("Dati Inviati a Control Task \n");
 8003c36:	4819      	ldr	r0, [pc, #100]	@ (8003c9c <IMU_Task+0x1a8>)
 8003c38:	f00c fb10 	bl	801025c <puts>

			 	}
			 	//Invio queue a OBC Task
			 	if (osMessagePut(IMUQueue2Handle,(uint32_t)local_imu_struct,300) != osOK) {
 8003c3c:	4b18      	ldr	r3, [pc, #96]	@ (8003ca0 <IMU_Task+0x1ac>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003c42:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003c46:	4618      	mov	r0, r3
 8003c48:	f009 f94e 	bl	800cee8 <osMessagePut>
 8003c4c:	4603      	mov	r3, r0
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d006      	beq.n	8003c60 <IMU_Task+0x16c>
			    	printf("Invio a OBC Task fallito \n");
 8003c52:	4814      	ldr	r0, [pc, #80]	@ (8003ca4 <IMU_Task+0x1b0>)
 8003c54:	f00c fb02 	bl	801025c <puts>
			       	free(local_imu_struct); // Ensure the receiving task has time to process
 8003c58:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003c5a:	f00b fcc7 	bl	800f5ec <free>
 8003c5e:	e76a      	b.n	8003b36 <IMU_Task+0x42>
			 	} else {
			    	printf("Dati a Control Inviati \n");
 8003c60:	4811      	ldr	r0, [pc, #68]	@ (8003ca8 <IMU_Task+0x1b4>)
 8003c62:	f00c fafb 	bl	801025c <puts>
 8003c66:	e766      	b.n	8003b36 <IMU_Task+0x42>
				}
			}
		}
		else{
			printf("IMU: Error configuring IMU \n");
 8003c68:	4810      	ldr	r0, [pc, #64]	@ (8003cac <IMU_Task+0x1b8>)
 8003c6a:	f00c faf7 	bl	801025c <puts>
			osDelay(1000);
 8003c6e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003c72:	f009 f8f7 	bl	800ce64 <osDelay>
		ret=readIMUPacket(&huart4, gyro, mag, acc, 500); //mag measured in Gauss(G) unit -> 1G = 10^-4 Tesla
 8003c76:	e75e      	b.n	8003b36 <IMU_Task+0x42>
 8003c78:	20023340 	.word	0x20023340
 8003c7c:	0801269c 	.word	0x0801269c
 8003c80:	080126a8 	.word	0x080126a8
 8003c84:	080126b4 	.word	0x080126b4
 8003c88:	461c4000 	.word	0x461c4000
 8003c8c:	08012598 	.word	0x08012598
 8003c90:	080125c4 	.word	0x080125c4
 8003c94:	20019284 	.word	0x20019284
 8003c98:	0801260c 	.word	0x0801260c
 8003c9c:	0801262c 	.word	0x0801262c
 8003ca0:	2001b6d0 	.word	0x2001b6d0
 8003ca4:	0801264c 	.word	0x0801264c
 8003ca8:	08012668 	.word	0x08012668
 8003cac:	08012680 	.word	0x08012680

08003cb0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b08a      	sub	sp, #40	@ 0x28
 8003cb4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003cb6:	f107 0314 	add.w	r3, r7, #20
 8003cba:	2200      	movs	r2, #0
 8003cbc:	601a      	str	r2, [r3, #0]
 8003cbe:	605a      	str	r2, [r3, #4]
 8003cc0:	609a      	str	r2, [r3, #8]
 8003cc2:	60da      	str	r2, [r3, #12]
 8003cc4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003cc6:	4b43      	ldr	r3, [pc, #268]	@ (8003dd4 <MX_GPIO_Init+0x124>)
 8003cc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003cca:	4a42      	ldr	r2, [pc, #264]	@ (8003dd4 <MX_GPIO_Init+0x124>)
 8003ccc:	f043 0304 	orr.w	r3, r3, #4
 8003cd0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003cd2:	4b40      	ldr	r3, [pc, #256]	@ (8003dd4 <MX_GPIO_Init+0x124>)
 8003cd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003cd6:	f003 0304 	and.w	r3, r3, #4
 8003cda:	613b      	str	r3, [r7, #16]
 8003cdc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003cde:	4b3d      	ldr	r3, [pc, #244]	@ (8003dd4 <MX_GPIO_Init+0x124>)
 8003ce0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ce2:	4a3c      	ldr	r2, [pc, #240]	@ (8003dd4 <MX_GPIO_Init+0x124>)
 8003ce4:	f043 0301 	orr.w	r3, r3, #1
 8003ce8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003cea:	4b3a      	ldr	r3, [pc, #232]	@ (8003dd4 <MX_GPIO_Init+0x124>)
 8003cec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003cee:	f003 0301 	and.w	r3, r3, #1
 8003cf2:	60fb      	str	r3, [r7, #12]
 8003cf4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003cf6:	4b37      	ldr	r3, [pc, #220]	@ (8003dd4 <MX_GPIO_Init+0x124>)
 8003cf8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003cfa:	4a36      	ldr	r2, [pc, #216]	@ (8003dd4 <MX_GPIO_Init+0x124>)
 8003cfc:	f043 0302 	orr.w	r3, r3, #2
 8003d00:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003d02:	4b34      	ldr	r3, [pc, #208]	@ (8003dd4 <MX_GPIO_Init+0x124>)
 8003d04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d06:	f003 0302 	and.w	r3, r3, #2
 8003d0a:	60bb      	str	r3, [r7, #8]
 8003d0c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003d0e:	4b31      	ldr	r3, [pc, #196]	@ (8003dd4 <MX_GPIO_Init+0x124>)
 8003d10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d12:	4a30      	ldr	r2, [pc, #192]	@ (8003dd4 <MX_GPIO_Init+0x124>)
 8003d14:	f043 0308 	orr.w	r3, r3, #8
 8003d18:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003d1a:	4b2e      	ldr	r3, [pc, #184]	@ (8003dd4 <MX_GPIO_Init+0x124>)
 8003d1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d1e:	f003 0308 	and.w	r3, r3, #8
 8003d22:	607b      	str	r3, [r7, #4]
 8003d24:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|LD4_Pin, GPIO_PIN_RESET);
 8003d26:	2200      	movs	r2, #0
 8003d28:	2130      	movs	r1, #48	@ 0x30
 8003d2a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003d2e:	f004 f9b3 	bl	8008098 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_8, GPIO_PIN_RESET);
 8003d32:	2200      	movs	r2, #0
 8003d34:	f240 1101 	movw	r1, #257	@ 0x101
 8003d38:	4827      	ldr	r0, [pc, #156]	@ (8003dd8 <MX_GPIO_Init+0x128>)
 8003d3a:	f004 f9ad 	bl	8008098 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8003d3e:	2201      	movs	r2, #1
 8003d40:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003d44:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003d48:	f004 f9a6 	bl	8008098 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	2104      	movs	r1, #4
 8003d50:	4822      	ldr	r0, [pc, #136]	@ (8003ddc <MX_GPIO_Init+0x12c>)
 8003d52:	f004 f9a1 	bl	8008098 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8003d56:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003d5a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003d5c:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8003d60:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d62:	2300      	movs	r3, #0
 8003d64:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8003d66:	f107 0314 	add.w	r3, r7, #20
 8003d6a:	4619      	mov	r1, r3
 8003d6c:	481c      	ldr	r0, [pc, #112]	@ (8003de0 <MX_GPIO_Init+0x130>)
 8003d6e:	f004 f819 	bl	8007da4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PAPin PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|LD4_Pin|GPIO_PIN_12;
 8003d72:	f241 0330 	movw	r3, #4144	@ 0x1030
 8003d76:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003d78:	2301      	movs	r3, #1
 8003d7a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d80:	2300      	movs	r3, #0
 8003d82:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d84:	f107 0314 	add.w	r3, r7, #20
 8003d88:	4619      	mov	r1, r3
 8003d8a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003d8e:	f004 f809 	bl	8007da4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_8;
 8003d92:	f240 1301 	movw	r3, #257	@ 0x101
 8003d96:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003d98:	2301      	movs	r3, #1
 8003d9a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d9c:	2300      	movs	r3, #0
 8003d9e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003da0:	2300      	movs	r3, #0
 8003da2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003da4:	f107 0314 	add.w	r3, r7, #20
 8003da8:	4619      	mov	r1, r3
 8003daa:	480b      	ldr	r0, [pc, #44]	@ (8003dd8 <MX_GPIO_Init+0x128>)
 8003dac:	f003 fffa 	bl	8007da4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003db0:	2304      	movs	r3, #4
 8003db2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003db4:	2301      	movs	r3, #1
 8003db6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003db8:	2300      	movs	r3, #0
 8003dba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003dc0:	f107 0314 	add.w	r3, r7, #20
 8003dc4:	4619      	mov	r1, r3
 8003dc6:	4805      	ldr	r0, [pc, #20]	@ (8003ddc <MX_GPIO_Init+0x12c>)
 8003dc8:	f003 ffec 	bl	8007da4 <HAL_GPIO_Init>

}
 8003dcc:	bf00      	nop
 8003dce:	3728      	adds	r7, #40	@ 0x28
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	bd80      	pop	{r7, pc}
 8003dd4:	40021000 	.word	0x40021000
 8003dd8:	48000400 	.word	0x48000400
 8003ddc:	48000c00 	.word	0x48000c00
 8003de0:	48000800 	.word	0x48000800

08003de4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003de8:	f002 fa4c 	bl	8006284 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003dec:	f000 f81c 	bl	8003e28 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003df0:	f7ff ff5e 	bl	8003cb0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8003df4:	f002 f806 	bl	8005e04 <MX_USART2_UART_Init>
  MX_UART4_Init();
 8003df8:	f001 ffa4 	bl	8005d44 <MX_UART4_Init>
  MX_USART1_UART_Init();
 8003dfc:	f001 ffd2 	bl	8005da4 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8003e00:	f002 f830 	bl	8005e64 <MX_USART3_UART_Init>
  MX_CAN1_Init();
 8003e04:	f7fe fed2 	bl	8002bac <MX_CAN1_Init>
  MX_TIM1_Init();
 8003e08:	f001 fcb2 	bl	8005770 <MX_TIM1_Init>
  MX_TIM2_Init();
 8003e0c:	f001 fd68 	bl	80058e0 <MX_TIM2_Init>
  MX_TIM3_Init();
 8003e10:	f001 fdfc 	bl	8005a0c <MX_TIM3_Init>
  MX_ADC1_Init();
 8003e14:	f7fe fa40 	bl	8002298 <MX_ADC1_Init>
  MX_SPI2_Init();
 8003e18:	f001 fa60 	bl	80052dc <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8003e1c:	f7ff fa9a 	bl	8003354 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8003e20:	f008 fff4 	bl	800ce0c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8003e24:	bf00      	nop
 8003e26:	e7fd      	b.n	8003e24 <main+0x40>

08003e28 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b096      	sub	sp, #88	@ 0x58
 8003e2c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003e2e:	f107 0314 	add.w	r3, r7, #20
 8003e32:	2244      	movs	r2, #68	@ 0x44
 8003e34:	2100      	movs	r1, #0
 8003e36:	4618      	mov	r0, r3
 8003e38:	f00c faf0 	bl	801041c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003e3c:	463b      	mov	r3, r7
 8003e3e:	2200      	movs	r2, #0
 8003e40:	601a      	str	r2, [r3, #0]
 8003e42:	605a      	str	r2, [r3, #4]
 8003e44:	609a      	str	r2, [r3, #8]
 8003e46:	60da      	str	r2, [r3, #12]
 8003e48:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8003e4a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8003e4e:	f004 f949 	bl	80080e4 <HAL_PWREx_ControlVoltageScaling>
 8003e52:	4603      	mov	r3, r0
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d001      	beq.n	8003e5c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8003e58:	f000 f84a 	bl	8003ef0 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003e5c:	2302      	movs	r3, #2
 8003e5e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003e60:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003e64:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003e66:	2340      	movs	r3, #64	@ 0x40
 8003e68:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003e6a:	2302      	movs	r3, #2
 8003e6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003e6e:	2302      	movs	r3, #2
 8003e70:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8003e72:	2301      	movs	r3, #1
 8003e74:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8003e76:	230a      	movs	r3, #10
 8003e78:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8003e7a:	2307      	movs	r3, #7
 8003e7c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8003e7e:	2302      	movs	r3, #2
 8003e80:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8003e82:	2302      	movs	r3, #2
 8003e84:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003e86:	f107 0314 	add.w	r3, r7, #20
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	f004 f980 	bl	8008190 <HAL_RCC_OscConfig>
 8003e90:	4603      	mov	r3, r0
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d001      	beq.n	8003e9a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8003e96:	f000 f82b 	bl	8003ef0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003e9a:	230f      	movs	r3, #15
 8003e9c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003e9e:	2303      	movs	r3, #3
 8003ea0:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8003ea2:	2380      	movs	r3, #128	@ 0x80
 8003ea4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003eaa:	2300      	movs	r3, #0
 8003eac:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003eae:	463b      	mov	r3, r7
 8003eb0:	2102      	movs	r1, #2
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	f004 fd80 	bl	80089b8 <HAL_RCC_ClockConfig>
 8003eb8:	4603      	mov	r3, r0
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d001      	beq.n	8003ec2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8003ebe:	f000 f817 	bl	8003ef0 <Error_Handler>
  }
}
 8003ec2:	bf00      	nop
 8003ec4:	3758      	adds	r7, #88	@ 0x58
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	bd80      	pop	{r7, pc}
	...

08003ecc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b082      	sub	sp, #8
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	4a04      	ldr	r2, [pc, #16]	@ (8003eec <HAL_TIM_PeriodElapsedCallback+0x20>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d101      	bne.n	8003ee2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8003ede:	f002 f9f1 	bl	80062c4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8003ee2:	bf00      	nop
 8003ee4:	3708      	adds	r7, #8
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	bd80      	pop	{r7, pc}
 8003eea:	bf00      	nop
 8003eec:	40001000 	.word	0x40001000

08003ef0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003ef0:	b480      	push	{r7}
 8003ef2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8003ef4:	b672      	cpsid	i
}
 8003ef6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003ef8:	bf00      	nop
 8003efa:	e7fd      	b.n	8003ef8 <Error_Handler+0x8>

08003efc <PID_INIT>:

    PID_Inputs->th_Dutycycle[2] =  100*((PID_Inputs->th_Current[2] * PID_Inputs->torquer_Req_Ohm[2]) / PID_Inputs->torquer_Vdd[2]);

}

void PID_INIT(PID_Inputs_struct *PID_Inputs){
 8003efc:	b480      	push	{r7}
 8003efe:	b085      	sub	sp, #20
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]

  for (uint8_t i = 0; i < sizeof(PID_Inputs->d_AngSpeed_Err_dt); i++) {
 8003f04:	2300      	movs	r3, #0
 8003f06:	73fb      	strb	r3, [r7, #15]
 8003f08:	e02f      	b.n	8003f6a <PID_INIT+0x6e>

    PID_Inputs->N_spires[i] = N_spires[i];
 8003f0a:	7bfa      	ldrb	r2, [r7, #15]
 8003f0c:	7bfb      	ldrb	r3, [r7, #15]
 8003f0e:	491c      	ldr	r1, [pc, #112]	@ (8003f80 <PID_INIT+0x84>)
 8003f10:	0092      	lsls	r2, r2, #2
 8003f12:	440a      	add	r2, r1
 8003f14:	6812      	ldr	r2, [r2, #0]
 8003f16:	6879      	ldr	r1, [r7, #4]
 8003f18:	009b      	lsls	r3, r3, #2
 8003f1a:	440b      	add	r3, r1
 8003f1c:	3304      	adds	r3, #4
 8003f1e:	601a      	str	r2, [r3, #0]
    PID_Inputs->A_torquers[i] = A_torquers[i];
 8003f20:	7bfa      	ldrb	r2, [r7, #15]
 8003f22:	7bfb      	ldrb	r3, [r7, #15]
 8003f24:	4917      	ldr	r1, [pc, #92]	@ (8003f84 <PID_INIT+0x88>)
 8003f26:	0092      	lsls	r2, r2, #2
 8003f28:	440a      	add	r2, r1
 8003f2a:	6812      	ldr	r2, [r2, #0]
 8003f2c:	6879      	ldr	r1, [r7, #4]
 8003f2e:	3304      	adds	r3, #4
 8003f30:	009b      	lsls	r3, r3, #2
 8003f32:	440b      	add	r3, r1
 8003f34:	601a      	str	r2, [r3, #0]
    PID_Inputs->torquer_Req_Ohm[i] = torquer_Req_Ohm[i];
 8003f36:	7bfa      	ldrb	r2, [r7, #15]
 8003f38:	7bfb      	ldrb	r3, [r7, #15]
 8003f3a:	4913      	ldr	r1, [pc, #76]	@ (8003f88 <PID_INIT+0x8c>)
 8003f3c:	0092      	lsls	r2, r2, #2
 8003f3e:	440a      	add	r2, r1
 8003f40:	6812      	ldr	r2, [r2, #0]
 8003f42:	6879      	ldr	r1, [r7, #4]
 8003f44:	3306      	adds	r3, #6
 8003f46:	009b      	lsls	r3, r3, #2
 8003f48:	440b      	add	r3, r1
 8003f4a:	3304      	adds	r3, #4
 8003f4c:	601a      	str	r2, [r3, #0]
    PID_Inputs->torquer_Vdd[i] = torquer_Vdd[i];
 8003f4e:	7bfa      	ldrb	r2, [r7, #15]
 8003f50:	7bfb      	ldrb	r3, [r7, #15]
 8003f52:	490e      	ldr	r1, [pc, #56]	@ (8003f8c <PID_INIT+0x90>)
 8003f54:	0092      	lsls	r2, r2, #2
 8003f56:	440a      	add	r2, r1
 8003f58:	6812      	ldr	r2, [r2, #0]
 8003f5a:	6879      	ldr	r1, [r7, #4]
 8003f5c:	330a      	adds	r3, #10
 8003f5e:	009b      	lsls	r3, r3, #2
 8003f60:	440b      	add	r3, r1
 8003f62:	601a      	str	r2, [r3, #0]
  for (uint8_t i = 0; i < sizeof(PID_Inputs->d_AngSpeed_Err_dt); i++) {
 8003f64:	7bfb      	ldrb	r3, [r7, #15]
 8003f66:	3301      	adds	r3, #1
 8003f68:	73fb      	strb	r3, [r7, #15]
 8003f6a:	7bfb      	ldrb	r3, [r7, #15]
 8003f6c:	2b0b      	cmp	r3, #11
 8003f6e:	d9cc      	bls.n	8003f0a <PID_INIT+0xe>

  }


}
 8003f70:	bf00      	nop
 8003f72:	bf00      	nop
 8003f74:	3714      	adds	r7, #20
 8003f76:	46bd      	mov	sp, r7
 8003f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7c:	4770      	bx	lr
 8003f7e:	bf00      	nop
 8003f80:	080127f0 	.word	0x080127f0
 8003f84:	080127fc 	.word	0x080127fc
 8003f88:	08012808 	.word	0x08012808
 8003f8c:	08012814 	.word	0x08012814

08003f90 <processCombinedData>:

#include "queue_structs.h"



void processCombinedData(void *event,void *strct1, CombinedDataProcessor processor) {
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b084      	sub	sp, #16
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	60f8      	str	r0, [r7, #12]
 8003f98:	60b9      	str	r1, [r7, #8]
 8003f9a:	607a      	str	r2, [r7, #4]
    processor(event,strct1);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	68b9      	ldr	r1, [r7, #8]
 8003fa0:	68f8      	ldr	r0, [r7, #12]
 8003fa2:	4798      	blx	r3
}
 8003fa4:	bf00      	nop
 8003fa6:	3710      	adds	r7, #16
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	bd80      	pop	{r7, pc}

08003fac <receive_IMUqueue_control>:

void receive_IMUqueue_control(void *event,void *PID_struct) {
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b086      	sub	sp, #24
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
 8003fb4:	6039      	str	r1, [r7, #0]

	imu_queue_struct *int_queue_struct;
	PID_Inputs_struct *int_pid_struct = (PID_Inputs_struct *)PID_struct;
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	613b      	str	r3, [r7, #16]

	if (((osEvent *)event)->status == osEventMessage)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	2b10      	cmp	r3, #16
 8003fc0:	d127      	bne.n	8004012 <receive_IMUqueue_control+0x66>
	{
		int_queue_struct = (imu_queue_struct *)((osEvent *) event)->value.p;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	685b      	ldr	r3, [r3, #4]
 8003fc6:	60fb      	str	r3, [r7, #12]
#if enable_printf
		printf("Control TASK: Received IMU measured values via Queue \n");
#endif
		for(int i=0;i<3;i++){
 8003fc8:	2300      	movs	r3, #0
 8003fca:	617b      	str	r3, [r7, #20]
 8003fcc:	e01a      	b.n	8004004 <receive_IMUqueue_control+0x58>

				int_pid_struct->angSpeed_Measured[i] = int_queue_struct->gyro_msr[i];
 8003fce:	68fa      	ldr	r2, [r7, #12]
 8003fd0:	697b      	ldr	r3, [r7, #20]
 8003fd2:	009b      	lsls	r3, r3, #2
 8003fd4:	4413      	add	r3, r2
 8003fd6:	681a      	ldr	r2, [r3, #0]
 8003fd8:	6939      	ldr	r1, [r7, #16]
 8003fda:	697b      	ldr	r3, [r7, #20]
 8003fdc:	331c      	adds	r3, #28
 8003fde:	009b      	lsls	r3, r3, #2
 8003fe0:	440b      	add	r3, r1
 8003fe2:	601a      	str	r2, [r3, #0]
#if enable_printf
				printf("Control: Giro[%d] : %f \n",i,int_pid_struct->angSpeed_Measured[i]);
#endif
				int_pid_struct->B[i] = int_queue_struct->mag_msr[i];
 8003fe4:	68fa      	ldr	r2, [r7, #12]
 8003fe6:	697b      	ldr	r3, [r7, #20]
 8003fe8:	3302      	adds	r3, #2
 8003fea:	009b      	lsls	r3, r3, #2
 8003fec:	4413      	add	r3, r2
 8003fee:	3304      	adds	r3, #4
 8003ff0:	681a      	ldr	r2, [r3, #0]
 8003ff2:	6939      	ldr	r1, [r7, #16]
 8003ff4:	697b      	ldr	r3, [r7, #20]
 8003ff6:	3352      	adds	r3, #82	@ 0x52
 8003ff8:	009b      	lsls	r3, r3, #2
 8003ffa:	440b      	add	r3, r1
 8003ffc:	601a      	str	r2, [r3, #0]
		for(int i=0;i<3;i++){
 8003ffe:	697b      	ldr	r3, [r7, #20]
 8004000:	3301      	adds	r3, #1
 8004002:	617b      	str	r3, [r7, #20]
 8004004:	697b      	ldr	r3, [r7, #20]
 8004006:	2b02      	cmp	r3, #2
 8004008:	dde1      	ble.n	8003fce <receive_IMUqueue_control+0x22>
#if enable_printf
				printf("Control: Magn Field[%d] : %f \n",i,int_pid_struct->B[i]);
#endif
		}
		free(int_queue_struct);
 800400a:	68f8      	ldr	r0, [r7, #12]
 800400c:	f00b faee 	bl	800f5ec <free>
	}
	else
	{
		printf("Control Task: Ricezione IMU fallita con status: %d \n\n", ((osEvent *)event)->status);
	}
}
 8004010:	e005      	b.n	800401e <receive_IMUqueue_control+0x72>
		printf("Control Task: Ricezione IMU fallita con status: %d \n\n", ((osEvent *)event)->status);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	4619      	mov	r1, r3
 8004018:	4803      	ldr	r0, [pc, #12]	@ (8004028 <receive_IMUqueue_control+0x7c>)
 800401a:	f00c f8b7 	bl	801018c <iprintf>
}
 800401e:	bf00      	nop
 8004020:	3718      	adds	r7, #24
 8004022:	46bd      	mov	sp, r7
 8004024:	bd80      	pop	{r7, pc}
 8004026:	bf00      	nop
 8004028:	080126c0 	.word	0x080126c0

0800402c <receive_IMUqueue_OBC>:

void receive_IMUqueue_OBC(void *event,void *attitude) {
 800402c:	b580      	push	{r7, lr}
 800402e:	b084      	sub	sp, #16
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
 8004034:	6039      	str	r1, [r7, #0]

	imu_queue_struct *int_queue_struct;
	attitudeADCS *int_attitude_struct = (attitudeADCS *)attitude;
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	60fb      	str	r3, [r7, #12]

	if (((osEvent *)event)->status == osEventMessage)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	2b10      	cmp	r3, #16
 8004040:	d124      	bne.n	800408c <receive_IMUqueue_OBC+0x60>
	{
		int_queue_struct = (imu_queue_struct *)((osEvent *) event)->value.p;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	685b      	ldr	r3, [r3, #4]
 8004046:	60bb      	str	r3, [r7, #8]
#if enable_printf
		printf("OBC TASK: Received IMU measured values via Queue \n");
#endif
		int_attitude_struct->omega_x = int_queue_struct->gyro_msr[0];
 8004048:	68bb      	ldr	r3, [r7, #8]
 800404a:	681a      	ldr	r2, [r3, #0]
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	3301      	adds	r3, #1
 8004050:	601a      	str	r2, [r3, #0]
		int_attitude_struct->omega_y = int_queue_struct->gyro_msr[1];
 8004052:	68bb      	ldr	r3, [r7, #8]
 8004054:	685a      	ldr	r2, [r3, #4]
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	3305      	adds	r3, #5
 800405a:	601a      	str	r2, [r3, #0]
		int_attitude_struct->omega_z = int_queue_struct->gyro_msr[2];
 800405c:	68bb      	ldr	r3, [r7, #8]
 800405e:	689a      	ldr	r2, [r3, #8]
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	3309      	adds	r3, #9
 8004064:	601a      	str	r2, [r3, #0]
		int_attitude_struct->b_x = int_queue_struct->mag_msr[0];
 8004066:	68bb      	ldr	r3, [r7, #8]
 8004068:	68da      	ldr	r2, [r3, #12]
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	3319      	adds	r3, #25
 800406e:	601a      	str	r2, [r3, #0]
		int_attitude_struct->b_y = int_queue_struct->mag_msr[1];
 8004070:	68bb      	ldr	r3, [r7, #8]
 8004072:	691a      	ldr	r2, [r3, #16]
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	331d      	adds	r3, #29
 8004078:	601a      	str	r2, [r3, #0]
		int_attitude_struct->b_z = int_queue_struct->mag_msr[2];
 800407a:	68bb      	ldr	r3, [r7, #8]
 800407c:	695a      	ldr	r2, [r3, #20]
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	3321      	adds	r3, #33	@ 0x21
 8004082:	601a      	str	r2, [r3, #0]
		printf("OBC: Giro[2] : %f \n",int_attitude_struct->omega_z);
		printf("OBC: Magn Field[0] : %f \n",int_attitude_struct->b_x);
		printf("OBC: Magn Field[1] : %f \n",int_attitude_struct->b_y);
		printf("OBC: Magn Field[2] : %f \n",int_attitude_struct->b_z);
#endif
		free(int_queue_struct);
 8004084:	68b8      	ldr	r0, [r7, #8]
 8004086:	f00b fab1 	bl	800f5ec <free>
		}
		else
		{
			printf("OBC TASK:Ricezione IMU fallita con status: %d \n\n", ((osEvent *)event)->status);
		}
}
 800408a:	e005      	b.n	8004098 <receive_IMUqueue_OBC+0x6c>
			printf("OBC TASK:Ricezione IMU fallita con status: %d \n\n", ((osEvent *)event)->status);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	4619      	mov	r1, r3
 8004092:	4803      	ldr	r0, [pc, #12]	@ (80040a0 <receive_IMUqueue_OBC+0x74>)
 8004094:	f00c f87a 	bl	801018c <iprintf>
}
 8004098:	bf00      	nop
 800409a:	3710      	adds	r7, #16
 800409c:	46bd      	mov	sp, r7
 800409e:	bd80      	pop	{r7, pc}
 80040a0:	080126f8 	.word	0x080126f8

080040a4 <receive_Current_Tempqueue_OBC>:
void receive_Current_Tempqueue_OBC(void *event,void *current_temp_struct)
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b086      	sub	sp, #24
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
 80040ac:	6039      	str	r1, [r7, #0]
	Current_Temp_Struct *int_queue_struct;
	housekeepingADCS *int_HK_struct = (housekeepingADCS *)current_temp_struct;
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	613b      	str	r3, [r7, #16]
	if (((osEvent *)event)->status == osEventMessage)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	2b10      	cmp	r3, #16
 80040b8:	d133      	bne.n	8004122 <receive_Current_Tempqueue_OBC+0x7e>
	{
		int_queue_struct = (Current_Temp_Struct *)((osEvent *) event)->value.p;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	685b      	ldr	r3, [r3, #4]
 80040be:	60fb      	str	r3, [r7, #12]
#if enable_printf
		printf("OBC TASK: Received Currents and Temperatures values via Queue \n");
#endif
		for(int i=0;i<NUM_ACTUATORS+NUM_TEMP_SENS;i++)
 80040c0:	2300      	movs	r3, #0
 80040c2:	617b      	str	r3, [r7, #20]
 80040c4:	e026      	b.n	8004114 <receive_Current_Tempqueue_OBC+0x70>
		{
			if(i<NUM_ACTUATORS){
 80040c6:	697b      	ldr	r3, [r7, #20]
 80040c8:	2b04      	cmp	r3, #4
 80040ca:	dc0d      	bgt.n	80040e8 <receive_Current_Tempqueue_OBC+0x44>
	    			int_HK_struct->current[i] = int_queue_struct->current[i];
 80040cc:	68fa      	ldr	r2, [r7, #12]
 80040ce:	697b      	ldr	r3, [r7, #20]
 80040d0:	009b      	lsls	r3, r3, #2
 80040d2:	4413      	add	r3, r2
 80040d4:	6819      	ldr	r1, [r3, #0]
 80040d6:	693a      	ldr	r2, [r7, #16]
 80040d8:	697b      	ldr	r3, [r7, #20]
 80040da:	330c      	adds	r3, #12
 80040dc:	009b      	lsls	r3, r3, #2
 80040de:	4413      	add	r3, r2
 80040e0:	3301      	adds	r3, #1
 80040e2:	460a      	mov	r2, r1
 80040e4:	601a      	str	r2, [r3, #0]
 80040e6:	e012      	b.n	800410e <receive_Current_Tempqueue_OBC+0x6a>
#if enable_printf
	    			printf("OBC Task: Actuator %d current: %f Current_Temp_buff: %f \n",i+1,int_HK_struct->current[i],int_queue_struct->current[i]);
#endif
			}
	    	else
	    		if(i<NUM_ACTUATORS+NUM_TEMP_SENS){
 80040e8:	697b      	ldr	r3, [r7, #20]
 80040ea:	2b0c      	cmp	r3, #12
 80040ec:	dc0f      	bgt.n	800410e <receive_Current_Tempqueue_OBC+0x6a>
	    			int_HK_struct->temperature[i - NUM_ACTUATORS] = int_queue_struct->temperature[i - NUM_ACTUATORS];
 80040ee:	697b      	ldr	r3, [r7, #20]
 80040f0:	1f5a      	subs	r2, r3, #5
 80040f2:	697b      	ldr	r3, [r7, #20]
 80040f4:	3b05      	subs	r3, #5
 80040f6:	68f9      	ldr	r1, [r7, #12]
 80040f8:	3204      	adds	r2, #4
 80040fa:	0092      	lsls	r2, r2, #2
 80040fc:	440a      	add	r2, r1
 80040fe:	3204      	adds	r2, #4
 8004100:	6811      	ldr	r1, [r2, #0]
 8004102:	693a      	ldr	r2, [r7, #16]
 8004104:	009b      	lsls	r3, r3, #2
 8004106:	4413      	add	r3, r2
 8004108:	3301      	adds	r3, #1
 800410a:	460a      	mov	r2, r1
 800410c:	601a      	str	r2, [r3, #0]
		for(int i=0;i<NUM_ACTUATORS+NUM_TEMP_SENS;i++)
 800410e:	697b      	ldr	r3, [r7, #20]
 8004110:	3301      	adds	r3, #1
 8004112:	617b      	str	r3, [r7, #20]
 8004114:	697b      	ldr	r3, [r7, #20]
 8004116:	2b0c      	cmp	r3, #12
 8004118:	ddd5      	ble.n	80040c6 <receive_Current_Tempqueue_OBC+0x22>
#if enable_printf
	    			printf("OBC Task: Temperature n%d value: %f Current_Temp_buff: %f \n",i - 4,int_HK_struct->temperature[i - NUM_ACTUATORS],int_queue_struct->temperature[i - NUM_ACTUATORS]);
#endif
	    		}
		}
		free(int_queue_struct);
 800411a:	68f8      	ldr	r0, [r7, #12]
 800411c:	f00b fa66 	bl	800f5ec <free>
	else
	{
		printf("OBC TASK: Ricezione correnti e temperature fallita con status: %d \n\n", ((osEvent *)event)->status);
	}

}
 8004120:	e005      	b.n	800412e <receive_Current_Tempqueue_OBC+0x8a>
		printf("OBC TASK: Ricezione correnti e temperature fallita con status: %d \n\n", ((osEvent *)event)->status);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	4619      	mov	r1, r3
 8004128:	4803      	ldr	r0, [pc, #12]	@ (8004138 <receive_Current_Tempqueue_OBC+0x94>)
 800412a:	f00c f82f 	bl	801018c <iprintf>
}
 800412e:	bf00      	nop
 8004130:	3718      	adds	r7, #24
 8004132:	46bd      	mov	sp, r7
 8004134:	bd80      	pop	{r7, pc}
 8004136:	bf00      	nop
 8004138:	0801272c 	.word	0x0801272c

0800413c <receive_Attitudequeue_control>:

void receive_Attitudequeue_control(void *event,void * PID_struct)
{
 800413c:	b480      	push	{r7}
 800413e:	b085      	sub	sp, #20
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
 8004144:	6039      	str	r1, [r7, #0]
	setAttitudeADCS *int_attitude_adcs;
	PID_Inputs_struct *int_PID_struct = (PID_Inputs_struct *)PID_struct;
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	60fb      	str	r3, [r7, #12]
}
 800414a:	bf00      	nop
 800414c:	3714      	adds	r7, #20
 800414e:	46bd      	mov	sp, r7
 8004150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004154:	4770      	bx	lr
	...

08004158 <init_tempsens_handler>:
//uint8_t WRITE_ON_MR = 0x10; //The first byte to send on DIN to CR to start Conversation in Single MODE
//uint8_t MR_FOR_SINGLE_MOD = 0x86; //The second byte to send on DIN to start Conversation in Single MODE
uint8_t READ_DATAREG = 0x38; //The byte to send on DIN to start obtain the result of Conversation on Dout
uint8_t READ_STATUSREG = 0x08; //The byte to send on DIN to the CR to obtain the content of Status Reg

void init_tempsens_handler(Temp_values *Temp_values){
 8004158:	b480      	push	{r7}
 800415a:	b083      	sub	sp, #12
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
    Temp_values->temp[0] = 0;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	f04f 0200 	mov.w	r2, #0
 8004166:	601a      	str	r2, [r3, #0]
    Temp_values->temp[1] = 0;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	f04f 0200 	mov.w	r2, #0
 800416e:	605a      	str	r2, [r3, #4]
    Temp_values->temp[2] = 0;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	f04f 0200 	mov.w	r2, #0
 8004176:	609a      	str	r2, [r3, #8]
    Temp_values->temp[3] = 0;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	f04f 0200 	mov.w	r2, #0
 800417e:	60da      	str	r2, [r3, #12]
    Temp_values->temp[4] = 0;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	f04f 0200 	mov.w	r2, #0
 8004186:	611a      	str	r2, [r3, #16]
    Temp_values->temp[5] = 0;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	f04f 0200 	mov.w	r2, #0
 800418e:	615a      	str	r2, [r3, #20]
    Temp_values->temp[6] = 0;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	f04f 0200 	mov.w	r2, #0
 8004196:	619a      	str	r2, [r3, #24]
    Temp_values->temp[7] = 0;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	f04f 0200 	mov.w	r2, #0
 800419e:	61da      	str	r2, [r3, #28]
    Temp_values->values.R[0] = 10040; //ohm
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	4a13      	ldr	r2, [pc, #76]	@ (80041f0 <init_tempsens_handler+0x98>)
 80041a4:	625a      	str	r2, [r3, #36]	@ 0x24
    Temp_values->values.R[1] = 10020; //ohm
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	4a12      	ldr	r2, [pc, #72]	@ (80041f4 <init_tempsens_handler+0x9c>)
 80041aa:	629a      	str	r2, [r3, #40]	@ 0x28
    Temp_values->values.R[2] = 10000; //ohm
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	4a12      	ldr	r2, [pc, #72]	@ (80041f8 <init_tempsens_handler+0xa0>)
 80041b0:	62da      	str	r2, [r3, #44]	@ 0x2c
    Temp_values->values.R[3] = 10020; //ohm
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	4a0f      	ldr	r2, [pc, #60]	@ (80041f4 <init_tempsens_handler+0x9c>)
 80041b6:	631a      	str	r2, [r3, #48]	@ 0x30
    Temp_values->values.R[4] = 10000; //ohm
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	4a0f      	ldr	r2, [pc, #60]	@ (80041f8 <init_tempsens_handler+0xa0>)
 80041bc:	635a      	str	r2, [r3, #52]	@ 0x34
    Temp_values->values.R[5] = 10010; //ohm
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	4a0e      	ldr	r2, [pc, #56]	@ (80041fc <init_tempsens_handler+0xa4>)
 80041c2:	639a      	str	r2, [r3, #56]	@ 0x38
    Temp_values->values.R[6] = 10000; //ohm
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	4a0c      	ldr	r2, [pc, #48]	@ (80041f8 <init_tempsens_handler+0xa0>)
 80041c8:	63da      	str	r2, [r3, #60]	@ 0x3c
    Temp_values->values.R[7] = 10000; //ohm
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	4a0a      	ldr	r2, [pc, #40]	@ (80041f8 <init_tempsens_handler+0xa0>)
 80041ce:	641a      	str	r2, [r3, #64]	@ 0x40
    Temp_values->values.R_25 = 10000; //ohm
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	4a09      	ldr	r2, [pc, #36]	@ (80041f8 <init_tempsens_handler+0xa0>)
 80041d4:	621a      	str	r2, [r3, #32]
    Temp_values->values.B = 3977; //k
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	4a09      	ldr	r2, [pc, #36]	@ (8004200 <init_tempsens_handler+0xa8>)
 80041da:	645a      	str	r2, [r3, #68]	@ 0x44
    Temp_values->values.Vdd = 3.3; //v
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	4a09      	ldr	r2, [pc, #36]	@ (8004204 <init_tempsens_handler+0xac>)
 80041e0:	649a      	str	r2, [r3, #72]	@ 0x48
}
 80041e2:	bf00      	nop
 80041e4:	370c      	adds	r7, #12
 80041e6:	46bd      	mov	sp, r7
 80041e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ec:	4770      	bx	lr
 80041ee:	bf00      	nop
 80041f0:	461ce000 	.word	0x461ce000
 80041f4:	461c9000 	.word	0x461c9000
 80041f8:	461c4000 	.word	0x461c4000
 80041fc:	461c6800 	.word	0x461c6800
 8004200:	45789000 	.word	0x45789000
 8004204:	40533333 	.word	0x40533333

08004208 <select_input>:

void select_input(uint8_t sel)
{
 8004208:	b580      	push	{r7, lr}
 800420a:	b082      	sub	sp, #8
 800420c:	af00      	add	r7, sp, #0
 800420e:	4603      	mov	r3, r0
 8004210:	71fb      	strb	r3, [r7, #7]
    //s3 must be put to 0 always,otherwise the mux would not put out the signal
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET); //s3 = 0
 8004212:	2200      	movs	r2, #0
 8004214:	2110      	movs	r1, #16
 8004216:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800421a:	f003 ff3d 	bl	8008098 <HAL_GPIO_WritePin>
    switch (sel)
 800421e:	79fb      	ldrb	r3, [r7, #7]
 8004220:	2b07      	cmp	r3, #7
 8004222:	f200 809b 	bhi.w	800435c <select_input+0x154>
 8004226:	a201      	add	r2, pc, #4	@ (adr r2, 800422c <select_input+0x24>)
 8004228:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800422c:	0800424d 	.word	0x0800424d
 8004230:	0800426f 	.word	0x0800426f
 8004234:	08004291 	.word	0x08004291
 8004238:	080042b3 	.word	0x080042b3
 800423c:	080042d5 	.word	0x080042d5
 8004240:	080042f7 	.word	0x080042f7
 8004244:	08004319 	.word	0x08004319
 8004248:	0800433b 	.word	0x0800433b
    {
    case 0:
        /* code */
        //Select Y0
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET); //s2 = 0
 800424c:	2200      	movs	r2, #0
 800424e:	2101      	movs	r1, #1
 8004250:	4846      	ldr	r0, [pc, #280]	@ (800436c <select_input+0x164>)
 8004252:	f003 ff21 	bl	8008098 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET); //s1 = 0
 8004256:	2200      	movs	r2, #0
 8004258:	2104      	movs	r1, #4
 800425a:	4845      	ldr	r0, [pc, #276]	@ (8004370 <select_input+0x168>)
 800425c:	f003 ff1c 	bl	8008098 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET); //s0 = 0
 8004260:	2200      	movs	r2, #0
 8004262:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004266:	4841      	ldr	r0, [pc, #260]	@ (800436c <select_input+0x164>)
 8004268:	f003 ff16 	bl	8008098 <HAL_GPIO_WritePin>
        
        
        break;
 800426c:	e07a      	b.n	8004364 <select_input+0x15c>
    case 1:
        /* code */
        //Select Y1
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET); //s2 = 0
 800426e:	2200      	movs	r2, #0
 8004270:	2101      	movs	r1, #1
 8004272:	483e      	ldr	r0, [pc, #248]	@ (800436c <select_input+0x164>)
 8004274:	f003 ff10 	bl	8008098 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET); //s1 = 0
 8004278:	2200      	movs	r2, #0
 800427a:	2104      	movs	r1, #4
 800427c:	483c      	ldr	r0, [pc, #240]	@ (8004370 <select_input+0x168>)
 800427e:	f003 ff0b 	bl	8008098 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET); //s0 = 1
 8004282:	2201      	movs	r2, #1
 8004284:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004288:	4838      	ldr	r0, [pc, #224]	@ (800436c <select_input+0x164>)
 800428a:	f003 ff05 	bl	8008098 <HAL_GPIO_WritePin>
        break;
 800428e:	e069      	b.n	8004364 <select_input+0x15c>
    case 2:
        /* code */
        //Select Y2
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET); //s2 = 0
 8004290:	2200      	movs	r2, #0
 8004292:	2101      	movs	r1, #1
 8004294:	4835      	ldr	r0, [pc, #212]	@ (800436c <select_input+0x164>)
 8004296:	f003 feff 	bl	8008098 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_SET); //s1 = 1
 800429a:	2201      	movs	r2, #1
 800429c:	2104      	movs	r1, #4
 800429e:	4834      	ldr	r0, [pc, #208]	@ (8004370 <select_input+0x168>)
 80042a0:	f003 fefa 	bl	8008098 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET); //s0 = 0
 80042a4:	2200      	movs	r2, #0
 80042a6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80042aa:	4830      	ldr	r0, [pc, #192]	@ (800436c <select_input+0x164>)
 80042ac:	f003 fef4 	bl	8008098 <HAL_GPIO_WritePin>
        break;
 80042b0:	e058      	b.n	8004364 <select_input+0x15c>
    case 3:
        /* code */
        //Select Y3
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET); //s2 = 0
 80042b2:	2200      	movs	r2, #0
 80042b4:	2101      	movs	r1, #1
 80042b6:	482d      	ldr	r0, [pc, #180]	@ (800436c <select_input+0x164>)
 80042b8:	f003 feee 	bl	8008098 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_SET); //s1 = 1
 80042bc:	2201      	movs	r2, #1
 80042be:	2104      	movs	r1, #4
 80042c0:	482b      	ldr	r0, [pc, #172]	@ (8004370 <select_input+0x168>)
 80042c2:	f003 fee9 	bl	8008098 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET); //s0 = 1
 80042c6:	2201      	movs	r2, #1
 80042c8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80042cc:	4827      	ldr	r0, [pc, #156]	@ (800436c <select_input+0x164>)
 80042ce:	f003 fee3 	bl	8008098 <HAL_GPIO_WritePin>
        break;
 80042d2:	e047      	b.n	8004364 <select_input+0x15c>
    case 4:
        /* code */
        //Select Y4
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET); //s2 = 1
 80042d4:	2201      	movs	r2, #1
 80042d6:	2101      	movs	r1, #1
 80042d8:	4824      	ldr	r0, [pc, #144]	@ (800436c <select_input+0x164>)
 80042da:	f003 fedd 	bl	8008098 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET); //s1 = 0
 80042de:	2200      	movs	r2, #0
 80042e0:	2104      	movs	r1, #4
 80042e2:	4823      	ldr	r0, [pc, #140]	@ (8004370 <select_input+0x168>)
 80042e4:	f003 fed8 	bl	8008098 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET); //s0 = 0
 80042e8:	2200      	movs	r2, #0
 80042ea:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80042ee:	481f      	ldr	r0, [pc, #124]	@ (800436c <select_input+0x164>)
 80042f0:	f003 fed2 	bl	8008098 <HAL_GPIO_WritePin>
        break;
 80042f4:	e036      	b.n	8004364 <select_input+0x15c>
    case 5:
        /* code */
        //Select Y5
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET); //s2 = 1
 80042f6:	2201      	movs	r2, #1
 80042f8:	2101      	movs	r1, #1
 80042fa:	481c      	ldr	r0, [pc, #112]	@ (800436c <select_input+0x164>)
 80042fc:	f003 fecc 	bl	8008098 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET); //s1 = 0
 8004300:	2200      	movs	r2, #0
 8004302:	2104      	movs	r1, #4
 8004304:	481a      	ldr	r0, [pc, #104]	@ (8004370 <select_input+0x168>)
 8004306:	f003 fec7 	bl	8008098 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET); //s0 = 1
 800430a:	2201      	movs	r2, #1
 800430c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004310:	4816      	ldr	r0, [pc, #88]	@ (800436c <select_input+0x164>)
 8004312:	f003 fec1 	bl	8008098 <HAL_GPIO_WritePin>
        break;
 8004316:	e025      	b.n	8004364 <select_input+0x15c>
    case 6:
        /* code */
        //Select Y6
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET); //s2 = 1
 8004318:	2201      	movs	r2, #1
 800431a:	2101      	movs	r1, #1
 800431c:	4813      	ldr	r0, [pc, #76]	@ (800436c <select_input+0x164>)
 800431e:	f003 febb 	bl	8008098 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_SET); //s1 = 1
 8004322:	2201      	movs	r2, #1
 8004324:	2104      	movs	r1, #4
 8004326:	4812      	ldr	r0, [pc, #72]	@ (8004370 <select_input+0x168>)
 8004328:	f003 feb6 	bl	8008098 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET); //s0 = 0
 800432c:	2200      	movs	r2, #0
 800432e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004332:	480e      	ldr	r0, [pc, #56]	@ (800436c <select_input+0x164>)
 8004334:	f003 feb0 	bl	8008098 <HAL_GPIO_WritePin>
        break;
 8004338:	e014      	b.n	8004364 <select_input+0x15c>
    case 7:
        /* code */
        //Select Y7
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET); //s2 = 1
 800433a:	2201      	movs	r2, #1
 800433c:	2101      	movs	r1, #1
 800433e:	480b      	ldr	r0, [pc, #44]	@ (800436c <select_input+0x164>)
 8004340:	f003 feaa 	bl	8008098 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_SET); //s1 = 1
 8004344:	2201      	movs	r2, #1
 8004346:	2104      	movs	r1, #4
 8004348:	4809      	ldr	r0, [pc, #36]	@ (8004370 <select_input+0x168>)
 800434a:	f003 fea5 	bl	8008098 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET); //s0 = 1
 800434e:	2201      	movs	r2, #1
 8004350:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004354:	4805      	ldr	r0, [pc, #20]	@ (800436c <select_input+0x164>)
 8004356:	f003 fe9f 	bl	8008098 <HAL_GPIO_WritePin>
        break;
 800435a:	e003      	b.n	8004364 <select_input+0x15c>

    default:
        /* code */
        //Error, print that the sel value is not correct
    	printf("Error: selection signal is NOT CORRECT!!! \n");
 800435c:	4805      	ldr	r0, [pc, #20]	@ (8004374 <select_input+0x16c>)
 800435e:	f00b ff7d 	bl	801025c <puts>
        break;
 8004362:	bf00      	nop
    }
}
 8004364:	bf00      	nop
 8004366:	3708      	adds	r7, #8
 8004368:	46bd      	mov	sp, r7
 800436a:	bd80      	pop	{r7, pc}
 800436c:	48000400 	.word	0x48000400
 8004370:	48000c00 	.word	0x48000c00
 8004374:	08012774 	.word	0x08012774

08004378 <ADC_Conversion>:

float ADC_Conversion(SPI_HandleTypeDef *spi_struct,uint8_t mode)
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b088      	sub	sp, #32
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
 8004380:	460b      	mov	r3, r1
 8004382:	70fb      	strb	r3, [r7, #3]
    uint8_t spi_data[2];
    volatile uint16_t dec_data;
    //uint8_t status_reg_val;
    uint32_t time_start = 0; //ms
 8004384:	2300      	movs	r3, #0
 8004386:	61fb      	str	r3, [r7, #28]
    uint32_t timeout = 100; //ms
 8004388:	2364      	movs	r3, #100	@ 0x64
 800438a:	61bb      	str	r3, [r7, #24]
    volatile float data = 0;
 800438c:	f04f 0300 	mov.w	r3, #0
 8004390:	60fb      	str	r3, [r7, #12]
    if(mode == 0) //Continuous conversion mode
 8004392:	78fb      	ldrb	r3, [r7, #3]
 8004394:	2b00      	cmp	r3, #0
 8004396:	d145      	bne.n	8004424 <ADC_Conversion+0xac>
    {
#if enable_printf
    	printf("Continuous conversion mode \n");
#endif
    	//CS LOW: Enable communication
    	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8004398:	2200      	movs	r2, #0
 800439a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800439e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80043a2:	f003 fe79 	bl	8008098 <HAL_GPIO_WritePin>
    	//time_start = HAL_GetTick() + 100;
    	//while(HAL_GetTick()<time_start);
    	HAL_SPI_Transmit(spi_struct,&READ_DATAREG, 1,timeout);
 80043a6:	69bb      	ldr	r3, [r7, #24]
 80043a8:	2201      	movs	r2, #1
 80043aa:	4959      	ldr	r1, [pc, #356]	@ (8004510 <ADC_Conversion+0x198>)
 80043ac:	6878      	ldr	r0, [r7, #4]
 80043ae:	f005 f95a 	bl	8009666 <HAL_SPI_Transmit>
    	HAL_SPI_Receive(spi_struct,spi_data, 2,timeout);
 80043b2:	f107 0114 	add.w	r1, r7, #20
 80043b6:	69bb      	ldr	r3, [r7, #24]
 80043b8:	2202      	movs	r2, #2
 80043ba:	6878      	ldr	r0, [r7, #4]
 80043bc:	f005 fac1 	bl	8009942 <HAL_SPI_Receive>
    	//CS HIGH: Disable communication
    	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 80043c0:	2201      	movs	r2, #1
 80043c2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80043c6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80043ca:	f003 fe65 	bl	8008098 <HAL_GPIO_WritePin>
    	dec_data = (spi_data[0]<<8)|spi_data[1];
 80043ce:	7d3b      	ldrb	r3, [r7, #20]
 80043d0:	021b      	lsls	r3, r3, #8
 80043d2:	b21a      	sxth	r2, r3
 80043d4:	7d7b      	ldrb	r3, [r7, #21]
 80043d6:	b21b      	sxth	r3, r3
 80043d8:	4313      	orrs	r3, r2
 80043da:	b21b      	sxth	r3, r3
 80043dc:	b29b      	uxth	r3, r3
 80043de:	827b      	strh	r3, [r7, #18]
    	data = ((float)dec_data/pow(2,N))*Vref;
 80043e0:	8a7b      	ldrh	r3, [r7, #18]
 80043e2:	b29b      	uxth	r3, r3
 80043e4:	ee07 3a90 	vmov	s15, r3
 80043e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043ec:	ee17 0a90 	vmov	r0, s15
 80043f0:	f7fc f8b2 	bl	8000558 <__aeabi_f2d>
 80043f4:	f04f 0200 	mov.w	r2, #0
 80043f8:	4b46      	ldr	r3, [pc, #280]	@ (8004514 <ADC_Conversion+0x19c>)
 80043fa:	f7fc fa2f 	bl	800085c <__aeabi_ddiv>
 80043fe:	4602      	mov	r2, r0
 8004400:	460b      	mov	r3, r1
 8004402:	4610      	mov	r0, r2
 8004404:	4619      	mov	r1, r3
 8004406:	a33e      	add	r3, pc, #248	@ (adr r3, 8004500 <ADC_Conversion+0x188>)
 8004408:	e9d3 2300 	ldrd	r2, r3, [r3]
 800440c:	f7fc f8fc 	bl	8000608 <__aeabi_dmul>
 8004410:	4602      	mov	r2, r0
 8004412:	460b      	mov	r3, r1
 8004414:	4610      	mov	r0, r2
 8004416:	4619      	mov	r1, r3
 8004418:	f7fc fbce 	bl	8000bb8 <__aeabi_d2f>
 800441c:	4603      	mov	r3, r0
 800441e:	60fb      	str	r3, [r7, #12]
#if enable_printf
        printf("Transmitted packet and received bytes: %d, data =  %f v \n",dec_data,data);
#endif
        return data;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	e065      	b.n	80044f0 <ADC_Conversion+0x178>
    }
    else if(mode == 1) //Single conversion mode
 8004424:	78fb      	ldrb	r3, [r7, #3]
 8004426:	2b01      	cmp	r3, #1
 8004428:	d157      	bne.n	80044da <ADC_Conversion+0x162>
    {
#if enable_printf
    	printf("Single conversion mode \n");
#endif
    	//CS LOW: Enable communication
    	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 800442a:	2200      	movs	r2, #0
 800442c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8004430:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004434:	f003 fe30 	bl	8008098 <HAL_GPIO_WritePin>

    	HAL_SPI_Transmit(spi_struct,single_mode_pckt, 2, timeout);
 8004438:	69bb      	ldr	r3, [r7, #24]
 800443a:	2202      	movs	r2, #2
 800443c:	4936      	ldr	r1, [pc, #216]	@ (8004518 <ADC_Conversion+0x1a0>)
 800443e:	6878      	ldr	r0, [r7, #4]
 8004440:	f005 f911 	bl	8009666 <HAL_SPI_Transmit>
    	time_start = HAL_GetTick() + 200;
 8004444:	f001 ff52 	bl	80062ec <HAL_GetTick>
 8004448:	4603      	mov	r3, r0
 800444a:	33c8      	adds	r3, #200	@ 0xc8
 800444c:	61fb      	str	r3, [r7, #28]
    	//printf("time_start : %lu, cpu time: %lu \n",time_start,HAL_GetTick());
    	while(HAL_GetTick()<time_start);
 800444e:	bf00      	nop
 8004450:	f001 ff4c 	bl	80062ec <HAL_GetTick>
 8004454:	4602      	mov	r2, r0
 8004456:	69fb      	ldr	r3, [r7, #28]
 8004458:	4293      	cmp	r3, r2
 800445a:	d8f9      	bhi.n	8004450 <ADC_Conversion+0xd8>
    	//Get the result of conversion
    	HAL_SPI_Transmit(spi_struct,&READ_DATAREG, 1,timeout);
 800445c:	69bb      	ldr	r3, [r7, #24]
 800445e:	2201      	movs	r2, #1
 8004460:	492b      	ldr	r1, [pc, #172]	@ (8004510 <ADC_Conversion+0x198>)
 8004462:	6878      	ldr	r0, [r7, #4]
 8004464:	f005 f8ff 	bl	8009666 <HAL_SPI_Transmit>
    	HAL_SPI_Receive(spi_struct,spi_data, 2,timeout);
 8004468:	f107 0114 	add.w	r1, r7, #20
 800446c:	69bb      	ldr	r3, [r7, #24]
 800446e:	2202      	movs	r2, #2
 8004470:	6878      	ldr	r0, [r7, #4]
 8004472:	f005 fa66 	bl	8009942 <HAL_SPI_Receive>
    	//HAL_SPI_TransmitReceive(spi_struct,&READ_DATAREG,spi_data,1,timeout+100);
    	//CS HIGH: Disable communication
    	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8004476:	2201      	movs	r2, #1
 8004478:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800447c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004480:	f003 fe0a 	bl	8008098 <HAL_GPIO_WritePin>
    	//Process result of conversuion
   		dec_data = (spi_data[0]<<8)|spi_data[1];
 8004484:	7d3b      	ldrb	r3, [r7, #20]
 8004486:	021b      	lsls	r3, r3, #8
 8004488:	b21a      	sxth	r2, r3
 800448a:	7d7b      	ldrb	r3, [r7, #21]
 800448c:	b21b      	sxth	r3, r3
 800448e:	4313      	orrs	r3, r2
 8004490:	b21b      	sxth	r3, r3
 8004492:	b29b      	uxth	r3, r3
 8004494:	827b      	strh	r3, [r7, #18]
   		data = (((float)dec_data)/(pow(2,N)-1))*Vref;
 8004496:	8a7b      	ldrh	r3, [r7, #18]
 8004498:	b29b      	uxth	r3, r3
 800449a:	ee07 3a90 	vmov	s15, r3
 800449e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044a2:	ee17 0a90 	vmov	r0, s15
 80044a6:	f7fc f857 	bl	8000558 <__aeabi_f2d>
 80044aa:	a317      	add	r3, pc, #92	@ (adr r3, 8004508 <ADC_Conversion+0x190>)
 80044ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044b0:	f7fc f9d4 	bl	800085c <__aeabi_ddiv>
 80044b4:	4602      	mov	r2, r0
 80044b6:	460b      	mov	r3, r1
 80044b8:	4610      	mov	r0, r2
 80044ba:	4619      	mov	r1, r3
 80044bc:	a310      	add	r3, pc, #64	@ (adr r3, 8004500 <ADC_Conversion+0x188>)
 80044be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044c2:	f7fc f8a1 	bl	8000608 <__aeabi_dmul>
 80044c6:	4602      	mov	r2, r0
 80044c8:	460b      	mov	r3, r1
 80044ca:	4610      	mov	r0, r2
 80044cc:	4619      	mov	r1, r3
 80044ce:	f7fc fb73 	bl	8000bb8 <__aeabi_d2f>
 80044d2:	4603      	mov	r3, r0
 80044d4:	60fb      	str	r3, [r7, #12]
#if enable_printf
   		printf("Transmitted packet and received bytes: %d, data =  %f v \n",dec_data,data);
#endif
   		return data;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	e00a      	b.n	80044f0 <ADC_Conversion+0x178>
    }
    else if(mode == 2) //Continuous read Mode
 80044da:	78fb      	ldrb	r3, [r7, #3]
 80044dc:	2b02      	cmp	r3, #2
 80044de:	d102      	bne.n	80044e6 <ADC_Conversion+0x16e>
    {
#if enable_printf
    	printf("Continuous read mode \n");
#endif
		return 1;
 80044e0:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80044e4:	e004      	b.n	80044f0 <ADC_Conversion+0x178>
    }
    else{
        //Stampa che non è stato inserito il mode corretto perchè deve essere compreso tra 0 e 2
    	printf("Error: mode value must between 0 and 2!!! \n");
 80044e6:	480d      	ldr	r0, [pc, #52]	@ (800451c <ADC_Conversion+0x1a4>)
 80044e8:	f00b feb8 	bl	801025c <puts>

    	return 0;
 80044ec:	f04f 0300 	mov.w	r3, #0
    }

}
 80044f0:	ee07 3a90 	vmov	s15, r3
 80044f4:	eeb0 0a67 	vmov.f32	s0, s15
 80044f8:	3720      	adds	r7, #32
 80044fa:	46bd      	mov	sp, r7
 80044fc:	bd80      	pop	{r7, pc}
 80044fe:	bf00      	nop
 8004500:	66666666 	.word	0x66666666
 8004504:	400a6666 	.word	0x400a6666
 8004508:	00000000 	.word	0x00000000
 800450c:	40efffe0 	.word	0x40efffe0
 8004510:	2000000a 	.word	0x2000000a
 8004514:	40f00000 	.word	0x40f00000
 8004518:	20000008 	.word	0x20000008
 800451c:	080127a0 	.word	0x080127a0

08004520 <voltage_to_temperature_conv>:

void voltage_to_temperature_conv(float value,Temp_values *s1,uint8_t i){
 8004520:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004524:	b084      	sub	sp, #16
 8004526:	af00      	add	r7, sp, #0
 8004528:	ed87 0a03 	vstr	s0, [r7, #12]
 800452c:	60b8      	str	r0, [r7, #8]
 800452e:	460b      	mov	r3, r1
 8004530:	71fb      	strb	r3, [r7, #7]

	//printf("Value: %f, B: %f, Vdd: %f, R_25: %f, R: %f \n",value,s1->values.B,s1->values.Vdd,s1->values.R_25,s1->values.R[i]);
	s1->temp[i] = ((298.15 * s1->values.B)/(s1->values.B - (298.15*(ln(((s1->values.Vdd/value)-1)*(s1->values.R_25/s1->values.R[i])))))) - 273.15;
 8004532:	68bb      	ldr	r3, [r7, #8]
 8004534:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004536:	4618      	mov	r0, r3
 8004538:	f7fc f80e 	bl	8000558 <__aeabi_f2d>
 800453c:	a330      	add	r3, pc, #192	@ (adr r3, 8004600 <voltage_to_temperature_conv+0xe0>)
 800453e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004542:	f7fc f861 	bl	8000608 <__aeabi_dmul>
 8004546:	4602      	mov	r2, r0
 8004548:	460b      	mov	r3, r1
 800454a:	4690      	mov	r8, r2
 800454c:	4699      	mov	r9, r3
 800454e:	68bb      	ldr	r3, [r7, #8]
 8004550:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004552:	4618      	mov	r0, r3
 8004554:	f7fc f800 	bl	8000558 <__aeabi_f2d>
 8004558:	4604      	mov	r4, r0
 800455a:	460d      	mov	r5, r1
 800455c:	68bb      	ldr	r3, [r7, #8]
 800455e:	edd3 6a12 	vldr	s13, [r3, #72]	@ 0x48
 8004562:	ed97 7a03 	vldr	s14, [r7, #12]
 8004566:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800456a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800456e:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8004572:	68bb      	ldr	r3, [r7, #8]
 8004574:	ed93 6a08 	vldr	s12, [r3, #32]
 8004578:	79fb      	ldrb	r3, [r7, #7]
 800457a:	68ba      	ldr	r2, [r7, #8]
 800457c:	3308      	adds	r3, #8
 800457e:	009b      	lsls	r3, r3, #2
 8004580:	4413      	add	r3, r2
 8004582:	3304      	adds	r3, #4
 8004584:	edd3 6a00 	vldr	s13, [r3]
 8004588:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800458c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004590:	ee17 0a90 	vmov	r0, s15
 8004594:	f7fb ffe0 	bl	8000558 <__aeabi_f2d>
 8004598:	4602      	mov	r2, r0
 800459a:	460b      	mov	r3, r1
 800459c:	ec43 2b10 	vmov	d0, r2, r3
 80045a0:	f00d fd16 	bl	8011fd0 <log>
 80045a4:	ec51 0b10 	vmov	r0, r1, d0
 80045a8:	a315      	add	r3, pc, #84	@ (adr r3, 8004600 <voltage_to_temperature_conv+0xe0>)
 80045aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045ae:	f7fc f82b 	bl	8000608 <__aeabi_dmul>
 80045b2:	4602      	mov	r2, r0
 80045b4:	460b      	mov	r3, r1
 80045b6:	4620      	mov	r0, r4
 80045b8:	4629      	mov	r1, r5
 80045ba:	f7fb fe6d 	bl	8000298 <__aeabi_dsub>
 80045be:	4602      	mov	r2, r0
 80045c0:	460b      	mov	r3, r1
 80045c2:	4640      	mov	r0, r8
 80045c4:	4649      	mov	r1, r9
 80045c6:	f7fc f949 	bl	800085c <__aeabi_ddiv>
 80045ca:	4602      	mov	r2, r0
 80045cc:	460b      	mov	r3, r1
 80045ce:	4610      	mov	r0, r2
 80045d0:	4619      	mov	r1, r3
 80045d2:	a30d      	add	r3, pc, #52	@ (adr r3, 8004608 <voltage_to_temperature_conv+0xe8>)
 80045d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045d8:	f7fb fe5e 	bl	8000298 <__aeabi_dsub>
 80045dc:	4602      	mov	r2, r0
 80045de:	460b      	mov	r3, r1
 80045e0:	79fc      	ldrb	r4, [r7, #7]
 80045e2:	4610      	mov	r0, r2
 80045e4:	4619      	mov	r1, r3
 80045e6:	f7fc fae7 	bl	8000bb8 <__aeabi_d2f>
 80045ea:	4601      	mov	r1, r0
 80045ec:	68ba      	ldr	r2, [r7, #8]
 80045ee:	00a3      	lsls	r3, r4, #2
 80045f0:	4413      	add	r3, r2
 80045f2:	6019      	str	r1, [r3, #0]
	//printf("Temperature: %f \n",s1->temp[i]);
}
 80045f4:	bf00      	nop
 80045f6:	3710      	adds	r7, #16
 80045f8:	46bd      	mov	sp, r7
 80045fa:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80045fe:	bf00      	nop
 8004600:	66666666 	.word	0x66666666
 8004604:	4072a266 	.word	0x4072a266
 8004608:	66666666 	.word	0x66666666
 800460c:	40711266 	.word	0x40711266

08004610 <get_temperatures>:

void get_temperatures(SPI_HandleTypeDef *spi_struct,Temp_values *temp_struct, uint8_t counter)
{
 8004610:	b580      	push	{r7, lr}
 8004612:	b086      	sub	sp, #24
 8004614:	af00      	add	r7, sp, #0
 8004616:	60f8      	str	r0, [r7, #12]
 8004618:	60b9      	str	r1, [r7, #8]
 800461a:	4613      	mov	r3, r2
 800461c:	71fb      	strb	r3, [r7, #7]
	volatile float conv_result;
	switch(counter)
 800461e:	79fb      	ldrb	r3, [r7, #7]
 8004620:	2b07      	cmp	r3, #7
 8004622:	f200 80b3 	bhi.w	800478c <get_temperatures+0x17c>
 8004626:	a201      	add	r2, pc, #4	@ (adr r2, 800462c <get_temperatures+0x1c>)
 8004628:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800462c:	0800464d 	.word	0x0800464d
 8004630:	08004675 	.word	0x08004675
 8004634:	0800469d 	.word	0x0800469d
 8004638:	080046c5 	.word	0x080046c5
 800463c:	080046ed 	.word	0x080046ed
 8004640:	08004715 	.word	0x08004715
 8004644:	0800473d 	.word	0x0800473d
 8004648:	08004765 	.word	0x08004765
	{
		case 0:

		select_input(0);
 800464c:	2000      	movs	r0, #0
 800464e:	f7ff fddb 	bl	8004208 <select_input>
		//Single conversion mode
		conv_result = ADC_Conversion(spi_struct,1);
 8004652:	2101      	movs	r1, #1
 8004654:	68f8      	ldr	r0, [r7, #12]
 8004656:	f7ff fe8f 	bl	8004378 <ADC_Conversion>
 800465a:	eef0 7a40 	vmov.f32	s15, s0
 800465e:	edc7 7a05 	vstr	s15, [r7, #20]
		voltage_to_temperature_conv(conv_result,temp_struct,0);
 8004662:	edd7 7a05 	vldr	s15, [r7, #20]
 8004666:	2100      	movs	r1, #0
 8004668:	68b8      	ldr	r0, [r7, #8]
 800466a:	eeb0 0a67 	vmov.f32	s0, s15
 800466e:	f7ff ff57 	bl	8004520 <voltage_to_temperature_conv>
#if enable_printf
		printf("Sensors 1 Temp : %.2f \n",temp_struct->temp[0]);
#endif
		//HAL_Delay(100);

		break;
 8004672:	e08c      	b.n	800478e <get_temperatures+0x17e>

		case 1:

		select_input(1);
 8004674:	2001      	movs	r0, #1
 8004676:	f7ff fdc7 	bl	8004208 <select_input>
		//Single conversion mode
		conv_result = ADC_Conversion(spi_struct,1);
 800467a:	2101      	movs	r1, #1
 800467c:	68f8      	ldr	r0, [r7, #12]
 800467e:	f7ff fe7b 	bl	8004378 <ADC_Conversion>
 8004682:	eef0 7a40 	vmov.f32	s15, s0
 8004686:	edc7 7a05 	vstr	s15, [r7, #20]
		voltage_to_temperature_conv(conv_result,temp_struct,1);
 800468a:	edd7 7a05 	vldr	s15, [r7, #20]
 800468e:	2101      	movs	r1, #1
 8004690:	68b8      	ldr	r0, [r7, #8]
 8004692:	eeb0 0a67 	vmov.f32	s0, s15
 8004696:	f7ff ff43 	bl	8004520 <voltage_to_temperature_conv>
#if enable_printf
		printf("Sensors 2 Temp : %.2f \n",temp_struct->temp[1]);
#endif
		//HAL_Delay(100);

		break;
 800469a:	e078      	b.n	800478e <get_temperatures+0x17e>

		case 2:

		select_input(2);
 800469c:	2002      	movs	r0, #2
 800469e:	f7ff fdb3 	bl	8004208 <select_input>
		//Single conversion mode
		conv_result = ADC_Conversion(spi_struct,1);
 80046a2:	2101      	movs	r1, #1
 80046a4:	68f8      	ldr	r0, [r7, #12]
 80046a6:	f7ff fe67 	bl	8004378 <ADC_Conversion>
 80046aa:	eef0 7a40 	vmov.f32	s15, s0
 80046ae:	edc7 7a05 	vstr	s15, [r7, #20]
		voltage_to_temperature_conv(conv_result,temp_struct,2);
 80046b2:	edd7 7a05 	vldr	s15, [r7, #20]
 80046b6:	2102      	movs	r1, #2
 80046b8:	68b8      	ldr	r0, [r7, #8]
 80046ba:	eeb0 0a67 	vmov.f32	s0, s15
 80046be:	f7ff ff2f 	bl	8004520 <voltage_to_temperature_conv>
#if enable_printf
		printf("Sensors 3 Temp : %.2f \n",temp_struct->temp[2]);
#endif
		//HAL_Delay(100);

		break;
 80046c2:	e064      	b.n	800478e <get_temperatures+0x17e>

		case 3:

		select_input(3);
 80046c4:	2003      	movs	r0, #3
 80046c6:	f7ff fd9f 	bl	8004208 <select_input>
		//Single conversion mode
		conv_result = ADC_Conversion(spi_struct,1);
 80046ca:	2101      	movs	r1, #1
 80046cc:	68f8      	ldr	r0, [r7, #12]
 80046ce:	f7ff fe53 	bl	8004378 <ADC_Conversion>
 80046d2:	eef0 7a40 	vmov.f32	s15, s0
 80046d6:	edc7 7a05 	vstr	s15, [r7, #20]
		voltage_to_temperature_conv(conv_result,temp_struct,3);
 80046da:	edd7 7a05 	vldr	s15, [r7, #20]
 80046de:	2103      	movs	r1, #3
 80046e0:	68b8      	ldr	r0, [r7, #8]
 80046e2:	eeb0 0a67 	vmov.f32	s0, s15
 80046e6:	f7ff ff1b 	bl	8004520 <voltage_to_temperature_conv>
#if enable_printf
		printf("Sensors 4 Temp : %.2f \n",temp_struct->temp[3]);
#endif
		//HAL_Delay(100);
		break;
 80046ea:	e050      	b.n	800478e <get_temperatures+0x17e>

		case 4:

		select_input(4);
 80046ec:	2004      	movs	r0, #4
 80046ee:	f7ff fd8b 	bl	8004208 <select_input>
		//Single conversion mode
		conv_result = ADC_Conversion(spi_struct,1);
 80046f2:	2101      	movs	r1, #1
 80046f4:	68f8      	ldr	r0, [r7, #12]
 80046f6:	f7ff fe3f 	bl	8004378 <ADC_Conversion>
 80046fa:	eef0 7a40 	vmov.f32	s15, s0
 80046fe:	edc7 7a05 	vstr	s15, [r7, #20]
		voltage_to_temperature_conv(conv_result,temp_struct,4);
 8004702:	edd7 7a05 	vldr	s15, [r7, #20]
 8004706:	2104      	movs	r1, #4
 8004708:	68b8      	ldr	r0, [r7, #8]
 800470a:	eeb0 0a67 	vmov.f32	s0, s15
 800470e:	f7ff ff07 	bl	8004520 <voltage_to_temperature_conv>
#if enable_printf
		printf("Sensors 5 Temp : %.2f \n",temp_struct->temp[4]);
#endif
		//HAL_Delay(100);

		break;
 8004712:	e03c      	b.n	800478e <get_temperatures+0x17e>
		case 5:

		select_input(5);
 8004714:	2005      	movs	r0, #5
 8004716:	f7ff fd77 	bl	8004208 <select_input>
		//Single conversion mode
		conv_result = ADC_Conversion(spi_struct,1);
 800471a:	2101      	movs	r1, #1
 800471c:	68f8      	ldr	r0, [r7, #12]
 800471e:	f7ff fe2b 	bl	8004378 <ADC_Conversion>
 8004722:	eef0 7a40 	vmov.f32	s15, s0
 8004726:	edc7 7a05 	vstr	s15, [r7, #20]
		voltage_to_temperature_conv(conv_result,temp_struct,5);
 800472a:	edd7 7a05 	vldr	s15, [r7, #20]
 800472e:	2105      	movs	r1, #5
 8004730:	68b8      	ldr	r0, [r7, #8]
 8004732:	eeb0 0a67 	vmov.f32	s0, s15
 8004736:	f7ff fef3 	bl	8004520 <voltage_to_temperature_conv>
#if enable_printf
		printf("Sensors 6 Temp : %.2f \n",temp_struct->temp[5]);
#endif
		//HAL_Delay(100);

		break;
 800473a:	e028      	b.n	800478e <get_temperatures+0x17e>

		case 6:

		select_input(6);
 800473c:	2006      	movs	r0, #6
 800473e:	f7ff fd63 	bl	8004208 <select_input>
		//Single conversion mode
		conv_result = ADC_Conversion(spi_struct,1);
 8004742:	2101      	movs	r1, #1
 8004744:	68f8      	ldr	r0, [r7, #12]
 8004746:	f7ff fe17 	bl	8004378 <ADC_Conversion>
 800474a:	eef0 7a40 	vmov.f32	s15, s0
 800474e:	edc7 7a05 	vstr	s15, [r7, #20]
		voltage_to_temperature_conv(conv_result,temp_struct,6);
 8004752:	edd7 7a05 	vldr	s15, [r7, #20]
 8004756:	2106      	movs	r1, #6
 8004758:	68b8      	ldr	r0, [r7, #8]
 800475a:	eeb0 0a67 	vmov.f32	s0, s15
 800475e:	f7ff fedf 	bl	8004520 <voltage_to_temperature_conv>
#if enable_printf
		printf("Sensors 7 Temp : %.2f \n",temp_struct->temp[6]);
#endif
		//HAL_Delay(100);

		break;
 8004762:	e014      	b.n	800478e <get_temperatures+0x17e>

		case 7:

		select_input(7);
 8004764:	2007      	movs	r0, #7
 8004766:	f7ff fd4f 	bl	8004208 <select_input>
		//Single conversion mode
		conv_result = ADC_Conversion(spi_struct,1);
 800476a:	2101      	movs	r1, #1
 800476c:	68f8      	ldr	r0, [r7, #12]
 800476e:	f7ff fe03 	bl	8004378 <ADC_Conversion>
 8004772:	eef0 7a40 	vmov.f32	s15, s0
 8004776:	edc7 7a05 	vstr	s15, [r7, #20]
		voltage_to_temperature_conv(conv_result,temp_struct,7);
 800477a:	edd7 7a05 	vldr	s15, [r7, #20]
 800477e:	2107      	movs	r1, #7
 8004780:	68b8      	ldr	r0, [r7, #8]
 8004782:	eeb0 0a67 	vmov.f32	s0, s15
 8004786:	f7ff fecb 	bl	8004520 <voltage_to_temperature_conv>
#if enable_printf
		printf("Sensors 8 Temp : %.2f \n",temp_struct->temp[7]);
#endif
		//HAL_Delay(100);

		break;
 800478a:	e000      	b.n	800478e <get_temperatures+0x17e>

		default:
#if enable_printf
		printf("CHECK TASK: get_temperatures -> Nothing is happening");
#endif
		break;
 800478c:	bf00      	nop

	}

}
 800478e:	bf00      	nop
 8004790:	3718      	adds	r7, #24
 8004792:	46bd      	mov	sp, r7
 8004794:	bd80      	pop	{r7, pc}
 8004796:	bf00      	nop

08004798 <num16ToNet>:
	.policy=hard,
};

// NETWORK ORDERING -----------------------------------------------------------

void num16ToNet(uint8_t net[2], uint16_t num){
 8004798:	b480      	push	{r7}
 800479a:	b083      	sub	sp, #12
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
 80047a0:	460b      	mov	r3, r1
 80047a2:	807b      	strh	r3, [r7, #2]
    net[0]=(uint8_t)((num>>8) & 0xFF);
 80047a4:	887b      	ldrh	r3, [r7, #2]
 80047a6:	0a1b      	lsrs	r3, r3, #8
 80047a8:	b29b      	uxth	r3, r3
 80047aa:	b2da      	uxtb	r2, r3
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	701a      	strb	r2, [r3, #0]
    net[1]=(uint8_t)(num & 0xFF);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	3301      	adds	r3, #1
 80047b4:	887a      	ldrh	r2, [r7, #2]
 80047b6:	b2d2      	uxtb	r2, r2
 80047b8:	701a      	strb	r2, [r3, #0]
    return;
 80047ba:	bf00      	nop
}
 80047bc:	370c      	adds	r7, #12
 80047be:	46bd      	mov	sp, r7
 80047c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c4:	4770      	bx	lr

080047c6 <netToNum16>:

uint16_t netToNum16(uint8_t net[2]){
 80047c6:	b480      	push	{r7}
 80047c8:	b083      	sub	sp, #12
 80047ca:	af00      	add	r7, sp, #0
 80047cc:	6078      	str	r0, [r7, #4]
    return ((uint16_t)net[0]<<8) | ((uint16_t)net[1]);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	781b      	ldrb	r3, [r3, #0]
 80047d2:	021b      	lsls	r3, r3, #8
 80047d4:	b21a      	sxth	r2, r3
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	3301      	adds	r3, #1
 80047da:	781b      	ldrb	r3, [r3, #0]
 80047dc:	b21b      	sxth	r3, r3
 80047de:	4313      	orrs	r3, r2
 80047e0:	b21b      	sxth	r3, r3
 80047e2:	b29b      	uxth	r3, r3
}
 80047e4:	4618      	mov	r0, r3
 80047e6:	370c      	adds	r7, #12
 80047e8:	46bd      	mov	sp, r7
 80047ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ee:	4770      	bx	lr

080047f0 <doByteStuffing>:

// STUFFING -------------------------------------------------------------------

uint8_t doByteStuffing(circular_buffer_handle* data){
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b086      	sub	sp, #24
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
    if(data==NULL || data->buff==NULL || data->buffLen==0 || data->elemNum==0 || data->elemNum==data->buffLen) return 0;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d011      	beq.n	8004822 <doByteStuffing+0x32>
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	2b00      	cmp	r3, #0
 8004804:	d00d      	beq.n	8004822 <doByteStuffing+0x32>
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	685b      	ldr	r3, [r3, #4]
 800480a:	2b00      	cmp	r3, #0
 800480c:	d009      	beq.n	8004822 <doByteStuffing+0x32>
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	689b      	ldr	r3, [r3, #8]
 8004812:	2b00      	cmp	r3, #0
 8004814:	d005      	beq.n	8004822 <doByteStuffing+0x32>
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	689a      	ldr	r2, [r3, #8]
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	685b      	ldr	r3, [r3, #4]
 800481e:	429a      	cmp	r2, r3
 8004820:	d101      	bne.n	8004826 <doByteStuffing+0x36>
 8004822:	2300      	movs	r3, #0
 8004824:	e038      	b.n	8004898 <doByteStuffing+0xa8>

    uint32_t elemNum=data->elemNum;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	689b      	ldr	r3, [r3, #8]
 800482a:	617b      	str	r3, [r7, #20]

    while(elemNum){
 800482c:	e030      	b.n	8004890 <doByteStuffing+0xa0>
        uint8_t tmpByte;
        uint32_t numByte;
        //pull byte from buffer head
        cBuffPull(data,&tmpByte,1,0);
 800482e:	f107 010f 	add.w	r1, r7, #15
 8004832:	2300      	movs	r3, #0
 8004834:	2201      	movs	r2, #1
 8004836:	6878      	ldr	r0, [r7, #4]
 8004838:	f7fd ff32 	bl	80026a0 <cBuffPull>
        //check if character needs escaping
        if(tmpByte==FRAME_FLAG || tmpByte == ESCAPE_FLAG){
 800483c:	7bfb      	ldrb	r3, [r7, #15]
 800483e:	2b7e      	cmp	r3, #126	@ 0x7e
 8004840:	d002      	beq.n	8004848 <doByteStuffing+0x58>
 8004842:	7bfb      	ldrb	r3, [r7, #15]
 8004844:	2b7d      	cmp	r3, #125	@ 0x7d
 8004846:	d113      	bne.n	8004870 <doByteStuffing+0x80>
            uint8_t escape=ESCAPE_FLAG;
 8004848:	237d      	movs	r3, #125	@ 0x7d
 800484a:	73bb      	strb	r3, [r7, #14]
            //try pushing escape flag
            numByte=cBuffPushToFill(data,&escape,1,1);
 800484c:	f107 010e 	add.w	r1, r7, #14
 8004850:	2301      	movs	r3, #1
 8004852:	2201      	movs	r2, #1
 8004854:	6878      	ldr	r0, [r7, #4]
 8004856:	f7fd fef6 	bl	8002646 <cBuffPushToFill>
 800485a:	6138      	str	r0, [r7, #16]
            if(numByte==0) return 0; //buffer is full, operation failed
 800485c:	693b      	ldr	r3, [r7, #16]
 800485e:	2b00      	cmp	r3, #0
 8004860:	d101      	bne.n	8004866 <doByteStuffing+0x76>
 8004862:	2300      	movs	r3, #0
 8004864:	e018      	b.n	8004898 <doByteStuffing+0xa8>
            //flip 5th byte bit
            tmpByte=INVERTBIT5(tmpByte);
 8004866:	7bfb      	ldrb	r3, [r7, #15]
 8004868:	f083 0320 	eor.w	r3, r3, #32
 800486c:	b2db      	uxtb	r3, r3
 800486e:	73fb      	strb	r3, [r7, #15]
        }
        //try pushing byte
        numByte=cBuffPushToFill(data,&tmpByte,1,1);
 8004870:	f107 010f 	add.w	r1, r7, #15
 8004874:	2301      	movs	r3, #1
 8004876:	2201      	movs	r2, #1
 8004878:	6878      	ldr	r0, [r7, #4]
 800487a:	f7fd fee4 	bl	8002646 <cBuffPushToFill>
 800487e:	6138      	str	r0, [r7, #16]
        if(numByte==0) return 0; //buffer is full, operation failed
 8004880:	693b      	ldr	r3, [r7, #16]
 8004882:	2b00      	cmp	r3, #0
 8004884:	d101      	bne.n	800488a <doByteStuffing+0x9a>
 8004886:	2300      	movs	r3, #0
 8004888:	e006      	b.n	8004898 <doByteStuffing+0xa8>

        //decrement remaining bytes
        elemNum--;
 800488a:	697b      	ldr	r3, [r7, #20]
 800488c:	3b01      	subs	r3, #1
 800488e:	617b      	str	r3, [r7, #20]
    while(elemNum){
 8004890:	697b      	ldr	r3, [r7, #20]
 8004892:	2b00      	cmp	r3, #0
 8004894:	d1cb      	bne.n	800482e <doByteStuffing+0x3e>
    }

    return 1;
 8004896:	2301      	movs	r3, #1
}
 8004898:	4618      	mov	r0, r3
 800489a:	3718      	adds	r7, #24
 800489c:	46bd      	mov	sp, r7
 800489e:	bd80      	pop	{r7, pc}

080048a0 <undoByteStuffing>:

uint8_t undoByteStuffing(circular_buffer_handle* data){
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b084      	sub	sp, #16
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
    if(data==NULL || data->buff==NULL || data->buffLen==0 || data->elemNum==0) return 0;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d00b      	beq.n	80048c6 <undoByteStuffing+0x26>
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d007      	beq.n	80048c6 <undoByteStuffing+0x26>
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	685b      	ldr	r3, [r3, #4]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d003      	beq.n	80048c6 <undoByteStuffing+0x26>
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	689b      	ldr	r3, [r3, #8]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d101      	bne.n	80048ca <undoByteStuffing+0x2a>
 80048c6:	2300      	movs	r3, #0
 80048c8:	e044      	b.n	8004954 <undoByteStuffing+0xb4>

    uint32_t elemNum=data->elemNum;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	689b      	ldr	r3, [r3, #8]
 80048ce:	60fb      	str	r3, [r7, #12]

    while(elemNum){
 80048d0:	e03c      	b.n	800494c <undoByteStuffing+0xac>
        uint8_t tmpByte;
        //pull byte from buffer head
        cBuffPull(data,&tmpByte,1,0);
 80048d2:	f107 010b 	add.w	r1, r7, #11
 80048d6:	2300      	movs	r3, #0
 80048d8:	2201      	movs	r2, #1
 80048da:	6878      	ldr	r0, [r7, #4]
 80048dc:	f7fd fee0 	bl	80026a0 <cBuffPull>
        elemNum--;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	3b01      	subs	r3, #1
 80048e4:	60fb      	str	r3, [r7, #12]
        if(tmpByte == FRAME_FLAG) return 0; //error, cannot have frame flag inside payload
 80048e6:	7afb      	ldrb	r3, [r7, #11]
 80048e8:	2b7e      	cmp	r3, #126	@ 0x7e
 80048ea:	d101      	bne.n	80048f0 <undoByteStuffing+0x50>
 80048ec:	2300      	movs	r3, #0
 80048ee:	e031      	b.n	8004954 <undoByteStuffing+0xb4>
        //check if it's an escape byte
        if(tmpByte == ESCAPE_FLAG){
 80048f0:	7afb      	ldrb	r3, [r7, #11]
 80048f2:	2b7d      	cmp	r3, #125	@ 0x7d
 80048f4:	d123      	bne.n	800493e <undoByteStuffing+0x9e>
			//if buffer is over we simply delete the escape flag
			//(this shouldn't happen in a properly stuffed buffer)
            if(elemNum==0) return 0;
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d101      	bne.n	8004900 <undoByteStuffing+0x60>
 80048fc:	2300      	movs	r3, #0
 80048fe:	e029      	b.n	8004954 <undoByteStuffing+0xb4>

            //pull byte from buffer head
            cBuffPull(data,&tmpByte,1,0);
 8004900:	f107 010b 	add.w	r1, r7, #11
 8004904:	2300      	movs	r3, #0
 8004906:	2201      	movs	r2, #1
 8004908:	6878      	ldr	r0, [r7, #4]
 800490a:	f7fd fec9 	bl	80026a0 <cBuffPull>
            elemNum--;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	3b01      	subs	r3, #1
 8004912:	60fb      	str	r3, [r7, #12]

            //flip 5th byte bit
            tmpByte=INVERTBIT5(tmpByte);
 8004914:	7afb      	ldrb	r3, [r7, #11]
 8004916:	f083 0320 	eor.w	r3, r3, #32
 800491a:	b2db      	uxtb	r3, r3
 800491c:	72fb      	strb	r3, [r7, #11]

            //if a 7d is encountered without escaping anything
            if(tmpByte != ESCAPE_FLAG && tmpByte != FRAME_FLAG) return 0;
 800491e:	7afb      	ldrb	r3, [r7, #11]
 8004920:	2b7d      	cmp	r3, #125	@ 0x7d
 8004922:	d004      	beq.n	800492e <undoByteStuffing+0x8e>
 8004924:	7afb      	ldrb	r3, [r7, #11]
 8004926:	2b7e      	cmp	r3, #126	@ 0x7e
 8004928:	d001      	beq.n	800492e <undoByteStuffing+0x8e>
 800492a:	2300      	movs	r3, #0
 800492c:	e012      	b.n	8004954 <undoByteStuffing+0xb4>

            //push byte on tail
            cBuffPushToFill(data,&tmpByte,1,1);
 800492e:	f107 010b 	add.w	r1, r7, #11
 8004932:	2301      	movs	r3, #1
 8004934:	2201      	movs	r2, #1
 8004936:	6878      	ldr	r0, [r7, #4]
 8004938:	f7fd fe85 	bl	8002646 <cBuffPushToFill>
 800493c:	e006      	b.n	800494c <undoByteStuffing+0xac>

        }else{
			//push byte on tail
			cBuffPushToFill(data,&tmpByte,1,1);
 800493e:	f107 010b 	add.w	r1, r7, #11
 8004942:	2301      	movs	r3, #1
 8004944:	2201      	movs	r2, #1
 8004946:	6878      	ldr	r0, [r7, #4]
 8004948:	f7fd fe7d 	bl	8002646 <cBuffPushToFill>
    while(elemNum){
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	2b00      	cmp	r3, #0
 8004950:	d1bf      	bne.n	80048d2 <undoByteStuffing+0x32>
		}
    }
    
    return 1;
 8004952:	2301      	movs	r3, #1
}
 8004954:	4618      	mov	r0, r3
 8004956:	3710      	adds	r7, #16
 8004958:	46bd      	mov	sp, r7
 800495a:	bd80      	pop	{r7, pc}

0800495c <computeCRCwithLUT>:
0xcb7d, 0xdb5c, 0xeb3f, 0xfb1e, 0x8bf9, 0x9bd8, 0xabbb, 0xbb9a, 0x4a75, 0x5a54, 0x6a37, 0x7a16, 0x0af1, 0x1ad0, 0x2ab3, 0x3a92,
0xfd2e, 0xed0f, 0xdd6c, 0xcd4d, 0xbdaa, 0xad8b, 0x9de8, 0x8dc9, 0x7c26, 0x6c07, 0x5c64, 0x4c45, 0x3ca2, 0x2c83, 0x1ce0, 0x0cc1,
0xef1f, 0xff3e, 0xcf5d, 0xdf7c, 0xaf9b, 0xbfba, 0x8fd9, 0x9ff8, 0x6e17, 0x7e36, 0x4e55, 0x5e74, 0x2e93, 0x3eb2, 0x0ed1, 0x1ef0,
};

uint16_t computeCRCwithLUT(circular_buffer_handle* dataBuff){
 800495c:	b580      	push	{r7, lr}
 800495e:	b086      	sub	sp, #24
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
	if(dataBuff==NULL || dataBuff->buff==NULL) return 0;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2b00      	cmp	r3, #0
 8004968:	d003      	beq.n	8004972 <computeCRCwithLUT+0x16>
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	2b00      	cmp	r3, #0
 8004970:	d101      	bne.n	8004976 <computeCRCwithLUT+0x1a>
 8004972:	2300      	movs	r3, #0
 8004974:	e02e      	b.n	80049d4 <computeCRCwithLUT+0x78>

	const uint16_t initVal=CRC_INITIAL;
 8004976:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800497a:	81fb      	strh	r3, [r7, #14]

	uint16_t crc=initVal;
 800497c:	89fb      	ldrh	r3, [r7, #14]
 800497e:	82fb      	strh	r3, [r7, #22]

	for(uint32_t b=0;b<dataBuff->elemNum;b++){
 8004980:	2300      	movs	r3, #0
 8004982:	613b      	str	r3, [r7, #16]
 8004984:	e020      	b.n	80049c8 <computeCRCwithLUT+0x6c>
		uint16_t byte=((uint16_t)cBuffReadByte(dataBuff,0,b));
 8004986:	693a      	ldr	r2, [r7, #16]
 8004988:	2100      	movs	r1, #0
 800498a:	6878      	ldr	r0, [r7, #4]
 800498c:	f7fe f88a 	bl	8002aa4 <cBuffReadByte>
 8004990:	4603      	mov	r3, r0
 8004992:	81bb      	strh	r3, [r7, #12]

		crc=(byte<<8) ^ crc;
 8004994:	89bb      	ldrh	r3, [r7, #12]
 8004996:	021b      	lsls	r3, r3, #8
 8004998:	b21a      	sxth	r2, r3
 800499a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800499e:	4053      	eors	r3, r2
 80049a0:	b21b      	sxth	r3, r3
 80049a2:	82fb      	strh	r3, [r7, #22]

		crc=(crc<<8) ^ CRCLUT1021[(uint8_t) (crc>>8)];
 80049a4:	8afb      	ldrh	r3, [r7, #22]
 80049a6:	021b      	lsls	r3, r3, #8
 80049a8:	b21a      	sxth	r2, r3
 80049aa:	8afb      	ldrh	r3, [r7, #22]
 80049ac:	0a1b      	lsrs	r3, r3, #8
 80049ae:	b29b      	uxth	r3, r3
 80049b0:	b2db      	uxtb	r3, r3
 80049b2:	4619      	mov	r1, r3
 80049b4:	4b09      	ldr	r3, [pc, #36]	@ (80049dc <computeCRCwithLUT+0x80>)
 80049b6:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 80049ba:	b21b      	sxth	r3, r3
 80049bc:	4053      	eors	r3, r2
 80049be:	b21b      	sxth	r3, r3
 80049c0:	82fb      	strh	r3, [r7, #22]
	for(uint32_t b=0;b<dataBuff->elemNum;b++){
 80049c2:	693b      	ldr	r3, [r7, #16]
 80049c4:	3301      	adds	r3, #1
 80049c6:	613b      	str	r3, [r7, #16]
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	689b      	ldr	r3, [r3, #8]
 80049cc:	693a      	ldr	r2, [r7, #16]
 80049ce:	429a      	cmp	r2, r3
 80049d0:	d3d9      	bcc.n	8004986 <computeCRCwithLUT+0x2a>
	}

	return crc;
 80049d2:	8afb      	ldrh	r3, [r7, #22]
}
 80049d4:	4618      	mov	r0, r3
 80049d6:	3718      	adds	r7, #24
 80049d8:	46bd      	mov	sp, r7
 80049da:	bd80      	pop	{r7, pc}
 80049dc:	08012824 	.word	0x08012824

080049e0 <addCRC>:

uint8_t addCRC(circular_buffer_handle* data){
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b084      	sub	sp, #16
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
    if(data==NULL || data->buff==NULL || data->buffLen==0) return 0;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d007      	beq.n	80049fe <addCRC+0x1e>
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d003      	beq.n	80049fe <addCRC+0x1e>
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	685b      	ldr	r3, [r3, #4]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d101      	bne.n	8004a02 <addCRC+0x22>
 80049fe:	2300      	movs	r3, #0
 8004a00:	e018      	b.n	8004a34 <addCRC+0x54>

    uint16_t CRC=computeCRCwithLUT(data);
 8004a02:	6878      	ldr	r0, [r7, #4]
 8004a04:	f7ff ffaa 	bl	800495c <computeCRCwithLUT>
 8004a08:	4603      	mov	r3, r0
 8004a0a:	81fb      	strh	r3, [r7, #14]
    //append crc to frame (network order)
    uint8_t tmpCRC[2];
    num16ToNet(tmpCRC,CRC);
 8004a0c:	89fa      	ldrh	r2, [r7, #14]
 8004a0e:	f107 030c 	add.w	r3, r7, #12
 8004a12:	4611      	mov	r1, r2
 8004a14:	4618      	mov	r0, r3
 8004a16:	f7ff febf 	bl	8004798 <num16ToNet>
    if(cBuffPushToFill(data,tmpCRC,2,1) == 2) return 1;
 8004a1a:	f107 010c 	add.w	r1, r7, #12
 8004a1e:	2301      	movs	r3, #1
 8004a20:	2202      	movs	r2, #2
 8004a22:	6878      	ldr	r0, [r7, #4]
 8004a24:	f7fd fe0f 	bl	8002646 <cBuffPushToFill>
 8004a28:	4603      	mov	r3, r0
 8004a2a:	2b02      	cmp	r3, #2
 8004a2c:	d101      	bne.n	8004a32 <addCRC+0x52>
 8004a2e:	2301      	movs	r3, #1
 8004a30:	e000      	b.n	8004a34 <addCRC+0x54>
    //else
    return 0;
 8004a32:	2300      	movs	r3, #0
}
 8004a34:	4618      	mov	r0, r3
 8004a36:	3710      	adds	r7, #16
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	bd80      	pop	{r7, pc}

08004a3c <removeVerifyCRC>:

uint8_t removeVerifyCRC(circular_buffer_handle* data){
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	b084      	sub	sp, #16
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
    if(data==NULL || data->buff==NULL || data->buffLen==0 || data->elemNum<2) return 0;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d00b      	beq.n	8004a62 <removeVerifyCRC+0x26>
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d007      	beq.n	8004a62 <removeVerifyCRC+0x26>
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	685b      	ldr	r3, [r3, #4]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d003      	beq.n	8004a62 <removeVerifyCRC+0x26>
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	689b      	ldr	r3, [r3, #8]
 8004a5e:	2b01      	cmp	r3, #1
 8004a60:	d801      	bhi.n	8004a66 <removeVerifyCRC+0x2a>
 8004a62:	2300      	movs	r3, #0
 8004a64:	e010      	b.n	8004a88 <removeVerifyCRC+0x4c>

    //compute CRC (should be 0)
    uint16_t CRC=computeCRCwithLUT(data);
 8004a66:	6878      	ldr	r0, [r7, #4]
 8004a68:	f7ff ff78 	bl	800495c <computeCRCwithLUT>
 8004a6c:	4603      	mov	r3, r0
 8004a6e:	81fb      	strh	r3, [r7, #14]
    //pull CRC bytes from buffer
    cBuffPull(data,NULL,2,1);
 8004a70:	2301      	movs	r3, #1
 8004a72:	2202      	movs	r2, #2
 8004a74:	2100      	movs	r1, #0
 8004a76:	6878      	ldr	r0, [r7, #4]
 8004a78:	f7fd fe12 	bl	80026a0 <cBuffPull>

    if(!CRC) return 1;
 8004a7c:	89fb      	ldrh	r3, [r7, #14]
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d101      	bne.n	8004a86 <removeVerifyCRC+0x4a>
 8004a82:	2301      	movs	r3, #1
 8004a84:	e000      	b.n	8004a88 <removeVerifyCRC+0x4c>
    //else
    return 0;
 8004a86:	2300      	movs	r3, #0
}
 8004a88:	4618      	mov	r0, r3
 8004a8a:	3710      	adds	r7, #16
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	bd80      	pop	{r7, pc}

08004a90 <computeHash>:
 * right now it simply returns the value of the hash counter to
 * generate the hash, it can be modified to implement more robust
 * types of hashes but in our case we will only use it to identify
 * frames uniquely for acknowledges so it should be good enough
 */
uint16_t computeHash(uint8_t * hashData, uint32_t dataLen){
 8004a90:	b480      	push	{r7}
 8004a92:	b083      	sub	sp, #12
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
 8004a98:	6039      	str	r1, [r7, #0]
    return ++hashCnt;
 8004a9a:	4b07      	ldr	r3, [pc, #28]	@ (8004ab8 <computeHash+0x28>)
 8004a9c:	881b      	ldrh	r3, [r3, #0]
 8004a9e:	3301      	adds	r3, #1
 8004aa0:	b29a      	uxth	r2, r3
 8004aa2:	4b05      	ldr	r3, [pc, #20]	@ (8004ab8 <computeHash+0x28>)
 8004aa4:	801a      	strh	r2, [r3, #0]
 8004aa6:	4b04      	ldr	r3, [pc, #16]	@ (8004ab8 <computeHash+0x28>)
 8004aa8:	881b      	ldrh	r3, [r3, #0]
}
 8004aaa:	4618      	mov	r0, r3
 8004aac:	370c      	adds	r7, #12
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab4:	4770      	bx	lr
 8004ab6:	bf00      	nop
 8004ab8:	200231a4 	.word	0x200231a4

08004abc <frame>:
 * 
 * @param payload circular buffer handle containing the payload and inside
 *                which the frame will be built
 * @return uint8_t 0 if an error occurred (buffer too small), !0 otherwise
 */
uint8_t frame(circular_buffer_handle * payload){
 8004abc:	b580      	push	{r7, lr}
 8004abe:	b084      	sub	sp, #16
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
    if(payload==NULL || payload->buff==NULL) return 0;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d003      	beq.n	8004ad2 <frame+0x16>
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d101      	bne.n	8004ad6 <frame+0x1a>
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	e02a      	b.n	8004b2c <frame+0x70>

    //add crc to buffer
    if(!addCRC(payload)) return 0;
 8004ad6:	6878      	ldr	r0, [r7, #4]
 8004ad8:	f7ff ff82 	bl	80049e0 <addCRC>
 8004adc:	4603      	mov	r3, r0
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d101      	bne.n	8004ae6 <frame+0x2a>
 8004ae2:	2300      	movs	r3, #0
 8004ae4:	e022      	b.n	8004b2c <frame+0x70>

    //perform byte stuffing
    if(!doByteStuffing(payload)) return 0;
 8004ae6:	6878      	ldr	r0, [r7, #4]
 8004ae8:	f7ff fe82 	bl	80047f0 <doByteStuffing>
 8004aec:	4603      	mov	r3, r0
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d101      	bne.n	8004af6 <frame+0x3a>
 8004af2:	2300      	movs	r3, #0
 8004af4:	e01a      	b.n	8004b2c <frame+0x70>

    //add head and tail
    uint8_t flag=FRAME_FLAG;
 8004af6:	237e      	movs	r3, #126	@ 0x7e
 8004af8:	73fb      	strb	r3, [r7, #15]
    if(!cBuffPushToFill(payload,&flag,1,0)) return 0;
 8004afa:	f107 010f 	add.w	r1, r7, #15
 8004afe:	2300      	movs	r3, #0
 8004b00:	2201      	movs	r2, #1
 8004b02:	6878      	ldr	r0, [r7, #4]
 8004b04:	f7fd fd9f 	bl	8002646 <cBuffPushToFill>
 8004b08:	4603      	mov	r3, r0
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d101      	bne.n	8004b12 <frame+0x56>
 8004b0e:	2300      	movs	r3, #0
 8004b10:	e00c      	b.n	8004b2c <frame+0x70>
    if(!cBuffPushToFill(payload,&flag,1,1)) return 0;
 8004b12:	f107 010f 	add.w	r1, r7, #15
 8004b16:	2301      	movs	r3, #1
 8004b18:	2201      	movs	r2, #1
 8004b1a:	6878      	ldr	r0, [r7, #4]
 8004b1c:	f7fd fd93 	bl	8002646 <cBuffPushToFill>
 8004b20:	4603      	mov	r3, r0
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d101      	bne.n	8004b2a <frame+0x6e>
 8004b26:	2300      	movs	r3, #0
 8004b28:	e000      	b.n	8004b2c <frame+0x70>

    return 1;
 8004b2a:	2301      	movs	r3, #1
}
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	3710      	adds	r7, #16
 8004b30:	46bd      	mov	sp, r7
 8004b32:	bd80      	pop	{r7, pc}

08004b34 <deframe>:
 * 
 * @param frame circular buffer handle containing the frame and inside which
 *              the payload will be written
 * @return uint8_t 0 if an error occurred, !0 otherwise
 */
uint8_t deframe(circular_buffer_handle * frame){
 8004b34:	b580      	push	{r7, lr}
 8004b36:	b084      	sub	sp, #16
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
    if(frame==NULL || frame->buff==NULL) return 0;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d003      	beq.n	8004b4a <deframe+0x16>
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d101      	bne.n	8004b4e <deframe+0x1a>
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	e034      	b.n	8004bb8 <deframe+0x84>

    //remove head and tail
    uint8_t flag=0;
 8004b4e:	2300      	movs	r3, #0
 8004b50:	73fb      	strb	r3, [r7, #15]
    if(!cBuffPull(frame,&flag,1,0)) return 0;
 8004b52:	f107 010f 	add.w	r1, r7, #15
 8004b56:	2300      	movs	r3, #0
 8004b58:	2201      	movs	r2, #1
 8004b5a:	6878      	ldr	r0, [r7, #4]
 8004b5c:	f7fd fda0 	bl	80026a0 <cBuffPull>
 8004b60:	4603      	mov	r3, r0
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d101      	bne.n	8004b6a <deframe+0x36>
 8004b66:	2300      	movs	r3, #0
 8004b68:	e026      	b.n	8004bb8 <deframe+0x84>
    if(flag!=FRAME_FLAG) return 0;
 8004b6a:	7bfb      	ldrb	r3, [r7, #15]
 8004b6c:	2b7e      	cmp	r3, #126	@ 0x7e
 8004b6e:	d001      	beq.n	8004b74 <deframe+0x40>
 8004b70:	2300      	movs	r3, #0
 8004b72:	e021      	b.n	8004bb8 <deframe+0x84>
    if(!cBuffPull(frame,&flag,1,1)) return 0;
 8004b74:	f107 010f 	add.w	r1, r7, #15
 8004b78:	2301      	movs	r3, #1
 8004b7a:	2201      	movs	r2, #1
 8004b7c:	6878      	ldr	r0, [r7, #4]
 8004b7e:	f7fd fd8f 	bl	80026a0 <cBuffPull>
 8004b82:	4603      	mov	r3, r0
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d101      	bne.n	8004b8c <deframe+0x58>
 8004b88:	2300      	movs	r3, #0
 8004b8a:	e015      	b.n	8004bb8 <deframe+0x84>
    if(flag!=FRAME_FLAG) return 0;
 8004b8c:	7bfb      	ldrb	r3, [r7, #15]
 8004b8e:	2b7e      	cmp	r3, #126	@ 0x7e
 8004b90:	d001      	beq.n	8004b96 <deframe+0x62>
 8004b92:	2300      	movs	r3, #0
 8004b94:	e010      	b.n	8004bb8 <deframe+0x84>

    //remove byte stuffing
    if(!undoByteStuffing(frame)) return 0;
 8004b96:	6878      	ldr	r0, [r7, #4]
 8004b98:	f7ff fe82 	bl	80048a0 <undoByteStuffing>
 8004b9c:	4603      	mov	r3, r0
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d101      	bne.n	8004ba6 <deframe+0x72>
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	e008      	b.n	8004bb8 <deframe+0x84>

    //remove and verify CRC
    if(!removeVerifyCRC(frame)) return 0;
 8004ba6:	6878      	ldr	r0, [r7, #4]
 8004ba8:	f7ff ff48 	bl	8004a3c <removeVerifyCRC>
 8004bac:	4603      	mov	r3, r0
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d101      	bne.n	8004bb6 <deframe+0x82>
 8004bb2:	2300      	movs	r3, #0
 8004bb4:	e000      	b.n	8004bb8 <deframe+0x84>

    return 1;
 8004bb6:	2301      	movs	r3, #1
}
 8004bb8:	4618      	mov	r0, r3
 8004bba:	3710      	adds	r7, #16
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	bd80      	pop	{r7, pc}

08004bc0 <sendFrame>:

// BASIC I/O FUNCTIONS --------------------------------------------------------
//sends a frame on line txBuff
uint8_t sendFrame(serial_line_handle* line, uint8_t frameCode, uint8_t ackWanted, uint16_t hash, uint8_t* buff, uint32_t len){
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b084      	sub	sp, #16
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
 8004bc8:	4608      	mov	r0, r1
 8004bca:	4611      	mov	r1, r2
 8004bcc:	461a      	mov	r2, r3
 8004bce:	4603      	mov	r3, r0
 8004bd0:	70fb      	strb	r3, [r7, #3]
 8004bd2:	460b      	mov	r3, r1
 8004bd4:	70bb      	strb	r3, [r7, #2]
 8004bd6:	4613      	mov	r3, r2
 8004bd8:	803b      	strh	r3, [r7, #0]
    if(line==NULL || line->txFunc==NULL) return 0;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d003      	beq.n	8004be8 <sendFrame+0x28>
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d101      	bne.n	8004bec <sendFrame+0x2c>
 8004be8:	2300      	movs	r3, #0
 8004bea:	e065      	b.n	8004cb8 <sendFrame+0xf8>

    if(len>SDL_MAX_PAY_LEN) return 0;
 8004bec:	69fb      	ldr	r3, [r7, #28]
 8004bee:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004bf2:	d901      	bls.n	8004bf8 <sendFrame+0x38>
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	e05f      	b.n	8004cb8 <sendFrame+0xf8>

    //initializing temporary circular buffer
    cBuffInit(&line->tmpBuff,line->tmpBuffArray,sizeof(line->tmpBuffArray),0);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	f503 5081 	add.w	r0, r3, #4128	@ 0x1020
 8004bfe:	3004      	adds	r0, #4
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	f503 5181 	add.w	r1, r3, #4128	@ 0x1020
 8004c06:	3114      	adds	r1, #20
 8004c08:	2300      	movs	r3, #0
 8004c0a:	f241 020c 	movw	r2, #4108	@ 0x100c
 8004c0e:	f7fd fc1f 	bl	8002450 <cBuffInit>

    //creating frameHeader
    frameHeader header={
 8004c12:	78fb      	ldrb	r3, [r7, #3]
 8004c14:	733b      	strb	r3, [r7, #12]
 8004c16:	78bb      	ldrb	r3, [r7, #2]
 8004c18:	737b      	strb	r3, [r7, #13]
 8004c1a:	883b      	ldrh	r3, [r7, #0]
 8004c1c:	81fb      	strh	r3, [r7, #14]
        .ackWanted=ackWanted,
        .hash=hash
    };

    //network ordering header
    num16ToNet((uint8_t*)&header.hash,header.hash);
 8004c1e:	89fa      	ldrh	r2, [r7, #14]
 8004c20:	f107 030c 	add.w	r3, r7, #12
 8004c24:	3302      	adds	r3, #2
 8004c26:	4611      	mov	r1, r2
 8004c28:	4618      	mov	r0, r3
 8004c2a:	f7ff fdb5 	bl	8004798 <num16ToNet>

    //copying header inside circular buffer
    if(cBuffPushToFill(&line->tmpBuff,(uint8_t *)&header,sizeof(frameHeader),1)!=sizeof(frameHeader)) return 0;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	f503 5081 	add.w	r0, r3, #4128	@ 0x1020
 8004c34:	3004      	adds	r0, #4
 8004c36:	f107 010c 	add.w	r1, r7, #12
 8004c3a:	2301      	movs	r3, #1
 8004c3c:	2204      	movs	r2, #4
 8004c3e:	f7fd fd02 	bl	8002646 <cBuffPushToFill>
 8004c42:	4603      	mov	r3, r0
 8004c44:	2b04      	cmp	r3, #4
 8004c46:	d001      	beq.n	8004c4c <sendFrame+0x8c>
 8004c48:	2300      	movs	r3, #0
 8004c4a:	e035      	b.n	8004cb8 <sendFrame+0xf8>

    //copying data inside circular buffer
    if(buff!=NULL) if(cBuffPushToFill(&line->tmpBuff,buff,len,1)!=len) return 0;
 8004c4c:	69bb      	ldr	r3, [r7, #24]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d00e      	beq.n	8004c70 <sendFrame+0xb0>
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	f503 5081 	add.w	r0, r3, #4128	@ 0x1020
 8004c58:	3004      	adds	r0, #4
 8004c5a:	2301      	movs	r3, #1
 8004c5c:	69fa      	ldr	r2, [r7, #28]
 8004c5e:	69b9      	ldr	r1, [r7, #24]
 8004c60:	f7fd fcf1 	bl	8002646 <cBuffPushToFill>
 8004c64:	4602      	mov	r2, r0
 8004c66:	69fb      	ldr	r3, [r7, #28]
 8004c68:	4293      	cmp	r3, r2
 8004c6a:	d001      	beq.n	8004c70 <sendFrame+0xb0>
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	e023      	b.n	8004cb8 <sendFrame+0xf8>

    //framing the payload
    if(!frame(&line->tmpBuff)) return 0;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	f503 5381 	add.w	r3, r3, #4128	@ 0x1020
 8004c76:	3304      	adds	r3, #4
 8004c78:	4618      	mov	r0, r3
 8004c7a:	f7ff ff1f 	bl	8004abc <frame>
 8004c7e:	4603      	mov	r3, r0
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d10b      	bne.n	8004c9c <sendFrame+0xdc>
 8004c84:	2300      	movs	r3, #0
 8004c86:	e017      	b.n	8004cb8 <sendFrame+0xf8>

    //sending the payload through the line
    uint8_t byte;
    while(cBuffPull(&line->tmpBuff,&byte,1,0)){
        //if the transmission fails, return 0
        if(!line->txFunc(byte)) return 0;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	7afa      	ldrb	r2, [r7, #11]
 8004c8e:	4610      	mov	r0, r2
 8004c90:	4798      	blx	r3
 8004c92:	4603      	mov	r3, r0
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d101      	bne.n	8004c9c <sendFrame+0xdc>
 8004c98:	2300      	movs	r3, #0
 8004c9a:	e00d      	b.n	8004cb8 <sendFrame+0xf8>
    while(cBuffPull(&line->tmpBuff,&byte,1,0)){
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	f503 5081 	add.w	r0, r3, #4128	@ 0x1020
 8004ca2:	3004      	adds	r0, #4
 8004ca4:	f107 010b 	add.w	r1, r7, #11
 8004ca8:	2300      	movs	r3, #0
 8004caa:	2201      	movs	r2, #1
 8004cac:	f7fd fcf8 	bl	80026a0 <cBuffPull>
 8004cb0:	4603      	mov	r3, r0
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d1e8      	bne.n	8004c88 <sendFrame+0xc8>
    }
 
    return 1;
 8004cb6:	2301      	movs	r3, #1
}
 8004cb8:	4618      	mov	r0, r3
 8004cba:	3710      	adds	r7, #16
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	bd80      	pop	{r7, pc}

08004cc0 <receiveFrame>:

//receives a frame from line rxBuff, searching for a certain frameCode, if some remCodes are specified (not NULL or empty)
//it also removes those codes from rxBuff, otherwise it leaves them unchanged
//the eventually received frame will be placed inside line tmpBuff (HEADER INCLUDED!)
//returns 0 if no frame found, !0 otherwise
uint8_t receiveFrame(serial_line_handle* line, uint8_t frameCode, circular_buffer_handle* remCodes){
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	b094      	sub	sp, #80	@ 0x50
 8004cc4:	af02      	add	r7, sp, #8
 8004cc6:	60f8      	str	r0, [r7, #12]
 8004cc8:	460b      	mov	r3, r1
 8004cca:	607a      	str	r2, [r7, #4]
 8004ccc:	72fb      	strb	r3, [r7, #11]
    if(line==NULL || line->rxFunc==NULL) return 0;
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d003      	beq.n	8004cdc <receiveFrame+0x1c>
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	685b      	ldr	r3, [r3, #4]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d101      	bne.n	8004ce0 <receiveFrame+0x20>
 8004cdc:	2300      	movs	r3, #0
 8004cde:	e0db      	b.n	8004e98 <receiveFrame+0x1d8>

    //initializing temporary circular buffer
    cBuffInit(&line->tmpBuff,line->tmpBuffArray,sizeof(line->tmpBuffArray),0);
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	f503 5081 	add.w	r0, r3, #4128	@ 0x1020
 8004ce6:	3004      	adds	r0, #4
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	f503 5181 	add.w	r1, r3, #4128	@ 0x1020
 8004cee:	3114      	adds	r1, #20
 8004cf0:	2300      	movs	r3, #0
 8004cf2:	f241 020c 	movw	r2, #4108	@ 0x100c
 8004cf6:	f7fd fbab 	bl	8002450 <cBuffInit>

    //fill the rxBuffer with new bytes
    uint8_t byte;
    while(!cBuffFull(&line->rxBuff)){
 8004cfa:	e011      	b.n	8004d20 <receiveFrame+0x60>
        if(line->rxFunc(&byte)){
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	685b      	ldr	r3, [r3, #4]
 8004d00:	f107 023b 	add.w	r2, r7, #59	@ 0x3b
 8004d04:	4610      	mov	r0, r2
 8004d06:	4798      	blx	r3
 8004d08:	4603      	mov	r3, r0
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d011      	beq.n	8004d32 <receiveFrame+0x72>
            cBuffPush(&line->rxBuff,&byte,1,1);
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	f103 0008 	add.w	r0, r3, #8
 8004d14:	f107 013b 	add.w	r1, r7, #59	@ 0x3b
 8004d18:	2301      	movs	r3, #1
 8004d1a:	2201      	movs	r2, #1
 8004d1c:	f7fd fc17 	bl	800254e <cBuffPush>
    while(!cBuffFull(&line->rxBuff)){
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	3308      	adds	r3, #8
 8004d24:	4618      	mov	r0, r3
 8004d26:	f7fd ff06 	bl	8002b36 <cBuffFull>
 8004d2a:	4603      	mov	r3, r0
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d0e5      	beq.n	8004cfc <receiveFrame+0x3c>
 8004d30:	e000      	b.n	8004d34 <receiveFrame+0x74>
        }else break;
 8004d32:	bf00      	nop
    //handle to store found frames
    circular_buffer_handle frameHandle;
    //dummy buffer to perform buffer advancement
    circular_buffer_handle dummyBuff;
    //copying rxBuff into dummy buffer
    cBuffToCirc(&dummyBuff,&line->rxBuff);
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	f103 0208 	add.w	r2, r3, #8
 8004d3a:	f107 0318 	add.w	r3, r7, #24
 8004d3e:	4611      	mov	r1, r2
 8004d40:	4618      	mov	r0, r3
 8004d42:	f7fd ff10 	bl	8002b66 <cBuffToCirc>
    //we search on dummy handle, shifting it out to current found frame
    while(searchFrameAdvance(&dummyBuff,&frameHandle,&rule,SHIFTOUT_NEXT | SHIFTOUT_FAST)){
 8004d46:	e09a      	b.n	8004e7e <receiveFrame+0x1be>
        //flush tmp buffer
        cBuffFlush(&line->tmpBuff);
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	f503 5381 	add.w	r3, r3, #4128	@ 0x1020
 8004d4e:	3304      	adds	r3, #4
 8004d50:	4618      	mov	r0, r3
 8004d52:	f7fd fedf 	bl	8002b14 <cBuffFlush>
        //copy on temporary buffer
        cBuffPushRead(&line->tmpBuff,&frameHandle,frameHandle.elemNum,1,0);
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	f503 5081 	add.w	r0, r3, #4128	@ 0x1020
 8004d5c:	3004      	adds	r0, #4
 8004d5e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004d60:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8004d64:	2300      	movs	r3, #0
 8004d66:	9300      	str	r3, [sp, #0]
 8004d68:	2301      	movs	r3, #1
 8004d6a:	f7fd fe0d 	bl	8002988 <cBuffPushRead>
        //try deframing
        if(!deframe(&line->tmpBuff)) continue;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	f503 5381 	add.w	r3, r3, #4128	@ 0x1020
 8004d74:	3304      	adds	r3, #4
 8004d76:	4618      	mov	r0, r3
 8004d78:	f7ff fedc 	bl	8004b34 <deframe>
 8004d7c:	4603      	mov	r3, r0
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d078      	beq.n	8004e74 <receiveFrame+0x1b4>

        //check if it corresponds to wanted frame code
        frameHeader tmpHeader;
        uint8_t toBeCut=0; //flag to signal that frame needs to be cut from rxBuff
 8004d82:	2300      	movs	r3, #0
 8004d84:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
        uint8_t found=0; //frame found flag
 8004d88:	2300      	movs	r3, #0
 8004d8a:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
        //reading header
        if(cBuffRead(&line->tmpBuff,(uint8_t *)&tmpHeader,sizeof(frameHeader),0,0)!=sizeof(frameHeader)) continue;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	f503 5081 	add.w	r0, r3, #4128	@ 0x1020
 8004d94:	3004      	adds	r0, #4
 8004d96:	f107 0114 	add.w	r1, r7, #20
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	9300      	str	r3, [sp, #0]
 8004d9e:	2300      	movs	r3, #0
 8004da0:	2204      	movs	r2, #4
 8004da2:	f7fd fcae 	bl	8002702 <cBuffRead>
 8004da6:	4603      	mov	r3, r0
 8004da8:	2b04      	cmp	r3, #4
 8004daa:	d165      	bne.n	8004e78 <receiveFrame+0x1b8>
        //host ordering header
        tmpHeader.hash=netToNum16((uint8_t*)&tmpHeader.hash);
 8004dac:	f107 0314 	add.w	r3, r7, #20
 8004db0:	3302      	adds	r3, #2
 8004db2:	4618      	mov	r0, r3
 8004db4:	f7ff fd07 	bl	80047c6 <netToNum16>
 8004db8:	4603      	mov	r3, r0
 8004dba:	82fb      	strh	r3, [r7, #22]
        if(line->tmpBuff.elemNum>(SDL_MAX_PAY_LEN+sizeof(frameHeader))) continue;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004dc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dc4:	f640 0204 	movw	r2, #2052	@ 0x804
 8004dc8:	4293      	cmp	r3, r2
 8004dca:	d857      	bhi.n	8004e7c <receiveFrame+0x1bc>
        if(tmpHeader.code==frameCode){
 8004dcc:	7d3b      	ldrb	r3, [r7, #20]
 8004dce:	7afa      	ldrb	r2, [r7, #11]
 8004dd0:	429a      	cmp	r2, r3
 8004dd2:	d106      	bne.n	8004de2 <receiveFrame+0x122>
            //frame found
            toBeCut=1;
 8004dd4:	2301      	movs	r3, #1
 8004dd6:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
            found=1;
 8004dda:	2301      	movs	r3, #1
 8004ddc:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
 8004de0:	e01b      	b.n	8004e1a <receiveFrame+0x15a>
        }else{
            if(remCodes!=NULL){
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d018      	beq.n	8004e1a <receiveFrame+0x15a>
                for(uint32_t c=0; c<remCodes->elemNum; c++){
 8004de8:	2300      	movs	r3, #0
 8004dea:	643b      	str	r3, [r7, #64]	@ 0x40
 8004dec:	e010      	b.n	8004e10 <receiveFrame+0x150>
                    if(cBuffReadByte(remCodes,0,c)==tmpHeader.hash){
 8004dee:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004df0:	2100      	movs	r1, #0
 8004df2:	6878      	ldr	r0, [r7, #4]
 8004df4:	f7fd fe56 	bl	8002aa4 <cBuffReadByte>
 8004df8:	4603      	mov	r3, r0
 8004dfa:	461a      	mov	r2, r3
 8004dfc:	8afb      	ldrh	r3, [r7, #22]
 8004dfe:	429a      	cmp	r2, r3
 8004e00:	d103      	bne.n	8004e0a <receiveFrame+0x14a>
                        toBeCut=1;
 8004e02:	2301      	movs	r3, #1
 8004e04:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
                        break;
 8004e08:	e007      	b.n	8004e1a <receiveFrame+0x15a>
                for(uint32_t c=0; c<remCodes->elemNum; c++){
 8004e0a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004e0c:	3301      	adds	r3, #1
 8004e0e:	643b      	str	r3, [r7, #64]	@ 0x40
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	689b      	ldr	r3, [r3, #8]
 8004e14:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004e16:	429a      	cmp	r2, r3
 8004e18:	d3e9      	bcc.n	8004dee <receiveFrame+0x12e>
                    }
                }
            }
        }

        if(toBeCut){ //if frame needs to be cut
 8004e1a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d022      	beq.n	8004e68 <receiveFrame+0x1a8>
            //we cut the found frame from buffers
            //saving the virtual index of the found frame inside rxBuff
            uint32_t frameIndx=cBuffGetVirtIndex(&line->rxBuff,frameHandle.startIndex);
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	3308      	adds	r3, #8
 8004e26:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004e28:	4611      	mov	r1, r2
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	f7fd fb30 	bl	8002490 <cBuffGetVirtIndex>
 8004e30:	63f8      	str	r0, [r7, #60]	@ 0x3c
            //cutting found frame from rxBuff
            cBuffCut(&line->rxBuff,NULL,frameHandle.elemNum,0,frameIndx);
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	f103 0008 	add.w	r0, r3, #8
 8004e38:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004e3a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004e3c:	9300      	str	r3, [sp, #0]
 8004e3e:	2300      	movs	r3, #0
 8004e40:	2100      	movs	r1, #0
 8004e42:	f7fd fcbf 	bl	80027c4 <cBuffCut>
            //reconstructing dummy buffer
            cBuffToCirc(&dummyBuff,&line->rxBuff);
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	f103 0208 	add.w	r2, r3, #8
 8004e4c:	f107 0318 	add.w	r3, r7, #24
 8004e50:	4611      	mov	r1, r2
 8004e52:	4618      	mov	r0, r3
 8004e54:	f7fd fe87 	bl	8002b66 <cBuffToCirc>
            cBuffPull(&dummyBuff,NULL,frameIndx+1,0);
 8004e58:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004e5a:	1c5a      	adds	r2, r3, #1
 8004e5c:	f107 0018 	add.w	r0, r7, #24
 8004e60:	2300      	movs	r3, #0
 8004e62:	2100      	movs	r1, #0
 8004e64:	f7fd fc1c 	bl	80026a0 <cBuffPull>
        }

        if(found) return 1;
 8004e68:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d006      	beq.n	8004e7e <receiveFrame+0x1be>
 8004e70:	2301      	movs	r3, #1
 8004e72:	e011      	b.n	8004e98 <receiveFrame+0x1d8>
        if(!deframe(&line->tmpBuff)) continue;
 8004e74:	bf00      	nop
 8004e76:	e002      	b.n	8004e7e <receiveFrame+0x1be>
        if(cBuffRead(&line->tmpBuff,(uint8_t *)&tmpHeader,sizeof(frameHeader),0,0)!=sizeof(frameHeader)) continue;
 8004e78:	bf00      	nop
 8004e7a:	e000      	b.n	8004e7e <receiveFrame+0x1be>
        if(line->tmpBuff.elemNum>(SDL_MAX_PAY_LEN+sizeof(frameHeader))) continue;
 8004e7c:	bf00      	nop
    while(searchFrameAdvance(&dummyBuff,&frameHandle,&rule,SHIFTOUT_NEXT | SHIFTOUT_FAST)){
 8004e7e:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8004e82:	f107 0018 	add.w	r0, r7, #24
 8004e86:	2314      	movs	r3, #20
 8004e88:	4a05      	ldr	r2, [pc, #20]	@ (8004ea0 <receiveFrame+0x1e0>)
 8004e8a:	f7fe f954 	bl	8003136 <searchFrameAdvance>
 8004e8e:	4603      	mov	r3, r0
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	f47f af59 	bne.w	8004d48 <receiveFrame+0x88>
    }

    return 0;
 8004e96:	2300      	movs	r3, #0
}
 8004e98:	4618      	mov	r0, r3
 8004e9a:	3748      	adds	r7, #72	@ 0x48
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	bd80      	pop	{r7, pc}
 8004ea0:	2000000c 	.word	0x2000000c

08004ea4 <receiveFrameAndAck>:
//receive a frame and eventually acknowledge it
//returns the length of frame if received, 0 otherwise
//searches for a frame with code frameCode, and eventually removes remCodes frames from rxBuff (if not NULL or empty)
//pushes the received code in rxFrame tail, if not NULL, ONLY pushing if there's enough space
//if there's not enough space to store the frame, the ack is not sent even if requested
uint32_t receiveFrameAndAck(serial_line_handle* line, circular_buffer_handle* rxFrame, uint8_t frameCode, circular_buffer_handle* remCodes){
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	b08a      	sub	sp, #40	@ 0x28
 8004ea8:	af02      	add	r7, sp, #8
 8004eaa:	60f8      	str	r0, [r7, #12]
 8004eac:	60b9      	str	r1, [r7, #8]
 8004eae:	603b      	str	r3, [r7, #0]
 8004eb0:	4613      	mov	r3, r2
 8004eb2:	71fb      	strb	r3, [r7, #7]
    if(line==NULL || line->rxFunc==NULL) return 0;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d003      	beq.n	8004ec2 <receiveFrameAndAck+0x1e>
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	685b      	ldr	r3, [r3, #4]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d101      	bne.n	8004ec6 <receiveFrameAndAck+0x22>
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	e05e      	b.n	8004f84 <receiveFrameAndAck+0xe0>
    
    //if frame received
    if(receiveFrame(line, frameCode,remCodes)){
 8004ec6:	79fb      	ldrb	r3, [r7, #7]
 8004ec8:	683a      	ldr	r2, [r7, #0]
 8004eca:	4619      	mov	r1, r3
 8004ecc:	68f8      	ldr	r0, [r7, #12]
 8004ece:	f7ff fef7 	bl	8004cc0 <receiveFrame>
 8004ed2:	4603      	mov	r3, r0
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d054      	beq.n	8004f82 <receiveFrameAndAck+0xde>
        //get header
        frameHeader tmpHeader;
        cBuffPull(&line->tmpBuff,(uint8_t *)&tmpHeader,sizeof(frameHeader),0);
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	f503 5081 	add.w	r0, r3, #4128	@ 0x1020
 8004ede:	3004      	adds	r0, #4
 8004ee0:	f107 0114 	add.w	r1, r7, #20
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	2204      	movs	r2, #4
 8004ee8:	f7fd fbda 	bl	80026a0 <cBuffPull>
        //host ordering header
        tmpHeader.hash=netToNum16((uint8_t*)&tmpHeader.hash);
 8004eec:	f107 0314 	add.w	r3, r7, #20
 8004ef0:	3302      	adds	r3, #2
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	f7ff fc67 	bl	80047c6 <netToNum16>
 8004ef8:	4603      	mov	r3, r0
 8004efa:	82fb      	strh	r3, [r7, #22]

        uint8_t sendAck=1;
 8004efc:	2301      	movs	r3, #1
 8004efe:	77fb      	strb	r3, [r7, #31]
        uint32_t len=line->tmpBuff.elemNum;
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004f06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f08:	61bb      	str	r3, [r7, #24]
        //verify if the frame was already received
        if(tmpHeader.hash == line->lastRxHash){
 8004f0a:	8afa      	ldrh	r2, [r7, #22]
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8004f12:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8004f16:	429a      	cmp	r2, r3
 8004f18:	d102      	bne.n	8004f20 <receiveFrameAndAck+0x7c>
            len=0; 
 8004f1a:	2300      	movs	r3, #0
 8004f1c:	61bb      	str	r3, [r7, #24]
 8004f1e:	e018      	b.n	8004f52 <receiveFrameAndAck+0xae>
        }else{
            if(rxFrame!=NULL){
 8004f20:	68bb      	ldr	r3, [r7, #8]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d015      	beq.n	8004f52 <receiveFrameAndAck+0xae>
                //pushing it on buffer (if enough space)
                if((rxFrame->buffLen-rxFrame->elemNum)>=len){
 8004f26:	68bb      	ldr	r3, [r7, #8]
 8004f28:	685a      	ldr	r2, [r3, #4]
 8004f2a:	68bb      	ldr	r3, [r7, #8]
 8004f2c:	689b      	ldr	r3, [r3, #8]
 8004f2e:	1ad3      	subs	r3, r2, r3
 8004f30:	69ba      	ldr	r2, [r7, #24]
 8004f32:	429a      	cmp	r2, r3
 8004f34:	d80b      	bhi.n	8004f4e <receiveFrameAndAck+0xaa>
                    cBuffPushPull(rxFrame, &line->tmpBuff, len, 1,0);
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	f503 5181 	add.w	r1, r3, #4128	@ 0x1020
 8004f3c:	3104      	adds	r1, #4
 8004f3e:	2300      	movs	r3, #0
 8004f40:	9300      	str	r3, [sp, #0]
 8004f42:	2301      	movs	r3, #1
 8004f44:	69ba      	ldr	r2, [r7, #24]
 8004f46:	68b8      	ldr	r0, [r7, #8]
 8004f48:	f7fd fd71 	bl	8002a2e <cBuffPushPull>
 8004f4c:	e001      	b.n	8004f52 <receiveFrameAndAck+0xae>
                }else sendAck=0;
 8004f4e:	2300      	movs	r3, #0
 8004f50:	77fb      	strb	r3, [r7, #31]
            }
        }

        //send ack back if needed (if ack sending fails it's considered as lost on the line, the frame is received anyway)
        if(tmpHeader.ackWanted && sendAck){ 
 8004f52:	7d7b      	ldrb	r3, [r7, #21]
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d012      	beq.n	8004f7e <receiveFrameAndAck+0xda>
 8004f58:	7ffb      	ldrb	r3, [r7, #31]
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d00f      	beq.n	8004f7e <receiveFrameAndAck+0xda>
            sendFrame(line, FRMCODE_ACK, 0, tmpHeader.hash,NULL,0);
 8004f5e:	8afb      	ldrh	r3, [r7, #22]
 8004f60:	2200      	movs	r2, #0
 8004f62:	9201      	str	r2, [sp, #4]
 8004f64:	2200      	movs	r2, #0
 8004f66:	9200      	str	r2, [sp, #0]
 8004f68:	2200      	movs	r2, #0
 8004f6a:	2101      	movs	r1, #1
 8004f6c:	68f8      	ldr	r0, [r7, #12]
 8004f6e:	f7ff fe27 	bl	8004bc0 <sendFrame>
            //saving last acknowledged hash
            line->lastRxHash=tmpHeader.hash;
 8004f72:	8afa      	ldrh	r2, [r7, #22]
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8004f7a:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
        }

        return len;
 8004f7e:	69bb      	ldr	r3, [r7, #24]
 8004f80:	e000      	b.n	8004f84 <receiveFrameAndAck+0xe0>
    }

    return 0;
 8004f82:	2300      	movs	r3, #0

}
 8004f84:	4618      	mov	r0, r3
 8004f86:	3720      	adds	r7, #32
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	bd80      	pop	{r7, pc}

08004f8c <receiveAck>:

//tries receiving a single ack with the given hash
//to be called multiple times to scan the whole buffer
uint8_t receiveAck(serial_line_handle* line, uint16_t hash){
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	b084      	sub	sp, #16
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]
 8004f94:	460b      	mov	r3, r1
 8004f96:	807b      	strh	r3, [r7, #2]
    if(line==NULL || line->rxFunc==NULL) return 0;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d003      	beq.n	8004fa6 <receiveAck+0x1a>
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	685b      	ldr	r3, [r3, #4]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d101      	bne.n	8004faa <receiveAck+0x1e>
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	e020      	b.n	8004fec <receiveAck+0x60>

    if(receiveFrame(line,FRMCODE_ACK,NULL)){
 8004faa:	2200      	movs	r2, #0
 8004fac:	2101      	movs	r1, #1
 8004fae:	6878      	ldr	r0, [r7, #4]
 8004fb0:	f7ff fe86 	bl	8004cc0 <receiveFrame>
 8004fb4:	4603      	mov	r3, r0
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d017      	beq.n	8004fea <receiveAck+0x5e>
        //get header
        frameHeader tmpHeader;
        cBuffPull(&line->tmpBuff,(uint8_t *)&tmpHeader,sizeof(frameHeader),0);
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	f503 5081 	add.w	r0, r3, #4128	@ 0x1020
 8004fc0:	3004      	adds	r0, #4
 8004fc2:	f107 010c 	add.w	r1, r7, #12
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	2204      	movs	r2, #4
 8004fca:	f7fd fb69 	bl	80026a0 <cBuffPull>
        //host ordering header
        tmpHeader.hash=netToNum16((uint8_t*)&tmpHeader.hash);
 8004fce:	f107 030c 	add.w	r3, r7, #12
 8004fd2:	3302      	adds	r3, #2
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	f7ff fbf6 	bl	80047c6 <netToNum16>
 8004fda:	4603      	mov	r3, r0
 8004fdc:	81fb      	strh	r3, [r7, #14]
        //check if hash correct
        if(tmpHeader.hash == hash) return 1;
 8004fde:	89fb      	ldrh	r3, [r7, #14]
 8004fe0:	887a      	ldrh	r2, [r7, #2]
 8004fe2:	429a      	cmp	r2, r3
 8004fe4:	d101      	bne.n	8004fea <receiveAck+0x5e>
 8004fe6:	2301      	movs	r3, #1
 8004fe8:	e000      	b.n	8004fec <receiveAck+0x60>
    }

    return 0;
 8004fea:	2300      	movs	r3, #0

}
 8004fec:	4618      	mov	r0, r3
 8004fee:	3710      	adds	r7, #16
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	bd80      	pop	{r7, pc}

08004ff4 <receiveInQueueAndAck>:

#ifdef SDL_ANTILOCK_DEPTH
//receives frames placing them inside anti lock queue (and eventually responding with an ack)
//returns 0 in case of failure, length of frame otherwise
uint32_t receiveInQueueAndAck(serial_line_handle* line, uint8_t frameCode, circular_buffer_handle* remCodes){
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	b086      	sub	sp, #24
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	60f8      	str	r0, [r7, #12]
 8004ffc:	460b      	mov	r3, r1
 8004ffe:	607a      	str	r2, [r7, #4]
 8005000:	72fb      	strb	r3, [r7, #11]
    if(line==NULL || line->rxFunc==NULL) return 0;
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	2b00      	cmp	r3, #0
 8005006:	d003      	beq.n	8005010 <receiveInQueueAndAck+0x1c>
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	685b      	ldr	r3, [r3, #4]
 800500c:	2b00      	cmp	r3, #0
 800500e:	d101      	bne.n	8005014 <receiveInQueueAndAck+0x20>
 8005010:	2300      	movs	r3, #0
 8005012:	e026      	b.n	8005062 <receiveInQueueAndAck+0x6e>

    //check if there's space in antiLockQueue
    if(line->alockQueue.elemNum==line->alockQueue.buffLen) return 0;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800501a:	f8d3 2864 	ldr.w	r2, [r3, #2148]	@ 0x864
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8005024:	f8d3 3860 	ldr.w	r3, [r3, #2144]	@ 0x860
 8005028:	429a      	cmp	r2, r3
 800502a:	d101      	bne.n	8005030 <receiveInQueueAndAck+0x3c>
 800502c:	2300      	movs	r3, #0
 800502e:	e018      	b.n	8005062 <receiveInQueueAndAck+0x6e>

    //otherwise try receiving a frame
    uint32_t len=receiveFrameAndAck(line,&line->alockBuff, frameCode, remCodes);
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	f503 5101 	add.w	r1, r3, #8256	@ 0x2040
 8005036:	310c      	adds	r1, #12
 8005038:	7afa      	ldrb	r2, [r7, #11]
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	68f8      	ldr	r0, [r7, #12]
 800503e:	f7ff ff31 	bl	8004ea4 <receiveFrameAndAck>
 8005042:	4603      	mov	r3, r0
 8005044:	617b      	str	r3, [r7, #20]

    //if frame received
    if(len){
 8005046:	697b      	ldr	r3, [r7, #20]
 8005048:	2b00      	cmp	r3, #0
 800504a:	d009      	beq.n	8005060 <receiveInQueueAndAck+0x6c>
        cBuffPush(&line->alockQueue,(uint8_t*)&len,sizeof(line->tmpBuff.elemNum),1);
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	f503 4090 	add.w	r0, r3, #18432	@ 0x4800
 8005052:	305c      	adds	r0, #92	@ 0x5c
 8005054:	f107 0114 	add.w	r1, r7, #20
 8005058:	2301      	movs	r3, #1
 800505a:	2204      	movs	r2, #4
 800505c:	f7fd fa77 	bl	800254e <cBuffPush>
    }

    return len;
 8005060:	697b      	ldr	r3, [r7, #20]
}
 8005062:	4618      	mov	r0, r3
 8005064:	3718      	adds	r7, #24
 8005066:	46bd      	mov	sp, r7
 8005068:	bd80      	pop	{r7, pc}

0800506a <readFromQueue>:

//reads a frame from anti lock queue
//returns length of frame, otherwise 0
//places frame inside rxFrame (if not null), only if there's enough space
uint32_t readFromQueue(serial_line_handle* line, circular_buffer_handle* rxFrame){
 800506a:	b580      	push	{r7, lr}
 800506c:	b086      	sub	sp, #24
 800506e:	af02      	add	r7, sp, #8
 8005070:	6078      	str	r0, [r7, #4]
 8005072:	6039      	str	r1, [r7, #0]
    if(line==NULL) return 0;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2b00      	cmp	r3, #0
 8005078:	d101      	bne.n	800507e <readFromQueue+0x14>
 800507a:	2300      	movs	r3, #0
 800507c:	e030      	b.n	80050e0 <readFromQueue+0x76>

    //check if there are frames in queue
    uint32_t frameLen=0;
 800507e:	2300      	movs	r3, #0
 8005080:	60bb      	str	r3, [r7, #8]
    cBuffPull(&line->alockQueue,(uint8_t*)&frameLen,sizeof(frameLen),0);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	f503 4090 	add.w	r0, r3, #18432	@ 0x4800
 8005088:	305c      	adds	r0, #92	@ 0x5c
 800508a:	f107 0108 	add.w	r1, r7, #8
 800508e:	2300      	movs	r3, #0
 8005090:	2204      	movs	r2, #4
 8005092:	f7fd fb05 	bl	80026a0 <cBuffPull>

    //read frame from queue
    if(rxFrame!=NULL){
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	2b00      	cmp	r3, #0
 800509a:	d020      	beq.n	80050de <readFromQueue+0x74>
        //pushing it on buffer (if enough space)
        uint32_t len=frameLen;
 800509c:	68bb      	ldr	r3, [r7, #8]
 800509e:	60fb      	str	r3, [r7, #12]
        if((rxFrame->buffLen-rxFrame->elemNum)>=len){
 80050a0:	683b      	ldr	r3, [r7, #0]
 80050a2:	685a      	ldr	r2, [r3, #4]
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	689b      	ldr	r3, [r3, #8]
 80050a8:	1ad3      	subs	r3, r2, r3
 80050aa:	68fa      	ldr	r2, [r7, #12]
 80050ac:	429a      	cmp	r2, r3
 80050ae:	d80b      	bhi.n	80050c8 <readFromQueue+0x5e>
            cBuffPushPull(rxFrame, &line->alockBuff, len, 1,0);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	f503 5101 	add.w	r1, r3, #8256	@ 0x2040
 80050b6:	310c      	adds	r1, #12
 80050b8:	2300      	movs	r3, #0
 80050ba:	9300      	str	r3, [sp, #0]
 80050bc:	2301      	movs	r3, #1
 80050be:	68fa      	ldr	r2, [r7, #12]
 80050c0:	6838      	ldr	r0, [r7, #0]
 80050c2:	f7fd fcb4 	bl	8002a2e <cBuffPushPull>
 80050c6:	e00a      	b.n	80050de <readFromQueue+0x74>
        }else{
            //otherwise just discard the frame
            cBuffPull(&line->alockBuff,NULL,len,0);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	f503 5001 	add.w	r0, r3, #8256	@ 0x2040
 80050ce:	300c      	adds	r0, #12
 80050d0:	2300      	movs	r3, #0
 80050d2:	68fa      	ldr	r2, [r7, #12]
 80050d4:	2100      	movs	r1, #0
 80050d6:	f7fd fae3 	bl	80026a0 <cBuffPull>
            return 0;
 80050da:	2300      	movs	r3, #0
 80050dc:	e000      	b.n	80050e0 <readFromQueue+0x76>
        }
    }

    return frameLen;
 80050de:	68bb      	ldr	r3, [r7, #8]
}
 80050e0:	4618      	mov	r0, r3
 80050e2:	3710      	adds	r7, #16
 80050e4:	46bd      	mov	sp, r7
 80050e6:	bd80      	pop	{r7, pc}

080050e8 <sdlInitLine>:
#endif

// SIMPLE DATA LINK FUNCTIONS -------------------------------------------------
void sdlInitLine(serial_line_handle* line, uint8_t (*txFunc)(uint8_t byte), uint8_t (*rxFunc)(uint8_t* byte), uint32_t timeout, uint32_t retries){
 80050e8:	b580      	push	{r7, lr}
 80050ea:	b084      	sub	sp, #16
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	60f8      	str	r0, [r7, #12]
 80050f0:	60b9      	str	r1, [r7, #8]
 80050f2:	607a      	str	r2, [r7, #4]
 80050f4:	603b      	str	r3, [r7, #0]
    if(line==NULL) return;
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d049      	beq.n	8005190 <sdlInitLine+0xa8>

    line->txFunc=txFunc;
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	68ba      	ldr	r2, [r7, #8]
 8005100:	601a      	str	r2, [r3, #0]
    line->rxFunc=rxFunc;
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	687a      	ldr	r2, [r7, #4]
 8005106:	605a      	str	r2, [r3, #4]
    cBuffInit(&line->rxBuff,line->rxBuffArray,sizeof(line->rxBuffArray),0);
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	f103 0008 	add.w	r0, r3, #8
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	f103 0118 	add.w	r1, r3, #24
 8005114:	2300      	movs	r3, #0
 8005116:	f241 020c 	movw	r2, #4108	@ 0x100c
 800511a:	f7fd f999 	bl	8002450 <cBuffInit>
    line->timeout=timeout;
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8005124:	461a      	mov	r2, r3
 8005126:	683b      	ldr	r3, [r7, #0]
 8005128:	6413      	str	r3, [r2, #64]	@ 0x40
    line->retries=retries;
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8005130:	461a      	mov	r2, r3
 8005132:	69bb      	ldr	r3, [r7, #24]
 8005134:	6453      	str	r3, [r2, #68]	@ 0x44
    line->lastRxHash=0;
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800513c:	2200      	movs	r2, #0
 800513e:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    cBuffInit(&line->tmpBuff,line->tmpBuffArray,sizeof(line->tmpBuffArray),0);
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	f503 5081 	add.w	r0, r3, #4128	@ 0x1020
 8005148:	3004      	adds	r0, #4
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	f503 5181 	add.w	r1, r3, #4128	@ 0x1020
 8005150:	3114      	adds	r1, #20
 8005152:	2300      	movs	r3, #0
 8005154:	f241 020c 	movw	r2, #4108	@ 0x100c
 8005158:	f7fd f97a 	bl	8002450 <cBuffInit>

#ifdef SDL_ANTILOCK_DEPTH
    cBuffInit(&line->alockBuff,line->alockBuffArray,sizeof(line->alockBuffArray),0);
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	f503 5001 	add.w	r0, r3, #8256	@ 0x2040
 8005162:	300c      	adds	r0, #12
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	f503 5101 	add.w	r1, r3, #8256	@ 0x2040
 800516a:	311c      	adds	r1, #28
 800516c:	2300      	movs	r3, #0
 800516e:	f44f 5220 	mov.w	r2, #10240	@ 0x2800
 8005172:	f7fd f96d 	bl	8002450 <cBuffInit>
    cBuffInit(&line->alockQueue,line->alockQueueArray,sizeof(line->alockQueueArray),0);
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	f503 4090 	add.w	r0, r3, #18432	@ 0x4800
 800517c:	305c      	adds	r0, #92	@ 0x5c
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	f503 4190 	add.w	r1, r3, #18432	@ 0x4800
 8005184:	316c      	adds	r1, #108	@ 0x6c
 8005186:	2300      	movs	r3, #0
 8005188:	2214      	movs	r2, #20
 800518a:	f7fd f961 	bl	8002450 <cBuffInit>
 800518e:	e000      	b.n	8005192 <sdlInitLine+0xaa>
    if(line==NULL) return;
 8005190:	bf00      	nop
#endif
}
 8005192:	3710      	adds	r7, #16
 8005194:	46bd      	mov	sp, r7
 8005196:	bd80      	pop	{r7, pc}

08005198 <sdlSend>:

uint8_t sdlSend(serial_line_handle* line, uint8_t* buff, uint32_t len, uint8_t ackWanted){
 8005198:	b580      	push	{r7, lr}
 800519a:	b08a      	sub	sp, #40	@ 0x28
 800519c:	af02      	add	r7, sp, #8
 800519e:	60f8      	str	r0, [r7, #12]
 80051a0:	60b9      	str	r1, [r7, #8]
 80051a2:	607a      	str	r2, [r7, #4]
 80051a4:	70fb      	strb	r3, [r7, #3]
    if(line==NULL || line->txFunc==NULL || buff==NULL || len==0) return 0;
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d009      	beq.n	80051c0 <sdlSend+0x28>
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d005      	beq.n	80051c0 <sdlSend+0x28>
 80051b4:	68bb      	ldr	r3, [r7, #8]
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d002      	beq.n	80051c0 <sdlSend+0x28>
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d101      	bne.n	80051c4 <sdlSend+0x2c>
 80051c0:	2300      	movs	r3, #0
 80051c2:	e04a      	b.n	800525a <sdlSend+0xc2>

    if(len>SDL_MAX_PAY_LEN) return 0;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80051ca:	d901      	bls.n	80051d0 <sdlSend+0x38>
 80051cc:	2300      	movs	r3, #0
 80051ce:	e044      	b.n	800525a <sdlSend+0xc2>

    //generating hash
    uint16_t hash=computeHash(buff,len);
 80051d0:	6879      	ldr	r1, [r7, #4]
 80051d2:	68b8      	ldr	r0, [r7, #8]
 80051d4:	f7ff fc5c 	bl	8004a90 <computeHash>
 80051d8:	4603      	mov	r3, r0
 80051da:	837b      	strh	r3, [r7, #26]

    //try sending frame
    uint32_t retryNum=0;
 80051dc:	2300      	movs	r3, #0
 80051de:	61fb      	str	r3, [r7, #28]
    do{
        retryNum++;
 80051e0:	69fb      	ldr	r3, [r7, #28]
 80051e2:	3301      	adds	r3, #1
 80051e4:	61fb      	str	r3, [r7, #28]
        
        //send data
        if(!sendFrame(line,FRMCODE_DATA,ackWanted,hash,buff,len)) continue;
 80051e6:	8b79      	ldrh	r1, [r7, #26]
 80051e8:	78fa      	ldrb	r2, [r7, #3]
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	9301      	str	r3, [sp, #4]
 80051ee:	68bb      	ldr	r3, [r7, #8]
 80051f0:	9300      	str	r3, [sp, #0]
 80051f2:	460b      	mov	r3, r1
 80051f4:	2100      	movs	r1, #0
 80051f6:	68f8      	ldr	r0, [r7, #12]
 80051f8:	f7ff fce2 	bl	8004bc0 <sendFrame>
 80051fc:	4603      	mov	r3, r0
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d022      	beq.n	8005248 <sdlSend+0xb0>

        if(!ackWanted) return 1;
 8005202:	78fb      	ldrb	r3, [r7, #3]
 8005204:	2b00      	cmp	r3, #0
 8005206:	d101      	bne.n	800520c <sdlSend+0x74>
 8005208:	2301      	movs	r3, #1
 800520a:	e026      	b.n	800525a <sdlSend+0xc2>
#ifdef SDL_DEBUG
        __sdlTestSendCallback(line);
#endif

        //saving starting tick for timeout
        uint32_t startTick=sdlTimeTick();
 800520c:	f7fe f850 	bl	80032b0 <sdlTimeTick>
 8005210:	6178      	str	r0, [r7, #20]
        do{
            if(receiveAck(line,hash)) return 1;
 8005212:	8b7b      	ldrh	r3, [r7, #26]
 8005214:	4619      	mov	r1, r3
 8005216:	68f8      	ldr	r0, [r7, #12]
 8005218:	f7ff feb8 	bl	8004f8c <receiveAck>
 800521c:	4603      	mov	r3, r0
 800521e:	2b00      	cmp	r3, #0
 8005220:	d001      	beq.n	8005226 <sdlSend+0x8e>
 8005222:	2301      	movs	r3, #1
 8005224:	e019      	b.n	800525a <sdlSend+0xc2>

#ifdef SDL_ANTILOCK_DEPTH
        //if anti lock active, fill the queue while waiting
        receiveInQueueAndAck(line,FRMCODE_DATA,NULL);
 8005226:	2200      	movs	r2, #0
 8005228:	2100      	movs	r1, #0
 800522a:	68f8      	ldr	r0, [r7, #12]
 800522c:	f7ff fee2 	bl	8004ff4 <receiveInQueueAndAck>
#endif
        }while((sdlTimeTick()-startTick)<=line->timeout);
 8005230:	f7fe f83e 	bl	80032b0 <sdlTimeTick>
 8005234:	4602      	mov	r2, r0
 8005236:	697b      	ldr	r3, [r7, #20]
 8005238:	1ad2      	subs	r2, r2, r3
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8005240:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005242:	429a      	cmp	r2, r3
 8005244:	d9e5      	bls.n	8005212 <sdlSend+0x7a>
 8005246:	e000      	b.n	800524a <sdlSend+0xb2>
        if(!sendFrame(line,FRMCODE_DATA,ackWanted,hash,buff,len)) continue;
 8005248:	bf00      	nop

    }while(retryNum<=line->retries);
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8005250:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005252:	69fa      	ldr	r2, [r7, #28]
 8005254:	429a      	cmp	r2, r3
 8005256:	d9c3      	bls.n	80051e0 <sdlSend+0x48>

    return 0;
 8005258:	2300      	movs	r3, #0
}
 800525a:	4618      	mov	r0, r3
 800525c:	3720      	adds	r7, #32
 800525e:	46bd      	mov	sp, r7
 8005260:	bd80      	pop	{r7, pc}

08005262 <sdlReceive>:

uint32_t sdlReceive(serial_line_handle* line, uint8_t* buff, uint32_t len){
 8005262:	b580      	push	{r7, lr}
 8005264:	b08e      	sub	sp, #56	@ 0x38
 8005266:	af00      	add	r7, sp, #0
 8005268:	60f8      	str	r0, [r7, #12]
 800526a:	60b9      	str	r1, [r7, #8]
 800526c:	607a      	str	r2, [r7, #4]
    if(line==NULL || line->rxFunc==NULL) return 0;
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	2b00      	cmp	r3, #0
 8005272:	d003      	beq.n	800527c <sdlReceive+0x1a>
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	685b      	ldr	r3, [r3, #4]
 8005278:	2b00      	cmp	r3, #0
 800527a:	d101      	bne.n	8005280 <sdlReceive+0x1e>
 800527c:	2300      	movs	r3, #0
 800527e:	e029      	b.n	80052d4 <sdlReceive+0x72>

    uint32_t retVal=0;
 8005280:	2300      	movs	r3, #0
 8005282:	637b      	str	r3, [r7, #52]	@ 0x34

    //temporary cBuffer
    circular_buffer_handle dummyHandle;
    cBuffInit(&dummyHandle, buff, len,0);
 8005284:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8005288:	2300      	movs	r3, #0
 800528a:	687a      	ldr	r2, [r7, #4]
 800528c:	68b9      	ldr	r1, [r7, #8]
 800528e:	f7fd f8df 	bl	8002450 <cBuffInit>

#ifdef SDL_ANTILOCK_DEPTH
    //try reading from queue
    retVal=readFromQueue(line, &dummyHandle);
 8005292:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005296:	4619      	mov	r1, r3
 8005298:	68f8      	ldr	r0, [r7, #12]
 800529a:	f7ff fee6 	bl	800506a <readFromQueue>
 800529e:	6378      	str	r0, [r7, #52]	@ 0x34
    if(retVal) return retVal;
 80052a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d001      	beq.n	80052aa <sdlReceive+0x48>
 80052a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80052a8:	e014      	b.n	80052d4 <sdlReceive+0x72>
#endif

    //otherwise try receiving a fresh frame
    uint8_t remCode[]={FRMCODE_ACK}; //we remove old acks from buffer
 80052aa:	2301      	movs	r3, #1
 80052ac:	f887 3020 	strb.w	r3, [r7, #32]
    circular_buffer_handle remCodes;
    cBuffInit(&remCodes,remCode,sizeof(remCode),sizeof(remCode));
 80052b0:	f107 0120 	add.w	r1, r7, #32
 80052b4:	f107 0010 	add.w	r0, r7, #16
 80052b8:	2301      	movs	r3, #1
 80052ba:	2201      	movs	r2, #1
 80052bc:	f7fd f8c8 	bl	8002450 <cBuffInit>
    retVal=receiveFrameAndAck(line,&dummyHandle,FRMCODE_DATA,&remCodes);
 80052c0:	f107 0310 	add.w	r3, r7, #16
 80052c4:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 80052c8:	2200      	movs	r2, #0
 80052ca:	68f8      	ldr	r0, [r7, #12]
 80052cc:	f7ff fdea 	bl	8004ea4 <receiveFrameAndAck>
 80052d0:	6378      	str	r0, [r7, #52]	@ 0x34

    return retVal;
 80052d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80052d4:	4618      	mov	r0, r3
 80052d6:	3738      	adds	r7, #56	@ 0x38
 80052d8:	46bd      	mov	sp, r7
 80052da:	bd80      	pop	{r7, pc}

080052dc <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80052dc:	b580      	push	{r7, lr}
 80052de:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80052e0:	4b1b      	ldr	r3, [pc, #108]	@ (8005350 <MX_SPI2_Init+0x74>)
 80052e2:	4a1c      	ldr	r2, [pc, #112]	@ (8005354 <MX_SPI2_Init+0x78>)
 80052e4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80052e6:	4b1a      	ldr	r3, [pc, #104]	@ (8005350 <MX_SPI2_Init+0x74>)
 80052e8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80052ec:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80052ee:	4b18      	ldr	r3, [pc, #96]	@ (8005350 <MX_SPI2_Init+0x74>)
 80052f0:	2200      	movs	r2, #0
 80052f2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80052f4:	4b16      	ldr	r3, [pc, #88]	@ (8005350 <MX_SPI2_Init+0x74>)
 80052f6:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80052fa:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80052fc:	4b14      	ldr	r3, [pc, #80]	@ (8005350 <MX_SPI2_Init+0x74>)
 80052fe:	2200      	movs	r2, #0
 8005300:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8005302:	4b13      	ldr	r3, [pc, #76]	@ (8005350 <MX_SPI2_Init+0x74>)
 8005304:	2200      	movs	r2, #0
 8005306:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8005308:	4b11      	ldr	r3, [pc, #68]	@ (8005350 <MX_SPI2_Init+0x74>)
 800530a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800530e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8005310:	4b0f      	ldr	r3, [pc, #60]	@ (8005350 <MX_SPI2_Init+0x74>)
 8005312:	2220      	movs	r2, #32
 8005314:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8005316:	4b0e      	ldr	r3, [pc, #56]	@ (8005350 <MX_SPI2_Init+0x74>)
 8005318:	2200      	movs	r2, #0
 800531a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800531c:	4b0c      	ldr	r3, [pc, #48]	@ (8005350 <MX_SPI2_Init+0x74>)
 800531e:	2200      	movs	r2, #0
 8005320:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005322:	4b0b      	ldr	r3, [pc, #44]	@ (8005350 <MX_SPI2_Init+0x74>)
 8005324:	2200      	movs	r2, #0
 8005326:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8005328:	4b09      	ldr	r3, [pc, #36]	@ (8005350 <MX_SPI2_Init+0x74>)
 800532a:	2207      	movs	r2, #7
 800532c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800532e:	4b08      	ldr	r3, [pc, #32]	@ (8005350 <MX_SPI2_Init+0x74>)
 8005330:	2200      	movs	r2, #0
 8005332:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8005334:	4b06      	ldr	r3, [pc, #24]	@ (8005350 <MX_SPI2_Init+0x74>)
 8005336:	2208      	movs	r2, #8
 8005338:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800533a:	4805      	ldr	r0, [pc, #20]	@ (8005350 <MX_SPI2_Init+0x74>)
 800533c:	f004 f8f0 	bl	8009520 <HAL_SPI_Init>
 8005340:	4603      	mov	r3, r0
 8005342:	2b00      	cmp	r3, #0
 8005344:	d001      	beq.n	800534a <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8005346:	f7fe fdd3 	bl	8003ef0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800534a:	bf00      	nop
 800534c:	bd80      	pop	{r7, pc}
 800534e:	bf00      	nop
 8005350:	200231a8 	.word	0x200231a8
 8005354:	40003800 	.word	0x40003800

08005358 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8005358:	b580      	push	{r7, lr}
 800535a:	b08a      	sub	sp, #40	@ 0x28
 800535c:	af00      	add	r7, sp, #0
 800535e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005360:	f107 0314 	add.w	r3, r7, #20
 8005364:	2200      	movs	r2, #0
 8005366:	601a      	str	r2, [r3, #0]
 8005368:	605a      	str	r2, [r3, #4]
 800536a:	609a      	str	r2, [r3, #8]
 800536c:	60da      	str	r2, [r3, #12]
 800536e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	4a17      	ldr	r2, [pc, #92]	@ (80053d4 <HAL_SPI_MspInit+0x7c>)
 8005376:	4293      	cmp	r3, r2
 8005378:	d128      	bne.n	80053cc <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800537a:	4b17      	ldr	r3, [pc, #92]	@ (80053d8 <HAL_SPI_MspInit+0x80>)
 800537c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800537e:	4a16      	ldr	r2, [pc, #88]	@ (80053d8 <HAL_SPI_MspInit+0x80>)
 8005380:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005384:	6593      	str	r3, [r2, #88]	@ 0x58
 8005386:	4b14      	ldr	r3, [pc, #80]	@ (80053d8 <HAL_SPI_MspInit+0x80>)
 8005388:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800538a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800538e:	613b      	str	r3, [r7, #16]
 8005390:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005392:	4b11      	ldr	r3, [pc, #68]	@ (80053d8 <HAL_SPI_MspInit+0x80>)
 8005394:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005396:	4a10      	ldr	r2, [pc, #64]	@ (80053d8 <HAL_SPI_MspInit+0x80>)
 8005398:	f043 0302 	orr.w	r3, r3, #2
 800539c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800539e:	4b0e      	ldr	r3, [pc, #56]	@ (80053d8 <HAL_SPI_MspInit+0x80>)
 80053a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80053a2:	f003 0302 	and.w	r3, r3, #2
 80053a6:	60fb      	str	r3, [r7, #12]
 80053a8:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80053aa:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 80053ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80053b0:	2302      	movs	r3, #2
 80053b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80053b4:	2300      	movs	r3, #0
 80053b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80053b8:	2303      	movs	r3, #3
 80053ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80053bc:	2305      	movs	r3, #5
 80053be:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80053c0:	f107 0314 	add.w	r3, r7, #20
 80053c4:	4619      	mov	r1, r3
 80053c6:	4805      	ldr	r0, [pc, #20]	@ (80053dc <HAL_SPI_MspInit+0x84>)
 80053c8:	f002 fcec 	bl	8007da4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80053cc:	bf00      	nop
 80053ce:	3728      	adds	r7, #40	@ 0x28
 80053d0:	46bd      	mov	sp, r7
 80053d2:	bd80      	pop	{r7, pc}
 80053d4:	40003800 	.word	0x40003800
 80053d8:	40021000 	.word	0x40021000
 80053dc:	48000400 	.word	0x48000400

080053e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80053e0:	b580      	push	{r7, lr}
 80053e2:	b082      	sub	sp, #8
 80053e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80053e6:	4b11      	ldr	r3, [pc, #68]	@ (800542c <HAL_MspInit+0x4c>)
 80053e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80053ea:	4a10      	ldr	r2, [pc, #64]	@ (800542c <HAL_MspInit+0x4c>)
 80053ec:	f043 0301 	orr.w	r3, r3, #1
 80053f0:	6613      	str	r3, [r2, #96]	@ 0x60
 80053f2:	4b0e      	ldr	r3, [pc, #56]	@ (800542c <HAL_MspInit+0x4c>)
 80053f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80053f6:	f003 0301 	and.w	r3, r3, #1
 80053fa:	607b      	str	r3, [r7, #4]
 80053fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80053fe:	4b0b      	ldr	r3, [pc, #44]	@ (800542c <HAL_MspInit+0x4c>)
 8005400:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005402:	4a0a      	ldr	r2, [pc, #40]	@ (800542c <HAL_MspInit+0x4c>)
 8005404:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005408:	6593      	str	r3, [r2, #88]	@ 0x58
 800540a:	4b08      	ldr	r3, [pc, #32]	@ (800542c <HAL_MspInit+0x4c>)
 800540c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800540e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005412:	603b      	str	r3, [r7, #0]
 8005414:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8005416:	2200      	movs	r2, #0
 8005418:	210f      	movs	r1, #15
 800541a:	f06f 0001 	mvn.w	r0, #1
 800541e:	f002 fc17 	bl	8007c50 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005422:	bf00      	nop
 8005424:	3708      	adds	r7, #8
 8005426:	46bd      	mov	sp, r7
 8005428:	bd80      	pop	{r7, pc}
 800542a:	bf00      	nop
 800542c:	40021000 	.word	0x40021000

08005430 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005430:	b580      	push	{r7, lr}
 8005432:	b08e      	sub	sp, #56	@ 0x38
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8005438:	2300      	movs	r3, #0
 800543a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800543e:	4b34      	ldr	r3, [pc, #208]	@ (8005510 <HAL_InitTick+0xe0>)
 8005440:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005442:	4a33      	ldr	r2, [pc, #204]	@ (8005510 <HAL_InitTick+0xe0>)
 8005444:	f043 0310 	orr.w	r3, r3, #16
 8005448:	6593      	str	r3, [r2, #88]	@ 0x58
 800544a:	4b31      	ldr	r3, [pc, #196]	@ (8005510 <HAL_InitTick+0xe0>)
 800544c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800544e:	f003 0310 	and.w	r3, r3, #16
 8005452:	60fb      	str	r3, [r7, #12]
 8005454:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8005456:	f107 0210 	add.w	r2, r7, #16
 800545a:	f107 0314 	add.w	r3, r7, #20
 800545e:	4611      	mov	r1, r2
 8005460:	4618      	mov	r0, r3
 8005462:	f003 fc6d 	bl	8008d40 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8005466:	6a3b      	ldr	r3, [r7, #32]
 8005468:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800546a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800546c:	2b00      	cmp	r3, #0
 800546e:	d103      	bne.n	8005478 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8005470:	f003 fc3a 	bl	8008ce8 <HAL_RCC_GetPCLK1Freq>
 8005474:	6378      	str	r0, [r7, #52]	@ 0x34
 8005476:	e004      	b.n	8005482 <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8005478:	f003 fc36 	bl	8008ce8 <HAL_RCC_GetPCLK1Freq>
 800547c:	4603      	mov	r3, r0
 800547e:	005b      	lsls	r3, r3, #1
 8005480:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8005482:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005484:	4a23      	ldr	r2, [pc, #140]	@ (8005514 <HAL_InitTick+0xe4>)
 8005486:	fba2 2303 	umull	r2, r3, r2, r3
 800548a:	0c9b      	lsrs	r3, r3, #18
 800548c:	3b01      	subs	r3, #1
 800548e:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8005490:	4b21      	ldr	r3, [pc, #132]	@ (8005518 <HAL_InitTick+0xe8>)
 8005492:	4a22      	ldr	r2, [pc, #136]	@ (800551c <HAL_InitTick+0xec>)
 8005494:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8005496:	4b20      	ldr	r3, [pc, #128]	@ (8005518 <HAL_InitTick+0xe8>)
 8005498:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800549c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800549e:	4a1e      	ldr	r2, [pc, #120]	@ (8005518 <HAL_InitTick+0xe8>)
 80054a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054a2:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80054a4:	4b1c      	ldr	r3, [pc, #112]	@ (8005518 <HAL_InitTick+0xe8>)
 80054a6:	2200      	movs	r2, #0
 80054a8:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80054aa:	4b1b      	ldr	r3, [pc, #108]	@ (8005518 <HAL_InitTick+0xe8>)
 80054ac:	2200      	movs	r2, #0
 80054ae:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80054b0:	4b19      	ldr	r3, [pc, #100]	@ (8005518 <HAL_InitTick+0xe8>)
 80054b2:	2200      	movs	r2, #0
 80054b4:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80054b6:	4818      	ldr	r0, [pc, #96]	@ (8005518 <HAL_InitTick+0xe8>)
 80054b8:	f004 ff42 	bl	800a340 <HAL_TIM_Base_Init>
 80054bc:	4603      	mov	r3, r0
 80054be:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80054c2:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d11b      	bne.n	8005502 <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80054ca:	4813      	ldr	r0, [pc, #76]	@ (8005518 <HAL_InitTick+0xe8>)
 80054cc:	f004 ff90 	bl	800a3f0 <HAL_TIM_Base_Start_IT>
 80054d0:	4603      	mov	r3, r0
 80054d2:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80054d6:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d111      	bne.n	8005502 <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80054de:	2036      	movs	r0, #54	@ 0x36
 80054e0:	f002 fbd2 	bl	8007c88 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2b0f      	cmp	r3, #15
 80054e8:	d808      	bhi.n	80054fc <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80054ea:	2200      	movs	r2, #0
 80054ec:	6879      	ldr	r1, [r7, #4]
 80054ee:	2036      	movs	r0, #54	@ 0x36
 80054f0:	f002 fbae 	bl	8007c50 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80054f4:	4a0a      	ldr	r2, [pc, #40]	@ (8005520 <HAL_InitTick+0xf0>)
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	6013      	str	r3, [r2, #0]
 80054fa:	e002      	b.n	8005502 <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 80054fc:	2301      	movs	r3, #1
 80054fe:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8005502:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8005506:	4618      	mov	r0, r3
 8005508:	3738      	adds	r7, #56	@ 0x38
 800550a:	46bd      	mov	sp, r7
 800550c:	bd80      	pop	{r7, pc}
 800550e:	bf00      	nop
 8005510:	40021000 	.word	0x40021000
 8005514:	431bde83 	.word	0x431bde83
 8005518:	2002320c 	.word	0x2002320c
 800551c:	40001000 	.word	0x40001000
 8005520:	2000002c 	.word	0x2000002c

08005524 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005524:	b480      	push	{r7}
 8005526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005528:	bf00      	nop
 800552a:	e7fd      	b.n	8005528 <NMI_Handler+0x4>

0800552c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800552c:	b480      	push	{r7}
 800552e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005530:	bf00      	nop
 8005532:	e7fd      	b.n	8005530 <HardFault_Handler+0x4>

08005534 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005534:	b480      	push	{r7}
 8005536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005538:	bf00      	nop
 800553a:	e7fd      	b.n	8005538 <MemManage_Handler+0x4>

0800553c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800553c:	b480      	push	{r7}
 800553e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005540:	bf00      	nop
 8005542:	e7fd      	b.n	8005540 <BusFault_Handler+0x4>

08005544 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005544:	b480      	push	{r7}
 8005546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005548:	bf00      	nop
 800554a:	e7fd      	b.n	8005548 <UsageFault_Handler+0x4>

0800554c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800554c:	b480      	push	{r7}
 800554e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005550:	bf00      	nop
 8005552:	46bd      	mov	sp, r7
 8005554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005558:	4770      	bx	lr
	...

0800555c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800555c:	b580      	push	{r7, lr}
 800555e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8005560:	4802      	ldr	r0, [pc, #8]	@ (800556c <USART1_IRQHandler+0x10>)
 8005562:	f006 f973 	bl	800b84c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8005566:	bf00      	nop
 8005568:	bd80      	pop	{r7, pc}
 800556a:	bf00      	nop
 800556c:	200233c4 	.word	0x200233c4

08005570 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8005570:	b580      	push	{r7, lr}
 8005572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8005574:	4802      	ldr	r0, [pc, #8]	@ (8005580 <USART2_IRQHandler+0x10>)
 8005576:	f006 f969 	bl	800b84c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800557a:	bf00      	nop
 800557c:	bd80      	pop	{r7, pc}
 800557e:	bf00      	nop
 8005580:	20023448 	.word	0x20023448

08005584 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8005584:	b580      	push	{r7, lr}
 8005586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8005588:	4802      	ldr	r0, [pc, #8]	@ (8005594 <USART3_IRQHandler+0x10>)
 800558a:	f006 f95f 	bl	800b84c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800558e:	bf00      	nop
 8005590:	bd80      	pop	{r7, pc}
 8005592:	bf00      	nop
 8005594:	200234cc 	.word	0x200234cc

08005598 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8005598:	b580      	push	{r7, lr}
 800559a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 800559c:	4802      	ldr	r0, [pc, #8]	@ (80055a8 <UART4_IRQHandler+0x10>)
 800559e:	f006 f955 	bl	800b84c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80055a2:	bf00      	nop
 80055a4:	bd80      	pop	{r7, pc}
 80055a6:	bf00      	nop
 80055a8:	20023340 	.word	0x20023340

080055ac <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 underrun error interrupt.
  */
void TIM6_DAC_IRQHandler(void)
{
 80055ac:	b580      	push	{r7, lr}
 80055ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80055b0:	4802      	ldr	r0, [pc, #8]	@ (80055bc <TIM6_DAC_IRQHandler+0x10>)
 80055b2:	f005 f863 	bl	800a67c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80055b6:	bf00      	nop
 80055b8:	bd80      	pop	{r7, pc}
 80055ba:	bf00      	nop
 80055bc:	2002320c 	.word	0x2002320c

080055c0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80055c0:	b480      	push	{r7}
 80055c2:	af00      	add	r7, sp, #0
	return 1;
 80055c4:	2301      	movs	r3, #1
}
 80055c6:	4618      	mov	r0, r3
 80055c8:	46bd      	mov	sp, r7
 80055ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ce:	4770      	bx	lr

080055d0 <_kill>:

int _kill(int pid, int sig)
{
 80055d0:	b580      	push	{r7, lr}
 80055d2:	b082      	sub	sp, #8
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
 80055d8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80055da:	f00a ff81 	bl	80104e0 <__errno>
 80055de:	4603      	mov	r3, r0
 80055e0:	2216      	movs	r2, #22
 80055e2:	601a      	str	r2, [r3, #0]
	return -1;
 80055e4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80055e8:	4618      	mov	r0, r3
 80055ea:	3708      	adds	r7, #8
 80055ec:	46bd      	mov	sp, r7
 80055ee:	bd80      	pop	{r7, pc}

080055f0 <_exit>:

void _exit (int status)
{
 80055f0:	b580      	push	{r7, lr}
 80055f2:	b082      	sub	sp, #8
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80055f8:	f04f 31ff 	mov.w	r1, #4294967295
 80055fc:	6878      	ldr	r0, [r7, #4]
 80055fe:	f7ff ffe7 	bl	80055d0 <_kill>
	while (1) {}		/* Make sure we hang here */
 8005602:	bf00      	nop
 8005604:	e7fd      	b.n	8005602 <_exit+0x12>

08005606 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005606:	b580      	push	{r7, lr}
 8005608:	b086      	sub	sp, #24
 800560a:	af00      	add	r7, sp, #0
 800560c:	60f8      	str	r0, [r7, #12]
 800560e:	60b9      	str	r1, [r7, #8]
 8005610:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005612:	2300      	movs	r3, #0
 8005614:	617b      	str	r3, [r7, #20]
 8005616:	e00a      	b.n	800562e <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8005618:	f3af 8000 	nop.w
 800561c:	4601      	mov	r1, r0
 800561e:	68bb      	ldr	r3, [r7, #8]
 8005620:	1c5a      	adds	r2, r3, #1
 8005622:	60ba      	str	r2, [r7, #8]
 8005624:	b2ca      	uxtb	r2, r1
 8005626:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005628:	697b      	ldr	r3, [r7, #20]
 800562a:	3301      	adds	r3, #1
 800562c:	617b      	str	r3, [r7, #20]
 800562e:	697a      	ldr	r2, [r7, #20]
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	429a      	cmp	r2, r3
 8005634:	dbf0      	blt.n	8005618 <_read+0x12>
	}

return len;
 8005636:	687b      	ldr	r3, [r7, #4]
}
 8005638:	4618      	mov	r0, r3
 800563a:	3718      	adds	r7, #24
 800563c:	46bd      	mov	sp, r7
 800563e:	bd80      	pop	{r7, pc}

08005640 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8005640:	b580      	push	{r7, lr}
 8005642:	b086      	sub	sp, #24
 8005644:	af00      	add	r7, sp, #0
 8005646:	60f8      	str	r0, [r7, #12]
 8005648:	60b9      	str	r1, [r7, #8]
 800564a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800564c:	2300      	movs	r3, #0
 800564e:	617b      	str	r3, [r7, #20]
 8005650:	e009      	b.n	8005666 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8005652:	68bb      	ldr	r3, [r7, #8]
 8005654:	1c5a      	adds	r2, r3, #1
 8005656:	60ba      	str	r2, [r7, #8]
 8005658:	781b      	ldrb	r3, [r3, #0]
 800565a:	4618      	mov	r0, r3
 800565c:	f7fd fe30 	bl	80032c0 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005660:	697b      	ldr	r3, [r7, #20]
 8005662:	3301      	adds	r3, #1
 8005664:	617b      	str	r3, [r7, #20]
 8005666:	697a      	ldr	r2, [r7, #20]
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	429a      	cmp	r2, r3
 800566c:	dbf1      	blt.n	8005652 <_write+0x12>
	}
	return len;
 800566e:	687b      	ldr	r3, [r7, #4]
}
 8005670:	4618      	mov	r0, r3
 8005672:	3718      	adds	r7, #24
 8005674:	46bd      	mov	sp, r7
 8005676:	bd80      	pop	{r7, pc}

08005678 <_close>:

int _close(int file)
{
 8005678:	b480      	push	{r7}
 800567a:	b083      	sub	sp, #12
 800567c:	af00      	add	r7, sp, #0
 800567e:	6078      	str	r0, [r7, #4]
	return -1;
 8005680:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005684:	4618      	mov	r0, r3
 8005686:	370c      	adds	r7, #12
 8005688:	46bd      	mov	sp, r7
 800568a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568e:	4770      	bx	lr

08005690 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005690:	b480      	push	{r7}
 8005692:	b083      	sub	sp, #12
 8005694:	af00      	add	r7, sp, #0
 8005696:	6078      	str	r0, [r7, #4]
 8005698:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800569a:	683b      	ldr	r3, [r7, #0]
 800569c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80056a0:	605a      	str	r2, [r3, #4]
	return 0;
 80056a2:	2300      	movs	r3, #0
}
 80056a4:	4618      	mov	r0, r3
 80056a6:	370c      	adds	r7, #12
 80056a8:	46bd      	mov	sp, r7
 80056aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ae:	4770      	bx	lr

080056b0 <_isatty>:

int _isatty(int file)
{
 80056b0:	b480      	push	{r7}
 80056b2:	b083      	sub	sp, #12
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]
	return 1;
 80056b8:	2301      	movs	r3, #1
}
 80056ba:	4618      	mov	r0, r3
 80056bc:	370c      	adds	r7, #12
 80056be:	46bd      	mov	sp, r7
 80056c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c4:	4770      	bx	lr

080056c6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80056c6:	b480      	push	{r7}
 80056c8:	b085      	sub	sp, #20
 80056ca:	af00      	add	r7, sp, #0
 80056cc:	60f8      	str	r0, [r7, #12]
 80056ce:	60b9      	str	r1, [r7, #8]
 80056d0:	607a      	str	r2, [r7, #4]
	return 0;
 80056d2:	2300      	movs	r3, #0
}
 80056d4:	4618      	mov	r0, r3
 80056d6:	3714      	adds	r7, #20
 80056d8:	46bd      	mov	sp, r7
 80056da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056de:	4770      	bx	lr

080056e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80056e0:	b580      	push	{r7, lr}
 80056e2:	b086      	sub	sp, #24
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80056e8:	4a14      	ldr	r2, [pc, #80]	@ (800573c <_sbrk+0x5c>)
 80056ea:	4b15      	ldr	r3, [pc, #84]	@ (8005740 <_sbrk+0x60>)
 80056ec:	1ad3      	subs	r3, r2, r3
 80056ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80056f0:	697b      	ldr	r3, [r7, #20]
 80056f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80056f4:	4b13      	ldr	r3, [pc, #76]	@ (8005744 <_sbrk+0x64>)
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d102      	bne.n	8005702 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80056fc:	4b11      	ldr	r3, [pc, #68]	@ (8005744 <_sbrk+0x64>)
 80056fe:	4a12      	ldr	r2, [pc, #72]	@ (8005748 <_sbrk+0x68>)
 8005700:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005702:	4b10      	ldr	r3, [pc, #64]	@ (8005744 <_sbrk+0x64>)
 8005704:	681a      	ldr	r2, [r3, #0]
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	4413      	add	r3, r2
 800570a:	693a      	ldr	r2, [r7, #16]
 800570c:	429a      	cmp	r2, r3
 800570e:	d207      	bcs.n	8005720 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005710:	f00a fee6 	bl	80104e0 <__errno>
 8005714:	4603      	mov	r3, r0
 8005716:	220c      	movs	r2, #12
 8005718:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800571a:	f04f 33ff 	mov.w	r3, #4294967295
 800571e:	e009      	b.n	8005734 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005720:	4b08      	ldr	r3, [pc, #32]	@ (8005744 <_sbrk+0x64>)
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005726:	4b07      	ldr	r3, [pc, #28]	@ (8005744 <_sbrk+0x64>)
 8005728:	681a      	ldr	r2, [r3, #0]
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	4413      	add	r3, r2
 800572e:	4a05      	ldr	r2, [pc, #20]	@ (8005744 <_sbrk+0x64>)
 8005730:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005732:	68fb      	ldr	r3, [r7, #12]
}
 8005734:	4618      	mov	r0, r3
 8005736:	3718      	adds	r7, #24
 8005738:	46bd      	mov	sp, r7
 800573a:	bd80      	pop	{r7, pc}
 800573c:	20028000 	.word	0x20028000
 8005740:	00000400 	.word	0x00000400
 8005744:	20023258 	.word	0x20023258
 8005748:	20023910 	.word	0x20023910

0800574c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800574c:	b480      	push	{r7}
 800574e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8005750:	4b06      	ldr	r3, [pc, #24]	@ (800576c <SystemInit+0x20>)
 8005752:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005756:	4a05      	ldr	r2, [pc, #20]	@ (800576c <SystemInit+0x20>)
 8005758:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800575c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8005760:	bf00      	nop
 8005762:	46bd      	mov	sp, r7
 8005764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005768:	4770      	bx	lr
 800576a:	bf00      	nop
 800576c:	e000ed00 	.word	0xe000ed00

08005770 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8005770:	b580      	push	{r7, lr}
 8005772:	b09a      	sub	sp, #104	@ 0x68
 8005774:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005776:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800577a:	2200      	movs	r2, #0
 800577c:	601a      	str	r2, [r3, #0]
 800577e:	605a      	str	r2, [r3, #4]
 8005780:	609a      	str	r2, [r3, #8]
 8005782:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005784:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8005788:	2200      	movs	r2, #0
 800578a:	601a      	str	r2, [r3, #0]
 800578c:	605a      	str	r2, [r3, #4]
 800578e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005790:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8005794:	2200      	movs	r2, #0
 8005796:	601a      	str	r2, [r3, #0]
 8005798:	605a      	str	r2, [r3, #4]
 800579a:	609a      	str	r2, [r3, #8]
 800579c:	60da      	str	r2, [r3, #12]
 800579e:	611a      	str	r2, [r3, #16]
 80057a0:	615a      	str	r2, [r3, #20]
 80057a2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80057a4:	1d3b      	adds	r3, r7, #4
 80057a6:	222c      	movs	r2, #44	@ 0x2c
 80057a8:	2100      	movs	r1, #0
 80057aa:	4618      	mov	r0, r3
 80057ac:	f00a fe36 	bl	801041c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80057b0:	4b49      	ldr	r3, [pc, #292]	@ (80058d8 <MX_TIM1_Init+0x168>)
 80057b2:	4a4a      	ldr	r2, [pc, #296]	@ (80058dc <MX_TIM1_Init+0x16c>)
 80057b4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80057b6:	4b48      	ldr	r3, [pc, #288]	@ (80058d8 <MX_TIM1_Init+0x168>)
 80057b8:	2200      	movs	r2, #0
 80057ba:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80057bc:	4b46      	ldr	r3, [pc, #280]	@ (80058d8 <MX_TIM1_Init+0x168>)
 80057be:	2200      	movs	r2, #0
 80057c0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 199;
 80057c2:	4b45      	ldr	r3, [pc, #276]	@ (80058d8 <MX_TIM1_Init+0x168>)
 80057c4:	22c7      	movs	r2, #199	@ 0xc7
 80057c6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80057c8:	4b43      	ldr	r3, [pc, #268]	@ (80058d8 <MX_TIM1_Init+0x168>)
 80057ca:	2200      	movs	r2, #0
 80057cc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80057ce:	4b42      	ldr	r3, [pc, #264]	@ (80058d8 <MX_TIM1_Init+0x168>)
 80057d0:	2200      	movs	r2, #0
 80057d2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80057d4:	4b40      	ldr	r3, [pc, #256]	@ (80058d8 <MX_TIM1_Init+0x168>)
 80057d6:	2200      	movs	r2, #0
 80057d8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80057da:	483f      	ldr	r0, [pc, #252]	@ (80058d8 <MX_TIM1_Init+0x168>)
 80057dc:	f004 fdb0 	bl	800a340 <HAL_TIM_Base_Init>
 80057e0:	4603      	mov	r3, r0
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d001      	beq.n	80057ea <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80057e6:	f7fe fb83 	bl	8003ef0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80057ea:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80057ee:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80057f0:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80057f4:	4619      	mov	r1, r3
 80057f6:	4838      	ldr	r0, [pc, #224]	@ (80058d8 <MX_TIM1_Init+0x168>)
 80057f8:	f005 f974 	bl	800aae4 <HAL_TIM_ConfigClockSource>
 80057fc:	4603      	mov	r3, r0
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d001      	beq.n	8005806 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8005802:	f7fe fb75 	bl	8003ef0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8005806:	4834      	ldr	r0, [pc, #208]	@ (80058d8 <MX_TIM1_Init+0x168>)
 8005808:	f004 fe4e 	bl	800a4a8 <HAL_TIM_PWM_Init>
 800580c:	4603      	mov	r3, r0
 800580e:	2b00      	cmp	r3, #0
 8005810:	d001      	beq.n	8005816 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8005812:	f7fe fb6d 	bl	8003ef0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005816:	2300      	movs	r3, #0
 8005818:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800581a:	2300      	movs	r3, #0
 800581c:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800581e:	2300      	movs	r3, #0
 8005820:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8005822:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8005826:	4619      	mov	r1, r3
 8005828:	482b      	ldr	r0, [pc, #172]	@ (80058d8 <MX_TIM1_Init+0x168>)
 800582a:	f005 fdf9 	bl	800b420 <HAL_TIMEx_MasterConfigSynchronization>
 800582e:	4603      	mov	r3, r0
 8005830:	2b00      	cmp	r3, #0
 8005832:	d001      	beq.n	8005838 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 8005834:	f7fe fb5c 	bl	8003ef0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005838:	2360      	movs	r3, #96	@ 0x60
 800583a:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 800583c:	2300      	movs	r3, #0
 800583e:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005840:	2300      	movs	r3, #0
 8005842:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8005844:	2300      	movs	r3, #0
 8005846:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005848:	2300      	movs	r3, #0
 800584a:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800584c:	2300      	movs	r3, #0
 800584e:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8005850:	2300      	movs	r3, #0
 8005852:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005854:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8005858:	2200      	movs	r2, #0
 800585a:	4619      	mov	r1, r3
 800585c:	481e      	ldr	r0, [pc, #120]	@ (80058d8 <MX_TIM1_Init+0x168>)
 800585e:	f005 f82d 	bl	800a8bc <HAL_TIM_PWM_ConfigChannel>
 8005862:	4603      	mov	r3, r0
 8005864:	2b00      	cmp	r3, #0
 8005866:	d001      	beq.n	800586c <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 8005868:	f7fe fb42 	bl	8003ef0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800586c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8005870:	2204      	movs	r2, #4
 8005872:	4619      	mov	r1, r3
 8005874:	4818      	ldr	r0, [pc, #96]	@ (80058d8 <MX_TIM1_Init+0x168>)
 8005876:	f005 f821 	bl	800a8bc <HAL_TIM_PWM_ConfigChannel>
 800587a:	4603      	mov	r3, r0
 800587c:	2b00      	cmp	r3, #0
 800587e:	d001      	beq.n	8005884 <MX_TIM1_Init+0x114>
  {
    Error_Handler();
 8005880:	f7fe fb36 	bl	8003ef0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8005884:	2300      	movs	r3, #0
 8005886:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8005888:	2300      	movs	r3, #0
 800588a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800588c:	2300      	movs	r3, #0
 800588e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8005890:	2300      	movs	r3, #0
 8005892:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8005894:	2300      	movs	r3, #0
 8005896:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8005898:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800589c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800589e:	2300      	movs	r3, #0
 80058a0:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80058a2:	2300      	movs	r3, #0
 80058a4:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80058a6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80058aa:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80058ac:	2300      	movs	r3, #0
 80058ae:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80058b0:	2300      	movs	r3, #0
 80058b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80058b4:	1d3b      	adds	r3, r7, #4
 80058b6:	4619      	mov	r1, r3
 80058b8:	4807      	ldr	r0, [pc, #28]	@ (80058d8 <MX_TIM1_Init+0x168>)
 80058ba:	f005 fe1f 	bl	800b4fc <HAL_TIMEx_ConfigBreakDeadTime>
 80058be:	4603      	mov	r3, r0
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d001      	beq.n	80058c8 <MX_TIM1_Init+0x158>
  {
    Error_Handler();
 80058c4:	f7fe fb14 	bl	8003ef0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80058c8:	4803      	ldr	r0, [pc, #12]	@ (80058d8 <MX_TIM1_Init+0x168>)
 80058ca:	f000 f97d 	bl	8005bc8 <HAL_TIM_MspPostInit>

}
 80058ce:	bf00      	nop
 80058d0:	3768      	adds	r7, #104	@ 0x68
 80058d2:	46bd      	mov	sp, r7
 80058d4:	bd80      	pop	{r7, pc}
 80058d6:	bf00      	nop
 80058d8:	2002325c 	.word	0x2002325c
 80058dc:	40012c00 	.word	0x40012c00

080058e0 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80058e0:	b580      	push	{r7, lr}
 80058e2:	b08e      	sub	sp, #56	@ 0x38
 80058e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80058e6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80058ea:	2200      	movs	r2, #0
 80058ec:	601a      	str	r2, [r3, #0]
 80058ee:	605a      	str	r2, [r3, #4]
 80058f0:	609a      	str	r2, [r3, #8]
 80058f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80058f4:	f107 031c 	add.w	r3, r7, #28
 80058f8:	2200      	movs	r2, #0
 80058fa:	601a      	str	r2, [r3, #0]
 80058fc:	605a      	str	r2, [r3, #4]
 80058fe:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005900:	463b      	mov	r3, r7
 8005902:	2200      	movs	r2, #0
 8005904:	601a      	str	r2, [r3, #0]
 8005906:	605a      	str	r2, [r3, #4]
 8005908:	609a      	str	r2, [r3, #8]
 800590a:	60da      	str	r2, [r3, #12]
 800590c:	611a      	str	r2, [r3, #16]
 800590e:	615a      	str	r2, [r3, #20]
 8005910:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8005912:	4b3d      	ldr	r3, [pc, #244]	@ (8005a08 <MX_TIM2_Init+0x128>)
 8005914:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8005918:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800591a:	4b3b      	ldr	r3, [pc, #236]	@ (8005a08 <MX_TIM2_Init+0x128>)
 800591c:	2200      	movs	r2, #0
 800591e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005920:	4b39      	ldr	r3, [pc, #228]	@ (8005a08 <MX_TIM2_Init+0x128>)
 8005922:	2200      	movs	r2, #0
 8005924:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 199;
 8005926:	4b38      	ldr	r3, [pc, #224]	@ (8005a08 <MX_TIM2_Init+0x128>)
 8005928:	22c7      	movs	r2, #199	@ 0xc7
 800592a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800592c:	4b36      	ldr	r3, [pc, #216]	@ (8005a08 <MX_TIM2_Init+0x128>)
 800592e:	2200      	movs	r2, #0
 8005930:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005932:	4b35      	ldr	r3, [pc, #212]	@ (8005a08 <MX_TIM2_Init+0x128>)
 8005934:	2200      	movs	r2, #0
 8005936:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8005938:	4833      	ldr	r0, [pc, #204]	@ (8005a08 <MX_TIM2_Init+0x128>)
 800593a:	f004 fd01 	bl	800a340 <HAL_TIM_Base_Init>
 800593e:	4603      	mov	r3, r0
 8005940:	2b00      	cmp	r3, #0
 8005942:	d001      	beq.n	8005948 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8005944:	f7fe fad4 	bl	8003ef0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005948:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800594c:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800594e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8005952:	4619      	mov	r1, r3
 8005954:	482c      	ldr	r0, [pc, #176]	@ (8005a08 <MX_TIM2_Init+0x128>)
 8005956:	f005 f8c5 	bl	800aae4 <HAL_TIM_ConfigClockSource>
 800595a:	4603      	mov	r3, r0
 800595c:	2b00      	cmp	r3, #0
 800595e:	d001      	beq.n	8005964 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8005960:	f7fe fac6 	bl	8003ef0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8005964:	4828      	ldr	r0, [pc, #160]	@ (8005a08 <MX_TIM2_Init+0x128>)
 8005966:	f004 fd9f 	bl	800a4a8 <HAL_TIM_PWM_Init>
 800596a:	4603      	mov	r3, r0
 800596c:	2b00      	cmp	r3, #0
 800596e:	d001      	beq.n	8005974 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8005970:	f7fe fabe 	bl	8003ef0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005974:	2300      	movs	r3, #0
 8005976:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005978:	2300      	movs	r3, #0
 800597a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800597c:	f107 031c 	add.w	r3, r7, #28
 8005980:	4619      	mov	r1, r3
 8005982:	4821      	ldr	r0, [pc, #132]	@ (8005a08 <MX_TIM2_Init+0x128>)
 8005984:	f005 fd4c 	bl	800b420 <HAL_TIMEx_MasterConfigSynchronization>
 8005988:	4603      	mov	r3, r0
 800598a:	2b00      	cmp	r3, #0
 800598c:	d001      	beq.n	8005992 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800598e:	f7fe faaf 	bl	8003ef0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005992:	2360      	movs	r3, #96	@ 0x60
 8005994:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8005996:	2300      	movs	r3, #0
 8005998:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800599a:	2300      	movs	r3, #0
 800599c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800599e:	2300      	movs	r3, #0
 80059a0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80059a2:	463b      	mov	r3, r7
 80059a4:	2200      	movs	r2, #0
 80059a6:	4619      	mov	r1, r3
 80059a8:	4817      	ldr	r0, [pc, #92]	@ (8005a08 <MX_TIM2_Init+0x128>)
 80059aa:	f004 ff87 	bl	800a8bc <HAL_TIM_PWM_ConfigChannel>
 80059ae:	4603      	mov	r3, r0
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d001      	beq.n	80059b8 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 80059b4:	f7fe fa9c 	bl	8003ef0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80059b8:	463b      	mov	r3, r7
 80059ba:	2204      	movs	r2, #4
 80059bc:	4619      	mov	r1, r3
 80059be:	4812      	ldr	r0, [pc, #72]	@ (8005a08 <MX_TIM2_Init+0x128>)
 80059c0:	f004 ff7c 	bl	800a8bc <HAL_TIM_PWM_ConfigChannel>
 80059c4:	4603      	mov	r3, r0
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d001      	beq.n	80059ce <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 80059ca:	f7fe fa91 	bl	8003ef0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80059ce:	463b      	mov	r3, r7
 80059d0:	2208      	movs	r2, #8
 80059d2:	4619      	mov	r1, r3
 80059d4:	480c      	ldr	r0, [pc, #48]	@ (8005a08 <MX_TIM2_Init+0x128>)
 80059d6:	f004 ff71 	bl	800a8bc <HAL_TIM_PWM_ConfigChannel>
 80059da:	4603      	mov	r3, r0
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d001      	beq.n	80059e4 <MX_TIM2_Init+0x104>
  {
    Error_Handler();
 80059e0:	f7fe fa86 	bl	8003ef0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80059e4:	463b      	mov	r3, r7
 80059e6:	220c      	movs	r2, #12
 80059e8:	4619      	mov	r1, r3
 80059ea:	4807      	ldr	r0, [pc, #28]	@ (8005a08 <MX_TIM2_Init+0x128>)
 80059ec:	f004 ff66 	bl	800a8bc <HAL_TIM_PWM_ConfigChannel>
 80059f0:	4603      	mov	r3, r0
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d001      	beq.n	80059fa <MX_TIM2_Init+0x11a>
  {
    Error_Handler();
 80059f6:	f7fe fa7b 	bl	8003ef0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80059fa:	4803      	ldr	r0, [pc, #12]	@ (8005a08 <MX_TIM2_Init+0x128>)
 80059fc:	f000 f8e4 	bl	8005bc8 <HAL_TIM_MspPostInit>

}
 8005a00:	bf00      	nop
 8005a02:	3738      	adds	r7, #56	@ 0x38
 8005a04:	46bd      	mov	sp, r7
 8005a06:	bd80      	pop	{r7, pc}
 8005a08:	200232a8 	.word	0x200232a8

08005a0c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8005a0c:	b580      	push	{r7, lr}
 8005a0e:	b08e      	sub	sp, #56	@ 0x38
 8005a10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005a12:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8005a16:	2200      	movs	r2, #0
 8005a18:	601a      	str	r2, [r3, #0]
 8005a1a:	605a      	str	r2, [r3, #4]
 8005a1c:	609a      	str	r2, [r3, #8]
 8005a1e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005a20:	f107 031c 	add.w	r3, r7, #28
 8005a24:	2200      	movs	r2, #0
 8005a26:	601a      	str	r2, [r3, #0]
 8005a28:	605a      	str	r2, [r3, #4]
 8005a2a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005a2c:	463b      	mov	r3, r7
 8005a2e:	2200      	movs	r2, #0
 8005a30:	601a      	str	r2, [r3, #0]
 8005a32:	605a      	str	r2, [r3, #4]
 8005a34:	609a      	str	r2, [r3, #8]
 8005a36:	60da      	str	r2, [r3, #12]
 8005a38:	611a      	str	r2, [r3, #16]
 8005a3a:	615a      	str	r2, [r3, #20]
 8005a3c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8005a3e:	4b3d      	ldr	r3, [pc, #244]	@ (8005b34 <MX_TIM3_Init+0x128>)
 8005a40:	4a3d      	ldr	r2, [pc, #244]	@ (8005b38 <MX_TIM3_Init+0x12c>)
 8005a42:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8005a44:	4b3b      	ldr	r3, [pc, #236]	@ (8005b34 <MX_TIM3_Init+0x128>)
 8005a46:	2200      	movs	r2, #0
 8005a48:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005a4a:	4b3a      	ldr	r3, [pc, #232]	@ (8005b34 <MX_TIM3_Init+0x128>)
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 199;
 8005a50:	4b38      	ldr	r3, [pc, #224]	@ (8005b34 <MX_TIM3_Init+0x128>)
 8005a52:	22c7      	movs	r2, #199	@ 0xc7
 8005a54:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005a56:	4b37      	ldr	r3, [pc, #220]	@ (8005b34 <MX_TIM3_Init+0x128>)
 8005a58:	2200      	movs	r2, #0
 8005a5a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005a5c:	4b35      	ldr	r3, [pc, #212]	@ (8005b34 <MX_TIM3_Init+0x128>)
 8005a5e:	2200      	movs	r2, #0
 8005a60:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8005a62:	4834      	ldr	r0, [pc, #208]	@ (8005b34 <MX_TIM3_Init+0x128>)
 8005a64:	f004 fc6c 	bl	800a340 <HAL_TIM_Base_Init>
 8005a68:	4603      	mov	r3, r0
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d001      	beq.n	8005a72 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8005a6e:	f7fe fa3f 	bl	8003ef0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005a72:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005a76:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8005a78:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8005a7c:	4619      	mov	r1, r3
 8005a7e:	482d      	ldr	r0, [pc, #180]	@ (8005b34 <MX_TIM3_Init+0x128>)
 8005a80:	f005 f830 	bl	800aae4 <HAL_TIM_ConfigClockSource>
 8005a84:	4603      	mov	r3, r0
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d001      	beq.n	8005a8e <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8005a8a:	f7fe fa31 	bl	8003ef0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8005a8e:	4829      	ldr	r0, [pc, #164]	@ (8005b34 <MX_TIM3_Init+0x128>)
 8005a90:	f004 fd0a 	bl	800a4a8 <HAL_TIM_PWM_Init>
 8005a94:	4603      	mov	r3, r0
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d001      	beq.n	8005a9e <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8005a9a:	f7fe fa29 	bl	8003ef0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005a9e:	2300      	movs	r3, #0
 8005aa0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005aa2:	2300      	movs	r3, #0
 8005aa4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8005aa6:	f107 031c 	add.w	r3, r7, #28
 8005aaa:	4619      	mov	r1, r3
 8005aac:	4821      	ldr	r0, [pc, #132]	@ (8005b34 <MX_TIM3_Init+0x128>)
 8005aae:	f005 fcb7 	bl	800b420 <HAL_TIMEx_MasterConfigSynchronization>
 8005ab2:	4603      	mov	r3, r0
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d001      	beq.n	8005abc <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8005ab8:	f7fe fa1a 	bl	8003ef0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005abc:	2360      	movs	r3, #96	@ 0x60
 8005abe:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8005ac0:	2300      	movs	r3, #0
 8005ac2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005ac4:	2300      	movs	r3, #0
 8005ac6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005ac8:	2300      	movs	r3, #0
 8005aca:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005acc:	463b      	mov	r3, r7
 8005ace:	2200      	movs	r2, #0
 8005ad0:	4619      	mov	r1, r3
 8005ad2:	4818      	ldr	r0, [pc, #96]	@ (8005b34 <MX_TIM3_Init+0x128>)
 8005ad4:	f004 fef2 	bl	800a8bc <HAL_TIM_PWM_ConfigChannel>
 8005ad8:	4603      	mov	r3, r0
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d001      	beq.n	8005ae2 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8005ade:	f7fe fa07 	bl	8003ef0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8005ae2:	463b      	mov	r3, r7
 8005ae4:	2204      	movs	r2, #4
 8005ae6:	4619      	mov	r1, r3
 8005ae8:	4812      	ldr	r0, [pc, #72]	@ (8005b34 <MX_TIM3_Init+0x128>)
 8005aea:	f004 fee7 	bl	800a8bc <HAL_TIM_PWM_ConfigChannel>
 8005aee:	4603      	mov	r3, r0
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d001      	beq.n	8005af8 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8005af4:	f7fe f9fc 	bl	8003ef0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8005af8:	463b      	mov	r3, r7
 8005afa:	2208      	movs	r2, #8
 8005afc:	4619      	mov	r1, r3
 8005afe:	480d      	ldr	r0, [pc, #52]	@ (8005b34 <MX_TIM3_Init+0x128>)
 8005b00:	f004 fedc 	bl	800a8bc <HAL_TIM_PWM_ConfigChannel>
 8005b04:	4603      	mov	r3, r0
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d001      	beq.n	8005b0e <MX_TIM3_Init+0x102>
  {
    Error_Handler();
 8005b0a:	f7fe f9f1 	bl	8003ef0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8005b0e:	463b      	mov	r3, r7
 8005b10:	220c      	movs	r2, #12
 8005b12:	4619      	mov	r1, r3
 8005b14:	4807      	ldr	r0, [pc, #28]	@ (8005b34 <MX_TIM3_Init+0x128>)
 8005b16:	f004 fed1 	bl	800a8bc <HAL_TIM_PWM_ConfigChannel>
 8005b1a:	4603      	mov	r3, r0
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d001      	beq.n	8005b24 <MX_TIM3_Init+0x118>
  {
    Error_Handler();
 8005b20:	f7fe f9e6 	bl	8003ef0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8005b24:	4803      	ldr	r0, [pc, #12]	@ (8005b34 <MX_TIM3_Init+0x128>)
 8005b26:	f000 f84f 	bl	8005bc8 <HAL_TIM_MspPostInit>

}
 8005b2a:	bf00      	nop
 8005b2c:	3738      	adds	r7, #56	@ 0x38
 8005b2e:	46bd      	mov	sp, r7
 8005b30:	bd80      	pop	{r7, pc}
 8005b32:	bf00      	nop
 8005b34:	200232f4 	.word	0x200232f4
 8005b38:	40000400 	.word	0x40000400

08005b3c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8005b3c:	b480      	push	{r7}
 8005b3e:	b087      	sub	sp, #28
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	4a1c      	ldr	r2, [pc, #112]	@ (8005bbc <HAL_TIM_Base_MspInit+0x80>)
 8005b4a:	4293      	cmp	r3, r2
 8005b4c:	d10c      	bne.n	8005b68 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8005b4e:	4b1c      	ldr	r3, [pc, #112]	@ (8005bc0 <HAL_TIM_Base_MspInit+0x84>)
 8005b50:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005b52:	4a1b      	ldr	r2, [pc, #108]	@ (8005bc0 <HAL_TIM_Base_MspInit+0x84>)
 8005b54:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8005b58:	6613      	str	r3, [r2, #96]	@ 0x60
 8005b5a:	4b19      	ldr	r3, [pc, #100]	@ (8005bc0 <HAL_TIM_Base_MspInit+0x84>)
 8005b5c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005b5e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005b62:	617b      	str	r3, [r7, #20]
 8005b64:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8005b66:	e022      	b.n	8005bae <HAL_TIM_Base_MspInit+0x72>
  else if(tim_baseHandle->Instance==TIM2)
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005b70:	d10c      	bne.n	8005b8c <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005b72:	4b13      	ldr	r3, [pc, #76]	@ (8005bc0 <HAL_TIM_Base_MspInit+0x84>)
 8005b74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b76:	4a12      	ldr	r2, [pc, #72]	@ (8005bc0 <HAL_TIM_Base_MspInit+0x84>)
 8005b78:	f043 0301 	orr.w	r3, r3, #1
 8005b7c:	6593      	str	r3, [r2, #88]	@ 0x58
 8005b7e:	4b10      	ldr	r3, [pc, #64]	@ (8005bc0 <HAL_TIM_Base_MspInit+0x84>)
 8005b80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b82:	f003 0301 	and.w	r3, r3, #1
 8005b86:	613b      	str	r3, [r7, #16]
 8005b88:	693b      	ldr	r3, [r7, #16]
}
 8005b8a:	e010      	b.n	8005bae <HAL_TIM_Base_MspInit+0x72>
  else if(tim_baseHandle->Instance==TIM3)
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	4a0c      	ldr	r2, [pc, #48]	@ (8005bc4 <HAL_TIM_Base_MspInit+0x88>)
 8005b92:	4293      	cmp	r3, r2
 8005b94:	d10b      	bne.n	8005bae <HAL_TIM_Base_MspInit+0x72>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005b96:	4b0a      	ldr	r3, [pc, #40]	@ (8005bc0 <HAL_TIM_Base_MspInit+0x84>)
 8005b98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b9a:	4a09      	ldr	r2, [pc, #36]	@ (8005bc0 <HAL_TIM_Base_MspInit+0x84>)
 8005b9c:	f043 0302 	orr.w	r3, r3, #2
 8005ba0:	6593      	str	r3, [r2, #88]	@ 0x58
 8005ba2:	4b07      	ldr	r3, [pc, #28]	@ (8005bc0 <HAL_TIM_Base_MspInit+0x84>)
 8005ba4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ba6:	f003 0302 	and.w	r3, r3, #2
 8005baa:	60fb      	str	r3, [r7, #12]
 8005bac:	68fb      	ldr	r3, [r7, #12]
}
 8005bae:	bf00      	nop
 8005bb0:	371c      	adds	r7, #28
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb8:	4770      	bx	lr
 8005bba:	bf00      	nop
 8005bbc:	40012c00 	.word	0x40012c00
 8005bc0:	40021000 	.word	0x40021000
 8005bc4:	40000400 	.word	0x40000400

08005bc8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8005bc8:	b580      	push	{r7, lr}
 8005bca:	b08c      	sub	sp, #48	@ 0x30
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005bd0:	f107 031c 	add.w	r3, r7, #28
 8005bd4:	2200      	movs	r2, #0
 8005bd6:	601a      	str	r2, [r3, #0]
 8005bd8:	605a      	str	r2, [r3, #4]
 8005bda:	609a      	str	r2, [r3, #8]
 8005bdc:	60da      	str	r2, [r3, #12]
 8005bde:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	4a52      	ldr	r2, [pc, #328]	@ (8005d30 <HAL_TIM_MspPostInit+0x168>)
 8005be6:	4293      	cmp	r3, r2
 8005be8:	d11e      	bne.n	8005c28 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005bea:	4b52      	ldr	r3, [pc, #328]	@ (8005d34 <HAL_TIM_MspPostInit+0x16c>)
 8005bec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005bee:	4a51      	ldr	r2, [pc, #324]	@ (8005d34 <HAL_TIM_MspPostInit+0x16c>)
 8005bf0:	f043 0301 	orr.w	r3, r3, #1
 8005bf4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005bf6:	4b4f      	ldr	r3, [pc, #316]	@ (8005d34 <HAL_TIM_MspPostInit+0x16c>)
 8005bf8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005bfa:	f003 0301 	and.w	r3, r3, #1
 8005bfe:	61bb      	str	r3, [r7, #24]
 8005c00:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8005c02:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8005c06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005c08:	2302      	movs	r3, #2
 8005c0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c0c:	2300      	movs	r3, #0
 8005c0e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005c10:	2300      	movs	r3, #0
 8005c12:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8005c14:	2301      	movs	r3, #1
 8005c16:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005c18:	f107 031c 	add.w	r3, r7, #28
 8005c1c:	4619      	mov	r1, r3
 8005c1e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8005c22:	f002 f8bf 	bl	8007da4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8005c26:	e07e      	b.n	8005d26 <HAL_TIM_MspPostInit+0x15e>
  else if(timHandle->Instance==TIM2)
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005c30:	d13a      	bne.n	8005ca8 <HAL_TIM_MspPostInit+0xe0>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005c32:	4b40      	ldr	r3, [pc, #256]	@ (8005d34 <HAL_TIM_MspPostInit+0x16c>)
 8005c34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005c36:	4a3f      	ldr	r2, [pc, #252]	@ (8005d34 <HAL_TIM_MspPostInit+0x16c>)
 8005c38:	f043 0301 	orr.w	r3, r3, #1
 8005c3c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005c3e:	4b3d      	ldr	r3, [pc, #244]	@ (8005d34 <HAL_TIM_MspPostInit+0x16c>)
 8005c40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005c42:	f003 0301 	and.w	r3, r3, #1
 8005c46:	617b      	str	r3, [r7, #20]
 8005c48:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005c4a:	4b3a      	ldr	r3, [pc, #232]	@ (8005d34 <HAL_TIM_MspPostInit+0x16c>)
 8005c4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005c4e:	4a39      	ldr	r2, [pc, #228]	@ (8005d34 <HAL_TIM_MspPostInit+0x16c>)
 8005c50:	f043 0302 	orr.w	r3, r3, #2
 8005c54:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005c56:	4b37      	ldr	r3, [pc, #220]	@ (8005d34 <HAL_TIM_MspPostInit+0x16c>)
 8005c58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005c5a:	f003 0302 	and.w	r3, r3, #2
 8005c5e:	613b      	str	r3, [r7, #16]
 8005c60:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8005c62:	2303      	movs	r3, #3
 8005c64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005c66:	2302      	movs	r3, #2
 8005c68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c6a:	2300      	movs	r3, #0
 8005c6c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005c6e:	2300      	movs	r3, #0
 8005c70:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8005c72:	2301      	movs	r3, #1
 8005c74:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005c76:	f107 031c 	add.w	r3, r7, #28
 8005c7a:	4619      	mov	r1, r3
 8005c7c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8005c80:	f002 f890 	bl	8007da4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8005c84:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8005c88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005c8a:	2302      	movs	r3, #2
 8005c8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c8e:	2300      	movs	r3, #0
 8005c90:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005c92:	2300      	movs	r3, #0
 8005c94:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8005c96:	2301      	movs	r3, #1
 8005c98:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005c9a:	f107 031c 	add.w	r3, r7, #28
 8005c9e:	4619      	mov	r1, r3
 8005ca0:	4825      	ldr	r0, [pc, #148]	@ (8005d38 <HAL_TIM_MspPostInit+0x170>)
 8005ca2:	f002 f87f 	bl	8007da4 <HAL_GPIO_Init>
}
 8005ca6:	e03e      	b.n	8005d26 <HAL_TIM_MspPostInit+0x15e>
  else if(timHandle->Instance==TIM3)
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	4a23      	ldr	r2, [pc, #140]	@ (8005d3c <HAL_TIM_MspPostInit+0x174>)
 8005cae:	4293      	cmp	r3, r2
 8005cb0:	d139      	bne.n	8005d26 <HAL_TIM_MspPostInit+0x15e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005cb2:	4b20      	ldr	r3, [pc, #128]	@ (8005d34 <HAL_TIM_MspPostInit+0x16c>)
 8005cb4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005cb6:	4a1f      	ldr	r2, [pc, #124]	@ (8005d34 <HAL_TIM_MspPostInit+0x16c>)
 8005cb8:	f043 0301 	orr.w	r3, r3, #1
 8005cbc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005cbe:	4b1d      	ldr	r3, [pc, #116]	@ (8005d34 <HAL_TIM_MspPostInit+0x16c>)
 8005cc0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005cc2:	f003 0301 	and.w	r3, r3, #1
 8005cc6:	60fb      	str	r3, [r7, #12]
 8005cc8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005cca:	4b1a      	ldr	r3, [pc, #104]	@ (8005d34 <HAL_TIM_MspPostInit+0x16c>)
 8005ccc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005cce:	4a19      	ldr	r2, [pc, #100]	@ (8005d34 <HAL_TIM_MspPostInit+0x16c>)
 8005cd0:	f043 0304 	orr.w	r3, r3, #4
 8005cd4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005cd6:	4b17      	ldr	r3, [pc, #92]	@ (8005d34 <HAL_TIM_MspPostInit+0x16c>)
 8005cd8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005cda:	f003 0304 	and.w	r3, r3, #4
 8005cde:	60bb      	str	r3, [r7, #8]
 8005ce0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005ce2:	23c0      	movs	r3, #192	@ 0xc0
 8005ce4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005ce6:	2302      	movs	r3, #2
 8005ce8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005cea:	2300      	movs	r3, #0
 8005cec:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005cee:	2300      	movs	r3, #0
 8005cf0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8005cf2:	2302      	movs	r3, #2
 8005cf4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005cf6:	f107 031c 	add.w	r3, r7, #28
 8005cfa:	4619      	mov	r1, r3
 8005cfc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8005d00:	f002 f850 	bl	8007da4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8005d04:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8005d08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005d0a:	2302      	movs	r3, #2
 8005d0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d0e:	2300      	movs	r3, #0
 8005d10:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005d12:	2300      	movs	r3, #0
 8005d14:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8005d16:	2302      	movs	r3, #2
 8005d18:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005d1a:	f107 031c 	add.w	r3, r7, #28
 8005d1e:	4619      	mov	r1, r3
 8005d20:	4807      	ldr	r0, [pc, #28]	@ (8005d40 <HAL_TIM_MspPostInit+0x178>)
 8005d22:	f002 f83f 	bl	8007da4 <HAL_GPIO_Init>
}
 8005d26:	bf00      	nop
 8005d28:	3730      	adds	r7, #48	@ 0x30
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	bd80      	pop	{r7, pc}
 8005d2e:	bf00      	nop
 8005d30:	40012c00 	.word	0x40012c00
 8005d34:	40021000 	.word	0x40021000
 8005d38:	48000400 	.word	0x48000400
 8005d3c:	40000400 	.word	0x40000400
 8005d40:	48000800 	.word	0x48000800

08005d44 <MX_UART4_Init>:
UART_HandleTypeDef huart2;
UART_HandleTypeDef huart3;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8005d44:	b580      	push	{r7, lr}
 8005d46:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8005d48:	4b14      	ldr	r3, [pc, #80]	@ (8005d9c <MX_UART4_Init+0x58>)
 8005d4a:	4a15      	ldr	r2, [pc, #84]	@ (8005da0 <MX_UART4_Init+0x5c>)
 8005d4c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8005d4e:	4b13      	ldr	r3, [pc, #76]	@ (8005d9c <MX_UART4_Init+0x58>)
 8005d50:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8005d54:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8005d56:	4b11      	ldr	r3, [pc, #68]	@ (8005d9c <MX_UART4_Init+0x58>)
 8005d58:	2200      	movs	r2, #0
 8005d5a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8005d5c:	4b0f      	ldr	r3, [pc, #60]	@ (8005d9c <MX_UART4_Init+0x58>)
 8005d5e:	2200      	movs	r2, #0
 8005d60:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8005d62:	4b0e      	ldr	r3, [pc, #56]	@ (8005d9c <MX_UART4_Init+0x58>)
 8005d64:	2200      	movs	r2, #0
 8005d66:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8005d68:	4b0c      	ldr	r3, [pc, #48]	@ (8005d9c <MX_UART4_Init+0x58>)
 8005d6a:	220c      	movs	r2, #12
 8005d6c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8005d6e:	4b0b      	ldr	r3, [pc, #44]	@ (8005d9c <MX_UART4_Init+0x58>)
 8005d70:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8005d74:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8005d76:	4b09      	ldr	r3, [pc, #36]	@ (8005d9c <MX_UART4_Init+0x58>)
 8005d78:	2200      	movs	r2, #0
 8005d7a:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005d7c:	4b07      	ldr	r3, [pc, #28]	@ (8005d9c <MX_UART4_Init+0x58>)
 8005d7e:	2200      	movs	r2, #0
 8005d80:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005d82:	4b06      	ldr	r3, [pc, #24]	@ (8005d9c <MX_UART4_Init+0x58>)
 8005d84:	2200      	movs	r2, #0
 8005d86:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8005d88:	4804      	ldr	r0, [pc, #16]	@ (8005d9c <MX_UART4_Init+0x58>)
 8005d8a:	f005 fc4d 	bl	800b628 <HAL_UART_Init>
 8005d8e:	4603      	mov	r3, r0
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d001      	beq.n	8005d98 <MX_UART4_Init+0x54>
  {
    Error_Handler();
 8005d94:	f7fe f8ac 	bl	8003ef0 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8005d98:	bf00      	nop
 8005d9a:	bd80      	pop	{r7, pc}
 8005d9c:	20023340 	.word	0x20023340
 8005da0:	40004c00 	.word	0x40004c00

08005da4 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8005da4:	b580      	push	{r7, lr}
 8005da6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8005da8:	4b14      	ldr	r3, [pc, #80]	@ (8005dfc <MX_USART1_UART_Init+0x58>)
 8005daa:	4a15      	ldr	r2, [pc, #84]	@ (8005e00 <MX_USART1_UART_Init+0x5c>)
 8005dac:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8005dae:	4b13      	ldr	r3, [pc, #76]	@ (8005dfc <MX_USART1_UART_Init+0x58>)
 8005db0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8005db4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8005db6:	4b11      	ldr	r3, [pc, #68]	@ (8005dfc <MX_USART1_UART_Init+0x58>)
 8005db8:	2200      	movs	r2, #0
 8005dba:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8005dbc:	4b0f      	ldr	r3, [pc, #60]	@ (8005dfc <MX_USART1_UART_Init+0x58>)
 8005dbe:	2200      	movs	r2, #0
 8005dc0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8005dc2:	4b0e      	ldr	r3, [pc, #56]	@ (8005dfc <MX_USART1_UART_Init+0x58>)
 8005dc4:	2200      	movs	r2, #0
 8005dc6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8005dc8:	4b0c      	ldr	r3, [pc, #48]	@ (8005dfc <MX_USART1_UART_Init+0x58>)
 8005dca:	220c      	movs	r2, #12
 8005dcc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005dce:	4b0b      	ldr	r3, [pc, #44]	@ (8005dfc <MX_USART1_UART_Init+0x58>)
 8005dd0:	2200      	movs	r2, #0
 8005dd2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8005dd4:	4b09      	ldr	r3, [pc, #36]	@ (8005dfc <MX_USART1_UART_Init+0x58>)
 8005dd6:	2200      	movs	r2, #0
 8005dd8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005dda:	4b08      	ldr	r3, [pc, #32]	@ (8005dfc <MX_USART1_UART_Init+0x58>)
 8005ddc:	2200      	movs	r2, #0
 8005dde:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005de0:	4b06      	ldr	r3, [pc, #24]	@ (8005dfc <MX_USART1_UART_Init+0x58>)
 8005de2:	2200      	movs	r2, #0
 8005de4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8005de6:	4805      	ldr	r0, [pc, #20]	@ (8005dfc <MX_USART1_UART_Init+0x58>)
 8005de8:	f005 fc1e 	bl	800b628 <HAL_UART_Init>
 8005dec:	4603      	mov	r3, r0
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d001      	beq.n	8005df6 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8005df2:	f7fe f87d 	bl	8003ef0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8005df6:	bf00      	nop
 8005df8:	bd80      	pop	{r7, pc}
 8005dfa:	bf00      	nop
 8005dfc:	200233c4 	.word	0x200233c4
 8005e00:	40013800 	.word	0x40013800

08005e04 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8005e04:	b580      	push	{r7, lr}
 8005e06:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8005e08:	4b14      	ldr	r3, [pc, #80]	@ (8005e5c <MX_USART2_UART_Init+0x58>)
 8005e0a:	4a15      	ldr	r2, [pc, #84]	@ (8005e60 <MX_USART2_UART_Init+0x5c>)
 8005e0c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8005e0e:	4b13      	ldr	r3, [pc, #76]	@ (8005e5c <MX_USART2_UART_Init+0x58>)
 8005e10:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8005e14:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8005e16:	4b11      	ldr	r3, [pc, #68]	@ (8005e5c <MX_USART2_UART_Init+0x58>)
 8005e18:	2200      	movs	r2, #0
 8005e1a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8005e1c:	4b0f      	ldr	r3, [pc, #60]	@ (8005e5c <MX_USART2_UART_Init+0x58>)
 8005e1e:	2200      	movs	r2, #0
 8005e20:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8005e22:	4b0e      	ldr	r3, [pc, #56]	@ (8005e5c <MX_USART2_UART_Init+0x58>)
 8005e24:	2200      	movs	r2, #0
 8005e26:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8005e28:	4b0c      	ldr	r3, [pc, #48]	@ (8005e5c <MX_USART2_UART_Init+0x58>)
 8005e2a:	220c      	movs	r2, #12
 8005e2c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005e2e:	4b0b      	ldr	r3, [pc, #44]	@ (8005e5c <MX_USART2_UART_Init+0x58>)
 8005e30:	2200      	movs	r2, #0
 8005e32:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8005e34:	4b09      	ldr	r3, [pc, #36]	@ (8005e5c <MX_USART2_UART_Init+0x58>)
 8005e36:	2200      	movs	r2, #0
 8005e38:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005e3a:	4b08      	ldr	r3, [pc, #32]	@ (8005e5c <MX_USART2_UART_Init+0x58>)
 8005e3c:	2200      	movs	r2, #0
 8005e3e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005e40:	4b06      	ldr	r3, [pc, #24]	@ (8005e5c <MX_USART2_UART_Init+0x58>)
 8005e42:	2200      	movs	r2, #0
 8005e44:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8005e46:	4805      	ldr	r0, [pc, #20]	@ (8005e5c <MX_USART2_UART_Init+0x58>)
 8005e48:	f005 fbee 	bl	800b628 <HAL_UART_Init>
 8005e4c:	4603      	mov	r3, r0
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d001      	beq.n	8005e56 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8005e52:	f7fe f84d 	bl	8003ef0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8005e56:	bf00      	nop
 8005e58:	bd80      	pop	{r7, pc}
 8005e5a:	bf00      	nop
 8005e5c:	20023448 	.word	0x20023448
 8005e60:	40004400 	.word	0x40004400

08005e64 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8005e64:	b580      	push	{r7, lr}
 8005e66:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8005e68:	4b14      	ldr	r3, [pc, #80]	@ (8005ebc <MX_USART3_UART_Init+0x58>)
 8005e6a:	4a15      	ldr	r2, [pc, #84]	@ (8005ec0 <MX_USART3_UART_Init+0x5c>)
 8005e6c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8005e6e:	4b13      	ldr	r3, [pc, #76]	@ (8005ebc <MX_USART3_UART_Init+0x58>)
 8005e70:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8005e74:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8005e76:	4b11      	ldr	r3, [pc, #68]	@ (8005ebc <MX_USART3_UART_Init+0x58>)
 8005e78:	2200      	movs	r2, #0
 8005e7a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8005e7c:	4b0f      	ldr	r3, [pc, #60]	@ (8005ebc <MX_USART3_UART_Init+0x58>)
 8005e7e:	2200      	movs	r2, #0
 8005e80:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8005e82:	4b0e      	ldr	r3, [pc, #56]	@ (8005ebc <MX_USART3_UART_Init+0x58>)
 8005e84:	2200      	movs	r2, #0
 8005e86:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8005e88:	4b0c      	ldr	r3, [pc, #48]	@ (8005ebc <MX_USART3_UART_Init+0x58>)
 8005e8a:	220c      	movs	r2, #12
 8005e8c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005e8e:	4b0b      	ldr	r3, [pc, #44]	@ (8005ebc <MX_USART3_UART_Init+0x58>)
 8005e90:	2200      	movs	r2, #0
 8005e92:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8005e94:	4b09      	ldr	r3, [pc, #36]	@ (8005ebc <MX_USART3_UART_Init+0x58>)
 8005e96:	2200      	movs	r2, #0
 8005e98:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005e9a:	4b08      	ldr	r3, [pc, #32]	@ (8005ebc <MX_USART3_UART_Init+0x58>)
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005ea0:	4b06      	ldr	r3, [pc, #24]	@ (8005ebc <MX_USART3_UART_Init+0x58>)
 8005ea2:	2200      	movs	r2, #0
 8005ea4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8005ea6:	4805      	ldr	r0, [pc, #20]	@ (8005ebc <MX_USART3_UART_Init+0x58>)
 8005ea8:	f005 fbbe 	bl	800b628 <HAL_UART_Init>
 8005eac:	4603      	mov	r3, r0
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d001      	beq.n	8005eb6 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8005eb2:	f7fe f81d 	bl	8003ef0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8005eb6:	bf00      	nop
 8005eb8:	bd80      	pop	{r7, pc}
 8005eba:	bf00      	nop
 8005ebc:	200234cc 	.word	0x200234cc
 8005ec0:	40004800 	.word	0x40004800

08005ec4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8005ec4:	b580      	push	{r7, lr}
 8005ec6:	b0ac      	sub	sp, #176	@ 0xb0
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005ecc:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8005ed0:	2200      	movs	r2, #0
 8005ed2:	601a      	str	r2, [r3, #0]
 8005ed4:	605a      	str	r2, [r3, #4]
 8005ed6:	609a      	str	r2, [r3, #8]
 8005ed8:	60da      	str	r2, [r3, #12]
 8005eda:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005edc:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8005ee0:	2268      	movs	r2, #104	@ 0x68
 8005ee2:	2100      	movs	r1, #0
 8005ee4:	4618      	mov	r0, r3
 8005ee6:	f00a fa99 	bl	801041c <memset>
  if(uartHandle->Instance==UART4)
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	4aa1      	ldr	r2, [pc, #644]	@ (8006174 <HAL_UART_MspInit+0x2b0>)
 8005ef0:	4293      	cmp	r3, r2
 8005ef2:	f040 8089 	bne.w	8006008 <HAL_UART_MspInit+0x144>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8005ef6:	2308      	movs	r3, #8
 8005ef8:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8005efa:	2300      	movs	r3, #0
 8005efc:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005efe:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8005f02:	4618      	mov	r0, r3
 8005f04:	f002 ffae 	bl	8008e64 <HAL_RCCEx_PeriphCLKConfig>
 8005f08:	4603      	mov	r3, r0
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d001      	beq.n	8005f12 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8005f0e:	f7fd ffef 	bl	8003ef0 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8005f12:	4b99      	ldr	r3, [pc, #612]	@ (8006178 <HAL_UART_MspInit+0x2b4>)
 8005f14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f16:	4a98      	ldr	r2, [pc, #608]	@ (8006178 <HAL_UART_MspInit+0x2b4>)
 8005f18:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005f1c:	6593      	str	r3, [r2, #88]	@ 0x58
 8005f1e:	4b96      	ldr	r3, [pc, #600]	@ (8006178 <HAL_UART_MspInit+0x2b4>)
 8005f20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f22:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005f26:	633b      	str	r3, [r7, #48]	@ 0x30
 8005f28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005f2a:	4b93      	ldr	r3, [pc, #588]	@ (8006178 <HAL_UART_MspInit+0x2b4>)
 8005f2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005f2e:	4a92      	ldr	r2, [pc, #584]	@ (8006178 <HAL_UART_MspInit+0x2b4>)
 8005f30:	f043 0301 	orr.w	r3, r3, #1
 8005f34:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005f36:	4b90      	ldr	r3, [pc, #576]	@ (8006178 <HAL_UART_MspInit+0x2b4>)
 8005f38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005f3a:	f003 0301 	and.w	r3, r3, #1
 8005f3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005f40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005f42:	4b8d      	ldr	r3, [pc, #564]	@ (8006178 <HAL_UART_MspInit+0x2b4>)
 8005f44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005f46:	4a8c      	ldr	r2, [pc, #560]	@ (8006178 <HAL_UART_MspInit+0x2b4>)
 8005f48:	f043 0304 	orr.w	r3, r3, #4
 8005f4c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005f4e:	4b8a      	ldr	r3, [pc, #552]	@ (8006178 <HAL_UART_MspInit+0x2b4>)
 8005f50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005f52:	f003 0304 	and.w	r3, r3, #4
 8005f56:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005f58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005f5a:	4b87      	ldr	r3, [pc, #540]	@ (8006178 <HAL_UART_MspInit+0x2b4>)
 8005f5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005f5e:	4a86      	ldr	r2, [pc, #536]	@ (8006178 <HAL_UART_MspInit+0x2b4>)
 8005f60:	f043 0302 	orr.w	r3, r3, #2
 8005f64:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005f66:	4b84      	ldr	r3, [pc, #528]	@ (8006178 <HAL_UART_MspInit+0x2b4>)
 8005f68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005f6a:	f003 0302 	and.w	r3, r3, #2
 8005f6e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005f70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    PA15 (JTDI)     ------> UART4_RTS
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    PB7     ------> UART4_CTS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8005f72:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005f76:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005f7a:	2302      	movs	r3, #2
 8005f7c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f80:	2300      	movs	r3, #0
 8005f82:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005f86:	2303      	movs	r3, #3
 8005f88:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8005f8c:	2308      	movs	r3, #8
 8005f8e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005f92:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8005f96:	4619      	mov	r1, r3
 8005f98:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8005f9c:	f001 ff02 	bl	8007da4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8005fa0:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8005fa4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005fa8:	2302      	movs	r3, #2
 8005faa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005fae:	2300      	movs	r3, #0
 8005fb0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005fb4:	2303      	movs	r3, #3
 8005fb6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8005fba:	2308      	movs	r3, #8
 8005fbc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005fc0:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8005fc4:	4619      	mov	r1, r3
 8005fc6:	486d      	ldr	r0, [pc, #436]	@ (800617c <HAL_UART_MspInit+0x2b8>)
 8005fc8:	f001 feec 	bl	8007da4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8005fcc:	2380      	movs	r3, #128	@ 0x80
 8005fce:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005fd2:	2302      	movs	r3, #2
 8005fd4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005fd8:	2300      	movs	r3, #0
 8005fda:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005fde:	2303      	movs	r3, #3
 8005fe0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8005fe4:	2308      	movs	r3, #8
 8005fe6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005fea:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8005fee:	4619      	mov	r1, r3
 8005ff0:	4863      	ldr	r0, [pc, #396]	@ (8006180 <HAL_UART_MspInit+0x2bc>)
 8005ff2:	f001 fed7 	bl	8007da4 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 8005ff6:	2200      	movs	r2, #0
 8005ff8:	2105      	movs	r1, #5
 8005ffa:	2034      	movs	r0, #52	@ 0x34
 8005ffc:	f001 fe28 	bl	8007c50 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8006000:	2034      	movs	r0, #52	@ 0x34
 8006002:	f001 fe41 	bl	8007c88 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8006006:	e109      	b.n	800621c <HAL_UART_MspInit+0x358>
  else if(uartHandle->Instance==USART1)
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	4a5d      	ldr	r2, [pc, #372]	@ (8006184 <HAL_UART_MspInit+0x2c0>)
 800600e:	4293      	cmp	r3, r2
 8006010:	d166      	bne.n	80060e0 <HAL_UART_MspInit+0x21c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8006012:	2301      	movs	r3, #1
 8006014:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8006016:	2300      	movs	r3, #0
 8006018:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800601a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800601e:	4618      	mov	r0, r3
 8006020:	f002 ff20 	bl	8008e64 <HAL_RCCEx_PeriphCLKConfig>
 8006024:	4603      	mov	r3, r0
 8006026:	2b00      	cmp	r3, #0
 8006028:	d001      	beq.n	800602e <HAL_UART_MspInit+0x16a>
      Error_Handler();
 800602a:	f7fd ff61 	bl	8003ef0 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 800602e:	4b52      	ldr	r3, [pc, #328]	@ (8006178 <HAL_UART_MspInit+0x2b4>)
 8006030:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006032:	4a51      	ldr	r2, [pc, #324]	@ (8006178 <HAL_UART_MspInit+0x2b4>)
 8006034:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006038:	6613      	str	r3, [r2, #96]	@ 0x60
 800603a:	4b4f      	ldr	r3, [pc, #316]	@ (8006178 <HAL_UART_MspInit+0x2b4>)
 800603c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800603e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006042:	623b      	str	r3, [r7, #32]
 8006044:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006046:	4b4c      	ldr	r3, [pc, #304]	@ (8006178 <HAL_UART_MspInit+0x2b4>)
 8006048:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800604a:	4a4b      	ldr	r2, [pc, #300]	@ (8006178 <HAL_UART_MspInit+0x2b4>)
 800604c:	f043 0301 	orr.w	r3, r3, #1
 8006050:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006052:	4b49      	ldr	r3, [pc, #292]	@ (8006178 <HAL_UART_MspInit+0x2b4>)
 8006054:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006056:	f003 0301 	and.w	r3, r3, #1
 800605a:	61fb      	str	r3, [r7, #28]
 800605c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800605e:	4b46      	ldr	r3, [pc, #280]	@ (8006178 <HAL_UART_MspInit+0x2b4>)
 8006060:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006062:	4a45      	ldr	r2, [pc, #276]	@ (8006178 <HAL_UART_MspInit+0x2b4>)
 8006064:	f043 0302 	orr.w	r3, r3, #2
 8006068:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800606a:	4b43      	ldr	r3, [pc, #268]	@ (8006178 <HAL_UART_MspInit+0x2b4>)
 800606c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800606e:	f003 0302 	and.w	r3, r3, #2
 8006072:	61bb      	str	r3, [r7, #24]
 8006074:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8006076:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800607a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800607e:	2302      	movs	r3, #2
 8006080:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006084:	2300      	movs	r3, #0
 8006086:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800608a:	2303      	movs	r3, #3
 800608c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8006090:	2307      	movs	r3, #7
 8006092:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006096:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800609a:	4619      	mov	r1, r3
 800609c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80060a0:	f001 fe80 	bl	8007da4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80060a4:	2340      	movs	r3, #64	@ 0x40
 80060a6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80060aa:	2302      	movs	r3, #2
 80060ac:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80060b0:	2300      	movs	r3, #0
 80060b2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80060b6:	2303      	movs	r3, #3
 80060b8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80060bc:	2307      	movs	r3, #7
 80060be:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80060c2:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80060c6:	4619      	mov	r1, r3
 80060c8:	482d      	ldr	r0, [pc, #180]	@ (8006180 <HAL_UART_MspInit+0x2bc>)
 80060ca:	f001 fe6b 	bl	8007da4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80060ce:	2200      	movs	r2, #0
 80060d0:	2105      	movs	r1, #5
 80060d2:	2025      	movs	r0, #37	@ 0x25
 80060d4:	f001 fdbc 	bl	8007c50 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80060d8:	2025      	movs	r0, #37	@ 0x25
 80060da:	f001 fdd5 	bl	8007c88 <HAL_NVIC_EnableIRQ>
}
 80060de:	e09d      	b.n	800621c <HAL_UART_MspInit+0x358>
  else if(uartHandle->Instance==USART2)
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	4a28      	ldr	r2, [pc, #160]	@ (8006188 <HAL_UART_MspInit+0x2c4>)
 80060e6:	4293      	cmp	r3, r2
 80060e8:	d150      	bne.n	800618c <HAL_UART_MspInit+0x2c8>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80060ea:	2302      	movs	r3, #2
 80060ec:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80060ee:	2300      	movs	r3, #0
 80060f0:	65bb      	str	r3, [r7, #88]	@ 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80060f2:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80060f6:	4618      	mov	r0, r3
 80060f8:	f002 feb4 	bl	8008e64 <HAL_RCCEx_PeriphCLKConfig>
 80060fc:	4603      	mov	r3, r0
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d001      	beq.n	8006106 <HAL_UART_MspInit+0x242>
      Error_Handler();
 8006102:	f7fd fef5 	bl	8003ef0 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8006106:	4b1c      	ldr	r3, [pc, #112]	@ (8006178 <HAL_UART_MspInit+0x2b4>)
 8006108:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800610a:	4a1b      	ldr	r2, [pc, #108]	@ (8006178 <HAL_UART_MspInit+0x2b4>)
 800610c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006110:	6593      	str	r3, [r2, #88]	@ 0x58
 8006112:	4b19      	ldr	r3, [pc, #100]	@ (8006178 <HAL_UART_MspInit+0x2b4>)
 8006114:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006116:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800611a:	617b      	str	r3, [r7, #20]
 800611c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800611e:	4b16      	ldr	r3, [pc, #88]	@ (8006178 <HAL_UART_MspInit+0x2b4>)
 8006120:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006122:	4a15      	ldr	r2, [pc, #84]	@ (8006178 <HAL_UART_MspInit+0x2b4>)
 8006124:	f043 0301 	orr.w	r3, r3, #1
 8006128:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800612a:	4b13      	ldr	r3, [pc, #76]	@ (8006178 <HAL_UART_MspInit+0x2b4>)
 800612c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800612e:	f003 0301 	and.w	r3, r3, #1
 8006132:	613b      	str	r3, [r7, #16]
 8006134:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8006136:	230c      	movs	r3, #12
 8006138:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800613c:	2302      	movs	r3, #2
 800613e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006142:	2300      	movs	r3, #0
 8006144:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006148:	2303      	movs	r3, #3
 800614a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800614e:	2307      	movs	r3, #7
 8006150:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006154:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8006158:	4619      	mov	r1, r3
 800615a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800615e:	f001 fe21 	bl	8007da4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8006162:	2200      	movs	r2, #0
 8006164:	2105      	movs	r1, #5
 8006166:	2026      	movs	r0, #38	@ 0x26
 8006168:	f001 fd72 	bl	8007c50 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800616c:	2026      	movs	r0, #38	@ 0x26
 800616e:	f001 fd8b 	bl	8007c88 <HAL_NVIC_EnableIRQ>
}
 8006172:	e053      	b.n	800621c <HAL_UART_MspInit+0x358>
 8006174:	40004c00 	.word	0x40004c00
 8006178:	40021000 	.word	0x40021000
 800617c:	48000800 	.word	0x48000800
 8006180:	48000400 	.word	0x48000400
 8006184:	40013800 	.word	0x40013800
 8006188:	40004400 	.word	0x40004400
  else if(uartHandle->Instance==USART3)
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	4a24      	ldr	r2, [pc, #144]	@ (8006224 <HAL_UART_MspInit+0x360>)
 8006192:	4293      	cmp	r3, r2
 8006194:	d142      	bne.n	800621c <HAL_UART_MspInit+0x358>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8006196:	2304      	movs	r3, #4
 8006198:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800619a:	2300      	movs	r3, #0
 800619c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800619e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80061a2:	4618      	mov	r0, r3
 80061a4:	f002 fe5e 	bl	8008e64 <HAL_RCCEx_PeriphCLKConfig>
 80061a8:	4603      	mov	r3, r0
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d001      	beq.n	80061b2 <HAL_UART_MspInit+0x2ee>
      Error_Handler();
 80061ae:	f7fd fe9f 	bl	8003ef0 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80061b2:	4b1d      	ldr	r3, [pc, #116]	@ (8006228 <HAL_UART_MspInit+0x364>)
 80061b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80061b6:	4a1c      	ldr	r2, [pc, #112]	@ (8006228 <HAL_UART_MspInit+0x364>)
 80061b8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80061bc:	6593      	str	r3, [r2, #88]	@ 0x58
 80061be:	4b1a      	ldr	r3, [pc, #104]	@ (8006228 <HAL_UART_MspInit+0x364>)
 80061c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80061c2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80061c6:	60fb      	str	r3, [r7, #12]
 80061c8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80061ca:	4b17      	ldr	r3, [pc, #92]	@ (8006228 <HAL_UART_MspInit+0x364>)
 80061cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80061ce:	4a16      	ldr	r2, [pc, #88]	@ (8006228 <HAL_UART_MspInit+0x364>)
 80061d0:	f043 0304 	orr.w	r3, r3, #4
 80061d4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80061d6:	4b14      	ldr	r3, [pc, #80]	@ (8006228 <HAL_UART_MspInit+0x364>)
 80061d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80061da:	f003 0304 	and.w	r3, r3, #4
 80061de:	60bb      	str	r3, [r7, #8]
 80061e0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80061e2:	2330      	movs	r3, #48	@ 0x30
 80061e4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80061e8:	2302      	movs	r3, #2
 80061ea:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80061ee:	2300      	movs	r3, #0
 80061f0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80061f4:	2303      	movs	r3, #3
 80061f6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80061fa:	2307      	movs	r3, #7
 80061fc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006200:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8006204:	4619      	mov	r1, r3
 8006206:	4809      	ldr	r0, [pc, #36]	@ (800622c <HAL_UART_MspInit+0x368>)
 8006208:	f001 fdcc 	bl	8007da4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 800620c:	2200      	movs	r2, #0
 800620e:	2105      	movs	r1, #5
 8006210:	2027      	movs	r0, #39	@ 0x27
 8006212:	f001 fd1d 	bl	8007c50 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8006216:	2027      	movs	r0, #39	@ 0x27
 8006218:	f001 fd36 	bl	8007c88 <HAL_NVIC_EnableIRQ>
}
 800621c:	bf00      	nop
 800621e:	37b0      	adds	r7, #176	@ 0xb0
 8006220:	46bd      	mov	sp, r7
 8006222:	bd80      	pop	{r7, pc}
 8006224:	40004800 	.word	0x40004800
 8006228:	40021000 	.word	0x40021000
 800622c:	48000800 	.word	0x48000800

08006230 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8006230:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8006268 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8006234:	f7ff fa8a 	bl	800574c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8006238:	480c      	ldr	r0, [pc, #48]	@ (800626c <LoopForever+0x6>)
  ldr r1, =_edata
 800623a:	490d      	ldr	r1, [pc, #52]	@ (8006270 <LoopForever+0xa>)
  ldr r2, =_sidata
 800623c:	4a0d      	ldr	r2, [pc, #52]	@ (8006274 <LoopForever+0xe>)
  movs r3, #0
 800623e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006240:	e002      	b.n	8006248 <LoopCopyDataInit>

08006242 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006242:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006244:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006246:	3304      	adds	r3, #4

08006248 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006248:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800624a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800624c:	d3f9      	bcc.n	8006242 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800624e:	4a0a      	ldr	r2, [pc, #40]	@ (8006278 <LoopForever+0x12>)
  ldr r4, =_ebss
 8006250:	4c0a      	ldr	r4, [pc, #40]	@ (800627c <LoopForever+0x16>)
  movs r3, #0
 8006252:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006254:	e001      	b.n	800625a <LoopFillZerobss>

08006256 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006256:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006258:	3204      	adds	r2, #4

0800625a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800625a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800625c:	d3fb      	bcc.n	8006256 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800625e:	f00a f945 	bl	80104ec <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8006262:	f7fd fdbf 	bl	8003de4 <main>

08006266 <LoopForever>:

LoopForever:
    b LoopForever
 8006266:	e7fe      	b.n	8006266 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8006268:	20028000 	.word	0x20028000
  ldr r0, =_sdata
 800626c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006270:	20000200 	.word	0x20000200
  ldr r2, =_sidata
 8006274:	08012df0 	.word	0x08012df0
  ldr r2, =_sbss
 8006278:	20000200 	.word	0x20000200
  ldr r4, =_ebss
 800627c:	20023910 	.word	0x20023910

08006280 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8006280:	e7fe      	b.n	8006280 <ADC1_IRQHandler>
	...

08006284 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006284:	b580      	push	{r7, lr}
 8006286:	b082      	sub	sp, #8
 8006288:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800628a:	2300      	movs	r3, #0
 800628c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800628e:	4b0c      	ldr	r3, [pc, #48]	@ (80062c0 <HAL_Init+0x3c>)
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	4a0b      	ldr	r2, [pc, #44]	@ (80062c0 <HAL_Init+0x3c>)
 8006294:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006298:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800629a:	2003      	movs	r0, #3
 800629c:	f001 fccd 	bl	8007c3a <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80062a0:	200f      	movs	r0, #15
 80062a2:	f7ff f8c5 	bl	8005430 <HAL_InitTick>
 80062a6:	4603      	mov	r3, r0
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d002      	beq.n	80062b2 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80062ac:	2301      	movs	r3, #1
 80062ae:	71fb      	strb	r3, [r7, #7]
 80062b0:	e001      	b.n	80062b6 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80062b2:	f7ff f895 	bl	80053e0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80062b6:	79fb      	ldrb	r3, [r7, #7]
}
 80062b8:	4618      	mov	r0, r3
 80062ba:	3708      	adds	r7, #8
 80062bc:	46bd      	mov	sp, r7
 80062be:	bd80      	pop	{r7, pc}
 80062c0:	40022000 	.word	0x40022000

080062c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80062c4:	b480      	push	{r7}
 80062c6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80062c8:	4b06      	ldr	r3, [pc, #24]	@ (80062e4 <HAL_IncTick+0x20>)
 80062ca:	781b      	ldrb	r3, [r3, #0]
 80062cc:	461a      	mov	r2, r3
 80062ce:	4b06      	ldr	r3, [pc, #24]	@ (80062e8 <HAL_IncTick+0x24>)
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	4413      	add	r3, r2
 80062d4:	4a04      	ldr	r2, [pc, #16]	@ (80062e8 <HAL_IncTick+0x24>)
 80062d6:	6013      	str	r3, [r2, #0]
}
 80062d8:	bf00      	nop
 80062da:	46bd      	mov	sp, r7
 80062dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e0:	4770      	bx	lr
 80062e2:	bf00      	nop
 80062e4:	20000030 	.word	0x20000030
 80062e8:	20023550 	.word	0x20023550

080062ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80062ec:	b480      	push	{r7}
 80062ee:	af00      	add	r7, sp, #0
  return uwTick;
 80062f0:	4b03      	ldr	r3, [pc, #12]	@ (8006300 <HAL_GetTick+0x14>)
 80062f2:	681b      	ldr	r3, [r3, #0]
}
 80062f4:	4618      	mov	r0, r3
 80062f6:	46bd      	mov	sp, r7
 80062f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fc:	4770      	bx	lr
 80062fe:	bf00      	nop
 8006300:	20023550 	.word	0x20023550

08006304 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006304:	b580      	push	{r7, lr}
 8006306:	b084      	sub	sp, #16
 8006308:	af00      	add	r7, sp, #0
 800630a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800630c:	f7ff ffee 	bl	80062ec <HAL_GetTick>
 8006310:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	f1b3 3fff 	cmp.w	r3, #4294967295
 800631c:	d005      	beq.n	800632a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800631e:	4b0a      	ldr	r3, [pc, #40]	@ (8006348 <HAL_Delay+0x44>)
 8006320:	781b      	ldrb	r3, [r3, #0]
 8006322:	461a      	mov	r2, r3
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	4413      	add	r3, r2
 8006328:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800632a:	bf00      	nop
 800632c:	f7ff ffde 	bl	80062ec <HAL_GetTick>
 8006330:	4602      	mov	r2, r0
 8006332:	68bb      	ldr	r3, [r7, #8]
 8006334:	1ad3      	subs	r3, r2, r3
 8006336:	68fa      	ldr	r2, [r7, #12]
 8006338:	429a      	cmp	r2, r3
 800633a:	d8f7      	bhi.n	800632c <HAL_Delay+0x28>
  {
  }
}
 800633c:	bf00      	nop
 800633e:	bf00      	nop
 8006340:	3710      	adds	r7, #16
 8006342:	46bd      	mov	sp, r7
 8006344:	bd80      	pop	{r7, pc}
 8006346:	bf00      	nop
 8006348:	20000030 	.word	0x20000030

0800634c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800634c:	b480      	push	{r7}
 800634e:	b083      	sub	sp, #12
 8006350:	af00      	add	r7, sp, #0
 8006352:	6078      	str	r0, [r7, #4]
 8006354:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	689b      	ldr	r3, [r3, #8]
 800635a:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800635e:	683b      	ldr	r3, [r7, #0]
 8006360:	431a      	orrs	r2, r3
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	609a      	str	r2, [r3, #8]
}
 8006366:	bf00      	nop
 8006368:	370c      	adds	r7, #12
 800636a:	46bd      	mov	sp, r7
 800636c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006370:	4770      	bx	lr

08006372 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8006372:	b480      	push	{r7}
 8006374:	b083      	sub	sp, #12
 8006376:	af00      	add	r7, sp, #0
 8006378:	6078      	str	r0, [r7, #4]
 800637a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	689b      	ldr	r3, [r3, #8]
 8006380:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8006384:	683b      	ldr	r3, [r7, #0]
 8006386:	431a      	orrs	r2, r3
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	609a      	str	r2, [r3, #8]
}
 800638c:	bf00      	nop
 800638e:	370c      	adds	r7, #12
 8006390:	46bd      	mov	sp, r7
 8006392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006396:	4770      	bx	lr

08006398 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8006398:	b480      	push	{r7}
 800639a:	b083      	sub	sp, #12
 800639c:	af00      	add	r7, sp, #0
 800639e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	689b      	ldr	r3, [r3, #8]
 80063a4:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80063a8:	4618      	mov	r0, r3
 80063aa:	370c      	adds	r7, #12
 80063ac:	46bd      	mov	sp, r7
 80063ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b2:	4770      	bx	lr

080063b4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80063b4:	b480      	push	{r7}
 80063b6:	b087      	sub	sp, #28
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	60f8      	str	r0, [r7, #12]
 80063bc:	60b9      	str	r1, [r7, #8]
 80063be:	607a      	str	r2, [r7, #4]
 80063c0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	3360      	adds	r3, #96	@ 0x60
 80063c6:	461a      	mov	r2, r3
 80063c8:	68bb      	ldr	r3, [r7, #8]
 80063ca:	009b      	lsls	r3, r3, #2
 80063cc:	4413      	add	r3, r2
 80063ce:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80063d0:	697b      	ldr	r3, [r7, #20]
 80063d2:	681a      	ldr	r2, [r3, #0]
 80063d4:	4b08      	ldr	r3, [pc, #32]	@ (80063f8 <LL_ADC_SetOffset+0x44>)
 80063d6:	4013      	ands	r3, r2
 80063d8:	687a      	ldr	r2, [r7, #4]
 80063da:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80063de:	683a      	ldr	r2, [r7, #0]
 80063e0:	430a      	orrs	r2, r1
 80063e2:	4313      	orrs	r3, r2
 80063e4:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80063e8:	697b      	ldr	r3, [r7, #20]
 80063ea:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80063ec:	bf00      	nop
 80063ee:	371c      	adds	r7, #28
 80063f0:	46bd      	mov	sp, r7
 80063f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f6:	4770      	bx	lr
 80063f8:	03fff000 	.word	0x03fff000

080063fc <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80063fc:	b480      	push	{r7}
 80063fe:	b085      	sub	sp, #20
 8006400:	af00      	add	r7, sp, #0
 8006402:	6078      	str	r0, [r7, #4]
 8006404:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	3360      	adds	r3, #96	@ 0x60
 800640a:	461a      	mov	r2, r3
 800640c:	683b      	ldr	r3, [r7, #0]
 800640e:	009b      	lsls	r3, r3, #2
 8006410:	4413      	add	r3, r2
 8006412:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 800641c:	4618      	mov	r0, r3
 800641e:	3714      	adds	r7, #20
 8006420:	46bd      	mov	sp, r7
 8006422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006426:	4770      	bx	lr

08006428 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8006428:	b480      	push	{r7}
 800642a:	b087      	sub	sp, #28
 800642c:	af00      	add	r7, sp, #0
 800642e:	60f8      	str	r0, [r7, #12]
 8006430:	60b9      	str	r1, [r7, #8]
 8006432:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	3360      	adds	r3, #96	@ 0x60
 8006438:	461a      	mov	r2, r3
 800643a:	68bb      	ldr	r3, [r7, #8]
 800643c:	009b      	lsls	r3, r3, #2
 800643e:	4413      	add	r3, r2
 8006440:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8006442:	697b      	ldr	r3, [r7, #20]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	431a      	orrs	r2, r3
 800644e:	697b      	ldr	r3, [r7, #20]
 8006450:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8006452:	bf00      	nop
 8006454:	371c      	adds	r7, #28
 8006456:	46bd      	mov	sp, r7
 8006458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645c:	4770      	bx	lr

0800645e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800645e:	b480      	push	{r7}
 8006460:	b083      	sub	sp, #12
 8006462:	af00      	add	r7, sp, #0
 8006464:	6078      	str	r0, [r7, #4]
 8006466:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	695b      	ldr	r3, [r3, #20]
 800646c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8006470:	683b      	ldr	r3, [r7, #0]
 8006472:	431a      	orrs	r2, r3
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	615a      	str	r2, [r3, #20]
}
 8006478:	bf00      	nop
 800647a:	370c      	adds	r7, #12
 800647c:	46bd      	mov	sp, r7
 800647e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006482:	4770      	bx	lr

08006484 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8006484:	b480      	push	{r7}
 8006486:	b083      	sub	sp, #12
 8006488:	af00      	add	r7, sp, #0
 800648a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	68db      	ldr	r3, [r3, #12]
 8006490:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006494:	2b00      	cmp	r3, #0
 8006496:	d101      	bne.n	800649c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8006498:	2301      	movs	r3, #1
 800649a:	e000      	b.n	800649e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800649c:	2300      	movs	r3, #0
}
 800649e:	4618      	mov	r0, r3
 80064a0:	370c      	adds	r7, #12
 80064a2:	46bd      	mov	sp, r7
 80064a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a8:	4770      	bx	lr

080064aa <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80064aa:	b480      	push	{r7}
 80064ac:	b087      	sub	sp, #28
 80064ae:	af00      	add	r7, sp, #0
 80064b0:	60f8      	str	r0, [r7, #12]
 80064b2:	60b9      	str	r1, [r7, #8]
 80064b4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	3330      	adds	r3, #48	@ 0x30
 80064ba:	461a      	mov	r2, r3
 80064bc:	68bb      	ldr	r3, [r7, #8]
 80064be:	0a1b      	lsrs	r3, r3, #8
 80064c0:	009b      	lsls	r3, r3, #2
 80064c2:	f003 030c 	and.w	r3, r3, #12
 80064c6:	4413      	add	r3, r2
 80064c8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80064ca:	697b      	ldr	r3, [r7, #20]
 80064cc:	681a      	ldr	r2, [r3, #0]
 80064ce:	68bb      	ldr	r3, [r7, #8]
 80064d0:	f003 031f 	and.w	r3, r3, #31
 80064d4:	211f      	movs	r1, #31
 80064d6:	fa01 f303 	lsl.w	r3, r1, r3
 80064da:	43db      	mvns	r3, r3
 80064dc:	401a      	ands	r2, r3
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	0e9b      	lsrs	r3, r3, #26
 80064e2:	f003 011f 	and.w	r1, r3, #31
 80064e6:	68bb      	ldr	r3, [r7, #8]
 80064e8:	f003 031f 	and.w	r3, r3, #31
 80064ec:	fa01 f303 	lsl.w	r3, r1, r3
 80064f0:	431a      	orrs	r2, r3
 80064f2:	697b      	ldr	r3, [r7, #20]
 80064f4:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80064f6:	bf00      	nop
 80064f8:	371c      	adds	r7, #28
 80064fa:	46bd      	mov	sp, r7
 80064fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006500:	4770      	bx	lr

08006502 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8006502:	b480      	push	{r7}
 8006504:	b087      	sub	sp, #28
 8006506:	af00      	add	r7, sp, #0
 8006508:	60f8      	str	r0, [r7, #12]
 800650a:	60b9      	str	r1, [r7, #8]
 800650c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	3314      	adds	r3, #20
 8006512:	461a      	mov	r2, r3
 8006514:	68bb      	ldr	r3, [r7, #8]
 8006516:	0e5b      	lsrs	r3, r3, #25
 8006518:	009b      	lsls	r3, r3, #2
 800651a:	f003 0304 	and.w	r3, r3, #4
 800651e:	4413      	add	r3, r2
 8006520:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8006522:	697b      	ldr	r3, [r7, #20]
 8006524:	681a      	ldr	r2, [r3, #0]
 8006526:	68bb      	ldr	r3, [r7, #8]
 8006528:	0d1b      	lsrs	r3, r3, #20
 800652a:	f003 031f 	and.w	r3, r3, #31
 800652e:	2107      	movs	r1, #7
 8006530:	fa01 f303 	lsl.w	r3, r1, r3
 8006534:	43db      	mvns	r3, r3
 8006536:	401a      	ands	r2, r3
 8006538:	68bb      	ldr	r3, [r7, #8]
 800653a:	0d1b      	lsrs	r3, r3, #20
 800653c:	f003 031f 	and.w	r3, r3, #31
 8006540:	6879      	ldr	r1, [r7, #4]
 8006542:	fa01 f303 	lsl.w	r3, r1, r3
 8006546:	431a      	orrs	r2, r3
 8006548:	697b      	ldr	r3, [r7, #20]
 800654a:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800654c:	bf00      	nop
 800654e:	371c      	adds	r7, #28
 8006550:	46bd      	mov	sp, r7
 8006552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006556:	4770      	bx	lr

08006558 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8006558:	b480      	push	{r7}
 800655a:	b085      	sub	sp, #20
 800655c:	af00      	add	r7, sp, #0
 800655e:	60f8      	str	r0, [r7, #12]
 8006560:	60b9      	str	r1, [r7, #8]
 8006562:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800656a:	68bb      	ldr	r3, [r7, #8]
 800656c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006570:	43db      	mvns	r3, r3
 8006572:	401a      	ands	r2, r3
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	f003 0318 	and.w	r3, r3, #24
 800657a:	4908      	ldr	r1, [pc, #32]	@ (800659c <LL_ADC_SetChannelSingleDiff+0x44>)
 800657c:	40d9      	lsrs	r1, r3
 800657e:	68bb      	ldr	r3, [r7, #8]
 8006580:	400b      	ands	r3, r1
 8006582:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006586:	431a      	orrs	r2, r3
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800658e:	bf00      	nop
 8006590:	3714      	adds	r7, #20
 8006592:	46bd      	mov	sp, r7
 8006594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006598:	4770      	bx	lr
 800659a:	bf00      	nop
 800659c:	0007ffff 	.word	0x0007ffff

080065a0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80065a0:	b480      	push	{r7}
 80065a2:	b083      	sub	sp, #12
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	689b      	ldr	r3, [r3, #8]
 80065ac:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80065b0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80065b4:	687a      	ldr	r2, [r7, #4]
 80065b6:	6093      	str	r3, [r2, #8]
}
 80065b8:	bf00      	nop
 80065ba:	370c      	adds	r7, #12
 80065bc:	46bd      	mov	sp, r7
 80065be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c2:	4770      	bx	lr

080065c4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80065c4:	b480      	push	{r7}
 80065c6:	b083      	sub	sp, #12
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	689b      	ldr	r3, [r3, #8]
 80065d0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80065d4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80065d8:	d101      	bne.n	80065de <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80065da:	2301      	movs	r3, #1
 80065dc:	e000      	b.n	80065e0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80065de:	2300      	movs	r3, #0
}
 80065e0:	4618      	mov	r0, r3
 80065e2:	370c      	adds	r7, #12
 80065e4:	46bd      	mov	sp, r7
 80065e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ea:	4770      	bx	lr

080065ec <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80065ec:	b480      	push	{r7}
 80065ee:	b083      	sub	sp, #12
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	689b      	ldr	r3, [r3, #8]
 80065f8:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80065fc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8006600:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8006608:	bf00      	nop
 800660a:	370c      	adds	r7, #12
 800660c:	46bd      	mov	sp, r7
 800660e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006612:	4770      	bx	lr

08006614 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8006614:	b480      	push	{r7}
 8006616:	b083      	sub	sp, #12
 8006618:	af00      	add	r7, sp, #0
 800661a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	689b      	ldr	r3, [r3, #8]
 8006620:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006624:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006628:	d101      	bne.n	800662e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800662a:	2301      	movs	r3, #1
 800662c:	e000      	b.n	8006630 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800662e:	2300      	movs	r3, #0
}
 8006630:	4618      	mov	r0, r3
 8006632:	370c      	adds	r7, #12
 8006634:	46bd      	mov	sp, r7
 8006636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663a:	4770      	bx	lr

0800663c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800663c:	b480      	push	{r7}
 800663e:	b083      	sub	sp, #12
 8006640:	af00      	add	r7, sp, #0
 8006642:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	689b      	ldr	r3, [r3, #8]
 8006648:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800664c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8006650:	f043 0201 	orr.w	r2, r3, #1
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8006658:	bf00      	nop
 800665a:	370c      	adds	r7, #12
 800665c:	46bd      	mov	sp, r7
 800665e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006662:	4770      	bx	lr

08006664 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8006664:	b480      	push	{r7}
 8006666:	b083      	sub	sp, #12
 8006668:	af00      	add	r7, sp, #0
 800666a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	689b      	ldr	r3, [r3, #8]
 8006670:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006674:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8006678:	f043 0202 	orr.w	r2, r3, #2
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8006680:	bf00      	nop
 8006682:	370c      	adds	r7, #12
 8006684:	46bd      	mov	sp, r7
 8006686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668a:	4770      	bx	lr

0800668c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800668c:	b480      	push	{r7}
 800668e:	b083      	sub	sp, #12
 8006690:	af00      	add	r7, sp, #0
 8006692:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	689b      	ldr	r3, [r3, #8]
 8006698:	f003 0301 	and.w	r3, r3, #1
 800669c:	2b01      	cmp	r3, #1
 800669e:	d101      	bne.n	80066a4 <LL_ADC_IsEnabled+0x18>
 80066a0:	2301      	movs	r3, #1
 80066a2:	e000      	b.n	80066a6 <LL_ADC_IsEnabled+0x1a>
 80066a4:	2300      	movs	r3, #0
}
 80066a6:	4618      	mov	r0, r3
 80066a8:	370c      	adds	r7, #12
 80066aa:	46bd      	mov	sp, r7
 80066ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b0:	4770      	bx	lr

080066b2 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 80066b2:	b480      	push	{r7}
 80066b4:	b083      	sub	sp, #12
 80066b6:	af00      	add	r7, sp, #0
 80066b8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	689b      	ldr	r3, [r3, #8]
 80066be:	f003 0302 	and.w	r3, r3, #2
 80066c2:	2b02      	cmp	r3, #2
 80066c4:	d101      	bne.n	80066ca <LL_ADC_IsDisableOngoing+0x18>
 80066c6:	2301      	movs	r3, #1
 80066c8:	e000      	b.n	80066cc <LL_ADC_IsDisableOngoing+0x1a>
 80066ca:	2300      	movs	r3, #0
}
 80066cc:	4618      	mov	r0, r3
 80066ce:	370c      	adds	r7, #12
 80066d0:	46bd      	mov	sp, r7
 80066d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d6:	4770      	bx	lr

080066d8 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80066d8:	b480      	push	{r7}
 80066da:	b083      	sub	sp, #12
 80066dc:	af00      	add	r7, sp, #0
 80066de:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	689b      	ldr	r3, [r3, #8]
 80066e4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80066e8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80066ec:	f043 0204 	orr.w	r2, r3, #4
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80066f4:	bf00      	nop
 80066f6:	370c      	adds	r7, #12
 80066f8:	46bd      	mov	sp, r7
 80066fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fe:	4770      	bx	lr

08006700 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8006700:	b480      	push	{r7}
 8006702:	b083      	sub	sp, #12
 8006704:	af00      	add	r7, sp, #0
 8006706:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	689b      	ldr	r3, [r3, #8]
 800670c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006710:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8006714:	f043 0210 	orr.w	r2, r3, #16
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 800671c:	bf00      	nop
 800671e:	370c      	adds	r7, #12
 8006720:	46bd      	mov	sp, r7
 8006722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006726:	4770      	bx	lr

08006728 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8006728:	b480      	push	{r7}
 800672a:	b083      	sub	sp, #12
 800672c:	af00      	add	r7, sp, #0
 800672e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	689b      	ldr	r3, [r3, #8]
 8006734:	f003 0304 	and.w	r3, r3, #4
 8006738:	2b04      	cmp	r3, #4
 800673a:	d101      	bne.n	8006740 <LL_ADC_REG_IsConversionOngoing+0x18>
 800673c:	2301      	movs	r3, #1
 800673e:	e000      	b.n	8006742 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8006740:	2300      	movs	r3, #0
}
 8006742:	4618      	mov	r0, r3
 8006744:	370c      	adds	r7, #12
 8006746:	46bd      	mov	sp, r7
 8006748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674c:	4770      	bx	lr

0800674e <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 800674e:	b480      	push	{r7}
 8006750:	b083      	sub	sp, #12
 8006752:	af00      	add	r7, sp, #0
 8006754:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	689b      	ldr	r3, [r3, #8]
 800675a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800675e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8006762:	f043 0220 	orr.w	r2, r3, #32
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 800676a:	bf00      	nop
 800676c:	370c      	adds	r7, #12
 800676e:	46bd      	mov	sp, r7
 8006770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006774:	4770      	bx	lr

08006776 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8006776:	b480      	push	{r7}
 8006778:	b083      	sub	sp, #12
 800677a:	af00      	add	r7, sp, #0
 800677c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	689b      	ldr	r3, [r3, #8]
 8006782:	f003 0308 	and.w	r3, r3, #8
 8006786:	2b08      	cmp	r3, #8
 8006788:	d101      	bne.n	800678e <LL_ADC_INJ_IsConversionOngoing+0x18>
 800678a:	2301      	movs	r3, #1
 800678c:	e000      	b.n	8006790 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800678e:	2300      	movs	r3, #0
}
 8006790:	4618      	mov	r0, r3
 8006792:	370c      	adds	r7, #12
 8006794:	46bd      	mov	sp, r7
 8006796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679a:	4770      	bx	lr

0800679c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800679c:	b580      	push	{r7, lr}
 800679e:	b088      	sub	sp, #32
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80067a4:	2300      	movs	r3, #0
 80067a6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80067a8:	2300      	movs	r3, #0
 80067aa:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d101      	bne.n	80067b6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80067b2:	2301      	movs	r3, #1
 80067b4:	e12f      	b.n	8006a16 <HAL_ADC_Init+0x27a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	691b      	ldr	r3, [r3, #16]
 80067ba:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d109      	bne.n	80067d8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80067c4:	6878      	ldr	r0, [r7, #4]
 80067c6:	f7fb fdbf 	bl	8002348 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	2200      	movs	r2, #0
 80067ce:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	2200      	movs	r2, #0
 80067d4:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	4618      	mov	r0, r3
 80067de:	f7ff fef1 	bl	80065c4 <LL_ADC_IsDeepPowerDownEnabled>
 80067e2:	4603      	mov	r3, r0
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d004      	beq.n	80067f2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	4618      	mov	r0, r3
 80067ee:	f7ff fed7 	bl	80065a0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	4618      	mov	r0, r3
 80067f8:	f7ff ff0c 	bl	8006614 <LL_ADC_IsInternalRegulatorEnabled>
 80067fc:	4603      	mov	r3, r0
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d115      	bne.n	800682e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	4618      	mov	r0, r3
 8006808:	f7ff fef0 	bl	80065ec <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800680c:	4b84      	ldr	r3, [pc, #528]	@ (8006a20 <HAL_ADC_Init+0x284>)
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	099b      	lsrs	r3, r3, #6
 8006812:	4a84      	ldr	r2, [pc, #528]	@ (8006a24 <HAL_ADC_Init+0x288>)
 8006814:	fba2 2303 	umull	r2, r3, r2, r3
 8006818:	099b      	lsrs	r3, r3, #6
 800681a:	3301      	adds	r3, #1
 800681c:	005b      	lsls	r3, r3, #1
 800681e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8006820:	e002      	b.n	8006828 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8006822:	68bb      	ldr	r3, [r7, #8]
 8006824:	3b01      	subs	r3, #1
 8006826:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8006828:	68bb      	ldr	r3, [r7, #8]
 800682a:	2b00      	cmp	r3, #0
 800682c:	d1f9      	bne.n	8006822 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	4618      	mov	r0, r3
 8006834:	f7ff feee 	bl	8006614 <LL_ADC_IsInternalRegulatorEnabled>
 8006838:	4603      	mov	r3, r0
 800683a:	2b00      	cmp	r3, #0
 800683c:	d10d      	bne.n	800685a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006842:	f043 0210 	orr.w	r2, r3, #16
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800684e:	f043 0201 	orr.w	r2, r3, #1
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8006856:	2301      	movs	r3, #1
 8006858:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	4618      	mov	r0, r3
 8006860:	f7ff ff62 	bl	8006728 <LL_ADC_REG_IsConversionOngoing>
 8006864:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800686a:	f003 0310 	and.w	r3, r3, #16
 800686e:	2b00      	cmp	r3, #0
 8006870:	f040 80c8 	bne.w	8006a04 <HAL_ADC_Init+0x268>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8006874:	697b      	ldr	r3, [r7, #20]
 8006876:	2b00      	cmp	r3, #0
 8006878:	f040 80c4 	bne.w	8006a04 <HAL_ADC_Init+0x268>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006880:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8006884:	f043 0202 	orr.w	r2, r3, #2
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	4618      	mov	r0, r3
 8006892:	f7ff fefb 	bl	800668c <LL_ADC_IsEnabled>
 8006896:	4603      	mov	r3, r0
 8006898:	2b00      	cmp	r3, #0
 800689a:	d10b      	bne.n	80068b4 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800689c:	4862      	ldr	r0, [pc, #392]	@ (8006a28 <HAL_ADC_Init+0x28c>)
 800689e:	f7ff fef5 	bl	800668c <LL_ADC_IsEnabled>
 80068a2:	4603      	mov	r3, r0
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d105      	bne.n	80068b4 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	685b      	ldr	r3, [r3, #4]
 80068ac:	4619      	mov	r1, r3
 80068ae:	485f      	ldr	r0, [pc, #380]	@ (8006a2c <HAL_ADC_Init+0x290>)
 80068b0:	f7ff fd4c 	bl	800634c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	7e5b      	ldrb	r3, [r3, #25]
 80068b8:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80068be:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80068c4:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80068ca:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	f893 3020 	ldrb.w	r3, [r3, #32]
 80068d2:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80068d4:	4313      	orrs	r3, r2
 80068d6:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	f893 3020 	ldrb.w	r3, [r3, #32]
 80068de:	2b01      	cmp	r3, #1
 80068e0:	d106      	bne.n	80068f0 <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068e6:	3b01      	subs	r3, #1
 80068e8:	045b      	lsls	r3, r3, #17
 80068ea:	69ba      	ldr	r2, [r7, #24]
 80068ec:	4313      	orrs	r3, r2
 80068ee:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d009      	beq.n	800690c <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068fc:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006904:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8006906:	69ba      	ldr	r2, [r7, #24]
 8006908:	4313      	orrs	r3, r2
 800690a:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	68da      	ldr	r2, [r3, #12]
 8006912:	4b47      	ldr	r3, [pc, #284]	@ (8006a30 <HAL_ADC_Init+0x294>)
 8006914:	4013      	ands	r3, r2
 8006916:	687a      	ldr	r2, [r7, #4]
 8006918:	6812      	ldr	r2, [r2, #0]
 800691a:	69b9      	ldr	r1, [r7, #24]
 800691c:	430b      	orrs	r3, r1
 800691e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	4618      	mov	r0, r3
 8006926:	f7ff feff 	bl	8006728 <LL_ADC_REG_IsConversionOngoing>
 800692a:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	4618      	mov	r0, r3
 8006932:	f7ff ff20 	bl	8006776 <LL_ADC_INJ_IsConversionOngoing>
 8006936:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8006938:	693b      	ldr	r3, [r7, #16]
 800693a:	2b00      	cmp	r3, #0
 800693c:	d140      	bne.n	80069c0 <HAL_ADC_Init+0x224>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	2b00      	cmp	r3, #0
 8006942:	d13d      	bne.n	80069c0 <HAL_ADC_Init+0x224>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	7e1b      	ldrb	r3, [r3, #24]
 800694c:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800694e:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8006956:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8006958:	4313      	orrs	r3, r2
 800695a:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	68db      	ldr	r3, [r3, #12]
 8006962:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006966:	f023 0306 	bic.w	r3, r3, #6
 800696a:	687a      	ldr	r2, [r7, #4]
 800696c:	6812      	ldr	r2, [r2, #0]
 800696e:	69b9      	ldr	r1, [r7, #24]
 8006970:	430b      	orrs	r3, r1
 8006972:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800697a:	2b01      	cmp	r3, #1
 800697c:	d118      	bne.n	80069b0 <HAL_ADC_Init+0x214>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	691b      	ldr	r3, [r3, #16]
 8006984:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8006988:	f023 0304 	bic.w	r3, r3, #4
 800698c:	687a      	ldr	r2, [r7, #4]
 800698e:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8006990:	687a      	ldr	r2, [r7, #4]
 8006992:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8006994:	4311      	orrs	r1, r2
 8006996:	687a      	ldr	r2, [r7, #4]
 8006998:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800699a:	4311      	orrs	r1, r2
 800699c:	687a      	ldr	r2, [r7, #4]
 800699e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80069a0:	430a      	orrs	r2, r1
 80069a2:	431a      	orrs	r2, r3
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	f042 0201 	orr.w	r2, r2, #1
 80069ac:	611a      	str	r2, [r3, #16]
 80069ae:	e007      	b.n	80069c0 <HAL_ADC_Init+0x224>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	691a      	ldr	r2, [r3, #16]
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	f022 0201 	bic.w	r2, r2, #1
 80069be:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	691b      	ldr	r3, [r3, #16]
 80069c4:	2b01      	cmp	r3, #1
 80069c6:	d10c      	bne.n	80069e2 <HAL_ADC_Init+0x246>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80069ce:	f023 010f 	bic.w	r1, r3, #15
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	69db      	ldr	r3, [r3, #28]
 80069d6:	1e5a      	subs	r2, r3, #1
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	430a      	orrs	r2, r1
 80069de:	631a      	str	r2, [r3, #48]	@ 0x30
 80069e0:	e007      	b.n	80069f2 <HAL_ADC_Init+0x256>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	f022 020f 	bic.w	r2, r2, #15
 80069f0:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80069f6:	f023 0303 	bic.w	r3, r3, #3
 80069fa:	f043 0201 	orr.w	r2, r3, #1
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	659a      	str	r2, [r3, #88]	@ 0x58
 8006a02:	e007      	b.n	8006a14 <HAL_ADC_Init+0x278>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006a08:	f043 0210 	orr.w	r2, r3, #16
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8006a10:	2301      	movs	r3, #1
 8006a12:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8006a14:	7ffb      	ldrb	r3, [r7, #31]
}
 8006a16:	4618      	mov	r0, r3
 8006a18:	3720      	adds	r7, #32
 8006a1a:	46bd      	mov	sp, r7
 8006a1c:	bd80      	pop	{r7, pc}
 8006a1e:	bf00      	nop
 8006a20:	20000028 	.word	0x20000028
 8006a24:	053e2d63 	.word	0x053e2d63
 8006a28:	50040000 	.word	0x50040000
 8006a2c:	50040300 	.word	0x50040300
 8006a30:	fff0c007 	.word	0xfff0c007

08006a34 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8006a34:	b580      	push	{r7, lr}
 8006a36:	b084      	sub	sp, #16
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	4618      	mov	r0, r3
 8006a42:	f7ff fe71 	bl	8006728 <LL_ADC_REG_IsConversionOngoing>
 8006a46:	4603      	mov	r3, r0
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d14f      	bne.n	8006aec <HAL_ADC_Start+0xb8>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8006a52:	2b01      	cmp	r3, #1
 8006a54:	d101      	bne.n	8006a5a <HAL_ADC_Start+0x26>
 8006a56:	2302      	movs	r3, #2
 8006a58:	e04b      	b.n	8006af2 <HAL_ADC_Start+0xbe>
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	2201      	movs	r2, #1
 8006a5e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8006a62:	6878      	ldr	r0, [r7, #4]
 8006a64:	f000 fdce 	bl	8007604 <ADC_Enable>
 8006a68:	4603      	mov	r3, r0
 8006a6a:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8006a6c:	7bfb      	ldrb	r3, [r7, #15]
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d137      	bne.n	8006ae2 <HAL_ADC_Start+0xae>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006a76:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8006a7a:	f023 0301 	bic.w	r3, r3, #1
 8006a7e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	659a      	str	r2, [r3, #88]	@ 0x58
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006a8a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006a8e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006a92:	d106      	bne.n	8006aa2 <HAL_ADC_Start+0x6e>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006a98:	f023 0206 	bic.w	r2, r3, #6
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8006aa0:	e002      	b.n	8006aa8 <HAL_ADC_Start+0x74>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	2200      	movs	r2, #0
 8006aa6:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	221c      	movs	r2, #28
 8006aae:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	2200      	movs	r2, #0
 8006ab4:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }

      }
#else
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	68db      	ldr	r3, [r3, #12]
 8006abe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d007      	beq.n	8006ad6 <HAL_ADC_Start+0xa2>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006aca:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8006ace:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	4618      	mov	r0, r3
 8006adc:	f7ff fdfc 	bl	80066d8 <LL_ADC_REG_StartConversion>
 8006ae0:	e006      	b.n	8006af0 <HAL_ADC_Start+0xbc>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	2200      	movs	r2, #0
 8006ae6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
 8006aea:	e001      	b.n	8006af0 <HAL_ADC_Start+0xbc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8006aec:	2302      	movs	r3, #2
 8006aee:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 8006af0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006af2:	4618      	mov	r0, r3
 8006af4:	3710      	adds	r7, #16
 8006af6:	46bd      	mov	sp, r7
 8006af8:	bd80      	pop	{r7, pc}

08006afa <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8006afa:	b580      	push	{r7, lr}
 8006afc:	b084      	sub	sp, #16
 8006afe:	af00      	add	r7, sp, #0
 8006b00:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8006b08:	2b01      	cmp	r3, #1
 8006b0a:	d101      	bne.n	8006b10 <HAL_ADC_Stop+0x16>
 8006b0c:	2302      	movs	r3, #2
 8006b0e:	e023      	b.n	8006b58 <HAL_ADC_Stop+0x5e>
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	2201      	movs	r2, #1
 8006b14:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8006b18:	2103      	movs	r1, #3
 8006b1a:	6878      	ldr	r0, [r7, #4]
 8006b1c:	f000 fcb6 	bl	800748c <ADC_ConversionStop>
 8006b20:	4603      	mov	r3, r0
 8006b22:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8006b24:	7bfb      	ldrb	r3, [r7, #15]
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d111      	bne.n	8006b4e <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8006b2a:	6878      	ldr	r0, [r7, #4]
 8006b2c:	f000 fdf0 	bl	8007710 <ADC_Disable>
 8006b30:	4603      	mov	r3, r0
 8006b32:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8006b34:	7bfb      	ldrb	r3, [r7, #15]
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d109      	bne.n	8006b4e <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b3e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8006b42:	f023 0301 	bic.w	r3, r3, #1
 8006b46:	f043 0201 	orr.w	r2, r3, #1
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	2200      	movs	r2, #0
 8006b52:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 8006b56:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b58:	4618      	mov	r0, r3
 8006b5a:	3710      	adds	r7, #16
 8006b5c:	46bd      	mov	sp, r7
 8006b5e:	bd80      	pop	{r7, pc}

08006b60 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8006b60:	b580      	push	{r7, lr}
 8006b62:	b086      	sub	sp, #24
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	6078      	str	r0, [r7, #4]
 8006b68:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	695b      	ldr	r3, [r3, #20]
 8006b6e:	2b08      	cmp	r3, #8
 8006b70:	d102      	bne.n	8006b78 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8006b72:	2308      	movs	r3, #8
 8006b74:	617b      	str	r3, [r7, #20]
 8006b76:	e010      	b.n	8006b9a <HAL_ADC_PollForConversion+0x3a>
        tmp_Flag_End = (ADC_FLAG_EOC);
      }
    }
#else
    /* Check ADC DMA mode */
    if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	68db      	ldr	r3, [r3, #12]
 8006b7e:	f003 0301 	and.w	r3, r3, #1
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d007      	beq.n	8006b96 <HAL_ADC_PollForConversion+0x36>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b8a:	f043 0220 	orr.w	r2, r3, #32
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 8006b92:	2301      	movs	r3, #1
 8006b94:	e06f      	b.n	8006c76 <HAL_ADC_PollForConversion+0x116>
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 8006b96:	2304      	movs	r3, #4
 8006b98:	617b      	str	r3, [r7, #20]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8006b9a:	f7ff fba7 	bl	80062ec <HAL_GetTick>
 8006b9e:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8006ba0:	e021      	b.n	8006be6 <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8006ba2:	683b      	ldr	r3, [r7, #0]
 8006ba4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ba8:	d01d      	beq.n	8006be6 <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8006baa:	f7ff fb9f 	bl	80062ec <HAL_GetTick>
 8006bae:	4602      	mov	r2, r0
 8006bb0:	693b      	ldr	r3, [r7, #16]
 8006bb2:	1ad3      	subs	r3, r2, r3
 8006bb4:	683a      	ldr	r2, [r7, #0]
 8006bb6:	429a      	cmp	r2, r3
 8006bb8:	d302      	bcc.n	8006bc0 <HAL_ADC_PollForConversion+0x60>
 8006bba:	683b      	ldr	r3, [r7, #0]
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d112      	bne.n	8006be6 <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	681a      	ldr	r2, [r3, #0]
 8006bc6:	697b      	ldr	r3, [r7, #20]
 8006bc8:	4013      	ands	r3, r2
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d10b      	bne.n	8006be6 <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006bd2:	f043 0204 	orr.w	r2, r3, #4
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	2200      	movs	r2, #0
 8006bde:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

          return HAL_TIMEOUT;
 8006be2:	2303      	movs	r3, #3
 8006be4:	e047      	b.n	8006c76 <HAL_ADC_PollForConversion+0x116>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	681a      	ldr	r2, [r3, #0]
 8006bec:	697b      	ldr	r3, [r7, #20]
 8006bee:	4013      	ands	r3, r2
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d0d6      	beq.n	8006ba2 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006bf8:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	4618      	mov	r0, r3
 8006c06:	f7ff fc3d 	bl	8006484 <LL_ADC_REG_IsTriggerSourceSWStart>
 8006c0a:	4603      	mov	r3, r0
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d01c      	beq.n	8006c4a <HAL_ADC_PollForConversion+0xea>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	7e5b      	ldrb	r3, [r3, #25]
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d118      	bne.n	8006c4a <HAL_ADC_PollForConversion+0xea>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	f003 0308 	and.w	r3, r3, #8
 8006c22:	2b08      	cmp	r3, #8
 8006c24:	d111      	bne.n	8006c4a <HAL_ADC_PollForConversion+0xea>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006c2a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	659a      	str	r2, [r3, #88]	@ 0x58

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006c36:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d105      	bne.n	8006c4a <HAL_ADC_PollForConversion+0xea>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006c42:	f043 0201 	orr.w	r2, r3, #1
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	659a      	str	r2, [r3, #88]	@ 0x58
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
  }
#else
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	68db      	ldr	r3, [r3, #12]
 8006c50:	60fb      	str	r3, [r7, #12]
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8006c52:	697b      	ldr	r3, [r7, #20]
 8006c54:	2b08      	cmp	r3, #8
 8006c56:	d104      	bne.n	8006c62 <HAL_ADC_PollForConversion+0x102>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	2208      	movs	r2, #8
 8006c5e:	601a      	str	r2, [r3, #0]
 8006c60:	e008      	b.n	8006c74 <HAL_ADC_PollForConversion+0x114>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d103      	bne.n	8006c74 <HAL_ADC_PollForConversion+0x114>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	220c      	movs	r2, #12
 8006c72:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8006c74:	2300      	movs	r3, #0
}
 8006c76:	4618      	mov	r0, r3
 8006c78:	3718      	adds	r7, #24
 8006c7a:	46bd      	mov	sp, r7
 8006c7c:	bd80      	pop	{r7, pc}

08006c7e <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8006c7e:	b480      	push	{r7}
 8006c80:	b083      	sub	sp, #12
 8006c82:	af00      	add	r7, sp, #0
 8006c84:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8006c8c:	4618      	mov	r0, r3
 8006c8e:	370c      	adds	r7, #12
 8006c90:	46bd      	mov	sp, r7
 8006c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c96:	4770      	bx	lr

08006c98 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8006c98:	b580      	push	{r7, lr}
 8006c9a:	b0b6      	sub	sp, #216	@ 0xd8
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	6078      	str	r0, [r7, #4]
 8006ca0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006ca2:	2300      	movs	r3, #0
 8006ca4:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8006ca8:	2300      	movs	r3, #0
 8006caa:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8006cb2:	2b01      	cmp	r3, #1
 8006cb4:	d101      	bne.n	8006cba <HAL_ADC_ConfigChannel+0x22>
 8006cb6:	2302      	movs	r3, #2
 8006cb8:	e3d3      	b.n	8007462 <HAL_ADC_ConfigChannel+0x7ca>
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	2201      	movs	r2, #1
 8006cbe:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	4618      	mov	r0, r3
 8006cc8:	f7ff fd2e 	bl	8006728 <LL_ADC_REG_IsConversionOngoing>
 8006ccc:	4603      	mov	r3, r0
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	f040 83b8 	bne.w	8007444 <HAL_ADC_ConfigChannel+0x7ac>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8006cd4:	683b      	ldr	r3, [r7, #0]
 8006cd6:	685b      	ldr	r3, [r3, #4]
 8006cd8:	2b05      	cmp	r3, #5
 8006cda:	d824      	bhi.n	8006d26 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8006cdc:	683b      	ldr	r3, [r7, #0]
 8006cde:	685b      	ldr	r3, [r3, #4]
 8006ce0:	3b02      	subs	r3, #2
 8006ce2:	2b03      	cmp	r3, #3
 8006ce4:	d81b      	bhi.n	8006d1e <HAL_ADC_ConfigChannel+0x86>
 8006ce6:	a201      	add	r2, pc, #4	@ (adr r2, 8006cec <HAL_ADC_ConfigChannel+0x54>)
 8006ce8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cec:	08006cfd 	.word	0x08006cfd
 8006cf0:	08006d05 	.word	0x08006d05
 8006cf4:	08006d0d 	.word	0x08006d0d
 8006cf8:	08006d15 	.word	0x08006d15
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8006cfc:	683b      	ldr	r3, [r7, #0]
 8006cfe:	220c      	movs	r2, #12
 8006d00:	605a      	str	r2, [r3, #4]
          break;
 8006d02:	e010      	b.n	8006d26 <HAL_ADC_ConfigChannel+0x8e>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8006d04:	683b      	ldr	r3, [r7, #0]
 8006d06:	2212      	movs	r2, #18
 8006d08:	605a      	str	r2, [r3, #4]
          break;
 8006d0a:	e00c      	b.n	8006d26 <HAL_ADC_ConfigChannel+0x8e>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8006d0c:	683b      	ldr	r3, [r7, #0]
 8006d0e:	2218      	movs	r2, #24
 8006d10:	605a      	str	r2, [r3, #4]
          break;
 8006d12:	e008      	b.n	8006d26 <HAL_ADC_ConfigChannel+0x8e>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8006d14:	683b      	ldr	r3, [r7, #0]
 8006d16:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006d1a:	605a      	str	r2, [r3, #4]
          break;
 8006d1c:	e003      	b.n	8006d26 <HAL_ADC_ConfigChannel+0x8e>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8006d1e:	683b      	ldr	r3, [r7, #0]
 8006d20:	2206      	movs	r2, #6
 8006d22:	605a      	str	r2, [r3, #4]
          break;
 8006d24:	bf00      	nop
      }
    }
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	6818      	ldr	r0, [r3, #0]
 8006d2a:	683b      	ldr	r3, [r7, #0]
 8006d2c:	6859      	ldr	r1, [r3, #4]
 8006d2e:	683b      	ldr	r3, [r7, #0]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	461a      	mov	r2, r3
 8006d34:	f7ff fbb9 	bl	80064aa <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	4618      	mov	r0, r3
 8006d3e:	f7ff fcf3 	bl	8006728 <LL_ADC_REG_IsConversionOngoing>
 8006d42:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	4618      	mov	r0, r3
 8006d4c:	f7ff fd13 	bl	8006776 <LL_ADC_INJ_IsConversionOngoing>
 8006d50:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8006d54:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	f040 81c1 	bne.w	80070e0 <HAL_ADC_ConfigChannel+0x448>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8006d5e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	f040 81bc 	bne.w	80070e0 <HAL_ADC_ConfigChannel+0x448>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8006d68:	683b      	ldr	r3, [r7, #0]
 8006d6a:	689b      	ldr	r3, [r3, #8]
 8006d6c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006d70:	d10f      	bne.n	8006d92 <HAL_ADC_ConfigChannel+0xfa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	6818      	ldr	r0, [r3, #0]
 8006d76:	683b      	ldr	r3, [r7, #0]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	2200      	movs	r2, #0
 8006d7c:	4619      	mov	r1, r3
 8006d7e:	f7ff fbc0 	bl	8006502 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8006d8a:	4618      	mov	r0, r3
 8006d8c:	f7ff fb67 	bl	800645e <LL_ADC_SetSamplingTimeCommonConfig>
 8006d90:	e00e      	b.n	8006db0 <HAL_ADC_ConfigChannel+0x118>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	6818      	ldr	r0, [r3, #0]
 8006d96:	683b      	ldr	r3, [r7, #0]
 8006d98:	6819      	ldr	r1, [r3, #0]
 8006d9a:	683b      	ldr	r3, [r7, #0]
 8006d9c:	689b      	ldr	r3, [r3, #8]
 8006d9e:	461a      	mov	r2, r3
 8006da0:	f7ff fbaf 	bl	8006502 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	2100      	movs	r1, #0
 8006daa:	4618      	mov	r0, r3
 8006dac:	f7ff fb57 	bl	800645e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8006db0:	683b      	ldr	r3, [r7, #0]
 8006db2:	695a      	ldr	r2, [r3, #20]
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	68db      	ldr	r3, [r3, #12]
 8006dba:	08db      	lsrs	r3, r3, #3
 8006dbc:	f003 0303 	and.w	r3, r3, #3
 8006dc0:	005b      	lsls	r3, r3, #1
 8006dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8006dc6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8006dca:	683b      	ldr	r3, [r7, #0]
 8006dcc:	691b      	ldr	r3, [r3, #16]
 8006dce:	2b04      	cmp	r3, #4
 8006dd0:	d00a      	beq.n	8006de8 <HAL_ADC_ConfigChannel+0x150>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	6818      	ldr	r0, [r3, #0]
 8006dd6:	683b      	ldr	r3, [r7, #0]
 8006dd8:	6919      	ldr	r1, [r3, #16]
 8006dda:	683b      	ldr	r3, [r7, #0]
 8006ddc:	681a      	ldr	r2, [r3, #0]
 8006dde:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006de2:	f7ff fae7 	bl	80063b4 <LL_ADC_SetOffset>
 8006de6:	e17b      	b.n	80070e0 <HAL_ADC_ConfigChannel+0x448>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	2100      	movs	r1, #0
 8006dee:	4618      	mov	r0, r3
 8006df0:	f7ff fb04 	bl	80063fc <LL_ADC_GetOffsetChannel>
 8006df4:	4603      	mov	r3, r0
 8006df6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d10a      	bne.n	8006e14 <HAL_ADC_ConfigChannel+0x17c>
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	2100      	movs	r1, #0
 8006e04:	4618      	mov	r0, r3
 8006e06:	f7ff faf9 	bl	80063fc <LL_ADC_GetOffsetChannel>
 8006e0a:	4603      	mov	r3, r0
 8006e0c:	0e9b      	lsrs	r3, r3, #26
 8006e0e:	f003 021f 	and.w	r2, r3, #31
 8006e12:	e01e      	b.n	8006e52 <HAL_ADC_ConfigChannel+0x1ba>
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	2100      	movs	r1, #0
 8006e1a:	4618      	mov	r0, r3
 8006e1c:	f7ff faee 	bl	80063fc <LL_ADC_GetOffsetChannel>
 8006e20:	4603      	mov	r3, r0
 8006e22:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006e26:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8006e2a:	fa93 f3a3 	rbit	r3, r3
 8006e2e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8006e32:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006e36:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8006e3a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d101      	bne.n	8006e46 <HAL_ADC_ConfigChannel+0x1ae>
  {
    return 32U;
 8006e42:	2320      	movs	r3, #32
 8006e44:	e004      	b.n	8006e50 <HAL_ADC_ConfigChannel+0x1b8>
  }
  return __builtin_clz(value);
 8006e46:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8006e4a:	fab3 f383 	clz	r3, r3
 8006e4e:	b2db      	uxtb	r3, r3
 8006e50:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8006e52:	683b      	ldr	r3, [r7, #0]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d105      	bne.n	8006e6a <HAL_ADC_ConfigChannel+0x1d2>
 8006e5e:	683b      	ldr	r3, [r7, #0]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	0e9b      	lsrs	r3, r3, #26
 8006e64:	f003 031f 	and.w	r3, r3, #31
 8006e68:	e018      	b.n	8006e9c <HAL_ADC_ConfigChannel+0x204>
 8006e6a:	683b      	ldr	r3, [r7, #0]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006e72:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8006e76:	fa93 f3a3 	rbit	r3, r3
 8006e7a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8006e7e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006e82:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8006e86:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d101      	bne.n	8006e92 <HAL_ADC_ConfigChannel+0x1fa>
    return 32U;
 8006e8e:	2320      	movs	r3, #32
 8006e90:	e004      	b.n	8006e9c <HAL_ADC_ConfigChannel+0x204>
  return __builtin_clz(value);
 8006e92:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006e96:	fab3 f383 	clz	r3, r3
 8006e9a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8006e9c:	429a      	cmp	r2, r3
 8006e9e:	d106      	bne.n	8006eae <HAL_ADC_ConfigChannel+0x216>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	2200      	movs	r2, #0
 8006ea6:	2100      	movs	r1, #0
 8006ea8:	4618      	mov	r0, r3
 8006eaa:	f7ff fabd 	bl	8006428 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	2101      	movs	r1, #1
 8006eb4:	4618      	mov	r0, r3
 8006eb6:	f7ff faa1 	bl	80063fc <LL_ADC_GetOffsetChannel>
 8006eba:	4603      	mov	r3, r0
 8006ebc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d10a      	bne.n	8006eda <HAL_ADC_ConfigChannel+0x242>
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	2101      	movs	r1, #1
 8006eca:	4618      	mov	r0, r3
 8006ecc:	f7ff fa96 	bl	80063fc <LL_ADC_GetOffsetChannel>
 8006ed0:	4603      	mov	r3, r0
 8006ed2:	0e9b      	lsrs	r3, r3, #26
 8006ed4:	f003 021f 	and.w	r2, r3, #31
 8006ed8:	e01e      	b.n	8006f18 <HAL_ADC_ConfigChannel+0x280>
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	2101      	movs	r1, #1
 8006ee0:	4618      	mov	r0, r3
 8006ee2:	f7ff fa8b 	bl	80063fc <LL_ADC_GetOffsetChannel>
 8006ee6:	4603      	mov	r3, r0
 8006ee8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006eec:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8006ef0:	fa93 f3a3 	rbit	r3, r3
 8006ef4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8006ef8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006efc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8006f00:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d101      	bne.n	8006f0c <HAL_ADC_ConfigChannel+0x274>
    return 32U;
 8006f08:	2320      	movs	r3, #32
 8006f0a:	e004      	b.n	8006f16 <HAL_ADC_ConfigChannel+0x27e>
  return __builtin_clz(value);
 8006f0c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006f10:	fab3 f383 	clz	r3, r3
 8006f14:	b2db      	uxtb	r3, r3
 8006f16:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8006f18:	683b      	ldr	r3, [r7, #0]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d105      	bne.n	8006f30 <HAL_ADC_ConfigChannel+0x298>
 8006f24:	683b      	ldr	r3, [r7, #0]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	0e9b      	lsrs	r3, r3, #26
 8006f2a:	f003 031f 	and.w	r3, r3, #31
 8006f2e:	e018      	b.n	8006f62 <HAL_ADC_ConfigChannel+0x2ca>
 8006f30:	683b      	ldr	r3, [r7, #0]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006f38:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006f3c:	fa93 f3a3 	rbit	r3, r3
 8006f40:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8006f44:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8006f48:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8006f4c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d101      	bne.n	8006f58 <HAL_ADC_ConfigChannel+0x2c0>
    return 32U;
 8006f54:	2320      	movs	r3, #32
 8006f56:	e004      	b.n	8006f62 <HAL_ADC_ConfigChannel+0x2ca>
  return __builtin_clz(value);
 8006f58:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006f5c:	fab3 f383 	clz	r3, r3
 8006f60:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8006f62:	429a      	cmp	r2, r3
 8006f64:	d106      	bne.n	8006f74 <HAL_ADC_ConfigChannel+0x2dc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	2200      	movs	r2, #0
 8006f6c:	2101      	movs	r1, #1
 8006f6e:	4618      	mov	r0, r3
 8006f70:	f7ff fa5a 	bl	8006428 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	2102      	movs	r1, #2
 8006f7a:	4618      	mov	r0, r3
 8006f7c:	f7ff fa3e 	bl	80063fc <LL_ADC_GetOffsetChannel>
 8006f80:	4603      	mov	r3, r0
 8006f82:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d10a      	bne.n	8006fa0 <HAL_ADC_ConfigChannel+0x308>
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	2102      	movs	r1, #2
 8006f90:	4618      	mov	r0, r3
 8006f92:	f7ff fa33 	bl	80063fc <LL_ADC_GetOffsetChannel>
 8006f96:	4603      	mov	r3, r0
 8006f98:	0e9b      	lsrs	r3, r3, #26
 8006f9a:	f003 021f 	and.w	r2, r3, #31
 8006f9e:	e01e      	b.n	8006fde <HAL_ADC_ConfigChannel+0x346>
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	2102      	movs	r1, #2
 8006fa6:	4618      	mov	r0, r3
 8006fa8:	f7ff fa28 	bl	80063fc <LL_ADC_GetOffsetChannel>
 8006fac:	4603      	mov	r3, r0
 8006fae:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006fb2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006fb6:	fa93 f3a3 	rbit	r3, r3
 8006fba:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8006fbe:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006fc2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8006fc6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d101      	bne.n	8006fd2 <HAL_ADC_ConfigChannel+0x33a>
    return 32U;
 8006fce:	2320      	movs	r3, #32
 8006fd0:	e004      	b.n	8006fdc <HAL_ADC_ConfigChannel+0x344>
  return __builtin_clz(value);
 8006fd2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8006fd6:	fab3 f383 	clz	r3, r3
 8006fda:	b2db      	uxtb	r3, r3
 8006fdc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8006fde:	683b      	ldr	r3, [r7, #0]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d105      	bne.n	8006ff6 <HAL_ADC_ConfigChannel+0x35e>
 8006fea:	683b      	ldr	r3, [r7, #0]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	0e9b      	lsrs	r3, r3, #26
 8006ff0:	f003 031f 	and.w	r3, r3, #31
 8006ff4:	e016      	b.n	8007024 <HAL_ADC_ConfigChannel+0x38c>
 8006ff6:	683b      	ldr	r3, [r7, #0]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006ffe:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007002:	fa93 f3a3 	rbit	r3, r3
 8007006:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8007008:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800700a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 800700e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007012:	2b00      	cmp	r3, #0
 8007014:	d101      	bne.n	800701a <HAL_ADC_ConfigChannel+0x382>
    return 32U;
 8007016:	2320      	movs	r3, #32
 8007018:	e004      	b.n	8007024 <HAL_ADC_ConfigChannel+0x38c>
  return __builtin_clz(value);
 800701a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800701e:	fab3 f383 	clz	r3, r3
 8007022:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8007024:	429a      	cmp	r2, r3
 8007026:	d106      	bne.n	8007036 <HAL_ADC_ConfigChannel+0x39e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	2200      	movs	r2, #0
 800702e:	2102      	movs	r1, #2
 8007030:	4618      	mov	r0, r3
 8007032:	f7ff f9f9 	bl	8006428 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	2103      	movs	r1, #3
 800703c:	4618      	mov	r0, r3
 800703e:	f7ff f9dd 	bl	80063fc <LL_ADC_GetOffsetChannel>
 8007042:	4603      	mov	r3, r0
 8007044:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007048:	2b00      	cmp	r3, #0
 800704a:	d10a      	bne.n	8007062 <HAL_ADC_ConfigChannel+0x3ca>
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	2103      	movs	r1, #3
 8007052:	4618      	mov	r0, r3
 8007054:	f7ff f9d2 	bl	80063fc <LL_ADC_GetOffsetChannel>
 8007058:	4603      	mov	r3, r0
 800705a:	0e9b      	lsrs	r3, r3, #26
 800705c:	f003 021f 	and.w	r2, r3, #31
 8007060:	e017      	b.n	8007092 <HAL_ADC_ConfigChannel+0x3fa>
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	2103      	movs	r1, #3
 8007068:	4618      	mov	r0, r3
 800706a:	f7ff f9c7 	bl	80063fc <LL_ADC_GetOffsetChannel>
 800706e:	4603      	mov	r3, r0
 8007070:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007072:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007074:	fa93 f3a3 	rbit	r3, r3
 8007078:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 800707a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800707c:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 800707e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007080:	2b00      	cmp	r3, #0
 8007082:	d101      	bne.n	8007088 <HAL_ADC_ConfigChannel+0x3f0>
    return 32U;
 8007084:	2320      	movs	r3, #32
 8007086:	e003      	b.n	8007090 <HAL_ADC_ConfigChannel+0x3f8>
  return __builtin_clz(value);
 8007088:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800708a:	fab3 f383 	clz	r3, r3
 800708e:	b2db      	uxtb	r3, r3
 8007090:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8007092:	683b      	ldr	r3, [r7, #0]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800709a:	2b00      	cmp	r3, #0
 800709c:	d105      	bne.n	80070aa <HAL_ADC_ConfigChannel+0x412>
 800709e:	683b      	ldr	r3, [r7, #0]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	0e9b      	lsrs	r3, r3, #26
 80070a4:	f003 031f 	and.w	r3, r3, #31
 80070a8:	e011      	b.n	80070ce <HAL_ADC_ConfigChannel+0x436>
 80070aa:	683b      	ldr	r3, [r7, #0]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80070b0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80070b2:	fa93 f3a3 	rbit	r3, r3
 80070b6:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 80070b8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80070ba:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 80070bc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d101      	bne.n	80070c6 <HAL_ADC_ConfigChannel+0x42e>
    return 32U;
 80070c2:	2320      	movs	r3, #32
 80070c4:	e003      	b.n	80070ce <HAL_ADC_ConfigChannel+0x436>
  return __builtin_clz(value);
 80070c6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80070c8:	fab3 f383 	clz	r3, r3
 80070cc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80070ce:	429a      	cmp	r2, r3
 80070d0:	d106      	bne.n	80070e0 <HAL_ADC_ConfigChannel+0x448>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	2200      	movs	r2, #0
 80070d8:	2103      	movs	r1, #3
 80070da:	4618      	mov	r0, r3
 80070dc:	f7ff f9a4 	bl	8006428 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	4618      	mov	r0, r3
 80070e6:	f7ff fad1 	bl	800668c <LL_ADC_IsEnabled>
 80070ea:	4603      	mov	r3, r0
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	f040 813f 	bne.w	8007370 <HAL_ADC_ConfigChannel+0x6d8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	6818      	ldr	r0, [r3, #0]
 80070f6:	683b      	ldr	r3, [r7, #0]
 80070f8:	6819      	ldr	r1, [r3, #0]
 80070fa:	683b      	ldr	r3, [r7, #0]
 80070fc:	68db      	ldr	r3, [r3, #12]
 80070fe:	461a      	mov	r2, r3
 8007100:	f7ff fa2a 	bl	8006558 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8007104:	683b      	ldr	r3, [r7, #0]
 8007106:	68db      	ldr	r3, [r3, #12]
 8007108:	4a8e      	ldr	r2, [pc, #568]	@ (8007344 <HAL_ADC_ConfigChannel+0x6ac>)
 800710a:	4293      	cmp	r3, r2
 800710c:	f040 8130 	bne.w	8007370 <HAL_ADC_ConfigChannel+0x6d8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8007114:	683b      	ldr	r3, [r7, #0]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800711c:	2b00      	cmp	r3, #0
 800711e:	d10b      	bne.n	8007138 <HAL_ADC_ConfigChannel+0x4a0>
 8007120:	683b      	ldr	r3, [r7, #0]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	0e9b      	lsrs	r3, r3, #26
 8007126:	3301      	adds	r3, #1
 8007128:	f003 031f 	and.w	r3, r3, #31
 800712c:	2b09      	cmp	r3, #9
 800712e:	bf94      	ite	ls
 8007130:	2301      	movls	r3, #1
 8007132:	2300      	movhi	r3, #0
 8007134:	b2db      	uxtb	r3, r3
 8007136:	e019      	b.n	800716c <HAL_ADC_ConfigChannel+0x4d4>
 8007138:	683b      	ldr	r3, [r7, #0]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800713e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007140:	fa93 f3a3 	rbit	r3, r3
 8007144:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8007146:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007148:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 800714a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800714c:	2b00      	cmp	r3, #0
 800714e:	d101      	bne.n	8007154 <HAL_ADC_ConfigChannel+0x4bc>
    return 32U;
 8007150:	2320      	movs	r3, #32
 8007152:	e003      	b.n	800715c <HAL_ADC_ConfigChannel+0x4c4>
  return __builtin_clz(value);
 8007154:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007156:	fab3 f383 	clz	r3, r3
 800715a:	b2db      	uxtb	r3, r3
 800715c:	3301      	adds	r3, #1
 800715e:	f003 031f 	and.w	r3, r3, #31
 8007162:	2b09      	cmp	r3, #9
 8007164:	bf94      	ite	ls
 8007166:	2301      	movls	r3, #1
 8007168:	2300      	movhi	r3, #0
 800716a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800716c:	2b00      	cmp	r3, #0
 800716e:	d079      	beq.n	8007264 <HAL_ADC_ConfigChannel+0x5cc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8007170:	683b      	ldr	r3, [r7, #0]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007178:	2b00      	cmp	r3, #0
 800717a:	d107      	bne.n	800718c <HAL_ADC_ConfigChannel+0x4f4>
 800717c:	683b      	ldr	r3, [r7, #0]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	0e9b      	lsrs	r3, r3, #26
 8007182:	3301      	adds	r3, #1
 8007184:	069b      	lsls	r3, r3, #26
 8007186:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800718a:	e015      	b.n	80071b8 <HAL_ADC_ConfigChannel+0x520>
 800718c:	683b      	ldr	r3, [r7, #0]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007192:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007194:	fa93 f3a3 	rbit	r3, r3
 8007198:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 800719a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800719c:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 800719e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d101      	bne.n	80071a8 <HAL_ADC_ConfigChannel+0x510>
    return 32U;
 80071a4:	2320      	movs	r3, #32
 80071a6:	e003      	b.n	80071b0 <HAL_ADC_ConfigChannel+0x518>
  return __builtin_clz(value);
 80071a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80071aa:	fab3 f383 	clz	r3, r3
 80071ae:	b2db      	uxtb	r3, r3
 80071b0:	3301      	adds	r3, #1
 80071b2:	069b      	lsls	r3, r3, #26
 80071b4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80071b8:	683b      	ldr	r3, [r7, #0]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d109      	bne.n	80071d8 <HAL_ADC_ConfigChannel+0x540>
 80071c4:	683b      	ldr	r3, [r7, #0]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	0e9b      	lsrs	r3, r3, #26
 80071ca:	3301      	adds	r3, #1
 80071cc:	f003 031f 	and.w	r3, r3, #31
 80071d0:	2101      	movs	r1, #1
 80071d2:	fa01 f303 	lsl.w	r3, r1, r3
 80071d6:	e017      	b.n	8007208 <HAL_ADC_ConfigChannel+0x570>
 80071d8:	683b      	ldr	r3, [r7, #0]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80071de:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80071e0:	fa93 f3a3 	rbit	r3, r3
 80071e4:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 80071e6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80071e8:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 80071ea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d101      	bne.n	80071f4 <HAL_ADC_ConfigChannel+0x55c>
    return 32U;
 80071f0:	2320      	movs	r3, #32
 80071f2:	e003      	b.n	80071fc <HAL_ADC_ConfigChannel+0x564>
  return __builtin_clz(value);
 80071f4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80071f6:	fab3 f383 	clz	r3, r3
 80071fa:	b2db      	uxtb	r3, r3
 80071fc:	3301      	adds	r3, #1
 80071fe:	f003 031f 	and.w	r3, r3, #31
 8007202:	2101      	movs	r1, #1
 8007204:	fa01 f303 	lsl.w	r3, r1, r3
 8007208:	ea42 0103 	orr.w	r1, r2, r3
 800720c:	683b      	ldr	r3, [r7, #0]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007214:	2b00      	cmp	r3, #0
 8007216:	d10a      	bne.n	800722e <HAL_ADC_ConfigChannel+0x596>
 8007218:	683b      	ldr	r3, [r7, #0]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	0e9b      	lsrs	r3, r3, #26
 800721e:	3301      	adds	r3, #1
 8007220:	f003 021f 	and.w	r2, r3, #31
 8007224:	4613      	mov	r3, r2
 8007226:	005b      	lsls	r3, r3, #1
 8007228:	4413      	add	r3, r2
 800722a:	051b      	lsls	r3, r3, #20
 800722c:	e018      	b.n	8007260 <HAL_ADC_ConfigChannel+0x5c8>
 800722e:	683b      	ldr	r3, [r7, #0]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007234:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007236:	fa93 f3a3 	rbit	r3, r3
 800723a:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 800723c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800723e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8007240:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007242:	2b00      	cmp	r3, #0
 8007244:	d101      	bne.n	800724a <HAL_ADC_ConfigChannel+0x5b2>
    return 32U;
 8007246:	2320      	movs	r3, #32
 8007248:	e003      	b.n	8007252 <HAL_ADC_ConfigChannel+0x5ba>
  return __builtin_clz(value);
 800724a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800724c:	fab3 f383 	clz	r3, r3
 8007250:	b2db      	uxtb	r3, r3
 8007252:	3301      	adds	r3, #1
 8007254:	f003 021f 	and.w	r2, r3, #31
 8007258:	4613      	mov	r3, r2
 800725a:	005b      	lsls	r3, r3, #1
 800725c:	4413      	add	r3, r2
 800725e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8007260:	430b      	orrs	r3, r1
 8007262:	e080      	b.n	8007366 <HAL_ADC_ConfigChannel+0x6ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8007264:	683b      	ldr	r3, [r7, #0]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800726c:	2b00      	cmp	r3, #0
 800726e:	d107      	bne.n	8007280 <HAL_ADC_ConfigChannel+0x5e8>
 8007270:	683b      	ldr	r3, [r7, #0]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	0e9b      	lsrs	r3, r3, #26
 8007276:	3301      	adds	r3, #1
 8007278:	069b      	lsls	r3, r3, #26
 800727a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800727e:	e015      	b.n	80072ac <HAL_ADC_ConfigChannel+0x614>
 8007280:	683b      	ldr	r3, [r7, #0]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007286:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007288:	fa93 f3a3 	rbit	r3, r3
 800728c:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 800728e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007290:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8007292:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007294:	2b00      	cmp	r3, #0
 8007296:	d101      	bne.n	800729c <HAL_ADC_ConfigChannel+0x604>
    return 32U;
 8007298:	2320      	movs	r3, #32
 800729a:	e003      	b.n	80072a4 <HAL_ADC_ConfigChannel+0x60c>
  return __builtin_clz(value);
 800729c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800729e:	fab3 f383 	clz	r3, r3
 80072a2:	b2db      	uxtb	r3, r3
 80072a4:	3301      	adds	r3, #1
 80072a6:	069b      	lsls	r3, r3, #26
 80072a8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80072ac:	683b      	ldr	r3, [r7, #0]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d109      	bne.n	80072cc <HAL_ADC_ConfigChannel+0x634>
 80072b8:	683b      	ldr	r3, [r7, #0]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	0e9b      	lsrs	r3, r3, #26
 80072be:	3301      	adds	r3, #1
 80072c0:	f003 031f 	and.w	r3, r3, #31
 80072c4:	2101      	movs	r1, #1
 80072c6:	fa01 f303 	lsl.w	r3, r1, r3
 80072ca:	e017      	b.n	80072fc <HAL_ADC_ConfigChannel+0x664>
 80072cc:	683b      	ldr	r3, [r7, #0]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80072d2:	6a3b      	ldr	r3, [r7, #32]
 80072d4:	fa93 f3a3 	rbit	r3, r3
 80072d8:	61fb      	str	r3, [r7, #28]
  return result;
 80072da:	69fb      	ldr	r3, [r7, #28]
 80072dc:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80072de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d101      	bne.n	80072e8 <HAL_ADC_ConfigChannel+0x650>
    return 32U;
 80072e4:	2320      	movs	r3, #32
 80072e6:	e003      	b.n	80072f0 <HAL_ADC_ConfigChannel+0x658>
  return __builtin_clz(value);
 80072e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072ea:	fab3 f383 	clz	r3, r3
 80072ee:	b2db      	uxtb	r3, r3
 80072f0:	3301      	adds	r3, #1
 80072f2:	f003 031f 	and.w	r3, r3, #31
 80072f6:	2101      	movs	r1, #1
 80072f8:	fa01 f303 	lsl.w	r3, r1, r3
 80072fc:	ea42 0103 	orr.w	r1, r2, r3
 8007300:	683b      	ldr	r3, [r7, #0]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007308:	2b00      	cmp	r3, #0
 800730a:	d10d      	bne.n	8007328 <HAL_ADC_ConfigChannel+0x690>
 800730c:	683b      	ldr	r3, [r7, #0]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	0e9b      	lsrs	r3, r3, #26
 8007312:	3301      	adds	r3, #1
 8007314:	f003 021f 	and.w	r2, r3, #31
 8007318:	4613      	mov	r3, r2
 800731a:	005b      	lsls	r3, r3, #1
 800731c:	4413      	add	r3, r2
 800731e:	3b1e      	subs	r3, #30
 8007320:	051b      	lsls	r3, r3, #20
 8007322:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8007326:	e01d      	b.n	8007364 <HAL_ADC_ConfigChannel+0x6cc>
 8007328:	683b      	ldr	r3, [r7, #0]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800732e:	697b      	ldr	r3, [r7, #20]
 8007330:	fa93 f3a3 	rbit	r3, r3
 8007334:	613b      	str	r3, [r7, #16]
  return result;
 8007336:	693b      	ldr	r3, [r7, #16]
 8007338:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800733a:	69bb      	ldr	r3, [r7, #24]
 800733c:	2b00      	cmp	r3, #0
 800733e:	d103      	bne.n	8007348 <HAL_ADC_ConfigChannel+0x6b0>
    return 32U;
 8007340:	2320      	movs	r3, #32
 8007342:	e005      	b.n	8007350 <HAL_ADC_ConfigChannel+0x6b8>
 8007344:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8007348:	69bb      	ldr	r3, [r7, #24]
 800734a:	fab3 f383 	clz	r3, r3
 800734e:	b2db      	uxtb	r3, r3
 8007350:	3301      	adds	r3, #1
 8007352:	f003 021f 	and.w	r2, r3, #31
 8007356:	4613      	mov	r3, r2
 8007358:	005b      	lsls	r3, r3, #1
 800735a:	4413      	add	r3, r2
 800735c:	3b1e      	subs	r3, #30
 800735e:	051b      	lsls	r3, r3, #20
 8007360:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8007364:	430b      	orrs	r3, r1
 8007366:	683a      	ldr	r2, [r7, #0]
 8007368:	6892      	ldr	r2, [r2, #8]
 800736a:	4619      	mov	r1, r3
 800736c:	f7ff f8c9 	bl	8006502 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8007370:	683b      	ldr	r3, [r7, #0]
 8007372:	681a      	ldr	r2, [r3, #0]
 8007374:	4b3d      	ldr	r3, [pc, #244]	@ (800746c <HAL_ADC_ConfigChannel+0x7d4>)
 8007376:	4013      	ands	r3, r2
 8007378:	2b00      	cmp	r3, #0
 800737a:	d06c      	beq.n	8007456 <HAL_ADC_ConfigChannel+0x7be>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800737c:	483c      	ldr	r0, [pc, #240]	@ (8007470 <HAL_ADC_ConfigChannel+0x7d8>)
 800737e:	f7ff f80b 	bl	8006398 <LL_ADC_GetCommonPathInternalCh>
 8007382:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8007386:	683b      	ldr	r3, [r7, #0]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	4a3a      	ldr	r2, [pc, #232]	@ (8007474 <HAL_ADC_ConfigChannel+0x7dc>)
 800738c:	4293      	cmp	r3, r2
 800738e:	d127      	bne.n	80073e0 <HAL_ADC_ConfigChannel+0x748>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8007390:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007394:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007398:	2b00      	cmp	r3, #0
 800739a:	d121      	bne.n	80073e0 <HAL_ADC_ConfigChannel+0x748>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	4a35      	ldr	r2, [pc, #212]	@ (8007478 <HAL_ADC_ConfigChannel+0x7e0>)
 80073a2:	4293      	cmp	r3, r2
 80073a4:	d157      	bne.n	8007456 <HAL_ADC_ConfigChannel+0x7be>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80073a6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80073aa:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80073ae:	4619      	mov	r1, r3
 80073b0:	482f      	ldr	r0, [pc, #188]	@ (8007470 <HAL_ADC_ConfigChannel+0x7d8>)
 80073b2:	f7fe ffde 	bl	8006372 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80073b6:	4b31      	ldr	r3, [pc, #196]	@ (800747c <HAL_ADC_ConfigChannel+0x7e4>)
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	099b      	lsrs	r3, r3, #6
 80073bc:	4a30      	ldr	r2, [pc, #192]	@ (8007480 <HAL_ADC_ConfigChannel+0x7e8>)
 80073be:	fba2 2303 	umull	r2, r3, r2, r3
 80073c2:	099b      	lsrs	r3, r3, #6
 80073c4:	1c5a      	adds	r2, r3, #1
 80073c6:	4613      	mov	r3, r2
 80073c8:	005b      	lsls	r3, r3, #1
 80073ca:	4413      	add	r3, r2
 80073cc:	009b      	lsls	r3, r3, #2
 80073ce:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80073d0:	e002      	b.n	80073d8 <HAL_ADC_ConfigChannel+0x740>
          {
            wait_loop_index--;
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	3b01      	subs	r3, #1
 80073d6:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d1f9      	bne.n	80073d2 <HAL_ADC_ConfigChannel+0x73a>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80073de:	e03a      	b.n	8007456 <HAL_ADC_ConfigChannel+0x7be>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80073e0:	683b      	ldr	r3, [r7, #0]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	4a27      	ldr	r2, [pc, #156]	@ (8007484 <HAL_ADC_ConfigChannel+0x7ec>)
 80073e6:	4293      	cmp	r3, r2
 80073e8:	d113      	bne.n	8007412 <HAL_ADC_ConfigChannel+0x77a>
 80073ea:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80073ee:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d10d      	bne.n	8007412 <HAL_ADC_ConfigChannel+0x77a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	4a1f      	ldr	r2, [pc, #124]	@ (8007478 <HAL_ADC_ConfigChannel+0x7e0>)
 80073fc:	4293      	cmp	r3, r2
 80073fe:	d12a      	bne.n	8007456 <HAL_ADC_ConfigChannel+0x7be>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8007400:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007404:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007408:	4619      	mov	r1, r3
 800740a:	4819      	ldr	r0, [pc, #100]	@ (8007470 <HAL_ADC_ConfigChannel+0x7d8>)
 800740c:	f7fe ffb1 	bl	8006372 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8007410:	e021      	b.n	8007456 <HAL_ADC_ConfigChannel+0x7be>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8007412:	683b      	ldr	r3, [r7, #0]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	4a1c      	ldr	r2, [pc, #112]	@ (8007488 <HAL_ADC_ConfigChannel+0x7f0>)
 8007418:	4293      	cmp	r3, r2
 800741a:	d11c      	bne.n	8007456 <HAL_ADC_ConfigChannel+0x7be>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800741c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007420:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007424:	2b00      	cmp	r3, #0
 8007426:	d116      	bne.n	8007456 <HAL_ADC_ConfigChannel+0x7be>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	4a12      	ldr	r2, [pc, #72]	@ (8007478 <HAL_ADC_ConfigChannel+0x7e0>)
 800742e:	4293      	cmp	r3, r2
 8007430:	d111      	bne.n	8007456 <HAL_ADC_ConfigChannel+0x7be>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8007432:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007436:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800743a:	4619      	mov	r1, r3
 800743c:	480c      	ldr	r0, [pc, #48]	@ (8007470 <HAL_ADC_ConfigChannel+0x7d8>)
 800743e:	f7fe ff98 	bl	8006372 <LL_ADC_SetCommonPathInternalCh>
 8007442:	e008      	b.n	8007456 <HAL_ADC_ConfigChannel+0x7be>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007448:	f043 0220 	orr.w	r2, r3, #32
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8007450:	2301      	movs	r3, #1
 8007452:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	2200      	movs	r2, #0
 800745a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 800745e:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8007462:	4618      	mov	r0, r3
 8007464:	37d8      	adds	r7, #216	@ 0xd8
 8007466:	46bd      	mov	sp, r7
 8007468:	bd80      	pop	{r7, pc}
 800746a:	bf00      	nop
 800746c:	80080000 	.word	0x80080000
 8007470:	50040300 	.word	0x50040300
 8007474:	c7520000 	.word	0xc7520000
 8007478:	50040000 	.word	0x50040000
 800747c:	20000028 	.word	0x20000028
 8007480:	053e2d63 	.word	0x053e2d63
 8007484:	cb840000 	.word	0xcb840000
 8007488:	80000001 	.word	0x80000001

0800748c <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 800748c:	b580      	push	{r7, lr}
 800748e:	b088      	sub	sp, #32
 8007490:	af00      	add	r7, sp, #0
 8007492:	6078      	str	r0, [r7, #4]
 8007494:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8007496:	2300      	movs	r3, #0
 8007498:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 800749a:	683b      	ldr	r3, [r7, #0]
 800749c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	4618      	mov	r0, r3
 80074a4:	f7ff f940 	bl	8006728 <LL_ADC_REG_IsConversionOngoing>
 80074a8:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	4618      	mov	r0, r3
 80074b0:	f7ff f961 	bl	8006776 <LL_ADC_INJ_IsConversionOngoing>
 80074b4:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 80074b6:	693b      	ldr	r3, [r7, #16]
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d103      	bne.n	80074c4 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	2b00      	cmp	r3, #0
 80074c0:	f000 8098 	beq.w	80075f4 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	68db      	ldr	r3, [r3, #12]
 80074ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d02a      	beq.n	8007528 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	7e5b      	ldrb	r3, [r3, #25]
 80074d6:	2b01      	cmp	r3, #1
 80074d8:	d126      	bne.n	8007528 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	7e1b      	ldrb	r3, [r3, #24]
 80074de:	2b01      	cmp	r3, #1
 80074e0:	d122      	bne.n	8007528 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 80074e2:	2301      	movs	r3, #1
 80074e4:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80074e6:	e014      	b.n	8007512 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 80074e8:	69fb      	ldr	r3, [r7, #28]
 80074ea:	4a45      	ldr	r2, [pc, #276]	@ (8007600 <ADC_ConversionStop+0x174>)
 80074ec:	4293      	cmp	r3, r2
 80074ee:	d90d      	bls.n	800750c <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80074f4:	f043 0210 	orr.w	r2, r3, #16
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007500:	f043 0201 	orr.w	r2, r3, #1
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8007508:	2301      	movs	r3, #1
 800750a:	e074      	b.n	80075f6 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 800750c:	69fb      	ldr	r3, [r7, #28]
 800750e:	3301      	adds	r3, #1
 8007510:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800751c:	2b40      	cmp	r3, #64	@ 0x40
 800751e:	d1e3      	bne.n	80074e8 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	2240      	movs	r2, #64	@ 0x40
 8007526:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8007528:	69bb      	ldr	r3, [r7, #24]
 800752a:	2b02      	cmp	r3, #2
 800752c:	d014      	beq.n	8007558 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	4618      	mov	r0, r3
 8007534:	f7ff f8f8 	bl	8006728 <LL_ADC_REG_IsConversionOngoing>
 8007538:	4603      	mov	r3, r0
 800753a:	2b00      	cmp	r3, #0
 800753c:	d00c      	beq.n	8007558 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	4618      	mov	r0, r3
 8007544:	f7ff f8b5 	bl	80066b2 <LL_ADC_IsDisableOngoing>
 8007548:	4603      	mov	r3, r0
 800754a:	2b00      	cmp	r3, #0
 800754c:	d104      	bne.n	8007558 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	4618      	mov	r0, r3
 8007554:	f7ff f8d4 	bl	8006700 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8007558:	69bb      	ldr	r3, [r7, #24]
 800755a:	2b01      	cmp	r3, #1
 800755c:	d014      	beq.n	8007588 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	4618      	mov	r0, r3
 8007564:	f7ff f907 	bl	8006776 <LL_ADC_INJ_IsConversionOngoing>
 8007568:	4603      	mov	r3, r0
 800756a:	2b00      	cmp	r3, #0
 800756c:	d00c      	beq.n	8007588 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	4618      	mov	r0, r3
 8007574:	f7ff f89d 	bl	80066b2 <LL_ADC_IsDisableOngoing>
 8007578:	4603      	mov	r3, r0
 800757a:	2b00      	cmp	r3, #0
 800757c:	d104      	bne.n	8007588 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	4618      	mov	r0, r3
 8007584:	f7ff f8e3 	bl	800674e <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8007588:	69bb      	ldr	r3, [r7, #24]
 800758a:	2b02      	cmp	r3, #2
 800758c:	d005      	beq.n	800759a <ADC_ConversionStop+0x10e>
 800758e:	69bb      	ldr	r3, [r7, #24]
 8007590:	2b03      	cmp	r3, #3
 8007592:	d105      	bne.n	80075a0 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8007594:	230c      	movs	r3, #12
 8007596:	617b      	str	r3, [r7, #20]
        break;
 8007598:	e005      	b.n	80075a6 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 800759a:	2308      	movs	r3, #8
 800759c:	617b      	str	r3, [r7, #20]
        break;
 800759e:	e002      	b.n	80075a6 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 80075a0:	2304      	movs	r3, #4
 80075a2:	617b      	str	r3, [r7, #20]
        break;
 80075a4:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 80075a6:	f7fe fea1 	bl	80062ec <HAL_GetTick>
 80075aa:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80075ac:	e01b      	b.n	80075e6 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80075ae:	f7fe fe9d 	bl	80062ec <HAL_GetTick>
 80075b2:	4602      	mov	r2, r0
 80075b4:	68bb      	ldr	r3, [r7, #8]
 80075b6:	1ad3      	subs	r3, r2, r3
 80075b8:	2b05      	cmp	r3, #5
 80075ba:	d914      	bls.n	80075e6 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	689a      	ldr	r2, [r3, #8]
 80075c2:	697b      	ldr	r3, [r7, #20]
 80075c4:	4013      	ands	r3, r2
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d00d      	beq.n	80075e6 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80075ce:	f043 0210 	orr.w	r2, r3, #16
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80075da:	f043 0201 	orr.w	r2, r3, #1
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 80075e2:	2301      	movs	r3, #1
 80075e4:	e007      	b.n	80075f6 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	689a      	ldr	r2, [r3, #8]
 80075ec:	697b      	ldr	r3, [r7, #20]
 80075ee:	4013      	ands	r3, r2
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d1dc      	bne.n	80075ae <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 80075f4:	2300      	movs	r3, #0
}
 80075f6:	4618      	mov	r0, r3
 80075f8:	3720      	adds	r7, #32
 80075fa:	46bd      	mov	sp, r7
 80075fc:	bd80      	pop	{r7, pc}
 80075fe:	bf00      	nop
 8007600:	a33fffff 	.word	0xa33fffff

08007604 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8007604:	b580      	push	{r7, lr}
 8007606:	b084      	sub	sp, #16
 8007608:	af00      	add	r7, sp, #0
 800760a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 800760c:	2300      	movs	r3, #0
 800760e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	4618      	mov	r0, r3
 8007616:	f7ff f839 	bl	800668c <LL_ADC_IsEnabled>
 800761a:	4603      	mov	r3, r0
 800761c:	2b00      	cmp	r3, #0
 800761e:	d169      	bne.n	80076f4 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	689a      	ldr	r2, [r3, #8]
 8007626:	4b36      	ldr	r3, [pc, #216]	@ (8007700 <ADC_Enable+0xfc>)
 8007628:	4013      	ands	r3, r2
 800762a:	2b00      	cmp	r3, #0
 800762c:	d00d      	beq.n	800764a <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007632:	f043 0210 	orr.w	r2, r3, #16
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800763e:	f043 0201 	orr.w	r2, r3, #1
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8007646:	2301      	movs	r3, #1
 8007648:	e055      	b.n	80076f6 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	4618      	mov	r0, r3
 8007650:	f7fe fff4 	bl	800663c <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8007654:	482b      	ldr	r0, [pc, #172]	@ (8007704 <ADC_Enable+0x100>)
 8007656:	f7fe fe9f 	bl	8006398 <LL_ADC_GetCommonPathInternalCh>
 800765a:	4603      	mov	r3, r0
 800765c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007660:	2b00      	cmp	r3, #0
 8007662:	d013      	beq.n	800768c <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8007664:	4b28      	ldr	r3, [pc, #160]	@ (8007708 <ADC_Enable+0x104>)
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	099b      	lsrs	r3, r3, #6
 800766a:	4a28      	ldr	r2, [pc, #160]	@ (800770c <ADC_Enable+0x108>)
 800766c:	fba2 2303 	umull	r2, r3, r2, r3
 8007670:	099b      	lsrs	r3, r3, #6
 8007672:	1c5a      	adds	r2, r3, #1
 8007674:	4613      	mov	r3, r2
 8007676:	005b      	lsls	r3, r3, #1
 8007678:	4413      	add	r3, r2
 800767a:	009b      	lsls	r3, r3, #2
 800767c:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 800767e:	e002      	b.n	8007686 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8007680:	68bb      	ldr	r3, [r7, #8]
 8007682:	3b01      	subs	r3, #1
 8007684:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8007686:	68bb      	ldr	r3, [r7, #8]
 8007688:	2b00      	cmp	r3, #0
 800768a:	d1f9      	bne.n	8007680 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800768c:	f7fe fe2e 	bl	80062ec <HAL_GetTick>
 8007690:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8007692:	e028      	b.n	80076e6 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	4618      	mov	r0, r3
 800769a:	f7fe fff7 	bl	800668c <LL_ADC_IsEnabled>
 800769e:	4603      	mov	r3, r0
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d104      	bne.n	80076ae <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	4618      	mov	r0, r3
 80076aa:	f7fe ffc7 	bl	800663c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80076ae:	f7fe fe1d 	bl	80062ec <HAL_GetTick>
 80076b2:	4602      	mov	r2, r0
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	1ad3      	subs	r3, r2, r3
 80076b8:	2b02      	cmp	r3, #2
 80076ba:	d914      	bls.n	80076e6 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	f003 0301 	and.w	r3, r3, #1
 80076c6:	2b01      	cmp	r3, #1
 80076c8:	d00d      	beq.n	80076e6 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80076ce:	f043 0210 	orr.w	r2, r3, #16
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80076da:	f043 0201 	orr.w	r2, r3, #1
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 80076e2:	2301      	movs	r3, #1
 80076e4:	e007      	b.n	80076f6 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	f003 0301 	and.w	r3, r3, #1
 80076f0:	2b01      	cmp	r3, #1
 80076f2:	d1cf      	bne.n	8007694 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80076f4:	2300      	movs	r3, #0
}
 80076f6:	4618      	mov	r0, r3
 80076f8:	3710      	adds	r7, #16
 80076fa:	46bd      	mov	sp, r7
 80076fc:	bd80      	pop	{r7, pc}
 80076fe:	bf00      	nop
 8007700:	8000003f 	.word	0x8000003f
 8007704:	50040300 	.word	0x50040300
 8007708:	20000028 	.word	0x20000028
 800770c:	053e2d63 	.word	0x053e2d63

08007710 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8007710:	b580      	push	{r7, lr}
 8007712:	b084      	sub	sp, #16
 8007714:	af00      	add	r7, sp, #0
 8007716:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	4618      	mov	r0, r3
 800771e:	f7fe ffc8 	bl	80066b2 <LL_ADC_IsDisableOngoing>
 8007722:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	4618      	mov	r0, r3
 800772a:	f7fe ffaf 	bl	800668c <LL_ADC_IsEnabled>
 800772e:	4603      	mov	r3, r0
 8007730:	2b00      	cmp	r3, #0
 8007732:	d047      	beq.n	80077c4 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	2b00      	cmp	r3, #0
 8007738:	d144      	bne.n	80077c4 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	689b      	ldr	r3, [r3, #8]
 8007740:	f003 030d 	and.w	r3, r3, #13
 8007744:	2b01      	cmp	r3, #1
 8007746:	d10c      	bne.n	8007762 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	4618      	mov	r0, r3
 800774e:	f7fe ff89 	bl	8006664 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	2203      	movs	r2, #3
 8007758:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800775a:	f7fe fdc7 	bl	80062ec <HAL_GetTick>
 800775e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8007760:	e029      	b.n	80077b6 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007766:	f043 0210 	orr.w	r2, r3, #16
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	659a      	str	r2, [r3, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007772:	f043 0201 	orr.w	r2, r3, #1
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	65da      	str	r2, [r3, #92]	@ 0x5c
      return HAL_ERROR;
 800777a:	2301      	movs	r3, #1
 800777c:	e023      	b.n	80077c6 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800777e:	f7fe fdb5 	bl	80062ec <HAL_GetTick>
 8007782:	4602      	mov	r2, r0
 8007784:	68bb      	ldr	r3, [r7, #8]
 8007786:	1ad3      	subs	r3, r2, r3
 8007788:	2b02      	cmp	r3, #2
 800778a:	d914      	bls.n	80077b6 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	689b      	ldr	r3, [r3, #8]
 8007792:	f003 0301 	and.w	r3, r3, #1
 8007796:	2b00      	cmp	r3, #0
 8007798:	d00d      	beq.n	80077b6 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800779e:	f043 0210 	orr.w	r2, r3, #16
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80077aa:	f043 0201 	orr.w	r2, r3, #1
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 80077b2:	2301      	movs	r3, #1
 80077b4:	e007      	b.n	80077c6 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	689b      	ldr	r3, [r3, #8]
 80077bc:	f003 0301 	and.w	r3, r3, #1
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d1dc      	bne.n	800777e <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80077c4:	2300      	movs	r3, #0
}
 80077c6:	4618      	mov	r0, r3
 80077c8:	3710      	adds	r7, #16
 80077ca:	46bd      	mov	sp, r7
 80077cc:	bd80      	pop	{r7, pc}

080077ce <LL_ADC_StartCalibration>:
{
 80077ce:	b480      	push	{r7}
 80077d0:	b083      	sub	sp, #12
 80077d2:	af00      	add	r7, sp, #0
 80077d4:	6078      	str	r0, [r7, #4]
 80077d6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	689b      	ldr	r3, [r3, #8]
 80077dc:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 80077e0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80077e4:	683a      	ldr	r2, [r7, #0]
 80077e6:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80077ea:	4313      	orrs	r3, r2
 80077ec:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	609a      	str	r2, [r3, #8]
}
 80077f4:	bf00      	nop
 80077f6:	370c      	adds	r7, #12
 80077f8:	46bd      	mov	sp, r7
 80077fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077fe:	4770      	bx	lr

08007800 <LL_ADC_IsCalibrationOnGoing>:
{
 8007800:	b480      	push	{r7}
 8007802:	b083      	sub	sp, #12
 8007804:	af00      	add	r7, sp, #0
 8007806:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	689b      	ldr	r3, [r3, #8]
 800780c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007810:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007814:	d101      	bne.n	800781a <LL_ADC_IsCalibrationOnGoing+0x1a>
 8007816:	2301      	movs	r3, #1
 8007818:	e000      	b.n	800781c <LL_ADC_IsCalibrationOnGoing+0x1c>
 800781a:	2300      	movs	r3, #0
}
 800781c:	4618      	mov	r0, r3
 800781e:	370c      	adds	r7, #12
 8007820:	46bd      	mov	sp, r7
 8007822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007826:	4770      	bx	lr

08007828 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8007828:	b580      	push	{r7, lr}
 800782a:	b084      	sub	sp, #16
 800782c:	af00      	add	r7, sp, #0
 800782e:	6078      	str	r0, [r7, #4]
 8007830:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8007832:	2300      	movs	r3, #0
 8007834:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800783c:	2b01      	cmp	r3, #1
 800783e:	d101      	bne.n	8007844 <HAL_ADCEx_Calibration_Start+0x1c>
 8007840:	2302      	movs	r3, #2
 8007842:	e04d      	b.n	80078e0 <HAL_ADCEx_Calibration_Start+0xb8>
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	2201      	movs	r2, #1
 8007848:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 800784c:	6878      	ldr	r0, [r7, #4]
 800784e:	f7ff ff5f 	bl	8007710 <ADC_Disable>
 8007852:	4603      	mov	r3, r0
 8007854:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8007856:	7bfb      	ldrb	r3, [r7, #15]
 8007858:	2b00      	cmp	r3, #0
 800785a:	d136      	bne.n	80078ca <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007860:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8007864:	f023 0302 	bic.w	r3, r3, #2
 8007868:	f043 0202 	orr.w	r2, r3, #2
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	659a      	str	r2, [r3, #88]	@ 0x58
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	6839      	ldr	r1, [r7, #0]
 8007876:	4618      	mov	r0, r3
 8007878:	f7ff ffa9 	bl	80077ce <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800787c:	e014      	b.n	80078a8 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 800787e:	68bb      	ldr	r3, [r7, #8]
 8007880:	3301      	adds	r3, #1
 8007882:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8007884:	68bb      	ldr	r3, [r7, #8]
 8007886:	f5b3 2f91 	cmp.w	r3, #296960	@ 0x48800
 800788a:	d30d      	bcc.n	80078a8 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007890:	f023 0312 	bic.w	r3, r3, #18
 8007894:	f043 0210 	orr.w	r2, r3, #16
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	659a      	str	r2, [r3, #88]	@ 0x58
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	2200      	movs	r2, #0
 80078a0:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        return HAL_ERROR;
 80078a4:	2301      	movs	r3, #1
 80078a6:	e01b      	b.n	80078e0 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	4618      	mov	r0, r3
 80078ae:	f7ff ffa7 	bl	8007800 <LL_ADC_IsCalibrationOnGoing>
 80078b2:	4603      	mov	r3, r0
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d1e2      	bne.n	800787e <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80078bc:	f023 0303 	bic.w	r3, r3, #3
 80078c0:	f043 0201 	orr.w	r2, r3, #1
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	659a      	str	r2, [r3, #88]	@ 0x58
 80078c8:	e005      	b.n	80078d6 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80078ce:	f043 0210 	orr.w	r2, r3, #16
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	2200      	movs	r2, #0
 80078da:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 80078de:	7bfb      	ldrb	r3, [r7, #15]
}
 80078e0:	4618      	mov	r0, r3
 80078e2:	3710      	adds	r7, #16
 80078e4:	46bd      	mov	sp, r7
 80078e6:	bd80      	pop	{r7, pc}

080078e8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80078e8:	b580      	push	{r7, lr}
 80078ea:	b084      	sub	sp, #16
 80078ec:	af00      	add	r7, sp, #0
 80078ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d101      	bne.n	80078fa <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80078f6:	2301      	movs	r3, #1
 80078f8:	e0ed      	b.n	8007ad6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007900:	b2db      	uxtb	r3, r3
 8007902:	2b00      	cmp	r3, #0
 8007904:	d102      	bne.n	800790c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8007906:	6878      	ldr	r0, [r7, #4]
 8007908:	f7fb f986 	bl	8002c18 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	681a      	ldr	r2, [r3, #0]
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	f042 0201 	orr.w	r2, r2, #1
 800791a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800791c:	f7fe fce6 	bl	80062ec <HAL_GetTick>
 8007920:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8007922:	e012      	b.n	800794a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8007924:	f7fe fce2 	bl	80062ec <HAL_GetTick>
 8007928:	4602      	mov	r2, r0
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	1ad3      	subs	r3, r2, r3
 800792e:	2b0a      	cmp	r3, #10
 8007930:	d90b      	bls.n	800794a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007936:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	2205      	movs	r2, #5
 8007942:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8007946:	2301      	movs	r3, #1
 8007948:	e0c5      	b.n	8007ad6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	685b      	ldr	r3, [r3, #4]
 8007950:	f003 0301 	and.w	r3, r3, #1
 8007954:	2b00      	cmp	r3, #0
 8007956:	d0e5      	beq.n	8007924 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	681a      	ldr	r2, [r3, #0]
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	f022 0202 	bic.w	r2, r2, #2
 8007966:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007968:	f7fe fcc0 	bl	80062ec <HAL_GetTick>
 800796c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800796e:	e012      	b.n	8007996 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8007970:	f7fe fcbc 	bl	80062ec <HAL_GetTick>
 8007974:	4602      	mov	r2, r0
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	1ad3      	subs	r3, r2, r3
 800797a:	2b0a      	cmp	r3, #10
 800797c:	d90b      	bls.n	8007996 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007982:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	2205      	movs	r2, #5
 800798e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8007992:	2301      	movs	r3, #1
 8007994:	e09f      	b.n	8007ad6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	685b      	ldr	r3, [r3, #4]
 800799c:	f003 0302 	and.w	r3, r3, #2
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d1e5      	bne.n	8007970 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	7e1b      	ldrb	r3, [r3, #24]
 80079a8:	2b01      	cmp	r3, #1
 80079aa:	d108      	bne.n	80079be <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	681a      	ldr	r2, [r3, #0]
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80079ba:	601a      	str	r2, [r3, #0]
 80079bc:	e007      	b.n	80079ce <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	681a      	ldr	r2, [r3, #0]
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80079cc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	7e5b      	ldrb	r3, [r3, #25]
 80079d2:	2b01      	cmp	r3, #1
 80079d4:	d108      	bne.n	80079e8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	681a      	ldr	r2, [r3, #0]
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80079e4:	601a      	str	r2, [r3, #0]
 80079e6:	e007      	b.n	80079f8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	681a      	ldr	r2, [r3, #0]
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80079f6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	7e9b      	ldrb	r3, [r3, #26]
 80079fc:	2b01      	cmp	r3, #1
 80079fe:	d108      	bne.n	8007a12 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	681a      	ldr	r2, [r3, #0]
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	f042 0220 	orr.w	r2, r2, #32
 8007a0e:	601a      	str	r2, [r3, #0]
 8007a10:	e007      	b.n	8007a22 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	681a      	ldr	r2, [r3, #0]
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	f022 0220 	bic.w	r2, r2, #32
 8007a20:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	7edb      	ldrb	r3, [r3, #27]
 8007a26:	2b01      	cmp	r3, #1
 8007a28:	d108      	bne.n	8007a3c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	681a      	ldr	r2, [r3, #0]
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	f022 0210 	bic.w	r2, r2, #16
 8007a38:	601a      	str	r2, [r3, #0]
 8007a3a:	e007      	b.n	8007a4c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	681a      	ldr	r2, [r3, #0]
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	f042 0210 	orr.w	r2, r2, #16
 8007a4a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	7f1b      	ldrb	r3, [r3, #28]
 8007a50:	2b01      	cmp	r3, #1
 8007a52:	d108      	bne.n	8007a66 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	681a      	ldr	r2, [r3, #0]
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	f042 0208 	orr.w	r2, r2, #8
 8007a62:	601a      	str	r2, [r3, #0]
 8007a64:	e007      	b.n	8007a76 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	681a      	ldr	r2, [r3, #0]
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	f022 0208 	bic.w	r2, r2, #8
 8007a74:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	7f5b      	ldrb	r3, [r3, #29]
 8007a7a:	2b01      	cmp	r3, #1
 8007a7c:	d108      	bne.n	8007a90 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	681a      	ldr	r2, [r3, #0]
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	f042 0204 	orr.w	r2, r2, #4
 8007a8c:	601a      	str	r2, [r3, #0]
 8007a8e:	e007      	b.n	8007aa0 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	681a      	ldr	r2, [r3, #0]
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	f022 0204 	bic.w	r2, r2, #4
 8007a9e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	689a      	ldr	r2, [r3, #8]
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	68db      	ldr	r3, [r3, #12]
 8007aa8:	431a      	orrs	r2, r3
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	691b      	ldr	r3, [r3, #16]
 8007aae:	431a      	orrs	r2, r3
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	695b      	ldr	r3, [r3, #20]
 8007ab4:	ea42 0103 	orr.w	r1, r2, r3
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	685b      	ldr	r3, [r3, #4]
 8007abc:	1e5a      	subs	r2, r3, #1
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	430a      	orrs	r2, r1
 8007ac4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	2200      	movs	r2, #0
 8007aca:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	2201      	movs	r2, #1
 8007ad0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8007ad4:	2300      	movs	r3, #0
}
 8007ad6:	4618      	mov	r0, r3
 8007ad8:	3710      	adds	r7, #16
 8007ada:	46bd      	mov	sp, r7
 8007adc:	bd80      	pop	{r7, pc}
	...

08007ae0 <__NVIC_SetPriorityGrouping>:
{
 8007ae0:	b480      	push	{r7}
 8007ae2:	b085      	sub	sp, #20
 8007ae4:	af00      	add	r7, sp, #0
 8007ae6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	f003 0307 	and.w	r3, r3, #7
 8007aee:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007af0:	4b0c      	ldr	r3, [pc, #48]	@ (8007b24 <__NVIC_SetPriorityGrouping+0x44>)
 8007af2:	68db      	ldr	r3, [r3, #12]
 8007af4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007af6:	68ba      	ldr	r2, [r7, #8]
 8007af8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8007afc:	4013      	ands	r3, r2
 8007afe:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007b04:	68bb      	ldr	r3, [r7, #8]
 8007b06:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007b08:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8007b0c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007b10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007b12:	4a04      	ldr	r2, [pc, #16]	@ (8007b24 <__NVIC_SetPriorityGrouping+0x44>)
 8007b14:	68bb      	ldr	r3, [r7, #8]
 8007b16:	60d3      	str	r3, [r2, #12]
}
 8007b18:	bf00      	nop
 8007b1a:	3714      	adds	r7, #20
 8007b1c:	46bd      	mov	sp, r7
 8007b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b22:	4770      	bx	lr
 8007b24:	e000ed00 	.word	0xe000ed00

08007b28 <__NVIC_GetPriorityGrouping>:
{
 8007b28:	b480      	push	{r7}
 8007b2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007b2c:	4b04      	ldr	r3, [pc, #16]	@ (8007b40 <__NVIC_GetPriorityGrouping+0x18>)
 8007b2e:	68db      	ldr	r3, [r3, #12]
 8007b30:	0a1b      	lsrs	r3, r3, #8
 8007b32:	f003 0307 	and.w	r3, r3, #7
}
 8007b36:	4618      	mov	r0, r3
 8007b38:	46bd      	mov	sp, r7
 8007b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b3e:	4770      	bx	lr
 8007b40:	e000ed00 	.word	0xe000ed00

08007b44 <__NVIC_EnableIRQ>:
{
 8007b44:	b480      	push	{r7}
 8007b46:	b083      	sub	sp, #12
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	4603      	mov	r3, r0
 8007b4c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007b4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	db0b      	blt.n	8007b6e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007b56:	79fb      	ldrb	r3, [r7, #7]
 8007b58:	f003 021f 	and.w	r2, r3, #31
 8007b5c:	4907      	ldr	r1, [pc, #28]	@ (8007b7c <__NVIC_EnableIRQ+0x38>)
 8007b5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007b62:	095b      	lsrs	r3, r3, #5
 8007b64:	2001      	movs	r0, #1
 8007b66:	fa00 f202 	lsl.w	r2, r0, r2
 8007b6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8007b6e:	bf00      	nop
 8007b70:	370c      	adds	r7, #12
 8007b72:	46bd      	mov	sp, r7
 8007b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b78:	4770      	bx	lr
 8007b7a:	bf00      	nop
 8007b7c:	e000e100 	.word	0xe000e100

08007b80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007b80:	b480      	push	{r7}
 8007b82:	b083      	sub	sp, #12
 8007b84:	af00      	add	r7, sp, #0
 8007b86:	4603      	mov	r3, r0
 8007b88:	6039      	str	r1, [r7, #0]
 8007b8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007b8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	db0a      	blt.n	8007baa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007b94:	683b      	ldr	r3, [r7, #0]
 8007b96:	b2da      	uxtb	r2, r3
 8007b98:	490c      	ldr	r1, [pc, #48]	@ (8007bcc <__NVIC_SetPriority+0x4c>)
 8007b9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007b9e:	0112      	lsls	r2, r2, #4
 8007ba0:	b2d2      	uxtb	r2, r2
 8007ba2:	440b      	add	r3, r1
 8007ba4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007ba8:	e00a      	b.n	8007bc0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007baa:	683b      	ldr	r3, [r7, #0]
 8007bac:	b2da      	uxtb	r2, r3
 8007bae:	4908      	ldr	r1, [pc, #32]	@ (8007bd0 <__NVIC_SetPriority+0x50>)
 8007bb0:	79fb      	ldrb	r3, [r7, #7]
 8007bb2:	f003 030f 	and.w	r3, r3, #15
 8007bb6:	3b04      	subs	r3, #4
 8007bb8:	0112      	lsls	r2, r2, #4
 8007bba:	b2d2      	uxtb	r2, r2
 8007bbc:	440b      	add	r3, r1
 8007bbe:	761a      	strb	r2, [r3, #24]
}
 8007bc0:	bf00      	nop
 8007bc2:	370c      	adds	r7, #12
 8007bc4:	46bd      	mov	sp, r7
 8007bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bca:	4770      	bx	lr
 8007bcc:	e000e100 	.word	0xe000e100
 8007bd0:	e000ed00 	.word	0xe000ed00

08007bd4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007bd4:	b480      	push	{r7}
 8007bd6:	b089      	sub	sp, #36	@ 0x24
 8007bd8:	af00      	add	r7, sp, #0
 8007bda:	60f8      	str	r0, [r7, #12]
 8007bdc:	60b9      	str	r1, [r7, #8]
 8007bde:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	f003 0307 	and.w	r3, r3, #7
 8007be6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007be8:	69fb      	ldr	r3, [r7, #28]
 8007bea:	f1c3 0307 	rsb	r3, r3, #7
 8007bee:	2b04      	cmp	r3, #4
 8007bf0:	bf28      	it	cs
 8007bf2:	2304      	movcs	r3, #4
 8007bf4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007bf6:	69fb      	ldr	r3, [r7, #28]
 8007bf8:	3304      	adds	r3, #4
 8007bfa:	2b06      	cmp	r3, #6
 8007bfc:	d902      	bls.n	8007c04 <NVIC_EncodePriority+0x30>
 8007bfe:	69fb      	ldr	r3, [r7, #28]
 8007c00:	3b03      	subs	r3, #3
 8007c02:	e000      	b.n	8007c06 <NVIC_EncodePriority+0x32>
 8007c04:	2300      	movs	r3, #0
 8007c06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007c08:	f04f 32ff 	mov.w	r2, #4294967295
 8007c0c:	69bb      	ldr	r3, [r7, #24]
 8007c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8007c12:	43da      	mvns	r2, r3
 8007c14:	68bb      	ldr	r3, [r7, #8]
 8007c16:	401a      	ands	r2, r3
 8007c18:	697b      	ldr	r3, [r7, #20]
 8007c1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007c1c:	f04f 31ff 	mov.w	r1, #4294967295
 8007c20:	697b      	ldr	r3, [r7, #20]
 8007c22:	fa01 f303 	lsl.w	r3, r1, r3
 8007c26:	43d9      	mvns	r1, r3
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007c2c:	4313      	orrs	r3, r2
         );
}
 8007c2e:	4618      	mov	r0, r3
 8007c30:	3724      	adds	r7, #36	@ 0x24
 8007c32:	46bd      	mov	sp, r7
 8007c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c38:	4770      	bx	lr

08007c3a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007c3a:	b580      	push	{r7, lr}
 8007c3c:	b082      	sub	sp, #8
 8007c3e:	af00      	add	r7, sp, #0
 8007c40:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007c42:	6878      	ldr	r0, [r7, #4]
 8007c44:	f7ff ff4c 	bl	8007ae0 <__NVIC_SetPriorityGrouping>
}
 8007c48:	bf00      	nop
 8007c4a:	3708      	adds	r7, #8
 8007c4c:	46bd      	mov	sp, r7
 8007c4e:	bd80      	pop	{r7, pc}

08007c50 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007c50:	b580      	push	{r7, lr}
 8007c52:	b086      	sub	sp, #24
 8007c54:	af00      	add	r7, sp, #0
 8007c56:	4603      	mov	r3, r0
 8007c58:	60b9      	str	r1, [r7, #8]
 8007c5a:	607a      	str	r2, [r7, #4]
 8007c5c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8007c5e:	2300      	movs	r3, #0
 8007c60:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8007c62:	f7ff ff61 	bl	8007b28 <__NVIC_GetPriorityGrouping>
 8007c66:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007c68:	687a      	ldr	r2, [r7, #4]
 8007c6a:	68b9      	ldr	r1, [r7, #8]
 8007c6c:	6978      	ldr	r0, [r7, #20]
 8007c6e:	f7ff ffb1 	bl	8007bd4 <NVIC_EncodePriority>
 8007c72:	4602      	mov	r2, r0
 8007c74:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007c78:	4611      	mov	r1, r2
 8007c7a:	4618      	mov	r0, r3
 8007c7c:	f7ff ff80 	bl	8007b80 <__NVIC_SetPriority>
}
 8007c80:	bf00      	nop
 8007c82:	3718      	adds	r7, #24
 8007c84:	46bd      	mov	sp, r7
 8007c86:	bd80      	pop	{r7, pc}

08007c88 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007c88:	b580      	push	{r7, lr}
 8007c8a:	b082      	sub	sp, #8
 8007c8c:	af00      	add	r7, sp, #0
 8007c8e:	4603      	mov	r3, r0
 8007c90:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007c92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007c96:	4618      	mov	r0, r3
 8007c98:	f7ff ff54 	bl	8007b44 <__NVIC_EnableIRQ>
}
 8007c9c:	bf00      	nop
 8007c9e:	3708      	adds	r7, #8
 8007ca0:	46bd      	mov	sp, r7
 8007ca2:	bd80      	pop	{r7, pc}

08007ca4 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8007ca4:	b480      	push	{r7}
 8007ca6:	b085      	sub	sp, #20
 8007ca8:	af00      	add	r7, sp, #0
 8007caa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007cac:	2300      	movs	r3, #0
 8007cae:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8007cb6:	b2db      	uxtb	r3, r3
 8007cb8:	2b02      	cmp	r3, #2
 8007cba:	d008      	beq.n	8007cce <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	2204      	movs	r2, #4
 8007cc0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	2200      	movs	r2, #0
 8007cc6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8007cca:	2301      	movs	r3, #1
 8007ccc:	e022      	b.n	8007d14 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	681a      	ldr	r2, [r3, #0]
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	f022 020e 	bic.w	r2, r2, #14
 8007cdc:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	681a      	ldr	r2, [r3, #0]
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	f022 0201 	bic.w	r2, r2, #1
 8007cec:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007cf2:	f003 021c 	and.w	r2, r3, #28
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007cfa:	2101      	movs	r1, #1
 8007cfc:	fa01 f202 	lsl.w	r2, r1, r2
 8007d00:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	2201      	movs	r2, #1
 8007d06:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	2200      	movs	r2, #0
 8007d0e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8007d12:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8007d14:	4618      	mov	r0, r3
 8007d16:	3714      	adds	r7, #20
 8007d18:	46bd      	mov	sp, r7
 8007d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d1e:	4770      	bx	lr

08007d20 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007d20:	b580      	push	{r7, lr}
 8007d22:	b084      	sub	sp, #16
 8007d24:	af00      	add	r7, sp, #0
 8007d26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007d28:	2300      	movs	r3, #0
 8007d2a:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8007d32:	b2db      	uxtb	r3, r3
 8007d34:	2b02      	cmp	r3, #2
 8007d36:	d005      	beq.n	8007d44 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	2204      	movs	r2, #4
 8007d3c:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8007d3e:	2301      	movs	r3, #1
 8007d40:	73fb      	strb	r3, [r7, #15]
 8007d42:	e029      	b.n	8007d98 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	681a      	ldr	r2, [r3, #0]
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	f022 020e 	bic.w	r2, r2, #14
 8007d52:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	681a      	ldr	r2, [r3, #0]
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	f022 0201 	bic.w	r2, r2, #1
 8007d62:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007d68:	f003 021c 	and.w	r2, r3, #28
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d70:	2101      	movs	r1, #1
 8007d72:	fa01 f202 	lsl.w	r2, r1, r2
 8007d76:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	2201      	movs	r2, #1
 8007d7c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	2200      	movs	r2, #0
 8007d84:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d003      	beq.n	8007d98 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d94:	6878      	ldr	r0, [r7, #4]
 8007d96:	4798      	blx	r3
    }
  }
  return status;
 8007d98:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d9a:	4618      	mov	r0, r3
 8007d9c:	3710      	adds	r7, #16
 8007d9e:	46bd      	mov	sp, r7
 8007da0:	bd80      	pop	{r7, pc}
	...

08007da4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007da4:	b480      	push	{r7}
 8007da6:	b087      	sub	sp, #28
 8007da8:	af00      	add	r7, sp, #0
 8007daa:	6078      	str	r0, [r7, #4]
 8007dac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8007dae:	2300      	movs	r3, #0
 8007db0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007db2:	e154      	b.n	800805e <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8007db4:	683b      	ldr	r3, [r7, #0]
 8007db6:	681a      	ldr	r2, [r3, #0]
 8007db8:	2101      	movs	r1, #1
 8007dba:	697b      	ldr	r3, [r7, #20]
 8007dbc:	fa01 f303 	lsl.w	r3, r1, r3
 8007dc0:	4013      	ands	r3, r2
 8007dc2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	f000 8146 	beq.w	8008058 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007dcc:	683b      	ldr	r3, [r7, #0]
 8007dce:	685b      	ldr	r3, [r3, #4]
 8007dd0:	f003 0303 	and.w	r3, r3, #3
 8007dd4:	2b01      	cmp	r3, #1
 8007dd6:	d005      	beq.n	8007de4 <HAL_GPIO_Init+0x40>
 8007dd8:	683b      	ldr	r3, [r7, #0]
 8007dda:	685b      	ldr	r3, [r3, #4]
 8007ddc:	f003 0303 	and.w	r3, r3, #3
 8007de0:	2b02      	cmp	r3, #2
 8007de2:	d130      	bne.n	8007e46 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	689b      	ldr	r3, [r3, #8]
 8007de8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8007dea:	697b      	ldr	r3, [r7, #20]
 8007dec:	005b      	lsls	r3, r3, #1
 8007dee:	2203      	movs	r2, #3
 8007df0:	fa02 f303 	lsl.w	r3, r2, r3
 8007df4:	43db      	mvns	r3, r3
 8007df6:	693a      	ldr	r2, [r7, #16]
 8007df8:	4013      	ands	r3, r2
 8007dfa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8007dfc:	683b      	ldr	r3, [r7, #0]
 8007dfe:	68da      	ldr	r2, [r3, #12]
 8007e00:	697b      	ldr	r3, [r7, #20]
 8007e02:	005b      	lsls	r3, r3, #1
 8007e04:	fa02 f303 	lsl.w	r3, r2, r3
 8007e08:	693a      	ldr	r2, [r7, #16]
 8007e0a:	4313      	orrs	r3, r2
 8007e0c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	693a      	ldr	r2, [r7, #16]
 8007e12:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	685b      	ldr	r3, [r3, #4]
 8007e18:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007e1a:	2201      	movs	r2, #1
 8007e1c:	697b      	ldr	r3, [r7, #20]
 8007e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8007e22:	43db      	mvns	r3, r3
 8007e24:	693a      	ldr	r2, [r7, #16]
 8007e26:	4013      	ands	r3, r2
 8007e28:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007e2a:	683b      	ldr	r3, [r7, #0]
 8007e2c:	685b      	ldr	r3, [r3, #4]
 8007e2e:	091b      	lsrs	r3, r3, #4
 8007e30:	f003 0201 	and.w	r2, r3, #1
 8007e34:	697b      	ldr	r3, [r7, #20]
 8007e36:	fa02 f303 	lsl.w	r3, r2, r3
 8007e3a:	693a      	ldr	r2, [r7, #16]
 8007e3c:	4313      	orrs	r3, r2
 8007e3e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	693a      	ldr	r2, [r7, #16]
 8007e44:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007e46:	683b      	ldr	r3, [r7, #0]
 8007e48:	685b      	ldr	r3, [r3, #4]
 8007e4a:	f003 0303 	and.w	r3, r3, #3
 8007e4e:	2b03      	cmp	r3, #3
 8007e50:	d017      	beq.n	8007e82 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	68db      	ldr	r3, [r3, #12]
 8007e56:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007e58:	697b      	ldr	r3, [r7, #20]
 8007e5a:	005b      	lsls	r3, r3, #1
 8007e5c:	2203      	movs	r2, #3
 8007e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8007e62:	43db      	mvns	r3, r3
 8007e64:	693a      	ldr	r2, [r7, #16]
 8007e66:	4013      	ands	r3, r2
 8007e68:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007e6a:	683b      	ldr	r3, [r7, #0]
 8007e6c:	689a      	ldr	r2, [r3, #8]
 8007e6e:	697b      	ldr	r3, [r7, #20]
 8007e70:	005b      	lsls	r3, r3, #1
 8007e72:	fa02 f303 	lsl.w	r3, r2, r3
 8007e76:	693a      	ldr	r2, [r7, #16]
 8007e78:	4313      	orrs	r3, r2
 8007e7a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	693a      	ldr	r2, [r7, #16]
 8007e80:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007e82:	683b      	ldr	r3, [r7, #0]
 8007e84:	685b      	ldr	r3, [r3, #4]
 8007e86:	f003 0303 	and.w	r3, r3, #3
 8007e8a:	2b02      	cmp	r3, #2
 8007e8c:	d123      	bne.n	8007ed6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8007e8e:	697b      	ldr	r3, [r7, #20]
 8007e90:	08da      	lsrs	r2, r3, #3
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	3208      	adds	r2, #8
 8007e96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e9a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8007e9c:	697b      	ldr	r3, [r7, #20]
 8007e9e:	f003 0307 	and.w	r3, r3, #7
 8007ea2:	009b      	lsls	r3, r3, #2
 8007ea4:	220f      	movs	r2, #15
 8007ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8007eaa:	43db      	mvns	r3, r3
 8007eac:	693a      	ldr	r2, [r7, #16]
 8007eae:	4013      	ands	r3, r2
 8007eb0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8007eb2:	683b      	ldr	r3, [r7, #0]
 8007eb4:	691a      	ldr	r2, [r3, #16]
 8007eb6:	697b      	ldr	r3, [r7, #20]
 8007eb8:	f003 0307 	and.w	r3, r3, #7
 8007ebc:	009b      	lsls	r3, r3, #2
 8007ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8007ec2:	693a      	ldr	r2, [r7, #16]
 8007ec4:	4313      	orrs	r3, r2
 8007ec6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8007ec8:	697b      	ldr	r3, [r7, #20]
 8007eca:	08da      	lsrs	r2, r3, #3
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	3208      	adds	r2, #8
 8007ed0:	6939      	ldr	r1, [r7, #16]
 8007ed2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8007edc:	697b      	ldr	r3, [r7, #20]
 8007ede:	005b      	lsls	r3, r3, #1
 8007ee0:	2203      	movs	r2, #3
 8007ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8007ee6:	43db      	mvns	r3, r3
 8007ee8:	693a      	ldr	r2, [r7, #16]
 8007eea:	4013      	ands	r3, r2
 8007eec:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8007eee:	683b      	ldr	r3, [r7, #0]
 8007ef0:	685b      	ldr	r3, [r3, #4]
 8007ef2:	f003 0203 	and.w	r2, r3, #3
 8007ef6:	697b      	ldr	r3, [r7, #20]
 8007ef8:	005b      	lsls	r3, r3, #1
 8007efa:	fa02 f303 	lsl.w	r3, r2, r3
 8007efe:	693a      	ldr	r2, [r7, #16]
 8007f00:	4313      	orrs	r3, r2
 8007f02:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	693a      	ldr	r2, [r7, #16]
 8007f08:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8007f0a:	683b      	ldr	r3, [r7, #0]
 8007f0c:	685b      	ldr	r3, [r3, #4]
 8007f0e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	f000 80a0 	beq.w	8008058 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007f18:	4b58      	ldr	r3, [pc, #352]	@ (800807c <HAL_GPIO_Init+0x2d8>)
 8007f1a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007f1c:	4a57      	ldr	r2, [pc, #348]	@ (800807c <HAL_GPIO_Init+0x2d8>)
 8007f1e:	f043 0301 	orr.w	r3, r3, #1
 8007f22:	6613      	str	r3, [r2, #96]	@ 0x60
 8007f24:	4b55      	ldr	r3, [pc, #340]	@ (800807c <HAL_GPIO_Init+0x2d8>)
 8007f26:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007f28:	f003 0301 	and.w	r3, r3, #1
 8007f2c:	60bb      	str	r3, [r7, #8]
 8007f2e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8007f30:	4a53      	ldr	r2, [pc, #332]	@ (8008080 <HAL_GPIO_Init+0x2dc>)
 8007f32:	697b      	ldr	r3, [r7, #20]
 8007f34:	089b      	lsrs	r3, r3, #2
 8007f36:	3302      	adds	r3, #2
 8007f38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007f3c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8007f3e:	697b      	ldr	r3, [r7, #20]
 8007f40:	f003 0303 	and.w	r3, r3, #3
 8007f44:	009b      	lsls	r3, r3, #2
 8007f46:	220f      	movs	r2, #15
 8007f48:	fa02 f303 	lsl.w	r3, r2, r3
 8007f4c:	43db      	mvns	r3, r3
 8007f4e:	693a      	ldr	r2, [r7, #16]
 8007f50:	4013      	ands	r3, r2
 8007f52:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8007f5a:	d019      	beq.n	8007f90 <HAL_GPIO_Init+0x1ec>
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	4a49      	ldr	r2, [pc, #292]	@ (8008084 <HAL_GPIO_Init+0x2e0>)
 8007f60:	4293      	cmp	r3, r2
 8007f62:	d013      	beq.n	8007f8c <HAL_GPIO_Init+0x1e8>
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	4a48      	ldr	r2, [pc, #288]	@ (8008088 <HAL_GPIO_Init+0x2e4>)
 8007f68:	4293      	cmp	r3, r2
 8007f6a:	d00d      	beq.n	8007f88 <HAL_GPIO_Init+0x1e4>
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	4a47      	ldr	r2, [pc, #284]	@ (800808c <HAL_GPIO_Init+0x2e8>)
 8007f70:	4293      	cmp	r3, r2
 8007f72:	d007      	beq.n	8007f84 <HAL_GPIO_Init+0x1e0>
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	4a46      	ldr	r2, [pc, #280]	@ (8008090 <HAL_GPIO_Init+0x2ec>)
 8007f78:	4293      	cmp	r3, r2
 8007f7a:	d101      	bne.n	8007f80 <HAL_GPIO_Init+0x1dc>
 8007f7c:	2304      	movs	r3, #4
 8007f7e:	e008      	b.n	8007f92 <HAL_GPIO_Init+0x1ee>
 8007f80:	2307      	movs	r3, #7
 8007f82:	e006      	b.n	8007f92 <HAL_GPIO_Init+0x1ee>
 8007f84:	2303      	movs	r3, #3
 8007f86:	e004      	b.n	8007f92 <HAL_GPIO_Init+0x1ee>
 8007f88:	2302      	movs	r3, #2
 8007f8a:	e002      	b.n	8007f92 <HAL_GPIO_Init+0x1ee>
 8007f8c:	2301      	movs	r3, #1
 8007f8e:	e000      	b.n	8007f92 <HAL_GPIO_Init+0x1ee>
 8007f90:	2300      	movs	r3, #0
 8007f92:	697a      	ldr	r2, [r7, #20]
 8007f94:	f002 0203 	and.w	r2, r2, #3
 8007f98:	0092      	lsls	r2, r2, #2
 8007f9a:	4093      	lsls	r3, r2
 8007f9c:	693a      	ldr	r2, [r7, #16]
 8007f9e:	4313      	orrs	r3, r2
 8007fa0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8007fa2:	4937      	ldr	r1, [pc, #220]	@ (8008080 <HAL_GPIO_Init+0x2dc>)
 8007fa4:	697b      	ldr	r3, [r7, #20]
 8007fa6:	089b      	lsrs	r3, r3, #2
 8007fa8:	3302      	adds	r3, #2
 8007faa:	693a      	ldr	r2, [r7, #16]
 8007fac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007fb0:	4b38      	ldr	r3, [pc, #224]	@ (8008094 <HAL_GPIO_Init+0x2f0>)
 8007fb2:	689b      	ldr	r3, [r3, #8]
 8007fb4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	43db      	mvns	r3, r3
 8007fba:	693a      	ldr	r2, [r7, #16]
 8007fbc:	4013      	ands	r3, r2
 8007fbe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8007fc0:	683b      	ldr	r3, [r7, #0]
 8007fc2:	685b      	ldr	r3, [r3, #4]
 8007fc4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d003      	beq.n	8007fd4 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8007fcc:	693a      	ldr	r2, [r7, #16]
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	4313      	orrs	r3, r2
 8007fd2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8007fd4:	4a2f      	ldr	r2, [pc, #188]	@ (8008094 <HAL_GPIO_Init+0x2f0>)
 8007fd6:	693b      	ldr	r3, [r7, #16]
 8007fd8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8007fda:	4b2e      	ldr	r3, [pc, #184]	@ (8008094 <HAL_GPIO_Init+0x2f0>)
 8007fdc:	68db      	ldr	r3, [r3, #12]
 8007fde:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	43db      	mvns	r3, r3
 8007fe4:	693a      	ldr	r2, [r7, #16]
 8007fe6:	4013      	ands	r3, r2
 8007fe8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8007fea:	683b      	ldr	r3, [r7, #0]
 8007fec:	685b      	ldr	r3, [r3, #4]
 8007fee:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d003      	beq.n	8007ffe <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8007ff6:	693a      	ldr	r2, [r7, #16]
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	4313      	orrs	r3, r2
 8007ffc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8007ffe:	4a25      	ldr	r2, [pc, #148]	@ (8008094 <HAL_GPIO_Init+0x2f0>)
 8008000:	693b      	ldr	r3, [r7, #16]
 8008002:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8008004:	4b23      	ldr	r3, [pc, #140]	@ (8008094 <HAL_GPIO_Init+0x2f0>)
 8008006:	685b      	ldr	r3, [r3, #4]
 8008008:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	43db      	mvns	r3, r3
 800800e:	693a      	ldr	r2, [r7, #16]
 8008010:	4013      	ands	r3, r2
 8008012:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8008014:	683b      	ldr	r3, [r7, #0]
 8008016:	685b      	ldr	r3, [r3, #4]
 8008018:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800801c:	2b00      	cmp	r3, #0
 800801e:	d003      	beq.n	8008028 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8008020:	693a      	ldr	r2, [r7, #16]
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	4313      	orrs	r3, r2
 8008026:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8008028:	4a1a      	ldr	r2, [pc, #104]	@ (8008094 <HAL_GPIO_Init+0x2f0>)
 800802a:	693b      	ldr	r3, [r7, #16]
 800802c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800802e:	4b19      	ldr	r3, [pc, #100]	@ (8008094 <HAL_GPIO_Init+0x2f0>)
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	43db      	mvns	r3, r3
 8008038:	693a      	ldr	r2, [r7, #16]
 800803a:	4013      	ands	r3, r2
 800803c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800803e:	683b      	ldr	r3, [r7, #0]
 8008040:	685b      	ldr	r3, [r3, #4]
 8008042:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008046:	2b00      	cmp	r3, #0
 8008048:	d003      	beq.n	8008052 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800804a:	693a      	ldr	r2, [r7, #16]
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	4313      	orrs	r3, r2
 8008050:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8008052:	4a10      	ldr	r2, [pc, #64]	@ (8008094 <HAL_GPIO_Init+0x2f0>)
 8008054:	693b      	ldr	r3, [r7, #16]
 8008056:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8008058:	697b      	ldr	r3, [r7, #20]
 800805a:	3301      	adds	r3, #1
 800805c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800805e:	683b      	ldr	r3, [r7, #0]
 8008060:	681a      	ldr	r2, [r3, #0]
 8008062:	697b      	ldr	r3, [r7, #20]
 8008064:	fa22 f303 	lsr.w	r3, r2, r3
 8008068:	2b00      	cmp	r3, #0
 800806a:	f47f aea3 	bne.w	8007db4 <HAL_GPIO_Init+0x10>
  }
}
 800806e:	bf00      	nop
 8008070:	bf00      	nop
 8008072:	371c      	adds	r7, #28
 8008074:	46bd      	mov	sp, r7
 8008076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800807a:	4770      	bx	lr
 800807c:	40021000 	.word	0x40021000
 8008080:	40010000 	.word	0x40010000
 8008084:	48000400 	.word	0x48000400
 8008088:	48000800 	.word	0x48000800
 800808c:	48000c00 	.word	0x48000c00
 8008090:	48001000 	.word	0x48001000
 8008094:	40010400 	.word	0x40010400

08008098 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008098:	b480      	push	{r7}
 800809a:	b083      	sub	sp, #12
 800809c:	af00      	add	r7, sp, #0
 800809e:	6078      	str	r0, [r7, #4]
 80080a0:	460b      	mov	r3, r1
 80080a2:	807b      	strh	r3, [r7, #2]
 80080a4:	4613      	mov	r3, r2
 80080a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80080a8:	787b      	ldrb	r3, [r7, #1]
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d003      	beq.n	80080b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80080ae:	887a      	ldrh	r2, [r7, #2]
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80080b4:	e002      	b.n	80080bc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80080b6:	887a      	ldrh	r2, [r7, #2]
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80080bc:	bf00      	nop
 80080be:	370c      	adds	r7, #12
 80080c0:	46bd      	mov	sp, r7
 80080c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c6:	4770      	bx	lr

080080c8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80080c8:	b480      	push	{r7}
 80080ca:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80080cc:	4b04      	ldr	r3, [pc, #16]	@ (80080e0 <HAL_PWREx_GetVoltageRange+0x18>)
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80080d4:	4618      	mov	r0, r3
 80080d6:	46bd      	mov	sp, r7
 80080d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080dc:	4770      	bx	lr
 80080de:	bf00      	nop
 80080e0:	40007000 	.word	0x40007000

080080e4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80080e4:	b480      	push	{r7}
 80080e6:	b085      	sub	sp, #20
 80080e8:	af00      	add	r7, sp, #0
 80080ea:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80080f2:	d130      	bne.n	8008156 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80080f4:	4b23      	ldr	r3, [pc, #140]	@ (8008184 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80080fc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008100:	d038      	beq.n	8008174 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8008102:	4b20      	ldr	r3, [pc, #128]	@ (8008184 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800810a:	4a1e      	ldr	r2, [pc, #120]	@ (8008184 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800810c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8008110:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8008112:	4b1d      	ldr	r3, [pc, #116]	@ (8008188 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	2232      	movs	r2, #50	@ 0x32
 8008118:	fb02 f303 	mul.w	r3, r2, r3
 800811c:	4a1b      	ldr	r2, [pc, #108]	@ (800818c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800811e:	fba2 2303 	umull	r2, r3, r2, r3
 8008122:	0c9b      	lsrs	r3, r3, #18
 8008124:	3301      	adds	r3, #1
 8008126:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008128:	e002      	b.n	8008130 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	3b01      	subs	r3, #1
 800812e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008130:	4b14      	ldr	r3, [pc, #80]	@ (8008184 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8008132:	695b      	ldr	r3, [r3, #20]
 8008134:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008138:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800813c:	d102      	bne.n	8008144 <HAL_PWREx_ControlVoltageScaling+0x60>
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	2b00      	cmp	r3, #0
 8008142:	d1f2      	bne.n	800812a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8008144:	4b0f      	ldr	r3, [pc, #60]	@ (8008184 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8008146:	695b      	ldr	r3, [r3, #20]
 8008148:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800814c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008150:	d110      	bne.n	8008174 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8008152:	2303      	movs	r3, #3
 8008154:	e00f      	b.n	8008176 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8008156:	4b0b      	ldr	r3, [pc, #44]	@ (8008184 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800815e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008162:	d007      	beq.n	8008174 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8008164:	4b07      	ldr	r3, [pc, #28]	@ (8008184 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800816c:	4a05      	ldr	r2, [pc, #20]	@ (8008184 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800816e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8008172:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8008174:	2300      	movs	r3, #0
}
 8008176:	4618      	mov	r0, r3
 8008178:	3714      	adds	r7, #20
 800817a:	46bd      	mov	sp, r7
 800817c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008180:	4770      	bx	lr
 8008182:	bf00      	nop
 8008184:	40007000 	.word	0x40007000
 8008188:	20000028 	.word	0x20000028
 800818c:	431bde83 	.word	0x431bde83

08008190 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008190:	b580      	push	{r7, lr}
 8008192:	b088      	sub	sp, #32
 8008194:	af00      	add	r7, sp, #0
 8008196:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	2b00      	cmp	r3, #0
 800819c:	d102      	bne.n	80081a4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800819e:	2301      	movs	r3, #1
 80081a0:	f000 bc02 	b.w	80089a8 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80081a4:	4b96      	ldr	r3, [pc, #600]	@ (8008400 <HAL_RCC_OscConfig+0x270>)
 80081a6:	689b      	ldr	r3, [r3, #8]
 80081a8:	f003 030c 	and.w	r3, r3, #12
 80081ac:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80081ae:	4b94      	ldr	r3, [pc, #592]	@ (8008400 <HAL_RCC_OscConfig+0x270>)
 80081b0:	68db      	ldr	r3, [r3, #12]
 80081b2:	f003 0303 	and.w	r3, r3, #3
 80081b6:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	f003 0310 	and.w	r3, r3, #16
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	f000 80e4 	beq.w	800838e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80081c6:	69bb      	ldr	r3, [r7, #24]
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d007      	beq.n	80081dc <HAL_RCC_OscConfig+0x4c>
 80081cc:	69bb      	ldr	r3, [r7, #24]
 80081ce:	2b0c      	cmp	r3, #12
 80081d0:	f040 808b 	bne.w	80082ea <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80081d4:	697b      	ldr	r3, [r7, #20]
 80081d6:	2b01      	cmp	r3, #1
 80081d8:	f040 8087 	bne.w	80082ea <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80081dc:	4b88      	ldr	r3, [pc, #544]	@ (8008400 <HAL_RCC_OscConfig+0x270>)
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	f003 0302 	and.w	r3, r3, #2
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d005      	beq.n	80081f4 <HAL_RCC_OscConfig+0x64>
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	699b      	ldr	r3, [r3, #24]
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d101      	bne.n	80081f4 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80081f0:	2301      	movs	r3, #1
 80081f2:	e3d9      	b.n	80089a8 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	6a1a      	ldr	r2, [r3, #32]
 80081f8:	4b81      	ldr	r3, [pc, #516]	@ (8008400 <HAL_RCC_OscConfig+0x270>)
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	f003 0308 	and.w	r3, r3, #8
 8008200:	2b00      	cmp	r3, #0
 8008202:	d004      	beq.n	800820e <HAL_RCC_OscConfig+0x7e>
 8008204:	4b7e      	ldr	r3, [pc, #504]	@ (8008400 <HAL_RCC_OscConfig+0x270>)
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800820c:	e005      	b.n	800821a <HAL_RCC_OscConfig+0x8a>
 800820e:	4b7c      	ldr	r3, [pc, #496]	@ (8008400 <HAL_RCC_OscConfig+0x270>)
 8008210:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008214:	091b      	lsrs	r3, r3, #4
 8008216:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800821a:	4293      	cmp	r3, r2
 800821c:	d223      	bcs.n	8008266 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	6a1b      	ldr	r3, [r3, #32]
 8008222:	4618      	mov	r0, r3
 8008224:	f000 fdbe 	bl	8008da4 <RCC_SetFlashLatencyFromMSIRange>
 8008228:	4603      	mov	r3, r0
 800822a:	2b00      	cmp	r3, #0
 800822c:	d001      	beq.n	8008232 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800822e:	2301      	movs	r3, #1
 8008230:	e3ba      	b.n	80089a8 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8008232:	4b73      	ldr	r3, [pc, #460]	@ (8008400 <HAL_RCC_OscConfig+0x270>)
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	4a72      	ldr	r2, [pc, #456]	@ (8008400 <HAL_RCC_OscConfig+0x270>)
 8008238:	f043 0308 	orr.w	r3, r3, #8
 800823c:	6013      	str	r3, [r2, #0]
 800823e:	4b70      	ldr	r3, [pc, #448]	@ (8008400 <HAL_RCC_OscConfig+0x270>)
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	6a1b      	ldr	r3, [r3, #32]
 800824a:	496d      	ldr	r1, [pc, #436]	@ (8008400 <HAL_RCC_OscConfig+0x270>)
 800824c:	4313      	orrs	r3, r2
 800824e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8008250:	4b6b      	ldr	r3, [pc, #428]	@ (8008400 <HAL_RCC_OscConfig+0x270>)
 8008252:	685b      	ldr	r3, [r3, #4]
 8008254:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	69db      	ldr	r3, [r3, #28]
 800825c:	021b      	lsls	r3, r3, #8
 800825e:	4968      	ldr	r1, [pc, #416]	@ (8008400 <HAL_RCC_OscConfig+0x270>)
 8008260:	4313      	orrs	r3, r2
 8008262:	604b      	str	r3, [r1, #4]
 8008264:	e025      	b.n	80082b2 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8008266:	4b66      	ldr	r3, [pc, #408]	@ (8008400 <HAL_RCC_OscConfig+0x270>)
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	4a65      	ldr	r2, [pc, #404]	@ (8008400 <HAL_RCC_OscConfig+0x270>)
 800826c:	f043 0308 	orr.w	r3, r3, #8
 8008270:	6013      	str	r3, [r2, #0]
 8008272:	4b63      	ldr	r3, [pc, #396]	@ (8008400 <HAL_RCC_OscConfig+0x270>)
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	6a1b      	ldr	r3, [r3, #32]
 800827e:	4960      	ldr	r1, [pc, #384]	@ (8008400 <HAL_RCC_OscConfig+0x270>)
 8008280:	4313      	orrs	r3, r2
 8008282:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8008284:	4b5e      	ldr	r3, [pc, #376]	@ (8008400 <HAL_RCC_OscConfig+0x270>)
 8008286:	685b      	ldr	r3, [r3, #4]
 8008288:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	69db      	ldr	r3, [r3, #28]
 8008290:	021b      	lsls	r3, r3, #8
 8008292:	495b      	ldr	r1, [pc, #364]	@ (8008400 <HAL_RCC_OscConfig+0x270>)
 8008294:	4313      	orrs	r3, r2
 8008296:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8008298:	69bb      	ldr	r3, [r7, #24]
 800829a:	2b00      	cmp	r3, #0
 800829c:	d109      	bne.n	80082b2 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	6a1b      	ldr	r3, [r3, #32]
 80082a2:	4618      	mov	r0, r3
 80082a4:	f000 fd7e 	bl	8008da4 <RCC_SetFlashLatencyFromMSIRange>
 80082a8:	4603      	mov	r3, r0
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d001      	beq.n	80082b2 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80082ae:	2301      	movs	r3, #1
 80082b0:	e37a      	b.n	80089a8 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80082b2:	f000 fc81 	bl	8008bb8 <HAL_RCC_GetSysClockFreq>
 80082b6:	4602      	mov	r2, r0
 80082b8:	4b51      	ldr	r3, [pc, #324]	@ (8008400 <HAL_RCC_OscConfig+0x270>)
 80082ba:	689b      	ldr	r3, [r3, #8]
 80082bc:	091b      	lsrs	r3, r3, #4
 80082be:	f003 030f 	and.w	r3, r3, #15
 80082c2:	4950      	ldr	r1, [pc, #320]	@ (8008404 <HAL_RCC_OscConfig+0x274>)
 80082c4:	5ccb      	ldrb	r3, [r1, r3]
 80082c6:	f003 031f 	and.w	r3, r3, #31
 80082ca:	fa22 f303 	lsr.w	r3, r2, r3
 80082ce:	4a4e      	ldr	r2, [pc, #312]	@ (8008408 <HAL_RCC_OscConfig+0x278>)
 80082d0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80082d2:	4b4e      	ldr	r3, [pc, #312]	@ (800840c <HAL_RCC_OscConfig+0x27c>)
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	4618      	mov	r0, r3
 80082d8:	f7fd f8aa 	bl	8005430 <HAL_InitTick>
 80082dc:	4603      	mov	r3, r0
 80082de:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80082e0:	7bfb      	ldrb	r3, [r7, #15]
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d052      	beq.n	800838c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80082e6:	7bfb      	ldrb	r3, [r7, #15]
 80082e8:	e35e      	b.n	80089a8 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	699b      	ldr	r3, [r3, #24]
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d032      	beq.n	8008358 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80082f2:	4b43      	ldr	r3, [pc, #268]	@ (8008400 <HAL_RCC_OscConfig+0x270>)
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	4a42      	ldr	r2, [pc, #264]	@ (8008400 <HAL_RCC_OscConfig+0x270>)
 80082f8:	f043 0301 	orr.w	r3, r3, #1
 80082fc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80082fe:	f7fd fff5 	bl	80062ec <HAL_GetTick>
 8008302:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8008304:	e008      	b.n	8008318 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8008306:	f7fd fff1 	bl	80062ec <HAL_GetTick>
 800830a:	4602      	mov	r2, r0
 800830c:	693b      	ldr	r3, [r7, #16]
 800830e:	1ad3      	subs	r3, r2, r3
 8008310:	2b02      	cmp	r3, #2
 8008312:	d901      	bls.n	8008318 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8008314:	2303      	movs	r3, #3
 8008316:	e347      	b.n	80089a8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8008318:	4b39      	ldr	r3, [pc, #228]	@ (8008400 <HAL_RCC_OscConfig+0x270>)
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	f003 0302 	and.w	r3, r3, #2
 8008320:	2b00      	cmp	r3, #0
 8008322:	d0f0      	beq.n	8008306 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8008324:	4b36      	ldr	r3, [pc, #216]	@ (8008400 <HAL_RCC_OscConfig+0x270>)
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	4a35      	ldr	r2, [pc, #212]	@ (8008400 <HAL_RCC_OscConfig+0x270>)
 800832a:	f043 0308 	orr.w	r3, r3, #8
 800832e:	6013      	str	r3, [r2, #0]
 8008330:	4b33      	ldr	r3, [pc, #204]	@ (8008400 <HAL_RCC_OscConfig+0x270>)
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	6a1b      	ldr	r3, [r3, #32]
 800833c:	4930      	ldr	r1, [pc, #192]	@ (8008400 <HAL_RCC_OscConfig+0x270>)
 800833e:	4313      	orrs	r3, r2
 8008340:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8008342:	4b2f      	ldr	r3, [pc, #188]	@ (8008400 <HAL_RCC_OscConfig+0x270>)
 8008344:	685b      	ldr	r3, [r3, #4]
 8008346:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	69db      	ldr	r3, [r3, #28]
 800834e:	021b      	lsls	r3, r3, #8
 8008350:	492b      	ldr	r1, [pc, #172]	@ (8008400 <HAL_RCC_OscConfig+0x270>)
 8008352:	4313      	orrs	r3, r2
 8008354:	604b      	str	r3, [r1, #4]
 8008356:	e01a      	b.n	800838e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8008358:	4b29      	ldr	r3, [pc, #164]	@ (8008400 <HAL_RCC_OscConfig+0x270>)
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	4a28      	ldr	r2, [pc, #160]	@ (8008400 <HAL_RCC_OscConfig+0x270>)
 800835e:	f023 0301 	bic.w	r3, r3, #1
 8008362:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8008364:	f7fd ffc2 	bl	80062ec <HAL_GetTick>
 8008368:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800836a:	e008      	b.n	800837e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800836c:	f7fd ffbe 	bl	80062ec <HAL_GetTick>
 8008370:	4602      	mov	r2, r0
 8008372:	693b      	ldr	r3, [r7, #16]
 8008374:	1ad3      	subs	r3, r2, r3
 8008376:	2b02      	cmp	r3, #2
 8008378:	d901      	bls.n	800837e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800837a:	2303      	movs	r3, #3
 800837c:	e314      	b.n	80089a8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800837e:	4b20      	ldr	r3, [pc, #128]	@ (8008400 <HAL_RCC_OscConfig+0x270>)
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	f003 0302 	and.w	r3, r3, #2
 8008386:	2b00      	cmp	r3, #0
 8008388:	d1f0      	bne.n	800836c <HAL_RCC_OscConfig+0x1dc>
 800838a:	e000      	b.n	800838e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800838c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	f003 0301 	and.w	r3, r3, #1
 8008396:	2b00      	cmp	r3, #0
 8008398:	d073      	beq.n	8008482 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800839a:	69bb      	ldr	r3, [r7, #24]
 800839c:	2b08      	cmp	r3, #8
 800839e:	d005      	beq.n	80083ac <HAL_RCC_OscConfig+0x21c>
 80083a0:	69bb      	ldr	r3, [r7, #24]
 80083a2:	2b0c      	cmp	r3, #12
 80083a4:	d10e      	bne.n	80083c4 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80083a6:	697b      	ldr	r3, [r7, #20]
 80083a8:	2b03      	cmp	r3, #3
 80083aa:	d10b      	bne.n	80083c4 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80083ac:	4b14      	ldr	r3, [pc, #80]	@ (8008400 <HAL_RCC_OscConfig+0x270>)
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d063      	beq.n	8008480 <HAL_RCC_OscConfig+0x2f0>
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	685b      	ldr	r3, [r3, #4]
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d15f      	bne.n	8008480 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80083c0:	2301      	movs	r3, #1
 80083c2:	e2f1      	b.n	80089a8 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	685b      	ldr	r3, [r3, #4]
 80083c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80083cc:	d106      	bne.n	80083dc <HAL_RCC_OscConfig+0x24c>
 80083ce:	4b0c      	ldr	r3, [pc, #48]	@ (8008400 <HAL_RCC_OscConfig+0x270>)
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	4a0b      	ldr	r2, [pc, #44]	@ (8008400 <HAL_RCC_OscConfig+0x270>)
 80083d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80083d8:	6013      	str	r3, [r2, #0]
 80083da:	e025      	b.n	8008428 <HAL_RCC_OscConfig+0x298>
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	685b      	ldr	r3, [r3, #4]
 80083e0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80083e4:	d114      	bne.n	8008410 <HAL_RCC_OscConfig+0x280>
 80083e6:	4b06      	ldr	r3, [pc, #24]	@ (8008400 <HAL_RCC_OscConfig+0x270>)
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	4a05      	ldr	r2, [pc, #20]	@ (8008400 <HAL_RCC_OscConfig+0x270>)
 80083ec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80083f0:	6013      	str	r3, [r2, #0]
 80083f2:	4b03      	ldr	r3, [pc, #12]	@ (8008400 <HAL_RCC_OscConfig+0x270>)
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	4a02      	ldr	r2, [pc, #8]	@ (8008400 <HAL_RCC_OscConfig+0x270>)
 80083f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80083fc:	6013      	str	r3, [r2, #0]
 80083fe:	e013      	b.n	8008428 <HAL_RCC_OscConfig+0x298>
 8008400:	40021000 	.word	0x40021000
 8008404:	08012a24 	.word	0x08012a24
 8008408:	20000028 	.word	0x20000028
 800840c:	2000002c 	.word	0x2000002c
 8008410:	4ba0      	ldr	r3, [pc, #640]	@ (8008694 <HAL_RCC_OscConfig+0x504>)
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	4a9f      	ldr	r2, [pc, #636]	@ (8008694 <HAL_RCC_OscConfig+0x504>)
 8008416:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800841a:	6013      	str	r3, [r2, #0]
 800841c:	4b9d      	ldr	r3, [pc, #628]	@ (8008694 <HAL_RCC_OscConfig+0x504>)
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	4a9c      	ldr	r2, [pc, #624]	@ (8008694 <HAL_RCC_OscConfig+0x504>)
 8008422:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008426:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	685b      	ldr	r3, [r3, #4]
 800842c:	2b00      	cmp	r3, #0
 800842e:	d013      	beq.n	8008458 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008430:	f7fd ff5c 	bl	80062ec <HAL_GetTick>
 8008434:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008436:	e008      	b.n	800844a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008438:	f7fd ff58 	bl	80062ec <HAL_GetTick>
 800843c:	4602      	mov	r2, r0
 800843e:	693b      	ldr	r3, [r7, #16]
 8008440:	1ad3      	subs	r3, r2, r3
 8008442:	2b64      	cmp	r3, #100	@ 0x64
 8008444:	d901      	bls.n	800844a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8008446:	2303      	movs	r3, #3
 8008448:	e2ae      	b.n	80089a8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800844a:	4b92      	ldr	r3, [pc, #584]	@ (8008694 <HAL_RCC_OscConfig+0x504>)
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008452:	2b00      	cmp	r3, #0
 8008454:	d0f0      	beq.n	8008438 <HAL_RCC_OscConfig+0x2a8>
 8008456:	e014      	b.n	8008482 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008458:	f7fd ff48 	bl	80062ec <HAL_GetTick>
 800845c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800845e:	e008      	b.n	8008472 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008460:	f7fd ff44 	bl	80062ec <HAL_GetTick>
 8008464:	4602      	mov	r2, r0
 8008466:	693b      	ldr	r3, [r7, #16]
 8008468:	1ad3      	subs	r3, r2, r3
 800846a:	2b64      	cmp	r3, #100	@ 0x64
 800846c:	d901      	bls.n	8008472 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800846e:	2303      	movs	r3, #3
 8008470:	e29a      	b.n	80089a8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8008472:	4b88      	ldr	r3, [pc, #544]	@ (8008694 <HAL_RCC_OscConfig+0x504>)
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800847a:	2b00      	cmp	r3, #0
 800847c:	d1f0      	bne.n	8008460 <HAL_RCC_OscConfig+0x2d0>
 800847e:	e000      	b.n	8008482 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008480:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	f003 0302 	and.w	r3, r3, #2
 800848a:	2b00      	cmp	r3, #0
 800848c:	d060      	beq.n	8008550 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800848e:	69bb      	ldr	r3, [r7, #24]
 8008490:	2b04      	cmp	r3, #4
 8008492:	d005      	beq.n	80084a0 <HAL_RCC_OscConfig+0x310>
 8008494:	69bb      	ldr	r3, [r7, #24]
 8008496:	2b0c      	cmp	r3, #12
 8008498:	d119      	bne.n	80084ce <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800849a:	697b      	ldr	r3, [r7, #20]
 800849c:	2b02      	cmp	r3, #2
 800849e:	d116      	bne.n	80084ce <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80084a0:	4b7c      	ldr	r3, [pc, #496]	@ (8008694 <HAL_RCC_OscConfig+0x504>)
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d005      	beq.n	80084b8 <HAL_RCC_OscConfig+0x328>
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	68db      	ldr	r3, [r3, #12]
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d101      	bne.n	80084b8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80084b4:	2301      	movs	r3, #1
 80084b6:	e277      	b.n	80089a8 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80084b8:	4b76      	ldr	r3, [pc, #472]	@ (8008694 <HAL_RCC_OscConfig+0x504>)
 80084ba:	685b      	ldr	r3, [r3, #4]
 80084bc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	691b      	ldr	r3, [r3, #16]
 80084c4:	061b      	lsls	r3, r3, #24
 80084c6:	4973      	ldr	r1, [pc, #460]	@ (8008694 <HAL_RCC_OscConfig+0x504>)
 80084c8:	4313      	orrs	r3, r2
 80084ca:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80084cc:	e040      	b.n	8008550 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	68db      	ldr	r3, [r3, #12]
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d023      	beq.n	800851e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80084d6:	4b6f      	ldr	r3, [pc, #444]	@ (8008694 <HAL_RCC_OscConfig+0x504>)
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	4a6e      	ldr	r2, [pc, #440]	@ (8008694 <HAL_RCC_OscConfig+0x504>)
 80084dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80084e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80084e2:	f7fd ff03 	bl	80062ec <HAL_GetTick>
 80084e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80084e8:	e008      	b.n	80084fc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80084ea:	f7fd feff 	bl	80062ec <HAL_GetTick>
 80084ee:	4602      	mov	r2, r0
 80084f0:	693b      	ldr	r3, [r7, #16]
 80084f2:	1ad3      	subs	r3, r2, r3
 80084f4:	2b02      	cmp	r3, #2
 80084f6:	d901      	bls.n	80084fc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80084f8:	2303      	movs	r3, #3
 80084fa:	e255      	b.n	80089a8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80084fc:	4b65      	ldr	r3, [pc, #404]	@ (8008694 <HAL_RCC_OscConfig+0x504>)
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008504:	2b00      	cmp	r3, #0
 8008506:	d0f0      	beq.n	80084ea <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008508:	4b62      	ldr	r3, [pc, #392]	@ (8008694 <HAL_RCC_OscConfig+0x504>)
 800850a:	685b      	ldr	r3, [r3, #4]
 800850c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	691b      	ldr	r3, [r3, #16]
 8008514:	061b      	lsls	r3, r3, #24
 8008516:	495f      	ldr	r1, [pc, #380]	@ (8008694 <HAL_RCC_OscConfig+0x504>)
 8008518:	4313      	orrs	r3, r2
 800851a:	604b      	str	r3, [r1, #4]
 800851c:	e018      	b.n	8008550 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800851e:	4b5d      	ldr	r3, [pc, #372]	@ (8008694 <HAL_RCC_OscConfig+0x504>)
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	4a5c      	ldr	r2, [pc, #368]	@ (8008694 <HAL_RCC_OscConfig+0x504>)
 8008524:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008528:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800852a:	f7fd fedf 	bl	80062ec <HAL_GetTick>
 800852e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008530:	e008      	b.n	8008544 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008532:	f7fd fedb 	bl	80062ec <HAL_GetTick>
 8008536:	4602      	mov	r2, r0
 8008538:	693b      	ldr	r3, [r7, #16]
 800853a:	1ad3      	subs	r3, r2, r3
 800853c:	2b02      	cmp	r3, #2
 800853e:	d901      	bls.n	8008544 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8008540:	2303      	movs	r3, #3
 8008542:	e231      	b.n	80089a8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008544:	4b53      	ldr	r3, [pc, #332]	@ (8008694 <HAL_RCC_OscConfig+0x504>)
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800854c:	2b00      	cmp	r3, #0
 800854e:	d1f0      	bne.n	8008532 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	f003 0308 	and.w	r3, r3, #8
 8008558:	2b00      	cmp	r3, #0
 800855a:	d03c      	beq.n	80085d6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	695b      	ldr	r3, [r3, #20]
 8008560:	2b00      	cmp	r3, #0
 8008562:	d01c      	beq.n	800859e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008564:	4b4b      	ldr	r3, [pc, #300]	@ (8008694 <HAL_RCC_OscConfig+0x504>)
 8008566:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800856a:	4a4a      	ldr	r2, [pc, #296]	@ (8008694 <HAL_RCC_OscConfig+0x504>)
 800856c:	f043 0301 	orr.w	r3, r3, #1
 8008570:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008574:	f7fd feba 	bl	80062ec <HAL_GetTick>
 8008578:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800857a:	e008      	b.n	800858e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800857c:	f7fd feb6 	bl	80062ec <HAL_GetTick>
 8008580:	4602      	mov	r2, r0
 8008582:	693b      	ldr	r3, [r7, #16]
 8008584:	1ad3      	subs	r3, r2, r3
 8008586:	2b02      	cmp	r3, #2
 8008588:	d901      	bls.n	800858e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800858a:	2303      	movs	r3, #3
 800858c:	e20c      	b.n	80089a8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800858e:	4b41      	ldr	r3, [pc, #260]	@ (8008694 <HAL_RCC_OscConfig+0x504>)
 8008590:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008594:	f003 0302 	and.w	r3, r3, #2
 8008598:	2b00      	cmp	r3, #0
 800859a:	d0ef      	beq.n	800857c <HAL_RCC_OscConfig+0x3ec>
 800859c:	e01b      	b.n	80085d6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800859e:	4b3d      	ldr	r3, [pc, #244]	@ (8008694 <HAL_RCC_OscConfig+0x504>)
 80085a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80085a4:	4a3b      	ldr	r2, [pc, #236]	@ (8008694 <HAL_RCC_OscConfig+0x504>)
 80085a6:	f023 0301 	bic.w	r3, r3, #1
 80085aa:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80085ae:	f7fd fe9d 	bl	80062ec <HAL_GetTick>
 80085b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80085b4:	e008      	b.n	80085c8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80085b6:	f7fd fe99 	bl	80062ec <HAL_GetTick>
 80085ba:	4602      	mov	r2, r0
 80085bc:	693b      	ldr	r3, [r7, #16]
 80085be:	1ad3      	subs	r3, r2, r3
 80085c0:	2b02      	cmp	r3, #2
 80085c2:	d901      	bls.n	80085c8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80085c4:	2303      	movs	r3, #3
 80085c6:	e1ef      	b.n	80089a8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80085c8:	4b32      	ldr	r3, [pc, #200]	@ (8008694 <HAL_RCC_OscConfig+0x504>)
 80085ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80085ce:	f003 0302 	and.w	r3, r3, #2
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d1ef      	bne.n	80085b6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	f003 0304 	and.w	r3, r3, #4
 80085de:	2b00      	cmp	r3, #0
 80085e0:	f000 80a6 	beq.w	8008730 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80085e4:	2300      	movs	r3, #0
 80085e6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80085e8:	4b2a      	ldr	r3, [pc, #168]	@ (8008694 <HAL_RCC_OscConfig+0x504>)
 80085ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80085ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d10d      	bne.n	8008610 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80085f4:	4b27      	ldr	r3, [pc, #156]	@ (8008694 <HAL_RCC_OscConfig+0x504>)
 80085f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80085f8:	4a26      	ldr	r2, [pc, #152]	@ (8008694 <HAL_RCC_OscConfig+0x504>)
 80085fa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80085fe:	6593      	str	r3, [r2, #88]	@ 0x58
 8008600:	4b24      	ldr	r3, [pc, #144]	@ (8008694 <HAL_RCC_OscConfig+0x504>)
 8008602:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008604:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008608:	60bb      	str	r3, [r7, #8]
 800860a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800860c:	2301      	movs	r3, #1
 800860e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008610:	4b21      	ldr	r3, [pc, #132]	@ (8008698 <HAL_RCC_OscConfig+0x508>)
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008618:	2b00      	cmp	r3, #0
 800861a:	d118      	bne.n	800864e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800861c:	4b1e      	ldr	r3, [pc, #120]	@ (8008698 <HAL_RCC_OscConfig+0x508>)
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	4a1d      	ldr	r2, [pc, #116]	@ (8008698 <HAL_RCC_OscConfig+0x508>)
 8008622:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008626:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008628:	f7fd fe60 	bl	80062ec <HAL_GetTick>
 800862c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800862e:	e008      	b.n	8008642 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008630:	f7fd fe5c 	bl	80062ec <HAL_GetTick>
 8008634:	4602      	mov	r2, r0
 8008636:	693b      	ldr	r3, [r7, #16]
 8008638:	1ad3      	subs	r3, r2, r3
 800863a:	2b02      	cmp	r3, #2
 800863c:	d901      	bls.n	8008642 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800863e:	2303      	movs	r3, #3
 8008640:	e1b2      	b.n	80089a8 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008642:	4b15      	ldr	r3, [pc, #84]	@ (8008698 <HAL_RCC_OscConfig+0x508>)
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800864a:	2b00      	cmp	r3, #0
 800864c:	d0f0      	beq.n	8008630 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	689b      	ldr	r3, [r3, #8]
 8008652:	2b01      	cmp	r3, #1
 8008654:	d108      	bne.n	8008668 <HAL_RCC_OscConfig+0x4d8>
 8008656:	4b0f      	ldr	r3, [pc, #60]	@ (8008694 <HAL_RCC_OscConfig+0x504>)
 8008658:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800865c:	4a0d      	ldr	r2, [pc, #52]	@ (8008694 <HAL_RCC_OscConfig+0x504>)
 800865e:	f043 0301 	orr.w	r3, r3, #1
 8008662:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8008666:	e029      	b.n	80086bc <HAL_RCC_OscConfig+0x52c>
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	689b      	ldr	r3, [r3, #8]
 800866c:	2b05      	cmp	r3, #5
 800866e:	d115      	bne.n	800869c <HAL_RCC_OscConfig+0x50c>
 8008670:	4b08      	ldr	r3, [pc, #32]	@ (8008694 <HAL_RCC_OscConfig+0x504>)
 8008672:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008676:	4a07      	ldr	r2, [pc, #28]	@ (8008694 <HAL_RCC_OscConfig+0x504>)
 8008678:	f043 0304 	orr.w	r3, r3, #4
 800867c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8008680:	4b04      	ldr	r3, [pc, #16]	@ (8008694 <HAL_RCC_OscConfig+0x504>)
 8008682:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008686:	4a03      	ldr	r2, [pc, #12]	@ (8008694 <HAL_RCC_OscConfig+0x504>)
 8008688:	f043 0301 	orr.w	r3, r3, #1
 800868c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8008690:	e014      	b.n	80086bc <HAL_RCC_OscConfig+0x52c>
 8008692:	bf00      	nop
 8008694:	40021000 	.word	0x40021000
 8008698:	40007000 	.word	0x40007000
 800869c:	4b9a      	ldr	r3, [pc, #616]	@ (8008908 <HAL_RCC_OscConfig+0x778>)
 800869e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80086a2:	4a99      	ldr	r2, [pc, #612]	@ (8008908 <HAL_RCC_OscConfig+0x778>)
 80086a4:	f023 0301 	bic.w	r3, r3, #1
 80086a8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80086ac:	4b96      	ldr	r3, [pc, #600]	@ (8008908 <HAL_RCC_OscConfig+0x778>)
 80086ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80086b2:	4a95      	ldr	r2, [pc, #596]	@ (8008908 <HAL_RCC_OscConfig+0x778>)
 80086b4:	f023 0304 	bic.w	r3, r3, #4
 80086b8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	689b      	ldr	r3, [r3, #8]
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d016      	beq.n	80086f2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80086c4:	f7fd fe12 	bl	80062ec <HAL_GetTick>
 80086c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80086ca:	e00a      	b.n	80086e2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80086cc:	f7fd fe0e 	bl	80062ec <HAL_GetTick>
 80086d0:	4602      	mov	r2, r0
 80086d2:	693b      	ldr	r3, [r7, #16]
 80086d4:	1ad3      	subs	r3, r2, r3
 80086d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80086da:	4293      	cmp	r3, r2
 80086dc:	d901      	bls.n	80086e2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80086de:	2303      	movs	r3, #3
 80086e0:	e162      	b.n	80089a8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80086e2:	4b89      	ldr	r3, [pc, #548]	@ (8008908 <HAL_RCC_OscConfig+0x778>)
 80086e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80086e8:	f003 0302 	and.w	r3, r3, #2
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d0ed      	beq.n	80086cc <HAL_RCC_OscConfig+0x53c>
 80086f0:	e015      	b.n	800871e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80086f2:	f7fd fdfb 	bl	80062ec <HAL_GetTick>
 80086f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80086f8:	e00a      	b.n	8008710 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80086fa:	f7fd fdf7 	bl	80062ec <HAL_GetTick>
 80086fe:	4602      	mov	r2, r0
 8008700:	693b      	ldr	r3, [r7, #16]
 8008702:	1ad3      	subs	r3, r2, r3
 8008704:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008708:	4293      	cmp	r3, r2
 800870a:	d901      	bls.n	8008710 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800870c:	2303      	movs	r3, #3
 800870e:	e14b      	b.n	80089a8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008710:	4b7d      	ldr	r3, [pc, #500]	@ (8008908 <HAL_RCC_OscConfig+0x778>)
 8008712:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008716:	f003 0302 	and.w	r3, r3, #2
 800871a:	2b00      	cmp	r3, #0
 800871c:	d1ed      	bne.n	80086fa <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800871e:	7ffb      	ldrb	r3, [r7, #31]
 8008720:	2b01      	cmp	r3, #1
 8008722:	d105      	bne.n	8008730 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008724:	4b78      	ldr	r3, [pc, #480]	@ (8008908 <HAL_RCC_OscConfig+0x778>)
 8008726:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008728:	4a77      	ldr	r2, [pc, #476]	@ (8008908 <HAL_RCC_OscConfig+0x778>)
 800872a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800872e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	f003 0320 	and.w	r3, r3, #32
 8008738:	2b00      	cmp	r3, #0
 800873a:	d03c      	beq.n	80087b6 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008740:	2b00      	cmp	r3, #0
 8008742:	d01c      	beq.n	800877e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008744:	4b70      	ldr	r3, [pc, #448]	@ (8008908 <HAL_RCC_OscConfig+0x778>)
 8008746:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800874a:	4a6f      	ldr	r2, [pc, #444]	@ (8008908 <HAL_RCC_OscConfig+0x778>)
 800874c:	f043 0301 	orr.w	r3, r3, #1
 8008750:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008754:	f7fd fdca 	bl	80062ec <HAL_GetTick>
 8008758:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800875a:	e008      	b.n	800876e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800875c:	f7fd fdc6 	bl	80062ec <HAL_GetTick>
 8008760:	4602      	mov	r2, r0
 8008762:	693b      	ldr	r3, [r7, #16]
 8008764:	1ad3      	subs	r3, r2, r3
 8008766:	2b02      	cmp	r3, #2
 8008768:	d901      	bls.n	800876e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800876a:	2303      	movs	r3, #3
 800876c:	e11c      	b.n	80089a8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800876e:	4b66      	ldr	r3, [pc, #408]	@ (8008908 <HAL_RCC_OscConfig+0x778>)
 8008770:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008774:	f003 0302 	and.w	r3, r3, #2
 8008778:	2b00      	cmp	r3, #0
 800877a:	d0ef      	beq.n	800875c <HAL_RCC_OscConfig+0x5cc>
 800877c:	e01b      	b.n	80087b6 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800877e:	4b62      	ldr	r3, [pc, #392]	@ (8008908 <HAL_RCC_OscConfig+0x778>)
 8008780:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008784:	4a60      	ldr	r2, [pc, #384]	@ (8008908 <HAL_RCC_OscConfig+0x778>)
 8008786:	f023 0301 	bic.w	r3, r3, #1
 800878a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800878e:	f7fd fdad 	bl	80062ec <HAL_GetTick>
 8008792:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8008794:	e008      	b.n	80087a8 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008796:	f7fd fda9 	bl	80062ec <HAL_GetTick>
 800879a:	4602      	mov	r2, r0
 800879c:	693b      	ldr	r3, [r7, #16]
 800879e:	1ad3      	subs	r3, r2, r3
 80087a0:	2b02      	cmp	r3, #2
 80087a2:	d901      	bls.n	80087a8 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80087a4:	2303      	movs	r3, #3
 80087a6:	e0ff      	b.n	80089a8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80087a8:	4b57      	ldr	r3, [pc, #348]	@ (8008908 <HAL_RCC_OscConfig+0x778>)
 80087aa:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80087ae:	f003 0302 	and.w	r3, r3, #2
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d1ef      	bne.n	8008796 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	f000 80f3 	beq.w	80089a6 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80087c4:	2b02      	cmp	r3, #2
 80087c6:	f040 80c9 	bne.w	800895c <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80087ca:	4b4f      	ldr	r3, [pc, #316]	@ (8008908 <HAL_RCC_OscConfig+0x778>)
 80087cc:	68db      	ldr	r3, [r3, #12]
 80087ce:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80087d0:	697b      	ldr	r3, [r7, #20]
 80087d2:	f003 0203 	and.w	r2, r3, #3
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087da:	429a      	cmp	r2, r3
 80087dc:	d12c      	bne.n	8008838 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80087de:	697b      	ldr	r3, [r7, #20]
 80087e0:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80087e8:	3b01      	subs	r3, #1
 80087ea:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80087ec:	429a      	cmp	r2, r3
 80087ee:	d123      	bne.n	8008838 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80087f0:	697b      	ldr	r3, [r7, #20]
 80087f2:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80087fa:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80087fc:	429a      	cmp	r2, r3
 80087fe:	d11b      	bne.n	8008838 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8008800:	697b      	ldr	r3, [r7, #20]
 8008802:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800880a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800880c:	429a      	cmp	r2, r3
 800880e:	d113      	bne.n	8008838 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008810:	697b      	ldr	r3, [r7, #20]
 8008812:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800881a:	085b      	lsrs	r3, r3, #1
 800881c:	3b01      	subs	r3, #1
 800881e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8008820:	429a      	cmp	r2, r3
 8008822:	d109      	bne.n	8008838 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8008824:	697b      	ldr	r3, [r7, #20]
 8008826:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800882e:	085b      	lsrs	r3, r3, #1
 8008830:	3b01      	subs	r3, #1
 8008832:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008834:	429a      	cmp	r2, r3
 8008836:	d06b      	beq.n	8008910 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8008838:	69bb      	ldr	r3, [r7, #24]
 800883a:	2b0c      	cmp	r3, #12
 800883c:	d062      	beq.n	8008904 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800883e:	4b32      	ldr	r3, [pc, #200]	@ (8008908 <HAL_RCC_OscConfig+0x778>)
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8008846:	2b00      	cmp	r3, #0
 8008848:	d001      	beq.n	800884e <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800884a:	2301      	movs	r3, #1
 800884c:	e0ac      	b.n	80089a8 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800884e:	4b2e      	ldr	r3, [pc, #184]	@ (8008908 <HAL_RCC_OscConfig+0x778>)
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	4a2d      	ldr	r2, [pc, #180]	@ (8008908 <HAL_RCC_OscConfig+0x778>)
 8008854:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008858:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800885a:	f7fd fd47 	bl	80062ec <HAL_GetTick>
 800885e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008860:	e008      	b.n	8008874 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008862:	f7fd fd43 	bl	80062ec <HAL_GetTick>
 8008866:	4602      	mov	r2, r0
 8008868:	693b      	ldr	r3, [r7, #16]
 800886a:	1ad3      	subs	r3, r2, r3
 800886c:	2b02      	cmp	r3, #2
 800886e:	d901      	bls.n	8008874 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8008870:	2303      	movs	r3, #3
 8008872:	e099      	b.n	80089a8 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008874:	4b24      	ldr	r3, [pc, #144]	@ (8008908 <HAL_RCC_OscConfig+0x778>)
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800887c:	2b00      	cmp	r3, #0
 800887e:	d1f0      	bne.n	8008862 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008880:	4b21      	ldr	r3, [pc, #132]	@ (8008908 <HAL_RCC_OscConfig+0x778>)
 8008882:	68da      	ldr	r2, [r3, #12]
 8008884:	4b21      	ldr	r3, [pc, #132]	@ (800890c <HAL_RCC_OscConfig+0x77c>)
 8008886:	4013      	ands	r3, r2
 8008888:	687a      	ldr	r2, [r7, #4]
 800888a:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800888c:	687a      	ldr	r2, [r7, #4]
 800888e:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8008890:	3a01      	subs	r2, #1
 8008892:	0112      	lsls	r2, r2, #4
 8008894:	4311      	orrs	r1, r2
 8008896:	687a      	ldr	r2, [r7, #4]
 8008898:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800889a:	0212      	lsls	r2, r2, #8
 800889c:	4311      	orrs	r1, r2
 800889e:	687a      	ldr	r2, [r7, #4]
 80088a0:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80088a2:	0852      	lsrs	r2, r2, #1
 80088a4:	3a01      	subs	r2, #1
 80088a6:	0552      	lsls	r2, r2, #21
 80088a8:	4311      	orrs	r1, r2
 80088aa:	687a      	ldr	r2, [r7, #4]
 80088ac:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80088ae:	0852      	lsrs	r2, r2, #1
 80088b0:	3a01      	subs	r2, #1
 80088b2:	0652      	lsls	r2, r2, #25
 80088b4:	4311      	orrs	r1, r2
 80088b6:	687a      	ldr	r2, [r7, #4]
 80088b8:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80088ba:	06d2      	lsls	r2, r2, #27
 80088bc:	430a      	orrs	r2, r1
 80088be:	4912      	ldr	r1, [pc, #72]	@ (8008908 <HAL_RCC_OscConfig+0x778>)
 80088c0:	4313      	orrs	r3, r2
 80088c2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80088c4:	4b10      	ldr	r3, [pc, #64]	@ (8008908 <HAL_RCC_OscConfig+0x778>)
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	4a0f      	ldr	r2, [pc, #60]	@ (8008908 <HAL_RCC_OscConfig+0x778>)
 80088ca:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80088ce:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80088d0:	4b0d      	ldr	r3, [pc, #52]	@ (8008908 <HAL_RCC_OscConfig+0x778>)
 80088d2:	68db      	ldr	r3, [r3, #12]
 80088d4:	4a0c      	ldr	r2, [pc, #48]	@ (8008908 <HAL_RCC_OscConfig+0x778>)
 80088d6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80088da:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80088dc:	f7fd fd06 	bl	80062ec <HAL_GetTick>
 80088e0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80088e2:	e008      	b.n	80088f6 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80088e4:	f7fd fd02 	bl	80062ec <HAL_GetTick>
 80088e8:	4602      	mov	r2, r0
 80088ea:	693b      	ldr	r3, [r7, #16]
 80088ec:	1ad3      	subs	r3, r2, r3
 80088ee:	2b02      	cmp	r3, #2
 80088f0:	d901      	bls.n	80088f6 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80088f2:	2303      	movs	r3, #3
 80088f4:	e058      	b.n	80089a8 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80088f6:	4b04      	ldr	r3, [pc, #16]	@ (8008908 <HAL_RCC_OscConfig+0x778>)
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d0f0      	beq.n	80088e4 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8008902:	e050      	b.n	80089a6 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8008904:	2301      	movs	r3, #1
 8008906:	e04f      	b.n	80089a8 <HAL_RCC_OscConfig+0x818>
 8008908:	40021000 	.word	0x40021000
 800890c:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008910:	4b27      	ldr	r3, [pc, #156]	@ (80089b0 <HAL_RCC_OscConfig+0x820>)
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008918:	2b00      	cmp	r3, #0
 800891a:	d144      	bne.n	80089a6 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800891c:	4b24      	ldr	r3, [pc, #144]	@ (80089b0 <HAL_RCC_OscConfig+0x820>)
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	4a23      	ldr	r2, [pc, #140]	@ (80089b0 <HAL_RCC_OscConfig+0x820>)
 8008922:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008926:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8008928:	4b21      	ldr	r3, [pc, #132]	@ (80089b0 <HAL_RCC_OscConfig+0x820>)
 800892a:	68db      	ldr	r3, [r3, #12]
 800892c:	4a20      	ldr	r2, [pc, #128]	@ (80089b0 <HAL_RCC_OscConfig+0x820>)
 800892e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008932:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8008934:	f7fd fcda 	bl	80062ec <HAL_GetTick>
 8008938:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800893a:	e008      	b.n	800894e <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800893c:	f7fd fcd6 	bl	80062ec <HAL_GetTick>
 8008940:	4602      	mov	r2, r0
 8008942:	693b      	ldr	r3, [r7, #16]
 8008944:	1ad3      	subs	r3, r2, r3
 8008946:	2b02      	cmp	r3, #2
 8008948:	d901      	bls.n	800894e <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 800894a:	2303      	movs	r3, #3
 800894c:	e02c      	b.n	80089a8 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800894e:	4b18      	ldr	r3, [pc, #96]	@ (80089b0 <HAL_RCC_OscConfig+0x820>)
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008956:	2b00      	cmp	r3, #0
 8008958:	d0f0      	beq.n	800893c <HAL_RCC_OscConfig+0x7ac>
 800895a:	e024      	b.n	80089a6 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800895c:	69bb      	ldr	r3, [r7, #24]
 800895e:	2b0c      	cmp	r3, #12
 8008960:	d01f      	beq.n	80089a2 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008962:	4b13      	ldr	r3, [pc, #76]	@ (80089b0 <HAL_RCC_OscConfig+0x820>)
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	4a12      	ldr	r2, [pc, #72]	@ (80089b0 <HAL_RCC_OscConfig+0x820>)
 8008968:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800896c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800896e:	f7fd fcbd 	bl	80062ec <HAL_GetTick>
 8008972:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008974:	e008      	b.n	8008988 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008976:	f7fd fcb9 	bl	80062ec <HAL_GetTick>
 800897a:	4602      	mov	r2, r0
 800897c:	693b      	ldr	r3, [r7, #16]
 800897e:	1ad3      	subs	r3, r2, r3
 8008980:	2b02      	cmp	r3, #2
 8008982:	d901      	bls.n	8008988 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8008984:	2303      	movs	r3, #3
 8008986:	e00f      	b.n	80089a8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008988:	4b09      	ldr	r3, [pc, #36]	@ (80089b0 <HAL_RCC_OscConfig+0x820>)
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008990:	2b00      	cmp	r3, #0
 8008992:	d1f0      	bne.n	8008976 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8008994:	4b06      	ldr	r3, [pc, #24]	@ (80089b0 <HAL_RCC_OscConfig+0x820>)
 8008996:	68da      	ldr	r2, [r3, #12]
 8008998:	4905      	ldr	r1, [pc, #20]	@ (80089b0 <HAL_RCC_OscConfig+0x820>)
 800899a:	4b06      	ldr	r3, [pc, #24]	@ (80089b4 <HAL_RCC_OscConfig+0x824>)
 800899c:	4013      	ands	r3, r2
 800899e:	60cb      	str	r3, [r1, #12]
 80089a0:	e001      	b.n	80089a6 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80089a2:	2301      	movs	r3, #1
 80089a4:	e000      	b.n	80089a8 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 80089a6:	2300      	movs	r3, #0
}
 80089a8:	4618      	mov	r0, r3
 80089aa:	3720      	adds	r7, #32
 80089ac:	46bd      	mov	sp, r7
 80089ae:	bd80      	pop	{r7, pc}
 80089b0:	40021000 	.word	0x40021000
 80089b4:	feeefffc 	.word	0xfeeefffc

080089b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80089b8:	b580      	push	{r7, lr}
 80089ba:	b084      	sub	sp, #16
 80089bc:	af00      	add	r7, sp, #0
 80089be:	6078      	str	r0, [r7, #4]
 80089c0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d101      	bne.n	80089cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80089c8:	2301      	movs	r3, #1
 80089ca:	e0e7      	b.n	8008b9c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80089cc:	4b75      	ldr	r3, [pc, #468]	@ (8008ba4 <HAL_RCC_ClockConfig+0x1ec>)
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	f003 0307 	and.w	r3, r3, #7
 80089d4:	683a      	ldr	r2, [r7, #0]
 80089d6:	429a      	cmp	r2, r3
 80089d8:	d910      	bls.n	80089fc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80089da:	4b72      	ldr	r3, [pc, #456]	@ (8008ba4 <HAL_RCC_ClockConfig+0x1ec>)
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	f023 0207 	bic.w	r2, r3, #7
 80089e2:	4970      	ldr	r1, [pc, #448]	@ (8008ba4 <HAL_RCC_ClockConfig+0x1ec>)
 80089e4:	683b      	ldr	r3, [r7, #0]
 80089e6:	4313      	orrs	r3, r2
 80089e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80089ea:	4b6e      	ldr	r3, [pc, #440]	@ (8008ba4 <HAL_RCC_ClockConfig+0x1ec>)
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	f003 0307 	and.w	r3, r3, #7
 80089f2:	683a      	ldr	r2, [r7, #0]
 80089f4:	429a      	cmp	r2, r3
 80089f6:	d001      	beq.n	80089fc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80089f8:	2301      	movs	r3, #1
 80089fa:	e0cf      	b.n	8008b9c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	f003 0302 	and.w	r3, r3, #2
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d010      	beq.n	8008a2a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	689a      	ldr	r2, [r3, #8]
 8008a0c:	4b66      	ldr	r3, [pc, #408]	@ (8008ba8 <HAL_RCC_ClockConfig+0x1f0>)
 8008a0e:	689b      	ldr	r3, [r3, #8]
 8008a10:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008a14:	429a      	cmp	r2, r3
 8008a16:	d908      	bls.n	8008a2a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008a18:	4b63      	ldr	r3, [pc, #396]	@ (8008ba8 <HAL_RCC_ClockConfig+0x1f0>)
 8008a1a:	689b      	ldr	r3, [r3, #8]
 8008a1c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	689b      	ldr	r3, [r3, #8]
 8008a24:	4960      	ldr	r1, [pc, #384]	@ (8008ba8 <HAL_RCC_ClockConfig+0x1f0>)
 8008a26:	4313      	orrs	r3, r2
 8008a28:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	f003 0301 	and.w	r3, r3, #1
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d04c      	beq.n	8008ad0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	685b      	ldr	r3, [r3, #4]
 8008a3a:	2b03      	cmp	r3, #3
 8008a3c:	d107      	bne.n	8008a4e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008a3e:	4b5a      	ldr	r3, [pc, #360]	@ (8008ba8 <HAL_RCC_ClockConfig+0x1f0>)
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d121      	bne.n	8008a8e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8008a4a:	2301      	movs	r3, #1
 8008a4c:	e0a6      	b.n	8008b9c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	685b      	ldr	r3, [r3, #4]
 8008a52:	2b02      	cmp	r3, #2
 8008a54:	d107      	bne.n	8008a66 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008a56:	4b54      	ldr	r3, [pc, #336]	@ (8008ba8 <HAL_RCC_ClockConfig+0x1f0>)
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d115      	bne.n	8008a8e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8008a62:	2301      	movs	r3, #1
 8008a64:	e09a      	b.n	8008b9c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	685b      	ldr	r3, [r3, #4]
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d107      	bne.n	8008a7e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8008a6e:	4b4e      	ldr	r3, [pc, #312]	@ (8008ba8 <HAL_RCC_ClockConfig+0x1f0>)
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	f003 0302 	and.w	r3, r3, #2
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d109      	bne.n	8008a8e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8008a7a:	2301      	movs	r3, #1
 8008a7c:	e08e      	b.n	8008b9c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008a7e:	4b4a      	ldr	r3, [pc, #296]	@ (8008ba8 <HAL_RCC_ClockConfig+0x1f0>)
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d101      	bne.n	8008a8e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8008a8a:	2301      	movs	r3, #1
 8008a8c:	e086      	b.n	8008b9c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008a8e:	4b46      	ldr	r3, [pc, #280]	@ (8008ba8 <HAL_RCC_ClockConfig+0x1f0>)
 8008a90:	689b      	ldr	r3, [r3, #8]
 8008a92:	f023 0203 	bic.w	r2, r3, #3
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	685b      	ldr	r3, [r3, #4]
 8008a9a:	4943      	ldr	r1, [pc, #268]	@ (8008ba8 <HAL_RCC_ClockConfig+0x1f0>)
 8008a9c:	4313      	orrs	r3, r2
 8008a9e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008aa0:	f7fd fc24 	bl	80062ec <HAL_GetTick>
 8008aa4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008aa6:	e00a      	b.n	8008abe <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008aa8:	f7fd fc20 	bl	80062ec <HAL_GetTick>
 8008aac:	4602      	mov	r2, r0
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	1ad3      	subs	r3, r2, r3
 8008ab2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008ab6:	4293      	cmp	r3, r2
 8008ab8:	d901      	bls.n	8008abe <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8008aba:	2303      	movs	r3, #3
 8008abc:	e06e      	b.n	8008b9c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008abe:	4b3a      	ldr	r3, [pc, #232]	@ (8008ba8 <HAL_RCC_ClockConfig+0x1f0>)
 8008ac0:	689b      	ldr	r3, [r3, #8]
 8008ac2:	f003 020c 	and.w	r2, r3, #12
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	685b      	ldr	r3, [r3, #4]
 8008aca:	009b      	lsls	r3, r3, #2
 8008acc:	429a      	cmp	r2, r3
 8008ace:	d1eb      	bne.n	8008aa8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	f003 0302 	and.w	r3, r3, #2
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d010      	beq.n	8008afe <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	689a      	ldr	r2, [r3, #8]
 8008ae0:	4b31      	ldr	r3, [pc, #196]	@ (8008ba8 <HAL_RCC_ClockConfig+0x1f0>)
 8008ae2:	689b      	ldr	r3, [r3, #8]
 8008ae4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008ae8:	429a      	cmp	r2, r3
 8008aea:	d208      	bcs.n	8008afe <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008aec:	4b2e      	ldr	r3, [pc, #184]	@ (8008ba8 <HAL_RCC_ClockConfig+0x1f0>)
 8008aee:	689b      	ldr	r3, [r3, #8]
 8008af0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	689b      	ldr	r3, [r3, #8]
 8008af8:	492b      	ldr	r1, [pc, #172]	@ (8008ba8 <HAL_RCC_ClockConfig+0x1f0>)
 8008afa:	4313      	orrs	r3, r2
 8008afc:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008afe:	4b29      	ldr	r3, [pc, #164]	@ (8008ba4 <HAL_RCC_ClockConfig+0x1ec>)
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	f003 0307 	and.w	r3, r3, #7
 8008b06:	683a      	ldr	r2, [r7, #0]
 8008b08:	429a      	cmp	r2, r3
 8008b0a:	d210      	bcs.n	8008b2e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008b0c:	4b25      	ldr	r3, [pc, #148]	@ (8008ba4 <HAL_RCC_ClockConfig+0x1ec>)
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	f023 0207 	bic.w	r2, r3, #7
 8008b14:	4923      	ldr	r1, [pc, #140]	@ (8008ba4 <HAL_RCC_ClockConfig+0x1ec>)
 8008b16:	683b      	ldr	r3, [r7, #0]
 8008b18:	4313      	orrs	r3, r2
 8008b1a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008b1c:	4b21      	ldr	r3, [pc, #132]	@ (8008ba4 <HAL_RCC_ClockConfig+0x1ec>)
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	f003 0307 	and.w	r3, r3, #7
 8008b24:	683a      	ldr	r2, [r7, #0]
 8008b26:	429a      	cmp	r2, r3
 8008b28:	d001      	beq.n	8008b2e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8008b2a:	2301      	movs	r3, #1
 8008b2c:	e036      	b.n	8008b9c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	f003 0304 	and.w	r3, r3, #4
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d008      	beq.n	8008b4c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008b3a:	4b1b      	ldr	r3, [pc, #108]	@ (8008ba8 <HAL_RCC_ClockConfig+0x1f0>)
 8008b3c:	689b      	ldr	r3, [r3, #8]
 8008b3e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	68db      	ldr	r3, [r3, #12]
 8008b46:	4918      	ldr	r1, [pc, #96]	@ (8008ba8 <HAL_RCC_ClockConfig+0x1f0>)
 8008b48:	4313      	orrs	r3, r2
 8008b4a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	f003 0308 	and.w	r3, r3, #8
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d009      	beq.n	8008b6c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008b58:	4b13      	ldr	r3, [pc, #76]	@ (8008ba8 <HAL_RCC_ClockConfig+0x1f0>)
 8008b5a:	689b      	ldr	r3, [r3, #8]
 8008b5c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	691b      	ldr	r3, [r3, #16]
 8008b64:	00db      	lsls	r3, r3, #3
 8008b66:	4910      	ldr	r1, [pc, #64]	@ (8008ba8 <HAL_RCC_ClockConfig+0x1f0>)
 8008b68:	4313      	orrs	r3, r2
 8008b6a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8008b6c:	f000 f824 	bl	8008bb8 <HAL_RCC_GetSysClockFreq>
 8008b70:	4602      	mov	r2, r0
 8008b72:	4b0d      	ldr	r3, [pc, #52]	@ (8008ba8 <HAL_RCC_ClockConfig+0x1f0>)
 8008b74:	689b      	ldr	r3, [r3, #8]
 8008b76:	091b      	lsrs	r3, r3, #4
 8008b78:	f003 030f 	and.w	r3, r3, #15
 8008b7c:	490b      	ldr	r1, [pc, #44]	@ (8008bac <HAL_RCC_ClockConfig+0x1f4>)
 8008b7e:	5ccb      	ldrb	r3, [r1, r3]
 8008b80:	f003 031f 	and.w	r3, r3, #31
 8008b84:	fa22 f303 	lsr.w	r3, r2, r3
 8008b88:	4a09      	ldr	r2, [pc, #36]	@ (8008bb0 <HAL_RCC_ClockConfig+0x1f8>)
 8008b8a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8008b8c:	4b09      	ldr	r3, [pc, #36]	@ (8008bb4 <HAL_RCC_ClockConfig+0x1fc>)
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	4618      	mov	r0, r3
 8008b92:	f7fc fc4d 	bl	8005430 <HAL_InitTick>
 8008b96:	4603      	mov	r3, r0
 8008b98:	72fb      	strb	r3, [r7, #11]

  return status;
 8008b9a:	7afb      	ldrb	r3, [r7, #11]
}
 8008b9c:	4618      	mov	r0, r3
 8008b9e:	3710      	adds	r7, #16
 8008ba0:	46bd      	mov	sp, r7
 8008ba2:	bd80      	pop	{r7, pc}
 8008ba4:	40022000 	.word	0x40022000
 8008ba8:	40021000 	.word	0x40021000
 8008bac:	08012a24 	.word	0x08012a24
 8008bb0:	20000028 	.word	0x20000028
 8008bb4:	2000002c 	.word	0x2000002c

08008bb8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008bb8:	b480      	push	{r7}
 8008bba:	b089      	sub	sp, #36	@ 0x24
 8008bbc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8008bbe:	2300      	movs	r3, #0
 8008bc0:	61fb      	str	r3, [r7, #28]
 8008bc2:	2300      	movs	r3, #0
 8008bc4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008bc6:	4b3e      	ldr	r3, [pc, #248]	@ (8008cc0 <HAL_RCC_GetSysClockFreq+0x108>)
 8008bc8:	689b      	ldr	r3, [r3, #8]
 8008bca:	f003 030c 	and.w	r3, r3, #12
 8008bce:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008bd0:	4b3b      	ldr	r3, [pc, #236]	@ (8008cc0 <HAL_RCC_GetSysClockFreq+0x108>)
 8008bd2:	68db      	ldr	r3, [r3, #12]
 8008bd4:	f003 0303 	and.w	r3, r3, #3
 8008bd8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8008bda:	693b      	ldr	r3, [r7, #16]
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d005      	beq.n	8008bec <HAL_RCC_GetSysClockFreq+0x34>
 8008be0:	693b      	ldr	r3, [r7, #16]
 8008be2:	2b0c      	cmp	r3, #12
 8008be4:	d121      	bne.n	8008c2a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	2b01      	cmp	r3, #1
 8008bea:	d11e      	bne.n	8008c2a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8008bec:	4b34      	ldr	r3, [pc, #208]	@ (8008cc0 <HAL_RCC_GetSysClockFreq+0x108>)
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	f003 0308 	and.w	r3, r3, #8
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d107      	bne.n	8008c08 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8008bf8:	4b31      	ldr	r3, [pc, #196]	@ (8008cc0 <HAL_RCC_GetSysClockFreq+0x108>)
 8008bfa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008bfe:	0a1b      	lsrs	r3, r3, #8
 8008c00:	f003 030f 	and.w	r3, r3, #15
 8008c04:	61fb      	str	r3, [r7, #28]
 8008c06:	e005      	b.n	8008c14 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8008c08:	4b2d      	ldr	r3, [pc, #180]	@ (8008cc0 <HAL_RCC_GetSysClockFreq+0x108>)
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	091b      	lsrs	r3, r3, #4
 8008c0e:	f003 030f 	and.w	r3, r3, #15
 8008c12:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8008c14:	4a2b      	ldr	r2, [pc, #172]	@ (8008cc4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8008c16:	69fb      	ldr	r3, [r7, #28]
 8008c18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008c1c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8008c1e:	693b      	ldr	r3, [r7, #16]
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d10d      	bne.n	8008c40 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8008c24:	69fb      	ldr	r3, [r7, #28]
 8008c26:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8008c28:	e00a      	b.n	8008c40 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8008c2a:	693b      	ldr	r3, [r7, #16]
 8008c2c:	2b04      	cmp	r3, #4
 8008c2e:	d102      	bne.n	8008c36 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8008c30:	4b25      	ldr	r3, [pc, #148]	@ (8008cc8 <HAL_RCC_GetSysClockFreq+0x110>)
 8008c32:	61bb      	str	r3, [r7, #24]
 8008c34:	e004      	b.n	8008c40 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8008c36:	693b      	ldr	r3, [r7, #16]
 8008c38:	2b08      	cmp	r3, #8
 8008c3a:	d101      	bne.n	8008c40 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8008c3c:	4b23      	ldr	r3, [pc, #140]	@ (8008ccc <HAL_RCC_GetSysClockFreq+0x114>)
 8008c3e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8008c40:	693b      	ldr	r3, [r7, #16]
 8008c42:	2b0c      	cmp	r3, #12
 8008c44:	d134      	bne.n	8008cb0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8008c46:	4b1e      	ldr	r3, [pc, #120]	@ (8008cc0 <HAL_RCC_GetSysClockFreq+0x108>)
 8008c48:	68db      	ldr	r3, [r3, #12]
 8008c4a:	f003 0303 	and.w	r3, r3, #3
 8008c4e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8008c50:	68bb      	ldr	r3, [r7, #8]
 8008c52:	2b02      	cmp	r3, #2
 8008c54:	d003      	beq.n	8008c5e <HAL_RCC_GetSysClockFreq+0xa6>
 8008c56:	68bb      	ldr	r3, [r7, #8]
 8008c58:	2b03      	cmp	r3, #3
 8008c5a:	d003      	beq.n	8008c64 <HAL_RCC_GetSysClockFreq+0xac>
 8008c5c:	e005      	b.n	8008c6a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8008c5e:	4b1a      	ldr	r3, [pc, #104]	@ (8008cc8 <HAL_RCC_GetSysClockFreq+0x110>)
 8008c60:	617b      	str	r3, [r7, #20]
      break;
 8008c62:	e005      	b.n	8008c70 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8008c64:	4b19      	ldr	r3, [pc, #100]	@ (8008ccc <HAL_RCC_GetSysClockFreq+0x114>)
 8008c66:	617b      	str	r3, [r7, #20]
      break;
 8008c68:	e002      	b.n	8008c70 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8008c6a:	69fb      	ldr	r3, [r7, #28]
 8008c6c:	617b      	str	r3, [r7, #20]
      break;
 8008c6e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8008c70:	4b13      	ldr	r3, [pc, #76]	@ (8008cc0 <HAL_RCC_GetSysClockFreq+0x108>)
 8008c72:	68db      	ldr	r3, [r3, #12]
 8008c74:	091b      	lsrs	r3, r3, #4
 8008c76:	f003 0307 	and.w	r3, r3, #7
 8008c7a:	3301      	adds	r3, #1
 8008c7c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8008c7e:	4b10      	ldr	r3, [pc, #64]	@ (8008cc0 <HAL_RCC_GetSysClockFreq+0x108>)
 8008c80:	68db      	ldr	r3, [r3, #12]
 8008c82:	0a1b      	lsrs	r3, r3, #8
 8008c84:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008c88:	697a      	ldr	r2, [r7, #20]
 8008c8a:	fb03 f202 	mul.w	r2, r3, r2
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c94:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8008c96:	4b0a      	ldr	r3, [pc, #40]	@ (8008cc0 <HAL_RCC_GetSysClockFreq+0x108>)
 8008c98:	68db      	ldr	r3, [r3, #12]
 8008c9a:	0e5b      	lsrs	r3, r3, #25
 8008c9c:	f003 0303 	and.w	r3, r3, #3
 8008ca0:	3301      	adds	r3, #1
 8008ca2:	005b      	lsls	r3, r3, #1
 8008ca4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8008ca6:	697a      	ldr	r2, [r7, #20]
 8008ca8:	683b      	ldr	r3, [r7, #0]
 8008caa:	fbb2 f3f3 	udiv	r3, r2, r3
 8008cae:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8008cb0:	69bb      	ldr	r3, [r7, #24]
}
 8008cb2:	4618      	mov	r0, r3
 8008cb4:	3724      	adds	r7, #36	@ 0x24
 8008cb6:	46bd      	mov	sp, r7
 8008cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cbc:	4770      	bx	lr
 8008cbe:	bf00      	nop
 8008cc0:	40021000 	.word	0x40021000
 8008cc4:	08012a3c 	.word	0x08012a3c
 8008cc8:	00f42400 	.word	0x00f42400
 8008ccc:	007a1200 	.word	0x007a1200

08008cd0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008cd0:	b480      	push	{r7}
 8008cd2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008cd4:	4b03      	ldr	r3, [pc, #12]	@ (8008ce4 <HAL_RCC_GetHCLKFreq+0x14>)
 8008cd6:	681b      	ldr	r3, [r3, #0]
}
 8008cd8:	4618      	mov	r0, r3
 8008cda:	46bd      	mov	sp, r7
 8008cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce0:	4770      	bx	lr
 8008ce2:	bf00      	nop
 8008ce4:	20000028 	.word	0x20000028

08008ce8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008ce8:	b580      	push	{r7, lr}
 8008cea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8008cec:	f7ff fff0 	bl	8008cd0 <HAL_RCC_GetHCLKFreq>
 8008cf0:	4602      	mov	r2, r0
 8008cf2:	4b06      	ldr	r3, [pc, #24]	@ (8008d0c <HAL_RCC_GetPCLK1Freq+0x24>)
 8008cf4:	689b      	ldr	r3, [r3, #8]
 8008cf6:	0a1b      	lsrs	r3, r3, #8
 8008cf8:	f003 0307 	and.w	r3, r3, #7
 8008cfc:	4904      	ldr	r1, [pc, #16]	@ (8008d10 <HAL_RCC_GetPCLK1Freq+0x28>)
 8008cfe:	5ccb      	ldrb	r3, [r1, r3]
 8008d00:	f003 031f 	and.w	r3, r3, #31
 8008d04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008d08:	4618      	mov	r0, r3
 8008d0a:	bd80      	pop	{r7, pc}
 8008d0c:	40021000 	.word	0x40021000
 8008d10:	08012a34 	.word	0x08012a34

08008d14 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008d14:	b580      	push	{r7, lr}
 8008d16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8008d18:	f7ff ffda 	bl	8008cd0 <HAL_RCC_GetHCLKFreq>
 8008d1c:	4602      	mov	r2, r0
 8008d1e:	4b06      	ldr	r3, [pc, #24]	@ (8008d38 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008d20:	689b      	ldr	r3, [r3, #8]
 8008d22:	0adb      	lsrs	r3, r3, #11
 8008d24:	f003 0307 	and.w	r3, r3, #7
 8008d28:	4904      	ldr	r1, [pc, #16]	@ (8008d3c <HAL_RCC_GetPCLK2Freq+0x28>)
 8008d2a:	5ccb      	ldrb	r3, [r1, r3]
 8008d2c:	f003 031f 	and.w	r3, r3, #31
 8008d30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008d34:	4618      	mov	r0, r3
 8008d36:	bd80      	pop	{r7, pc}
 8008d38:	40021000 	.word	0x40021000
 8008d3c:	08012a34 	.word	0x08012a34

08008d40 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8008d40:	b480      	push	{r7}
 8008d42:	b083      	sub	sp, #12
 8008d44:	af00      	add	r7, sp, #0
 8008d46:	6078      	str	r0, [r7, #4]
 8008d48:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	220f      	movs	r2, #15
 8008d4e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8008d50:	4b12      	ldr	r3, [pc, #72]	@ (8008d9c <HAL_RCC_GetClockConfig+0x5c>)
 8008d52:	689b      	ldr	r3, [r3, #8]
 8008d54:	f003 0203 	and.w	r2, r3, #3
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8008d5c:	4b0f      	ldr	r3, [pc, #60]	@ (8008d9c <HAL_RCC_GetClockConfig+0x5c>)
 8008d5e:	689b      	ldr	r3, [r3, #8]
 8008d60:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8008d68:	4b0c      	ldr	r3, [pc, #48]	@ (8008d9c <HAL_RCC_GetClockConfig+0x5c>)
 8008d6a:	689b      	ldr	r3, [r3, #8]
 8008d6c:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8008d74:	4b09      	ldr	r3, [pc, #36]	@ (8008d9c <HAL_RCC_GetClockConfig+0x5c>)
 8008d76:	689b      	ldr	r3, [r3, #8]
 8008d78:	08db      	lsrs	r3, r3, #3
 8008d7a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8008d82:	4b07      	ldr	r3, [pc, #28]	@ (8008da0 <HAL_RCC_GetClockConfig+0x60>)
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	f003 0207 	and.w	r2, r3, #7
 8008d8a:	683b      	ldr	r3, [r7, #0]
 8008d8c:	601a      	str	r2, [r3, #0]
}
 8008d8e:	bf00      	nop
 8008d90:	370c      	adds	r7, #12
 8008d92:	46bd      	mov	sp, r7
 8008d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d98:	4770      	bx	lr
 8008d9a:	bf00      	nop
 8008d9c:	40021000 	.word	0x40021000
 8008da0:	40022000 	.word	0x40022000

08008da4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8008da4:	b580      	push	{r7, lr}
 8008da6:	b086      	sub	sp, #24
 8008da8:	af00      	add	r7, sp, #0
 8008daa:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8008dac:	2300      	movs	r3, #0
 8008dae:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8008db0:	4b2a      	ldr	r3, [pc, #168]	@ (8008e5c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008db2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008db4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d003      	beq.n	8008dc4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8008dbc:	f7ff f984 	bl	80080c8 <HAL_PWREx_GetVoltageRange>
 8008dc0:	6178      	str	r0, [r7, #20]
 8008dc2:	e014      	b.n	8008dee <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8008dc4:	4b25      	ldr	r3, [pc, #148]	@ (8008e5c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008dc6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008dc8:	4a24      	ldr	r2, [pc, #144]	@ (8008e5c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008dca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008dce:	6593      	str	r3, [r2, #88]	@ 0x58
 8008dd0:	4b22      	ldr	r3, [pc, #136]	@ (8008e5c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008dd2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008dd4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008dd8:	60fb      	str	r3, [r7, #12]
 8008dda:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8008ddc:	f7ff f974 	bl	80080c8 <HAL_PWREx_GetVoltageRange>
 8008de0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8008de2:	4b1e      	ldr	r3, [pc, #120]	@ (8008e5c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008de4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008de6:	4a1d      	ldr	r2, [pc, #116]	@ (8008e5c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008de8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008dec:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8008dee:	697b      	ldr	r3, [r7, #20]
 8008df0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008df4:	d10b      	bne.n	8008e0e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	2b80      	cmp	r3, #128	@ 0x80
 8008dfa:	d919      	bls.n	8008e30 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	2ba0      	cmp	r3, #160	@ 0xa0
 8008e00:	d902      	bls.n	8008e08 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8008e02:	2302      	movs	r3, #2
 8008e04:	613b      	str	r3, [r7, #16]
 8008e06:	e013      	b.n	8008e30 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8008e08:	2301      	movs	r3, #1
 8008e0a:	613b      	str	r3, [r7, #16]
 8008e0c:	e010      	b.n	8008e30 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	2b80      	cmp	r3, #128	@ 0x80
 8008e12:	d902      	bls.n	8008e1a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8008e14:	2303      	movs	r3, #3
 8008e16:	613b      	str	r3, [r7, #16]
 8008e18:	e00a      	b.n	8008e30 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	2b80      	cmp	r3, #128	@ 0x80
 8008e1e:	d102      	bne.n	8008e26 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8008e20:	2302      	movs	r3, #2
 8008e22:	613b      	str	r3, [r7, #16]
 8008e24:	e004      	b.n	8008e30 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	2b70      	cmp	r3, #112	@ 0x70
 8008e2a:	d101      	bne.n	8008e30 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8008e2c:	2301      	movs	r3, #1
 8008e2e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8008e30:	4b0b      	ldr	r3, [pc, #44]	@ (8008e60 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	f023 0207 	bic.w	r2, r3, #7
 8008e38:	4909      	ldr	r1, [pc, #36]	@ (8008e60 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8008e3a:	693b      	ldr	r3, [r7, #16]
 8008e3c:	4313      	orrs	r3, r2
 8008e3e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8008e40:	4b07      	ldr	r3, [pc, #28]	@ (8008e60 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	f003 0307 	and.w	r3, r3, #7
 8008e48:	693a      	ldr	r2, [r7, #16]
 8008e4a:	429a      	cmp	r2, r3
 8008e4c:	d001      	beq.n	8008e52 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8008e4e:	2301      	movs	r3, #1
 8008e50:	e000      	b.n	8008e54 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8008e52:	2300      	movs	r3, #0
}
 8008e54:	4618      	mov	r0, r3
 8008e56:	3718      	adds	r7, #24
 8008e58:	46bd      	mov	sp, r7
 8008e5a:	bd80      	pop	{r7, pc}
 8008e5c:	40021000 	.word	0x40021000
 8008e60:	40022000 	.word	0x40022000

08008e64 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008e64:	b580      	push	{r7, lr}
 8008e66:	b086      	sub	sp, #24
 8008e68:	af00      	add	r7, sp, #0
 8008e6a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008e6c:	2300      	movs	r3, #0
 8008e6e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008e70:	2300      	movs	r3, #0
 8008e72:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d031      	beq.n	8008ee4 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008e84:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8008e88:	d01a      	beq.n	8008ec0 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8008e8a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8008e8e:	d814      	bhi.n	8008eba <HAL_RCCEx_PeriphCLKConfig+0x56>
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d009      	beq.n	8008ea8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8008e94:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008e98:	d10f      	bne.n	8008eba <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8008e9a:	4b5d      	ldr	r3, [pc, #372]	@ (8009010 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008e9c:	68db      	ldr	r3, [r3, #12]
 8008e9e:	4a5c      	ldr	r2, [pc, #368]	@ (8009010 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008ea0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008ea4:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8008ea6:	e00c      	b.n	8008ec2 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	3304      	adds	r3, #4
 8008eac:	2100      	movs	r1, #0
 8008eae:	4618      	mov	r0, r3
 8008eb0:	f000 fa44 	bl	800933c <RCCEx_PLLSAI1_Config>
 8008eb4:	4603      	mov	r3, r0
 8008eb6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8008eb8:	e003      	b.n	8008ec2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008eba:	2301      	movs	r3, #1
 8008ebc:	74fb      	strb	r3, [r7, #19]
      break;
 8008ebe:	e000      	b.n	8008ec2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8008ec0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008ec2:	7cfb      	ldrb	r3, [r7, #19]
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d10b      	bne.n	8008ee0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008ec8:	4b51      	ldr	r3, [pc, #324]	@ (8009010 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008eca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008ece:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008ed6:	494e      	ldr	r1, [pc, #312]	@ (8009010 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008ed8:	4313      	orrs	r3, r2
 8008eda:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8008ede:	e001      	b.n	8008ee4 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ee0:	7cfb      	ldrb	r3, [r7, #19]
 8008ee2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	f000 809e 	beq.w	800902e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008ef2:	2300      	movs	r3, #0
 8008ef4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8008ef6:	4b46      	ldr	r3, [pc, #280]	@ (8009010 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008ef8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008efa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d101      	bne.n	8008f06 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8008f02:	2301      	movs	r3, #1
 8008f04:	e000      	b.n	8008f08 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8008f06:	2300      	movs	r3, #0
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d00d      	beq.n	8008f28 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008f0c:	4b40      	ldr	r3, [pc, #256]	@ (8009010 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008f0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008f10:	4a3f      	ldr	r2, [pc, #252]	@ (8009010 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008f12:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008f16:	6593      	str	r3, [r2, #88]	@ 0x58
 8008f18:	4b3d      	ldr	r3, [pc, #244]	@ (8009010 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008f1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008f1c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008f20:	60bb      	str	r3, [r7, #8]
 8008f22:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008f24:	2301      	movs	r3, #1
 8008f26:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008f28:	4b3a      	ldr	r3, [pc, #232]	@ (8009014 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	4a39      	ldr	r2, [pc, #228]	@ (8009014 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8008f2e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008f32:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008f34:	f7fd f9da 	bl	80062ec <HAL_GetTick>
 8008f38:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8008f3a:	e009      	b.n	8008f50 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008f3c:	f7fd f9d6 	bl	80062ec <HAL_GetTick>
 8008f40:	4602      	mov	r2, r0
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	1ad3      	subs	r3, r2, r3
 8008f46:	2b02      	cmp	r3, #2
 8008f48:	d902      	bls.n	8008f50 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8008f4a:	2303      	movs	r3, #3
 8008f4c:	74fb      	strb	r3, [r7, #19]
        break;
 8008f4e:	e005      	b.n	8008f5c <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8008f50:	4b30      	ldr	r3, [pc, #192]	@ (8009014 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d0ef      	beq.n	8008f3c <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8008f5c:	7cfb      	ldrb	r3, [r7, #19]
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d15a      	bne.n	8009018 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8008f62:	4b2b      	ldr	r3, [pc, #172]	@ (8009010 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008f64:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008f68:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008f6c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8008f6e:	697b      	ldr	r3, [r7, #20]
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d01e      	beq.n	8008fb2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008f78:	697a      	ldr	r2, [r7, #20]
 8008f7a:	429a      	cmp	r2, r3
 8008f7c:	d019      	beq.n	8008fb2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8008f7e:	4b24      	ldr	r3, [pc, #144]	@ (8009010 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008f80:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008f84:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008f88:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008f8a:	4b21      	ldr	r3, [pc, #132]	@ (8009010 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008f8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008f90:	4a1f      	ldr	r2, [pc, #124]	@ (8009010 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008f92:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008f96:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008f9a:	4b1d      	ldr	r3, [pc, #116]	@ (8009010 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008f9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008fa0:	4a1b      	ldr	r2, [pc, #108]	@ (8009010 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008fa2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008fa6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8008faa:	4a19      	ldr	r2, [pc, #100]	@ (8009010 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008fac:	697b      	ldr	r3, [r7, #20]
 8008fae:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8008fb2:	697b      	ldr	r3, [r7, #20]
 8008fb4:	f003 0301 	and.w	r3, r3, #1
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d016      	beq.n	8008fea <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008fbc:	f7fd f996 	bl	80062ec <HAL_GetTick>
 8008fc0:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008fc2:	e00b      	b.n	8008fdc <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008fc4:	f7fd f992 	bl	80062ec <HAL_GetTick>
 8008fc8:	4602      	mov	r2, r0
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	1ad3      	subs	r3, r2, r3
 8008fce:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008fd2:	4293      	cmp	r3, r2
 8008fd4:	d902      	bls.n	8008fdc <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8008fd6:	2303      	movs	r3, #3
 8008fd8:	74fb      	strb	r3, [r7, #19]
            break;
 8008fda:	e006      	b.n	8008fea <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008fdc:	4b0c      	ldr	r3, [pc, #48]	@ (8009010 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008fde:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008fe2:	f003 0302 	and.w	r3, r3, #2
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d0ec      	beq.n	8008fc4 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8008fea:	7cfb      	ldrb	r3, [r7, #19]
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d10b      	bne.n	8009008 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008ff0:	4b07      	ldr	r3, [pc, #28]	@ (8009010 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008ff2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008ff6:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008ffe:	4904      	ldr	r1, [pc, #16]	@ (8009010 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8009000:	4313      	orrs	r3, r2
 8009002:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8009006:	e009      	b.n	800901c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009008:	7cfb      	ldrb	r3, [r7, #19]
 800900a:	74bb      	strb	r3, [r7, #18]
 800900c:	e006      	b.n	800901c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800900e:	bf00      	nop
 8009010:	40021000 	.word	0x40021000
 8009014:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009018:	7cfb      	ldrb	r3, [r7, #19]
 800901a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800901c:	7c7b      	ldrb	r3, [r7, #17]
 800901e:	2b01      	cmp	r3, #1
 8009020:	d105      	bne.n	800902e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009022:	4b9e      	ldr	r3, [pc, #632]	@ (800929c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8009024:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009026:	4a9d      	ldr	r2, [pc, #628]	@ (800929c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8009028:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800902c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	f003 0301 	and.w	r3, r3, #1
 8009036:	2b00      	cmp	r3, #0
 8009038:	d00a      	beq.n	8009050 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800903a:	4b98      	ldr	r3, [pc, #608]	@ (800929c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800903c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009040:	f023 0203 	bic.w	r2, r3, #3
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	6a1b      	ldr	r3, [r3, #32]
 8009048:	4994      	ldr	r1, [pc, #592]	@ (800929c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800904a:	4313      	orrs	r3, r2
 800904c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	f003 0302 	and.w	r3, r3, #2
 8009058:	2b00      	cmp	r3, #0
 800905a:	d00a      	beq.n	8009072 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800905c:	4b8f      	ldr	r3, [pc, #572]	@ (800929c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800905e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009062:	f023 020c 	bic.w	r2, r3, #12
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800906a:	498c      	ldr	r1, [pc, #560]	@ (800929c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800906c:	4313      	orrs	r3, r2
 800906e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	f003 0304 	and.w	r3, r3, #4
 800907a:	2b00      	cmp	r3, #0
 800907c:	d00a      	beq.n	8009094 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800907e:	4b87      	ldr	r3, [pc, #540]	@ (800929c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8009080:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009084:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800908c:	4983      	ldr	r1, [pc, #524]	@ (800929c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800908e:	4313      	orrs	r3, r2
 8009090:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	f003 0308 	and.w	r3, r3, #8
 800909c:	2b00      	cmp	r3, #0
 800909e:	d00a      	beq.n	80090b6 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80090a0:	4b7e      	ldr	r3, [pc, #504]	@ (800929c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80090a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80090a6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80090ae:	497b      	ldr	r1, [pc, #492]	@ (800929c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80090b0:	4313      	orrs	r3, r2
 80090b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	f003 0320 	and.w	r3, r3, #32
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d00a      	beq.n	80090d8 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80090c2:	4b76      	ldr	r3, [pc, #472]	@ (800929c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80090c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80090c8:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80090d0:	4972      	ldr	r1, [pc, #456]	@ (800929c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80090d2:	4313      	orrs	r3, r2
 80090d4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d00a      	beq.n	80090fa <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80090e4:	4b6d      	ldr	r3, [pc, #436]	@ (800929c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80090e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80090ea:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80090f2:	496a      	ldr	r1, [pc, #424]	@ (800929c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80090f4:	4313      	orrs	r3, r2
 80090f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009102:	2b00      	cmp	r3, #0
 8009104:	d00a      	beq.n	800911c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8009106:	4b65      	ldr	r3, [pc, #404]	@ (800929c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8009108:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800910c:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009114:	4961      	ldr	r1, [pc, #388]	@ (800929c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8009116:	4313      	orrs	r3, r2
 8009118:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009124:	2b00      	cmp	r3, #0
 8009126:	d00a      	beq.n	800913e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8009128:	4b5c      	ldr	r3, [pc, #368]	@ (800929c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800912a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800912e:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009136:	4959      	ldr	r1, [pc, #356]	@ (800929c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8009138:	4313      	orrs	r3, r2
 800913a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009146:	2b00      	cmp	r3, #0
 8009148:	d00a      	beq.n	8009160 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800914a:	4b54      	ldr	r3, [pc, #336]	@ (800929c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800914c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009150:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009158:	4950      	ldr	r1, [pc, #320]	@ (800929c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800915a:	4313      	orrs	r3, r2
 800915c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009168:	2b00      	cmp	r3, #0
 800916a:	d00a      	beq.n	8009182 <HAL_RCCEx_PeriphCLKConfig+0x31e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800916c:	4b4b      	ldr	r3, [pc, #300]	@ (800929c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800916e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009172:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800917a:	4948      	ldr	r1, [pc, #288]	@ (800929c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800917c:	4313      	orrs	r3, r2
 800917e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800918a:	2b00      	cmp	r3, #0
 800918c:	d00a      	beq.n	80091a4 <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800918e:	4b43      	ldr	r3, [pc, #268]	@ (800929c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8009190:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009194:	f023 0203 	bic.w	r2, r3, #3
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800919c:	493f      	ldr	r1, [pc, #252]	@ (800929c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800919e:	4313      	orrs	r3, r2
 80091a0:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d028      	beq.n	8009202 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80091b0:	4b3a      	ldr	r3, [pc, #232]	@ (800929c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80091b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80091b6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80091be:	4937      	ldr	r1, [pc, #220]	@ (800929c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80091c0:	4313      	orrs	r3, r2
 80091c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80091ca:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80091ce:	d106      	bne.n	80091de <HAL_RCCEx_PeriphCLKConfig+0x37a>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80091d0:	4b32      	ldr	r3, [pc, #200]	@ (800929c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80091d2:	68db      	ldr	r3, [r3, #12]
 80091d4:	4a31      	ldr	r2, [pc, #196]	@ (800929c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80091d6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80091da:	60d3      	str	r3, [r2, #12]
 80091dc:	e011      	b.n	8009202 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80091e2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80091e6:	d10c      	bne.n	8009202 <HAL_RCCEx_PeriphCLKConfig+0x39e>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	3304      	adds	r3, #4
 80091ec:	2101      	movs	r1, #1
 80091ee:	4618      	mov	r0, r3
 80091f0:	f000 f8a4 	bl	800933c <RCCEx_PLLSAI1_Config>
 80091f4:	4603      	mov	r3, r0
 80091f6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80091f8:	7cfb      	ldrb	r3, [r7, #19]
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d001      	beq.n	8009202 <HAL_RCCEx_PeriphCLKConfig+0x39e>
        {
          /* set overall return value */
          status = ret;
 80091fe:	7cfb      	ldrb	r3, [r7, #19]
 8009200:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800920a:	2b00      	cmp	r3, #0
 800920c:	d028      	beq.n	8009260 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800920e:	4b23      	ldr	r3, [pc, #140]	@ (800929c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8009210:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009214:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800921c:	491f      	ldr	r1, [pc, #124]	@ (800929c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800921e:	4313      	orrs	r3, r2
 8009220:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009228:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800922c:	d106      	bne.n	800923c <HAL_RCCEx_PeriphCLKConfig+0x3d8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800922e:	4b1b      	ldr	r3, [pc, #108]	@ (800929c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8009230:	68db      	ldr	r3, [r3, #12]
 8009232:	4a1a      	ldr	r2, [pc, #104]	@ (800929c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8009234:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009238:	60d3      	str	r3, [r2, #12]
 800923a:	e011      	b.n	8009260 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009240:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009244:	d10c      	bne.n	8009260 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	3304      	adds	r3, #4
 800924a:	2101      	movs	r1, #1
 800924c:	4618      	mov	r0, r3
 800924e:	f000 f875 	bl	800933c <RCCEx_PLLSAI1_Config>
 8009252:	4603      	mov	r3, r0
 8009254:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8009256:	7cfb      	ldrb	r3, [r7, #19]
 8009258:	2b00      	cmp	r3, #0
 800925a:	d001      	beq.n	8009260 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
      {
        /* set overall return value */
        status = ret;
 800925c:	7cfb      	ldrb	r3, [r7, #19]
 800925e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8009268:	2b00      	cmp	r3, #0
 800926a:	d02b      	beq.n	80092c4 <HAL_RCCEx_PeriphCLKConfig+0x460>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800926c:	4b0b      	ldr	r3, [pc, #44]	@ (800929c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800926e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009272:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800927a:	4908      	ldr	r1, [pc, #32]	@ (800929c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800927c:	4313      	orrs	r3, r2
 800927e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009286:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800928a:	d109      	bne.n	80092a0 <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800928c:	4b03      	ldr	r3, [pc, #12]	@ (800929c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800928e:	68db      	ldr	r3, [r3, #12]
 8009290:	4a02      	ldr	r2, [pc, #8]	@ (800929c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8009292:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009296:	60d3      	str	r3, [r2, #12]
 8009298:	e014      	b.n	80092c4 <HAL_RCCEx_PeriphCLKConfig+0x460>
 800929a:	bf00      	nop
 800929c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80092a4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80092a8:	d10c      	bne.n	80092c4 <HAL_RCCEx_PeriphCLKConfig+0x460>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	3304      	adds	r3, #4
 80092ae:	2101      	movs	r1, #1
 80092b0:	4618      	mov	r0, r3
 80092b2:	f000 f843 	bl	800933c <RCCEx_PLLSAI1_Config>
 80092b6:	4603      	mov	r3, r0
 80092b8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80092ba:	7cfb      	ldrb	r3, [r7, #19]
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d001      	beq.n	80092c4 <HAL_RCCEx_PeriphCLKConfig+0x460>
      {
        /* set overall return value */
        status = ret;
 80092c0:	7cfb      	ldrb	r3, [r7, #19]
 80092c2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d01c      	beq.n	800930a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80092d0:	4b19      	ldr	r3, [pc, #100]	@ (8009338 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 80092d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80092d6:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80092de:	4916      	ldr	r1, [pc, #88]	@ (8009338 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 80092e0:	4313      	orrs	r3, r2
 80092e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80092ea:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80092ee:	d10c      	bne.n	800930a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	3304      	adds	r3, #4
 80092f4:	2102      	movs	r1, #2
 80092f6:	4618      	mov	r0, r3
 80092f8:	f000 f820 	bl	800933c <RCCEx_PLLSAI1_Config>
 80092fc:	4603      	mov	r3, r0
 80092fe:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8009300:	7cfb      	ldrb	r3, [r7, #19]
 8009302:	2b00      	cmp	r3, #0
 8009304:	d001      	beq.n	800930a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
      {
        /* set overall return value */
        status = ret;
 8009306:	7cfb      	ldrb	r3, [r7, #19]
 8009308:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009312:	2b00      	cmp	r3, #0
 8009314:	d00a      	beq.n	800932c <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8009316:	4b08      	ldr	r3, [pc, #32]	@ (8009338 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8009318:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800931c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009324:	4904      	ldr	r1, [pc, #16]	@ (8009338 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8009326:	4313      	orrs	r3, r2
 8009328:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800932c:	7cbb      	ldrb	r3, [r7, #18]
}
 800932e:	4618      	mov	r0, r3
 8009330:	3718      	adds	r7, #24
 8009332:	46bd      	mov	sp, r7
 8009334:	bd80      	pop	{r7, pc}
 8009336:	bf00      	nop
 8009338:	40021000 	.word	0x40021000

0800933c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800933c:	b580      	push	{r7, lr}
 800933e:	b084      	sub	sp, #16
 8009340:	af00      	add	r7, sp, #0
 8009342:	6078      	str	r0, [r7, #4]
 8009344:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009346:	2300      	movs	r3, #0
 8009348:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800934a:	4b74      	ldr	r3, [pc, #464]	@ (800951c <RCCEx_PLLSAI1_Config+0x1e0>)
 800934c:	68db      	ldr	r3, [r3, #12]
 800934e:	f003 0303 	and.w	r3, r3, #3
 8009352:	2b00      	cmp	r3, #0
 8009354:	d018      	beq.n	8009388 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8009356:	4b71      	ldr	r3, [pc, #452]	@ (800951c <RCCEx_PLLSAI1_Config+0x1e0>)
 8009358:	68db      	ldr	r3, [r3, #12]
 800935a:	f003 0203 	and.w	r2, r3, #3
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	429a      	cmp	r2, r3
 8009364:	d10d      	bne.n	8009382 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	681b      	ldr	r3, [r3, #0]
       ||
 800936a:	2b00      	cmp	r3, #0
 800936c:	d009      	beq.n	8009382 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800936e:	4b6b      	ldr	r3, [pc, #428]	@ (800951c <RCCEx_PLLSAI1_Config+0x1e0>)
 8009370:	68db      	ldr	r3, [r3, #12]
 8009372:	091b      	lsrs	r3, r3, #4
 8009374:	f003 0307 	and.w	r3, r3, #7
 8009378:	1c5a      	adds	r2, r3, #1
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	685b      	ldr	r3, [r3, #4]
       ||
 800937e:	429a      	cmp	r2, r3
 8009380:	d047      	beq.n	8009412 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8009382:	2301      	movs	r3, #1
 8009384:	73fb      	strb	r3, [r7, #15]
 8009386:	e044      	b.n	8009412 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	2b03      	cmp	r3, #3
 800938e:	d018      	beq.n	80093c2 <RCCEx_PLLSAI1_Config+0x86>
 8009390:	2b03      	cmp	r3, #3
 8009392:	d825      	bhi.n	80093e0 <RCCEx_PLLSAI1_Config+0xa4>
 8009394:	2b01      	cmp	r3, #1
 8009396:	d002      	beq.n	800939e <RCCEx_PLLSAI1_Config+0x62>
 8009398:	2b02      	cmp	r3, #2
 800939a:	d009      	beq.n	80093b0 <RCCEx_PLLSAI1_Config+0x74>
 800939c:	e020      	b.n	80093e0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800939e:	4b5f      	ldr	r3, [pc, #380]	@ (800951c <RCCEx_PLLSAI1_Config+0x1e0>)
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	f003 0302 	and.w	r3, r3, #2
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d11d      	bne.n	80093e6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80093aa:	2301      	movs	r3, #1
 80093ac:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80093ae:	e01a      	b.n	80093e6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80093b0:	4b5a      	ldr	r3, [pc, #360]	@ (800951c <RCCEx_PLLSAI1_Config+0x1e0>)
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d116      	bne.n	80093ea <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80093bc:	2301      	movs	r3, #1
 80093be:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80093c0:	e013      	b.n	80093ea <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80093c2:	4b56      	ldr	r3, [pc, #344]	@ (800951c <RCCEx_PLLSAI1_Config+0x1e0>)
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d10f      	bne.n	80093ee <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80093ce:	4b53      	ldr	r3, [pc, #332]	@ (800951c <RCCEx_PLLSAI1_Config+0x1e0>)
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d109      	bne.n	80093ee <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80093da:	2301      	movs	r3, #1
 80093dc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80093de:	e006      	b.n	80093ee <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80093e0:	2301      	movs	r3, #1
 80093e2:	73fb      	strb	r3, [r7, #15]
      break;
 80093e4:	e004      	b.n	80093f0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80093e6:	bf00      	nop
 80093e8:	e002      	b.n	80093f0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80093ea:	bf00      	nop
 80093ec:	e000      	b.n	80093f0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80093ee:	bf00      	nop
    }

    if(status == HAL_OK)
 80093f0:	7bfb      	ldrb	r3, [r7, #15]
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d10d      	bne.n	8009412 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80093f6:	4b49      	ldr	r3, [pc, #292]	@ (800951c <RCCEx_PLLSAI1_Config+0x1e0>)
 80093f8:	68db      	ldr	r3, [r3, #12]
 80093fa:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	6819      	ldr	r1, [r3, #0]
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	685b      	ldr	r3, [r3, #4]
 8009406:	3b01      	subs	r3, #1
 8009408:	011b      	lsls	r3, r3, #4
 800940a:	430b      	orrs	r3, r1
 800940c:	4943      	ldr	r1, [pc, #268]	@ (800951c <RCCEx_PLLSAI1_Config+0x1e0>)
 800940e:	4313      	orrs	r3, r2
 8009410:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8009412:	7bfb      	ldrb	r3, [r7, #15]
 8009414:	2b00      	cmp	r3, #0
 8009416:	d17c      	bne.n	8009512 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8009418:	4b40      	ldr	r3, [pc, #256]	@ (800951c <RCCEx_PLLSAI1_Config+0x1e0>)
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	4a3f      	ldr	r2, [pc, #252]	@ (800951c <RCCEx_PLLSAI1_Config+0x1e0>)
 800941e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009422:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009424:	f7fc ff62 	bl	80062ec <HAL_GetTick>
 8009428:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800942a:	e009      	b.n	8009440 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800942c:	f7fc ff5e 	bl	80062ec <HAL_GetTick>
 8009430:	4602      	mov	r2, r0
 8009432:	68bb      	ldr	r3, [r7, #8]
 8009434:	1ad3      	subs	r3, r2, r3
 8009436:	2b02      	cmp	r3, #2
 8009438:	d902      	bls.n	8009440 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800943a:	2303      	movs	r3, #3
 800943c:	73fb      	strb	r3, [r7, #15]
        break;
 800943e:	e005      	b.n	800944c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8009440:	4b36      	ldr	r3, [pc, #216]	@ (800951c <RCCEx_PLLSAI1_Config+0x1e0>)
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009448:	2b00      	cmp	r3, #0
 800944a:	d1ef      	bne.n	800942c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800944c:	7bfb      	ldrb	r3, [r7, #15]
 800944e:	2b00      	cmp	r3, #0
 8009450:	d15f      	bne.n	8009512 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8009452:	683b      	ldr	r3, [r7, #0]
 8009454:	2b00      	cmp	r3, #0
 8009456:	d110      	bne.n	800947a <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8009458:	4b30      	ldr	r3, [pc, #192]	@ (800951c <RCCEx_PLLSAI1_Config+0x1e0>)
 800945a:	691b      	ldr	r3, [r3, #16]
 800945c:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8009460:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8009464:	687a      	ldr	r2, [r7, #4]
 8009466:	6892      	ldr	r2, [r2, #8]
 8009468:	0211      	lsls	r1, r2, #8
 800946a:	687a      	ldr	r2, [r7, #4]
 800946c:	68d2      	ldr	r2, [r2, #12]
 800946e:	06d2      	lsls	r2, r2, #27
 8009470:	430a      	orrs	r2, r1
 8009472:	492a      	ldr	r1, [pc, #168]	@ (800951c <RCCEx_PLLSAI1_Config+0x1e0>)
 8009474:	4313      	orrs	r3, r2
 8009476:	610b      	str	r3, [r1, #16]
 8009478:	e027      	b.n	80094ca <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800947a:	683b      	ldr	r3, [r7, #0]
 800947c:	2b01      	cmp	r3, #1
 800947e:	d112      	bne.n	80094a6 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8009480:	4b26      	ldr	r3, [pc, #152]	@ (800951c <RCCEx_PLLSAI1_Config+0x1e0>)
 8009482:	691b      	ldr	r3, [r3, #16]
 8009484:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8009488:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800948c:	687a      	ldr	r2, [r7, #4]
 800948e:	6892      	ldr	r2, [r2, #8]
 8009490:	0211      	lsls	r1, r2, #8
 8009492:	687a      	ldr	r2, [r7, #4]
 8009494:	6912      	ldr	r2, [r2, #16]
 8009496:	0852      	lsrs	r2, r2, #1
 8009498:	3a01      	subs	r2, #1
 800949a:	0552      	lsls	r2, r2, #21
 800949c:	430a      	orrs	r2, r1
 800949e:	491f      	ldr	r1, [pc, #124]	@ (800951c <RCCEx_PLLSAI1_Config+0x1e0>)
 80094a0:	4313      	orrs	r3, r2
 80094a2:	610b      	str	r3, [r1, #16]
 80094a4:	e011      	b.n	80094ca <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80094a6:	4b1d      	ldr	r3, [pc, #116]	@ (800951c <RCCEx_PLLSAI1_Config+0x1e0>)
 80094a8:	691b      	ldr	r3, [r3, #16]
 80094aa:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80094ae:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80094b2:	687a      	ldr	r2, [r7, #4]
 80094b4:	6892      	ldr	r2, [r2, #8]
 80094b6:	0211      	lsls	r1, r2, #8
 80094b8:	687a      	ldr	r2, [r7, #4]
 80094ba:	6952      	ldr	r2, [r2, #20]
 80094bc:	0852      	lsrs	r2, r2, #1
 80094be:	3a01      	subs	r2, #1
 80094c0:	0652      	lsls	r2, r2, #25
 80094c2:	430a      	orrs	r2, r1
 80094c4:	4915      	ldr	r1, [pc, #84]	@ (800951c <RCCEx_PLLSAI1_Config+0x1e0>)
 80094c6:	4313      	orrs	r3, r2
 80094c8:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80094ca:	4b14      	ldr	r3, [pc, #80]	@ (800951c <RCCEx_PLLSAI1_Config+0x1e0>)
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	4a13      	ldr	r2, [pc, #76]	@ (800951c <RCCEx_PLLSAI1_Config+0x1e0>)
 80094d0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80094d4:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80094d6:	f7fc ff09 	bl	80062ec <HAL_GetTick>
 80094da:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80094dc:	e009      	b.n	80094f2 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80094de:	f7fc ff05 	bl	80062ec <HAL_GetTick>
 80094e2:	4602      	mov	r2, r0
 80094e4:	68bb      	ldr	r3, [r7, #8]
 80094e6:	1ad3      	subs	r3, r2, r3
 80094e8:	2b02      	cmp	r3, #2
 80094ea:	d902      	bls.n	80094f2 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80094ec:	2303      	movs	r3, #3
 80094ee:	73fb      	strb	r3, [r7, #15]
          break;
 80094f0:	e005      	b.n	80094fe <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80094f2:	4b0a      	ldr	r3, [pc, #40]	@ (800951c <RCCEx_PLLSAI1_Config+0x1e0>)
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d0ef      	beq.n	80094de <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80094fe:	7bfb      	ldrb	r3, [r7, #15]
 8009500:	2b00      	cmp	r3, #0
 8009502:	d106      	bne.n	8009512 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8009504:	4b05      	ldr	r3, [pc, #20]	@ (800951c <RCCEx_PLLSAI1_Config+0x1e0>)
 8009506:	691a      	ldr	r2, [r3, #16]
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	699b      	ldr	r3, [r3, #24]
 800950c:	4903      	ldr	r1, [pc, #12]	@ (800951c <RCCEx_PLLSAI1_Config+0x1e0>)
 800950e:	4313      	orrs	r3, r2
 8009510:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8009512:	7bfb      	ldrb	r3, [r7, #15]
}
 8009514:	4618      	mov	r0, r3
 8009516:	3710      	adds	r7, #16
 8009518:	46bd      	mov	sp, r7
 800951a:	bd80      	pop	{r7, pc}
 800951c:	40021000 	.word	0x40021000

08009520 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009520:	b580      	push	{r7, lr}
 8009522:	b084      	sub	sp, #16
 8009524:	af00      	add	r7, sp, #0
 8009526:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	2b00      	cmp	r3, #0
 800952c:	d101      	bne.n	8009532 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800952e:	2301      	movs	r3, #1
 8009530:	e095      	b.n	800965e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009536:	2b00      	cmp	r3, #0
 8009538:	d108      	bne.n	800954c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	685b      	ldr	r3, [r3, #4]
 800953e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009542:	d009      	beq.n	8009558 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	2200      	movs	r2, #0
 8009548:	61da      	str	r2, [r3, #28]
 800954a:	e005      	b.n	8009558 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	2200      	movs	r2, #0
 8009550:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	2200      	movs	r2, #0
 8009556:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	2200      	movs	r2, #0
 800955c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8009564:	b2db      	uxtb	r3, r3
 8009566:	2b00      	cmp	r3, #0
 8009568:	d106      	bne.n	8009578 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	2200      	movs	r2, #0
 800956e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009572:	6878      	ldr	r0, [r7, #4]
 8009574:	f7fb fef0 	bl	8005358 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	2202      	movs	r2, #2
 800957c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	681a      	ldr	r2, [r3, #0]
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800958e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	68db      	ldr	r3, [r3, #12]
 8009594:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8009598:	d902      	bls.n	80095a0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800959a:	2300      	movs	r3, #0
 800959c:	60fb      	str	r3, [r7, #12]
 800959e:	e002      	b.n	80095a6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80095a0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80095a4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	68db      	ldr	r3, [r3, #12]
 80095aa:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80095ae:	d007      	beq.n	80095c0 <HAL_SPI_Init+0xa0>
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	68db      	ldr	r3, [r3, #12]
 80095b4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80095b8:	d002      	beq.n	80095c0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	2200      	movs	r2, #0
 80095be:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	685b      	ldr	r3, [r3, #4]
 80095c4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	689b      	ldr	r3, [r3, #8]
 80095cc:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80095d0:	431a      	orrs	r2, r3
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	691b      	ldr	r3, [r3, #16]
 80095d6:	f003 0302 	and.w	r3, r3, #2
 80095da:	431a      	orrs	r2, r3
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	695b      	ldr	r3, [r3, #20]
 80095e0:	f003 0301 	and.w	r3, r3, #1
 80095e4:	431a      	orrs	r2, r3
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	699b      	ldr	r3, [r3, #24]
 80095ea:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80095ee:	431a      	orrs	r2, r3
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	69db      	ldr	r3, [r3, #28]
 80095f4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80095f8:	431a      	orrs	r2, r3
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	6a1b      	ldr	r3, [r3, #32]
 80095fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009602:	ea42 0103 	orr.w	r1, r2, r3
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800960a:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	430a      	orrs	r2, r1
 8009614:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	699b      	ldr	r3, [r3, #24]
 800961a:	0c1b      	lsrs	r3, r3, #16
 800961c:	f003 0204 	and.w	r2, r3, #4
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009624:	f003 0310 	and.w	r3, r3, #16
 8009628:	431a      	orrs	r2, r3
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800962e:	f003 0308 	and.w	r3, r3, #8
 8009632:	431a      	orrs	r2, r3
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	68db      	ldr	r3, [r3, #12]
 8009638:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800963c:	ea42 0103 	orr.w	r1, r2, r3
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	430a      	orrs	r2, r1
 800964c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	2200      	movs	r2, #0
 8009652:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	2201      	movs	r2, #1
 8009658:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800965c:	2300      	movs	r3, #0
}
 800965e:	4618      	mov	r0, r3
 8009660:	3710      	adds	r7, #16
 8009662:	46bd      	mov	sp, r7
 8009664:	bd80      	pop	{r7, pc}

08009666 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009666:	b580      	push	{r7, lr}
 8009668:	b088      	sub	sp, #32
 800966a:	af00      	add	r7, sp, #0
 800966c:	60f8      	str	r0, [r7, #12]
 800966e:	60b9      	str	r1, [r7, #8]
 8009670:	603b      	str	r3, [r7, #0]
 8009672:	4613      	mov	r3, r2
 8009674:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009676:	2300      	movs	r3, #0
 8009678:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8009680:	2b01      	cmp	r3, #1
 8009682:	d101      	bne.n	8009688 <HAL_SPI_Transmit+0x22>
 8009684:	2302      	movs	r3, #2
 8009686:	e158      	b.n	800993a <HAL_SPI_Transmit+0x2d4>
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	2201      	movs	r2, #1
 800968c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009690:	f7fc fe2c 	bl	80062ec <HAL_GetTick>
 8009694:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8009696:	88fb      	ldrh	r3, [r7, #6]
 8009698:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80096a0:	b2db      	uxtb	r3, r3
 80096a2:	2b01      	cmp	r3, #1
 80096a4:	d002      	beq.n	80096ac <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80096a6:	2302      	movs	r3, #2
 80096a8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80096aa:	e13d      	b.n	8009928 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 80096ac:	68bb      	ldr	r3, [r7, #8]
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d002      	beq.n	80096b8 <HAL_SPI_Transmit+0x52>
 80096b2:	88fb      	ldrh	r3, [r7, #6]
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d102      	bne.n	80096be <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80096b8:	2301      	movs	r3, #1
 80096ba:	77fb      	strb	r3, [r7, #31]
    goto error;
 80096bc:	e134      	b.n	8009928 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	2203      	movs	r2, #3
 80096c2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	2200      	movs	r2, #0
 80096ca:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	68ba      	ldr	r2, [r7, #8]
 80096d0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	88fa      	ldrh	r2, [r7, #6]
 80096d6:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	88fa      	ldrh	r2, [r7, #6]
 80096dc:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	2200      	movs	r2, #0
 80096e2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	2200      	movs	r2, #0
 80096e8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	2200      	movs	r2, #0
 80096f0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	2200      	movs	r2, #0
 80096f8:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	2200      	movs	r2, #0
 80096fe:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	689b      	ldr	r3, [r3, #8]
 8009704:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009708:	d10f      	bne.n	800972a <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	681a      	ldr	r2, [r3, #0]
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009718:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	681a      	ldr	r2, [r3, #0]
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009728:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009734:	2b40      	cmp	r3, #64	@ 0x40
 8009736:	d007      	beq.n	8009748 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	681a      	ldr	r2, [r3, #0]
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009746:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	68db      	ldr	r3, [r3, #12]
 800974c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8009750:	d94b      	bls.n	80097ea <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	685b      	ldr	r3, [r3, #4]
 8009756:	2b00      	cmp	r3, #0
 8009758:	d002      	beq.n	8009760 <HAL_SPI_Transmit+0xfa>
 800975a:	8afb      	ldrh	r3, [r7, #22]
 800975c:	2b01      	cmp	r3, #1
 800975e:	d13e      	bne.n	80097de <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009764:	881a      	ldrh	r2, [r3, #0]
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009770:	1c9a      	adds	r2, r3, #2
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800977a:	b29b      	uxth	r3, r3
 800977c:	3b01      	subs	r3, #1
 800977e:	b29a      	uxth	r2, r3
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8009784:	e02b      	b.n	80097de <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	689b      	ldr	r3, [r3, #8]
 800978c:	f003 0302 	and.w	r3, r3, #2
 8009790:	2b02      	cmp	r3, #2
 8009792:	d112      	bne.n	80097ba <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009798:	881a      	ldrh	r2, [r3, #0]
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80097a4:	1c9a      	adds	r2, r3, #2
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80097ae:	b29b      	uxth	r3, r3
 80097b0:	3b01      	subs	r3, #1
 80097b2:	b29a      	uxth	r2, r3
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80097b8:	e011      	b.n	80097de <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80097ba:	f7fc fd97 	bl	80062ec <HAL_GetTick>
 80097be:	4602      	mov	r2, r0
 80097c0:	69bb      	ldr	r3, [r7, #24]
 80097c2:	1ad3      	subs	r3, r2, r3
 80097c4:	683a      	ldr	r2, [r7, #0]
 80097c6:	429a      	cmp	r2, r3
 80097c8:	d803      	bhi.n	80097d2 <HAL_SPI_Transmit+0x16c>
 80097ca:	683b      	ldr	r3, [r7, #0]
 80097cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80097d0:	d102      	bne.n	80097d8 <HAL_SPI_Transmit+0x172>
 80097d2:	683b      	ldr	r3, [r7, #0]
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d102      	bne.n	80097de <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 80097d8:	2303      	movs	r3, #3
 80097da:	77fb      	strb	r3, [r7, #31]
          goto error;
 80097dc:	e0a4      	b.n	8009928 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80097e2:	b29b      	uxth	r3, r3
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d1ce      	bne.n	8009786 <HAL_SPI_Transmit+0x120>
 80097e8:	e07c      	b.n	80098e4 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	685b      	ldr	r3, [r3, #4]
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d002      	beq.n	80097f8 <HAL_SPI_Transmit+0x192>
 80097f2:	8afb      	ldrh	r3, [r7, #22]
 80097f4:	2b01      	cmp	r3, #1
 80097f6:	d170      	bne.n	80098da <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80097fc:	b29b      	uxth	r3, r3
 80097fe:	2b01      	cmp	r3, #1
 8009800:	d912      	bls.n	8009828 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009806:	881a      	ldrh	r2, [r3, #0]
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009812:	1c9a      	adds	r2, r3, #2
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800981c:	b29b      	uxth	r3, r3
 800981e:	3b02      	subs	r3, #2
 8009820:	b29a      	uxth	r2, r3
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8009826:	e058      	b.n	80098da <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	330c      	adds	r3, #12
 8009832:	7812      	ldrb	r2, [r2, #0]
 8009834:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800983a:	1c5a      	adds	r2, r3, #1
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009844:	b29b      	uxth	r3, r3
 8009846:	3b01      	subs	r3, #1
 8009848:	b29a      	uxth	r2, r3
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800984e:	e044      	b.n	80098da <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	689b      	ldr	r3, [r3, #8]
 8009856:	f003 0302 	and.w	r3, r3, #2
 800985a:	2b02      	cmp	r3, #2
 800985c:	d12b      	bne.n	80098b6 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009862:	b29b      	uxth	r3, r3
 8009864:	2b01      	cmp	r3, #1
 8009866:	d912      	bls.n	800988e <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800986c:	881a      	ldrh	r2, [r3, #0]
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009878:	1c9a      	adds	r2, r3, #2
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009882:	b29b      	uxth	r3, r3
 8009884:	3b02      	subs	r3, #2
 8009886:	b29a      	uxth	r2, r3
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800988c:	e025      	b.n	80098da <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	330c      	adds	r3, #12
 8009898:	7812      	ldrb	r2, [r2, #0]
 800989a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80098a0:	1c5a      	adds	r2, r3, #1
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80098aa:	b29b      	uxth	r3, r3
 80098ac:	3b01      	subs	r3, #1
 80098ae:	b29a      	uxth	r2, r3
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80098b4:	e011      	b.n	80098da <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80098b6:	f7fc fd19 	bl	80062ec <HAL_GetTick>
 80098ba:	4602      	mov	r2, r0
 80098bc:	69bb      	ldr	r3, [r7, #24]
 80098be:	1ad3      	subs	r3, r2, r3
 80098c0:	683a      	ldr	r2, [r7, #0]
 80098c2:	429a      	cmp	r2, r3
 80098c4:	d803      	bhi.n	80098ce <HAL_SPI_Transmit+0x268>
 80098c6:	683b      	ldr	r3, [r7, #0]
 80098c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80098cc:	d102      	bne.n	80098d4 <HAL_SPI_Transmit+0x26e>
 80098ce:	683b      	ldr	r3, [r7, #0]
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d102      	bne.n	80098da <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 80098d4:	2303      	movs	r3, #3
 80098d6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80098d8:	e026      	b.n	8009928 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80098de:	b29b      	uxth	r3, r3
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d1b5      	bne.n	8009850 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80098e4:	69ba      	ldr	r2, [r7, #24]
 80098e6:	6839      	ldr	r1, [r7, #0]
 80098e8:	68f8      	ldr	r0, [r7, #12]
 80098ea:	f000 fce3 	bl	800a2b4 <SPI_EndRxTxTransaction>
 80098ee:	4603      	mov	r3, r0
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d002      	beq.n	80098fa <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	2220      	movs	r2, #32
 80098f8:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	689b      	ldr	r3, [r3, #8]
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d10a      	bne.n	8009918 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009902:	2300      	movs	r3, #0
 8009904:	613b      	str	r3, [r7, #16]
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	68db      	ldr	r3, [r3, #12]
 800990c:	613b      	str	r3, [r7, #16]
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	689b      	ldr	r3, [r3, #8]
 8009914:	613b      	str	r3, [r7, #16]
 8009916:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800991c:	2b00      	cmp	r3, #0
 800991e:	d002      	beq.n	8009926 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8009920:	2301      	movs	r3, #1
 8009922:	77fb      	strb	r3, [r7, #31]
 8009924:	e000      	b.n	8009928 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8009926:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	2201      	movs	r2, #1
 800992c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	2200      	movs	r2, #0
 8009934:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8009938:	7ffb      	ldrb	r3, [r7, #31]
}
 800993a:	4618      	mov	r0, r3
 800993c:	3720      	adds	r7, #32
 800993e:	46bd      	mov	sp, r7
 8009940:	bd80      	pop	{r7, pc}

08009942 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009942:	b580      	push	{r7, lr}
 8009944:	b088      	sub	sp, #32
 8009946:	af02      	add	r7, sp, #8
 8009948:	60f8      	str	r0, [r7, #12]
 800994a:	60b9      	str	r1, [r7, #8]
 800994c:	603b      	str	r3, [r7, #0]
 800994e:	4613      	mov	r3, r2
 8009950:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009952:	2300      	movs	r3, #0
 8009954:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	685b      	ldr	r3, [r3, #4]
 800995a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800995e:	d112      	bne.n	8009986 <HAL_SPI_Receive+0x44>
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	689b      	ldr	r3, [r3, #8]
 8009964:	2b00      	cmp	r3, #0
 8009966:	d10e      	bne.n	8009986 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	2204      	movs	r2, #4
 800996c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8009970:	88fa      	ldrh	r2, [r7, #6]
 8009972:	683b      	ldr	r3, [r7, #0]
 8009974:	9300      	str	r3, [sp, #0]
 8009976:	4613      	mov	r3, r2
 8009978:	68ba      	ldr	r2, [r7, #8]
 800997a:	68b9      	ldr	r1, [r7, #8]
 800997c:	68f8      	ldr	r0, [r7, #12]
 800997e:	f000 f910 	bl	8009ba2 <HAL_SPI_TransmitReceive>
 8009982:	4603      	mov	r3, r0
 8009984:	e109      	b.n	8009b9a <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800998c:	2b01      	cmp	r3, #1
 800998e:	d101      	bne.n	8009994 <HAL_SPI_Receive+0x52>
 8009990:	2302      	movs	r3, #2
 8009992:	e102      	b.n	8009b9a <HAL_SPI_Receive+0x258>
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	2201      	movs	r2, #1
 8009998:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800999c:	f7fc fca6 	bl	80062ec <HAL_GetTick>
 80099a0:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80099a8:	b2db      	uxtb	r3, r3
 80099aa:	2b01      	cmp	r3, #1
 80099ac:	d002      	beq.n	80099b4 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80099ae:	2302      	movs	r3, #2
 80099b0:	75fb      	strb	r3, [r7, #23]
    goto error;
 80099b2:	e0e9      	b.n	8009b88 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 80099b4:	68bb      	ldr	r3, [r7, #8]
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d002      	beq.n	80099c0 <HAL_SPI_Receive+0x7e>
 80099ba:	88fb      	ldrh	r3, [r7, #6]
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d102      	bne.n	80099c6 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80099c0:	2301      	movs	r3, #1
 80099c2:	75fb      	strb	r3, [r7, #23]
    goto error;
 80099c4:	e0e0      	b.n	8009b88 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	2204      	movs	r2, #4
 80099ca:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	2200      	movs	r2, #0
 80099d2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	68ba      	ldr	r2, [r7, #8]
 80099d8:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	88fa      	ldrh	r2, [r7, #6]
 80099de:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	88fa      	ldrh	r2, [r7, #6]
 80099e6:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	2200      	movs	r2, #0
 80099ee:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	2200      	movs	r2, #0
 80099f4:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	2200      	movs	r2, #0
 80099fa:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	2200      	movs	r2, #0
 8009a00:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	2200      	movs	r2, #0
 8009a06:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	68db      	ldr	r3, [r3, #12]
 8009a0c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8009a10:	d908      	bls.n	8009a24 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	685a      	ldr	r2, [r3, #4]
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8009a20:	605a      	str	r2, [r3, #4]
 8009a22:	e007      	b.n	8009a34 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	685a      	ldr	r2, [r3, #4]
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8009a32:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	689b      	ldr	r3, [r3, #8]
 8009a38:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009a3c:	d10f      	bne.n	8009a5e <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	681a      	ldr	r2, [r3, #0]
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009a4c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	681a      	ldr	r2, [r3, #0]
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8009a5c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009a68:	2b40      	cmp	r3, #64	@ 0x40
 8009a6a:	d007      	beq.n	8009a7c <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	681a      	ldr	r2, [r3, #0]
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009a7a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	68db      	ldr	r3, [r3, #12]
 8009a80:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8009a84:	d867      	bhi.n	8009b56 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8009a86:	e030      	b.n	8009aea <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	689b      	ldr	r3, [r3, #8]
 8009a8e:	f003 0301 	and.w	r3, r3, #1
 8009a92:	2b01      	cmp	r3, #1
 8009a94:	d117      	bne.n	8009ac6 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	f103 020c 	add.w	r2, r3, #12
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009aa2:	7812      	ldrb	r2, [r2, #0]
 8009aa4:	b2d2      	uxtb	r2, r2
 8009aa6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009aac:	1c5a      	adds	r2, r3, #1
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009ab8:	b29b      	uxth	r3, r3
 8009aba:	3b01      	subs	r3, #1
 8009abc:	b29a      	uxth	r2, r3
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8009ac4:	e011      	b.n	8009aea <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009ac6:	f7fc fc11 	bl	80062ec <HAL_GetTick>
 8009aca:	4602      	mov	r2, r0
 8009acc:	693b      	ldr	r3, [r7, #16]
 8009ace:	1ad3      	subs	r3, r2, r3
 8009ad0:	683a      	ldr	r2, [r7, #0]
 8009ad2:	429a      	cmp	r2, r3
 8009ad4:	d803      	bhi.n	8009ade <HAL_SPI_Receive+0x19c>
 8009ad6:	683b      	ldr	r3, [r7, #0]
 8009ad8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009adc:	d102      	bne.n	8009ae4 <HAL_SPI_Receive+0x1a2>
 8009ade:	683b      	ldr	r3, [r7, #0]
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d102      	bne.n	8009aea <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8009ae4:	2303      	movs	r3, #3
 8009ae6:	75fb      	strb	r3, [r7, #23]
          goto error;
 8009ae8:	e04e      	b.n	8009b88 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009af0:	b29b      	uxth	r3, r3
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d1c8      	bne.n	8009a88 <HAL_SPI_Receive+0x146>
 8009af6:	e034      	b.n	8009b62 <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	689b      	ldr	r3, [r3, #8]
 8009afe:	f003 0301 	and.w	r3, r3, #1
 8009b02:	2b01      	cmp	r3, #1
 8009b04:	d115      	bne.n	8009b32 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	68da      	ldr	r2, [r3, #12]
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009b10:	b292      	uxth	r2, r2
 8009b12:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009b18:	1c9a      	adds	r2, r3, #2
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009b24:	b29b      	uxth	r3, r3
 8009b26:	3b01      	subs	r3, #1
 8009b28:	b29a      	uxth	r2, r3
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8009b30:	e011      	b.n	8009b56 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009b32:	f7fc fbdb 	bl	80062ec <HAL_GetTick>
 8009b36:	4602      	mov	r2, r0
 8009b38:	693b      	ldr	r3, [r7, #16]
 8009b3a:	1ad3      	subs	r3, r2, r3
 8009b3c:	683a      	ldr	r2, [r7, #0]
 8009b3e:	429a      	cmp	r2, r3
 8009b40:	d803      	bhi.n	8009b4a <HAL_SPI_Receive+0x208>
 8009b42:	683b      	ldr	r3, [r7, #0]
 8009b44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b48:	d102      	bne.n	8009b50 <HAL_SPI_Receive+0x20e>
 8009b4a:	683b      	ldr	r3, [r7, #0]
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d102      	bne.n	8009b56 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8009b50:	2303      	movs	r3, #3
 8009b52:	75fb      	strb	r3, [r7, #23]
          goto error;
 8009b54:	e018      	b.n	8009b88 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009b5c:	b29b      	uxth	r3, r3
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d1ca      	bne.n	8009af8 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009b62:	693a      	ldr	r2, [r7, #16]
 8009b64:	6839      	ldr	r1, [r7, #0]
 8009b66:	68f8      	ldr	r0, [r7, #12]
 8009b68:	f000 fb4c 	bl	800a204 <SPI_EndRxTransaction>
 8009b6c:	4603      	mov	r3, r0
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d002      	beq.n	8009b78 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	2220      	movs	r2, #32
 8009b76:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d002      	beq.n	8009b86 <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8009b80:	2301      	movs	r3, #1
 8009b82:	75fb      	strb	r3, [r7, #23]
 8009b84:	e000      	b.n	8009b88 <HAL_SPI_Receive+0x246>
  }

error :
 8009b86:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	2201      	movs	r2, #1
 8009b8c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  __HAL_UNLOCK(hspi);
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	2200      	movs	r2, #0
 8009b94:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8009b98:	7dfb      	ldrb	r3, [r7, #23]
}
 8009b9a:	4618      	mov	r0, r3
 8009b9c:	3718      	adds	r7, #24
 8009b9e:	46bd      	mov	sp, r7
 8009ba0:	bd80      	pop	{r7, pc}

08009ba2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8009ba2:	b580      	push	{r7, lr}
 8009ba4:	b08a      	sub	sp, #40	@ 0x28
 8009ba6:	af00      	add	r7, sp, #0
 8009ba8:	60f8      	str	r0, [r7, #12]
 8009baa:	60b9      	str	r1, [r7, #8]
 8009bac:	607a      	str	r2, [r7, #4]
 8009bae:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8009bb0:	2301      	movs	r3, #1
 8009bb2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8009bb4:	2300      	movs	r3, #0
 8009bb6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8009bc0:	2b01      	cmp	r3, #1
 8009bc2:	d101      	bne.n	8009bc8 <HAL_SPI_TransmitReceive+0x26>
 8009bc4:	2302      	movs	r3, #2
 8009bc6:	e1fb      	b.n	8009fc0 <HAL_SPI_TransmitReceive+0x41e>
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	2201      	movs	r2, #1
 8009bcc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009bd0:	f7fc fb8c 	bl	80062ec <HAL_GetTick>
 8009bd4:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8009bdc:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	685b      	ldr	r3, [r3, #4]
 8009be2:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8009be4:	887b      	ldrh	r3, [r7, #2]
 8009be6:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8009be8:	887b      	ldrh	r3, [r7, #2]
 8009bea:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8009bec:	7efb      	ldrb	r3, [r7, #27]
 8009bee:	2b01      	cmp	r3, #1
 8009bf0:	d00e      	beq.n	8009c10 <HAL_SPI_TransmitReceive+0x6e>
 8009bf2:	697b      	ldr	r3, [r7, #20]
 8009bf4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009bf8:	d106      	bne.n	8009c08 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	689b      	ldr	r3, [r3, #8]
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d102      	bne.n	8009c08 <HAL_SPI_TransmitReceive+0x66>
 8009c02:	7efb      	ldrb	r3, [r7, #27]
 8009c04:	2b04      	cmp	r3, #4
 8009c06:	d003      	beq.n	8009c10 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8009c08:	2302      	movs	r3, #2
 8009c0a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8009c0e:	e1cd      	b.n	8009fac <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8009c10:	68bb      	ldr	r3, [r7, #8]
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d005      	beq.n	8009c22 <HAL_SPI_TransmitReceive+0x80>
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d002      	beq.n	8009c22 <HAL_SPI_TransmitReceive+0x80>
 8009c1c:	887b      	ldrh	r3, [r7, #2]
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d103      	bne.n	8009c2a <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8009c22:	2301      	movs	r3, #1
 8009c24:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8009c28:	e1c0      	b.n	8009fac <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8009c30:	b2db      	uxtb	r3, r3
 8009c32:	2b04      	cmp	r3, #4
 8009c34:	d003      	beq.n	8009c3e <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	2205      	movs	r2, #5
 8009c3a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	2200      	movs	r2, #0
 8009c42:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	687a      	ldr	r2, [r7, #4]
 8009c48:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	887a      	ldrh	r2, [r7, #2]
 8009c4e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	887a      	ldrh	r2, [r7, #2]
 8009c56:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	68ba      	ldr	r2, [r7, #8]
 8009c5e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	887a      	ldrh	r2, [r7, #2]
 8009c64:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	887a      	ldrh	r2, [r7, #2]
 8009c6a:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	2200      	movs	r2, #0
 8009c70:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	2200      	movs	r2, #0
 8009c76:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	68db      	ldr	r3, [r3, #12]
 8009c7c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8009c80:	d802      	bhi.n	8009c88 <HAL_SPI_TransmitReceive+0xe6>
 8009c82:	8a3b      	ldrh	r3, [r7, #16]
 8009c84:	2b01      	cmp	r3, #1
 8009c86:	d908      	bls.n	8009c9a <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	685a      	ldr	r2, [r3, #4]
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8009c96:	605a      	str	r2, [r3, #4]
 8009c98:	e007      	b.n	8009caa <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	685a      	ldr	r2, [r3, #4]
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8009ca8:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009cb4:	2b40      	cmp	r3, #64	@ 0x40
 8009cb6:	d007      	beq.n	8009cc8 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	681a      	ldr	r2, [r3, #0]
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009cc6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	68db      	ldr	r3, [r3, #12]
 8009ccc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8009cd0:	d97c      	bls.n	8009dcc <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	685b      	ldr	r3, [r3, #4]
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d002      	beq.n	8009ce0 <HAL_SPI_TransmitReceive+0x13e>
 8009cda:	8a7b      	ldrh	r3, [r7, #18]
 8009cdc:	2b01      	cmp	r3, #1
 8009cde:	d169      	bne.n	8009db4 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009ce4:	881a      	ldrh	r2, [r3, #0]
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009cf0:	1c9a      	adds	r2, r3, #2
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009cfa:	b29b      	uxth	r3, r3
 8009cfc:	3b01      	subs	r3, #1
 8009cfe:	b29a      	uxth	r2, r3
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009d04:	e056      	b.n	8009db4 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	689b      	ldr	r3, [r3, #8]
 8009d0c:	f003 0302 	and.w	r3, r3, #2
 8009d10:	2b02      	cmp	r3, #2
 8009d12:	d11b      	bne.n	8009d4c <HAL_SPI_TransmitReceive+0x1aa>
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009d18:	b29b      	uxth	r3, r3
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d016      	beq.n	8009d4c <HAL_SPI_TransmitReceive+0x1aa>
 8009d1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d20:	2b01      	cmp	r3, #1
 8009d22:	d113      	bne.n	8009d4c <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009d28:	881a      	ldrh	r2, [r3, #0]
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009d34:	1c9a      	adds	r2, r3, #2
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009d3e:	b29b      	uxth	r3, r3
 8009d40:	3b01      	subs	r3, #1
 8009d42:	b29a      	uxth	r2, r3
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009d48:	2300      	movs	r3, #0
 8009d4a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009d4c:	68fb      	ldr	r3, [r7, #12]
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	689b      	ldr	r3, [r3, #8]
 8009d52:	f003 0301 	and.w	r3, r3, #1
 8009d56:	2b01      	cmp	r3, #1
 8009d58:	d11c      	bne.n	8009d94 <HAL_SPI_TransmitReceive+0x1f2>
 8009d5a:	68fb      	ldr	r3, [r7, #12]
 8009d5c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009d60:	b29b      	uxth	r3, r3
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d016      	beq.n	8009d94 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	68da      	ldr	r2, [r3, #12]
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009d70:	b292      	uxth	r2, r2
 8009d72:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009d78:	1c9a      	adds	r2, r3, #2
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009d84:	b29b      	uxth	r3, r3
 8009d86:	3b01      	subs	r3, #1
 8009d88:	b29a      	uxth	r2, r3
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009d90:	2301      	movs	r3, #1
 8009d92:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8009d94:	f7fc faaa 	bl	80062ec <HAL_GetTick>
 8009d98:	4602      	mov	r2, r0
 8009d9a:	69fb      	ldr	r3, [r7, #28]
 8009d9c:	1ad3      	subs	r3, r2, r3
 8009d9e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009da0:	429a      	cmp	r2, r3
 8009da2:	d807      	bhi.n	8009db4 <HAL_SPI_TransmitReceive+0x212>
 8009da4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009da6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009daa:	d003      	beq.n	8009db4 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8009dac:	2303      	movs	r3, #3
 8009dae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        goto error;
 8009db2:	e0fb      	b.n	8009fac <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009db8:	b29b      	uxth	r3, r3
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d1a3      	bne.n	8009d06 <HAL_SPI_TransmitReceive+0x164>
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009dc4:	b29b      	uxth	r3, r3
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d19d      	bne.n	8009d06 <HAL_SPI_TransmitReceive+0x164>
 8009dca:	e0df      	b.n	8009f8c <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	685b      	ldr	r3, [r3, #4]
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d003      	beq.n	8009ddc <HAL_SPI_TransmitReceive+0x23a>
 8009dd4:	8a7b      	ldrh	r3, [r7, #18]
 8009dd6:	2b01      	cmp	r3, #1
 8009dd8:	f040 80cb 	bne.w	8009f72 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009de0:	b29b      	uxth	r3, r3
 8009de2:	2b01      	cmp	r3, #1
 8009de4:	d912      	bls.n	8009e0c <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009dea:	881a      	ldrh	r2, [r3, #0]
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009df6:	1c9a      	adds	r2, r3, #2
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009e00:	b29b      	uxth	r3, r3
 8009e02:	3b02      	subs	r3, #2
 8009e04:	b29a      	uxth	r2, r3
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8009e0a:	e0b2      	b.n	8009f72 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	330c      	adds	r3, #12
 8009e16:	7812      	ldrb	r2, [r2, #0]
 8009e18:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e1e:	1c5a      	adds	r2, r3, #1
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009e28:	b29b      	uxth	r3, r3
 8009e2a:	3b01      	subs	r3, #1
 8009e2c:	b29a      	uxth	r2, r3
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009e32:	e09e      	b.n	8009f72 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	689b      	ldr	r3, [r3, #8]
 8009e3a:	f003 0302 	and.w	r3, r3, #2
 8009e3e:	2b02      	cmp	r3, #2
 8009e40:	d134      	bne.n	8009eac <HAL_SPI_TransmitReceive+0x30a>
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009e46:	b29b      	uxth	r3, r3
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d02f      	beq.n	8009eac <HAL_SPI_TransmitReceive+0x30a>
 8009e4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e4e:	2b01      	cmp	r3, #1
 8009e50:	d12c      	bne.n	8009eac <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009e56:	b29b      	uxth	r3, r3
 8009e58:	2b01      	cmp	r3, #1
 8009e5a:	d912      	bls.n	8009e82 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e60:	881a      	ldrh	r2, [r3, #0]
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e6c:	1c9a      	adds	r2, r3, #2
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009e76:	b29b      	uxth	r3, r3
 8009e78:	3b02      	subs	r3, #2
 8009e7a:	b29a      	uxth	r2, r3
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8009e80:	e012      	b.n	8009ea8 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	330c      	adds	r3, #12
 8009e8c:	7812      	ldrb	r2, [r2, #0]
 8009e8e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e94:	1c5a      	adds	r2, r3, #1
 8009e96:	68fb      	ldr	r3, [r7, #12]
 8009e98:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009e9e:	b29b      	uxth	r3, r3
 8009ea0:	3b01      	subs	r3, #1
 8009ea2:	b29a      	uxth	r2, r3
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009ea8:	2300      	movs	r3, #0
 8009eaa:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	689b      	ldr	r3, [r3, #8]
 8009eb2:	f003 0301 	and.w	r3, r3, #1
 8009eb6:	2b01      	cmp	r3, #1
 8009eb8:	d148      	bne.n	8009f4c <HAL_SPI_TransmitReceive+0x3aa>
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009ec0:	b29b      	uxth	r3, r3
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	d042      	beq.n	8009f4c <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009ecc:	b29b      	uxth	r3, r3
 8009ece:	2b01      	cmp	r3, #1
 8009ed0:	d923      	bls.n	8009f1a <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	68da      	ldr	r2, [r3, #12]
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009edc:	b292      	uxth	r2, r2
 8009ede:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009ee4:	1c9a      	adds	r2, r3, #2
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009ef0:	b29b      	uxth	r3, r3
 8009ef2:	3b02      	subs	r3, #2
 8009ef4:	b29a      	uxth	r2, r3
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009f02:	b29b      	uxth	r3, r3
 8009f04:	2b01      	cmp	r3, #1
 8009f06:	d81f      	bhi.n	8009f48 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	685a      	ldr	r2, [r3, #4]
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8009f16:	605a      	str	r2, [r3, #4]
 8009f18:	e016      	b.n	8009f48 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	f103 020c 	add.w	r2, r3, #12
 8009f22:	68fb      	ldr	r3, [r7, #12]
 8009f24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009f26:	7812      	ldrb	r2, [r2, #0]
 8009f28:	b2d2      	uxtb	r2, r2
 8009f2a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009f30:	1c5a      	adds	r2, r3, #1
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009f3c:	b29b      	uxth	r3, r3
 8009f3e:	3b01      	subs	r3, #1
 8009f40:	b29a      	uxth	r2, r3
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009f48:	2301      	movs	r3, #1
 8009f4a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8009f4c:	f7fc f9ce 	bl	80062ec <HAL_GetTick>
 8009f50:	4602      	mov	r2, r0
 8009f52:	69fb      	ldr	r3, [r7, #28]
 8009f54:	1ad3      	subs	r3, r2, r3
 8009f56:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009f58:	429a      	cmp	r2, r3
 8009f5a:	d803      	bhi.n	8009f64 <HAL_SPI_TransmitReceive+0x3c2>
 8009f5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f62:	d102      	bne.n	8009f6a <HAL_SPI_TransmitReceive+0x3c8>
 8009f64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d103      	bne.n	8009f72 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8009f6a:	2303      	movs	r3, #3
 8009f6c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        goto error;
 8009f70:	e01c      	b.n	8009fac <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009f76:	b29b      	uxth	r3, r3
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	f47f af5b 	bne.w	8009e34 <HAL_SPI_TransmitReceive+0x292>
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009f84:	b29b      	uxth	r3, r3
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	f47f af54 	bne.w	8009e34 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009f8c:	69fa      	ldr	r2, [r7, #28]
 8009f8e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8009f90:	68f8      	ldr	r0, [r7, #12]
 8009f92:	f000 f98f 	bl	800a2b4 <SPI_EndRxTxTransaction>
 8009f96:	4603      	mov	r3, r0
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	d006      	beq.n	8009faa <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8009f9c:	2301      	movs	r3, #1
 8009f9e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	2220      	movs	r2, #32
 8009fa6:	661a      	str	r2, [r3, #96]	@ 0x60
 8009fa8:	e000      	b.n	8009fac <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8009faa:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8009fac:	68fb      	ldr	r3, [r7, #12]
 8009fae:	2201      	movs	r2, #1
 8009fb0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  __HAL_UNLOCK(hspi);
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	2200      	movs	r2, #0
 8009fb8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8009fbc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 8009fc0:	4618      	mov	r0, r3
 8009fc2:	3728      	adds	r7, #40	@ 0x28
 8009fc4:	46bd      	mov	sp, r7
 8009fc6:	bd80      	pop	{r7, pc}

08009fc8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009fc8:	b580      	push	{r7, lr}
 8009fca:	b088      	sub	sp, #32
 8009fcc:	af00      	add	r7, sp, #0
 8009fce:	60f8      	str	r0, [r7, #12]
 8009fd0:	60b9      	str	r1, [r7, #8]
 8009fd2:	603b      	str	r3, [r7, #0]
 8009fd4:	4613      	mov	r3, r2
 8009fd6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8009fd8:	f7fc f988 	bl	80062ec <HAL_GetTick>
 8009fdc:	4602      	mov	r2, r0
 8009fde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009fe0:	1a9b      	subs	r3, r3, r2
 8009fe2:	683a      	ldr	r2, [r7, #0]
 8009fe4:	4413      	add	r3, r2
 8009fe6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8009fe8:	f7fc f980 	bl	80062ec <HAL_GetTick>
 8009fec:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8009fee:	4b39      	ldr	r3, [pc, #228]	@ (800a0d4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	015b      	lsls	r3, r3, #5
 8009ff4:	0d1b      	lsrs	r3, r3, #20
 8009ff6:	69fa      	ldr	r2, [r7, #28]
 8009ff8:	fb02 f303 	mul.w	r3, r2, r3
 8009ffc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009ffe:	e054      	b.n	800a0aa <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800a000:	683b      	ldr	r3, [r7, #0]
 800a002:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a006:	d050      	beq.n	800a0aa <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800a008:	f7fc f970 	bl	80062ec <HAL_GetTick>
 800a00c:	4602      	mov	r2, r0
 800a00e:	69bb      	ldr	r3, [r7, #24]
 800a010:	1ad3      	subs	r3, r2, r3
 800a012:	69fa      	ldr	r2, [r7, #28]
 800a014:	429a      	cmp	r2, r3
 800a016:	d902      	bls.n	800a01e <SPI_WaitFlagStateUntilTimeout+0x56>
 800a018:	69fb      	ldr	r3, [r7, #28]
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d13d      	bne.n	800a09a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	685a      	ldr	r2, [r3, #4]
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800a02c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	685b      	ldr	r3, [r3, #4]
 800a032:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800a036:	d111      	bne.n	800a05c <SPI_WaitFlagStateUntilTimeout+0x94>
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	689b      	ldr	r3, [r3, #8]
 800a03c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a040:	d004      	beq.n	800a04c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	689b      	ldr	r3, [r3, #8]
 800a046:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a04a:	d107      	bne.n	800a05c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	681a      	ldr	r2, [r3, #0]
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a05a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a060:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a064:	d10f      	bne.n	800a086 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	681a      	ldr	r2, [r3, #0]
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800a074:	601a      	str	r2, [r3, #0]
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	681a      	ldr	r2, [r3, #0]
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800a084:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	2201      	movs	r2, #1
 800a08a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	2200      	movs	r2, #0
 800a092:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800a096:	2303      	movs	r3, #3
 800a098:	e017      	b.n	800a0ca <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800a09a:	697b      	ldr	r3, [r7, #20]
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d101      	bne.n	800a0a4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800a0a0:	2300      	movs	r3, #0
 800a0a2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800a0a4:	697b      	ldr	r3, [r7, #20]
 800a0a6:	3b01      	subs	r3, #1
 800a0a8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	689a      	ldr	r2, [r3, #8]
 800a0b0:	68bb      	ldr	r3, [r7, #8]
 800a0b2:	4013      	ands	r3, r2
 800a0b4:	68ba      	ldr	r2, [r7, #8]
 800a0b6:	429a      	cmp	r2, r3
 800a0b8:	bf0c      	ite	eq
 800a0ba:	2301      	moveq	r3, #1
 800a0bc:	2300      	movne	r3, #0
 800a0be:	b2db      	uxtb	r3, r3
 800a0c0:	461a      	mov	r2, r3
 800a0c2:	79fb      	ldrb	r3, [r7, #7]
 800a0c4:	429a      	cmp	r2, r3
 800a0c6:	d19b      	bne.n	800a000 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800a0c8:	2300      	movs	r3, #0
}
 800a0ca:	4618      	mov	r0, r3
 800a0cc:	3720      	adds	r7, #32
 800a0ce:	46bd      	mov	sp, r7
 800a0d0:	bd80      	pop	{r7, pc}
 800a0d2:	bf00      	nop
 800a0d4:	20000028 	.word	0x20000028

0800a0d8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800a0d8:	b580      	push	{r7, lr}
 800a0da:	b08a      	sub	sp, #40	@ 0x28
 800a0dc:	af00      	add	r7, sp, #0
 800a0de:	60f8      	str	r0, [r7, #12]
 800a0e0:	60b9      	str	r1, [r7, #8]
 800a0e2:	607a      	str	r2, [r7, #4]
 800a0e4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800a0e6:	2300      	movs	r3, #0
 800a0e8:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800a0ea:	f7fc f8ff 	bl	80062ec <HAL_GetTick>
 800a0ee:	4602      	mov	r2, r0
 800a0f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0f2:	1a9b      	subs	r3, r3, r2
 800a0f4:	683a      	ldr	r2, [r7, #0]
 800a0f6:	4413      	add	r3, r2
 800a0f8:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800a0fa:	f7fc f8f7 	bl	80062ec <HAL_GetTick>
 800a0fe:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	330c      	adds	r3, #12
 800a106:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800a108:	4b3d      	ldr	r3, [pc, #244]	@ (800a200 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800a10a:	681a      	ldr	r2, [r3, #0]
 800a10c:	4613      	mov	r3, r2
 800a10e:	009b      	lsls	r3, r3, #2
 800a110:	4413      	add	r3, r2
 800a112:	00da      	lsls	r2, r3, #3
 800a114:	1ad3      	subs	r3, r2, r3
 800a116:	0d1b      	lsrs	r3, r3, #20
 800a118:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a11a:	fb02 f303 	mul.w	r3, r2, r3
 800a11e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800a120:	e060      	b.n	800a1e4 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800a122:	68bb      	ldr	r3, [r7, #8]
 800a124:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800a128:	d107      	bne.n	800a13a <SPI_WaitFifoStateUntilTimeout+0x62>
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d104      	bne.n	800a13a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800a130:	69fb      	ldr	r3, [r7, #28]
 800a132:	781b      	ldrb	r3, [r3, #0]
 800a134:	b2db      	uxtb	r3, r3
 800a136:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800a138:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800a13a:	683b      	ldr	r3, [r7, #0]
 800a13c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a140:	d050      	beq.n	800a1e4 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800a142:	f7fc f8d3 	bl	80062ec <HAL_GetTick>
 800a146:	4602      	mov	r2, r0
 800a148:	6a3b      	ldr	r3, [r7, #32]
 800a14a:	1ad3      	subs	r3, r2, r3
 800a14c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a14e:	429a      	cmp	r2, r3
 800a150:	d902      	bls.n	800a158 <SPI_WaitFifoStateUntilTimeout+0x80>
 800a152:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a154:	2b00      	cmp	r3, #0
 800a156:	d13d      	bne.n	800a1d4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	685a      	ldr	r2, [r3, #4]
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800a166:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	685b      	ldr	r3, [r3, #4]
 800a16c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800a170:	d111      	bne.n	800a196 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800a172:	68fb      	ldr	r3, [r7, #12]
 800a174:	689b      	ldr	r3, [r3, #8]
 800a176:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a17a:	d004      	beq.n	800a186 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	689b      	ldr	r3, [r3, #8]
 800a180:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a184:	d107      	bne.n	800a196 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800a186:	68fb      	ldr	r3, [r7, #12]
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	681a      	ldr	r2, [r3, #0]
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a194:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a19a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a19e:	d10f      	bne.n	800a1c0 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	681a      	ldr	r2, [r3, #0]
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800a1ae:	601a      	str	r2, [r3, #0]
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	681a      	ldr	r2, [r3, #0]
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800a1be:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	2201      	movs	r2, #1
 800a1c4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	2200      	movs	r2, #0
 800a1cc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800a1d0:	2303      	movs	r3, #3
 800a1d2:	e010      	b.n	800a1f6 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800a1d4:	69bb      	ldr	r3, [r7, #24]
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d101      	bne.n	800a1de <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800a1da:	2300      	movs	r3, #0
 800a1dc:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800a1de:	69bb      	ldr	r3, [r7, #24]
 800a1e0:	3b01      	subs	r3, #1
 800a1e2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800a1e4:	68fb      	ldr	r3, [r7, #12]
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	689a      	ldr	r2, [r3, #8]
 800a1ea:	68bb      	ldr	r3, [r7, #8]
 800a1ec:	4013      	ands	r3, r2
 800a1ee:	687a      	ldr	r2, [r7, #4]
 800a1f0:	429a      	cmp	r2, r3
 800a1f2:	d196      	bne.n	800a122 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800a1f4:	2300      	movs	r3, #0
}
 800a1f6:	4618      	mov	r0, r3
 800a1f8:	3728      	adds	r7, #40	@ 0x28
 800a1fa:	46bd      	mov	sp, r7
 800a1fc:	bd80      	pop	{r7, pc}
 800a1fe:	bf00      	nop
 800a200:	20000028 	.word	0x20000028

0800a204 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800a204:	b580      	push	{r7, lr}
 800a206:	b086      	sub	sp, #24
 800a208:	af02      	add	r7, sp, #8
 800a20a:	60f8      	str	r0, [r7, #12]
 800a20c:	60b9      	str	r1, [r7, #8]
 800a20e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	685b      	ldr	r3, [r3, #4]
 800a214:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800a218:	d111      	bne.n	800a23e <SPI_EndRxTransaction+0x3a>
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	689b      	ldr	r3, [r3, #8]
 800a21e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a222:	d004      	beq.n	800a22e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	689b      	ldr	r3, [r3, #8]
 800a228:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a22c:	d107      	bne.n	800a23e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	681a      	ldr	r2, [r3, #0]
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a23c:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	9300      	str	r3, [sp, #0]
 800a242:	68bb      	ldr	r3, [r7, #8]
 800a244:	2200      	movs	r2, #0
 800a246:	2180      	movs	r1, #128	@ 0x80
 800a248:	68f8      	ldr	r0, [r7, #12]
 800a24a:	f7ff febd 	bl	8009fc8 <SPI_WaitFlagStateUntilTimeout>
 800a24e:	4603      	mov	r3, r0
 800a250:	2b00      	cmp	r3, #0
 800a252:	d007      	beq.n	800a264 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a258:	f043 0220 	orr.w	r2, r3, #32
 800a25c:	68fb      	ldr	r3, [r7, #12]
 800a25e:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800a260:	2303      	movs	r3, #3
 800a262:	e023      	b.n	800a2ac <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	685b      	ldr	r3, [r3, #4]
 800a268:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800a26c:	d11d      	bne.n	800a2aa <SPI_EndRxTransaction+0xa6>
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	689b      	ldr	r3, [r3, #8]
 800a272:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a276:	d004      	beq.n	800a282 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	689b      	ldr	r3, [r3, #8]
 800a27c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a280:	d113      	bne.n	800a2aa <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	9300      	str	r3, [sp, #0]
 800a286:	68bb      	ldr	r3, [r7, #8]
 800a288:	2200      	movs	r2, #0
 800a28a:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800a28e:	68f8      	ldr	r0, [r7, #12]
 800a290:	f7ff ff22 	bl	800a0d8 <SPI_WaitFifoStateUntilTimeout>
 800a294:	4603      	mov	r3, r0
 800a296:	2b00      	cmp	r3, #0
 800a298:	d007      	beq.n	800a2aa <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a29e:	f043 0220 	orr.w	r2, r3, #32
 800a2a2:	68fb      	ldr	r3, [r7, #12]
 800a2a4:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 800a2a6:	2303      	movs	r3, #3
 800a2a8:	e000      	b.n	800a2ac <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800a2aa:	2300      	movs	r3, #0
}
 800a2ac:	4618      	mov	r0, r3
 800a2ae:	3710      	adds	r7, #16
 800a2b0:	46bd      	mov	sp, r7
 800a2b2:	bd80      	pop	{r7, pc}

0800a2b4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800a2b4:	b580      	push	{r7, lr}
 800a2b6:	b086      	sub	sp, #24
 800a2b8:	af02      	add	r7, sp, #8
 800a2ba:	60f8      	str	r0, [r7, #12]
 800a2bc:	60b9      	str	r1, [r7, #8]
 800a2be:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	9300      	str	r3, [sp, #0]
 800a2c4:	68bb      	ldr	r3, [r7, #8]
 800a2c6:	2200      	movs	r2, #0
 800a2c8:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 800a2cc:	68f8      	ldr	r0, [r7, #12]
 800a2ce:	f7ff ff03 	bl	800a0d8 <SPI_WaitFifoStateUntilTimeout>
 800a2d2:	4603      	mov	r3, r0
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d007      	beq.n	800a2e8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a2dc:	f043 0220 	orr.w	r2, r3, #32
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800a2e4:	2303      	movs	r3, #3
 800a2e6:	e027      	b.n	800a338 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	9300      	str	r3, [sp, #0]
 800a2ec:	68bb      	ldr	r3, [r7, #8]
 800a2ee:	2200      	movs	r2, #0
 800a2f0:	2180      	movs	r1, #128	@ 0x80
 800a2f2:	68f8      	ldr	r0, [r7, #12]
 800a2f4:	f7ff fe68 	bl	8009fc8 <SPI_WaitFlagStateUntilTimeout>
 800a2f8:	4603      	mov	r3, r0
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d007      	beq.n	800a30e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a302:	f043 0220 	orr.w	r2, r3, #32
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800a30a:	2303      	movs	r3, #3
 800a30c:	e014      	b.n	800a338 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	9300      	str	r3, [sp, #0]
 800a312:	68bb      	ldr	r3, [r7, #8]
 800a314:	2200      	movs	r2, #0
 800a316:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800a31a:	68f8      	ldr	r0, [r7, #12]
 800a31c:	f7ff fedc 	bl	800a0d8 <SPI_WaitFifoStateUntilTimeout>
 800a320:	4603      	mov	r3, r0
 800a322:	2b00      	cmp	r3, #0
 800a324:	d007      	beq.n	800a336 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a32a:	f043 0220 	orr.w	r2, r3, #32
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800a332:	2303      	movs	r3, #3
 800a334:	e000      	b.n	800a338 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800a336:	2300      	movs	r3, #0
}
 800a338:	4618      	mov	r0, r3
 800a33a:	3710      	adds	r7, #16
 800a33c:	46bd      	mov	sp, r7
 800a33e:	bd80      	pop	{r7, pc}

0800a340 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a340:	b580      	push	{r7, lr}
 800a342:	b082      	sub	sp, #8
 800a344:	af00      	add	r7, sp, #0
 800a346:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	d101      	bne.n	800a352 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a34e:	2301      	movs	r3, #1
 800a350:	e049      	b.n	800a3e6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a358:	b2db      	uxtb	r3, r3
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	d106      	bne.n	800a36c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	2200      	movs	r2, #0
 800a362:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a366:	6878      	ldr	r0, [r7, #4]
 800a368:	f7fb fbe8 	bl	8005b3c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	2202      	movs	r2, #2
 800a370:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	681a      	ldr	r2, [r3, #0]
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	3304      	adds	r3, #4
 800a37c:	4619      	mov	r1, r3
 800a37e:	4610      	mov	r0, r2
 800a380:	f000 fca2 	bl	800acc8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	2201      	movs	r2, #1
 800a388:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	2201      	movs	r2, #1
 800a390:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	2201      	movs	r2, #1
 800a398:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	2201      	movs	r2, #1
 800a3a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	2201      	movs	r2, #1
 800a3a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	2201      	movs	r2, #1
 800a3b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	2201      	movs	r2, #1
 800a3b8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	2201      	movs	r2, #1
 800a3c0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	2201      	movs	r2, #1
 800a3c8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	2201      	movs	r2, #1
 800a3d0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	2201      	movs	r2, #1
 800a3d8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	2201      	movs	r2, #1
 800a3e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a3e4:	2300      	movs	r3, #0
}
 800a3e6:	4618      	mov	r0, r3
 800a3e8:	3708      	adds	r7, #8
 800a3ea:	46bd      	mov	sp, r7
 800a3ec:	bd80      	pop	{r7, pc}
	...

0800a3f0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a3f0:	b480      	push	{r7}
 800a3f2:	b085      	sub	sp, #20
 800a3f4:	af00      	add	r7, sp, #0
 800a3f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a3fe:	b2db      	uxtb	r3, r3
 800a400:	2b01      	cmp	r3, #1
 800a402:	d001      	beq.n	800a408 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a404:	2301      	movs	r3, #1
 800a406:	e040      	b.n	800a48a <HAL_TIM_Base_Start_IT+0x9a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	2202      	movs	r2, #2
 800a40c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	68da      	ldr	r2, [r3, #12]
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	f042 0201 	orr.w	r2, r2, #1
 800a41e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	4a1c      	ldr	r2, [pc, #112]	@ (800a498 <HAL_TIM_Base_Start_IT+0xa8>)
 800a426:	4293      	cmp	r3, r2
 800a428:	d00e      	beq.n	800a448 <HAL_TIM_Base_Start_IT+0x58>
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a432:	d009      	beq.n	800a448 <HAL_TIM_Base_Start_IT+0x58>
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	4a18      	ldr	r2, [pc, #96]	@ (800a49c <HAL_TIM_Base_Start_IT+0xac>)
 800a43a:	4293      	cmp	r3, r2
 800a43c:	d004      	beq.n	800a448 <HAL_TIM_Base_Start_IT+0x58>
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	4a17      	ldr	r2, [pc, #92]	@ (800a4a0 <HAL_TIM_Base_Start_IT+0xb0>)
 800a444:	4293      	cmp	r3, r2
 800a446:	d115      	bne.n	800a474 <HAL_TIM_Base_Start_IT+0x84>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	689a      	ldr	r2, [r3, #8]
 800a44e:	4b15      	ldr	r3, [pc, #84]	@ (800a4a4 <HAL_TIM_Base_Start_IT+0xb4>)
 800a450:	4013      	ands	r3, r2
 800a452:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a454:	68fb      	ldr	r3, [r7, #12]
 800a456:	2b06      	cmp	r3, #6
 800a458:	d015      	beq.n	800a486 <HAL_TIM_Base_Start_IT+0x96>
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a460:	d011      	beq.n	800a486 <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	681a      	ldr	r2, [r3, #0]
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	f042 0201 	orr.w	r2, r2, #1
 800a470:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a472:	e008      	b.n	800a486 <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	681a      	ldr	r2, [r3, #0]
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	f042 0201 	orr.w	r2, r2, #1
 800a482:	601a      	str	r2, [r3, #0]
 800a484:	e000      	b.n	800a488 <HAL_TIM_Base_Start_IT+0x98>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a486:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a488:	2300      	movs	r3, #0
}
 800a48a:	4618      	mov	r0, r3
 800a48c:	3714      	adds	r7, #20
 800a48e:	46bd      	mov	sp, r7
 800a490:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a494:	4770      	bx	lr
 800a496:	bf00      	nop
 800a498:	40012c00 	.word	0x40012c00
 800a49c:	40000400 	.word	0x40000400
 800a4a0:	40014000 	.word	0x40014000
 800a4a4:	00010007 	.word	0x00010007

0800a4a8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a4a8:	b580      	push	{r7, lr}
 800a4aa:	b082      	sub	sp, #8
 800a4ac:	af00      	add	r7, sp, #0
 800a4ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	d101      	bne.n	800a4ba <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a4b6:	2301      	movs	r3, #1
 800a4b8:	e049      	b.n	800a54e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a4c0:	b2db      	uxtb	r3, r3
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d106      	bne.n	800a4d4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	2200      	movs	r2, #0
 800a4ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a4ce:	6878      	ldr	r0, [r7, #4]
 800a4d0:	f000 f841 	bl	800a556 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	2202      	movs	r2, #2
 800a4d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	681a      	ldr	r2, [r3, #0]
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	3304      	adds	r3, #4
 800a4e4:	4619      	mov	r1, r3
 800a4e6:	4610      	mov	r0, r2
 800a4e8:	f000 fbee 	bl	800acc8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	2201      	movs	r2, #1
 800a4f0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	2201      	movs	r2, #1
 800a4f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	2201      	movs	r2, #1
 800a500:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	2201      	movs	r2, #1
 800a508:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	2201      	movs	r2, #1
 800a510:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	2201      	movs	r2, #1
 800a518:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	2201      	movs	r2, #1
 800a520:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	2201      	movs	r2, #1
 800a528:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	2201      	movs	r2, #1
 800a530:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	2201      	movs	r2, #1
 800a538:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	2201      	movs	r2, #1
 800a540:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	2201      	movs	r2, #1
 800a548:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a54c:	2300      	movs	r3, #0
}
 800a54e:	4618      	mov	r0, r3
 800a550:	3708      	adds	r7, #8
 800a552:	46bd      	mov	sp, r7
 800a554:	bd80      	pop	{r7, pc}

0800a556 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800a556:	b480      	push	{r7}
 800a558:	b083      	sub	sp, #12
 800a55a:	af00      	add	r7, sp, #0
 800a55c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800a55e:	bf00      	nop
 800a560:	370c      	adds	r7, #12
 800a562:	46bd      	mov	sp, r7
 800a564:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a568:	4770      	bx	lr
	...

0800a56c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a56c:	b580      	push	{r7, lr}
 800a56e:	b082      	sub	sp, #8
 800a570:	af00      	add	r7, sp, #0
 800a572:	6078      	str	r0, [r7, #4]
 800a574:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	2200      	movs	r2, #0
 800a57c:	6839      	ldr	r1, [r7, #0]
 800a57e:	4618      	mov	r0, r3
 800a580:	f000 ff28 	bl	800b3d4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	4a39      	ldr	r2, [pc, #228]	@ (800a670 <HAL_TIM_PWM_Stop+0x104>)
 800a58a:	4293      	cmp	r3, r2
 800a58c:	d009      	beq.n	800a5a2 <HAL_TIM_PWM_Stop+0x36>
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	4a38      	ldr	r2, [pc, #224]	@ (800a674 <HAL_TIM_PWM_Stop+0x108>)
 800a594:	4293      	cmp	r3, r2
 800a596:	d004      	beq.n	800a5a2 <HAL_TIM_PWM_Stop+0x36>
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	4a36      	ldr	r2, [pc, #216]	@ (800a678 <HAL_TIM_PWM_Stop+0x10c>)
 800a59e:	4293      	cmp	r3, r2
 800a5a0:	d101      	bne.n	800a5a6 <HAL_TIM_PWM_Stop+0x3a>
 800a5a2:	2301      	movs	r3, #1
 800a5a4:	e000      	b.n	800a5a8 <HAL_TIM_PWM_Stop+0x3c>
 800a5a6:	2300      	movs	r3, #0
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	d017      	beq.n	800a5dc <HAL_TIM_PWM_Stop+0x70>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	6a1a      	ldr	r2, [r3, #32]
 800a5b2:	f241 1311 	movw	r3, #4369	@ 0x1111
 800a5b6:	4013      	ands	r3, r2
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	d10f      	bne.n	800a5dc <HAL_TIM_PWM_Stop+0x70>
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	6a1a      	ldr	r2, [r3, #32]
 800a5c2:	f240 4344 	movw	r3, #1092	@ 0x444
 800a5c6:	4013      	ands	r3, r2
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d107      	bne.n	800a5dc <HAL_TIM_PWM_Stop+0x70>
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800a5da:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	6a1a      	ldr	r2, [r3, #32]
 800a5e2:	f241 1311 	movw	r3, #4369	@ 0x1111
 800a5e6:	4013      	ands	r3, r2
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	d10f      	bne.n	800a60c <HAL_TIM_PWM_Stop+0xa0>
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	6a1a      	ldr	r2, [r3, #32]
 800a5f2:	f240 4344 	movw	r3, #1092	@ 0x444
 800a5f6:	4013      	ands	r3, r2
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	d107      	bne.n	800a60c <HAL_TIM_PWM_Stop+0xa0>
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	681a      	ldr	r2, [r3, #0]
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	f022 0201 	bic.w	r2, r2, #1
 800a60a:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800a60c:	683b      	ldr	r3, [r7, #0]
 800a60e:	2b00      	cmp	r3, #0
 800a610:	d104      	bne.n	800a61c <HAL_TIM_PWM_Stop+0xb0>
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	2201      	movs	r2, #1
 800a616:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a61a:	e023      	b.n	800a664 <HAL_TIM_PWM_Stop+0xf8>
 800a61c:	683b      	ldr	r3, [r7, #0]
 800a61e:	2b04      	cmp	r3, #4
 800a620:	d104      	bne.n	800a62c <HAL_TIM_PWM_Stop+0xc0>
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	2201      	movs	r2, #1
 800a626:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a62a:	e01b      	b.n	800a664 <HAL_TIM_PWM_Stop+0xf8>
 800a62c:	683b      	ldr	r3, [r7, #0]
 800a62e:	2b08      	cmp	r3, #8
 800a630:	d104      	bne.n	800a63c <HAL_TIM_PWM_Stop+0xd0>
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	2201      	movs	r2, #1
 800a636:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a63a:	e013      	b.n	800a664 <HAL_TIM_PWM_Stop+0xf8>
 800a63c:	683b      	ldr	r3, [r7, #0]
 800a63e:	2b0c      	cmp	r3, #12
 800a640:	d104      	bne.n	800a64c <HAL_TIM_PWM_Stop+0xe0>
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	2201      	movs	r2, #1
 800a646:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a64a:	e00b      	b.n	800a664 <HAL_TIM_PWM_Stop+0xf8>
 800a64c:	683b      	ldr	r3, [r7, #0]
 800a64e:	2b10      	cmp	r3, #16
 800a650:	d104      	bne.n	800a65c <HAL_TIM_PWM_Stop+0xf0>
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	2201      	movs	r2, #1
 800a656:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a65a:	e003      	b.n	800a664 <HAL_TIM_PWM_Stop+0xf8>
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	2201      	movs	r2, #1
 800a660:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 800a664:	2300      	movs	r3, #0
}
 800a666:	4618      	mov	r0, r3
 800a668:	3708      	adds	r7, #8
 800a66a:	46bd      	mov	sp, r7
 800a66c:	bd80      	pop	{r7, pc}
 800a66e:	bf00      	nop
 800a670:	40012c00 	.word	0x40012c00
 800a674:	40014000 	.word	0x40014000
 800a678:	40014400 	.word	0x40014400

0800a67c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a67c:	b580      	push	{r7, lr}
 800a67e:	b082      	sub	sp, #8
 800a680:	af00      	add	r7, sp, #0
 800a682:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	691b      	ldr	r3, [r3, #16]
 800a68a:	f003 0302 	and.w	r3, r3, #2
 800a68e:	2b02      	cmp	r3, #2
 800a690:	d122      	bne.n	800a6d8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	68db      	ldr	r3, [r3, #12]
 800a698:	f003 0302 	and.w	r3, r3, #2
 800a69c:	2b02      	cmp	r3, #2
 800a69e:	d11b      	bne.n	800a6d8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	f06f 0202 	mvn.w	r2, #2
 800a6a8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	2201      	movs	r2, #1
 800a6ae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	699b      	ldr	r3, [r3, #24]
 800a6b6:	f003 0303 	and.w	r3, r3, #3
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	d003      	beq.n	800a6c6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a6be:	6878      	ldr	r0, [r7, #4]
 800a6c0:	f000 fae3 	bl	800ac8a <HAL_TIM_IC_CaptureCallback>
 800a6c4:	e005      	b.n	800a6d2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a6c6:	6878      	ldr	r0, [r7, #4]
 800a6c8:	f000 fad5 	bl	800ac76 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a6cc:	6878      	ldr	r0, [r7, #4]
 800a6ce:	f000 fae6 	bl	800ac9e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	2200      	movs	r2, #0
 800a6d6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	691b      	ldr	r3, [r3, #16]
 800a6de:	f003 0304 	and.w	r3, r3, #4
 800a6e2:	2b04      	cmp	r3, #4
 800a6e4:	d122      	bne.n	800a72c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	68db      	ldr	r3, [r3, #12]
 800a6ec:	f003 0304 	and.w	r3, r3, #4
 800a6f0:	2b04      	cmp	r3, #4
 800a6f2:	d11b      	bne.n	800a72c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	f06f 0204 	mvn.w	r2, #4
 800a6fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	2202      	movs	r2, #2
 800a702:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	699b      	ldr	r3, [r3, #24]
 800a70a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a70e:	2b00      	cmp	r3, #0
 800a710:	d003      	beq.n	800a71a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a712:	6878      	ldr	r0, [r7, #4]
 800a714:	f000 fab9 	bl	800ac8a <HAL_TIM_IC_CaptureCallback>
 800a718:	e005      	b.n	800a726 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a71a:	6878      	ldr	r0, [r7, #4]
 800a71c:	f000 faab 	bl	800ac76 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a720:	6878      	ldr	r0, [r7, #4]
 800a722:	f000 fabc 	bl	800ac9e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	2200      	movs	r2, #0
 800a72a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	691b      	ldr	r3, [r3, #16]
 800a732:	f003 0308 	and.w	r3, r3, #8
 800a736:	2b08      	cmp	r3, #8
 800a738:	d122      	bne.n	800a780 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	68db      	ldr	r3, [r3, #12]
 800a740:	f003 0308 	and.w	r3, r3, #8
 800a744:	2b08      	cmp	r3, #8
 800a746:	d11b      	bne.n	800a780 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	f06f 0208 	mvn.w	r2, #8
 800a750:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	2204      	movs	r2, #4
 800a756:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	69db      	ldr	r3, [r3, #28]
 800a75e:	f003 0303 	and.w	r3, r3, #3
 800a762:	2b00      	cmp	r3, #0
 800a764:	d003      	beq.n	800a76e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a766:	6878      	ldr	r0, [r7, #4]
 800a768:	f000 fa8f 	bl	800ac8a <HAL_TIM_IC_CaptureCallback>
 800a76c:	e005      	b.n	800a77a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a76e:	6878      	ldr	r0, [r7, #4]
 800a770:	f000 fa81 	bl	800ac76 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a774:	6878      	ldr	r0, [r7, #4]
 800a776:	f000 fa92 	bl	800ac9e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	2200      	movs	r2, #0
 800a77e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	691b      	ldr	r3, [r3, #16]
 800a786:	f003 0310 	and.w	r3, r3, #16
 800a78a:	2b10      	cmp	r3, #16
 800a78c:	d122      	bne.n	800a7d4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	68db      	ldr	r3, [r3, #12]
 800a794:	f003 0310 	and.w	r3, r3, #16
 800a798:	2b10      	cmp	r3, #16
 800a79a:	d11b      	bne.n	800a7d4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	f06f 0210 	mvn.w	r2, #16
 800a7a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	2208      	movs	r2, #8
 800a7aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	69db      	ldr	r3, [r3, #28]
 800a7b2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d003      	beq.n	800a7c2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a7ba:	6878      	ldr	r0, [r7, #4]
 800a7bc:	f000 fa65 	bl	800ac8a <HAL_TIM_IC_CaptureCallback>
 800a7c0:	e005      	b.n	800a7ce <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a7c2:	6878      	ldr	r0, [r7, #4]
 800a7c4:	f000 fa57 	bl	800ac76 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a7c8:	6878      	ldr	r0, [r7, #4]
 800a7ca:	f000 fa68 	bl	800ac9e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	2200      	movs	r2, #0
 800a7d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	691b      	ldr	r3, [r3, #16]
 800a7da:	f003 0301 	and.w	r3, r3, #1
 800a7de:	2b01      	cmp	r3, #1
 800a7e0:	d10e      	bne.n	800a800 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	68db      	ldr	r3, [r3, #12]
 800a7e8:	f003 0301 	and.w	r3, r3, #1
 800a7ec:	2b01      	cmp	r3, #1
 800a7ee:	d107      	bne.n	800a800 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	f06f 0201 	mvn.w	r2, #1
 800a7f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a7fa:	6878      	ldr	r0, [r7, #4]
 800a7fc:	f7f9 fb66 	bl	8003ecc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	691b      	ldr	r3, [r3, #16]
 800a806:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a80a:	2b80      	cmp	r3, #128	@ 0x80
 800a80c:	d10e      	bne.n	800a82c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	68db      	ldr	r3, [r3, #12]
 800a814:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a818:	2b80      	cmp	r3, #128	@ 0x80
 800a81a:	d107      	bne.n	800a82c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800a824:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a826:	6878      	ldr	r0, [r7, #4]
 800a828:	f000 feea 	bl	800b600 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	691b      	ldr	r3, [r3, #16]
 800a832:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a836:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a83a:	d10e      	bne.n	800a85a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	68db      	ldr	r3, [r3, #12]
 800a842:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a846:	2b80      	cmp	r3, #128	@ 0x80
 800a848:	d107      	bne.n	800a85a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800a852:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a854:	6878      	ldr	r0, [r7, #4]
 800a856:	f000 fedd 	bl	800b614 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	691b      	ldr	r3, [r3, #16]
 800a860:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a864:	2b40      	cmp	r3, #64	@ 0x40
 800a866:	d10e      	bne.n	800a886 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	68db      	ldr	r3, [r3, #12]
 800a86e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a872:	2b40      	cmp	r3, #64	@ 0x40
 800a874:	d107      	bne.n	800a886 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800a87e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a880:	6878      	ldr	r0, [r7, #4]
 800a882:	f000 fa16 	bl	800acb2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	691b      	ldr	r3, [r3, #16]
 800a88c:	f003 0320 	and.w	r3, r3, #32
 800a890:	2b20      	cmp	r3, #32
 800a892:	d10e      	bne.n	800a8b2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	68db      	ldr	r3, [r3, #12]
 800a89a:	f003 0320 	and.w	r3, r3, #32
 800a89e:	2b20      	cmp	r3, #32
 800a8a0:	d107      	bne.n	800a8b2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	f06f 0220 	mvn.w	r2, #32
 800a8aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a8ac:	6878      	ldr	r0, [r7, #4]
 800a8ae:	f000 fe9d 	bl	800b5ec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a8b2:	bf00      	nop
 800a8b4:	3708      	adds	r7, #8
 800a8b6:	46bd      	mov	sp, r7
 800a8b8:	bd80      	pop	{r7, pc}
	...

0800a8bc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a8bc:	b580      	push	{r7, lr}
 800a8be:	b086      	sub	sp, #24
 800a8c0:	af00      	add	r7, sp, #0
 800a8c2:	60f8      	str	r0, [r7, #12]
 800a8c4:	60b9      	str	r1, [r7, #8]
 800a8c6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a8c8:	2300      	movs	r3, #0
 800a8ca:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a8d2:	2b01      	cmp	r3, #1
 800a8d4:	d101      	bne.n	800a8da <HAL_TIM_PWM_ConfigChannel+0x1e>
 800a8d6:	2302      	movs	r3, #2
 800a8d8:	e0ff      	b.n	800aada <HAL_TIM_PWM_ConfigChannel+0x21e>
 800a8da:	68fb      	ldr	r3, [r7, #12]
 800a8dc:	2201      	movs	r2, #1
 800a8de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	2b14      	cmp	r3, #20
 800a8e6:	f200 80f0 	bhi.w	800aaca <HAL_TIM_PWM_ConfigChannel+0x20e>
 800a8ea:	a201      	add	r2, pc, #4	@ (adr r2, 800a8f0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800a8ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8f0:	0800a945 	.word	0x0800a945
 800a8f4:	0800aacb 	.word	0x0800aacb
 800a8f8:	0800aacb 	.word	0x0800aacb
 800a8fc:	0800aacb 	.word	0x0800aacb
 800a900:	0800a985 	.word	0x0800a985
 800a904:	0800aacb 	.word	0x0800aacb
 800a908:	0800aacb 	.word	0x0800aacb
 800a90c:	0800aacb 	.word	0x0800aacb
 800a910:	0800a9c7 	.word	0x0800a9c7
 800a914:	0800aacb 	.word	0x0800aacb
 800a918:	0800aacb 	.word	0x0800aacb
 800a91c:	0800aacb 	.word	0x0800aacb
 800a920:	0800aa07 	.word	0x0800aa07
 800a924:	0800aacb 	.word	0x0800aacb
 800a928:	0800aacb 	.word	0x0800aacb
 800a92c:	0800aacb 	.word	0x0800aacb
 800a930:	0800aa49 	.word	0x0800aa49
 800a934:	0800aacb 	.word	0x0800aacb
 800a938:	0800aacb 	.word	0x0800aacb
 800a93c:	0800aacb 	.word	0x0800aacb
 800a940:	0800aa89 	.word	0x0800aa89
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	68b9      	ldr	r1, [r7, #8]
 800a94a:	4618      	mov	r0, r3
 800a94c:	f000 fa2a 	bl	800ada4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a950:	68fb      	ldr	r3, [r7, #12]
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	699a      	ldr	r2, [r3, #24]
 800a956:	68fb      	ldr	r3, [r7, #12]
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	f042 0208 	orr.w	r2, r2, #8
 800a95e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a960:	68fb      	ldr	r3, [r7, #12]
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	699a      	ldr	r2, [r3, #24]
 800a966:	68fb      	ldr	r3, [r7, #12]
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	f022 0204 	bic.w	r2, r2, #4
 800a96e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a970:	68fb      	ldr	r3, [r7, #12]
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	6999      	ldr	r1, [r3, #24]
 800a976:	68bb      	ldr	r3, [r7, #8]
 800a978:	691a      	ldr	r2, [r3, #16]
 800a97a:	68fb      	ldr	r3, [r7, #12]
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	430a      	orrs	r2, r1
 800a980:	619a      	str	r2, [r3, #24]
      break;
 800a982:	e0a5      	b.n	800aad0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a984:	68fb      	ldr	r3, [r7, #12]
 800a986:	681b      	ldr	r3, [r3, #0]
 800a988:	68b9      	ldr	r1, [r7, #8]
 800a98a:	4618      	mov	r0, r3
 800a98c:	f000 fa86 	bl	800ae9c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a990:	68fb      	ldr	r3, [r7, #12]
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	699a      	ldr	r2, [r3, #24]
 800a996:	68fb      	ldr	r3, [r7, #12]
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a99e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a9a0:	68fb      	ldr	r3, [r7, #12]
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	699a      	ldr	r2, [r3, #24]
 800a9a6:	68fb      	ldr	r3, [r7, #12]
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a9ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a9b0:	68fb      	ldr	r3, [r7, #12]
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	6999      	ldr	r1, [r3, #24]
 800a9b6:	68bb      	ldr	r3, [r7, #8]
 800a9b8:	691b      	ldr	r3, [r3, #16]
 800a9ba:	021a      	lsls	r2, r3, #8
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	430a      	orrs	r2, r1
 800a9c2:	619a      	str	r2, [r3, #24]
      break;
 800a9c4:	e084      	b.n	800aad0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a9c6:	68fb      	ldr	r3, [r7, #12]
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	68b9      	ldr	r1, [r7, #8]
 800a9cc:	4618      	mov	r0, r3
 800a9ce:	f000 fadf 	bl	800af90 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	69da      	ldr	r2, [r3, #28]
 800a9d8:	68fb      	ldr	r3, [r7, #12]
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	f042 0208 	orr.w	r2, r2, #8
 800a9e0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a9e2:	68fb      	ldr	r3, [r7, #12]
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	69da      	ldr	r2, [r3, #28]
 800a9e8:	68fb      	ldr	r3, [r7, #12]
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	f022 0204 	bic.w	r2, r2, #4
 800a9f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a9f2:	68fb      	ldr	r3, [r7, #12]
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	69d9      	ldr	r1, [r3, #28]
 800a9f8:	68bb      	ldr	r3, [r7, #8]
 800a9fa:	691a      	ldr	r2, [r3, #16]
 800a9fc:	68fb      	ldr	r3, [r7, #12]
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	430a      	orrs	r2, r1
 800aa02:	61da      	str	r2, [r3, #28]
      break;
 800aa04:	e064      	b.n	800aad0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800aa06:	68fb      	ldr	r3, [r7, #12]
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	68b9      	ldr	r1, [r7, #8]
 800aa0c:	4618      	mov	r0, r3
 800aa0e:	f000 fb37 	bl	800b080 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800aa12:	68fb      	ldr	r3, [r7, #12]
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	69da      	ldr	r2, [r3, #28]
 800aa18:	68fb      	ldr	r3, [r7, #12]
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800aa20:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800aa22:	68fb      	ldr	r3, [r7, #12]
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	69da      	ldr	r2, [r3, #28]
 800aa28:	68fb      	ldr	r3, [r7, #12]
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800aa30:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800aa32:	68fb      	ldr	r3, [r7, #12]
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	69d9      	ldr	r1, [r3, #28]
 800aa38:	68bb      	ldr	r3, [r7, #8]
 800aa3a:	691b      	ldr	r3, [r3, #16]
 800aa3c:	021a      	lsls	r2, r3, #8
 800aa3e:	68fb      	ldr	r3, [r7, #12]
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	430a      	orrs	r2, r1
 800aa44:	61da      	str	r2, [r3, #28]
      break;
 800aa46:	e043      	b.n	800aad0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800aa48:	68fb      	ldr	r3, [r7, #12]
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	68b9      	ldr	r1, [r7, #8]
 800aa4e:	4618      	mov	r0, r3
 800aa50:	f000 fb74 	bl	800b13c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800aa54:	68fb      	ldr	r3, [r7, #12]
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800aa5a:	68fb      	ldr	r3, [r7, #12]
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	f042 0208 	orr.w	r2, r2, #8
 800aa62:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800aa64:	68fb      	ldr	r3, [r7, #12]
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800aa6a:	68fb      	ldr	r3, [r7, #12]
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	f022 0204 	bic.w	r2, r2, #4
 800aa72:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800aa74:	68fb      	ldr	r3, [r7, #12]
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800aa7a:	68bb      	ldr	r3, [r7, #8]
 800aa7c:	691a      	ldr	r2, [r3, #16]
 800aa7e:	68fb      	ldr	r3, [r7, #12]
 800aa80:	681b      	ldr	r3, [r3, #0]
 800aa82:	430a      	orrs	r2, r1
 800aa84:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800aa86:	e023      	b.n	800aad0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800aa88:	68fb      	ldr	r3, [r7, #12]
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	68b9      	ldr	r1, [r7, #8]
 800aa8e:	4618      	mov	r0, r3
 800aa90:	f000 fbac 	bl	800b1ec <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800aa9a:	68fb      	ldr	r3, [r7, #12]
 800aa9c:	681b      	ldr	r3, [r3, #0]
 800aa9e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800aaa2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800aaaa:	68fb      	ldr	r3, [r7, #12]
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800aab2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	681b      	ldr	r3, [r3, #0]
 800aab8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800aaba:	68bb      	ldr	r3, [r7, #8]
 800aabc:	691b      	ldr	r3, [r3, #16]
 800aabe:	021a      	lsls	r2, r3, #8
 800aac0:	68fb      	ldr	r3, [r7, #12]
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	430a      	orrs	r2, r1
 800aac6:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800aac8:	e002      	b.n	800aad0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800aaca:	2301      	movs	r3, #1
 800aacc:	75fb      	strb	r3, [r7, #23]
      break;
 800aace:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800aad0:	68fb      	ldr	r3, [r7, #12]
 800aad2:	2200      	movs	r2, #0
 800aad4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800aad8:	7dfb      	ldrb	r3, [r7, #23]
}
 800aada:	4618      	mov	r0, r3
 800aadc:	3718      	adds	r7, #24
 800aade:	46bd      	mov	sp, r7
 800aae0:	bd80      	pop	{r7, pc}
 800aae2:	bf00      	nop

0800aae4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800aae4:	b580      	push	{r7, lr}
 800aae6:	b084      	sub	sp, #16
 800aae8:	af00      	add	r7, sp, #0
 800aaea:	6078      	str	r0, [r7, #4]
 800aaec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800aaee:	2300      	movs	r3, #0
 800aaf0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800aaf8:	2b01      	cmp	r3, #1
 800aafa:	d101      	bne.n	800ab00 <HAL_TIM_ConfigClockSource+0x1c>
 800aafc:	2302      	movs	r3, #2
 800aafe:	e0b6      	b.n	800ac6e <HAL_TIM_ConfigClockSource+0x18a>
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	2201      	movs	r2, #1
 800ab04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	2202      	movs	r2, #2
 800ab0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	689b      	ldr	r3, [r3, #8]
 800ab16:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800ab18:	68bb      	ldr	r3, [r7, #8]
 800ab1a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800ab1e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800ab22:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ab24:	68bb      	ldr	r3, [r7, #8]
 800ab26:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800ab2a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	68ba      	ldr	r2, [r7, #8]
 800ab32:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800ab34:	683b      	ldr	r3, [r7, #0]
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ab3c:	d03e      	beq.n	800abbc <HAL_TIM_ConfigClockSource+0xd8>
 800ab3e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ab42:	f200 8087 	bhi.w	800ac54 <HAL_TIM_ConfigClockSource+0x170>
 800ab46:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ab4a:	f000 8086 	beq.w	800ac5a <HAL_TIM_ConfigClockSource+0x176>
 800ab4e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ab52:	d87f      	bhi.n	800ac54 <HAL_TIM_ConfigClockSource+0x170>
 800ab54:	2b70      	cmp	r3, #112	@ 0x70
 800ab56:	d01a      	beq.n	800ab8e <HAL_TIM_ConfigClockSource+0xaa>
 800ab58:	2b70      	cmp	r3, #112	@ 0x70
 800ab5a:	d87b      	bhi.n	800ac54 <HAL_TIM_ConfigClockSource+0x170>
 800ab5c:	2b60      	cmp	r3, #96	@ 0x60
 800ab5e:	d050      	beq.n	800ac02 <HAL_TIM_ConfigClockSource+0x11e>
 800ab60:	2b60      	cmp	r3, #96	@ 0x60
 800ab62:	d877      	bhi.n	800ac54 <HAL_TIM_ConfigClockSource+0x170>
 800ab64:	2b50      	cmp	r3, #80	@ 0x50
 800ab66:	d03c      	beq.n	800abe2 <HAL_TIM_ConfigClockSource+0xfe>
 800ab68:	2b50      	cmp	r3, #80	@ 0x50
 800ab6a:	d873      	bhi.n	800ac54 <HAL_TIM_ConfigClockSource+0x170>
 800ab6c:	2b40      	cmp	r3, #64	@ 0x40
 800ab6e:	d058      	beq.n	800ac22 <HAL_TIM_ConfigClockSource+0x13e>
 800ab70:	2b40      	cmp	r3, #64	@ 0x40
 800ab72:	d86f      	bhi.n	800ac54 <HAL_TIM_ConfigClockSource+0x170>
 800ab74:	2b30      	cmp	r3, #48	@ 0x30
 800ab76:	d064      	beq.n	800ac42 <HAL_TIM_ConfigClockSource+0x15e>
 800ab78:	2b30      	cmp	r3, #48	@ 0x30
 800ab7a:	d86b      	bhi.n	800ac54 <HAL_TIM_ConfigClockSource+0x170>
 800ab7c:	2b20      	cmp	r3, #32
 800ab7e:	d060      	beq.n	800ac42 <HAL_TIM_ConfigClockSource+0x15e>
 800ab80:	2b20      	cmp	r3, #32
 800ab82:	d867      	bhi.n	800ac54 <HAL_TIM_ConfigClockSource+0x170>
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	d05c      	beq.n	800ac42 <HAL_TIM_ConfigClockSource+0x15e>
 800ab88:	2b10      	cmp	r3, #16
 800ab8a:	d05a      	beq.n	800ac42 <HAL_TIM_ConfigClockSource+0x15e>
 800ab8c:	e062      	b.n	800ac54 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800ab92:	683b      	ldr	r3, [r7, #0]
 800ab94:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800ab96:	683b      	ldr	r3, [r7, #0]
 800ab98:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800ab9a:	683b      	ldr	r3, [r7, #0]
 800ab9c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800ab9e:	f000 fbf9 	bl	800b394 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	689b      	ldr	r3, [r3, #8]
 800aba8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800abaa:	68bb      	ldr	r3, [r7, #8]
 800abac:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800abb0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	681b      	ldr	r3, [r3, #0]
 800abb6:	68ba      	ldr	r2, [r7, #8]
 800abb8:	609a      	str	r2, [r3, #8]
      break;
 800abba:	e04f      	b.n	800ac5c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800abc0:	683b      	ldr	r3, [r7, #0]
 800abc2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800abc4:	683b      	ldr	r3, [r7, #0]
 800abc6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800abc8:	683b      	ldr	r3, [r7, #0]
 800abca:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800abcc:	f000 fbe2 	bl	800b394 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	689a      	ldr	r2, [r3, #8]
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800abde:	609a      	str	r2, [r3, #8]
      break;
 800abe0:	e03c      	b.n	800ac5c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800abe6:	683b      	ldr	r3, [r7, #0]
 800abe8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800abea:	683b      	ldr	r3, [r7, #0]
 800abec:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800abee:	461a      	mov	r2, r3
 800abf0:	f000 fb56 	bl	800b2a0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	2150      	movs	r1, #80	@ 0x50
 800abfa:	4618      	mov	r0, r3
 800abfc:	f000 fbaf 	bl	800b35e <TIM_ITRx_SetConfig>
      break;
 800ac00:	e02c      	b.n	800ac5c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800ac06:	683b      	ldr	r3, [r7, #0]
 800ac08:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800ac0a:	683b      	ldr	r3, [r7, #0]
 800ac0c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800ac0e:	461a      	mov	r2, r3
 800ac10:	f000 fb75 	bl	800b2fe <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	2160      	movs	r1, #96	@ 0x60
 800ac1a:	4618      	mov	r0, r3
 800ac1c:	f000 fb9f 	bl	800b35e <TIM_ITRx_SetConfig>
      break;
 800ac20:	e01c      	b.n	800ac5c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800ac26:	683b      	ldr	r3, [r7, #0]
 800ac28:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800ac2a:	683b      	ldr	r3, [r7, #0]
 800ac2c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ac2e:	461a      	mov	r2, r3
 800ac30:	f000 fb36 	bl	800b2a0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	2140      	movs	r1, #64	@ 0x40
 800ac3a:	4618      	mov	r0, r3
 800ac3c:	f000 fb8f 	bl	800b35e <TIM_ITRx_SetConfig>
      break;
 800ac40:	e00c      	b.n	800ac5c <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	681a      	ldr	r2, [r3, #0]
 800ac46:	683b      	ldr	r3, [r7, #0]
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	4619      	mov	r1, r3
 800ac4c:	4610      	mov	r0, r2
 800ac4e:	f000 fb86 	bl	800b35e <TIM_ITRx_SetConfig>
      break;
 800ac52:	e003      	b.n	800ac5c <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800ac54:	2301      	movs	r3, #1
 800ac56:	73fb      	strb	r3, [r7, #15]
      break;
 800ac58:	e000      	b.n	800ac5c <HAL_TIM_ConfigClockSource+0x178>
      break;
 800ac5a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	2201      	movs	r2, #1
 800ac60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	2200      	movs	r2, #0
 800ac68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800ac6c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac6e:	4618      	mov	r0, r3
 800ac70:	3710      	adds	r7, #16
 800ac72:	46bd      	mov	sp, r7
 800ac74:	bd80      	pop	{r7, pc}

0800ac76 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ac76:	b480      	push	{r7}
 800ac78:	b083      	sub	sp, #12
 800ac7a:	af00      	add	r7, sp, #0
 800ac7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800ac7e:	bf00      	nop
 800ac80:	370c      	adds	r7, #12
 800ac82:	46bd      	mov	sp, r7
 800ac84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac88:	4770      	bx	lr

0800ac8a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800ac8a:	b480      	push	{r7}
 800ac8c:	b083      	sub	sp, #12
 800ac8e:	af00      	add	r7, sp, #0
 800ac90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800ac92:	bf00      	nop
 800ac94:	370c      	adds	r7, #12
 800ac96:	46bd      	mov	sp, r7
 800ac98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac9c:	4770      	bx	lr

0800ac9e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800ac9e:	b480      	push	{r7}
 800aca0:	b083      	sub	sp, #12
 800aca2:	af00      	add	r7, sp, #0
 800aca4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800aca6:	bf00      	nop
 800aca8:	370c      	adds	r7, #12
 800acaa:	46bd      	mov	sp, r7
 800acac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acb0:	4770      	bx	lr

0800acb2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800acb2:	b480      	push	{r7}
 800acb4:	b083      	sub	sp, #12
 800acb6:	af00      	add	r7, sp, #0
 800acb8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800acba:	bf00      	nop
 800acbc:	370c      	adds	r7, #12
 800acbe:	46bd      	mov	sp, r7
 800acc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acc4:	4770      	bx	lr
	...

0800acc8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800acc8:	b480      	push	{r7}
 800acca:	b085      	sub	sp, #20
 800accc:	af00      	add	r7, sp, #0
 800acce:	6078      	str	r0, [r7, #4]
 800acd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	681b      	ldr	r3, [r3, #0]
 800acd6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	4a2e      	ldr	r2, [pc, #184]	@ (800ad94 <TIM_Base_SetConfig+0xcc>)
 800acdc:	4293      	cmp	r3, r2
 800acde:	d007      	beq.n	800acf0 <TIM_Base_SetConfig+0x28>
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ace6:	d003      	beq.n	800acf0 <TIM_Base_SetConfig+0x28>
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	4a2b      	ldr	r2, [pc, #172]	@ (800ad98 <TIM_Base_SetConfig+0xd0>)
 800acec:	4293      	cmp	r3, r2
 800acee:	d108      	bne.n	800ad02 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800acf0:	68fb      	ldr	r3, [r7, #12]
 800acf2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800acf6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800acf8:	683b      	ldr	r3, [r7, #0]
 800acfa:	685b      	ldr	r3, [r3, #4]
 800acfc:	68fa      	ldr	r2, [r7, #12]
 800acfe:	4313      	orrs	r3, r2
 800ad00:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	4a23      	ldr	r2, [pc, #140]	@ (800ad94 <TIM_Base_SetConfig+0xcc>)
 800ad06:	4293      	cmp	r3, r2
 800ad08:	d00f      	beq.n	800ad2a <TIM_Base_SetConfig+0x62>
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ad10:	d00b      	beq.n	800ad2a <TIM_Base_SetConfig+0x62>
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	4a20      	ldr	r2, [pc, #128]	@ (800ad98 <TIM_Base_SetConfig+0xd0>)
 800ad16:	4293      	cmp	r3, r2
 800ad18:	d007      	beq.n	800ad2a <TIM_Base_SetConfig+0x62>
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	4a1f      	ldr	r2, [pc, #124]	@ (800ad9c <TIM_Base_SetConfig+0xd4>)
 800ad1e:	4293      	cmp	r3, r2
 800ad20:	d003      	beq.n	800ad2a <TIM_Base_SetConfig+0x62>
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	4a1e      	ldr	r2, [pc, #120]	@ (800ada0 <TIM_Base_SetConfig+0xd8>)
 800ad26:	4293      	cmp	r3, r2
 800ad28:	d108      	bne.n	800ad3c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ad2a:	68fb      	ldr	r3, [r7, #12]
 800ad2c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ad30:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ad32:	683b      	ldr	r3, [r7, #0]
 800ad34:	68db      	ldr	r3, [r3, #12]
 800ad36:	68fa      	ldr	r2, [r7, #12]
 800ad38:	4313      	orrs	r3, r2
 800ad3a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ad3c:	68fb      	ldr	r3, [r7, #12]
 800ad3e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800ad42:	683b      	ldr	r3, [r7, #0]
 800ad44:	695b      	ldr	r3, [r3, #20]
 800ad46:	4313      	orrs	r3, r2
 800ad48:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	68fa      	ldr	r2, [r7, #12]
 800ad4e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ad50:	683b      	ldr	r3, [r7, #0]
 800ad52:	689a      	ldr	r2, [r3, #8]
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ad58:	683b      	ldr	r3, [r7, #0]
 800ad5a:	681a      	ldr	r2, [r3, #0]
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	4a0c      	ldr	r2, [pc, #48]	@ (800ad94 <TIM_Base_SetConfig+0xcc>)
 800ad64:	4293      	cmp	r3, r2
 800ad66:	d007      	beq.n	800ad78 <TIM_Base_SetConfig+0xb0>
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	4a0c      	ldr	r2, [pc, #48]	@ (800ad9c <TIM_Base_SetConfig+0xd4>)
 800ad6c:	4293      	cmp	r3, r2
 800ad6e:	d003      	beq.n	800ad78 <TIM_Base_SetConfig+0xb0>
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	4a0b      	ldr	r2, [pc, #44]	@ (800ada0 <TIM_Base_SetConfig+0xd8>)
 800ad74:	4293      	cmp	r3, r2
 800ad76:	d103      	bne.n	800ad80 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ad78:	683b      	ldr	r3, [r7, #0]
 800ad7a:	691a      	ldr	r2, [r3, #16]
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	2201      	movs	r2, #1
 800ad84:	615a      	str	r2, [r3, #20]
}
 800ad86:	bf00      	nop
 800ad88:	3714      	adds	r7, #20
 800ad8a:	46bd      	mov	sp, r7
 800ad8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad90:	4770      	bx	lr
 800ad92:	bf00      	nop
 800ad94:	40012c00 	.word	0x40012c00
 800ad98:	40000400 	.word	0x40000400
 800ad9c:	40014000 	.word	0x40014000
 800ada0:	40014400 	.word	0x40014400

0800ada4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ada4:	b480      	push	{r7}
 800ada6:	b087      	sub	sp, #28
 800ada8:	af00      	add	r7, sp, #0
 800adaa:	6078      	str	r0, [r7, #4]
 800adac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	6a1b      	ldr	r3, [r3, #32]
 800adb2:	f023 0201 	bic.w	r2, r3, #1
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	6a1b      	ldr	r3, [r3, #32]
 800adbe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	685b      	ldr	r3, [r3, #4]
 800adc4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	699b      	ldr	r3, [r3, #24]
 800adca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800adcc:	68fb      	ldr	r3, [r7, #12]
 800adce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800add2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800add6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800add8:	68fb      	ldr	r3, [r7, #12]
 800adda:	f023 0303 	bic.w	r3, r3, #3
 800adde:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ade0:	683b      	ldr	r3, [r7, #0]
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	68fa      	ldr	r2, [r7, #12]
 800ade6:	4313      	orrs	r3, r2
 800ade8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800adea:	697b      	ldr	r3, [r7, #20]
 800adec:	f023 0302 	bic.w	r3, r3, #2
 800adf0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800adf2:	683b      	ldr	r3, [r7, #0]
 800adf4:	689b      	ldr	r3, [r3, #8]
 800adf6:	697a      	ldr	r2, [r7, #20]
 800adf8:	4313      	orrs	r3, r2
 800adfa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	4a24      	ldr	r2, [pc, #144]	@ (800ae90 <TIM_OC1_SetConfig+0xec>)
 800ae00:	4293      	cmp	r3, r2
 800ae02:	d007      	beq.n	800ae14 <TIM_OC1_SetConfig+0x70>
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	4a23      	ldr	r2, [pc, #140]	@ (800ae94 <TIM_OC1_SetConfig+0xf0>)
 800ae08:	4293      	cmp	r3, r2
 800ae0a:	d003      	beq.n	800ae14 <TIM_OC1_SetConfig+0x70>
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	4a22      	ldr	r2, [pc, #136]	@ (800ae98 <TIM_OC1_SetConfig+0xf4>)
 800ae10:	4293      	cmp	r3, r2
 800ae12:	d10c      	bne.n	800ae2e <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800ae14:	697b      	ldr	r3, [r7, #20]
 800ae16:	f023 0308 	bic.w	r3, r3, #8
 800ae1a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800ae1c:	683b      	ldr	r3, [r7, #0]
 800ae1e:	68db      	ldr	r3, [r3, #12]
 800ae20:	697a      	ldr	r2, [r7, #20]
 800ae22:	4313      	orrs	r3, r2
 800ae24:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800ae26:	697b      	ldr	r3, [r7, #20]
 800ae28:	f023 0304 	bic.w	r3, r3, #4
 800ae2c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	4a17      	ldr	r2, [pc, #92]	@ (800ae90 <TIM_OC1_SetConfig+0xec>)
 800ae32:	4293      	cmp	r3, r2
 800ae34:	d007      	beq.n	800ae46 <TIM_OC1_SetConfig+0xa2>
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	4a16      	ldr	r2, [pc, #88]	@ (800ae94 <TIM_OC1_SetConfig+0xf0>)
 800ae3a:	4293      	cmp	r3, r2
 800ae3c:	d003      	beq.n	800ae46 <TIM_OC1_SetConfig+0xa2>
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	4a15      	ldr	r2, [pc, #84]	@ (800ae98 <TIM_OC1_SetConfig+0xf4>)
 800ae42:	4293      	cmp	r3, r2
 800ae44:	d111      	bne.n	800ae6a <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800ae46:	693b      	ldr	r3, [r7, #16]
 800ae48:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ae4c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800ae4e:	693b      	ldr	r3, [r7, #16]
 800ae50:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800ae54:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800ae56:	683b      	ldr	r3, [r7, #0]
 800ae58:	695b      	ldr	r3, [r3, #20]
 800ae5a:	693a      	ldr	r2, [r7, #16]
 800ae5c:	4313      	orrs	r3, r2
 800ae5e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800ae60:	683b      	ldr	r3, [r7, #0]
 800ae62:	699b      	ldr	r3, [r3, #24]
 800ae64:	693a      	ldr	r2, [r7, #16]
 800ae66:	4313      	orrs	r3, r2
 800ae68:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	693a      	ldr	r2, [r7, #16]
 800ae6e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	68fa      	ldr	r2, [r7, #12]
 800ae74:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800ae76:	683b      	ldr	r3, [r7, #0]
 800ae78:	685a      	ldr	r2, [r3, #4]
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	697a      	ldr	r2, [r7, #20]
 800ae82:	621a      	str	r2, [r3, #32]
}
 800ae84:	bf00      	nop
 800ae86:	371c      	adds	r7, #28
 800ae88:	46bd      	mov	sp, r7
 800ae8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae8e:	4770      	bx	lr
 800ae90:	40012c00 	.word	0x40012c00
 800ae94:	40014000 	.word	0x40014000
 800ae98:	40014400 	.word	0x40014400

0800ae9c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ae9c:	b480      	push	{r7}
 800ae9e:	b087      	sub	sp, #28
 800aea0:	af00      	add	r7, sp, #0
 800aea2:	6078      	str	r0, [r7, #4]
 800aea4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	6a1b      	ldr	r3, [r3, #32]
 800aeaa:	f023 0210 	bic.w	r2, r3, #16
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	6a1b      	ldr	r3, [r3, #32]
 800aeb6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	685b      	ldr	r3, [r3, #4]
 800aebc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	699b      	ldr	r3, [r3, #24]
 800aec2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800aec4:	68fb      	ldr	r3, [r7, #12]
 800aec6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800aeca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800aece:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800aed0:	68fb      	ldr	r3, [r7, #12]
 800aed2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800aed6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800aed8:	683b      	ldr	r3, [r7, #0]
 800aeda:	681b      	ldr	r3, [r3, #0]
 800aedc:	021b      	lsls	r3, r3, #8
 800aede:	68fa      	ldr	r2, [r7, #12]
 800aee0:	4313      	orrs	r3, r2
 800aee2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800aee4:	697b      	ldr	r3, [r7, #20]
 800aee6:	f023 0320 	bic.w	r3, r3, #32
 800aeea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800aeec:	683b      	ldr	r3, [r7, #0]
 800aeee:	689b      	ldr	r3, [r3, #8]
 800aef0:	011b      	lsls	r3, r3, #4
 800aef2:	697a      	ldr	r2, [r7, #20]
 800aef4:	4313      	orrs	r3, r2
 800aef6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	4a22      	ldr	r2, [pc, #136]	@ (800af84 <TIM_OC2_SetConfig+0xe8>)
 800aefc:	4293      	cmp	r3, r2
 800aefe:	d10d      	bne.n	800af1c <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800af00:	697b      	ldr	r3, [r7, #20]
 800af02:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800af06:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800af08:	683b      	ldr	r3, [r7, #0]
 800af0a:	68db      	ldr	r3, [r3, #12]
 800af0c:	011b      	lsls	r3, r3, #4
 800af0e:	697a      	ldr	r2, [r7, #20]
 800af10:	4313      	orrs	r3, r2
 800af12:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800af14:	697b      	ldr	r3, [r7, #20]
 800af16:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800af1a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	4a19      	ldr	r2, [pc, #100]	@ (800af84 <TIM_OC2_SetConfig+0xe8>)
 800af20:	4293      	cmp	r3, r2
 800af22:	d007      	beq.n	800af34 <TIM_OC2_SetConfig+0x98>
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	4a18      	ldr	r2, [pc, #96]	@ (800af88 <TIM_OC2_SetConfig+0xec>)
 800af28:	4293      	cmp	r3, r2
 800af2a:	d003      	beq.n	800af34 <TIM_OC2_SetConfig+0x98>
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	4a17      	ldr	r2, [pc, #92]	@ (800af8c <TIM_OC2_SetConfig+0xf0>)
 800af30:	4293      	cmp	r3, r2
 800af32:	d113      	bne.n	800af5c <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800af34:	693b      	ldr	r3, [r7, #16]
 800af36:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800af3a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800af3c:	693b      	ldr	r3, [r7, #16]
 800af3e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800af42:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800af44:	683b      	ldr	r3, [r7, #0]
 800af46:	695b      	ldr	r3, [r3, #20]
 800af48:	009b      	lsls	r3, r3, #2
 800af4a:	693a      	ldr	r2, [r7, #16]
 800af4c:	4313      	orrs	r3, r2
 800af4e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800af50:	683b      	ldr	r3, [r7, #0]
 800af52:	699b      	ldr	r3, [r3, #24]
 800af54:	009b      	lsls	r3, r3, #2
 800af56:	693a      	ldr	r2, [r7, #16]
 800af58:	4313      	orrs	r3, r2
 800af5a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	693a      	ldr	r2, [r7, #16]
 800af60:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	68fa      	ldr	r2, [r7, #12]
 800af66:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800af68:	683b      	ldr	r3, [r7, #0]
 800af6a:	685a      	ldr	r2, [r3, #4]
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	697a      	ldr	r2, [r7, #20]
 800af74:	621a      	str	r2, [r3, #32]
}
 800af76:	bf00      	nop
 800af78:	371c      	adds	r7, #28
 800af7a:	46bd      	mov	sp, r7
 800af7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af80:	4770      	bx	lr
 800af82:	bf00      	nop
 800af84:	40012c00 	.word	0x40012c00
 800af88:	40014000 	.word	0x40014000
 800af8c:	40014400 	.word	0x40014400

0800af90 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800af90:	b480      	push	{r7}
 800af92:	b087      	sub	sp, #28
 800af94:	af00      	add	r7, sp, #0
 800af96:	6078      	str	r0, [r7, #4]
 800af98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	6a1b      	ldr	r3, [r3, #32]
 800af9e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	6a1b      	ldr	r3, [r3, #32]
 800afaa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	685b      	ldr	r3, [r3, #4]
 800afb0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	69db      	ldr	r3, [r3, #28]
 800afb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800afb8:	68fb      	ldr	r3, [r7, #12]
 800afba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800afbe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800afc2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800afc4:	68fb      	ldr	r3, [r7, #12]
 800afc6:	f023 0303 	bic.w	r3, r3, #3
 800afca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800afcc:	683b      	ldr	r3, [r7, #0]
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	68fa      	ldr	r2, [r7, #12]
 800afd2:	4313      	orrs	r3, r2
 800afd4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800afd6:	697b      	ldr	r3, [r7, #20]
 800afd8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800afdc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800afde:	683b      	ldr	r3, [r7, #0]
 800afe0:	689b      	ldr	r3, [r3, #8]
 800afe2:	021b      	lsls	r3, r3, #8
 800afe4:	697a      	ldr	r2, [r7, #20]
 800afe6:	4313      	orrs	r3, r2
 800afe8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	4a21      	ldr	r2, [pc, #132]	@ (800b074 <TIM_OC3_SetConfig+0xe4>)
 800afee:	4293      	cmp	r3, r2
 800aff0:	d10d      	bne.n	800b00e <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800aff2:	697b      	ldr	r3, [r7, #20]
 800aff4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800aff8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800affa:	683b      	ldr	r3, [r7, #0]
 800affc:	68db      	ldr	r3, [r3, #12]
 800affe:	021b      	lsls	r3, r3, #8
 800b000:	697a      	ldr	r2, [r7, #20]
 800b002:	4313      	orrs	r3, r2
 800b004:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b006:	697b      	ldr	r3, [r7, #20]
 800b008:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800b00c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	4a18      	ldr	r2, [pc, #96]	@ (800b074 <TIM_OC3_SetConfig+0xe4>)
 800b012:	4293      	cmp	r3, r2
 800b014:	d007      	beq.n	800b026 <TIM_OC3_SetConfig+0x96>
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	4a17      	ldr	r2, [pc, #92]	@ (800b078 <TIM_OC3_SetConfig+0xe8>)
 800b01a:	4293      	cmp	r3, r2
 800b01c:	d003      	beq.n	800b026 <TIM_OC3_SetConfig+0x96>
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	4a16      	ldr	r2, [pc, #88]	@ (800b07c <TIM_OC3_SetConfig+0xec>)
 800b022:	4293      	cmp	r3, r2
 800b024:	d113      	bne.n	800b04e <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b026:	693b      	ldr	r3, [r7, #16]
 800b028:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b02c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b02e:	693b      	ldr	r3, [r7, #16]
 800b030:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800b034:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b036:	683b      	ldr	r3, [r7, #0]
 800b038:	695b      	ldr	r3, [r3, #20]
 800b03a:	011b      	lsls	r3, r3, #4
 800b03c:	693a      	ldr	r2, [r7, #16]
 800b03e:	4313      	orrs	r3, r2
 800b040:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b042:	683b      	ldr	r3, [r7, #0]
 800b044:	699b      	ldr	r3, [r3, #24]
 800b046:	011b      	lsls	r3, r3, #4
 800b048:	693a      	ldr	r2, [r7, #16]
 800b04a:	4313      	orrs	r3, r2
 800b04c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	693a      	ldr	r2, [r7, #16]
 800b052:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	68fa      	ldr	r2, [r7, #12]
 800b058:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b05a:	683b      	ldr	r3, [r7, #0]
 800b05c:	685a      	ldr	r2, [r3, #4]
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	697a      	ldr	r2, [r7, #20]
 800b066:	621a      	str	r2, [r3, #32]
}
 800b068:	bf00      	nop
 800b06a:	371c      	adds	r7, #28
 800b06c:	46bd      	mov	sp, r7
 800b06e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b072:	4770      	bx	lr
 800b074:	40012c00 	.word	0x40012c00
 800b078:	40014000 	.word	0x40014000
 800b07c:	40014400 	.word	0x40014400

0800b080 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b080:	b480      	push	{r7}
 800b082:	b087      	sub	sp, #28
 800b084:	af00      	add	r7, sp, #0
 800b086:	6078      	str	r0, [r7, #4]
 800b088:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	6a1b      	ldr	r3, [r3, #32]
 800b08e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	6a1b      	ldr	r3, [r3, #32]
 800b09a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	685b      	ldr	r3, [r3, #4]
 800b0a0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	69db      	ldr	r3, [r3, #28]
 800b0a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b0a8:	68fb      	ldr	r3, [r7, #12]
 800b0aa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800b0ae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b0b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b0b4:	68fb      	ldr	r3, [r7, #12]
 800b0b6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b0ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b0bc:	683b      	ldr	r3, [r7, #0]
 800b0be:	681b      	ldr	r3, [r3, #0]
 800b0c0:	021b      	lsls	r3, r3, #8
 800b0c2:	68fa      	ldr	r2, [r7, #12]
 800b0c4:	4313      	orrs	r3, r2
 800b0c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b0c8:	693b      	ldr	r3, [r7, #16]
 800b0ca:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800b0ce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b0d0:	683b      	ldr	r3, [r7, #0]
 800b0d2:	689b      	ldr	r3, [r3, #8]
 800b0d4:	031b      	lsls	r3, r3, #12
 800b0d6:	693a      	ldr	r2, [r7, #16]
 800b0d8:	4313      	orrs	r3, r2
 800b0da:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	4a14      	ldr	r2, [pc, #80]	@ (800b130 <TIM_OC4_SetConfig+0xb0>)
 800b0e0:	4293      	cmp	r3, r2
 800b0e2:	d007      	beq.n	800b0f4 <TIM_OC4_SetConfig+0x74>
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	4a13      	ldr	r2, [pc, #76]	@ (800b134 <TIM_OC4_SetConfig+0xb4>)
 800b0e8:	4293      	cmp	r3, r2
 800b0ea:	d003      	beq.n	800b0f4 <TIM_OC4_SetConfig+0x74>
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	4a12      	ldr	r2, [pc, #72]	@ (800b138 <TIM_OC4_SetConfig+0xb8>)
 800b0f0:	4293      	cmp	r3, r2
 800b0f2:	d109      	bne.n	800b108 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b0f4:	697b      	ldr	r3, [r7, #20]
 800b0f6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800b0fa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b0fc:	683b      	ldr	r3, [r7, #0]
 800b0fe:	695b      	ldr	r3, [r3, #20]
 800b100:	019b      	lsls	r3, r3, #6
 800b102:	697a      	ldr	r2, [r7, #20]
 800b104:	4313      	orrs	r3, r2
 800b106:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	697a      	ldr	r2, [r7, #20]
 800b10c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	68fa      	ldr	r2, [r7, #12]
 800b112:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b114:	683b      	ldr	r3, [r7, #0]
 800b116:	685a      	ldr	r2, [r3, #4]
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	693a      	ldr	r2, [r7, #16]
 800b120:	621a      	str	r2, [r3, #32]
}
 800b122:	bf00      	nop
 800b124:	371c      	adds	r7, #28
 800b126:	46bd      	mov	sp, r7
 800b128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b12c:	4770      	bx	lr
 800b12e:	bf00      	nop
 800b130:	40012c00 	.word	0x40012c00
 800b134:	40014000 	.word	0x40014000
 800b138:	40014400 	.word	0x40014400

0800b13c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800b13c:	b480      	push	{r7}
 800b13e:	b087      	sub	sp, #28
 800b140:	af00      	add	r7, sp, #0
 800b142:	6078      	str	r0, [r7, #4]
 800b144:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	6a1b      	ldr	r3, [r3, #32]
 800b14a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	6a1b      	ldr	r3, [r3, #32]
 800b156:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	685b      	ldr	r3, [r3, #4]
 800b15c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b162:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800b164:	68fb      	ldr	r3, [r7, #12]
 800b166:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b16a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b16e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b170:	683b      	ldr	r3, [r7, #0]
 800b172:	681b      	ldr	r3, [r3, #0]
 800b174:	68fa      	ldr	r2, [r7, #12]
 800b176:	4313      	orrs	r3, r2
 800b178:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800b17a:	693b      	ldr	r3, [r7, #16]
 800b17c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800b180:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800b182:	683b      	ldr	r3, [r7, #0]
 800b184:	689b      	ldr	r3, [r3, #8]
 800b186:	041b      	lsls	r3, r3, #16
 800b188:	693a      	ldr	r2, [r7, #16]
 800b18a:	4313      	orrs	r3, r2
 800b18c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	4a13      	ldr	r2, [pc, #76]	@ (800b1e0 <TIM_OC5_SetConfig+0xa4>)
 800b192:	4293      	cmp	r3, r2
 800b194:	d007      	beq.n	800b1a6 <TIM_OC5_SetConfig+0x6a>
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	4a12      	ldr	r2, [pc, #72]	@ (800b1e4 <TIM_OC5_SetConfig+0xa8>)
 800b19a:	4293      	cmp	r3, r2
 800b19c:	d003      	beq.n	800b1a6 <TIM_OC5_SetConfig+0x6a>
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	4a11      	ldr	r2, [pc, #68]	@ (800b1e8 <TIM_OC5_SetConfig+0xac>)
 800b1a2:	4293      	cmp	r3, r2
 800b1a4:	d109      	bne.n	800b1ba <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800b1a6:	697b      	ldr	r3, [r7, #20]
 800b1a8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b1ac:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800b1ae:	683b      	ldr	r3, [r7, #0]
 800b1b0:	695b      	ldr	r3, [r3, #20]
 800b1b2:	021b      	lsls	r3, r3, #8
 800b1b4:	697a      	ldr	r2, [r7, #20]
 800b1b6:	4313      	orrs	r3, r2
 800b1b8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	697a      	ldr	r2, [r7, #20]
 800b1be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	68fa      	ldr	r2, [r7, #12]
 800b1c4:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800b1c6:	683b      	ldr	r3, [r7, #0]
 800b1c8:	685a      	ldr	r2, [r3, #4]
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	693a      	ldr	r2, [r7, #16]
 800b1d2:	621a      	str	r2, [r3, #32]
}
 800b1d4:	bf00      	nop
 800b1d6:	371c      	adds	r7, #28
 800b1d8:	46bd      	mov	sp, r7
 800b1da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1de:	4770      	bx	lr
 800b1e0:	40012c00 	.word	0x40012c00
 800b1e4:	40014000 	.word	0x40014000
 800b1e8:	40014400 	.word	0x40014400

0800b1ec <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800b1ec:	b480      	push	{r7}
 800b1ee:	b087      	sub	sp, #28
 800b1f0:	af00      	add	r7, sp, #0
 800b1f2:	6078      	str	r0, [r7, #4]
 800b1f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	6a1b      	ldr	r3, [r3, #32]
 800b1fa:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	6a1b      	ldr	r3, [r3, #32]
 800b206:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	685b      	ldr	r3, [r3, #4]
 800b20c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b212:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800b214:	68fb      	ldr	r3, [r7, #12]
 800b216:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800b21a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b21e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b220:	683b      	ldr	r3, [r7, #0]
 800b222:	681b      	ldr	r3, [r3, #0]
 800b224:	021b      	lsls	r3, r3, #8
 800b226:	68fa      	ldr	r2, [r7, #12]
 800b228:	4313      	orrs	r3, r2
 800b22a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800b22c:	693b      	ldr	r3, [r7, #16]
 800b22e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800b232:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800b234:	683b      	ldr	r3, [r7, #0]
 800b236:	689b      	ldr	r3, [r3, #8]
 800b238:	051b      	lsls	r3, r3, #20
 800b23a:	693a      	ldr	r2, [r7, #16]
 800b23c:	4313      	orrs	r3, r2
 800b23e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	4a14      	ldr	r2, [pc, #80]	@ (800b294 <TIM_OC6_SetConfig+0xa8>)
 800b244:	4293      	cmp	r3, r2
 800b246:	d007      	beq.n	800b258 <TIM_OC6_SetConfig+0x6c>
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	4a13      	ldr	r2, [pc, #76]	@ (800b298 <TIM_OC6_SetConfig+0xac>)
 800b24c:	4293      	cmp	r3, r2
 800b24e:	d003      	beq.n	800b258 <TIM_OC6_SetConfig+0x6c>
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	4a12      	ldr	r2, [pc, #72]	@ (800b29c <TIM_OC6_SetConfig+0xb0>)
 800b254:	4293      	cmp	r3, r2
 800b256:	d109      	bne.n	800b26c <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800b258:	697b      	ldr	r3, [r7, #20]
 800b25a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800b25e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800b260:	683b      	ldr	r3, [r7, #0]
 800b262:	695b      	ldr	r3, [r3, #20]
 800b264:	029b      	lsls	r3, r3, #10
 800b266:	697a      	ldr	r2, [r7, #20]
 800b268:	4313      	orrs	r3, r2
 800b26a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	697a      	ldr	r2, [r7, #20]
 800b270:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	68fa      	ldr	r2, [r7, #12]
 800b276:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800b278:	683b      	ldr	r3, [r7, #0]
 800b27a:	685a      	ldr	r2, [r3, #4]
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	693a      	ldr	r2, [r7, #16]
 800b284:	621a      	str	r2, [r3, #32]
}
 800b286:	bf00      	nop
 800b288:	371c      	adds	r7, #28
 800b28a:	46bd      	mov	sp, r7
 800b28c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b290:	4770      	bx	lr
 800b292:	bf00      	nop
 800b294:	40012c00 	.word	0x40012c00
 800b298:	40014000 	.word	0x40014000
 800b29c:	40014400 	.word	0x40014400

0800b2a0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b2a0:	b480      	push	{r7}
 800b2a2:	b087      	sub	sp, #28
 800b2a4:	af00      	add	r7, sp, #0
 800b2a6:	60f8      	str	r0, [r7, #12]
 800b2a8:	60b9      	str	r1, [r7, #8]
 800b2aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b2ac:	68fb      	ldr	r3, [r7, #12]
 800b2ae:	6a1b      	ldr	r3, [r3, #32]
 800b2b0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b2b2:	68fb      	ldr	r3, [r7, #12]
 800b2b4:	6a1b      	ldr	r3, [r3, #32]
 800b2b6:	f023 0201 	bic.w	r2, r3, #1
 800b2ba:	68fb      	ldr	r3, [r7, #12]
 800b2bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b2be:	68fb      	ldr	r3, [r7, #12]
 800b2c0:	699b      	ldr	r3, [r3, #24]
 800b2c2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b2c4:	693b      	ldr	r3, [r7, #16]
 800b2c6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800b2ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	011b      	lsls	r3, r3, #4
 800b2d0:	693a      	ldr	r2, [r7, #16]
 800b2d2:	4313      	orrs	r3, r2
 800b2d4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b2d6:	697b      	ldr	r3, [r7, #20]
 800b2d8:	f023 030a 	bic.w	r3, r3, #10
 800b2dc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b2de:	697a      	ldr	r2, [r7, #20]
 800b2e0:	68bb      	ldr	r3, [r7, #8]
 800b2e2:	4313      	orrs	r3, r2
 800b2e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b2e6:	68fb      	ldr	r3, [r7, #12]
 800b2e8:	693a      	ldr	r2, [r7, #16]
 800b2ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b2ec:	68fb      	ldr	r3, [r7, #12]
 800b2ee:	697a      	ldr	r2, [r7, #20]
 800b2f0:	621a      	str	r2, [r3, #32]
}
 800b2f2:	bf00      	nop
 800b2f4:	371c      	adds	r7, #28
 800b2f6:	46bd      	mov	sp, r7
 800b2f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2fc:	4770      	bx	lr

0800b2fe <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b2fe:	b480      	push	{r7}
 800b300:	b087      	sub	sp, #28
 800b302:	af00      	add	r7, sp, #0
 800b304:	60f8      	str	r0, [r7, #12]
 800b306:	60b9      	str	r1, [r7, #8]
 800b308:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b30a:	68fb      	ldr	r3, [r7, #12]
 800b30c:	6a1b      	ldr	r3, [r3, #32]
 800b30e:	f023 0210 	bic.w	r2, r3, #16
 800b312:	68fb      	ldr	r3, [r7, #12]
 800b314:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b316:	68fb      	ldr	r3, [r7, #12]
 800b318:	699b      	ldr	r3, [r3, #24]
 800b31a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b31c:	68fb      	ldr	r3, [r7, #12]
 800b31e:	6a1b      	ldr	r3, [r3, #32]
 800b320:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b322:	697b      	ldr	r3, [r7, #20]
 800b324:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800b328:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	031b      	lsls	r3, r3, #12
 800b32e:	697a      	ldr	r2, [r7, #20]
 800b330:	4313      	orrs	r3, r2
 800b332:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b334:	693b      	ldr	r3, [r7, #16]
 800b336:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800b33a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b33c:	68bb      	ldr	r3, [r7, #8]
 800b33e:	011b      	lsls	r3, r3, #4
 800b340:	693a      	ldr	r2, [r7, #16]
 800b342:	4313      	orrs	r3, r2
 800b344:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b346:	68fb      	ldr	r3, [r7, #12]
 800b348:	697a      	ldr	r2, [r7, #20]
 800b34a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b34c:	68fb      	ldr	r3, [r7, #12]
 800b34e:	693a      	ldr	r2, [r7, #16]
 800b350:	621a      	str	r2, [r3, #32]
}
 800b352:	bf00      	nop
 800b354:	371c      	adds	r7, #28
 800b356:	46bd      	mov	sp, r7
 800b358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b35c:	4770      	bx	lr

0800b35e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b35e:	b480      	push	{r7}
 800b360:	b085      	sub	sp, #20
 800b362:	af00      	add	r7, sp, #0
 800b364:	6078      	str	r0, [r7, #4]
 800b366:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	689b      	ldr	r3, [r3, #8]
 800b36c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b36e:	68fb      	ldr	r3, [r7, #12]
 800b370:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b374:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b376:	683a      	ldr	r2, [r7, #0]
 800b378:	68fb      	ldr	r3, [r7, #12]
 800b37a:	4313      	orrs	r3, r2
 800b37c:	f043 0307 	orr.w	r3, r3, #7
 800b380:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	68fa      	ldr	r2, [r7, #12]
 800b386:	609a      	str	r2, [r3, #8]
}
 800b388:	bf00      	nop
 800b38a:	3714      	adds	r7, #20
 800b38c:	46bd      	mov	sp, r7
 800b38e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b392:	4770      	bx	lr

0800b394 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b394:	b480      	push	{r7}
 800b396:	b087      	sub	sp, #28
 800b398:	af00      	add	r7, sp, #0
 800b39a:	60f8      	str	r0, [r7, #12]
 800b39c:	60b9      	str	r1, [r7, #8]
 800b39e:	607a      	str	r2, [r7, #4]
 800b3a0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b3a2:	68fb      	ldr	r3, [r7, #12]
 800b3a4:	689b      	ldr	r3, [r3, #8]
 800b3a6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b3a8:	697b      	ldr	r3, [r7, #20]
 800b3aa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800b3ae:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b3b0:	683b      	ldr	r3, [r7, #0]
 800b3b2:	021a      	lsls	r2, r3, #8
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	431a      	orrs	r2, r3
 800b3b8:	68bb      	ldr	r3, [r7, #8]
 800b3ba:	4313      	orrs	r3, r2
 800b3bc:	697a      	ldr	r2, [r7, #20]
 800b3be:	4313      	orrs	r3, r2
 800b3c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b3c2:	68fb      	ldr	r3, [r7, #12]
 800b3c4:	697a      	ldr	r2, [r7, #20]
 800b3c6:	609a      	str	r2, [r3, #8]
}
 800b3c8:	bf00      	nop
 800b3ca:	371c      	adds	r7, #28
 800b3cc:	46bd      	mov	sp, r7
 800b3ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3d2:	4770      	bx	lr

0800b3d4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800b3d4:	b480      	push	{r7}
 800b3d6:	b087      	sub	sp, #28
 800b3d8:	af00      	add	r7, sp, #0
 800b3da:	60f8      	str	r0, [r7, #12]
 800b3dc:	60b9      	str	r1, [r7, #8]
 800b3de:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b3e0:	68bb      	ldr	r3, [r7, #8]
 800b3e2:	f003 031f 	and.w	r3, r3, #31
 800b3e6:	2201      	movs	r2, #1
 800b3e8:	fa02 f303 	lsl.w	r3, r2, r3
 800b3ec:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800b3ee:	68fb      	ldr	r3, [r7, #12]
 800b3f0:	6a1a      	ldr	r2, [r3, #32]
 800b3f2:	697b      	ldr	r3, [r7, #20]
 800b3f4:	43db      	mvns	r3, r3
 800b3f6:	401a      	ands	r2, r3
 800b3f8:	68fb      	ldr	r3, [r7, #12]
 800b3fa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b3fc:	68fb      	ldr	r3, [r7, #12]
 800b3fe:	6a1a      	ldr	r2, [r3, #32]
 800b400:	68bb      	ldr	r3, [r7, #8]
 800b402:	f003 031f 	and.w	r3, r3, #31
 800b406:	6879      	ldr	r1, [r7, #4]
 800b408:	fa01 f303 	lsl.w	r3, r1, r3
 800b40c:	431a      	orrs	r2, r3
 800b40e:	68fb      	ldr	r3, [r7, #12]
 800b410:	621a      	str	r2, [r3, #32]
}
 800b412:	bf00      	nop
 800b414:	371c      	adds	r7, #28
 800b416:	46bd      	mov	sp, r7
 800b418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b41c:	4770      	bx	lr
	...

0800b420 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b420:	b480      	push	{r7}
 800b422:	b085      	sub	sp, #20
 800b424:	af00      	add	r7, sp, #0
 800b426:	6078      	str	r0, [r7, #4]
 800b428:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b430:	2b01      	cmp	r3, #1
 800b432:	d101      	bne.n	800b438 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b434:	2302      	movs	r3, #2
 800b436:	e054      	b.n	800b4e2 <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	2201      	movs	r2, #1
 800b43c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	2202      	movs	r2, #2
 800b444:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	681b      	ldr	r3, [r3, #0]
 800b44c:	685b      	ldr	r3, [r3, #4]
 800b44e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	681b      	ldr	r3, [r3, #0]
 800b454:	689b      	ldr	r3, [r3, #8]
 800b456:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	681b      	ldr	r3, [r3, #0]
 800b45c:	4a24      	ldr	r2, [pc, #144]	@ (800b4f0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800b45e:	4293      	cmp	r3, r2
 800b460:	d108      	bne.n	800b474 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b462:	68fb      	ldr	r3, [r7, #12]
 800b464:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800b468:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b46a:	683b      	ldr	r3, [r7, #0]
 800b46c:	685b      	ldr	r3, [r3, #4]
 800b46e:	68fa      	ldr	r2, [r7, #12]
 800b470:	4313      	orrs	r3, r2
 800b472:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b474:	68fb      	ldr	r3, [r7, #12]
 800b476:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b47a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b47c:	683b      	ldr	r3, [r7, #0]
 800b47e:	681b      	ldr	r3, [r3, #0]
 800b480:	68fa      	ldr	r2, [r7, #12]
 800b482:	4313      	orrs	r3, r2
 800b484:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	681b      	ldr	r3, [r3, #0]
 800b48a:	68fa      	ldr	r2, [r7, #12]
 800b48c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	681b      	ldr	r3, [r3, #0]
 800b492:	4a17      	ldr	r2, [pc, #92]	@ (800b4f0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800b494:	4293      	cmp	r3, r2
 800b496:	d00e      	beq.n	800b4b6 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b4a0:	d009      	beq.n	800b4b6 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	681b      	ldr	r3, [r3, #0]
 800b4a6:	4a13      	ldr	r2, [pc, #76]	@ (800b4f4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800b4a8:	4293      	cmp	r3, r2
 800b4aa:	d004      	beq.n	800b4b6 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	681b      	ldr	r3, [r3, #0]
 800b4b0:	4a11      	ldr	r2, [pc, #68]	@ (800b4f8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800b4b2:	4293      	cmp	r3, r2
 800b4b4:	d10c      	bne.n	800b4d0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b4b6:	68bb      	ldr	r3, [r7, #8]
 800b4b8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b4bc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b4be:	683b      	ldr	r3, [r7, #0]
 800b4c0:	689b      	ldr	r3, [r3, #8]
 800b4c2:	68ba      	ldr	r2, [r7, #8]
 800b4c4:	4313      	orrs	r3, r2
 800b4c6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	681b      	ldr	r3, [r3, #0]
 800b4cc:	68ba      	ldr	r2, [r7, #8]
 800b4ce:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	2201      	movs	r2, #1
 800b4d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	2200      	movs	r2, #0
 800b4dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800b4e0:	2300      	movs	r3, #0
}
 800b4e2:	4618      	mov	r0, r3
 800b4e4:	3714      	adds	r7, #20
 800b4e6:	46bd      	mov	sp, r7
 800b4e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ec:	4770      	bx	lr
 800b4ee:	bf00      	nop
 800b4f0:	40012c00 	.word	0x40012c00
 800b4f4:	40000400 	.word	0x40000400
 800b4f8:	40014000 	.word	0x40014000

0800b4fc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800b4fc:	b480      	push	{r7}
 800b4fe:	b085      	sub	sp, #20
 800b500:	af00      	add	r7, sp, #0
 800b502:	6078      	str	r0, [r7, #4]
 800b504:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800b506:	2300      	movs	r3, #0
 800b508:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b510:	2b01      	cmp	r3, #1
 800b512:	d101      	bne.n	800b518 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800b514:	2302      	movs	r3, #2
 800b516:	e060      	b.n	800b5da <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	2201      	movs	r2, #1
 800b51c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800b520:	68fb      	ldr	r3, [r7, #12]
 800b522:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800b526:	683b      	ldr	r3, [r7, #0]
 800b528:	68db      	ldr	r3, [r3, #12]
 800b52a:	4313      	orrs	r3, r2
 800b52c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800b52e:	68fb      	ldr	r3, [r7, #12]
 800b530:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800b534:	683b      	ldr	r3, [r7, #0]
 800b536:	689b      	ldr	r3, [r3, #8]
 800b538:	4313      	orrs	r3, r2
 800b53a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800b53c:	68fb      	ldr	r3, [r7, #12]
 800b53e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800b542:	683b      	ldr	r3, [r7, #0]
 800b544:	685b      	ldr	r3, [r3, #4]
 800b546:	4313      	orrs	r3, r2
 800b548:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800b54a:	68fb      	ldr	r3, [r7, #12]
 800b54c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800b550:	683b      	ldr	r3, [r7, #0]
 800b552:	681b      	ldr	r3, [r3, #0]
 800b554:	4313      	orrs	r3, r2
 800b556:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800b558:	68fb      	ldr	r3, [r7, #12]
 800b55a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800b55e:	683b      	ldr	r3, [r7, #0]
 800b560:	691b      	ldr	r3, [r3, #16]
 800b562:	4313      	orrs	r3, r2
 800b564:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800b566:	68fb      	ldr	r3, [r7, #12]
 800b568:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800b56c:	683b      	ldr	r3, [r7, #0]
 800b56e:	695b      	ldr	r3, [r3, #20]
 800b570:	4313      	orrs	r3, r2
 800b572:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800b574:	68fb      	ldr	r3, [r7, #12]
 800b576:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800b57a:	683b      	ldr	r3, [r7, #0]
 800b57c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b57e:	4313      	orrs	r3, r2
 800b580:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800b582:	68fb      	ldr	r3, [r7, #12]
 800b584:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800b588:	683b      	ldr	r3, [r7, #0]
 800b58a:	699b      	ldr	r3, [r3, #24]
 800b58c:	041b      	lsls	r3, r3, #16
 800b58e:	4313      	orrs	r3, r2
 800b590:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	681b      	ldr	r3, [r3, #0]
 800b596:	4a14      	ldr	r2, [pc, #80]	@ (800b5e8 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 800b598:	4293      	cmp	r3, r2
 800b59a:	d115      	bne.n	800b5c8 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800b59c:	68fb      	ldr	r3, [r7, #12]
 800b59e:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800b5a2:	683b      	ldr	r3, [r7, #0]
 800b5a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b5a6:	051b      	lsls	r3, r3, #20
 800b5a8:	4313      	orrs	r3, r2
 800b5aa:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800b5ac:	68fb      	ldr	r3, [r7, #12]
 800b5ae:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800b5b2:	683b      	ldr	r3, [r7, #0]
 800b5b4:	69db      	ldr	r3, [r3, #28]
 800b5b6:	4313      	orrs	r3, r2
 800b5b8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800b5ba:	68fb      	ldr	r3, [r7, #12]
 800b5bc:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800b5c0:	683b      	ldr	r3, [r7, #0]
 800b5c2:	6a1b      	ldr	r3, [r3, #32]
 800b5c4:	4313      	orrs	r3, r2
 800b5c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	681b      	ldr	r3, [r3, #0]
 800b5cc:	68fa      	ldr	r2, [r7, #12]
 800b5ce:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	2200      	movs	r2, #0
 800b5d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800b5d8:	2300      	movs	r3, #0
}
 800b5da:	4618      	mov	r0, r3
 800b5dc:	3714      	adds	r7, #20
 800b5de:	46bd      	mov	sp, r7
 800b5e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5e4:	4770      	bx	lr
 800b5e6:	bf00      	nop
 800b5e8:	40012c00 	.word	0x40012c00

0800b5ec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b5ec:	b480      	push	{r7}
 800b5ee:	b083      	sub	sp, #12
 800b5f0:	af00      	add	r7, sp, #0
 800b5f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b5f4:	bf00      	nop
 800b5f6:	370c      	adds	r7, #12
 800b5f8:	46bd      	mov	sp, r7
 800b5fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5fe:	4770      	bx	lr

0800b600 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b600:	b480      	push	{r7}
 800b602:	b083      	sub	sp, #12
 800b604:	af00      	add	r7, sp, #0
 800b606:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b608:	bf00      	nop
 800b60a:	370c      	adds	r7, #12
 800b60c:	46bd      	mov	sp, r7
 800b60e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b612:	4770      	bx	lr

0800b614 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800b614:	b480      	push	{r7}
 800b616:	b083      	sub	sp, #12
 800b618:	af00      	add	r7, sp, #0
 800b61a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800b61c:	bf00      	nop
 800b61e:	370c      	adds	r7, #12
 800b620:	46bd      	mov	sp, r7
 800b622:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b626:	4770      	bx	lr

0800b628 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b628:	b580      	push	{r7, lr}
 800b62a:	b082      	sub	sp, #8
 800b62c:	af00      	add	r7, sp, #0
 800b62e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	2b00      	cmp	r3, #0
 800b634:	d101      	bne.n	800b63a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b636:	2301      	movs	r3, #1
 800b638:	e040      	b.n	800b6bc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b63e:	2b00      	cmp	r3, #0
 800b640:	d106      	bne.n	800b650 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	2200      	movs	r2, #0
 800b646:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b64a:	6878      	ldr	r0, [r7, #4]
 800b64c:	f7fa fc3a 	bl	8005ec4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	2224      	movs	r2, #36	@ 0x24
 800b654:	679a      	str	r2, [r3, #120]	@ 0x78

  __HAL_UART_DISABLE(huart);
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	681b      	ldr	r3, [r3, #0]
 800b65a:	681a      	ldr	r2, [r3, #0]
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	681b      	ldr	r3, [r3, #0]
 800b660:	f022 0201 	bic.w	r2, r2, #1
 800b664:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b666:	6878      	ldr	r0, [r7, #4]
 800b668:	f000 fbde 	bl	800be28 <UART_SetConfig>
 800b66c:	4603      	mov	r3, r0
 800b66e:	2b01      	cmp	r3, #1
 800b670:	d101      	bne.n	800b676 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800b672:	2301      	movs	r3, #1
 800b674:	e022      	b.n	800b6bc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	d002      	beq.n	800b684 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800b67e:	6878      	ldr	r0, [r7, #4]
 800b680:	f000 fe58 	bl	800c334 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	681b      	ldr	r3, [r3, #0]
 800b688:	685a      	ldr	r2, [r3, #4]
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	681b      	ldr	r3, [r3, #0]
 800b68e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800b692:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	681b      	ldr	r3, [r3, #0]
 800b698:	689a      	ldr	r2, [r3, #8]
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	681b      	ldr	r3, [r3, #0]
 800b69e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800b6a2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	681b      	ldr	r3, [r3, #0]
 800b6a8:	681a      	ldr	r2, [r3, #0]
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	681b      	ldr	r3, [r3, #0]
 800b6ae:	f042 0201 	orr.w	r2, r2, #1
 800b6b2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b6b4:	6878      	ldr	r0, [r7, #4]
 800b6b6:	f000 fedf 	bl	800c478 <UART_CheckIdleState>
 800b6ba:	4603      	mov	r3, r0
}
 800b6bc:	4618      	mov	r0, r3
 800b6be:	3708      	adds	r7, #8
 800b6c0:	46bd      	mov	sp, r7
 800b6c2:	bd80      	pop	{r7, pc}

0800b6c4 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800b6c4:	b480      	push	{r7}
 800b6c6:	b08b      	sub	sp, #44	@ 0x2c
 800b6c8:	af00      	add	r7, sp, #0
 800b6ca:	60f8      	str	r0, [r7, #12]
 800b6cc:	60b9      	str	r1, [r7, #8]
 800b6ce:	4613      	mov	r3, r2
 800b6d0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b6d2:	68fb      	ldr	r3, [r7, #12]
 800b6d4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b6d6:	2b20      	cmp	r3, #32
 800b6d8:	d156      	bne.n	800b788 <HAL_UART_Transmit_IT+0xc4>
  {
    if ((pData == NULL) || (Size == 0U))
 800b6da:	68bb      	ldr	r3, [r7, #8]
 800b6dc:	2b00      	cmp	r3, #0
 800b6de:	d002      	beq.n	800b6e6 <HAL_UART_Transmit_IT+0x22>
 800b6e0:	88fb      	ldrh	r3, [r7, #6]
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	d101      	bne.n	800b6ea <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 800b6e6:	2301      	movs	r3, #1
 800b6e8:	e04f      	b.n	800b78a <HAL_UART_Transmit_IT+0xc6>
    }

    __HAL_LOCK(huart);
 800b6ea:	68fb      	ldr	r3, [r7, #12]
 800b6ec:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 800b6f0:	2b01      	cmp	r3, #1
 800b6f2:	d101      	bne.n	800b6f8 <HAL_UART_Transmit_IT+0x34>
 800b6f4:	2302      	movs	r3, #2
 800b6f6:	e048      	b.n	800b78a <HAL_UART_Transmit_IT+0xc6>
 800b6f8:	68fb      	ldr	r3, [r7, #12]
 800b6fa:	2201      	movs	r2, #1
 800b6fc:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

    huart->pTxBuffPtr  = pData;
 800b700:	68fb      	ldr	r3, [r7, #12]
 800b702:	68ba      	ldr	r2, [r7, #8]
 800b704:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 800b706:	68fb      	ldr	r3, [r7, #12]
 800b708:	88fa      	ldrh	r2, [r7, #6]
 800b70a:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800b70e:	68fb      	ldr	r3, [r7, #12]
 800b710:	88fa      	ldrh	r2, [r7, #6]
 800b712:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    huart->TxISR       = NULL;
 800b716:	68fb      	ldr	r3, [r7, #12]
 800b718:	2200      	movs	r2, #0
 800b71a:	669a      	str	r2, [r3, #104]	@ 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b71c:	68fb      	ldr	r3, [r7, #12]
 800b71e:	2200      	movs	r2, #0
 800b720:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b724:	68fb      	ldr	r3, [r7, #12]
 800b726:	2221      	movs	r2, #33	@ 0x21
 800b728:	679a      	str	r2, [r3, #120]	@ 0x78
      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b72a:	68fb      	ldr	r3, [r7, #12]
 800b72c:	689b      	ldr	r3, [r3, #8]
 800b72e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b732:	d107      	bne.n	800b744 <HAL_UART_Transmit_IT+0x80>
 800b734:	68fb      	ldr	r3, [r7, #12]
 800b736:	691b      	ldr	r3, [r3, #16]
 800b738:	2b00      	cmp	r3, #0
 800b73a:	d103      	bne.n	800b744 <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 800b73c:	68fb      	ldr	r3, [r7, #12]
 800b73e:	4a16      	ldr	r2, [pc, #88]	@ (800b798 <HAL_UART_Transmit_IT+0xd4>)
 800b740:	669a      	str	r2, [r3, #104]	@ 0x68
 800b742:	e002      	b.n	800b74a <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 800b744:	68fb      	ldr	r3, [r7, #12]
 800b746:	4a15      	ldr	r2, [pc, #84]	@ (800b79c <HAL_UART_Transmit_IT+0xd8>)
 800b748:	669a      	str	r2, [r3, #104]	@ 0x68
    }

    __HAL_UNLOCK(huart);
 800b74a:	68fb      	ldr	r3, [r7, #12]
 800b74c:	2200      	movs	r2, #0
 800b74e:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800b752:	68fb      	ldr	r3, [r7, #12]
 800b754:	681b      	ldr	r3, [r3, #0]
 800b756:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b758:	697b      	ldr	r3, [r7, #20]
 800b75a:	e853 3f00 	ldrex	r3, [r3]
 800b75e:	613b      	str	r3, [r7, #16]
   return(result);
 800b760:	693b      	ldr	r3, [r7, #16]
 800b762:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b766:	627b      	str	r3, [r7, #36]	@ 0x24
 800b768:	68fb      	ldr	r3, [r7, #12]
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	461a      	mov	r2, r3
 800b76e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b770:	623b      	str	r3, [r7, #32]
 800b772:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b774:	69f9      	ldr	r1, [r7, #28]
 800b776:	6a3a      	ldr	r2, [r7, #32]
 800b778:	e841 2300 	strex	r3, r2, [r1]
 800b77c:	61bb      	str	r3, [r7, #24]
   return(result);
 800b77e:	69bb      	ldr	r3, [r7, #24]
 800b780:	2b00      	cmp	r3, #0
 800b782:	d1e6      	bne.n	800b752 <HAL_UART_Transmit_IT+0x8e>
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 800b784:	2300      	movs	r3, #0
 800b786:	e000      	b.n	800b78a <HAL_UART_Transmit_IT+0xc6>
  }
  else
  {
    return HAL_BUSY;
 800b788:	2302      	movs	r3, #2
  }
}
 800b78a:	4618      	mov	r0, r3
 800b78c:	372c      	adds	r7, #44	@ 0x2c
 800b78e:	46bd      	mov	sp, r7
 800b790:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b794:	4770      	bx	lr
 800b796:	bf00      	nop
 800b798:	0800c9d1 	.word	0x0800c9d1
 800b79c:	0800c91b 	.word	0x0800c91b

0800b7a0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b7a0:	b580      	push	{r7, lr}
 800b7a2:	b08a      	sub	sp, #40	@ 0x28
 800b7a4:	af00      	add	r7, sp, #0
 800b7a6:	60f8      	str	r0, [r7, #12]
 800b7a8:	60b9      	str	r1, [r7, #8]
 800b7aa:	4613      	mov	r3, r2
 800b7ac:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b7ae:	68fb      	ldr	r3, [r7, #12]
 800b7b0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b7b2:	2b20      	cmp	r3, #32
 800b7b4:	d142      	bne.n	800b83c <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 800b7b6:	68bb      	ldr	r3, [r7, #8]
 800b7b8:	2b00      	cmp	r3, #0
 800b7ba:	d002      	beq.n	800b7c2 <HAL_UART_Receive_IT+0x22>
 800b7bc:	88fb      	ldrh	r3, [r7, #6]
 800b7be:	2b00      	cmp	r3, #0
 800b7c0:	d101      	bne.n	800b7c6 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 800b7c2:	2301      	movs	r3, #1
 800b7c4:	e03b      	b.n	800b83e <HAL_UART_Receive_IT+0x9e>
    }

    __HAL_LOCK(huart);
 800b7c6:	68fb      	ldr	r3, [r7, #12]
 800b7c8:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 800b7cc:	2b01      	cmp	r3, #1
 800b7ce:	d101      	bne.n	800b7d4 <HAL_UART_Receive_IT+0x34>
 800b7d0:	2302      	movs	r3, #2
 800b7d2:	e034      	b.n	800b83e <HAL_UART_Receive_IT+0x9e>
 800b7d4:	68fb      	ldr	r3, [r7, #12]
 800b7d6:	2201      	movs	r2, #1
 800b7d8:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b7dc:	68fb      	ldr	r3, [r7, #12]
 800b7de:	2200      	movs	r2, #0
 800b7e0:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800b7e2:	68fb      	ldr	r3, [r7, #12]
 800b7e4:	681b      	ldr	r3, [r3, #0]
 800b7e6:	4a18      	ldr	r2, [pc, #96]	@ (800b848 <HAL_UART_Receive_IT+0xa8>)
 800b7e8:	4293      	cmp	r3, r2
 800b7ea:	d01f      	beq.n	800b82c <HAL_UART_Receive_IT+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800b7ec:	68fb      	ldr	r3, [r7, #12]
 800b7ee:	681b      	ldr	r3, [r3, #0]
 800b7f0:	685b      	ldr	r3, [r3, #4]
 800b7f2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b7f6:	2b00      	cmp	r3, #0
 800b7f8:	d018      	beq.n	800b82c <HAL_UART_Receive_IT+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800b7fa:	68fb      	ldr	r3, [r7, #12]
 800b7fc:	681b      	ldr	r3, [r3, #0]
 800b7fe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b800:	697b      	ldr	r3, [r7, #20]
 800b802:	e853 3f00 	ldrex	r3, [r3]
 800b806:	613b      	str	r3, [r7, #16]
   return(result);
 800b808:	693b      	ldr	r3, [r7, #16]
 800b80a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800b80e:	627b      	str	r3, [r7, #36]	@ 0x24
 800b810:	68fb      	ldr	r3, [r7, #12]
 800b812:	681b      	ldr	r3, [r3, #0]
 800b814:	461a      	mov	r2, r3
 800b816:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b818:	623b      	str	r3, [r7, #32]
 800b81a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b81c:	69f9      	ldr	r1, [r7, #28]
 800b81e:	6a3a      	ldr	r2, [r7, #32]
 800b820:	e841 2300 	strex	r3, r2, [r1]
 800b824:	61bb      	str	r3, [r7, #24]
   return(result);
 800b826:	69bb      	ldr	r3, [r7, #24]
 800b828:	2b00      	cmp	r3, #0
 800b82a:	d1e6      	bne.n	800b7fa <HAL_UART_Receive_IT+0x5a>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800b82c:	88fb      	ldrh	r3, [r7, #6]
 800b82e:	461a      	mov	r2, r3
 800b830:	68b9      	ldr	r1, [r7, #8]
 800b832:	68f8      	ldr	r0, [r7, #12]
 800b834:	f000 ff2e 	bl	800c694 <UART_Start_Receive_IT>
 800b838:	4603      	mov	r3, r0
 800b83a:	e000      	b.n	800b83e <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 800b83c:	2302      	movs	r3, #2
  }
}
 800b83e:	4618      	mov	r0, r3
 800b840:	3728      	adds	r7, #40	@ 0x28
 800b842:	46bd      	mov	sp, r7
 800b844:	bd80      	pop	{r7, pc}
 800b846:	bf00      	nop
 800b848:	40008000 	.word	0x40008000

0800b84c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b84c:	b580      	push	{r7, lr}
 800b84e:	b0ba      	sub	sp, #232	@ 0xe8
 800b850:	af00      	add	r7, sp, #0
 800b852:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	681b      	ldr	r3, [r3, #0]
 800b858:	69db      	ldr	r3, [r3, #28]
 800b85a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	681b      	ldr	r3, [r3, #0]
 800b862:	681b      	ldr	r3, [r3, #0]
 800b864:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	681b      	ldr	r3, [r3, #0]
 800b86c:	689b      	ldr	r3, [r3, #8]
 800b86e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800b872:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800b876:	f640 030f 	movw	r3, #2063	@ 0x80f
 800b87a:	4013      	ands	r3, r2
 800b87c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800b880:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800b884:	2b00      	cmp	r3, #0
 800b886:	d115      	bne.n	800b8b4 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800b888:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b88c:	f003 0320 	and.w	r3, r3, #32
 800b890:	2b00      	cmp	r3, #0
 800b892:	d00f      	beq.n	800b8b4 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800b894:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b898:	f003 0320 	and.w	r3, r3, #32
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	d009      	beq.n	800b8b4 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b8a4:	2b00      	cmp	r3, #0
 800b8a6:	f000 82a6 	beq.w	800bdf6 <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b8ae:	6878      	ldr	r0, [r7, #4]
 800b8b0:	4798      	blx	r3
      }
      return;
 800b8b2:	e2a0      	b.n	800bdf6 <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 800b8b4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	f000 8117 	beq.w	800baec <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800b8be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b8c2:	f003 0301 	and.w	r3, r3, #1
 800b8c6:	2b00      	cmp	r3, #0
 800b8c8:	d106      	bne.n	800b8d8 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800b8ca:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800b8ce:	4b85      	ldr	r3, [pc, #532]	@ (800bae4 <HAL_UART_IRQHandler+0x298>)
 800b8d0:	4013      	ands	r3, r2
 800b8d2:	2b00      	cmp	r3, #0
 800b8d4:	f000 810a 	beq.w	800baec <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b8d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b8dc:	f003 0301 	and.w	r3, r3, #1
 800b8e0:	2b00      	cmp	r3, #0
 800b8e2:	d011      	beq.n	800b908 <HAL_UART_IRQHandler+0xbc>
 800b8e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b8e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b8ec:	2b00      	cmp	r3, #0
 800b8ee:	d00b      	beq.n	800b908 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	681b      	ldr	r3, [r3, #0]
 800b8f4:	2201      	movs	r2, #1
 800b8f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b8fe:	f043 0201 	orr.w	r2, r3, #1
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b908:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b90c:	f003 0302 	and.w	r3, r3, #2
 800b910:	2b00      	cmp	r3, #0
 800b912:	d011      	beq.n	800b938 <HAL_UART_IRQHandler+0xec>
 800b914:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b918:	f003 0301 	and.w	r3, r3, #1
 800b91c:	2b00      	cmp	r3, #0
 800b91e:	d00b      	beq.n	800b938 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	681b      	ldr	r3, [r3, #0]
 800b924:	2202      	movs	r2, #2
 800b926:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b92e:	f043 0204 	orr.w	r2, r3, #4
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b938:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b93c:	f003 0304 	and.w	r3, r3, #4
 800b940:	2b00      	cmp	r3, #0
 800b942:	d011      	beq.n	800b968 <HAL_UART_IRQHandler+0x11c>
 800b944:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b948:	f003 0301 	and.w	r3, r3, #1
 800b94c:	2b00      	cmp	r3, #0
 800b94e:	d00b      	beq.n	800b968 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	681b      	ldr	r3, [r3, #0]
 800b954:	2204      	movs	r2, #4
 800b956:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b95e:	f043 0202 	orr.w	r2, r3, #2
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 800b968:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b96c:	f003 0308 	and.w	r3, r3, #8
 800b970:	2b00      	cmp	r3, #0
 800b972:	d017      	beq.n	800b9a4 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800b974:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b978:	f003 0320 	and.w	r3, r3, #32
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	d105      	bne.n	800b98c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800b980:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b984:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800b988:	2b00      	cmp	r3, #0
 800b98a:	d00b      	beq.n	800b9a4 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	681b      	ldr	r3, [r3, #0]
 800b990:	2208      	movs	r2, #8
 800b992:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b99a:	f043 0208 	orr.w	r2, r3, #8
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800b9a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b9a8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b9ac:	2b00      	cmp	r3, #0
 800b9ae:	d012      	beq.n	800b9d6 <HAL_UART_IRQHandler+0x18a>
 800b9b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b9b4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800b9b8:	2b00      	cmp	r3, #0
 800b9ba:	d00c      	beq.n	800b9d6 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	681b      	ldr	r3, [r3, #0]
 800b9c0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b9c4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b9cc:	f043 0220 	orr.w	r2, r3, #32
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b9dc:	2b00      	cmp	r3, #0
 800b9de:	f000 820c 	beq.w	800bdfa <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800b9e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b9e6:	f003 0320 	and.w	r3, r3, #32
 800b9ea:	2b00      	cmp	r3, #0
 800b9ec:	d00d      	beq.n	800ba0a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800b9ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b9f2:	f003 0320 	and.w	r3, r3, #32
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	d007      	beq.n	800ba0a <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b9fe:	2b00      	cmp	r3, #0
 800ba00:	d003      	beq.n	800ba0a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ba06:	6878      	ldr	r0, [r7, #4]
 800ba08:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ba10:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	681b      	ldr	r3, [r3, #0]
 800ba18:	689b      	ldr	r3, [r3, #8]
 800ba1a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ba1e:	2b40      	cmp	r3, #64	@ 0x40
 800ba20:	d005      	beq.n	800ba2e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800ba22:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800ba26:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800ba2a:	2b00      	cmp	r3, #0
 800ba2c:	d04f      	beq.n	800bace <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800ba2e:	6878      	ldr	r0, [r7, #4]
 800ba30:	f000 fefa 	bl	800c828 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	681b      	ldr	r3, [r3, #0]
 800ba38:	689b      	ldr	r3, [r3, #8]
 800ba3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ba3e:	2b40      	cmp	r3, #64	@ 0x40
 800ba40:	d141      	bne.n	800bac6 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	681b      	ldr	r3, [r3, #0]
 800ba46:	3308      	adds	r3, #8
 800ba48:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba4c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800ba50:	e853 3f00 	ldrex	r3, [r3]
 800ba54:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800ba58:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800ba5c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ba60:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	681b      	ldr	r3, [r3, #0]
 800ba68:	3308      	adds	r3, #8
 800ba6a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800ba6e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800ba72:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba76:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800ba7a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800ba7e:	e841 2300 	strex	r3, r2, [r1]
 800ba82:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800ba86:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800ba8a:	2b00      	cmp	r3, #0
 800ba8c:	d1d9      	bne.n	800ba42 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ba92:	2b00      	cmp	r3, #0
 800ba94:	d013      	beq.n	800babe <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ba9a:	4a13      	ldr	r2, [pc, #76]	@ (800bae8 <HAL_UART_IRQHandler+0x29c>)
 800ba9c:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800baa2:	4618      	mov	r0, r3
 800baa4:	f7fc f93c 	bl	8007d20 <HAL_DMA_Abort_IT>
 800baa8:	4603      	mov	r3, r0
 800baaa:	2b00      	cmp	r3, #0
 800baac:	d017      	beq.n	800bade <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bab2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bab4:	687a      	ldr	r2, [r7, #4]
 800bab6:	6f12      	ldr	r2, [r2, #112]	@ 0x70
 800bab8:	4610      	mov	r0, r2
 800baba:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800babc:	e00f      	b.n	800bade <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800babe:	6878      	ldr	r0, [r7, #4]
 800bac0:	f7f5 ff32 	bl	8001928 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bac4:	e00b      	b.n	800bade <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800bac6:	6878      	ldr	r0, [r7, #4]
 800bac8:	f7f5 ff2e 	bl	8001928 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bacc:	e007      	b.n	800bade <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800bace:	6878      	ldr	r0, [r7, #4]
 800bad0:	f7f5 ff2a 	bl	8001928 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	2200      	movs	r2, #0
 800bad8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      }
    }
    return;
 800badc:	e18d      	b.n	800bdfa <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bade:	bf00      	nop
    return;
 800bae0:	e18b      	b.n	800bdfa <HAL_UART_IRQHandler+0x5ae>
 800bae2:	bf00      	nop
 800bae4:	04000120 	.word	0x04000120
 800bae8:	0800c8ef 	.word	0x0800c8ef

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800baf0:	2b01      	cmp	r3, #1
 800baf2:	f040 8146 	bne.w	800bd82 <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800baf6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bafa:	f003 0310 	and.w	r3, r3, #16
 800bafe:	2b00      	cmp	r3, #0
 800bb00:	f000 813f 	beq.w	800bd82 <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800bb04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bb08:	f003 0310 	and.w	r3, r3, #16
 800bb0c:	2b00      	cmp	r3, #0
 800bb0e:	f000 8138 	beq.w	800bd82 <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	681b      	ldr	r3, [r3, #0]
 800bb16:	2210      	movs	r2, #16
 800bb18:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	681b      	ldr	r3, [r3, #0]
 800bb1e:	689b      	ldr	r3, [r3, #8]
 800bb20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bb24:	2b40      	cmp	r3, #64	@ 0x40
 800bb26:	f040 80b4 	bne.w	800bc92 <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bb2e:	681b      	ldr	r3, [r3, #0]
 800bb30:	685b      	ldr	r3, [r3, #4]
 800bb32:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800bb36:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800bb3a:	2b00      	cmp	r3, #0
 800bb3c:	f000 815f 	beq.w	800bdfe <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800bb46:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800bb4a:	429a      	cmp	r2, r3
 800bb4c:	f080 8157 	bcs.w	800bdfe <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800bb56:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bb5e:	681b      	ldr	r3, [r3, #0]
 800bb60:	681b      	ldr	r3, [r3, #0]
 800bb62:	f003 0320 	and.w	r3, r3, #32
 800bb66:	2b00      	cmp	r3, #0
 800bb68:	f040 8085 	bne.w	800bc76 <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	681b      	ldr	r3, [r3, #0]
 800bb70:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb74:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800bb78:	e853 3f00 	ldrex	r3, [r3]
 800bb7c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800bb80:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800bb84:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800bb88:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	681b      	ldr	r3, [r3, #0]
 800bb90:	461a      	mov	r2, r3
 800bb92:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800bb96:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800bb9a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb9e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800bba2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800bba6:	e841 2300 	strex	r3, r2, [r1]
 800bbaa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800bbae:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800bbb2:	2b00      	cmp	r3, #0
 800bbb4:	d1da      	bne.n	800bb6c <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	681b      	ldr	r3, [r3, #0]
 800bbba:	3308      	adds	r3, #8
 800bbbc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bbbe:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800bbc0:	e853 3f00 	ldrex	r3, [r3]
 800bbc4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800bbc6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800bbc8:	f023 0301 	bic.w	r3, r3, #1
 800bbcc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	681b      	ldr	r3, [r3, #0]
 800bbd4:	3308      	adds	r3, #8
 800bbd6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800bbda:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800bbde:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bbe0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800bbe2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800bbe6:	e841 2300 	strex	r3, r2, [r1]
 800bbea:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800bbec:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800bbee:	2b00      	cmp	r3, #0
 800bbf0:	d1e1      	bne.n	800bbb6 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	681b      	ldr	r3, [r3, #0]
 800bbf6:	3308      	adds	r3, #8
 800bbf8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bbfa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800bbfc:	e853 3f00 	ldrex	r3, [r3]
 800bc00:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800bc02:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bc04:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800bc08:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	681b      	ldr	r3, [r3, #0]
 800bc10:	3308      	adds	r3, #8
 800bc12:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800bc16:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800bc18:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc1a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800bc1c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800bc1e:	e841 2300 	strex	r3, r2, [r1]
 800bc22:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800bc24:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800bc26:	2b00      	cmp	r3, #0
 800bc28:	d1e3      	bne.n	800bbf2 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	2220      	movs	r2, #32
 800bc2e:	67da      	str	r2, [r3, #124]	@ 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	2200      	movs	r2, #0
 800bc34:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	681b      	ldr	r3, [r3, #0]
 800bc3a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc3c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bc3e:	e853 3f00 	ldrex	r3, [r3]
 800bc42:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800bc44:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bc46:	f023 0310 	bic.w	r3, r3, #16
 800bc4a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	681b      	ldr	r3, [r3, #0]
 800bc52:	461a      	mov	r2, r3
 800bc54:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800bc58:	65bb      	str	r3, [r7, #88]	@ 0x58
 800bc5a:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc5c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800bc5e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800bc60:	e841 2300 	strex	r3, r2, [r1]
 800bc64:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800bc66:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bc68:	2b00      	cmp	r3, #0
 800bc6a:	d1e4      	bne.n	800bc36 <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bc70:	4618      	mov	r0, r3
 800bc72:	f7fc f817 	bl	8007ca4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800bc82:	b29b      	uxth	r3, r3
 800bc84:	1ad3      	subs	r3, r2, r3
 800bc86:	b29b      	uxth	r3, r3
 800bc88:	4619      	mov	r1, r3
 800bc8a:	6878      	ldr	r0, [r7, #4]
 800bc8c:	f000 f8c0 	bl	800be10 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800bc90:	e0b5      	b.n	800bdfe <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800bc9e:	b29b      	uxth	r3, r3
 800bca0:	1ad3      	subs	r3, r2, r3
 800bca2:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800bcac:	b29b      	uxth	r3, r3
 800bcae:	2b00      	cmp	r3, #0
 800bcb0:	f000 80a7 	beq.w	800be02 <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 800bcb4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800bcb8:	2b00      	cmp	r3, #0
 800bcba:	f000 80a2 	beq.w	800be02 <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	681b      	ldr	r3, [r3, #0]
 800bcc2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bcc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bcc6:	e853 3f00 	ldrex	r3, [r3]
 800bcca:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800bccc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bcce:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800bcd2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	681b      	ldr	r3, [r3, #0]
 800bcda:	461a      	mov	r2, r3
 800bcdc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800bce0:	647b      	str	r3, [r7, #68]	@ 0x44
 800bce2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bce4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800bce6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800bce8:	e841 2300 	strex	r3, r2, [r1]
 800bcec:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800bcee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bcf0:	2b00      	cmp	r3, #0
 800bcf2:	d1e4      	bne.n	800bcbe <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	681b      	ldr	r3, [r3, #0]
 800bcf8:	3308      	adds	r3, #8
 800bcfa:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bcfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bcfe:	e853 3f00 	ldrex	r3, [r3]
 800bd02:	623b      	str	r3, [r7, #32]
   return(result);
 800bd04:	6a3b      	ldr	r3, [r7, #32]
 800bd06:	f023 0301 	bic.w	r3, r3, #1
 800bd0a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	681b      	ldr	r3, [r3, #0]
 800bd12:	3308      	adds	r3, #8
 800bd14:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800bd18:	633a      	str	r2, [r7, #48]	@ 0x30
 800bd1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd1c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800bd1e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bd20:	e841 2300 	strex	r3, r2, [r1]
 800bd24:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800bd26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd28:	2b00      	cmp	r3, #0
 800bd2a:	d1e3      	bne.n	800bcf4 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	2220      	movs	r2, #32
 800bd30:	67da      	str	r2, [r3, #124]	@ 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	2200      	movs	r2, #0
 800bd36:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	2200      	movs	r2, #0
 800bd3c:	665a      	str	r2, [r3, #100]	@ 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	681b      	ldr	r3, [r3, #0]
 800bd42:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd44:	693b      	ldr	r3, [r7, #16]
 800bd46:	e853 3f00 	ldrex	r3, [r3]
 800bd4a:	60fb      	str	r3, [r7, #12]
   return(result);
 800bd4c:	68fb      	ldr	r3, [r7, #12]
 800bd4e:	f023 0310 	bic.w	r3, r3, #16
 800bd52:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	681b      	ldr	r3, [r3, #0]
 800bd5a:	461a      	mov	r2, r3
 800bd5c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800bd60:	61fb      	str	r3, [r7, #28]
 800bd62:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd64:	69b9      	ldr	r1, [r7, #24]
 800bd66:	69fa      	ldr	r2, [r7, #28]
 800bd68:	e841 2300 	strex	r3, r2, [r1]
 800bd6c:	617b      	str	r3, [r7, #20]
   return(result);
 800bd6e:	697b      	ldr	r3, [r7, #20]
 800bd70:	2b00      	cmp	r3, #0
 800bd72:	d1e4      	bne.n	800bd3e <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800bd74:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800bd78:	4619      	mov	r1, r3
 800bd7a:	6878      	ldr	r0, [r7, #4]
 800bd7c:	f000 f848 	bl	800be10 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800bd80:	e03f      	b.n	800be02 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800bd82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bd86:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800bd8a:	2b00      	cmp	r3, #0
 800bd8c:	d00e      	beq.n	800bdac <HAL_UART_IRQHandler+0x560>
 800bd8e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800bd92:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800bd96:	2b00      	cmp	r3, #0
 800bd98:	d008      	beq.n	800bdac <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	681b      	ldr	r3, [r3, #0]
 800bd9e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800bda2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800bda4:	6878      	ldr	r0, [r7, #4]
 800bda6:	f000 fffd 	bl	800cda4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800bdaa:	e02d      	b.n	800be08 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 800bdac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bdb0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bdb4:	2b00      	cmp	r3, #0
 800bdb6:	d00e      	beq.n	800bdd6 <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800bdb8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bdbc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bdc0:	2b00      	cmp	r3, #0
 800bdc2:	d008      	beq.n	800bdd6 <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800bdc8:	2b00      	cmp	r3, #0
 800bdca:	d01c      	beq.n	800be06 <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800bdd0:	6878      	ldr	r0, [r7, #4]
 800bdd2:	4798      	blx	r3
    }
    return;
 800bdd4:	e017      	b.n	800be06 <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800bdd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bdda:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bdde:	2b00      	cmp	r3, #0
 800bde0:	d012      	beq.n	800be08 <HAL_UART_IRQHandler+0x5bc>
 800bde2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bde6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bdea:	2b00      	cmp	r3, #0
 800bdec:	d00c      	beq.n	800be08 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 800bdee:	6878      	ldr	r0, [r7, #4]
 800bdf0:	f000 fe4e 	bl	800ca90 <UART_EndTransmit_IT>
    return;
 800bdf4:	e008      	b.n	800be08 <HAL_UART_IRQHandler+0x5bc>
      return;
 800bdf6:	bf00      	nop
 800bdf8:	e006      	b.n	800be08 <HAL_UART_IRQHandler+0x5bc>
    return;
 800bdfa:	bf00      	nop
 800bdfc:	e004      	b.n	800be08 <HAL_UART_IRQHandler+0x5bc>
      return;
 800bdfe:	bf00      	nop
 800be00:	e002      	b.n	800be08 <HAL_UART_IRQHandler+0x5bc>
      return;
 800be02:	bf00      	nop
 800be04:	e000      	b.n	800be08 <HAL_UART_IRQHandler+0x5bc>
    return;
 800be06:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 800be08:	37e8      	adds	r7, #232	@ 0xe8
 800be0a:	46bd      	mov	sp, r7
 800be0c:	bd80      	pop	{r7, pc}
 800be0e:	bf00      	nop

0800be10 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800be10:	b480      	push	{r7}
 800be12:	b083      	sub	sp, #12
 800be14:	af00      	add	r7, sp, #0
 800be16:	6078      	str	r0, [r7, #4]
 800be18:	460b      	mov	r3, r1
 800be1a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800be1c:	bf00      	nop
 800be1e:	370c      	adds	r7, #12
 800be20:	46bd      	mov	sp, r7
 800be22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be26:	4770      	bx	lr

0800be28 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800be28:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800be2c:	b08a      	sub	sp, #40	@ 0x28
 800be2e:	af00      	add	r7, sp, #0
 800be30:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800be32:	2300      	movs	r3, #0
 800be34:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800be38:	68fb      	ldr	r3, [r7, #12]
 800be3a:	689a      	ldr	r2, [r3, #8]
 800be3c:	68fb      	ldr	r3, [r7, #12]
 800be3e:	691b      	ldr	r3, [r3, #16]
 800be40:	431a      	orrs	r2, r3
 800be42:	68fb      	ldr	r3, [r7, #12]
 800be44:	695b      	ldr	r3, [r3, #20]
 800be46:	431a      	orrs	r2, r3
 800be48:	68fb      	ldr	r3, [r7, #12]
 800be4a:	69db      	ldr	r3, [r3, #28]
 800be4c:	4313      	orrs	r3, r2
 800be4e:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800be50:	68fb      	ldr	r3, [r7, #12]
 800be52:	681b      	ldr	r3, [r3, #0]
 800be54:	681a      	ldr	r2, [r3, #0]
 800be56:	4ba5      	ldr	r3, [pc, #660]	@ (800c0ec <UART_SetConfig+0x2c4>)
 800be58:	4013      	ands	r3, r2
 800be5a:	68fa      	ldr	r2, [r7, #12]
 800be5c:	6812      	ldr	r2, [r2, #0]
 800be5e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800be60:	430b      	orrs	r3, r1
 800be62:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800be64:	68fb      	ldr	r3, [r7, #12]
 800be66:	681b      	ldr	r3, [r3, #0]
 800be68:	685b      	ldr	r3, [r3, #4]
 800be6a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800be6e:	68fb      	ldr	r3, [r7, #12]
 800be70:	68da      	ldr	r2, [r3, #12]
 800be72:	68fb      	ldr	r3, [r7, #12]
 800be74:	681b      	ldr	r3, [r3, #0]
 800be76:	430a      	orrs	r2, r1
 800be78:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800be7a:	68fb      	ldr	r3, [r7, #12]
 800be7c:	699b      	ldr	r3, [r3, #24]
 800be7e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800be80:	68fb      	ldr	r3, [r7, #12]
 800be82:	681b      	ldr	r3, [r3, #0]
 800be84:	4a9a      	ldr	r2, [pc, #616]	@ (800c0f0 <UART_SetConfig+0x2c8>)
 800be86:	4293      	cmp	r3, r2
 800be88:	d004      	beq.n	800be94 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800be8a:	68fb      	ldr	r3, [r7, #12]
 800be8c:	6a1b      	ldr	r3, [r3, #32]
 800be8e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800be90:	4313      	orrs	r3, r2
 800be92:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800be94:	68fb      	ldr	r3, [r7, #12]
 800be96:	681b      	ldr	r3, [r3, #0]
 800be98:	689b      	ldr	r3, [r3, #8]
 800be9a:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800be9e:	68fb      	ldr	r3, [r7, #12]
 800bea0:	681b      	ldr	r3, [r3, #0]
 800bea2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bea4:	430a      	orrs	r2, r1
 800bea6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800bea8:	68fb      	ldr	r3, [r7, #12]
 800beaa:	681b      	ldr	r3, [r3, #0]
 800beac:	4a91      	ldr	r2, [pc, #580]	@ (800c0f4 <UART_SetConfig+0x2cc>)
 800beae:	4293      	cmp	r3, r2
 800beb0:	d126      	bne.n	800bf00 <UART_SetConfig+0xd8>
 800beb2:	4b91      	ldr	r3, [pc, #580]	@ (800c0f8 <UART_SetConfig+0x2d0>)
 800beb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800beb8:	f003 0303 	and.w	r3, r3, #3
 800bebc:	2b03      	cmp	r3, #3
 800bebe:	d81b      	bhi.n	800bef8 <UART_SetConfig+0xd0>
 800bec0:	a201      	add	r2, pc, #4	@ (adr r2, 800bec8 <UART_SetConfig+0xa0>)
 800bec2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bec6:	bf00      	nop
 800bec8:	0800bed9 	.word	0x0800bed9
 800becc:	0800bee9 	.word	0x0800bee9
 800bed0:	0800bee1 	.word	0x0800bee1
 800bed4:	0800bef1 	.word	0x0800bef1
 800bed8:	2301      	movs	r3, #1
 800beda:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800bede:	e0d6      	b.n	800c08e <UART_SetConfig+0x266>
 800bee0:	2302      	movs	r3, #2
 800bee2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800bee6:	e0d2      	b.n	800c08e <UART_SetConfig+0x266>
 800bee8:	2304      	movs	r3, #4
 800beea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800beee:	e0ce      	b.n	800c08e <UART_SetConfig+0x266>
 800bef0:	2308      	movs	r3, #8
 800bef2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800bef6:	e0ca      	b.n	800c08e <UART_SetConfig+0x266>
 800bef8:	2310      	movs	r3, #16
 800befa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800befe:	e0c6      	b.n	800c08e <UART_SetConfig+0x266>
 800bf00:	68fb      	ldr	r3, [r7, #12]
 800bf02:	681b      	ldr	r3, [r3, #0]
 800bf04:	4a7d      	ldr	r2, [pc, #500]	@ (800c0fc <UART_SetConfig+0x2d4>)
 800bf06:	4293      	cmp	r3, r2
 800bf08:	d138      	bne.n	800bf7c <UART_SetConfig+0x154>
 800bf0a:	4b7b      	ldr	r3, [pc, #492]	@ (800c0f8 <UART_SetConfig+0x2d0>)
 800bf0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bf10:	f003 030c 	and.w	r3, r3, #12
 800bf14:	2b0c      	cmp	r3, #12
 800bf16:	d82d      	bhi.n	800bf74 <UART_SetConfig+0x14c>
 800bf18:	a201      	add	r2, pc, #4	@ (adr r2, 800bf20 <UART_SetConfig+0xf8>)
 800bf1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf1e:	bf00      	nop
 800bf20:	0800bf55 	.word	0x0800bf55
 800bf24:	0800bf75 	.word	0x0800bf75
 800bf28:	0800bf75 	.word	0x0800bf75
 800bf2c:	0800bf75 	.word	0x0800bf75
 800bf30:	0800bf65 	.word	0x0800bf65
 800bf34:	0800bf75 	.word	0x0800bf75
 800bf38:	0800bf75 	.word	0x0800bf75
 800bf3c:	0800bf75 	.word	0x0800bf75
 800bf40:	0800bf5d 	.word	0x0800bf5d
 800bf44:	0800bf75 	.word	0x0800bf75
 800bf48:	0800bf75 	.word	0x0800bf75
 800bf4c:	0800bf75 	.word	0x0800bf75
 800bf50:	0800bf6d 	.word	0x0800bf6d
 800bf54:	2300      	movs	r3, #0
 800bf56:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800bf5a:	e098      	b.n	800c08e <UART_SetConfig+0x266>
 800bf5c:	2302      	movs	r3, #2
 800bf5e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800bf62:	e094      	b.n	800c08e <UART_SetConfig+0x266>
 800bf64:	2304      	movs	r3, #4
 800bf66:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800bf6a:	e090      	b.n	800c08e <UART_SetConfig+0x266>
 800bf6c:	2308      	movs	r3, #8
 800bf6e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800bf72:	e08c      	b.n	800c08e <UART_SetConfig+0x266>
 800bf74:	2310      	movs	r3, #16
 800bf76:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800bf7a:	e088      	b.n	800c08e <UART_SetConfig+0x266>
 800bf7c:	68fb      	ldr	r3, [r7, #12]
 800bf7e:	681b      	ldr	r3, [r3, #0]
 800bf80:	4a5f      	ldr	r2, [pc, #380]	@ (800c100 <UART_SetConfig+0x2d8>)
 800bf82:	4293      	cmp	r3, r2
 800bf84:	d125      	bne.n	800bfd2 <UART_SetConfig+0x1aa>
 800bf86:	4b5c      	ldr	r3, [pc, #368]	@ (800c0f8 <UART_SetConfig+0x2d0>)
 800bf88:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bf8c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800bf90:	2b30      	cmp	r3, #48	@ 0x30
 800bf92:	d016      	beq.n	800bfc2 <UART_SetConfig+0x19a>
 800bf94:	2b30      	cmp	r3, #48	@ 0x30
 800bf96:	d818      	bhi.n	800bfca <UART_SetConfig+0x1a2>
 800bf98:	2b20      	cmp	r3, #32
 800bf9a:	d00a      	beq.n	800bfb2 <UART_SetConfig+0x18a>
 800bf9c:	2b20      	cmp	r3, #32
 800bf9e:	d814      	bhi.n	800bfca <UART_SetConfig+0x1a2>
 800bfa0:	2b00      	cmp	r3, #0
 800bfa2:	d002      	beq.n	800bfaa <UART_SetConfig+0x182>
 800bfa4:	2b10      	cmp	r3, #16
 800bfa6:	d008      	beq.n	800bfba <UART_SetConfig+0x192>
 800bfa8:	e00f      	b.n	800bfca <UART_SetConfig+0x1a2>
 800bfaa:	2300      	movs	r3, #0
 800bfac:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800bfb0:	e06d      	b.n	800c08e <UART_SetConfig+0x266>
 800bfb2:	2302      	movs	r3, #2
 800bfb4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800bfb8:	e069      	b.n	800c08e <UART_SetConfig+0x266>
 800bfba:	2304      	movs	r3, #4
 800bfbc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800bfc0:	e065      	b.n	800c08e <UART_SetConfig+0x266>
 800bfc2:	2308      	movs	r3, #8
 800bfc4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800bfc8:	e061      	b.n	800c08e <UART_SetConfig+0x266>
 800bfca:	2310      	movs	r3, #16
 800bfcc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800bfd0:	e05d      	b.n	800c08e <UART_SetConfig+0x266>
 800bfd2:	68fb      	ldr	r3, [r7, #12]
 800bfd4:	681b      	ldr	r3, [r3, #0]
 800bfd6:	4a4b      	ldr	r2, [pc, #300]	@ (800c104 <UART_SetConfig+0x2dc>)
 800bfd8:	4293      	cmp	r3, r2
 800bfda:	d125      	bne.n	800c028 <UART_SetConfig+0x200>
 800bfdc:	4b46      	ldr	r3, [pc, #280]	@ (800c0f8 <UART_SetConfig+0x2d0>)
 800bfde:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bfe2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800bfe6:	2bc0      	cmp	r3, #192	@ 0xc0
 800bfe8:	d016      	beq.n	800c018 <UART_SetConfig+0x1f0>
 800bfea:	2bc0      	cmp	r3, #192	@ 0xc0
 800bfec:	d818      	bhi.n	800c020 <UART_SetConfig+0x1f8>
 800bfee:	2b80      	cmp	r3, #128	@ 0x80
 800bff0:	d00a      	beq.n	800c008 <UART_SetConfig+0x1e0>
 800bff2:	2b80      	cmp	r3, #128	@ 0x80
 800bff4:	d814      	bhi.n	800c020 <UART_SetConfig+0x1f8>
 800bff6:	2b00      	cmp	r3, #0
 800bff8:	d002      	beq.n	800c000 <UART_SetConfig+0x1d8>
 800bffa:	2b40      	cmp	r3, #64	@ 0x40
 800bffc:	d008      	beq.n	800c010 <UART_SetConfig+0x1e8>
 800bffe:	e00f      	b.n	800c020 <UART_SetConfig+0x1f8>
 800c000:	2300      	movs	r3, #0
 800c002:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800c006:	e042      	b.n	800c08e <UART_SetConfig+0x266>
 800c008:	2302      	movs	r3, #2
 800c00a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800c00e:	e03e      	b.n	800c08e <UART_SetConfig+0x266>
 800c010:	2304      	movs	r3, #4
 800c012:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800c016:	e03a      	b.n	800c08e <UART_SetConfig+0x266>
 800c018:	2308      	movs	r3, #8
 800c01a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800c01e:	e036      	b.n	800c08e <UART_SetConfig+0x266>
 800c020:	2310      	movs	r3, #16
 800c022:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800c026:	e032      	b.n	800c08e <UART_SetConfig+0x266>
 800c028:	68fb      	ldr	r3, [r7, #12]
 800c02a:	681b      	ldr	r3, [r3, #0]
 800c02c:	4a30      	ldr	r2, [pc, #192]	@ (800c0f0 <UART_SetConfig+0x2c8>)
 800c02e:	4293      	cmp	r3, r2
 800c030:	d12a      	bne.n	800c088 <UART_SetConfig+0x260>
 800c032:	4b31      	ldr	r3, [pc, #196]	@ (800c0f8 <UART_SetConfig+0x2d0>)
 800c034:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c038:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800c03c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800c040:	d01a      	beq.n	800c078 <UART_SetConfig+0x250>
 800c042:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800c046:	d81b      	bhi.n	800c080 <UART_SetConfig+0x258>
 800c048:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c04c:	d00c      	beq.n	800c068 <UART_SetConfig+0x240>
 800c04e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c052:	d815      	bhi.n	800c080 <UART_SetConfig+0x258>
 800c054:	2b00      	cmp	r3, #0
 800c056:	d003      	beq.n	800c060 <UART_SetConfig+0x238>
 800c058:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c05c:	d008      	beq.n	800c070 <UART_SetConfig+0x248>
 800c05e:	e00f      	b.n	800c080 <UART_SetConfig+0x258>
 800c060:	2300      	movs	r3, #0
 800c062:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800c066:	e012      	b.n	800c08e <UART_SetConfig+0x266>
 800c068:	2302      	movs	r3, #2
 800c06a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800c06e:	e00e      	b.n	800c08e <UART_SetConfig+0x266>
 800c070:	2304      	movs	r3, #4
 800c072:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800c076:	e00a      	b.n	800c08e <UART_SetConfig+0x266>
 800c078:	2308      	movs	r3, #8
 800c07a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800c07e:	e006      	b.n	800c08e <UART_SetConfig+0x266>
 800c080:	2310      	movs	r3, #16
 800c082:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800c086:	e002      	b.n	800c08e <UART_SetConfig+0x266>
 800c088:	2310      	movs	r3, #16
 800c08a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800c08e:	68fb      	ldr	r3, [r7, #12]
 800c090:	681b      	ldr	r3, [r3, #0]
 800c092:	4a17      	ldr	r2, [pc, #92]	@ (800c0f0 <UART_SetConfig+0x2c8>)
 800c094:	4293      	cmp	r3, r2
 800c096:	f040 808b 	bne.w	800c1b0 <UART_SetConfig+0x388>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800c09a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800c09e:	2b08      	cmp	r3, #8
 800c0a0:	d834      	bhi.n	800c10c <UART_SetConfig+0x2e4>
 800c0a2:	a201      	add	r2, pc, #4	@ (adr r2, 800c0a8 <UART_SetConfig+0x280>)
 800c0a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c0a8:	0800c0cd 	.word	0x0800c0cd
 800c0ac:	0800c10d 	.word	0x0800c10d
 800c0b0:	0800c0d5 	.word	0x0800c0d5
 800c0b4:	0800c10d 	.word	0x0800c10d
 800c0b8:	0800c0db 	.word	0x0800c0db
 800c0bc:	0800c10d 	.word	0x0800c10d
 800c0c0:	0800c10d 	.word	0x0800c10d
 800c0c4:	0800c10d 	.word	0x0800c10d
 800c0c8:	0800c0e3 	.word	0x0800c0e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c0cc:	f7fc fe0c 	bl	8008ce8 <HAL_RCC_GetPCLK1Freq>
 800c0d0:	61f8      	str	r0, [r7, #28]
        break;
 800c0d2:	e021      	b.n	800c118 <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c0d4:	4b0c      	ldr	r3, [pc, #48]	@ (800c108 <UART_SetConfig+0x2e0>)
 800c0d6:	61fb      	str	r3, [r7, #28]
        break;
 800c0d8:	e01e      	b.n	800c118 <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c0da:	f7fc fd6d 	bl	8008bb8 <HAL_RCC_GetSysClockFreq>
 800c0de:	61f8      	str	r0, [r7, #28]
        break;
 800c0e0:	e01a      	b.n	800c118 <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c0e2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c0e6:	61fb      	str	r3, [r7, #28]
        break;
 800c0e8:	e016      	b.n	800c118 <UART_SetConfig+0x2f0>
 800c0ea:	bf00      	nop
 800c0ec:	efff69f3 	.word	0xefff69f3
 800c0f0:	40008000 	.word	0x40008000
 800c0f4:	40013800 	.word	0x40013800
 800c0f8:	40021000 	.word	0x40021000
 800c0fc:	40004400 	.word	0x40004400
 800c100:	40004800 	.word	0x40004800
 800c104:	40004c00 	.word	0x40004c00
 800c108:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800c10c:	2300      	movs	r3, #0
 800c10e:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800c110:	2301      	movs	r3, #1
 800c112:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800c116:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800c118:	69fb      	ldr	r3, [r7, #28]
 800c11a:	2b00      	cmp	r3, #0
 800c11c:	f000 80fa 	beq.w	800c314 <UART_SetConfig+0x4ec>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800c120:	68fb      	ldr	r3, [r7, #12]
 800c122:	685a      	ldr	r2, [r3, #4]
 800c124:	4613      	mov	r3, r2
 800c126:	005b      	lsls	r3, r3, #1
 800c128:	4413      	add	r3, r2
 800c12a:	69fa      	ldr	r2, [r7, #28]
 800c12c:	429a      	cmp	r2, r3
 800c12e:	d305      	bcc.n	800c13c <UART_SetConfig+0x314>
          (pclk > (4096U * huart->Init.BaudRate)))
 800c130:	68fb      	ldr	r3, [r7, #12]
 800c132:	685b      	ldr	r3, [r3, #4]
 800c134:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800c136:	69fa      	ldr	r2, [r7, #28]
 800c138:	429a      	cmp	r2, r3
 800c13a:	d903      	bls.n	800c144 <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 800c13c:	2301      	movs	r3, #1
 800c13e:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800c142:	e0e7      	b.n	800c314 <UART_SetConfig+0x4ec>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800c144:	69fb      	ldr	r3, [r7, #28]
 800c146:	2200      	movs	r2, #0
 800c148:	461c      	mov	r4, r3
 800c14a:	4615      	mov	r5, r2
 800c14c:	f04f 0200 	mov.w	r2, #0
 800c150:	f04f 0300 	mov.w	r3, #0
 800c154:	022b      	lsls	r3, r5, #8
 800c156:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800c15a:	0222      	lsls	r2, r4, #8
 800c15c:	68f9      	ldr	r1, [r7, #12]
 800c15e:	6849      	ldr	r1, [r1, #4]
 800c160:	0849      	lsrs	r1, r1, #1
 800c162:	2000      	movs	r0, #0
 800c164:	4688      	mov	r8, r1
 800c166:	4681      	mov	r9, r0
 800c168:	eb12 0a08 	adds.w	sl, r2, r8
 800c16c:	eb43 0b09 	adc.w	fp, r3, r9
 800c170:	68fb      	ldr	r3, [r7, #12]
 800c172:	685b      	ldr	r3, [r3, #4]
 800c174:	2200      	movs	r2, #0
 800c176:	603b      	str	r3, [r7, #0]
 800c178:	607a      	str	r2, [r7, #4]
 800c17a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c17e:	4650      	mov	r0, sl
 800c180:	4659      	mov	r1, fp
 800c182:	f7f4 fd69 	bl	8000c58 <__aeabi_uldivmod>
 800c186:	4602      	mov	r2, r0
 800c188:	460b      	mov	r3, r1
 800c18a:	4613      	mov	r3, r2
 800c18c:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800c18e:	69bb      	ldr	r3, [r7, #24]
 800c190:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c194:	d308      	bcc.n	800c1a8 <UART_SetConfig+0x380>
 800c196:	69bb      	ldr	r3, [r7, #24]
 800c198:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c19c:	d204      	bcs.n	800c1a8 <UART_SetConfig+0x380>
        {
          huart->Instance->BRR = usartdiv;
 800c19e:	68fb      	ldr	r3, [r7, #12]
 800c1a0:	681b      	ldr	r3, [r3, #0]
 800c1a2:	69ba      	ldr	r2, [r7, #24]
 800c1a4:	60da      	str	r2, [r3, #12]
 800c1a6:	e0b5      	b.n	800c314 <UART_SetConfig+0x4ec>
        }
        else
        {
          ret = HAL_ERROR;
 800c1a8:	2301      	movs	r3, #1
 800c1aa:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800c1ae:	e0b1      	b.n	800c314 <UART_SetConfig+0x4ec>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c1b0:	68fb      	ldr	r3, [r7, #12]
 800c1b2:	69db      	ldr	r3, [r3, #28]
 800c1b4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c1b8:	d15d      	bne.n	800c276 <UART_SetConfig+0x44e>
  {
    switch (clocksource)
 800c1ba:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800c1be:	2b08      	cmp	r3, #8
 800c1c0:	d827      	bhi.n	800c212 <UART_SetConfig+0x3ea>
 800c1c2:	a201      	add	r2, pc, #4	@ (adr r2, 800c1c8 <UART_SetConfig+0x3a0>)
 800c1c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c1c8:	0800c1ed 	.word	0x0800c1ed
 800c1cc:	0800c1f5 	.word	0x0800c1f5
 800c1d0:	0800c1fd 	.word	0x0800c1fd
 800c1d4:	0800c213 	.word	0x0800c213
 800c1d8:	0800c203 	.word	0x0800c203
 800c1dc:	0800c213 	.word	0x0800c213
 800c1e0:	0800c213 	.word	0x0800c213
 800c1e4:	0800c213 	.word	0x0800c213
 800c1e8:	0800c20b 	.word	0x0800c20b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c1ec:	f7fc fd7c 	bl	8008ce8 <HAL_RCC_GetPCLK1Freq>
 800c1f0:	61f8      	str	r0, [r7, #28]
        break;
 800c1f2:	e014      	b.n	800c21e <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c1f4:	f7fc fd8e 	bl	8008d14 <HAL_RCC_GetPCLK2Freq>
 800c1f8:	61f8      	str	r0, [r7, #28]
        break;
 800c1fa:	e010      	b.n	800c21e <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c1fc:	4b4c      	ldr	r3, [pc, #304]	@ (800c330 <UART_SetConfig+0x508>)
 800c1fe:	61fb      	str	r3, [r7, #28]
        break;
 800c200:	e00d      	b.n	800c21e <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c202:	f7fc fcd9 	bl	8008bb8 <HAL_RCC_GetSysClockFreq>
 800c206:	61f8      	str	r0, [r7, #28]
        break;
 800c208:	e009      	b.n	800c21e <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c20a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c20e:	61fb      	str	r3, [r7, #28]
        break;
 800c210:	e005      	b.n	800c21e <UART_SetConfig+0x3f6>
      default:
        pclk = 0U;
 800c212:	2300      	movs	r3, #0
 800c214:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800c216:	2301      	movs	r3, #1
 800c218:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800c21c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800c21e:	69fb      	ldr	r3, [r7, #28]
 800c220:	2b00      	cmp	r3, #0
 800c222:	d077      	beq.n	800c314 <UART_SetConfig+0x4ec>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800c224:	69fb      	ldr	r3, [r7, #28]
 800c226:	005a      	lsls	r2, r3, #1
 800c228:	68fb      	ldr	r3, [r7, #12]
 800c22a:	685b      	ldr	r3, [r3, #4]
 800c22c:	085b      	lsrs	r3, r3, #1
 800c22e:	441a      	add	r2, r3
 800c230:	68fb      	ldr	r3, [r7, #12]
 800c232:	685b      	ldr	r3, [r3, #4]
 800c234:	fbb2 f3f3 	udiv	r3, r2, r3
 800c238:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c23a:	69bb      	ldr	r3, [r7, #24]
 800c23c:	2b0f      	cmp	r3, #15
 800c23e:	d916      	bls.n	800c26e <UART_SetConfig+0x446>
 800c240:	69bb      	ldr	r3, [r7, #24]
 800c242:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c246:	d212      	bcs.n	800c26e <UART_SetConfig+0x446>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c248:	69bb      	ldr	r3, [r7, #24]
 800c24a:	b29b      	uxth	r3, r3
 800c24c:	f023 030f 	bic.w	r3, r3, #15
 800c250:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c252:	69bb      	ldr	r3, [r7, #24]
 800c254:	085b      	lsrs	r3, r3, #1
 800c256:	b29b      	uxth	r3, r3
 800c258:	f003 0307 	and.w	r3, r3, #7
 800c25c:	b29a      	uxth	r2, r3
 800c25e:	8afb      	ldrh	r3, [r7, #22]
 800c260:	4313      	orrs	r3, r2
 800c262:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800c264:	68fb      	ldr	r3, [r7, #12]
 800c266:	681b      	ldr	r3, [r3, #0]
 800c268:	8afa      	ldrh	r2, [r7, #22]
 800c26a:	60da      	str	r2, [r3, #12]
 800c26c:	e052      	b.n	800c314 <UART_SetConfig+0x4ec>
      }
      else
      {
        ret = HAL_ERROR;
 800c26e:	2301      	movs	r3, #1
 800c270:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800c274:	e04e      	b.n	800c314 <UART_SetConfig+0x4ec>
      }
    }
  }
  else
  {
    switch (clocksource)
 800c276:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800c27a:	2b08      	cmp	r3, #8
 800c27c:	d827      	bhi.n	800c2ce <UART_SetConfig+0x4a6>
 800c27e:	a201      	add	r2, pc, #4	@ (adr r2, 800c284 <UART_SetConfig+0x45c>)
 800c280:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c284:	0800c2a9 	.word	0x0800c2a9
 800c288:	0800c2b1 	.word	0x0800c2b1
 800c28c:	0800c2b9 	.word	0x0800c2b9
 800c290:	0800c2cf 	.word	0x0800c2cf
 800c294:	0800c2bf 	.word	0x0800c2bf
 800c298:	0800c2cf 	.word	0x0800c2cf
 800c29c:	0800c2cf 	.word	0x0800c2cf
 800c2a0:	0800c2cf 	.word	0x0800c2cf
 800c2a4:	0800c2c7 	.word	0x0800c2c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c2a8:	f7fc fd1e 	bl	8008ce8 <HAL_RCC_GetPCLK1Freq>
 800c2ac:	61f8      	str	r0, [r7, #28]
        break;
 800c2ae:	e014      	b.n	800c2da <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c2b0:	f7fc fd30 	bl	8008d14 <HAL_RCC_GetPCLK2Freq>
 800c2b4:	61f8      	str	r0, [r7, #28]
        break;
 800c2b6:	e010      	b.n	800c2da <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c2b8:	4b1d      	ldr	r3, [pc, #116]	@ (800c330 <UART_SetConfig+0x508>)
 800c2ba:	61fb      	str	r3, [r7, #28]
        break;
 800c2bc:	e00d      	b.n	800c2da <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c2be:	f7fc fc7b 	bl	8008bb8 <HAL_RCC_GetSysClockFreq>
 800c2c2:	61f8      	str	r0, [r7, #28]
        break;
 800c2c4:	e009      	b.n	800c2da <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c2c6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c2ca:	61fb      	str	r3, [r7, #28]
        break;
 800c2cc:	e005      	b.n	800c2da <UART_SetConfig+0x4b2>
      default:
        pclk = 0U;
 800c2ce:	2300      	movs	r3, #0
 800c2d0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800c2d2:	2301      	movs	r3, #1
 800c2d4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800c2d8:	bf00      	nop
    }

    if (pclk != 0U)
 800c2da:	69fb      	ldr	r3, [r7, #28]
 800c2dc:	2b00      	cmp	r3, #0
 800c2de:	d019      	beq.n	800c314 <UART_SetConfig+0x4ec>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800c2e0:	68fb      	ldr	r3, [r7, #12]
 800c2e2:	685b      	ldr	r3, [r3, #4]
 800c2e4:	085a      	lsrs	r2, r3, #1
 800c2e6:	69fb      	ldr	r3, [r7, #28]
 800c2e8:	441a      	add	r2, r3
 800c2ea:	68fb      	ldr	r3, [r7, #12]
 800c2ec:	685b      	ldr	r3, [r3, #4]
 800c2ee:	fbb2 f3f3 	udiv	r3, r2, r3
 800c2f2:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c2f4:	69bb      	ldr	r3, [r7, #24]
 800c2f6:	2b0f      	cmp	r3, #15
 800c2f8:	d909      	bls.n	800c30e <UART_SetConfig+0x4e6>
 800c2fa:	69bb      	ldr	r3, [r7, #24]
 800c2fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c300:	d205      	bcs.n	800c30e <UART_SetConfig+0x4e6>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800c302:	69bb      	ldr	r3, [r7, #24]
 800c304:	b29a      	uxth	r2, r3
 800c306:	68fb      	ldr	r3, [r7, #12]
 800c308:	681b      	ldr	r3, [r3, #0]
 800c30a:	60da      	str	r2, [r3, #12]
 800c30c:	e002      	b.n	800c314 <UART_SetConfig+0x4ec>
      }
      else
      {
        ret = HAL_ERROR;
 800c30e:	2301      	movs	r3, #1
 800c310:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800c314:	68fb      	ldr	r3, [r7, #12]
 800c316:	2200      	movs	r2, #0
 800c318:	665a      	str	r2, [r3, #100]	@ 0x64
  huart->TxISR = NULL;
 800c31a:	68fb      	ldr	r3, [r7, #12]
 800c31c:	2200      	movs	r2, #0
 800c31e:	669a      	str	r2, [r3, #104]	@ 0x68

  return ret;
 800c320:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 800c324:	4618      	mov	r0, r3
 800c326:	3728      	adds	r7, #40	@ 0x28
 800c328:	46bd      	mov	sp, r7
 800c32a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c32e:	bf00      	nop
 800c330:	00f42400 	.word	0x00f42400

0800c334 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800c334:	b480      	push	{r7}
 800c336:	b083      	sub	sp, #12
 800c338:	af00      	add	r7, sp, #0
 800c33a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c340:	f003 0301 	and.w	r3, r3, #1
 800c344:	2b00      	cmp	r3, #0
 800c346:	d00a      	beq.n	800c35e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	681b      	ldr	r3, [r3, #0]
 800c34c:	685b      	ldr	r3, [r3, #4]
 800c34e:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	681b      	ldr	r3, [r3, #0]
 800c35a:	430a      	orrs	r2, r1
 800c35c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c362:	f003 0302 	and.w	r3, r3, #2
 800c366:	2b00      	cmp	r3, #0
 800c368:	d00a      	beq.n	800c380 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	681b      	ldr	r3, [r3, #0]
 800c36e:	685b      	ldr	r3, [r3, #4]
 800c370:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	681b      	ldr	r3, [r3, #0]
 800c37c:	430a      	orrs	r2, r1
 800c37e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c384:	f003 0304 	and.w	r3, r3, #4
 800c388:	2b00      	cmp	r3, #0
 800c38a:	d00a      	beq.n	800c3a2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	681b      	ldr	r3, [r3, #0]
 800c390:	685b      	ldr	r3, [r3, #4]
 800c392:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	681b      	ldr	r3, [r3, #0]
 800c39e:	430a      	orrs	r2, r1
 800c3a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c3a6:	f003 0308 	and.w	r3, r3, #8
 800c3aa:	2b00      	cmp	r3, #0
 800c3ac:	d00a      	beq.n	800c3c4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	681b      	ldr	r3, [r3, #0]
 800c3b2:	685b      	ldr	r3, [r3, #4]
 800c3b4:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	681b      	ldr	r3, [r3, #0]
 800c3c0:	430a      	orrs	r2, r1
 800c3c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c3c8:	f003 0310 	and.w	r3, r3, #16
 800c3cc:	2b00      	cmp	r3, #0
 800c3ce:	d00a      	beq.n	800c3e6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	681b      	ldr	r3, [r3, #0]
 800c3d4:	689b      	ldr	r3, [r3, #8]
 800c3d6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	681b      	ldr	r3, [r3, #0]
 800c3e2:	430a      	orrs	r2, r1
 800c3e4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c3ea:	f003 0320 	and.w	r3, r3, #32
 800c3ee:	2b00      	cmp	r3, #0
 800c3f0:	d00a      	beq.n	800c408 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	681b      	ldr	r3, [r3, #0]
 800c3f6:	689b      	ldr	r3, [r3, #8]
 800c3f8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	681b      	ldr	r3, [r3, #0]
 800c404:	430a      	orrs	r2, r1
 800c406:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c40c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c410:	2b00      	cmp	r3, #0
 800c412:	d01a      	beq.n	800c44a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	681b      	ldr	r3, [r3, #0]
 800c418:	685b      	ldr	r3, [r3, #4]
 800c41a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	681b      	ldr	r3, [r3, #0]
 800c426:	430a      	orrs	r2, r1
 800c428:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c42e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c432:	d10a      	bne.n	800c44a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	681b      	ldr	r3, [r3, #0]
 800c438:	685b      	ldr	r3, [r3, #4]
 800c43a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	681b      	ldr	r3, [r3, #0]
 800c446:	430a      	orrs	r2, r1
 800c448:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c44e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c452:	2b00      	cmp	r3, #0
 800c454:	d00a      	beq.n	800c46c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	681b      	ldr	r3, [r3, #0]
 800c45a:	685b      	ldr	r3, [r3, #4]
 800c45c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	681b      	ldr	r3, [r3, #0]
 800c468:	430a      	orrs	r2, r1
 800c46a:	605a      	str	r2, [r3, #4]
  }
}
 800c46c:	bf00      	nop
 800c46e:	370c      	adds	r7, #12
 800c470:	46bd      	mov	sp, r7
 800c472:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c476:	4770      	bx	lr

0800c478 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800c478:	b580      	push	{r7, lr}
 800c47a:	b086      	sub	sp, #24
 800c47c:	af02      	add	r7, sp, #8
 800c47e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	2200      	movs	r2, #0
 800c484:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800c488:	f7f9 ff30 	bl	80062ec <HAL_GetTick>
 800c48c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	681b      	ldr	r3, [r3, #0]
 800c492:	681b      	ldr	r3, [r3, #0]
 800c494:	f003 0308 	and.w	r3, r3, #8
 800c498:	2b08      	cmp	r3, #8
 800c49a:	d10e      	bne.n	800c4ba <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c49c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800c4a0:	9300      	str	r3, [sp, #0]
 800c4a2:	68fb      	ldr	r3, [r7, #12]
 800c4a4:	2200      	movs	r2, #0
 800c4a6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800c4aa:	6878      	ldr	r0, [r7, #4]
 800c4ac:	f000 f82d 	bl	800c50a <UART_WaitOnFlagUntilTimeout>
 800c4b0:	4603      	mov	r3, r0
 800c4b2:	2b00      	cmp	r3, #0
 800c4b4:	d001      	beq.n	800c4ba <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c4b6:	2303      	movs	r3, #3
 800c4b8:	e023      	b.n	800c502 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	681b      	ldr	r3, [r3, #0]
 800c4be:	681b      	ldr	r3, [r3, #0]
 800c4c0:	f003 0304 	and.w	r3, r3, #4
 800c4c4:	2b04      	cmp	r3, #4
 800c4c6:	d10e      	bne.n	800c4e6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c4c8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800c4cc:	9300      	str	r3, [sp, #0]
 800c4ce:	68fb      	ldr	r3, [r7, #12]
 800c4d0:	2200      	movs	r2, #0
 800c4d2:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800c4d6:	6878      	ldr	r0, [r7, #4]
 800c4d8:	f000 f817 	bl	800c50a <UART_WaitOnFlagUntilTimeout>
 800c4dc:	4603      	mov	r3, r0
 800c4de:	2b00      	cmp	r3, #0
 800c4e0:	d001      	beq.n	800c4e6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c4e2:	2303      	movs	r3, #3
 800c4e4:	e00d      	b.n	800c502 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	2220      	movs	r2, #32
 800c4ea:	679a      	str	r2, [r3, #120]	@ 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	2220      	movs	r2, #32
 800c4f0:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	2200      	movs	r2, #0
 800c4f6:	661a      	str	r2, [r3, #96]	@ 0x60

  __HAL_UNLOCK(huart);
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	2200      	movs	r2, #0
 800c4fc:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

  return HAL_OK;
 800c500:	2300      	movs	r3, #0
}
 800c502:	4618      	mov	r0, r3
 800c504:	3710      	adds	r7, #16
 800c506:	46bd      	mov	sp, r7
 800c508:	bd80      	pop	{r7, pc}

0800c50a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c50a:	b580      	push	{r7, lr}
 800c50c:	b09c      	sub	sp, #112	@ 0x70
 800c50e:	af00      	add	r7, sp, #0
 800c510:	60f8      	str	r0, [r7, #12]
 800c512:	60b9      	str	r1, [r7, #8]
 800c514:	603b      	str	r3, [r7, #0]
 800c516:	4613      	mov	r3, r2
 800c518:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c51a:	e0a5      	b.n	800c668 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c51c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c51e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c522:	f000 80a1 	beq.w	800c668 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c526:	f7f9 fee1 	bl	80062ec <HAL_GetTick>
 800c52a:	4602      	mov	r2, r0
 800c52c:	683b      	ldr	r3, [r7, #0]
 800c52e:	1ad3      	subs	r3, r2, r3
 800c530:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800c532:	429a      	cmp	r2, r3
 800c534:	d302      	bcc.n	800c53c <UART_WaitOnFlagUntilTimeout+0x32>
 800c536:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c538:	2b00      	cmp	r3, #0
 800c53a:	d13e      	bne.n	800c5ba <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800c53c:	68fb      	ldr	r3, [r7, #12]
 800c53e:	681b      	ldr	r3, [r3, #0]
 800c540:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c542:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c544:	e853 3f00 	ldrex	r3, [r3]
 800c548:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800c54a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c54c:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 800c550:	667b      	str	r3, [r7, #100]	@ 0x64
 800c552:	68fb      	ldr	r3, [r7, #12]
 800c554:	681b      	ldr	r3, [r3, #0]
 800c556:	461a      	mov	r2, r3
 800c558:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c55a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c55c:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c55e:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800c560:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800c562:	e841 2300 	strex	r3, r2, [r1]
 800c566:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 800c568:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c56a:	2b00      	cmp	r3, #0
 800c56c:	d1e6      	bne.n	800c53c <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c56e:	68fb      	ldr	r3, [r7, #12]
 800c570:	681b      	ldr	r3, [r3, #0]
 800c572:	3308      	adds	r3, #8
 800c574:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c576:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c578:	e853 3f00 	ldrex	r3, [r3]
 800c57c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800c57e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c580:	f023 0301 	bic.w	r3, r3, #1
 800c584:	663b      	str	r3, [r7, #96]	@ 0x60
 800c586:	68fb      	ldr	r3, [r7, #12]
 800c588:	681b      	ldr	r3, [r3, #0]
 800c58a:	3308      	adds	r3, #8
 800c58c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800c58e:	64ba      	str	r2, [r7, #72]	@ 0x48
 800c590:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c592:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800c594:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c596:	e841 2300 	strex	r3, r2, [r1]
 800c59a:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800c59c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c59e:	2b00      	cmp	r3, #0
 800c5a0:	d1e5      	bne.n	800c56e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800c5a2:	68fb      	ldr	r3, [r7, #12]
 800c5a4:	2220      	movs	r2, #32
 800c5a6:	679a      	str	r2, [r3, #120]	@ 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800c5a8:	68fb      	ldr	r3, [r7, #12]
 800c5aa:	2220      	movs	r2, #32
 800c5ac:	67da      	str	r2, [r3, #124]	@ 0x7c

        __HAL_UNLOCK(huart);
 800c5ae:	68fb      	ldr	r3, [r7, #12]
 800c5b0:	2200      	movs	r2, #0
 800c5b2:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

        return HAL_TIMEOUT;
 800c5b6:	2303      	movs	r3, #3
 800c5b8:	e067      	b.n	800c68a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800c5ba:	68fb      	ldr	r3, [r7, #12]
 800c5bc:	681b      	ldr	r3, [r3, #0]
 800c5be:	681b      	ldr	r3, [r3, #0]
 800c5c0:	f003 0304 	and.w	r3, r3, #4
 800c5c4:	2b00      	cmp	r3, #0
 800c5c6:	d04f      	beq.n	800c668 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c5c8:	68fb      	ldr	r3, [r7, #12]
 800c5ca:	681b      	ldr	r3, [r3, #0]
 800c5cc:	69db      	ldr	r3, [r3, #28]
 800c5ce:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c5d2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c5d6:	d147      	bne.n	800c668 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c5d8:	68fb      	ldr	r3, [r7, #12]
 800c5da:	681b      	ldr	r3, [r3, #0]
 800c5dc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800c5e0:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800c5e2:	68fb      	ldr	r3, [r7, #12]
 800c5e4:	681b      	ldr	r3, [r3, #0]
 800c5e6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c5ea:	e853 3f00 	ldrex	r3, [r3]
 800c5ee:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c5f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5f2:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 800c5f6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800c5f8:	68fb      	ldr	r3, [r7, #12]
 800c5fa:	681b      	ldr	r3, [r3, #0]
 800c5fc:	461a      	mov	r2, r3
 800c5fe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c600:	637b      	str	r3, [r7, #52]	@ 0x34
 800c602:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c604:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800c606:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c608:	e841 2300 	strex	r3, r2, [r1]
 800c60c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800c60e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c610:	2b00      	cmp	r3, #0
 800c612:	d1e6      	bne.n	800c5e2 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c614:	68fb      	ldr	r3, [r7, #12]
 800c616:	681b      	ldr	r3, [r3, #0]
 800c618:	3308      	adds	r3, #8
 800c61a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c61c:	697b      	ldr	r3, [r7, #20]
 800c61e:	e853 3f00 	ldrex	r3, [r3]
 800c622:	613b      	str	r3, [r7, #16]
   return(result);
 800c624:	693b      	ldr	r3, [r7, #16]
 800c626:	f023 0301 	bic.w	r3, r3, #1
 800c62a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800c62c:	68fb      	ldr	r3, [r7, #12]
 800c62e:	681b      	ldr	r3, [r3, #0]
 800c630:	3308      	adds	r3, #8
 800c632:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800c634:	623a      	str	r2, [r7, #32]
 800c636:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c638:	69f9      	ldr	r1, [r7, #28]
 800c63a:	6a3a      	ldr	r2, [r7, #32]
 800c63c:	e841 2300 	strex	r3, r2, [r1]
 800c640:	61bb      	str	r3, [r7, #24]
   return(result);
 800c642:	69bb      	ldr	r3, [r7, #24]
 800c644:	2b00      	cmp	r3, #0
 800c646:	d1e5      	bne.n	800c614 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800c648:	68fb      	ldr	r3, [r7, #12]
 800c64a:	2220      	movs	r2, #32
 800c64c:	679a      	str	r2, [r3, #120]	@ 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800c64e:	68fb      	ldr	r3, [r7, #12]
 800c650:	2220      	movs	r2, #32
 800c652:	67da      	str	r2, [r3, #124]	@ 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c654:	68fb      	ldr	r3, [r7, #12]
 800c656:	2220      	movs	r2, #32
 800c658:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c65c:	68fb      	ldr	r3, [r7, #12]
 800c65e:	2200      	movs	r2, #0
 800c660:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

          return HAL_TIMEOUT;
 800c664:	2303      	movs	r3, #3
 800c666:	e010      	b.n	800c68a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c668:	68fb      	ldr	r3, [r7, #12]
 800c66a:	681b      	ldr	r3, [r3, #0]
 800c66c:	69da      	ldr	r2, [r3, #28]
 800c66e:	68bb      	ldr	r3, [r7, #8]
 800c670:	4013      	ands	r3, r2
 800c672:	68ba      	ldr	r2, [r7, #8]
 800c674:	429a      	cmp	r2, r3
 800c676:	bf0c      	ite	eq
 800c678:	2301      	moveq	r3, #1
 800c67a:	2300      	movne	r3, #0
 800c67c:	b2db      	uxtb	r3, r3
 800c67e:	461a      	mov	r2, r3
 800c680:	79fb      	ldrb	r3, [r7, #7]
 800c682:	429a      	cmp	r2, r3
 800c684:	f43f af4a 	beq.w	800c51c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c688:	2300      	movs	r3, #0
}
 800c68a:	4618      	mov	r0, r3
 800c68c:	3770      	adds	r7, #112	@ 0x70
 800c68e:	46bd      	mov	sp, r7
 800c690:	bd80      	pop	{r7, pc}
	...

0800c694 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c694:	b480      	push	{r7}
 800c696:	b097      	sub	sp, #92	@ 0x5c
 800c698:	af00      	add	r7, sp, #0
 800c69a:	60f8      	str	r0, [r7, #12]
 800c69c:	60b9      	str	r1, [r7, #8]
 800c69e:	4613      	mov	r3, r2
 800c6a0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800c6a2:	68fb      	ldr	r3, [r7, #12]
 800c6a4:	68ba      	ldr	r2, [r7, #8]
 800c6a6:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 800c6a8:	68fb      	ldr	r3, [r7, #12]
 800c6aa:	88fa      	ldrh	r2, [r7, #6]
 800c6ac:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 800c6b0:	68fb      	ldr	r3, [r7, #12]
 800c6b2:	88fa      	ldrh	r2, [r7, #6]
 800c6b4:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 800c6b8:	68fb      	ldr	r3, [r7, #12]
 800c6ba:	2200      	movs	r2, #0
 800c6bc:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800c6be:	68fb      	ldr	r3, [r7, #12]
 800c6c0:	689b      	ldr	r3, [r3, #8]
 800c6c2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c6c6:	d10e      	bne.n	800c6e6 <UART_Start_Receive_IT+0x52>
 800c6c8:	68fb      	ldr	r3, [r7, #12]
 800c6ca:	691b      	ldr	r3, [r3, #16]
 800c6cc:	2b00      	cmp	r3, #0
 800c6ce:	d105      	bne.n	800c6dc <UART_Start_Receive_IT+0x48>
 800c6d0:	68fb      	ldr	r3, [r7, #12]
 800c6d2:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800c6d6:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800c6da:	e02d      	b.n	800c738 <UART_Start_Receive_IT+0xa4>
 800c6dc:	68fb      	ldr	r3, [r7, #12]
 800c6de:	22ff      	movs	r2, #255	@ 0xff
 800c6e0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800c6e4:	e028      	b.n	800c738 <UART_Start_Receive_IT+0xa4>
 800c6e6:	68fb      	ldr	r3, [r7, #12]
 800c6e8:	689b      	ldr	r3, [r3, #8]
 800c6ea:	2b00      	cmp	r3, #0
 800c6ec:	d10d      	bne.n	800c70a <UART_Start_Receive_IT+0x76>
 800c6ee:	68fb      	ldr	r3, [r7, #12]
 800c6f0:	691b      	ldr	r3, [r3, #16]
 800c6f2:	2b00      	cmp	r3, #0
 800c6f4:	d104      	bne.n	800c700 <UART_Start_Receive_IT+0x6c>
 800c6f6:	68fb      	ldr	r3, [r7, #12]
 800c6f8:	22ff      	movs	r2, #255	@ 0xff
 800c6fa:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800c6fe:	e01b      	b.n	800c738 <UART_Start_Receive_IT+0xa4>
 800c700:	68fb      	ldr	r3, [r7, #12]
 800c702:	227f      	movs	r2, #127	@ 0x7f
 800c704:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800c708:	e016      	b.n	800c738 <UART_Start_Receive_IT+0xa4>
 800c70a:	68fb      	ldr	r3, [r7, #12]
 800c70c:	689b      	ldr	r3, [r3, #8]
 800c70e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c712:	d10d      	bne.n	800c730 <UART_Start_Receive_IT+0x9c>
 800c714:	68fb      	ldr	r3, [r7, #12]
 800c716:	691b      	ldr	r3, [r3, #16]
 800c718:	2b00      	cmp	r3, #0
 800c71a:	d104      	bne.n	800c726 <UART_Start_Receive_IT+0x92>
 800c71c:	68fb      	ldr	r3, [r7, #12]
 800c71e:	227f      	movs	r2, #127	@ 0x7f
 800c720:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800c724:	e008      	b.n	800c738 <UART_Start_Receive_IT+0xa4>
 800c726:	68fb      	ldr	r3, [r7, #12]
 800c728:	223f      	movs	r2, #63	@ 0x3f
 800c72a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800c72e:	e003      	b.n	800c738 <UART_Start_Receive_IT+0xa4>
 800c730:	68fb      	ldr	r3, [r7, #12]
 800c732:	2200      	movs	r2, #0
 800c734:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c738:	68fb      	ldr	r3, [r7, #12]
 800c73a:	2200      	movs	r2, #0
 800c73c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800c740:	68fb      	ldr	r3, [r7, #12]
 800c742:	2222      	movs	r2, #34	@ 0x22
 800c744:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c746:	68fb      	ldr	r3, [r7, #12]
 800c748:	681b      	ldr	r3, [r3, #0]
 800c74a:	3308      	adds	r3, #8
 800c74c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c74e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c750:	e853 3f00 	ldrex	r3, [r3]
 800c754:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800c756:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c758:	f043 0301 	orr.w	r3, r3, #1
 800c75c:	657b      	str	r3, [r7, #84]	@ 0x54
 800c75e:	68fb      	ldr	r3, [r7, #12]
 800c760:	681b      	ldr	r3, [r3, #0]
 800c762:	3308      	adds	r3, #8
 800c764:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800c766:	64ba      	str	r2, [r7, #72]	@ 0x48
 800c768:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c76a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800c76c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c76e:	e841 2300 	strex	r3, r2, [r1]
 800c772:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800c774:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c776:	2b00      	cmp	r3, #0
 800c778:	d1e5      	bne.n	800c746 <UART_Start_Receive_IT+0xb2>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c77a:	68fb      	ldr	r3, [r7, #12]
 800c77c:	689b      	ldr	r3, [r3, #8]
 800c77e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c782:	d107      	bne.n	800c794 <UART_Start_Receive_IT+0x100>
 800c784:	68fb      	ldr	r3, [r7, #12]
 800c786:	691b      	ldr	r3, [r3, #16]
 800c788:	2b00      	cmp	r3, #0
 800c78a:	d103      	bne.n	800c794 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800c78c:	68fb      	ldr	r3, [r7, #12]
 800c78e:	4a24      	ldr	r2, [pc, #144]	@ (800c820 <UART_Start_Receive_IT+0x18c>)
 800c790:	665a      	str	r2, [r3, #100]	@ 0x64
 800c792:	e002      	b.n	800c79a <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800c794:	68fb      	ldr	r3, [r7, #12]
 800c796:	4a23      	ldr	r2, [pc, #140]	@ (800c824 <UART_Start_Receive_IT+0x190>)
 800c798:	665a      	str	r2, [r3, #100]	@ 0x64
  }

  __HAL_UNLOCK(huart);
 800c79a:	68fb      	ldr	r3, [r7, #12]
 800c79c:	2200      	movs	r2, #0
 800c79e:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800c7a2:	68fb      	ldr	r3, [r7, #12]
 800c7a4:	691b      	ldr	r3, [r3, #16]
 800c7a6:	2b00      	cmp	r3, #0
 800c7a8:	d019      	beq.n	800c7de <UART_Start_Receive_IT+0x14a>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800c7aa:	68fb      	ldr	r3, [r7, #12]
 800c7ac:	681b      	ldr	r3, [r3, #0]
 800c7ae:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c7b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c7b2:	e853 3f00 	ldrex	r3, [r3]
 800c7b6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c7b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c7ba:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800c7be:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c7c0:	68fb      	ldr	r3, [r7, #12]
 800c7c2:	681b      	ldr	r3, [r3, #0]
 800c7c4:	461a      	mov	r2, r3
 800c7c6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c7c8:	637b      	str	r3, [r7, #52]	@ 0x34
 800c7ca:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c7cc:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800c7ce:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c7d0:	e841 2300 	strex	r3, r2, [r1]
 800c7d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800c7d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c7d8:	2b00      	cmp	r3, #0
 800c7da:	d1e6      	bne.n	800c7aa <UART_Start_Receive_IT+0x116>
 800c7dc:	e018      	b.n	800c810 <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800c7de:	68fb      	ldr	r3, [r7, #12]
 800c7e0:	681b      	ldr	r3, [r3, #0]
 800c7e2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c7e4:	697b      	ldr	r3, [r7, #20]
 800c7e6:	e853 3f00 	ldrex	r3, [r3]
 800c7ea:	613b      	str	r3, [r7, #16]
   return(result);
 800c7ec:	693b      	ldr	r3, [r7, #16]
 800c7ee:	f043 0320 	orr.w	r3, r3, #32
 800c7f2:	653b      	str	r3, [r7, #80]	@ 0x50
 800c7f4:	68fb      	ldr	r3, [r7, #12]
 800c7f6:	681b      	ldr	r3, [r3, #0]
 800c7f8:	461a      	mov	r2, r3
 800c7fa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c7fc:	623b      	str	r3, [r7, #32]
 800c7fe:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c800:	69f9      	ldr	r1, [r7, #28]
 800c802:	6a3a      	ldr	r2, [r7, #32]
 800c804:	e841 2300 	strex	r3, r2, [r1]
 800c808:	61bb      	str	r3, [r7, #24]
   return(result);
 800c80a:	69bb      	ldr	r3, [r7, #24]
 800c80c:	2b00      	cmp	r3, #0
 800c80e:	d1e6      	bne.n	800c7de <UART_Start_Receive_IT+0x14a>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 800c810:	2300      	movs	r3, #0
}
 800c812:	4618      	mov	r0, r3
 800c814:	375c      	adds	r7, #92	@ 0x5c
 800c816:	46bd      	mov	sp, r7
 800c818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c81c:	4770      	bx	lr
 800c81e:	bf00      	nop
 800c820:	0800cc45 	.word	0x0800cc45
 800c824:	0800cae5 	.word	0x0800cae5

0800c828 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c828:	b480      	push	{r7}
 800c82a:	b095      	sub	sp, #84	@ 0x54
 800c82c:	af00      	add	r7, sp, #0
 800c82e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	681b      	ldr	r3, [r3, #0]
 800c834:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c836:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c838:	e853 3f00 	ldrex	r3, [r3]
 800c83c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800c83e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c840:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c844:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	681b      	ldr	r3, [r3, #0]
 800c84a:	461a      	mov	r2, r3
 800c84c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c84e:	643b      	str	r3, [r7, #64]	@ 0x40
 800c850:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c852:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800c854:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c856:	e841 2300 	strex	r3, r2, [r1]
 800c85a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800c85c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c85e:	2b00      	cmp	r3, #0
 800c860:	d1e6      	bne.n	800c830 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	681b      	ldr	r3, [r3, #0]
 800c866:	3308      	adds	r3, #8
 800c868:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c86a:	6a3b      	ldr	r3, [r7, #32]
 800c86c:	e853 3f00 	ldrex	r3, [r3]
 800c870:	61fb      	str	r3, [r7, #28]
   return(result);
 800c872:	69fb      	ldr	r3, [r7, #28]
 800c874:	f023 0301 	bic.w	r3, r3, #1
 800c878:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	681b      	ldr	r3, [r3, #0]
 800c87e:	3308      	adds	r3, #8
 800c880:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c882:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800c884:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c886:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c888:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c88a:	e841 2300 	strex	r3, r2, [r1]
 800c88e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c890:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c892:	2b00      	cmp	r3, #0
 800c894:	d1e5      	bne.n	800c862 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c89a:	2b01      	cmp	r3, #1
 800c89c:	d118      	bne.n	800c8d0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	681b      	ldr	r3, [r3, #0]
 800c8a2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c8a4:	68fb      	ldr	r3, [r7, #12]
 800c8a6:	e853 3f00 	ldrex	r3, [r3]
 800c8aa:	60bb      	str	r3, [r7, #8]
   return(result);
 800c8ac:	68bb      	ldr	r3, [r7, #8]
 800c8ae:	f023 0310 	bic.w	r3, r3, #16
 800c8b2:	647b      	str	r3, [r7, #68]	@ 0x44
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	681b      	ldr	r3, [r3, #0]
 800c8b8:	461a      	mov	r2, r3
 800c8ba:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c8bc:	61bb      	str	r3, [r7, #24]
 800c8be:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c8c0:	6979      	ldr	r1, [r7, #20]
 800c8c2:	69ba      	ldr	r2, [r7, #24]
 800c8c4:	e841 2300 	strex	r3, r2, [r1]
 800c8c8:	613b      	str	r3, [r7, #16]
   return(result);
 800c8ca:	693b      	ldr	r3, [r7, #16]
 800c8cc:	2b00      	cmp	r3, #0
 800c8ce:	d1e6      	bne.n	800c89e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	2220      	movs	r2, #32
 800c8d4:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	2200      	movs	r2, #0
 800c8da:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	2200      	movs	r2, #0
 800c8e0:	665a      	str	r2, [r3, #100]	@ 0x64
}
 800c8e2:	bf00      	nop
 800c8e4:	3754      	adds	r7, #84	@ 0x54
 800c8e6:	46bd      	mov	sp, r7
 800c8e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8ec:	4770      	bx	lr

0800c8ee <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c8ee:	b580      	push	{r7, lr}
 800c8f0:	b084      	sub	sp, #16
 800c8f2:	af00      	add	r7, sp, #0
 800c8f4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c8fa:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800c8fc:	68fb      	ldr	r3, [r7, #12]
 800c8fe:	2200      	movs	r2, #0
 800c900:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 800c904:	68fb      	ldr	r3, [r7, #12]
 800c906:	2200      	movs	r2, #0
 800c908:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c90c:	68f8      	ldr	r0, [r7, #12]
 800c90e:	f7f5 f80b 	bl	8001928 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c912:	bf00      	nop
 800c914:	3710      	adds	r7, #16
 800c916:	46bd      	mov	sp, r7
 800c918:	bd80      	pop	{r7, pc}

0800c91a <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800c91a:	b480      	push	{r7}
 800c91c:	b08f      	sub	sp, #60	@ 0x3c
 800c91e:	af00      	add	r7, sp, #0
 800c920:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800c926:	2b21      	cmp	r3, #33	@ 0x21
 800c928:	d14c      	bne.n	800c9c4 <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800c930:	b29b      	uxth	r3, r3
 800c932:	2b00      	cmp	r3, #0
 800c934:	d132      	bne.n	800c99c <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	681b      	ldr	r3, [r3, #0]
 800c93a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c93c:	6a3b      	ldr	r3, [r7, #32]
 800c93e:	e853 3f00 	ldrex	r3, [r3]
 800c942:	61fb      	str	r3, [r7, #28]
   return(result);
 800c944:	69fb      	ldr	r3, [r7, #28]
 800c946:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c94a:	637b      	str	r3, [r7, #52]	@ 0x34
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	681b      	ldr	r3, [r3, #0]
 800c950:	461a      	mov	r2, r3
 800c952:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c954:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c956:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c958:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c95a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c95c:	e841 2300 	strex	r3, r2, [r1]
 800c960:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c962:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c964:	2b00      	cmp	r3, #0
 800c966:	d1e6      	bne.n	800c936 <UART_TxISR_8BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	681b      	ldr	r3, [r3, #0]
 800c96c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c96e:	68fb      	ldr	r3, [r7, #12]
 800c970:	e853 3f00 	ldrex	r3, [r3]
 800c974:	60bb      	str	r3, [r7, #8]
   return(result);
 800c976:	68bb      	ldr	r3, [r7, #8]
 800c978:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c97c:	633b      	str	r3, [r7, #48]	@ 0x30
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	681b      	ldr	r3, [r3, #0]
 800c982:	461a      	mov	r2, r3
 800c984:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c986:	61bb      	str	r3, [r7, #24]
 800c988:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c98a:	6979      	ldr	r1, [r7, #20]
 800c98c:	69ba      	ldr	r2, [r7, #24]
 800c98e:	e841 2300 	strex	r3, r2, [r1]
 800c992:	613b      	str	r3, [r7, #16]
   return(result);
 800c994:	693b      	ldr	r3, [r7, #16]
 800c996:	2b00      	cmp	r3, #0
 800c998:	d1e6      	bne.n	800c968 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800c99a:	e013      	b.n	800c9c4 <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c9a0:	781a      	ldrb	r2, [r3, #0]
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	681b      	ldr	r3, [r3, #0]
 800c9a6:	851a      	strh	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c9ac:	1c5a      	adds	r2, r3, #1
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800c9b8:	b29b      	uxth	r3, r3
 800c9ba:	3b01      	subs	r3, #1
 800c9bc:	b29a      	uxth	r2, r3
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
}
 800c9c4:	bf00      	nop
 800c9c6:	373c      	adds	r7, #60	@ 0x3c
 800c9c8:	46bd      	mov	sp, r7
 800c9ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9ce:	4770      	bx	lr

0800c9d0 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800c9d0:	b480      	push	{r7}
 800c9d2:	b091      	sub	sp, #68	@ 0x44
 800c9d4:	af00      	add	r7, sp, #0
 800c9d6:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800c9dc:	2b21      	cmp	r3, #33	@ 0x21
 800c9de:	d151      	bne.n	800ca84 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800c9e6:	b29b      	uxth	r3, r3
 800c9e8:	2b00      	cmp	r3, #0
 800c9ea:	d132      	bne.n	800ca52 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	681b      	ldr	r3, [r3, #0]
 800c9f0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c9f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c9f4:	e853 3f00 	ldrex	r3, [r3]
 800c9f8:	623b      	str	r3, [r7, #32]
   return(result);
 800c9fa:	6a3b      	ldr	r3, [r7, #32]
 800c9fc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ca00:	63bb      	str	r3, [r7, #56]	@ 0x38
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	681b      	ldr	r3, [r3, #0]
 800ca06:	461a      	mov	r2, r3
 800ca08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca0a:	633b      	str	r3, [r7, #48]	@ 0x30
 800ca0c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca0e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ca10:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ca12:	e841 2300 	strex	r3, r2, [r1]
 800ca16:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800ca18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca1a:	2b00      	cmp	r3, #0
 800ca1c:	d1e6      	bne.n	800c9ec <UART_TxISR_16BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	681b      	ldr	r3, [r3, #0]
 800ca22:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca24:	693b      	ldr	r3, [r7, #16]
 800ca26:	e853 3f00 	ldrex	r3, [r3]
 800ca2a:	60fb      	str	r3, [r7, #12]
   return(result);
 800ca2c:	68fb      	ldr	r3, [r7, #12]
 800ca2e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ca32:	637b      	str	r3, [r7, #52]	@ 0x34
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	681b      	ldr	r3, [r3, #0]
 800ca38:	461a      	mov	r2, r3
 800ca3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ca3c:	61fb      	str	r3, [r7, #28]
 800ca3e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca40:	69b9      	ldr	r1, [r7, #24]
 800ca42:	69fa      	ldr	r2, [r7, #28]
 800ca44:	e841 2300 	strex	r3, r2, [r1]
 800ca48:	617b      	str	r3, [r7, #20]
   return(result);
 800ca4a:	697b      	ldr	r3, [r7, #20]
 800ca4c:	2b00      	cmp	r3, #0
 800ca4e:	d1e6      	bne.n	800ca1e <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800ca50:	e018      	b.n	800ca84 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ca56:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800ca58:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ca5a:	881a      	ldrh	r2, [r3, #0]
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	681b      	ldr	r3, [r3, #0]
 800ca60:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ca64:	b292      	uxth	r2, r2
 800ca66:	851a      	strh	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ca6c:	1c9a      	adds	r2, r3, #2
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800ca78:	b29b      	uxth	r3, r3
 800ca7a:	3b01      	subs	r3, #1
 800ca7c:	b29a      	uxth	r2, r3
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
}
 800ca84:	bf00      	nop
 800ca86:	3744      	adds	r7, #68	@ 0x44
 800ca88:	46bd      	mov	sp, r7
 800ca8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca8e:	4770      	bx	lr

0800ca90 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800ca90:	b580      	push	{r7, lr}
 800ca92:	b088      	sub	sp, #32
 800ca94:	af00      	add	r7, sp, #0
 800ca96:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	681b      	ldr	r3, [r3, #0]
 800ca9c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca9e:	68fb      	ldr	r3, [r7, #12]
 800caa0:	e853 3f00 	ldrex	r3, [r3]
 800caa4:	60bb      	str	r3, [r7, #8]
   return(result);
 800caa6:	68bb      	ldr	r3, [r7, #8]
 800caa8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800caac:	61fb      	str	r3, [r7, #28]
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	681b      	ldr	r3, [r3, #0]
 800cab2:	461a      	mov	r2, r3
 800cab4:	69fb      	ldr	r3, [r7, #28]
 800cab6:	61bb      	str	r3, [r7, #24]
 800cab8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800caba:	6979      	ldr	r1, [r7, #20]
 800cabc:	69ba      	ldr	r2, [r7, #24]
 800cabe:	e841 2300 	strex	r3, r2, [r1]
 800cac2:	613b      	str	r3, [r7, #16]
   return(result);
 800cac4:	693b      	ldr	r3, [r7, #16]
 800cac6:	2b00      	cmp	r3, #0
 800cac8:	d1e6      	bne.n	800ca98 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	2220      	movs	r2, #32
 800cace:	679a      	str	r2, [r3, #120]	@ 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	2200      	movs	r2, #0
 800cad4:	669a      	str	r2, [r3, #104]	@ 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800cad6:	6878      	ldr	r0, [r7, #4]
 800cad8:	f7f4 ffd8 	bl	8001a8c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800cadc:	bf00      	nop
 800cade:	3720      	adds	r7, #32
 800cae0:	46bd      	mov	sp, r7
 800cae2:	bd80      	pop	{r7, pc}

0800cae4 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800cae4:	b580      	push	{r7, lr}
 800cae6:	b096      	sub	sp, #88	@ 0x58
 800cae8:	af00      	add	r7, sp, #0
 800caea:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800caf2:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800cafa:	2b22      	cmp	r3, #34	@ 0x22
 800cafc:	f040 8094 	bne.w	800cc28 <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	681b      	ldr	r3, [r3, #0]
 800cb04:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800cb06:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800cb0a:	f8b7 3054 	ldrh.w	r3, [r7, #84]	@ 0x54
 800cb0e:	b2d9      	uxtb	r1, r3
 800cb10:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800cb14:	b2da      	uxtb	r2, r3
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cb1a:	400a      	ands	r2, r1
 800cb1c:	b2d2      	uxtb	r2, r2
 800cb1e:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cb24:	1c5a      	adds	r2, r3, #1
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800cb30:	b29b      	uxth	r3, r3
 800cb32:	3b01      	subs	r3, #1
 800cb34:	b29a      	uxth	r2, r3
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800cb42:	b29b      	uxth	r3, r3
 800cb44:	2b00      	cmp	r3, #0
 800cb46:	d179      	bne.n	800cc3c <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	681b      	ldr	r3, [r3, #0]
 800cb4c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb50:	e853 3f00 	ldrex	r3, [r3]
 800cb54:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800cb56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cb58:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800cb5c:	653b      	str	r3, [r7, #80]	@ 0x50
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	681b      	ldr	r3, [r3, #0]
 800cb62:	461a      	mov	r2, r3
 800cb64:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cb66:	647b      	str	r3, [r7, #68]	@ 0x44
 800cb68:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb6a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800cb6c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800cb6e:	e841 2300 	strex	r3, r2, [r1]
 800cb72:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800cb74:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cb76:	2b00      	cmp	r3, #0
 800cb78:	d1e6      	bne.n	800cb48 <UART_RxISR_8BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	681b      	ldr	r3, [r3, #0]
 800cb7e:	3308      	adds	r3, #8
 800cb80:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb84:	e853 3f00 	ldrex	r3, [r3]
 800cb88:	623b      	str	r3, [r7, #32]
   return(result);
 800cb8a:	6a3b      	ldr	r3, [r7, #32]
 800cb8c:	f023 0301 	bic.w	r3, r3, #1
 800cb90:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	681b      	ldr	r3, [r3, #0]
 800cb96:	3308      	adds	r3, #8
 800cb98:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800cb9a:	633a      	str	r2, [r7, #48]	@ 0x30
 800cb9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb9e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800cba0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cba2:	e841 2300 	strex	r3, r2, [r1]
 800cba6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800cba8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cbaa:	2b00      	cmp	r3, #0
 800cbac:	d1e5      	bne.n	800cb7a <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	2220      	movs	r2, #32
 800cbb2:	67da      	str	r2, [r3, #124]	@ 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	2200      	movs	r2, #0
 800cbb8:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800cbbe:	2b01      	cmp	r3, #1
 800cbc0:	d12e      	bne.n	800cc20 <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	2200      	movs	r2, #0
 800cbc6:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	681b      	ldr	r3, [r3, #0]
 800cbcc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cbce:	693b      	ldr	r3, [r7, #16]
 800cbd0:	e853 3f00 	ldrex	r3, [r3]
 800cbd4:	60fb      	str	r3, [r7, #12]
   return(result);
 800cbd6:	68fb      	ldr	r3, [r7, #12]
 800cbd8:	f023 0310 	bic.w	r3, r3, #16
 800cbdc:	64bb      	str	r3, [r7, #72]	@ 0x48
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	681b      	ldr	r3, [r3, #0]
 800cbe2:	461a      	mov	r2, r3
 800cbe4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800cbe6:	61fb      	str	r3, [r7, #28]
 800cbe8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cbea:	69b9      	ldr	r1, [r7, #24]
 800cbec:	69fa      	ldr	r2, [r7, #28]
 800cbee:	e841 2300 	strex	r3, r2, [r1]
 800cbf2:	617b      	str	r3, [r7, #20]
   return(result);
 800cbf4:	697b      	ldr	r3, [r7, #20]
 800cbf6:	2b00      	cmp	r3, #0
 800cbf8:	d1e6      	bne.n	800cbc8 <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	681b      	ldr	r3, [r3, #0]
 800cbfe:	69db      	ldr	r3, [r3, #28]
 800cc00:	f003 0310 	and.w	r3, r3, #16
 800cc04:	2b10      	cmp	r3, #16
 800cc06:	d103      	bne.n	800cc10 <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	681b      	ldr	r3, [r3, #0]
 800cc0c:	2210      	movs	r2, #16
 800cc0e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800cc16:	4619      	mov	r1, r3
 800cc18:	6878      	ldr	r0, [r7, #4]
 800cc1a:	f7ff f8f9 	bl	800be10 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800cc1e:	e00d      	b.n	800cc3c <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800cc20:	6878      	ldr	r0, [r7, #4]
 800cc22:	f7f4 feb9 	bl	8001998 <HAL_UART_RxCpltCallback>
}
 800cc26:	e009      	b.n	800cc3c <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	681b      	ldr	r3, [r3, #0]
 800cc2c:	8b1b      	ldrh	r3, [r3, #24]
 800cc2e:	b29a      	uxth	r2, r3
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	681b      	ldr	r3, [r3, #0]
 800cc34:	f042 0208 	orr.w	r2, r2, #8
 800cc38:	b292      	uxth	r2, r2
 800cc3a:	831a      	strh	r2, [r3, #24]
}
 800cc3c:	bf00      	nop
 800cc3e:	3758      	adds	r7, #88	@ 0x58
 800cc40:	46bd      	mov	sp, r7
 800cc42:	bd80      	pop	{r7, pc}

0800cc44 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800cc44:	b580      	push	{r7, lr}
 800cc46:	b096      	sub	sp, #88	@ 0x58
 800cc48:	af00      	add	r7, sp, #0
 800cc4a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800cc52:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800cc5a:	2b22      	cmp	r3, #34	@ 0x22
 800cc5c:	f040 8094 	bne.w	800cd88 <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	681b      	ldr	r3, [r3, #0]
 800cc64:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800cc66:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cc6e:	653b      	str	r3, [r7, #80]	@ 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800cc70:	f8b7 2054 	ldrh.w	r2, [r7, #84]	@ 0x54
 800cc74:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800cc78:	4013      	ands	r3, r2
 800cc7a:	b29a      	uxth	r2, r3
 800cc7c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cc7e:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cc84:	1c9a      	adds	r2, r3, #2
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800cc90:	b29b      	uxth	r3, r3
 800cc92:	3b01      	subs	r3, #1
 800cc94:	b29a      	uxth	r2, r3
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800cca2:	b29b      	uxth	r3, r3
 800cca4:	2b00      	cmp	r3, #0
 800cca6:	d179      	bne.n	800cd9c <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	681b      	ldr	r3, [r3, #0]
 800ccac:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ccae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ccb0:	e853 3f00 	ldrex	r3, [r3]
 800ccb4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800ccb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ccb8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ccbc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	681b      	ldr	r3, [r3, #0]
 800ccc2:	461a      	mov	r2, r3
 800ccc4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ccc6:	643b      	str	r3, [r7, #64]	@ 0x40
 800ccc8:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ccca:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800cccc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800ccce:	e841 2300 	strex	r3, r2, [r1]
 800ccd2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800ccd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ccd6:	2b00      	cmp	r3, #0
 800ccd8:	d1e6      	bne.n	800cca8 <UART_RxISR_16BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	681b      	ldr	r3, [r3, #0]
 800ccde:	3308      	adds	r3, #8
 800cce0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cce2:	6a3b      	ldr	r3, [r7, #32]
 800cce4:	e853 3f00 	ldrex	r3, [r3]
 800cce8:	61fb      	str	r3, [r7, #28]
   return(result);
 800ccea:	69fb      	ldr	r3, [r7, #28]
 800ccec:	f023 0301 	bic.w	r3, r3, #1
 800ccf0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	681b      	ldr	r3, [r3, #0]
 800ccf6:	3308      	adds	r3, #8
 800ccf8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ccfa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800ccfc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ccfe:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800cd00:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800cd02:	e841 2300 	strex	r3, r2, [r1]
 800cd06:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800cd08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd0a:	2b00      	cmp	r3, #0
 800cd0c:	d1e5      	bne.n	800ccda <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	2220      	movs	r2, #32
 800cd12:	67da      	str	r2, [r3, #124]	@ 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	2200      	movs	r2, #0
 800cd18:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800cd1e:	2b01      	cmp	r3, #1
 800cd20:	d12e      	bne.n	800cd80 <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	2200      	movs	r2, #0
 800cd26:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	681b      	ldr	r3, [r3, #0]
 800cd2c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd2e:	68fb      	ldr	r3, [r7, #12]
 800cd30:	e853 3f00 	ldrex	r3, [r3]
 800cd34:	60bb      	str	r3, [r7, #8]
   return(result);
 800cd36:	68bb      	ldr	r3, [r7, #8]
 800cd38:	f023 0310 	bic.w	r3, r3, #16
 800cd3c:	647b      	str	r3, [r7, #68]	@ 0x44
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	681b      	ldr	r3, [r3, #0]
 800cd42:	461a      	mov	r2, r3
 800cd44:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cd46:	61bb      	str	r3, [r7, #24]
 800cd48:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd4a:	6979      	ldr	r1, [r7, #20]
 800cd4c:	69ba      	ldr	r2, [r7, #24]
 800cd4e:	e841 2300 	strex	r3, r2, [r1]
 800cd52:	613b      	str	r3, [r7, #16]
   return(result);
 800cd54:	693b      	ldr	r3, [r7, #16]
 800cd56:	2b00      	cmp	r3, #0
 800cd58:	d1e6      	bne.n	800cd28 <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	681b      	ldr	r3, [r3, #0]
 800cd5e:	69db      	ldr	r3, [r3, #28]
 800cd60:	f003 0310 	and.w	r3, r3, #16
 800cd64:	2b10      	cmp	r3, #16
 800cd66:	d103      	bne.n	800cd70 <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	681b      	ldr	r3, [r3, #0]
 800cd6c:	2210      	movs	r2, #16
 800cd6e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800cd76:	4619      	mov	r1, r3
 800cd78:	6878      	ldr	r0, [r7, #4]
 800cd7a:	f7ff f849 	bl	800be10 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800cd7e:	e00d      	b.n	800cd9c <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800cd80:	6878      	ldr	r0, [r7, #4]
 800cd82:	f7f4 fe09 	bl	8001998 <HAL_UART_RxCpltCallback>
}
 800cd86:	e009      	b.n	800cd9c <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	681b      	ldr	r3, [r3, #0]
 800cd8c:	8b1b      	ldrh	r3, [r3, #24]
 800cd8e:	b29a      	uxth	r2, r3
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	681b      	ldr	r3, [r3, #0]
 800cd94:	f042 0208 	orr.w	r2, r2, #8
 800cd98:	b292      	uxth	r2, r2
 800cd9a:	831a      	strh	r2, [r3, #24]
}
 800cd9c:	bf00      	nop
 800cd9e:	3758      	adds	r7, #88	@ 0x58
 800cda0:	46bd      	mov	sp, r7
 800cda2:	bd80      	pop	{r7, pc}

0800cda4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800cda4:	b480      	push	{r7}
 800cda6:	b083      	sub	sp, #12
 800cda8:	af00      	add	r7, sp, #0
 800cdaa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800cdac:	bf00      	nop
 800cdae:	370c      	adds	r7, #12
 800cdb0:	46bd      	mov	sp, r7
 800cdb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdb6:	4770      	bx	lr

0800cdb8 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800cdb8:	b480      	push	{r7}
 800cdba:	b085      	sub	sp, #20
 800cdbc:	af00      	add	r7, sp, #0
 800cdbe:	4603      	mov	r3, r0
 800cdc0:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800cdc2:	2300      	movs	r3, #0
 800cdc4:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800cdc6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800cdca:	2b84      	cmp	r3, #132	@ 0x84
 800cdcc:	d005      	beq.n	800cdda <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800cdce:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800cdd2:	68fb      	ldr	r3, [r7, #12]
 800cdd4:	4413      	add	r3, r2
 800cdd6:	3303      	adds	r3, #3
 800cdd8:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800cdda:	68fb      	ldr	r3, [r7, #12]
}
 800cddc:	4618      	mov	r0, r3
 800cdde:	3714      	adds	r7, #20
 800cde0:	46bd      	mov	sp, r7
 800cde2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cde6:	4770      	bx	lr

0800cde8 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800cde8:	b480      	push	{r7}
 800cdea:	b083      	sub	sp, #12
 800cdec:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cdee:	f3ef 8305 	mrs	r3, IPSR
 800cdf2:	607b      	str	r3, [r7, #4]
  return(result);
 800cdf4:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800cdf6:	2b00      	cmp	r3, #0
 800cdf8:	bf14      	ite	ne
 800cdfa:	2301      	movne	r3, #1
 800cdfc:	2300      	moveq	r3, #0
 800cdfe:	b2db      	uxtb	r3, r3
}
 800ce00:	4618      	mov	r0, r3
 800ce02:	370c      	adds	r7, #12
 800ce04:	46bd      	mov	sp, r7
 800ce06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce0a:	4770      	bx	lr

0800ce0c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800ce0c:	b580      	push	{r7, lr}
 800ce0e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800ce10:	f001 f928 	bl	800e064 <vTaskStartScheduler>
  
  return osOK;
 800ce14:	2300      	movs	r3, #0
}
 800ce16:	4618      	mov	r0, r3
 800ce18:	bd80      	pop	{r7, pc}

0800ce1a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800ce1a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ce1c:	b089      	sub	sp, #36	@ 0x24
 800ce1e:	af04      	add	r7, sp, #16
 800ce20:	6078      	str	r0, [r7, #4]
 800ce22:	6039      	str	r1, [r7, #0]
      return NULL;
    } 
  }
#elif( configSUPPORT_STATIC_ALLOCATION == 1 )

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	685c      	ldr	r4, [r3, #4]
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	691e      	ldr	r6, [r3, #16]
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800ce36:	4618      	mov	r0, r3
 800ce38:	f7ff ffbe 	bl	800cdb8 <makeFreeRtosPriority>
 800ce3c:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	695b      	ldr	r3, [r3, #20]
 800ce42:	687a      	ldr	r2, [r7, #4]
 800ce44:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800ce46:	9202      	str	r2, [sp, #8]
 800ce48:	9301      	str	r3, [sp, #4]
 800ce4a:	9100      	str	r1, [sp, #0]
 800ce4c:	683b      	ldr	r3, [r7, #0]
 800ce4e:	4632      	mov	r2, r6
 800ce50:	4629      	mov	r1, r5
 800ce52:	4620      	mov	r0, r4
 800ce54:	f000 ff82 	bl	800dd5c <xTaskCreateStatic>
 800ce58:	60f8      	str	r0, [r7, #12]
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800ce5a:	68fb      	ldr	r3, [r7, #12]
}
 800ce5c:	4618      	mov	r0, r3
 800ce5e:	3714      	adds	r7, #20
 800ce60:	46bd      	mov	sp, r7
 800ce62:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ce64 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800ce64:	b580      	push	{r7, lr}
 800ce66:	b084      	sub	sp, #16
 800ce68:	af00      	add	r7, sp, #0
 800ce6a:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800ce70:	68fb      	ldr	r3, [r7, #12]
 800ce72:	2b00      	cmp	r3, #0
 800ce74:	d001      	beq.n	800ce7a <osDelay+0x16>
 800ce76:	68fb      	ldr	r3, [r7, #12]
 800ce78:	e000      	b.n	800ce7c <osDelay+0x18>
 800ce7a:	2301      	movs	r3, #1
 800ce7c:	4618      	mov	r0, r3
 800ce7e:	f001 f8bb 	bl	800dff8 <vTaskDelay>
  
  return osOK;
 800ce82:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800ce84:	4618      	mov	r0, r3
 800ce86:	3710      	adds	r7, #16
 800ce88:	46bd      	mov	sp, r7
 800ce8a:	bd80      	pop	{r7, pc}

0800ce8c <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800ce8c:	b580      	push	{r7, lr}
 800ce8e:	b084      	sub	sp, #16
 800ce90:	af02      	add	r7, sp, #8
 800ce92:	6078      	str	r0, [r7, #4]
 800ce94:	6039      	str	r1, [r7, #0]
      return NULL;
#endif    
    }
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 ) // configSUPPORT_DYNAMIC_ALLOCATION == 0
  if(count == 1) {
 800ce96:	683b      	ldr	r3, [r7, #0]
 800ce98:	2b01      	cmp	r3, #1
 800ce9a:	d10a      	bne.n	800ceb2 <osSemaphoreCreate+0x26>
    return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	685b      	ldr	r3, [r3, #4]
 800cea0:	2203      	movs	r2, #3
 800cea2:	9200      	str	r2, [sp, #0]
 800cea4:	2200      	movs	r2, #0
 800cea6:	2100      	movs	r1, #0
 800cea8:	2001      	movs	r0, #1
 800ceaa:	f000 f9ef 	bl	800d28c <xQueueGenericCreateStatic>
 800ceae:	4603      	mov	r3, r0
 800ceb0:	e000      	b.n	800ceb4 <osSemaphoreCreate+0x28>
  else
  {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 800ceb2:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 800ceb4:	4618      	mov	r0, r3
 800ceb6:	3708      	adds	r7, #8
 800ceb8:	46bd      	mov	sp, r7
 800ceba:	bd80      	pop	{r7, pc}

0800cebc <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800cebc:	b590      	push	{r4, r7, lr}
 800cebe:	b085      	sub	sp, #20
 800cec0:	af02      	add	r7, sp, #8
 800cec2:	6078      	str	r0, [r7, #4]
 800cec4:	6039      	str	r1, [r7, #0]
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	6818      	ldr	r0, [r3, #0]
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	6859      	ldr	r1, [r3, #4]
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	689a      	ldr	r2, [r3, #8]
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	68db      	ldr	r3, [r3, #12]
 800ced6:	2400      	movs	r4, #0
 800ced8:	9400      	str	r4, [sp, #0]
 800ceda:	f000 f9d7 	bl	800d28c <xQueueGenericCreateStatic>
 800cede:	4603      	mov	r3, r0
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800cee0:	4618      	mov	r0, r3
 800cee2:	370c      	adds	r7, #12
 800cee4:	46bd      	mov	sp, r7
 800cee6:	bd90      	pop	{r4, r7, pc}

0800cee8 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800cee8:	b580      	push	{r7, lr}
 800ceea:	b086      	sub	sp, #24
 800ceec:	af00      	add	r7, sp, #0
 800ceee:	60f8      	str	r0, [r7, #12]
 800cef0:	60b9      	str	r1, [r7, #8]
 800cef2:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800cef4:	2300      	movs	r3, #0
 800cef6:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800cefc:	697b      	ldr	r3, [r7, #20]
 800cefe:	2b00      	cmp	r3, #0
 800cf00:	d101      	bne.n	800cf06 <osMessagePut+0x1e>
    ticks = 1;
 800cf02:	2301      	movs	r3, #1
 800cf04:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800cf06:	f7ff ff6f 	bl	800cde8 <inHandlerMode>
 800cf0a:	4603      	mov	r3, r0
 800cf0c:	2b00      	cmp	r3, #0
 800cf0e:	d018      	beq.n	800cf42 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800cf10:	f107 0210 	add.w	r2, r7, #16
 800cf14:	f107 0108 	add.w	r1, r7, #8
 800cf18:	2300      	movs	r3, #0
 800cf1a:	68f8      	ldr	r0, [r7, #12]
 800cf1c:	f000 fb86 	bl	800d62c <xQueueGenericSendFromISR>
 800cf20:	4603      	mov	r3, r0
 800cf22:	2b01      	cmp	r3, #1
 800cf24:	d001      	beq.n	800cf2a <osMessagePut+0x42>
      return osErrorOS;
 800cf26:	23ff      	movs	r3, #255	@ 0xff
 800cf28:	e018      	b.n	800cf5c <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800cf2a:	693b      	ldr	r3, [r7, #16]
 800cf2c:	2b00      	cmp	r3, #0
 800cf2e:	d014      	beq.n	800cf5a <osMessagePut+0x72>
 800cf30:	4b0c      	ldr	r3, [pc, #48]	@ (800cf64 <osMessagePut+0x7c>)
 800cf32:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cf36:	601a      	str	r2, [r3, #0]
 800cf38:	f3bf 8f4f 	dsb	sy
 800cf3c:	f3bf 8f6f 	isb	sy
 800cf40:	e00b      	b.n	800cf5a <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800cf42:	f107 0108 	add.w	r1, r7, #8
 800cf46:	2300      	movs	r3, #0
 800cf48:	697a      	ldr	r2, [r7, #20]
 800cf4a:	68f8      	ldr	r0, [r7, #12]
 800cf4c:	f000 fa6c 	bl	800d428 <xQueueGenericSend>
 800cf50:	4603      	mov	r3, r0
 800cf52:	2b01      	cmp	r3, #1
 800cf54:	d001      	beq.n	800cf5a <osMessagePut+0x72>
      return osErrorOS;
 800cf56:	23ff      	movs	r3, #255	@ 0xff
 800cf58:	e000      	b.n	800cf5c <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800cf5a:	2300      	movs	r3, #0
}
 800cf5c:	4618      	mov	r0, r3
 800cf5e:	3718      	adds	r7, #24
 800cf60:	46bd      	mov	sp, r7
 800cf62:	bd80      	pop	{r7, pc}
 800cf64:	e000ed04 	.word	0xe000ed04

0800cf68 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800cf68:	b590      	push	{r4, r7, lr}
 800cf6a:	b08b      	sub	sp, #44	@ 0x2c
 800cf6c:	af00      	add	r7, sp, #0
 800cf6e:	60f8      	str	r0, [r7, #12]
 800cf70:	60b9      	str	r1, [r7, #8]
 800cf72:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800cf74:	68bb      	ldr	r3, [r7, #8]
 800cf76:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800cf78:	2300      	movs	r3, #0
 800cf7a:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800cf7c:	68bb      	ldr	r3, [r7, #8]
 800cf7e:	2b00      	cmp	r3, #0
 800cf80:	d10a      	bne.n	800cf98 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800cf82:	2380      	movs	r3, #128	@ 0x80
 800cf84:	617b      	str	r3, [r7, #20]
    return event;
 800cf86:	68fb      	ldr	r3, [r7, #12]
 800cf88:	461c      	mov	r4, r3
 800cf8a:	f107 0314 	add.w	r3, r7, #20
 800cf8e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800cf92:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800cf96:	e054      	b.n	800d042 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800cf98:	2300      	movs	r3, #0
 800cf9a:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800cf9c:	2300      	movs	r3, #0
 800cf9e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (millisec == osWaitForever) {
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cfa6:	d103      	bne.n	800cfb0 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800cfa8:	f04f 33ff 	mov.w	r3, #4294967295
 800cfac:	627b      	str	r3, [r7, #36]	@ 0x24
 800cfae:	e009      	b.n	800cfc4 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	2b00      	cmp	r3, #0
 800cfb4:	d006      	beq.n	800cfc4 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	627b      	str	r3, [r7, #36]	@ 0x24
    if (ticks == 0) {
 800cfba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cfbc:	2b00      	cmp	r3, #0
 800cfbe:	d101      	bne.n	800cfc4 <osMessageGet+0x5c>
      ticks = 1;
 800cfc0:	2301      	movs	r3, #1
 800cfc2:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  
  if (inHandlerMode()) {
 800cfc4:	f7ff ff10 	bl	800cde8 <inHandlerMode>
 800cfc8:	4603      	mov	r3, r0
 800cfca:	2b00      	cmp	r3, #0
 800cfcc:	d01c      	beq.n	800d008 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800cfce:	f107 0220 	add.w	r2, r7, #32
 800cfd2:	f107 0314 	add.w	r3, r7, #20
 800cfd6:	3304      	adds	r3, #4
 800cfd8:	4619      	mov	r1, r3
 800cfda:	68b8      	ldr	r0, [r7, #8]
 800cfdc:	f000 fca6 	bl	800d92c <xQueueReceiveFromISR>
 800cfe0:	4603      	mov	r3, r0
 800cfe2:	2b01      	cmp	r3, #1
 800cfe4:	d102      	bne.n	800cfec <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800cfe6:	2310      	movs	r3, #16
 800cfe8:	617b      	str	r3, [r7, #20]
 800cfea:	e001      	b.n	800cff0 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800cfec:	2300      	movs	r3, #0
 800cfee:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800cff0:	6a3b      	ldr	r3, [r7, #32]
 800cff2:	2b00      	cmp	r3, #0
 800cff4:	d01d      	beq.n	800d032 <osMessageGet+0xca>
 800cff6:	4b15      	ldr	r3, [pc, #84]	@ (800d04c <osMessageGet+0xe4>)
 800cff8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cffc:	601a      	str	r2, [r3, #0]
 800cffe:	f3bf 8f4f 	dsb	sy
 800d002:	f3bf 8f6f 	isb	sy
 800d006:	e014      	b.n	800d032 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800d008:	f107 0314 	add.w	r3, r7, #20
 800d00c:	3304      	adds	r3, #4
 800d00e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d010:	4619      	mov	r1, r3
 800d012:	68b8      	ldr	r0, [r7, #8]
 800d014:	f000 fba8 	bl	800d768 <xQueueReceive>
 800d018:	4603      	mov	r3, r0
 800d01a:	2b01      	cmp	r3, #1
 800d01c:	d102      	bne.n	800d024 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800d01e:	2310      	movs	r3, #16
 800d020:	617b      	str	r3, [r7, #20]
 800d022:	e006      	b.n	800d032 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800d024:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d026:	2b00      	cmp	r3, #0
 800d028:	d101      	bne.n	800d02e <osMessageGet+0xc6>
 800d02a:	2300      	movs	r3, #0
 800d02c:	e000      	b.n	800d030 <osMessageGet+0xc8>
 800d02e:	2340      	movs	r3, #64	@ 0x40
 800d030:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800d032:	68fb      	ldr	r3, [r7, #12]
 800d034:	461c      	mov	r4, r3
 800d036:	f107 0314 	add.w	r3, r7, #20
 800d03a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800d03e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800d042:	68f8      	ldr	r0, [r7, #12]
 800d044:	372c      	adds	r7, #44	@ 0x2c
 800d046:	46bd      	mov	sp, r7
 800d048:	bd90      	pop	{r4, r7, pc}
 800d04a:	bf00      	nop
 800d04c:	e000ed04 	.word	0xe000ed04

0800d050 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800d050:	b480      	push	{r7}
 800d052:	b083      	sub	sp, #12
 800d054:	af00      	add	r7, sp, #0
 800d056:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	f103 0208 	add.w	r2, r3, #8
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	f04f 32ff 	mov.w	r2, #4294967295
 800d068:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	f103 0208 	add.w	r2, r3, #8
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	f103 0208 	add.w	r2, r3, #8
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	2200      	movs	r2, #0
 800d082:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800d084:	bf00      	nop
 800d086:	370c      	adds	r7, #12
 800d088:	46bd      	mov	sp, r7
 800d08a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d08e:	4770      	bx	lr

0800d090 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800d090:	b480      	push	{r7}
 800d092:	b083      	sub	sp, #12
 800d094:	af00      	add	r7, sp, #0
 800d096:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	2200      	movs	r2, #0
 800d09c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800d09e:	bf00      	nop
 800d0a0:	370c      	adds	r7, #12
 800d0a2:	46bd      	mov	sp, r7
 800d0a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0a8:	4770      	bx	lr

0800d0aa <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d0aa:	b480      	push	{r7}
 800d0ac:	b085      	sub	sp, #20
 800d0ae:	af00      	add	r7, sp, #0
 800d0b0:	6078      	str	r0, [r7, #4]
 800d0b2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	685b      	ldr	r3, [r3, #4]
 800d0b8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800d0ba:	683b      	ldr	r3, [r7, #0]
 800d0bc:	68fa      	ldr	r2, [r7, #12]
 800d0be:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800d0c0:	68fb      	ldr	r3, [r7, #12]
 800d0c2:	689a      	ldr	r2, [r3, #8]
 800d0c4:	683b      	ldr	r3, [r7, #0]
 800d0c6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800d0c8:	68fb      	ldr	r3, [r7, #12]
 800d0ca:	689b      	ldr	r3, [r3, #8]
 800d0cc:	683a      	ldr	r2, [r7, #0]
 800d0ce:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800d0d0:	68fb      	ldr	r3, [r7, #12]
 800d0d2:	683a      	ldr	r2, [r7, #0]
 800d0d4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800d0d6:	683b      	ldr	r3, [r7, #0]
 800d0d8:	687a      	ldr	r2, [r7, #4]
 800d0da:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	681b      	ldr	r3, [r3, #0]
 800d0e0:	1c5a      	adds	r2, r3, #1
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	601a      	str	r2, [r3, #0]
}
 800d0e6:	bf00      	nop
 800d0e8:	3714      	adds	r7, #20
 800d0ea:	46bd      	mov	sp, r7
 800d0ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0f0:	4770      	bx	lr

0800d0f2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d0f2:	b480      	push	{r7}
 800d0f4:	b085      	sub	sp, #20
 800d0f6:	af00      	add	r7, sp, #0
 800d0f8:	6078      	str	r0, [r7, #4]
 800d0fa:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800d0fc:	683b      	ldr	r3, [r7, #0]
 800d0fe:	681b      	ldr	r3, [r3, #0]
 800d100:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800d102:	68bb      	ldr	r3, [r7, #8]
 800d104:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d108:	d103      	bne.n	800d112 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	691b      	ldr	r3, [r3, #16]
 800d10e:	60fb      	str	r3, [r7, #12]
 800d110:	e00c      	b.n	800d12c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	3308      	adds	r3, #8
 800d116:	60fb      	str	r3, [r7, #12]
 800d118:	e002      	b.n	800d120 <vListInsert+0x2e>
 800d11a:	68fb      	ldr	r3, [r7, #12]
 800d11c:	685b      	ldr	r3, [r3, #4]
 800d11e:	60fb      	str	r3, [r7, #12]
 800d120:	68fb      	ldr	r3, [r7, #12]
 800d122:	685b      	ldr	r3, [r3, #4]
 800d124:	681b      	ldr	r3, [r3, #0]
 800d126:	68ba      	ldr	r2, [r7, #8]
 800d128:	429a      	cmp	r2, r3
 800d12a:	d2f6      	bcs.n	800d11a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800d12c:	68fb      	ldr	r3, [r7, #12]
 800d12e:	685a      	ldr	r2, [r3, #4]
 800d130:	683b      	ldr	r3, [r7, #0]
 800d132:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800d134:	683b      	ldr	r3, [r7, #0]
 800d136:	685b      	ldr	r3, [r3, #4]
 800d138:	683a      	ldr	r2, [r7, #0]
 800d13a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800d13c:	683b      	ldr	r3, [r7, #0]
 800d13e:	68fa      	ldr	r2, [r7, #12]
 800d140:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800d142:	68fb      	ldr	r3, [r7, #12]
 800d144:	683a      	ldr	r2, [r7, #0]
 800d146:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800d148:	683b      	ldr	r3, [r7, #0]
 800d14a:	687a      	ldr	r2, [r7, #4]
 800d14c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	681b      	ldr	r3, [r3, #0]
 800d152:	1c5a      	adds	r2, r3, #1
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	601a      	str	r2, [r3, #0]
}
 800d158:	bf00      	nop
 800d15a:	3714      	adds	r7, #20
 800d15c:	46bd      	mov	sp, r7
 800d15e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d162:	4770      	bx	lr

0800d164 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800d164:	b480      	push	{r7}
 800d166:	b085      	sub	sp, #20
 800d168:	af00      	add	r7, sp, #0
 800d16a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	691b      	ldr	r3, [r3, #16]
 800d170:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	685b      	ldr	r3, [r3, #4]
 800d176:	687a      	ldr	r2, [r7, #4]
 800d178:	6892      	ldr	r2, [r2, #8]
 800d17a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	689b      	ldr	r3, [r3, #8]
 800d180:	687a      	ldr	r2, [r7, #4]
 800d182:	6852      	ldr	r2, [r2, #4]
 800d184:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800d186:	68fb      	ldr	r3, [r7, #12]
 800d188:	685b      	ldr	r3, [r3, #4]
 800d18a:	687a      	ldr	r2, [r7, #4]
 800d18c:	429a      	cmp	r2, r3
 800d18e:	d103      	bne.n	800d198 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	689a      	ldr	r2, [r3, #8]
 800d194:	68fb      	ldr	r3, [r7, #12]
 800d196:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	2200      	movs	r2, #0
 800d19c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800d19e:	68fb      	ldr	r3, [r7, #12]
 800d1a0:	681b      	ldr	r3, [r3, #0]
 800d1a2:	1e5a      	subs	r2, r3, #1
 800d1a4:	68fb      	ldr	r3, [r7, #12]
 800d1a6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800d1a8:	68fb      	ldr	r3, [r7, #12]
 800d1aa:	681b      	ldr	r3, [r3, #0]
}
 800d1ac:	4618      	mov	r0, r3
 800d1ae:	3714      	adds	r7, #20
 800d1b0:	46bd      	mov	sp, r7
 800d1b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1b6:	4770      	bx	lr

0800d1b8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800d1b8:	b580      	push	{r7, lr}
 800d1ba:	b084      	sub	sp, #16
 800d1bc:	af00      	add	r7, sp, #0
 800d1be:	6078      	str	r0, [r7, #4]
 800d1c0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800d1c6:	68fb      	ldr	r3, [r7, #12]
 800d1c8:	2b00      	cmp	r3, #0
 800d1ca:	d10b      	bne.n	800d1e4 <xQueueGenericReset+0x2c>
	__asm volatile
 800d1cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d1d0:	f383 8811 	msr	BASEPRI, r3
 800d1d4:	f3bf 8f6f 	isb	sy
 800d1d8:	f3bf 8f4f 	dsb	sy
 800d1dc:	60bb      	str	r3, [r7, #8]
}
 800d1de:	bf00      	nop
 800d1e0:	bf00      	nop
 800d1e2:	e7fd      	b.n	800d1e0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800d1e4:	f002 f8d8 	bl	800f398 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d1e8:	68fb      	ldr	r3, [r7, #12]
 800d1ea:	681a      	ldr	r2, [r3, #0]
 800d1ec:	68fb      	ldr	r3, [r7, #12]
 800d1ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d1f0:	68f9      	ldr	r1, [r7, #12]
 800d1f2:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800d1f4:	fb01 f303 	mul.w	r3, r1, r3
 800d1f8:	441a      	add	r2, r3
 800d1fa:	68fb      	ldr	r3, [r7, #12]
 800d1fc:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800d1fe:	68fb      	ldr	r3, [r7, #12]
 800d200:	2200      	movs	r2, #0
 800d202:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800d204:	68fb      	ldr	r3, [r7, #12]
 800d206:	681a      	ldr	r2, [r3, #0]
 800d208:	68fb      	ldr	r3, [r7, #12]
 800d20a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d20c:	68fb      	ldr	r3, [r7, #12]
 800d20e:	681a      	ldr	r2, [r3, #0]
 800d210:	68fb      	ldr	r3, [r7, #12]
 800d212:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d214:	3b01      	subs	r3, #1
 800d216:	68f9      	ldr	r1, [r7, #12]
 800d218:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800d21a:	fb01 f303 	mul.w	r3, r1, r3
 800d21e:	441a      	add	r2, r3
 800d220:	68fb      	ldr	r3, [r7, #12]
 800d222:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800d224:	68fb      	ldr	r3, [r7, #12]
 800d226:	22ff      	movs	r2, #255	@ 0xff
 800d228:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800d22c:	68fb      	ldr	r3, [r7, #12]
 800d22e:	22ff      	movs	r2, #255	@ 0xff
 800d230:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800d234:	683b      	ldr	r3, [r7, #0]
 800d236:	2b00      	cmp	r3, #0
 800d238:	d114      	bne.n	800d264 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d23a:	68fb      	ldr	r3, [r7, #12]
 800d23c:	691b      	ldr	r3, [r3, #16]
 800d23e:	2b00      	cmp	r3, #0
 800d240:	d01a      	beq.n	800d278 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d242:	68fb      	ldr	r3, [r7, #12]
 800d244:	3310      	adds	r3, #16
 800d246:	4618      	mov	r0, r3
 800d248:	f001 f998 	bl	800e57c <xTaskRemoveFromEventList>
 800d24c:	4603      	mov	r3, r0
 800d24e:	2b00      	cmp	r3, #0
 800d250:	d012      	beq.n	800d278 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800d252:	4b0d      	ldr	r3, [pc, #52]	@ (800d288 <xQueueGenericReset+0xd0>)
 800d254:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d258:	601a      	str	r2, [r3, #0]
 800d25a:	f3bf 8f4f 	dsb	sy
 800d25e:	f3bf 8f6f 	isb	sy
 800d262:	e009      	b.n	800d278 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800d264:	68fb      	ldr	r3, [r7, #12]
 800d266:	3310      	adds	r3, #16
 800d268:	4618      	mov	r0, r3
 800d26a:	f7ff fef1 	bl	800d050 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800d26e:	68fb      	ldr	r3, [r7, #12]
 800d270:	3324      	adds	r3, #36	@ 0x24
 800d272:	4618      	mov	r0, r3
 800d274:	f7ff feec 	bl	800d050 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800d278:	f002 f8c0 	bl	800f3fc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800d27c:	2301      	movs	r3, #1
}
 800d27e:	4618      	mov	r0, r3
 800d280:	3710      	adds	r7, #16
 800d282:	46bd      	mov	sp, r7
 800d284:	bd80      	pop	{r7, pc}
 800d286:	bf00      	nop
 800d288:	e000ed04 	.word	0xe000ed04

0800d28c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800d28c:	b580      	push	{r7, lr}
 800d28e:	b08e      	sub	sp, #56	@ 0x38
 800d290:	af02      	add	r7, sp, #8
 800d292:	60f8      	str	r0, [r7, #12]
 800d294:	60b9      	str	r1, [r7, #8]
 800d296:	607a      	str	r2, [r7, #4]
 800d298:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d29a:	68fb      	ldr	r3, [r7, #12]
 800d29c:	2b00      	cmp	r3, #0
 800d29e:	d10b      	bne.n	800d2b8 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800d2a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d2a4:	f383 8811 	msr	BASEPRI, r3
 800d2a8:	f3bf 8f6f 	isb	sy
 800d2ac:	f3bf 8f4f 	dsb	sy
 800d2b0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800d2b2:	bf00      	nop
 800d2b4:	bf00      	nop
 800d2b6:	e7fd      	b.n	800d2b4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800d2b8:	683b      	ldr	r3, [r7, #0]
 800d2ba:	2b00      	cmp	r3, #0
 800d2bc:	d10b      	bne.n	800d2d6 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800d2be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d2c2:	f383 8811 	msr	BASEPRI, r3
 800d2c6:	f3bf 8f6f 	isb	sy
 800d2ca:	f3bf 8f4f 	dsb	sy
 800d2ce:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800d2d0:	bf00      	nop
 800d2d2:	bf00      	nop
 800d2d4:	e7fd      	b.n	800d2d2 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	2b00      	cmp	r3, #0
 800d2da:	d002      	beq.n	800d2e2 <xQueueGenericCreateStatic+0x56>
 800d2dc:	68bb      	ldr	r3, [r7, #8]
 800d2de:	2b00      	cmp	r3, #0
 800d2e0:	d001      	beq.n	800d2e6 <xQueueGenericCreateStatic+0x5a>
 800d2e2:	2301      	movs	r3, #1
 800d2e4:	e000      	b.n	800d2e8 <xQueueGenericCreateStatic+0x5c>
 800d2e6:	2300      	movs	r3, #0
 800d2e8:	2b00      	cmp	r3, #0
 800d2ea:	d10b      	bne.n	800d304 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800d2ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d2f0:	f383 8811 	msr	BASEPRI, r3
 800d2f4:	f3bf 8f6f 	isb	sy
 800d2f8:	f3bf 8f4f 	dsb	sy
 800d2fc:	623b      	str	r3, [r7, #32]
}
 800d2fe:	bf00      	nop
 800d300:	bf00      	nop
 800d302:	e7fd      	b.n	800d300 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	2b00      	cmp	r3, #0
 800d308:	d102      	bne.n	800d310 <xQueueGenericCreateStatic+0x84>
 800d30a:	68bb      	ldr	r3, [r7, #8]
 800d30c:	2b00      	cmp	r3, #0
 800d30e:	d101      	bne.n	800d314 <xQueueGenericCreateStatic+0x88>
 800d310:	2301      	movs	r3, #1
 800d312:	e000      	b.n	800d316 <xQueueGenericCreateStatic+0x8a>
 800d314:	2300      	movs	r3, #0
 800d316:	2b00      	cmp	r3, #0
 800d318:	d10b      	bne.n	800d332 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800d31a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d31e:	f383 8811 	msr	BASEPRI, r3
 800d322:	f3bf 8f6f 	isb	sy
 800d326:	f3bf 8f4f 	dsb	sy
 800d32a:	61fb      	str	r3, [r7, #28]
}
 800d32c:	bf00      	nop
 800d32e:	bf00      	nop
 800d330:	e7fd      	b.n	800d32e <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800d332:	2348      	movs	r3, #72	@ 0x48
 800d334:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800d336:	697b      	ldr	r3, [r7, #20]
 800d338:	2b48      	cmp	r3, #72	@ 0x48
 800d33a:	d00b      	beq.n	800d354 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800d33c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d340:	f383 8811 	msr	BASEPRI, r3
 800d344:	f3bf 8f6f 	isb	sy
 800d348:	f3bf 8f4f 	dsb	sy
 800d34c:	61bb      	str	r3, [r7, #24]
}
 800d34e:	bf00      	nop
 800d350:	bf00      	nop
 800d352:	e7fd      	b.n	800d350 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800d354:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d356:	683b      	ldr	r3, [r7, #0]
 800d358:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800d35a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d35c:	2b00      	cmp	r3, #0
 800d35e:	d009      	beq.n	800d374 <xQueueGenericCreateStatic+0xe8>
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800d360:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800d364:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d366:	9300      	str	r3, [sp, #0]
 800d368:	4613      	mov	r3, r2
 800d36a:	687a      	ldr	r2, [r7, #4]
 800d36c:	68b9      	ldr	r1, [r7, #8]
 800d36e:	68f8      	ldr	r0, [r7, #12]
 800d370:	f000 f805 	bl	800d37e <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800d374:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800d376:	4618      	mov	r0, r3
 800d378:	3730      	adds	r7, #48	@ 0x30
 800d37a:	46bd      	mov	sp, r7
 800d37c:	bd80      	pop	{r7, pc}

0800d37e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800d37e:	b580      	push	{r7, lr}
 800d380:	b084      	sub	sp, #16
 800d382:	af00      	add	r7, sp, #0
 800d384:	60f8      	str	r0, [r7, #12]
 800d386:	60b9      	str	r1, [r7, #8]
 800d388:	607a      	str	r2, [r7, #4]
 800d38a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800d38c:	68bb      	ldr	r3, [r7, #8]
 800d38e:	2b00      	cmp	r3, #0
 800d390:	d103      	bne.n	800d39a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800d392:	69bb      	ldr	r3, [r7, #24]
 800d394:	69ba      	ldr	r2, [r7, #24]
 800d396:	601a      	str	r2, [r3, #0]
 800d398:	e002      	b.n	800d3a0 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800d39a:	69bb      	ldr	r3, [r7, #24]
 800d39c:	687a      	ldr	r2, [r7, #4]
 800d39e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800d3a0:	69bb      	ldr	r3, [r7, #24]
 800d3a2:	68fa      	ldr	r2, [r7, #12]
 800d3a4:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800d3a6:	69bb      	ldr	r3, [r7, #24]
 800d3a8:	68ba      	ldr	r2, [r7, #8]
 800d3aa:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800d3ac:	2101      	movs	r1, #1
 800d3ae:	69b8      	ldr	r0, [r7, #24]
 800d3b0:	f7ff ff02 	bl	800d1b8 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800d3b4:	bf00      	nop
 800d3b6:	3710      	adds	r7, #16
 800d3b8:	46bd      	mov	sp, r7
 800d3ba:	bd80      	pop	{r7, pc}

0800d3bc <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800d3bc:	b580      	push	{r7, lr}
 800d3be:	b082      	sub	sp, #8
 800d3c0:	af00      	add	r7, sp, #0
 800d3c2:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	2b00      	cmp	r3, #0
 800d3c8:	d00e      	beq.n	800d3e8 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	2200      	movs	r2, #0
 800d3ce:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	2200      	movs	r2, #0
 800d3d4:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	2200      	movs	r2, #0
 800d3da:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800d3dc:	2300      	movs	r3, #0
 800d3de:	2200      	movs	r2, #0
 800d3e0:	2100      	movs	r1, #0
 800d3e2:	6878      	ldr	r0, [r7, #4]
 800d3e4:	f000 f820 	bl	800d428 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800d3e8:	bf00      	nop
 800d3ea:	3708      	adds	r7, #8
 800d3ec:	46bd      	mov	sp, r7
 800d3ee:	bd80      	pop	{r7, pc}

0800d3f0 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800d3f0:	b580      	push	{r7, lr}
 800d3f2:	b088      	sub	sp, #32
 800d3f4:	af02      	add	r7, sp, #8
 800d3f6:	4603      	mov	r3, r0
 800d3f8:	6039      	str	r1, [r7, #0]
 800d3fa:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800d3fc:	2301      	movs	r3, #1
 800d3fe:	617b      	str	r3, [r7, #20]
 800d400:	2300      	movs	r3, #0
 800d402:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800d404:	79fb      	ldrb	r3, [r7, #7]
 800d406:	9300      	str	r3, [sp, #0]
 800d408:	683b      	ldr	r3, [r7, #0]
 800d40a:	2200      	movs	r2, #0
 800d40c:	6939      	ldr	r1, [r7, #16]
 800d40e:	6978      	ldr	r0, [r7, #20]
 800d410:	f7ff ff3c 	bl	800d28c <xQueueGenericCreateStatic>
 800d414:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800d416:	68f8      	ldr	r0, [r7, #12]
 800d418:	f7ff ffd0 	bl	800d3bc <prvInitialiseMutex>

		return xNewQueue;
 800d41c:	68fb      	ldr	r3, [r7, #12]
	}
 800d41e:	4618      	mov	r0, r3
 800d420:	3718      	adds	r7, #24
 800d422:	46bd      	mov	sp, r7
 800d424:	bd80      	pop	{r7, pc}
	...

0800d428 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800d428:	b580      	push	{r7, lr}
 800d42a:	b08e      	sub	sp, #56	@ 0x38
 800d42c:	af00      	add	r7, sp, #0
 800d42e:	60f8      	str	r0, [r7, #12]
 800d430:	60b9      	str	r1, [r7, #8]
 800d432:	607a      	str	r2, [r7, #4]
 800d434:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800d436:	2300      	movs	r3, #0
 800d438:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d43a:	68fb      	ldr	r3, [r7, #12]
 800d43c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800d43e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d440:	2b00      	cmp	r3, #0
 800d442:	d10b      	bne.n	800d45c <xQueueGenericSend+0x34>
	__asm volatile
 800d444:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d448:	f383 8811 	msr	BASEPRI, r3
 800d44c:	f3bf 8f6f 	isb	sy
 800d450:	f3bf 8f4f 	dsb	sy
 800d454:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800d456:	bf00      	nop
 800d458:	bf00      	nop
 800d45a:	e7fd      	b.n	800d458 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d45c:	68bb      	ldr	r3, [r7, #8]
 800d45e:	2b00      	cmp	r3, #0
 800d460:	d103      	bne.n	800d46a <xQueueGenericSend+0x42>
 800d462:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d464:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d466:	2b00      	cmp	r3, #0
 800d468:	d101      	bne.n	800d46e <xQueueGenericSend+0x46>
 800d46a:	2301      	movs	r3, #1
 800d46c:	e000      	b.n	800d470 <xQueueGenericSend+0x48>
 800d46e:	2300      	movs	r3, #0
 800d470:	2b00      	cmp	r3, #0
 800d472:	d10b      	bne.n	800d48c <xQueueGenericSend+0x64>
	__asm volatile
 800d474:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d478:	f383 8811 	msr	BASEPRI, r3
 800d47c:	f3bf 8f6f 	isb	sy
 800d480:	f3bf 8f4f 	dsb	sy
 800d484:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800d486:	bf00      	nop
 800d488:	bf00      	nop
 800d48a:	e7fd      	b.n	800d488 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d48c:	683b      	ldr	r3, [r7, #0]
 800d48e:	2b02      	cmp	r3, #2
 800d490:	d103      	bne.n	800d49a <xQueueGenericSend+0x72>
 800d492:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d494:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d496:	2b01      	cmp	r3, #1
 800d498:	d101      	bne.n	800d49e <xQueueGenericSend+0x76>
 800d49a:	2301      	movs	r3, #1
 800d49c:	e000      	b.n	800d4a0 <xQueueGenericSend+0x78>
 800d49e:	2300      	movs	r3, #0
 800d4a0:	2b00      	cmp	r3, #0
 800d4a2:	d10b      	bne.n	800d4bc <xQueueGenericSend+0x94>
	__asm volatile
 800d4a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d4a8:	f383 8811 	msr	BASEPRI, r3
 800d4ac:	f3bf 8f6f 	isb	sy
 800d4b0:	f3bf 8f4f 	dsb	sy
 800d4b4:	623b      	str	r3, [r7, #32]
}
 800d4b6:	bf00      	nop
 800d4b8:	bf00      	nop
 800d4ba:	e7fd      	b.n	800d4b8 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d4bc:	f001 f9f8 	bl	800e8b0 <xTaskGetSchedulerState>
 800d4c0:	4603      	mov	r3, r0
 800d4c2:	2b00      	cmp	r3, #0
 800d4c4:	d102      	bne.n	800d4cc <xQueueGenericSend+0xa4>
 800d4c6:	687b      	ldr	r3, [r7, #4]
 800d4c8:	2b00      	cmp	r3, #0
 800d4ca:	d101      	bne.n	800d4d0 <xQueueGenericSend+0xa8>
 800d4cc:	2301      	movs	r3, #1
 800d4ce:	e000      	b.n	800d4d2 <xQueueGenericSend+0xaa>
 800d4d0:	2300      	movs	r3, #0
 800d4d2:	2b00      	cmp	r3, #0
 800d4d4:	d10b      	bne.n	800d4ee <xQueueGenericSend+0xc6>
	__asm volatile
 800d4d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d4da:	f383 8811 	msr	BASEPRI, r3
 800d4de:	f3bf 8f6f 	isb	sy
 800d4e2:	f3bf 8f4f 	dsb	sy
 800d4e6:	61fb      	str	r3, [r7, #28]
}
 800d4e8:	bf00      	nop
 800d4ea:	bf00      	nop
 800d4ec:	e7fd      	b.n	800d4ea <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d4ee:	f001 ff53 	bl	800f398 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d4f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d4f4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d4f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d4f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d4fa:	429a      	cmp	r2, r3
 800d4fc:	d302      	bcc.n	800d504 <xQueueGenericSend+0xdc>
 800d4fe:	683b      	ldr	r3, [r7, #0]
 800d500:	2b02      	cmp	r3, #2
 800d502:	d129      	bne.n	800d558 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d504:	683a      	ldr	r2, [r7, #0]
 800d506:	68b9      	ldr	r1, [r7, #8]
 800d508:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d50a:	f000 fa91 	bl	800da30 <prvCopyDataToQueue>
 800d50e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d510:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d512:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d514:	2b00      	cmp	r3, #0
 800d516:	d010      	beq.n	800d53a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d518:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d51a:	3324      	adds	r3, #36	@ 0x24
 800d51c:	4618      	mov	r0, r3
 800d51e:	f001 f82d 	bl	800e57c <xTaskRemoveFromEventList>
 800d522:	4603      	mov	r3, r0
 800d524:	2b00      	cmp	r3, #0
 800d526:	d013      	beq.n	800d550 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800d528:	4b3f      	ldr	r3, [pc, #252]	@ (800d628 <xQueueGenericSend+0x200>)
 800d52a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d52e:	601a      	str	r2, [r3, #0]
 800d530:	f3bf 8f4f 	dsb	sy
 800d534:	f3bf 8f6f 	isb	sy
 800d538:	e00a      	b.n	800d550 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800d53a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d53c:	2b00      	cmp	r3, #0
 800d53e:	d007      	beq.n	800d550 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800d540:	4b39      	ldr	r3, [pc, #228]	@ (800d628 <xQueueGenericSend+0x200>)
 800d542:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d546:	601a      	str	r2, [r3, #0]
 800d548:	f3bf 8f4f 	dsb	sy
 800d54c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800d550:	f001 ff54 	bl	800f3fc <vPortExitCritical>
				return pdPASS;
 800d554:	2301      	movs	r3, #1
 800d556:	e063      	b.n	800d620 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	2b00      	cmp	r3, #0
 800d55c:	d103      	bne.n	800d566 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d55e:	f001 ff4d 	bl	800f3fc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800d562:	2300      	movs	r3, #0
 800d564:	e05c      	b.n	800d620 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d566:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d568:	2b00      	cmp	r3, #0
 800d56a:	d106      	bne.n	800d57a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d56c:	f107 0314 	add.w	r3, r7, #20
 800d570:	4618      	mov	r0, r3
 800d572:	f001 f867 	bl	800e644 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d576:	2301      	movs	r3, #1
 800d578:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d57a:	f001 ff3f 	bl	800f3fc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d57e:	f000 fdd9 	bl	800e134 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d582:	f001 ff09 	bl	800f398 <vPortEnterCritical>
 800d586:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d588:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d58c:	b25b      	sxtb	r3, r3
 800d58e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d592:	d103      	bne.n	800d59c <xQueueGenericSend+0x174>
 800d594:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d596:	2200      	movs	r2, #0
 800d598:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d59c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d59e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d5a2:	b25b      	sxtb	r3, r3
 800d5a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d5a8:	d103      	bne.n	800d5b2 <xQueueGenericSend+0x18a>
 800d5aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d5ac:	2200      	movs	r2, #0
 800d5ae:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d5b2:	f001 ff23 	bl	800f3fc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d5b6:	1d3a      	adds	r2, r7, #4
 800d5b8:	f107 0314 	add.w	r3, r7, #20
 800d5bc:	4611      	mov	r1, r2
 800d5be:	4618      	mov	r0, r3
 800d5c0:	f001 f856 	bl	800e670 <xTaskCheckForTimeOut>
 800d5c4:	4603      	mov	r3, r0
 800d5c6:	2b00      	cmp	r3, #0
 800d5c8:	d124      	bne.n	800d614 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800d5ca:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d5cc:	f000 fb28 	bl	800dc20 <prvIsQueueFull>
 800d5d0:	4603      	mov	r3, r0
 800d5d2:	2b00      	cmp	r3, #0
 800d5d4:	d018      	beq.n	800d608 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800d5d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d5d8:	3310      	adds	r3, #16
 800d5da:	687a      	ldr	r2, [r7, #4]
 800d5dc:	4611      	mov	r1, r2
 800d5de:	4618      	mov	r0, r3
 800d5e0:	f000 ff7a 	bl	800e4d8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800d5e4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d5e6:	f000 fab3 	bl	800db50 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800d5ea:	f000 fdb1 	bl	800e150 <xTaskResumeAll>
 800d5ee:	4603      	mov	r3, r0
 800d5f0:	2b00      	cmp	r3, #0
 800d5f2:	f47f af7c 	bne.w	800d4ee <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800d5f6:	4b0c      	ldr	r3, [pc, #48]	@ (800d628 <xQueueGenericSend+0x200>)
 800d5f8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d5fc:	601a      	str	r2, [r3, #0]
 800d5fe:	f3bf 8f4f 	dsb	sy
 800d602:	f3bf 8f6f 	isb	sy
 800d606:	e772      	b.n	800d4ee <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800d608:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d60a:	f000 faa1 	bl	800db50 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d60e:	f000 fd9f 	bl	800e150 <xTaskResumeAll>
 800d612:	e76c      	b.n	800d4ee <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800d614:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d616:	f000 fa9b 	bl	800db50 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d61a:	f000 fd99 	bl	800e150 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800d61e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800d620:	4618      	mov	r0, r3
 800d622:	3738      	adds	r7, #56	@ 0x38
 800d624:	46bd      	mov	sp, r7
 800d626:	bd80      	pop	{r7, pc}
 800d628:	e000ed04 	.word	0xe000ed04

0800d62c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800d62c:	b580      	push	{r7, lr}
 800d62e:	b090      	sub	sp, #64	@ 0x40
 800d630:	af00      	add	r7, sp, #0
 800d632:	60f8      	str	r0, [r7, #12]
 800d634:	60b9      	str	r1, [r7, #8]
 800d636:	607a      	str	r2, [r7, #4]
 800d638:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d63a:	68fb      	ldr	r3, [r7, #12]
 800d63c:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800d63e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d640:	2b00      	cmp	r3, #0
 800d642:	d10b      	bne.n	800d65c <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800d644:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d648:	f383 8811 	msr	BASEPRI, r3
 800d64c:	f3bf 8f6f 	isb	sy
 800d650:	f3bf 8f4f 	dsb	sy
 800d654:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800d656:	bf00      	nop
 800d658:	bf00      	nop
 800d65a:	e7fd      	b.n	800d658 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d65c:	68bb      	ldr	r3, [r7, #8]
 800d65e:	2b00      	cmp	r3, #0
 800d660:	d103      	bne.n	800d66a <xQueueGenericSendFromISR+0x3e>
 800d662:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d664:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d666:	2b00      	cmp	r3, #0
 800d668:	d101      	bne.n	800d66e <xQueueGenericSendFromISR+0x42>
 800d66a:	2301      	movs	r3, #1
 800d66c:	e000      	b.n	800d670 <xQueueGenericSendFromISR+0x44>
 800d66e:	2300      	movs	r3, #0
 800d670:	2b00      	cmp	r3, #0
 800d672:	d10b      	bne.n	800d68c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800d674:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d678:	f383 8811 	msr	BASEPRI, r3
 800d67c:	f3bf 8f6f 	isb	sy
 800d680:	f3bf 8f4f 	dsb	sy
 800d684:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800d686:	bf00      	nop
 800d688:	bf00      	nop
 800d68a:	e7fd      	b.n	800d688 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d68c:	683b      	ldr	r3, [r7, #0]
 800d68e:	2b02      	cmp	r3, #2
 800d690:	d103      	bne.n	800d69a <xQueueGenericSendFromISR+0x6e>
 800d692:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d694:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d696:	2b01      	cmp	r3, #1
 800d698:	d101      	bne.n	800d69e <xQueueGenericSendFromISR+0x72>
 800d69a:	2301      	movs	r3, #1
 800d69c:	e000      	b.n	800d6a0 <xQueueGenericSendFromISR+0x74>
 800d69e:	2300      	movs	r3, #0
 800d6a0:	2b00      	cmp	r3, #0
 800d6a2:	d10b      	bne.n	800d6bc <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800d6a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d6a8:	f383 8811 	msr	BASEPRI, r3
 800d6ac:	f3bf 8f6f 	isb	sy
 800d6b0:	f3bf 8f4f 	dsb	sy
 800d6b4:	623b      	str	r3, [r7, #32]
}
 800d6b6:	bf00      	nop
 800d6b8:	bf00      	nop
 800d6ba:	e7fd      	b.n	800d6b8 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d6bc:	f001 ff4c 	bl	800f558 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800d6c0:	f3ef 8211 	mrs	r2, BASEPRI
 800d6c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d6c8:	f383 8811 	msr	BASEPRI, r3
 800d6cc:	f3bf 8f6f 	isb	sy
 800d6d0:	f3bf 8f4f 	dsb	sy
 800d6d4:	61fa      	str	r2, [r7, #28]
 800d6d6:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800d6d8:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d6da:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d6dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d6de:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d6e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d6e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d6e4:	429a      	cmp	r2, r3
 800d6e6:	d302      	bcc.n	800d6ee <xQueueGenericSendFromISR+0xc2>
 800d6e8:	683b      	ldr	r3, [r7, #0]
 800d6ea:	2b02      	cmp	r3, #2
 800d6ec:	d12f      	bne.n	800d74e <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800d6ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d6f0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d6f4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d6f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d6fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d6fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d6fe:	683a      	ldr	r2, [r7, #0]
 800d700:	68b9      	ldr	r1, [r7, #8]
 800d702:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800d704:	f000 f994 	bl	800da30 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800d708:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800d70c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d710:	d112      	bne.n	800d738 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d712:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d714:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d716:	2b00      	cmp	r3, #0
 800d718:	d016      	beq.n	800d748 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d71a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d71c:	3324      	adds	r3, #36	@ 0x24
 800d71e:	4618      	mov	r0, r3
 800d720:	f000 ff2c 	bl	800e57c <xTaskRemoveFromEventList>
 800d724:	4603      	mov	r3, r0
 800d726:	2b00      	cmp	r3, #0
 800d728:	d00e      	beq.n	800d748 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	2b00      	cmp	r3, #0
 800d72e:	d00b      	beq.n	800d748 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d730:	687b      	ldr	r3, [r7, #4]
 800d732:	2201      	movs	r2, #1
 800d734:	601a      	str	r2, [r3, #0]
 800d736:	e007      	b.n	800d748 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800d738:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800d73c:	3301      	adds	r3, #1
 800d73e:	b2db      	uxtb	r3, r3
 800d740:	b25a      	sxtb	r2, r3
 800d742:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d744:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800d748:	2301      	movs	r3, #1
 800d74a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800d74c:	e001      	b.n	800d752 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800d74e:	2300      	movs	r3, #0
 800d750:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d752:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d754:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800d756:	697b      	ldr	r3, [r7, #20]
 800d758:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800d75c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d75e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800d760:	4618      	mov	r0, r3
 800d762:	3740      	adds	r7, #64	@ 0x40
 800d764:	46bd      	mov	sp, r7
 800d766:	bd80      	pop	{r7, pc}

0800d768 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800d768:	b580      	push	{r7, lr}
 800d76a:	b08c      	sub	sp, #48	@ 0x30
 800d76c:	af00      	add	r7, sp, #0
 800d76e:	60f8      	str	r0, [r7, #12]
 800d770:	60b9      	str	r1, [r7, #8]
 800d772:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800d774:	2300      	movs	r3, #0
 800d776:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d778:	68fb      	ldr	r3, [r7, #12]
 800d77a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d77c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d77e:	2b00      	cmp	r3, #0
 800d780:	d10b      	bne.n	800d79a <xQueueReceive+0x32>
	__asm volatile
 800d782:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d786:	f383 8811 	msr	BASEPRI, r3
 800d78a:	f3bf 8f6f 	isb	sy
 800d78e:	f3bf 8f4f 	dsb	sy
 800d792:	623b      	str	r3, [r7, #32]
}
 800d794:	bf00      	nop
 800d796:	bf00      	nop
 800d798:	e7fd      	b.n	800d796 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d79a:	68bb      	ldr	r3, [r7, #8]
 800d79c:	2b00      	cmp	r3, #0
 800d79e:	d103      	bne.n	800d7a8 <xQueueReceive+0x40>
 800d7a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d7a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d7a4:	2b00      	cmp	r3, #0
 800d7a6:	d101      	bne.n	800d7ac <xQueueReceive+0x44>
 800d7a8:	2301      	movs	r3, #1
 800d7aa:	e000      	b.n	800d7ae <xQueueReceive+0x46>
 800d7ac:	2300      	movs	r3, #0
 800d7ae:	2b00      	cmp	r3, #0
 800d7b0:	d10b      	bne.n	800d7ca <xQueueReceive+0x62>
	__asm volatile
 800d7b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d7b6:	f383 8811 	msr	BASEPRI, r3
 800d7ba:	f3bf 8f6f 	isb	sy
 800d7be:	f3bf 8f4f 	dsb	sy
 800d7c2:	61fb      	str	r3, [r7, #28]
}
 800d7c4:	bf00      	nop
 800d7c6:	bf00      	nop
 800d7c8:	e7fd      	b.n	800d7c6 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d7ca:	f001 f871 	bl	800e8b0 <xTaskGetSchedulerState>
 800d7ce:	4603      	mov	r3, r0
 800d7d0:	2b00      	cmp	r3, #0
 800d7d2:	d102      	bne.n	800d7da <xQueueReceive+0x72>
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	2b00      	cmp	r3, #0
 800d7d8:	d101      	bne.n	800d7de <xQueueReceive+0x76>
 800d7da:	2301      	movs	r3, #1
 800d7dc:	e000      	b.n	800d7e0 <xQueueReceive+0x78>
 800d7de:	2300      	movs	r3, #0
 800d7e0:	2b00      	cmp	r3, #0
 800d7e2:	d10b      	bne.n	800d7fc <xQueueReceive+0x94>
	__asm volatile
 800d7e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d7e8:	f383 8811 	msr	BASEPRI, r3
 800d7ec:	f3bf 8f6f 	isb	sy
 800d7f0:	f3bf 8f4f 	dsb	sy
 800d7f4:	61bb      	str	r3, [r7, #24]
}
 800d7f6:	bf00      	nop
 800d7f8:	bf00      	nop
 800d7fa:	e7fd      	b.n	800d7f8 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d7fc:	f001 fdcc 	bl	800f398 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d800:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d802:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d804:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d806:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d808:	2b00      	cmp	r3, #0
 800d80a:	d01f      	beq.n	800d84c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d80c:	68b9      	ldr	r1, [r7, #8]
 800d80e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d810:	f000 f978 	bl	800db04 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d814:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d816:	1e5a      	subs	r2, r3, #1
 800d818:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d81a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d81c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d81e:	691b      	ldr	r3, [r3, #16]
 800d820:	2b00      	cmp	r3, #0
 800d822:	d00f      	beq.n	800d844 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d824:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d826:	3310      	adds	r3, #16
 800d828:	4618      	mov	r0, r3
 800d82a:	f000 fea7 	bl	800e57c <xTaskRemoveFromEventList>
 800d82e:	4603      	mov	r3, r0
 800d830:	2b00      	cmp	r3, #0
 800d832:	d007      	beq.n	800d844 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d834:	4b3c      	ldr	r3, [pc, #240]	@ (800d928 <xQueueReceive+0x1c0>)
 800d836:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d83a:	601a      	str	r2, [r3, #0]
 800d83c:	f3bf 8f4f 	dsb	sy
 800d840:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d844:	f001 fdda 	bl	800f3fc <vPortExitCritical>
				return pdPASS;
 800d848:	2301      	movs	r3, #1
 800d84a:	e069      	b.n	800d920 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	2b00      	cmp	r3, #0
 800d850:	d103      	bne.n	800d85a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d852:	f001 fdd3 	bl	800f3fc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d856:	2300      	movs	r3, #0
 800d858:	e062      	b.n	800d920 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d85a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d85c:	2b00      	cmp	r3, #0
 800d85e:	d106      	bne.n	800d86e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d860:	f107 0310 	add.w	r3, r7, #16
 800d864:	4618      	mov	r0, r3
 800d866:	f000 feed 	bl	800e644 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d86a:	2301      	movs	r3, #1
 800d86c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d86e:	f001 fdc5 	bl	800f3fc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d872:	f000 fc5f 	bl	800e134 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d876:	f001 fd8f 	bl	800f398 <vPortEnterCritical>
 800d87a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d87c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d880:	b25b      	sxtb	r3, r3
 800d882:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d886:	d103      	bne.n	800d890 <xQueueReceive+0x128>
 800d888:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d88a:	2200      	movs	r2, #0
 800d88c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d890:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d892:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d896:	b25b      	sxtb	r3, r3
 800d898:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d89c:	d103      	bne.n	800d8a6 <xQueueReceive+0x13e>
 800d89e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d8a0:	2200      	movs	r2, #0
 800d8a2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d8a6:	f001 fda9 	bl	800f3fc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d8aa:	1d3a      	adds	r2, r7, #4
 800d8ac:	f107 0310 	add.w	r3, r7, #16
 800d8b0:	4611      	mov	r1, r2
 800d8b2:	4618      	mov	r0, r3
 800d8b4:	f000 fedc 	bl	800e670 <xTaskCheckForTimeOut>
 800d8b8:	4603      	mov	r3, r0
 800d8ba:	2b00      	cmp	r3, #0
 800d8bc:	d123      	bne.n	800d906 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d8be:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d8c0:	f000 f998 	bl	800dbf4 <prvIsQueueEmpty>
 800d8c4:	4603      	mov	r3, r0
 800d8c6:	2b00      	cmp	r3, #0
 800d8c8:	d017      	beq.n	800d8fa <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d8ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d8cc:	3324      	adds	r3, #36	@ 0x24
 800d8ce:	687a      	ldr	r2, [r7, #4]
 800d8d0:	4611      	mov	r1, r2
 800d8d2:	4618      	mov	r0, r3
 800d8d4:	f000 fe00 	bl	800e4d8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d8d8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d8da:	f000 f939 	bl	800db50 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d8de:	f000 fc37 	bl	800e150 <xTaskResumeAll>
 800d8e2:	4603      	mov	r3, r0
 800d8e4:	2b00      	cmp	r3, #0
 800d8e6:	d189      	bne.n	800d7fc <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800d8e8:	4b0f      	ldr	r3, [pc, #60]	@ (800d928 <xQueueReceive+0x1c0>)
 800d8ea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d8ee:	601a      	str	r2, [r3, #0]
 800d8f0:	f3bf 8f4f 	dsb	sy
 800d8f4:	f3bf 8f6f 	isb	sy
 800d8f8:	e780      	b.n	800d7fc <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800d8fa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d8fc:	f000 f928 	bl	800db50 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d900:	f000 fc26 	bl	800e150 <xTaskResumeAll>
 800d904:	e77a      	b.n	800d7fc <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800d906:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d908:	f000 f922 	bl	800db50 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d90c:	f000 fc20 	bl	800e150 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d910:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d912:	f000 f96f 	bl	800dbf4 <prvIsQueueEmpty>
 800d916:	4603      	mov	r3, r0
 800d918:	2b00      	cmp	r3, #0
 800d91a:	f43f af6f 	beq.w	800d7fc <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d91e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d920:	4618      	mov	r0, r3
 800d922:	3730      	adds	r7, #48	@ 0x30
 800d924:	46bd      	mov	sp, r7
 800d926:	bd80      	pop	{r7, pc}
 800d928:	e000ed04 	.word	0xe000ed04

0800d92c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800d92c:	b580      	push	{r7, lr}
 800d92e:	b08e      	sub	sp, #56	@ 0x38
 800d930:	af00      	add	r7, sp, #0
 800d932:	60f8      	str	r0, [r7, #12]
 800d934:	60b9      	str	r1, [r7, #8]
 800d936:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d938:	68fb      	ldr	r3, [r7, #12]
 800d93a:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800d93c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d93e:	2b00      	cmp	r3, #0
 800d940:	d10b      	bne.n	800d95a <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800d942:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d946:	f383 8811 	msr	BASEPRI, r3
 800d94a:	f3bf 8f6f 	isb	sy
 800d94e:	f3bf 8f4f 	dsb	sy
 800d952:	623b      	str	r3, [r7, #32]
}
 800d954:	bf00      	nop
 800d956:	bf00      	nop
 800d958:	e7fd      	b.n	800d956 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d95a:	68bb      	ldr	r3, [r7, #8]
 800d95c:	2b00      	cmp	r3, #0
 800d95e:	d103      	bne.n	800d968 <xQueueReceiveFromISR+0x3c>
 800d960:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d962:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d964:	2b00      	cmp	r3, #0
 800d966:	d101      	bne.n	800d96c <xQueueReceiveFromISR+0x40>
 800d968:	2301      	movs	r3, #1
 800d96a:	e000      	b.n	800d96e <xQueueReceiveFromISR+0x42>
 800d96c:	2300      	movs	r3, #0
 800d96e:	2b00      	cmp	r3, #0
 800d970:	d10b      	bne.n	800d98a <xQueueReceiveFromISR+0x5e>
	__asm volatile
 800d972:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d976:	f383 8811 	msr	BASEPRI, r3
 800d97a:	f3bf 8f6f 	isb	sy
 800d97e:	f3bf 8f4f 	dsb	sy
 800d982:	61fb      	str	r3, [r7, #28]
}
 800d984:	bf00      	nop
 800d986:	bf00      	nop
 800d988:	e7fd      	b.n	800d986 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d98a:	f001 fde5 	bl	800f558 <vPortValidateInterruptPriority>
	__asm volatile
 800d98e:	f3ef 8211 	mrs	r2, BASEPRI
 800d992:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d996:	f383 8811 	msr	BASEPRI, r3
 800d99a:	f3bf 8f6f 	isb	sy
 800d99e:	f3bf 8f4f 	dsb	sy
 800d9a2:	61ba      	str	r2, [r7, #24]
 800d9a4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800d9a6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d9a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d9aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d9ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d9ae:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d9b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d9b2:	2b00      	cmp	r3, #0
 800d9b4:	d02f      	beq.n	800da16 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800d9b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d9b8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d9bc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d9c0:	68b9      	ldr	r1, [r7, #8]
 800d9c2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d9c4:	f000 f89e 	bl	800db04 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d9c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d9ca:	1e5a      	subs	r2, r3, #1
 800d9cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d9ce:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800d9d0:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800d9d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d9d8:	d112      	bne.n	800da00 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d9da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d9dc:	691b      	ldr	r3, [r3, #16]
 800d9de:	2b00      	cmp	r3, #0
 800d9e0:	d016      	beq.n	800da10 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d9e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d9e4:	3310      	adds	r3, #16
 800d9e6:	4618      	mov	r0, r3
 800d9e8:	f000 fdc8 	bl	800e57c <xTaskRemoveFromEventList>
 800d9ec:	4603      	mov	r3, r0
 800d9ee:	2b00      	cmp	r3, #0
 800d9f0:	d00e      	beq.n	800da10 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800d9f2:	687b      	ldr	r3, [r7, #4]
 800d9f4:	2b00      	cmp	r3, #0
 800d9f6:	d00b      	beq.n	800da10 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	2201      	movs	r2, #1
 800d9fc:	601a      	str	r2, [r3, #0]
 800d9fe:	e007      	b.n	800da10 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800da00:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800da04:	3301      	adds	r3, #1
 800da06:	b2db      	uxtb	r3, r3
 800da08:	b25a      	sxtb	r2, r3
 800da0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da0c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800da10:	2301      	movs	r3, #1
 800da12:	637b      	str	r3, [r7, #52]	@ 0x34
 800da14:	e001      	b.n	800da1a <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800da16:	2300      	movs	r3, #0
 800da18:	637b      	str	r3, [r7, #52]	@ 0x34
 800da1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800da1c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800da1e:	693b      	ldr	r3, [r7, #16]
 800da20:	f383 8811 	msr	BASEPRI, r3
}
 800da24:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800da26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800da28:	4618      	mov	r0, r3
 800da2a:	3738      	adds	r7, #56	@ 0x38
 800da2c:	46bd      	mov	sp, r7
 800da2e:	bd80      	pop	{r7, pc}

0800da30 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800da30:	b580      	push	{r7, lr}
 800da32:	b086      	sub	sp, #24
 800da34:	af00      	add	r7, sp, #0
 800da36:	60f8      	str	r0, [r7, #12]
 800da38:	60b9      	str	r1, [r7, #8]
 800da3a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800da3c:	2300      	movs	r3, #0
 800da3e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800da40:	68fb      	ldr	r3, [r7, #12]
 800da42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800da44:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800da46:	68fb      	ldr	r3, [r7, #12]
 800da48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800da4a:	2b00      	cmp	r3, #0
 800da4c:	d10d      	bne.n	800da6a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800da4e:	68fb      	ldr	r3, [r7, #12]
 800da50:	681b      	ldr	r3, [r3, #0]
 800da52:	2b00      	cmp	r3, #0
 800da54:	d14d      	bne.n	800daf2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800da56:	68fb      	ldr	r3, [r7, #12]
 800da58:	689b      	ldr	r3, [r3, #8]
 800da5a:	4618      	mov	r0, r3
 800da5c:	f000 ff46 	bl	800e8ec <xTaskPriorityDisinherit>
 800da60:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800da62:	68fb      	ldr	r3, [r7, #12]
 800da64:	2200      	movs	r2, #0
 800da66:	609a      	str	r2, [r3, #8]
 800da68:	e043      	b.n	800daf2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	2b00      	cmp	r3, #0
 800da6e:	d119      	bne.n	800daa4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800da70:	68fb      	ldr	r3, [r7, #12]
 800da72:	6858      	ldr	r0, [r3, #4]
 800da74:	68fb      	ldr	r3, [r7, #12]
 800da76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800da78:	461a      	mov	r2, r3
 800da7a:	68b9      	ldr	r1, [r7, #8]
 800da7c:	f002 fd5d 	bl	801053a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800da80:	68fb      	ldr	r3, [r7, #12]
 800da82:	685a      	ldr	r2, [r3, #4]
 800da84:	68fb      	ldr	r3, [r7, #12]
 800da86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800da88:	441a      	add	r2, r3
 800da8a:	68fb      	ldr	r3, [r7, #12]
 800da8c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800da8e:	68fb      	ldr	r3, [r7, #12]
 800da90:	685a      	ldr	r2, [r3, #4]
 800da92:	68fb      	ldr	r3, [r7, #12]
 800da94:	689b      	ldr	r3, [r3, #8]
 800da96:	429a      	cmp	r2, r3
 800da98:	d32b      	bcc.n	800daf2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800da9a:	68fb      	ldr	r3, [r7, #12]
 800da9c:	681a      	ldr	r2, [r3, #0]
 800da9e:	68fb      	ldr	r3, [r7, #12]
 800daa0:	605a      	str	r2, [r3, #4]
 800daa2:	e026      	b.n	800daf2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800daa4:	68fb      	ldr	r3, [r7, #12]
 800daa6:	68d8      	ldr	r0, [r3, #12]
 800daa8:	68fb      	ldr	r3, [r7, #12]
 800daaa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800daac:	461a      	mov	r2, r3
 800daae:	68b9      	ldr	r1, [r7, #8]
 800dab0:	f002 fd43 	bl	801053a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800dab4:	68fb      	ldr	r3, [r7, #12]
 800dab6:	68da      	ldr	r2, [r3, #12]
 800dab8:	68fb      	ldr	r3, [r7, #12]
 800daba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dabc:	425b      	negs	r3, r3
 800dabe:	441a      	add	r2, r3
 800dac0:	68fb      	ldr	r3, [r7, #12]
 800dac2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800dac4:	68fb      	ldr	r3, [r7, #12]
 800dac6:	68da      	ldr	r2, [r3, #12]
 800dac8:	68fb      	ldr	r3, [r7, #12]
 800daca:	681b      	ldr	r3, [r3, #0]
 800dacc:	429a      	cmp	r2, r3
 800dace:	d207      	bcs.n	800dae0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800dad0:	68fb      	ldr	r3, [r7, #12]
 800dad2:	689a      	ldr	r2, [r3, #8]
 800dad4:	68fb      	ldr	r3, [r7, #12]
 800dad6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dad8:	425b      	negs	r3, r3
 800dada:	441a      	add	r2, r3
 800dadc:	68fb      	ldr	r3, [r7, #12]
 800dade:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800dae0:	687b      	ldr	r3, [r7, #4]
 800dae2:	2b02      	cmp	r3, #2
 800dae4:	d105      	bne.n	800daf2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800dae6:	693b      	ldr	r3, [r7, #16]
 800dae8:	2b00      	cmp	r3, #0
 800daea:	d002      	beq.n	800daf2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800daec:	693b      	ldr	r3, [r7, #16]
 800daee:	3b01      	subs	r3, #1
 800daf0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800daf2:	693b      	ldr	r3, [r7, #16]
 800daf4:	1c5a      	adds	r2, r3, #1
 800daf6:	68fb      	ldr	r3, [r7, #12]
 800daf8:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800dafa:	697b      	ldr	r3, [r7, #20]
}
 800dafc:	4618      	mov	r0, r3
 800dafe:	3718      	adds	r7, #24
 800db00:	46bd      	mov	sp, r7
 800db02:	bd80      	pop	{r7, pc}

0800db04 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800db04:	b580      	push	{r7, lr}
 800db06:	b082      	sub	sp, #8
 800db08:	af00      	add	r7, sp, #0
 800db0a:	6078      	str	r0, [r7, #4]
 800db0c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800db12:	2b00      	cmp	r3, #0
 800db14:	d018      	beq.n	800db48 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	68da      	ldr	r2, [r3, #12]
 800db1a:	687b      	ldr	r3, [r7, #4]
 800db1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800db1e:	441a      	add	r2, r3
 800db20:	687b      	ldr	r3, [r7, #4]
 800db22:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800db24:	687b      	ldr	r3, [r7, #4]
 800db26:	68da      	ldr	r2, [r3, #12]
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	689b      	ldr	r3, [r3, #8]
 800db2c:	429a      	cmp	r2, r3
 800db2e:	d303      	bcc.n	800db38 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	681a      	ldr	r2, [r3, #0]
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	68d9      	ldr	r1, [r3, #12]
 800db3c:	687b      	ldr	r3, [r7, #4]
 800db3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800db40:	461a      	mov	r2, r3
 800db42:	6838      	ldr	r0, [r7, #0]
 800db44:	f002 fcf9 	bl	801053a <memcpy>
	}
}
 800db48:	bf00      	nop
 800db4a:	3708      	adds	r7, #8
 800db4c:	46bd      	mov	sp, r7
 800db4e:	bd80      	pop	{r7, pc}

0800db50 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800db50:	b580      	push	{r7, lr}
 800db52:	b084      	sub	sp, #16
 800db54:	af00      	add	r7, sp, #0
 800db56:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800db58:	f001 fc1e 	bl	800f398 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800db62:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800db64:	e011      	b.n	800db8a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800db66:	687b      	ldr	r3, [r7, #4]
 800db68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800db6a:	2b00      	cmp	r3, #0
 800db6c:	d012      	beq.n	800db94 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800db6e:	687b      	ldr	r3, [r7, #4]
 800db70:	3324      	adds	r3, #36	@ 0x24
 800db72:	4618      	mov	r0, r3
 800db74:	f000 fd02 	bl	800e57c <xTaskRemoveFromEventList>
 800db78:	4603      	mov	r3, r0
 800db7a:	2b00      	cmp	r3, #0
 800db7c:	d001      	beq.n	800db82 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800db7e:	f000 fddb 	bl	800e738 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800db82:	7bfb      	ldrb	r3, [r7, #15]
 800db84:	3b01      	subs	r3, #1
 800db86:	b2db      	uxtb	r3, r3
 800db88:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800db8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800db8e:	2b00      	cmp	r3, #0
 800db90:	dce9      	bgt.n	800db66 <prvUnlockQueue+0x16>
 800db92:	e000      	b.n	800db96 <prvUnlockQueue+0x46>
					break;
 800db94:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800db96:	687b      	ldr	r3, [r7, #4]
 800db98:	22ff      	movs	r2, #255	@ 0xff
 800db9a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800db9e:	f001 fc2d 	bl	800f3fc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800dba2:	f001 fbf9 	bl	800f398 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800dba6:	687b      	ldr	r3, [r7, #4]
 800dba8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800dbac:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800dbae:	e011      	b.n	800dbd4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800dbb0:	687b      	ldr	r3, [r7, #4]
 800dbb2:	691b      	ldr	r3, [r3, #16]
 800dbb4:	2b00      	cmp	r3, #0
 800dbb6:	d012      	beq.n	800dbde <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	3310      	adds	r3, #16
 800dbbc:	4618      	mov	r0, r3
 800dbbe:	f000 fcdd 	bl	800e57c <xTaskRemoveFromEventList>
 800dbc2:	4603      	mov	r3, r0
 800dbc4:	2b00      	cmp	r3, #0
 800dbc6:	d001      	beq.n	800dbcc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800dbc8:	f000 fdb6 	bl	800e738 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800dbcc:	7bbb      	ldrb	r3, [r7, #14]
 800dbce:	3b01      	subs	r3, #1
 800dbd0:	b2db      	uxtb	r3, r3
 800dbd2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800dbd4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800dbd8:	2b00      	cmp	r3, #0
 800dbda:	dce9      	bgt.n	800dbb0 <prvUnlockQueue+0x60>
 800dbdc:	e000      	b.n	800dbe0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800dbde:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800dbe0:	687b      	ldr	r3, [r7, #4]
 800dbe2:	22ff      	movs	r2, #255	@ 0xff
 800dbe4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800dbe8:	f001 fc08 	bl	800f3fc <vPortExitCritical>
}
 800dbec:	bf00      	nop
 800dbee:	3710      	adds	r7, #16
 800dbf0:	46bd      	mov	sp, r7
 800dbf2:	bd80      	pop	{r7, pc}

0800dbf4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800dbf4:	b580      	push	{r7, lr}
 800dbf6:	b084      	sub	sp, #16
 800dbf8:	af00      	add	r7, sp, #0
 800dbfa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800dbfc:	f001 fbcc 	bl	800f398 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800dc00:	687b      	ldr	r3, [r7, #4]
 800dc02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dc04:	2b00      	cmp	r3, #0
 800dc06:	d102      	bne.n	800dc0e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800dc08:	2301      	movs	r3, #1
 800dc0a:	60fb      	str	r3, [r7, #12]
 800dc0c:	e001      	b.n	800dc12 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800dc0e:	2300      	movs	r3, #0
 800dc10:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800dc12:	f001 fbf3 	bl	800f3fc <vPortExitCritical>

	return xReturn;
 800dc16:	68fb      	ldr	r3, [r7, #12]
}
 800dc18:	4618      	mov	r0, r3
 800dc1a:	3710      	adds	r7, #16
 800dc1c:	46bd      	mov	sp, r7
 800dc1e:	bd80      	pop	{r7, pc}

0800dc20 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800dc20:	b580      	push	{r7, lr}
 800dc22:	b084      	sub	sp, #16
 800dc24:	af00      	add	r7, sp, #0
 800dc26:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800dc28:	f001 fbb6 	bl	800f398 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800dc2c:	687b      	ldr	r3, [r7, #4]
 800dc2e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800dc34:	429a      	cmp	r2, r3
 800dc36:	d102      	bne.n	800dc3e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800dc38:	2301      	movs	r3, #1
 800dc3a:	60fb      	str	r3, [r7, #12]
 800dc3c:	e001      	b.n	800dc42 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800dc3e:	2300      	movs	r3, #0
 800dc40:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800dc42:	f001 fbdb 	bl	800f3fc <vPortExitCritical>

	return xReturn;
 800dc46:	68fb      	ldr	r3, [r7, #12]
}
 800dc48:	4618      	mov	r0, r3
 800dc4a:	3710      	adds	r7, #16
 800dc4c:	46bd      	mov	sp, r7
 800dc4e:	bd80      	pop	{r7, pc}

0800dc50 <xQueueIsQueueFullFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueIsQueueFullFromISR( const QueueHandle_t xQueue )
{
 800dc50:	b480      	push	{r7}
 800dc52:	b087      	sub	sp, #28
 800dc54:	af00      	add	r7, sp, #0
 800dc56:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;
Queue_t * const pxQueue = xQueue;
 800dc58:	687b      	ldr	r3, [r7, #4]
 800dc5a:	613b      	str	r3, [r7, #16]

	configASSERT( pxQueue );
 800dc5c:	693b      	ldr	r3, [r7, #16]
 800dc5e:	2b00      	cmp	r3, #0
 800dc60:	d10b      	bne.n	800dc7a <xQueueIsQueueFullFromISR+0x2a>
	__asm volatile
 800dc62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dc66:	f383 8811 	msr	BASEPRI, r3
 800dc6a:	f3bf 8f6f 	isb	sy
 800dc6e:	f3bf 8f4f 	dsb	sy
 800dc72:	60fb      	str	r3, [r7, #12]
}
 800dc74:	bf00      	nop
 800dc76:	bf00      	nop
 800dc78:	e7fd      	b.n	800dc76 <xQueueIsQueueFullFromISR+0x26>
	if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800dc7a:	693b      	ldr	r3, [r7, #16]
 800dc7c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800dc7e:	693b      	ldr	r3, [r7, #16]
 800dc80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800dc82:	429a      	cmp	r2, r3
 800dc84:	d102      	bne.n	800dc8c <xQueueIsQueueFullFromISR+0x3c>
	{
		xReturn = pdTRUE;
 800dc86:	2301      	movs	r3, #1
 800dc88:	617b      	str	r3, [r7, #20]
 800dc8a:	e001      	b.n	800dc90 <xQueueIsQueueFullFromISR+0x40>
	}
	else
	{
		xReturn = pdFALSE;
 800dc8c:	2300      	movs	r3, #0
 800dc8e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800dc90:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800dc92:	4618      	mov	r0, r3
 800dc94:	371c      	adds	r7, #28
 800dc96:	46bd      	mov	sp, r7
 800dc98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc9c:	4770      	bx	lr
	...

0800dca0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800dca0:	b480      	push	{r7}
 800dca2:	b085      	sub	sp, #20
 800dca4:	af00      	add	r7, sp, #0
 800dca6:	6078      	str	r0, [r7, #4]
 800dca8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800dcaa:	2300      	movs	r3, #0
 800dcac:	60fb      	str	r3, [r7, #12]
 800dcae:	e014      	b.n	800dcda <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800dcb0:	4a0f      	ldr	r2, [pc, #60]	@ (800dcf0 <vQueueAddToRegistry+0x50>)
 800dcb2:	68fb      	ldr	r3, [r7, #12]
 800dcb4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800dcb8:	2b00      	cmp	r3, #0
 800dcba:	d10b      	bne.n	800dcd4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800dcbc:	490c      	ldr	r1, [pc, #48]	@ (800dcf0 <vQueueAddToRegistry+0x50>)
 800dcbe:	68fb      	ldr	r3, [r7, #12]
 800dcc0:	683a      	ldr	r2, [r7, #0]
 800dcc2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800dcc6:	4a0a      	ldr	r2, [pc, #40]	@ (800dcf0 <vQueueAddToRegistry+0x50>)
 800dcc8:	68fb      	ldr	r3, [r7, #12]
 800dcca:	00db      	lsls	r3, r3, #3
 800dccc:	4413      	add	r3, r2
 800dcce:	687a      	ldr	r2, [r7, #4]
 800dcd0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800dcd2:	e006      	b.n	800dce2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800dcd4:	68fb      	ldr	r3, [r7, #12]
 800dcd6:	3301      	adds	r3, #1
 800dcd8:	60fb      	str	r3, [r7, #12]
 800dcda:	68fb      	ldr	r3, [r7, #12]
 800dcdc:	2b07      	cmp	r3, #7
 800dcde:	d9e7      	bls.n	800dcb0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800dce0:	bf00      	nop
 800dce2:	bf00      	nop
 800dce4:	3714      	adds	r7, #20
 800dce6:	46bd      	mov	sp, r7
 800dce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcec:	4770      	bx	lr
 800dcee:	bf00      	nop
 800dcf0:	20023554 	.word	0x20023554

0800dcf4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800dcf4:	b580      	push	{r7, lr}
 800dcf6:	b086      	sub	sp, #24
 800dcf8:	af00      	add	r7, sp, #0
 800dcfa:	60f8      	str	r0, [r7, #12]
 800dcfc:	60b9      	str	r1, [r7, #8]
 800dcfe:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800dd00:	68fb      	ldr	r3, [r7, #12]
 800dd02:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800dd04:	f001 fb48 	bl	800f398 <vPortEnterCritical>
 800dd08:	697b      	ldr	r3, [r7, #20]
 800dd0a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800dd0e:	b25b      	sxtb	r3, r3
 800dd10:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dd14:	d103      	bne.n	800dd1e <vQueueWaitForMessageRestricted+0x2a>
 800dd16:	697b      	ldr	r3, [r7, #20]
 800dd18:	2200      	movs	r2, #0
 800dd1a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800dd1e:	697b      	ldr	r3, [r7, #20]
 800dd20:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800dd24:	b25b      	sxtb	r3, r3
 800dd26:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dd2a:	d103      	bne.n	800dd34 <vQueueWaitForMessageRestricted+0x40>
 800dd2c:	697b      	ldr	r3, [r7, #20]
 800dd2e:	2200      	movs	r2, #0
 800dd30:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800dd34:	f001 fb62 	bl	800f3fc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800dd38:	697b      	ldr	r3, [r7, #20]
 800dd3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dd3c:	2b00      	cmp	r3, #0
 800dd3e:	d106      	bne.n	800dd4e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800dd40:	697b      	ldr	r3, [r7, #20]
 800dd42:	3324      	adds	r3, #36	@ 0x24
 800dd44:	687a      	ldr	r2, [r7, #4]
 800dd46:	68b9      	ldr	r1, [r7, #8]
 800dd48:	4618      	mov	r0, r3
 800dd4a:	f000 fbeb 	bl	800e524 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800dd4e:	6978      	ldr	r0, [r7, #20]
 800dd50:	f7ff fefe 	bl	800db50 <prvUnlockQueue>
	}
 800dd54:	bf00      	nop
 800dd56:	3718      	adds	r7, #24
 800dd58:	46bd      	mov	sp, r7
 800dd5a:	bd80      	pop	{r7, pc}

0800dd5c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800dd5c:	b580      	push	{r7, lr}
 800dd5e:	b08e      	sub	sp, #56	@ 0x38
 800dd60:	af04      	add	r7, sp, #16
 800dd62:	60f8      	str	r0, [r7, #12]
 800dd64:	60b9      	str	r1, [r7, #8]
 800dd66:	607a      	str	r2, [r7, #4]
 800dd68:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800dd6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dd6c:	2b00      	cmp	r3, #0
 800dd6e:	d10b      	bne.n	800dd88 <xTaskCreateStatic+0x2c>
	__asm volatile
 800dd70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dd74:	f383 8811 	msr	BASEPRI, r3
 800dd78:	f3bf 8f6f 	isb	sy
 800dd7c:	f3bf 8f4f 	dsb	sy
 800dd80:	623b      	str	r3, [r7, #32]
}
 800dd82:	bf00      	nop
 800dd84:	bf00      	nop
 800dd86:	e7fd      	b.n	800dd84 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800dd88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dd8a:	2b00      	cmp	r3, #0
 800dd8c:	d10b      	bne.n	800dda6 <xTaskCreateStatic+0x4a>
	__asm volatile
 800dd8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dd92:	f383 8811 	msr	BASEPRI, r3
 800dd96:	f3bf 8f6f 	isb	sy
 800dd9a:	f3bf 8f4f 	dsb	sy
 800dd9e:	61fb      	str	r3, [r7, #28]
}
 800dda0:	bf00      	nop
 800dda2:	bf00      	nop
 800dda4:	e7fd      	b.n	800dda2 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800dda6:	2354      	movs	r3, #84	@ 0x54
 800dda8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800ddaa:	693b      	ldr	r3, [r7, #16]
 800ddac:	2b54      	cmp	r3, #84	@ 0x54
 800ddae:	d00b      	beq.n	800ddc8 <xTaskCreateStatic+0x6c>
	__asm volatile
 800ddb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ddb4:	f383 8811 	msr	BASEPRI, r3
 800ddb8:	f3bf 8f6f 	isb	sy
 800ddbc:	f3bf 8f4f 	dsb	sy
 800ddc0:	61bb      	str	r3, [r7, #24]
}
 800ddc2:	bf00      	nop
 800ddc4:	bf00      	nop
 800ddc6:	e7fd      	b.n	800ddc4 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800ddc8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800ddca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ddcc:	2b00      	cmp	r3, #0
 800ddce:	d01a      	beq.n	800de06 <xTaskCreateStatic+0xaa>
 800ddd0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ddd2:	2b00      	cmp	r3, #0
 800ddd4:	d017      	beq.n	800de06 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ddd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ddd8:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800ddda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dddc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ddde:	631a      	str	r2, [r3, #48]	@ 0x30
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800dde0:	2300      	movs	r3, #0
 800dde2:	9303      	str	r3, [sp, #12]
 800dde4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dde6:	9302      	str	r3, [sp, #8]
 800dde8:	f107 0314 	add.w	r3, r7, #20
 800ddec:	9301      	str	r3, [sp, #4]
 800ddee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ddf0:	9300      	str	r3, [sp, #0]
 800ddf2:	683b      	ldr	r3, [r7, #0]
 800ddf4:	687a      	ldr	r2, [r7, #4]
 800ddf6:	68b9      	ldr	r1, [r7, #8]
 800ddf8:	68f8      	ldr	r0, [r7, #12]
 800ddfa:	f000 f80b 	bl	800de14 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ddfe:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800de00:	f000 f890 	bl	800df24 <prvAddNewTaskToReadyList>
 800de04:	e001      	b.n	800de0a <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 800de06:	2300      	movs	r3, #0
 800de08:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800de0a:	697b      	ldr	r3, [r7, #20]
	}
 800de0c:	4618      	mov	r0, r3
 800de0e:	3728      	adds	r7, #40	@ 0x28
 800de10:	46bd      	mov	sp, r7
 800de12:	bd80      	pop	{r7, pc}

0800de14 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800de14:	b580      	push	{r7, lr}
 800de16:	b088      	sub	sp, #32
 800de18:	af00      	add	r7, sp, #0
 800de1a:	60f8      	str	r0, [r7, #12]
 800de1c:	60b9      	str	r1, [r7, #8]
 800de1e:	607a      	str	r2, [r7, #4]
 800de20:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800de22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800de24:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800de26:	687b      	ldr	r3, [r7, #4]
 800de28:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800de2c:	3b01      	subs	r3, #1
 800de2e:	009b      	lsls	r3, r3, #2
 800de30:	4413      	add	r3, r2
 800de32:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800de34:	69bb      	ldr	r3, [r7, #24]
 800de36:	f023 0307 	bic.w	r3, r3, #7
 800de3a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800de3c:	69bb      	ldr	r3, [r7, #24]
 800de3e:	f003 0307 	and.w	r3, r3, #7
 800de42:	2b00      	cmp	r3, #0
 800de44:	d00b      	beq.n	800de5e <prvInitialiseNewTask+0x4a>
	__asm volatile
 800de46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800de4a:	f383 8811 	msr	BASEPRI, r3
 800de4e:	f3bf 8f6f 	isb	sy
 800de52:	f3bf 8f4f 	dsb	sy
 800de56:	617b      	str	r3, [r7, #20]
}
 800de58:	bf00      	nop
 800de5a:	bf00      	nop
 800de5c:	e7fd      	b.n	800de5a <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800de5e:	68bb      	ldr	r3, [r7, #8]
 800de60:	2b00      	cmp	r3, #0
 800de62:	d01f      	beq.n	800dea4 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800de64:	2300      	movs	r3, #0
 800de66:	61fb      	str	r3, [r7, #28]
 800de68:	e012      	b.n	800de90 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800de6a:	68ba      	ldr	r2, [r7, #8]
 800de6c:	69fb      	ldr	r3, [r7, #28]
 800de6e:	4413      	add	r3, r2
 800de70:	7819      	ldrb	r1, [r3, #0]
 800de72:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800de74:	69fb      	ldr	r3, [r7, #28]
 800de76:	4413      	add	r3, r2
 800de78:	3334      	adds	r3, #52	@ 0x34
 800de7a:	460a      	mov	r2, r1
 800de7c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800de7e:	68ba      	ldr	r2, [r7, #8]
 800de80:	69fb      	ldr	r3, [r7, #28]
 800de82:	4413      	add	r3, r2
 800de84:	781b      	ldrb	r3, [r3, #0]
 800de86:	2b00      	cmp	r3, #0
 800de88:	d006      	beq.n	800de98 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800de8a:	69fb      	ldr	r3, [r7, #28]
 800de8c:	3301      	adds	r3, #1
 800de8e:	61fb      	str	r3, [r7, #28]
 800de90:	69fb      	ldr	r3, [r7, #28]
 800de92:	2b0f      	cmp	r3, #15
 800de94:	d9e9      	bls.n	800de6a <prvInitialiseNewTask+0x56>
 800de96:	e000      	b.n	800de9a <prvInitialiseNewTask+0x86>
			{
				break;
 800de98:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800de9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800de9c:	2200      	movs	r2, #0
 800de9e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800dea2:	e003      	b.n	800deac <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800dea4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dea6:	2200      	movs	r2, #0
 800dea8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800deac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800deae:	2b06      	cmp	r3, #6
 800deb0:	d901      	bls.n	800deb6 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800deb2:	2306      	movs	r3, #6
 800deb4:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800deb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800deb8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800deba:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800debc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800debe:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800dec0:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800dec2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dec4:	2200      	movs	r2, #0
 800dec6:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800dec8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800deca:	3304      	adds	r3, #4
 800decc:	4618      	mov	r0, r3
 800dece:	f7ff f8df 	bl	800d090 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800ded2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ded4:	3318      	adds	r3, #24
 800ded6:	4618      	mov	r0, r3
 800ded8:	f7ff f8da 	bl	800d090 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800dedc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dede:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800dee0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dee2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dee4:	f1c3 0207 	rsb	r2, r3, #7
 800dee8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800deea:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800deec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800deee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800def0:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800def2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800def4:	2200      	movs	r2, #0
 800def6:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800def8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800defa:	2200      	movs	r2, #0
 800defc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800df00:	683a      	ldr	r2, [r7, #0]
 800df02:	68f9      	ldr	r1, [r7, #12]
 800df04:	69b8      	ldr	r0, [r7, #24]
 800df06:	f001 f913 	bl	800f130 <pxPortInitialiseStack>
 800df0a:	4602      	mov	r2, r0
 800df0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800df0e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800df10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800df12:	2b00      	cmp	r3, #0
 800df14:	d002      	beq.n	800df1c <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800df16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800df18:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800df1a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800df1c:	bf00      	nop
 800df1e:	3720      	adds	r7, #32
 800df20:	46bd      	mov	sp, r7
 800df22:	bd80      	pop	{r7, pc}

0800df24 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800df24:	b580      	push	{r7, lr}
 800df26:	b082      	sub	sp, #8
 800df28:	af00      	add	r7, sp, #0
 800df2a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800df2c:	f001 fa34 	bl	800f398 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800df30:	4b2a      	ldr	r3, [pc, #168]	@ (800dfdc <prvAddNewTaskToReadyList+0xb8>)
 800df32:	681b      	ldr	r3, [r3, #0]
 800df34:	3301      	adds	r3, #1
 800df36:	4a29      	ldr	r2, [pc, #164]	@ (800dfdc <prvAddNewTaskToReadyList+0xb8>)
 800df38:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800df3a:	4b29      	ldr	r3, [pc, #164]	@ (800dfe0 <prvAddNewTaskToReadyList+0xbc>)
 800df3c:	681b      	ldr	r3, [r3, #0]
 800df3e:	2b00      	cmp	r3, #0
 800df40:	d109      	bne.n	800df56 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800df42:	4a27      	ldr	r2, [pc, #156]	@ (800dfe0 <prvAddNewTaskToReadyList+0xbc>)
 800df44:	687b      	ldr	r3, [r7, #4]
 800df46:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800df48:	4b24      	ldr	r3, [pc, #144]	@ (800dfdc <prvAddNewTaskToReadyList+0xb8>)
 800df4a:	681b      	ldr	r3, [r3, #0]
 800df4c:	2b01      	cmp	r3, #1
 800df4e:	d110      	bne.n	800df72 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800df50:	f000 fc16 	bl	800e780 <prvInitialiseTaskLists>
 800df54:	e00d      	b.n	800df72 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800df56:	4b23      	ldr	r3, [pc, #140]	@ (800dfe4 <prvAddNewTaskToReadyList+0xc0>)
 800df58:	681b      	ldr	r3, [r3, #0]
 800df5a:	2b00      	cmp	r3, #0
 800df5c:	d109      	bne.n	800df72 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800df5e:	4b20      	ldr	r3, [pc, #128]	@ (800dfe0 <prvAddNewTaskToReadyList+0xbc>)
 800df60:	681b      	ldr	r3, [r3, #0]
 800df62:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800df64:	687b      	ldr	r3, [r7, #4]
 800df66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800df68:	429a      	cmp	r2, r3
 800df6a:	d802      	bhi.n	800df72 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800df6c:	4a1c      	ldr	r2, [pc, #112]	@ (800dfe0 <prvAddNewTaskToReadyList+0xbc>)
 800df6e:	687b      	ldr	r3, [r7, #4]
 800df70:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800df72:	4b1d      	ldr	r3, [pc, #116]	@ (800dfe8 <prvAddNewTaskToReadyList+0xc4>)
 800df74:	681b      	ldr	r3, [r3, #0]
 800df76:	3301      	adds	r3, #1
 800df78:	4a1b      	ldr	r2, [pc, #108]	@ (800dfe8 <prvAddNewTaskToReadyList+0xc4>)
 800df7a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800df7c:	687b      	ldr	r3, [r7, #4]
 800df7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800df80:	2201      	movs	r2, #1
 800df82:	409a      	lsls	r2, r3
 800df84:	4b19      	ldr	r3, [pc, #100]	@ (800dfec <prvAddNewTaskToReadyList+0xc8>)
 800df86:	681b      	ldr	r3, [r3, #0]
 800df88:	4313      	orrs	r3, r2
 800df8a:	4a18      	ldr	r2, [pc, #96]	@ (800dfec <prvAddNewTaskToReadyList+0xc8>)
 800df8c:	6013      	str	r3, [r2, #0]
 800df8e:	687b      	ldr	r3, [r7, #4]
 800df90:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800df92:	4613      	mov	r3, r2
 800df94:	009b      	lsls	r3, r3, #2
 800df96:	4413      	add	r3, r2
 800df98:	009b      	lsls	r3, r3, #2
 800df9a:	4a15      	ldr	r2, [pc, #84]	@ (800dff0 <prvAddNewTaskToReadyList+0xcc>)
 800df9c:	441a      	add	r2, r3
 800df9e:	687b      	ldr	r3, [r7, #4]
 800dfa0:	3304      	adds	r3, #4
 800dfa2:	4619      	mov	r1, r3
 800dfa4:	4610      	mov	r0, r2
 800dfa6:	f7ff f880 	bl	800d0aa <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800dfaa:	f001 fa27 	bl	800f3fc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800dfae:	4b0d      	ldr	r3, [pc, #52]	@ (800dfe4 <prvAddNewTaskToReadyList+0xc0>)
 800dfb0:	681b      	ldr	r3, [r3, #0]
 800dfb2:	2b00      	cmp	r3, #0
 800dfb4:	d00e      	beq.n	800dfd4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800dfb6:	4b0a      	ldr	r3, [pc, #40]	@ (800dfe0 <prvAddNewTaskToReadyList+0xbc>)
 800dfb8:	681b      	ldr	r3, [r3, #0]
 800dfba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dfbc:	687b      	ldr	r3, [r7, #4]
 800dfbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dfc0:	429a      	cmp	r2, r3
 800dfc2:	d207      	bcs.n	800dfd4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800dfc4:	4b0b      	ldr	r3, [pc, #44]	@ (800dff4 <prvAddNewTaskToReadyList+0xd0>)
 800dfc6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800dfca:	601a      	str	r2, [r3, #0]
 800dfcc:	f3bf 8f4f 	dsb	sy
 800dfd0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800dfd4:	bf00      	nop
 800dfd6:	3708      	adds	r7, #8
 800dfd8:	46bd      	mov	sp, r7
 800dfda:	bd80      	pop	{r7, pc}
 800dfdc:	20023694 	.word	0x20023694
 800dfe0:	20023594 	.word	0x20023594
 800dfe4:	200236a0 	.word	0x200236a0
 800dfe8:	200236b0 	.word	0x200236b0
 800dfec:	2002369c 	.word	0x2002369c
 800dff0:	20023598 	.word	0x20023598
 800dff4:	e000ed04 	.word	0xe000ed04

0800dff8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800dff8:	b580      	push	{r7, lr}
 800dffa:	b084      	sub	sp, #16
 800dffc:	af00      	add	r7, sp, #0
 800dffe:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800e000:	2300      	movs	r3, #0
 800e002:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800e004:	687b      	ldr	r3, [r7, #4]
 800e006:	2b00      	cmp	r3, #0
 800e008:	d018      	beq.n	800e03c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800e00a:	4b14      	ldr	r3, [pc, #80]	@ (800e05c <vTaskDelay+0x64>)
 800e00c:	681b      	ldr	r3, [r3, #0]
 800e00e:	2b00      	cmp	r3, #0
 800e010:	d00b      	beq.n	800e02a <vTaskDelay+0x32>
	__asm volatile
 800e012:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e016:	f383 8811 	msr	BASEPRI, r3
 800e01a:	f3bf 8f6f 	isb	sy
 800e01e:	f3bf 8f4f 	dsb	sy
 800e022:	60bb      	str	r3, [r7, #8]
}
 800e024:	bf00      	nop
 800e026:	bf00      	nop
 800e028:	e7fd      	b.n	800e026 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800e02a:	f000 f883 	bl	800e134 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800e02e:	2100      	movs	r1, #0
 800e030:	6878      	ldr	r0, [r7, #4]
 800e032:	f000 fce3 	bl	800e9fc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800e036:	f000 f88b 	bl	800e150 <xTaskResumeAll>
 800e03a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800e03c:	68fb      	ldr	r3, [r7, #12]
 800e03e:	2b00      	cmp	r3, #0
 800e040:	d107      	bne.n	800e052 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800e042:	4b07      	ldr	r3, [pc, #28]	@ (800e060 <vTaskDelay+0x68>)
 800e044:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e048:	601a      	str	r2, [r3, #0]
 800e04a:	f3bf 8f4f 	dsb	sy
 800e04e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e052:	bf00      	nop
 800e054:	3710      	adds	r7, #16
 800e056:	46bd      	mov	sp, r7
 800e058:	bd80      	pop	{r7, pc}
 800e05a:	bf00      	nop
 800e05c:	200236bc 	.word	0x200236bc
 800e060:	e000ed04 	.word	0xe000ed04

0800e064 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800e064:	b580      	push	{r7, lr}
 800e066:	b08a      	sub	sp, #40	@ 0x28
 800e068:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800e06a:	2300      	movs	r3, #0
 800e06c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800e06e:	2300      	movs	r3, #0
 800e070:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800e072:	463a      	mov	r2, r7
 800e074:	1d39      	adds	r1, r7, #4
 800e076:	f107 0308 	add.w	r3, r7, #8
 800e07a:	4618      	mov	r0, r3
 800e07c:	f7f5 f936 	bl	80032ec <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800e080:	6839      	ldr	r1, [r7, #0]
 800e082:	687b      	ldr	r3, [r7, #4]
 800e084:	68ba      	ldr	r2, [r7, #8]
 800e086:	9202      	str	r2, [sp, #8]
 800e088:	9301      	str	r3, [sp, #4]
 800e08a:	2300      	movs	r3, #0
 800e08c:	9300      	str	r3, [sp, #0]
 800e08e:	2300      	movs	r3, #0
 800e090:	460a      	mov	r2, r1
 800e092:	4922      	ldr	r1, [pc, #136]	@ (800e11c <vTaskStartScheduler+0xb8>)
 800e094:	4822      	ldr	r0, [pc, #136]	@ (800e120 <vTaskStartScheduler+0xbc>)
 800e096:	f7ff fe61 	bl	800dd5c <xTaskCreateStatic>
 800e09a:	4603      	mov	r3, r0
 800e09c:	4a21      	ldr	r2, [pc, #132]	@ (800e124 <vTaskStartScheduler+0xc0>)
 800e09e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800e0a0:	4b20      	ldr	r3, [pc, #128]	@ (800e124 <vTaskStartScheduler+0xc0>)
 800e0a2:	681b      	ldr	r3, [r3, #0]
 800e0a4:	2b00      	cmp	r3, #0
 800e0a6:	d002      	beq.n	800e0ae <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800e0a8:	2301      	movs	r3, #1
 800e0aa:	617b      	str	r3, [r7, #20]
 800e0ac:	e001      	b.n	800e0b2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800e0ae:	2300      	movs	r3, #0
 800e0b0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800e0b2:	697b      	ldr	r3, [r7, #20]
 800e0b4:	2b01      	cmp	r3, #1
 800e0b6:	d102      	bne.n	800e0be <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800e0b8:	f000 fd06 	bl	800eac8 <xTimerCreateTimerTask>
 800e0bc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800e0be:	697b      	ldr	r3, [r7, #20]
 800e0c0:	2b01      	cmp	r3, #1
 800e0c2:	d116      	bne.n	800e0f2 <vTaskStartScheduler+0x8e>
	__asm volatile
 800e0c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e0c8:	f383 8811 	msr	BASEPRI, r3
 800e0cc:	f3bf 8f6f 	isb	sy
 800e0d0:	f3bf 8f4f 	dsb	sy
 800e0d4:	613b      	str	r3, [r7, #16]
}
 800e0d6:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800e0d8:	4b13      	ldr	r3, [pc, #76]	@ (800e128 <vTaskStartScheduler+0xc4>)
 800e0da:	f04f 32ff 	mov.w	r2, #4294967295
 800e0de:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800e0e0:	4b12      	ldr	r3, [pc, #72]	@ (800e12c <vTaskStartScheduler+0xc8>)
 800e0e2:	2201      	movs	r2, #1
 800e0e4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800e0e6:	4b12      	ldr	r3, [pc, #72]	@ (800e130 <vTaskStartScheduler+0xcc>)
 800e0e8:	2200      	movs	r2, #0
 800e0ea:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800e0ec:	f001 f8b0 	bl	800f250 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800e0f0:	e00f      	b.n	800e112 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800e0f2:	697b      	ldr	r3, [r7, #20]
 800e0f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e0f8:	d10b      	bne.n	800e112 <vTaskStartScheduler+0xae>
	__asm volatile
 800e0fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e0fe:	f383 8811 	msr	BASEPRI, r3
 800e102:	f3bf 8f6f 	isb	sy
 800e106:	f3bf 8f4f 	dsb	sy
 800e10a:	60fb      	str	r3, [r7, #12]
}
 800e10c:	bf00      	nop
 800e10e:	bf00      	nop
 800e110:	e7fd      	b.n	800e10e <vTaskStartScheduler+0xaa>
}
 800e112:	bf00      	nop
 800e114:	3718      	adds	r7, #24
 800e116:	46bd      	mov	sp, r7
 800e118:	bd80      	pop	{r7, pc}
 800e11a:	bf00      	nop
 800e11c:	080127cc 	.word	0x080127cc
 800e120:	0800e751 	.word	0x0800e751
 800e124:	200236b8 	.word	0x200236b8
 800e128:	200236b4 	.word	0x200236b4
 800e12c:	200236a0 	.word	0x200236a0
 800e130:	20023698 	.word	0x20023698

0800e134 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800e134:	b480      	push	{r7}
 800e136:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800e138:	4b04      	ldr	r3, [pc, #16]	@ (800e14c <vTaskSuspendAll+0x18>)
 800e13a:	681b      	ldr	r3, [r3, #0]
 800e13c:	3301      	adds	r3, #1
 800e13e:	4a03      	ldr	r2, [pc, #12]	@ (800e14c <vTaskSuspendAll+0x18>)
 800e140:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800e142:	bf00      	nop
 800e144:	46bd      	mov	sp, r7
 800e146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e14a:	4770      	bx	lr
 800e14c:	200236bc 	.word	0x200236bc

0800e150 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800e150:	b580      	push	{r7, lr}
 800e152:	b084      	sub	sp, #16
 800e154:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800e156:	2300      	movs	r3, #0
 800e158:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800e15a:	2300      	movs	r3, #0
 800e15c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800e15e:	4b42      	ldr	r3, [pc, #264]	@ (800e268 <xTaskResumeAll+0x118>)
 800e160:	681b      	ldr	r3, [r3, #0]
 800e162:	2b00      	cmp	r3, #0
 800e164:	d10b      	bne.n	800e17e <xTaskResumeAll+0x2e>
	__asm volatile
 800e166:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e16a:	f383 8811 	msr	BASEPRI, r3
 800e16e:	f3bf 8f6f 	isb	sy
 800e172:	f3bf 8f4f 	dsb	sy
 800e176:	603b      	str	r3, [r7, #0]
}
 800e178:	bf00      	nop
 800e17a:	bf00      	nop
 800e17c:	e7fd      	b.n	800e17a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800e17e:	f001 f90b 	bl	800f398 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800e182:	4b39      	ldr	r3, [pc, #228]	@ (800e268 <xTaskResumeAll+0x118>)
 800e184:	681b      	ldr	r3, [r3, #0]
 800e186:	3b01      	subs	r3, #1
 800e188:	4a37      	ldr	r2, [pc, #220]	@ (800e268 <xTaskResumeAll+0x118>)
 800e18a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e18c:	4b36      	ldr	r3, [pc, #216]	@ (800e268 <xTaskResumeAll+0x118>)
 800e18e:	681b      	ldr	r3, [r3, #0]
 800e190:	2b00      	cmp	r3, #0
 800e192:	d161      	bne.n	800e258 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800e194:	4b35      	ldr	r3, [pc, #212]	@ (800e26c <xTaskResumeAll+0x11c>)
 800e196:	681b      	ldr	r3, [r3, #0]
 800e198:	2b00      	cmp	r3, #0
 800e19a:	d05d      	beq.n	800e258 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e19c:	e02e      	b.n	800e1fc <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e19e:	4b34      	ldr	r3, [pc, #208]	@ (800e270 <xTaskResumeAll+0x120>)
 800e1a0:	68db      	ldr	r3, [r3, #12]
 800e1a2:	68db      	ldr	r3, [r3, #12]
 800e1a4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e1a6:	68fb      	ldr	r3, [r7, #12]
 800e1a8:	3318      	adds	r3, #24
 800e1aa:	4618      	mov	r0, r3
 800e1ac:	f7fe ffda 	bl	800d164 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e1b0:	68fb      	ldr	r3, [r7, #12]
 800e1b2:	3304      	adds	r3, #4
 800e1b4:	4618      	mov	r0, r3
 800e1b6:	f7fe ffd5 	bl	800d164 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800e1ba:	68fb      	ldr	r3, [r7, #12]
 800e1bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e1be:	2201      	movs	r2, #1
 800e1c0:	409a      	lsls	r2, r3
 800e1c2:	4b2c      	ldr	r3, [pc, #176]	@ (800e274 <xTaskResumeAll+0x124>)
 800e1c4:	681b      	ldr	r3, [r3, #0]
 800e1c6:	4313      	orrs	r3, r2
 800e1c8:	4a2a      	ldr	r2, [pc, #168]	@ (800e274 <xTaskResumeAll+0x124>)
 800e1ca:	6013      	str	r3, [r2, #0]
 800e1cc:	68fb      	ldr	r3, [r7, #12]
 800e1ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e1d0:	4613      	mov	r3, r2
 800e1d2:	009b      	lsls	r3, r3, #2
 800e1d4:	4413      	add	r3, r2
 800e1d6:	009b      	lsls	r3, r3, #2
 800e1d8:	4a27      	ldr	r2, [pc, #156]	@ (800e278 <xTaskResumeAll+0x128>)
 800e1da:	441a      	add	r2, r3
 800e1dc:	68fb      	ldr	r3, [r7, #12]
 800e1de:	3304      	adds	r3, #4
 800e1e0:	4619      	mov	r1, r3
 800e1e2:	4610      	mov	r0, r2
 800e1e4:	f7fe ff61 	bl	800d0aa <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e1e8:	68fb      	ldr	r3, [r7, #12]
 800e1ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e1ec:	4b23      	ldr	r3, [pc, #140]	@ (800e27c <xTaskResumeAll+0x12c>)
 800e1ee:	681b      	ldr	r3, [r3, #0]
 800e1f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e1f2:	429a      	cmp	r2, r3
 800e1f4:	d302      	bcc.n	800e1fc <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800e1f6:	4b22      	ldr	r3, [pc, #136]	@ (800e280 <xTaskResumeAll+0x130>)
 800e1f8:	2201      	movs	r2, #1
 800e1fa:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e1fc:	4b1c      	ldr	r3, [pc, #112]	@ (800e270 <xTaskResumeAll+0x120>)
 800e1fe:	681b      	ldr	r3, [r3, #0]
 800e200:	2b00      	cmp	r3, #0
 800e202:	d1cc      	bne.n	800e19e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800e204:	68fb      	ldr	r3, [r7, #12]
 800e206:	2b00      	cmp	r3, #0
 800e208:	d001      	beq.n	800e20e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800e20a:	f000 fb31 	bl	800e870 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800e20e:	4b1d      	ldr	r3, [pc, #116]	@ (800e284 <xTaskResumeAll+0x134>)
 800e210:	681b      	ldr	r3, [r3, #0]
 800e212:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800e214:	687b      	ldr	r3, [r7, #4]
 800e216:	2b00      	cmp	r3, #0
 800e218:	d010      	beq.n	800e23c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800e21a:	f000 f847 	bl	800e2ac <xTaskIncrementTick>
 800e21e:	4603      	mov	r3, r0
 800e220:	2b00      	cmp	r3, #0
 800e222:	d002      	beq.n	800e22a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800e224:	4b16      	ldr	r3, [pc, #88]	@ (800e280 <xTaskResumeAll+0x130>)
 800e226:	2201      	movs	r2, #1
 800e228:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800e22a:	687b      	ldr	r3, [r7, #4]
 800e22c:	3b01      	subs	r3, #1
 800e22e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800e230:	687b      	ldr	r3, [r7, #4]
 800e232:	2b00      	cmp	r3, #0
 800e234:	d1f1      	bne.n	800e21a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800e236:	4b13      	ldr	r3, [pc, #76]	@ (800e284 <xTaskResumeAll+0x134>)
 800e238:	2200      	movs	r2, #0
 800e23a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800e23c:	4b10      	ldr	r3, [pc, #64]	@ (800e280 <xTaskResumeAll+0x130>)
 800e23e:	681b      	ldr	r3, [r3, #0]
 800e240:	2b00      	cmp	r3, #0
 800e242:	d009      	beq.n	800e258 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800e244:	2301      	movs	r3, #1
 800e246:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800e248:	4b0f      	ldr	r3, [pc, #60]	@ (800e288 <xTaskResumeAll+0x138>)
 800e24a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e24e:	601a      	str	r2, [r3, #0]
 800e250:	f3bf 8f4f 	dsb	sy
 800e254:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e258:	f001 f8d0 	bl	800f3fc <vPortExitCritical>

	return xAlreadyYielded;
 800e25c:	68bb      	ldr	r3, [r7, #8]
}
 800e25e:	4618      	mov	r0, r3
 800e260:	3710      	adds	r7, #16
 800e262:	46bd      	mov	sp, r7
 800e264:	bd80      	pop	{r7, pc}
 800e266:	bf00      	nop
 800e268:	200236bc 	.word	0x200236bc
 800e26c:	20023694 	.word	0x20023694
 800e270:	20023654 	.word	0x20023654
 800e274:	2002369c 	.word	0x2002369c
 800e278:	20023598 	.word	0x20023598
 800e27c:	20023594 	.word	0x20023594
 800e280:	200236a8 	.word	0x200236a8
 800e284:	200236a4 	.word	0x200236a4
 800e288:	e000ed04 	.word	0xe000ed04

0800e28c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800e28c:	b480      	push	{r7}
 800e28e:	b083      	sub	sp, #12
 800e290:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800e292:	4b05      	ldr	r3, [pc, #20]	@ (800e2a8 <xTaskGetTickCount+0x1c>)
 800e294:	681b      	ldr	r3, [r3, #0]
 800e296:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800e298:	687b      	ldr	r3, [r7, #4]
}
 800e29a:	4618      	mov	r0, r3
 800e29c:	370c      	adds	r7, #12
 800e29e:	46bd      	mov	sp, r7
 800e2a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2a4:	4770      	bx	lr
 800e2a6:	bf00      	nop
 800e2a8:	20023698 	.word	0x20023698

0800e2ac <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800e2ac:	b580      	push	{r7, lr}
 800e2ae:	b086      	sub	sp, #24
 800e2b0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800e2b2:	2300      	movs	r3, #0
 800e2b4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e2b6:	4b4f      	ldr	r3, [pc, #316]	@ (800e3f4 <xTaskIncrementTick+0x148>)
 800e2b8:	681b      	ldr	r3, [r3, #0]
 800e2ba:	2b00      	cmp	r3, #0
 800e2bc:	f040 808f 	bne.w	800e3de <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800e2c0:	4b4d      	ldr	r3, [pc, #308]	@ (800e3f8 <xTaskIncrementTick+0x14c>)
 800e2c2:	681b      	ldr	r3, [r3, #0]
 800e2c4:	3301      	adds	r3, #1
 800e2c6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800e2c8:	4a4b      	ldr	r2, [pc, #300]	@ (800e3f8 <xTaskIncrementTick+0x14c>)
 800e2ca:	693b      	ldr	r3, [r7, #16]
 800e2cc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800e2ce:	693b      	ldr	r3, [r7, #16]
 800e2d0:	2b00      	cmp	r3, #0
 800e2d2:	d121      	bne.n	800e318 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800e2d4:	4b49      	ldr	r3, [pc, #292]	@ (800e3fc <xTaskIncrementTick+0x150>)
 800e2d6:	681b      	ldr	r3, [r3, #0]
 800e2d8:	681b      	ldr	r3, [r3, #0]
 800e2da:	2b00      	cmp	r3, #0
 800e2dc:	d00b      	beq.n	800e2f6 <xTaskIncrementTick+0x4a>
	__asm volatile
 800e2de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e2e2:	f383 8811 	msr	BASEPRI, r3
 800e2e6:	f3bf 8f6f 	isb	sy
 800e2ea:	f3bf 8f4f 	dsb	sy
 800e2ee:	603b      	str	r3, [r7, #0]
}
 800e2f0:	bf00      	nop
 800e2f2:	bf00      	nop
 800e2f4:	e7fd      	b.n	800e2f2 <xTaskIncrementTick+0x46>
 800e2f6:	4b41      	ldr	r3, [pc, #260]	@ (800e3fc <xTaskIncrementTick+0x150>)
 800e2f8:	681b      	ldr	r3, [r3, #0]
 800e2fa:	60fb      	str	r3, [r7, #12]
 800e2fc:	4b40      	ldr	r3, [pc, #256]	@ (800e400 <xTaskIncrementTick+0x154>)
 800e2fe:	681b      	ldr	r3, [r3, #0]
 800e300:	4a3e      	ldr	r2, [pc, #248]	@ (800e3fc <xTaskIncrementTick+0x150>)
 800e302:	6013      	str	r3, [r2, #0]
 800e304:	4a3e      	ldr	r2, [pc, #248]	@ (800e400 <xTaskIncrementTick+0x154>)
 800e306:	68fb      	ldr	r3, [r7, #12]
 800e308:	6013      	str	r3, [r2, #0]
 800e30a:	4b3e      	ldr	r3, [pc, #248]	@ (800e404 <xTaskIncrementTick+0x158>)
 800e30c:	681b      	ldr	r3, [r3, #0]
 800e30e:	3301      	adds	r3, #1
 800e310:	4a3c      	ldr	r2, [pc, #240]	@ (800e404 <xTaskIncrementTick+0x158>)
 800e312:	6013      	str	r3, [r2, #0]
 800e314:	f000 faac 	bl	800e870 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800e318:	4b3b      	ldr	r3, [pc, #236]	@ (800e408 <xTaskIncrementTick+0x15c>)
 800e31a:	681b      	ldr	r3, [r3, #0]
 800e31c:	693a      	ldr	r2, [r7, #16]
 800e31e:	429a      	cmp	r2, r3
 800e320:	d348      	bcc.n	800e3b4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e322:	4b36      	ldr	r3, [pc, #216]	@ (800e3fc <xTaskIncrementTick+0x150>)
 800e324:	681b      	ldr	r3, [r3, #0]
 800e326:	681b      	ldr	r3, [r3, #0]
 800e328:	2b00      	cmp	r3, #0
 800e32a:	d104      	bne.n	800e336 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e32c:	4b36      	ldr	r3, [pc, #216]	@ (800e408 <xTaskIncrementTick+0x15c>)
 800e32e:	f04f 32ff 	mov.w	r2, #4294967295
 800e332:	601a      	str	r2, [r3, #0]
					break;
 800e334:	e03e      	b.n	800e3b4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e336:	4b31      	ldr	r3, [pc, #196]	@ (800e3fc <xTaskIncrementTick+0x150>)
 800e338:	681b      	ldr	r3, [r3, #0]
 800e33a:	68db      	ldr	r3, [r3, #12]
 800e33c:	68db      	ldr	r3, [r3, #12]
 800e33e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800e340:	68bb      	ldr	r3, [r7, #8]
 800e342:	685b      	ldr	r3, [r3, #4]
 800e344:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800e346:	693a      	ldr	r2, [r7, #16]
 800e348:	687b      	ldr	r3, [r7, #4]
 800e34a:	429a      	cmp	r2, r3
 800e34c:	d203      	bcs.n	800e356 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800e34e:	4a2e      	ldr	r2, [pc, #184]	@ (800e408 <xTaskIncrementTick+0x15c>)
 800e350:	687b      	ldr	r3, [r7, #4]
 800e352:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800e354:	e02e      	b.n	800e3b4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e356:	68bb      	ldr	r3, [r7, #8]
 800e358:	3304      	adds	r3, #4
 800e35a:	4618      	mov	r0, r3
 800e35c:	f7fe ff02 	bl	800d164 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800e360:	68bb      	ldr	r3, [r7, #8]
 800e362:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e364:	2b00      	cmp	r3, #0
 800e366:	d004      	beq.n	800e372 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e368:	68bb      	ldr	r3, [r7, #8]
 800e36a:	3318      	adds	r3, #24
 800e36c:	4618      	mov	r0, r3
 800e36e:	f7fe fef9 	bl	800d164 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800e372:	68bb      	ldr	r3, [r7, #8]
 800e374:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e376:	2201      	movs	r2, #1
 800e378:	409a      	lsls	r2, r3
 800e37a:	4b24      	ldr	r3, [pc, #144]	@ (800e40c <xTaskIncrementTick+0x160>)
 800e37c:	681b      	ldr	r3, [r3, #0]
 800e37e:	4313      	orrs	r3, r2
 800e380:	4a22      	ldr	r2, [pc, #136]	@ (800e40c <xTaskIncrementTick+0x160>)
 800e382:	6013      	str	r3, [r2, #0]
 800e384:	68bb      	ldr	r3, [r7, #8]
 800e386:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e388:	4613      	mov	r3, r2
 800e38a:	009b      	lsls	r3, r3, #2
 800e38c:	4413      	add	r3, r2
 800e38e:	009b      	lsls	r3, r3, #2
 800e390:	4a1f      	ldr	r2, [pc, #124]	@ (800e410 <xTaskIncrementTick+0x164>)
 800e392:	441a      	add	r2, r3
 800e394:	68bb      	ldr	r3, [r7, #8]
 800e396:	3304      	adds	r3, #4
 800e398:	4619      	mov	r1, r3
 800e39a:	4610      	mov	r0, r2
 800e39c:	f7fe fe85 	bl	800d0aa <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e3a0:	68bb      	ldr	r3, [r7, #8]
 800e3a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e3a4:	4b1b      	ldr	r3, [pc, #108]	@ (800e414 <xTaskIncrementTick+0x168>)
 800e3a6:	681b      	ldr	r3, [r3, #0]
 800e3a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e3aa:	429a      	cmp	r2, r3
 800e3ac:	d3b9      	bcc.n	800e322 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800e3ae:	2301      	movs	r3, #1
 800e3b0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e3b2:	e7b6      	b.n	800e322 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800e3b4:	4b17      	ldr	r3, [pc, #92]	@ (800e414 <xTaskIncrementTick+0x168>)
 800e3b6:	681b      	ldr	r3, [r3, #0]
 800e3b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e3ba:	4915      	ldr	r1, [pc, #84]	@ (800e410 <xTaskIncrementTick+0x164>)
 800e3bc:	4613      	mov	r3, r2
 800e3be:	009b      	lsls	r3, r3, #2
 800e3c0:	4413      	add	r3, r2
 800e3c2:	009b      	lsls	r3, r3, #2
 800e3c4:	440b      	add	r3, r1
 800e3c6:	681b      	ldr	r3, [r3, #0]
 800e3c8:	2b01      	cmp	r3, #1
 800e3ca:	d901      	bls.n	800e3d0 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800e3cc:	2301      	movs	r3, #1
 800e3ce:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800e3d0:	4b11      	ldr	r3, [pc, #68]	@ (800e418 <xTaskIncrementTick+0x16c>)
 800e3d2:	681b      	ldr	r3, [r3, #0]
 800e3d4:	2b00      	cmp	r3, #0
 800e3d6:	d007      	beq.n	800e3e8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800e3d8:	2301      	movs	r3, #1
 800e3da:	617b      	str	r3, [r7, #20]
 800e3dc:	e004      	b.n	800e3e8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800e3de:	4b0f      	ldr	r3, [pc, #60]	@ (800e41c <xTaskIncrementTick+0x170>)
 800e3e0:	681b      	ldr	r3, [r3, #0]
 800e3e2:	3301      	adds	r3, #1
 800e3e4:	4a0d      	ldr	r2, [pc, #52]	@ (800e41c <xTaskIncrementTick+0x170>)
 800e3e6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800e3e8:	697b      	ldr	r3, [r7, #20]
}
 800e3ea:	4618      	mov	r0, r3
 800e3ec:	3718      	adds	r7, #24
 800e3ee:	46bd      	mov	sp, r7
 800e3f0:	bd80      	pop	{r7, pc}
 800e3f2:	bf00      	nop
 800e3f4:	200236bc 	.word	0x200236bc
 800e3f8:	20023698 	.word	0x20023698
 800e3fc:	2002364c 	.word	0x2002364c
 800e400:	20023650 	.word	0x20023650
 800e404:	200236ac 	.word	0x200236ac
 800e408:	200236b4 	.word	0x200236b4
 800e40c:	2002369c 	.word	0x2002369c
 800e410:	20023598 	.word	0x20023598
 800e414:	20023594 	.word	0x20023594
 800e418:	200236a8 	.word	0x200236a8
 800e41c:	200236a4 	.word	0x200236a4

0800e420 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800e420:	b480      	push	{r7}
 800e422:	b087      	sub	sp, #28
 800e424:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800e426:	4b27      	ldr	r3, [pc, #156]	@ (800e4c4 <vTaskSwitchContext+0xa4>)
 800e428:	681b      	ldr	r3, [r3, #0]
 800e42a:	2b00      	cmp	r3, #0
 800e42c:	d003      	beq.n	800e436 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800e42e:	4b26      	ldr	r3, [pc, #152]	@ (800e4c8 <vTaskSwitchContext+0xa8>)
 800e430:	2201      	movs	r2, #1
 800e432:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800e434:	e040      	b.n	800e4b8 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 800e436:	4b24      	ldr	r3, [pc, #144]	@ (800e4c8 <vTaskSwitchContext+0xa8>)
 800e438:	2200      	movs	r2, #0
 800e43a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e43c:	4b23      	ldr	r3, [pc, #140]	@ (800e4cc <vTaskSwitchContext+0xac>)
 800e43e:	681b      	ldr	r3, [r3, #0]
 800e440:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800e442:	68fb      	ldr	r3, [r7, #12]
 800e444:	fab3 f383 	clz	r3, r3
 800e448:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800e44a:	7afb      	ldrb	r3, [r7, #11]
 800e44c:	f1c3 031f 	rsb	r3, r3, #31
 800e450:	617b      	str	r3, [r7, #20]
 800e452:	491f      	ldr	r1, [pc, #124]	@ (800e4d0 <vTaskSwitchContext+0xb0>)
 800e454:	697a      	ldr	r2, [r7, #20]
 800e456:	4613      	mov	r3, r2
 800e458:	009b      	lsls	r3, r3, #2
 800e45a:	4413      	add	r3, r2
 800e45c:	009b      	lsls	r3, r3, #2
 800e45e:	440b      	add	r3, r1
 800e460:	681b      	ldr	r3, [r3, #0]
 800e462:	2b00      	cmp	r3, #0
 800e464:	d10b      	bne.n	800e47e <vTaskSwitchContext+0x5e>
	__asm volatile
 800e466:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e46a:	f383 8811 	msr	BASEPRI, r3
 800e46e:	f3bf 8f6f 	isb	sy
 800e472:	f3bf 8f4f 	dsb	sy
 800e476:	607b      	str	r3, [r7, #4]
}
 800e478:	bf00      	nop
 800e47a:	bf00      	nop
 800e47c:	e7fd      	b.n	800e47a <vTaskSwitchContext+0x5a>
 800e47e:	697a      	ldr	r2, [r7, #20]
 800e480:	4613      	mov	r3, r2
 800e482:	009b      	lsls	r3, r3, #2
 800e484:	4413      	add	r3, r2
 800e486:	009b      	lsls	r3, r3, #2
 800e488:	4a11      	ldr	r2, [pc, #68]	@ (800e4d0 <vTaskSwitchContext+0xb0>)
 800e48a:	4413      	add	r3, r2
 800e48c:	613b      	str	r3, [r7, #16]
 800e48e:	693b      	ldr	r3, [r7, #16]
 800e490:	685b      	ldr	r3, [r3, #4]
 800e492:	685a      	ldr	r2, [r3, #4]
 800e494:	693b      	ldr	r3, [r7, #16]
 800e496:	605a      	str	r2, [r3, #4]
 800e498:	693b      	ldr	r3, [r7, #16]
 800e49a:	685a      	ldr	r2, [r3, #4]
 800e49c:	693b      	ldr	r3, [r7, #16]
 800e49e:	3308      	adds	r3, #8
 800e4a0:	429a      	cmp	r2, r3
 800e4a2:	d104      	bne.n	800e4ae <vTaskSwitchContext+0x8e>
 800e4a4:	693b      	ldr	r3, [r7, #16]
 800e4a6:	685b      	ldr	r3, [r3, #4]
 800e4a8:	685a      	ldr	r2, [r3, #4]
 800e4aa:	693b      	ldr	r3, [r7, #16]
 800e4ac:	605a      	str	r2, [r3, #4]
 800e4ae:	693b      	ldr	r3, [r7, #16]
 800e4b0:	685b      	ldr	r3, [r3, #4]
 800e4b2:	68db      	ldr	r3, [r3, #12]
 800e4b4:	4a07      	ldr	r2, [pc, #28]	@ (800e4d4 <vTaskSwitchContext+0xb4>)
 800e4b6:	6013      	str	r3, [r2, #0]
}
 800e4b8:	bf00      	nop
 800e4ba:	371c      	adds	r7, #28
 800e4bc:	46bd      	mov	sp, r7
 800e4be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4c2:	4770      	bx	lr
 800e4c4:	200236bc 	.word	0x200236bc
 800e4c8:	200236a8 	.word	0x200236a8
 800e4cc:	2002369c 	.word	0x2002369c
 800e4d0:	20023598 	.word	0x20023598
 800e4d4:	20023594 	.word	0x20023594

0800e4d8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800e4d8:	b580      	push	{r7, lr}
 800e4da:	b084      	sub	sp, #16
 800e4dc:	af00      	add	r7, sp, #0
 800e4de:	6078      	str	r0, [r7, #4]
 800e4e0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800e4e2:	687b      	ldr	r3, [r7, #4]
 800e4e4:	2b00      	cmp	r3, #0
 800e4e6:	d10b      	bne.n	800e500 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800e4e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e4ec:	f383 8811 	msr	BASEPRI, r3
 800e4f0:	f3bf 8f6f 	isb	sy
 800e4f4:	f3bf 8f4f 	dsb	sy
 800e4f8:	60fb      	str	r3, [r7, #12]
}
 800e4fa:	bf00      	nop
 800e4fc:	bf00      	nop
 800e4fe:	e7fd      	b.n	800e4fc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e500:	4b07      	ldr	r3, [pc, #28]	@ (800e520 <vTaskPlaceOnEventList+0x48>)
 800e502:	681b      	ldr	r3, [r3, #0]
 800e504:	3318      	adds	r3, #24
 800e506:	4619      	mov	r1, r3
 800e508:	6878      	ldr	r0, [r7, #4]
 800e50a:	f7fe fdf2 	bl	800d0f2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800e50e:	2101      	movs	r1, #1
 800e510:	6838      	ldr	r0, [r7, #0]
 800e512:	f000 fa73 	bl	800e9fc <prvAddCurrentTaskToDelayedList>
}
 800e516:	bf00      	nop
 800e518:	3710      	adds	r7, #16
 800e51a:	46bd      	mov	sp, r7
 800e51c:	bd80      	pop	{r7, pc}
 800e51e:	bf00      	nop
 800e520:	20023594 	.word	0x20023594

0800e524 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800e524:	b580      	push	{r7, lr}
 800e526:	b086      	sub	sp, #24
 800e528:	af00      	add	r7, sp, #0
 800e52a:	60f8      	str	r0, [r7, #12]
 800e52c:	60b9      	str	r1, [r7, #8]
 800e52e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800e530:	68fb      	ldr	r3, [r7, #12]
 800e532:	2b00      	cmp	r3, #0
 800e534:	d10b      	bne.n	800e54e <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800e536:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e53a:	f383 8811 	msr	BASEPRI, r3
 800e53e:	f3bf 8f6f 	isb	sy
 800e542:	f3bf 8f4f 	dsb	sy
 800e546:	617b      	str	r3, [r7, #20]
}
 800e548:	bf00      	nop
 800e54a:	bf00      	nop
 800e54c:	e7fd      	b.n	800e54a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e54e:	4b0a      	ldr	r3, [pc, #40]	@ (800e578 <vTaskPlaceOnEventListRestricted+0x54>)
 800e550:	681b      	ldr	r3, [r3, #0]
 800e552:	3318      	adds	r3, #24
 800e554:	4619      	mov	r1, r3
 800e556:	68f8      	ldr	r0, [r7, #12]
 800e558:	f7fe fda7 	bl	800d0aa <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800e55c:	687b      	ldr	r3, [r7, #4]
 800e55e:	2b00      	cmp	r3, #0
 800e560:	d002      	beq.n	800e568 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800e562:	f04f 33ff 	mov.w	r3, #4294967295
 800e566:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800e568:	6879      	ldr	r1, [r7, #4]
 800e56a:	68b8      	ldr	r0, [r7, #8]
 800e56c:	f000 fa46 	bl	800e9fc <prvAddCurrentTaskToDelayedList>
	}
 800e570:	bf00      	nop
 800e572:	3718      	adds	r7, #24
 800e574:	46bd      	mov	sp, r7
 800e576:	bd80      	pop	{r7, pc}
 800e578:	20023594 	.word	0x20023594

0800e57c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800e57c:	b580      	push	{r7, lr}
 800e57e:	b086      	sub	sp, #24
 800e580:	af00      	add	r7, sp, #0
 800e582:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e584:	687b      	ldr	r3, [r7, #4]
 800e586:	68db      	ldr	r3, [r3, #12]
 800e588:	68db      	ldr	r3, [r3, #12]
 800e58a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800e58c:	693b      	ldr	r3, [r7, #16]
 800e58e:	2b00      	cmp	r3, #0
 800e590:	d10b      	bne.n	800e5aa <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800e592:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e596:	f383 8811 	msr	BASEPRI, r3
 800e59a:	f3bf 8f6f 	isb	sy
 800e59e:	f3bf 8f4f 	dsb	sy
 800e5a2:	60fb      	str	r3, [r7, #12]
}
 800e5a4:	bf00      	nop
 800e5a6:	bf00      	nop
 800e5a8:	e7fd      	b.n	800e5a6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800e5aa:	693b      	ldr	r3, [r7, #16]
 800e5ac:	3318      	adds	r3, #24
 800e5ae:	4618      	mov	r0, r3
 800e5b0:	f7fe fdd8 	bl	800d164 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e5b4:	4b1d      	ldr	r3, [pc, #116]	@ (800e62c <xTaskRemoveFromEventList+0xb0>)
 800e5b6:	681b      	ldr	r3, [r3, #0]
 800e5b8:	2b00      	cmp	r3, #0
 800e5ba:	d11c      	bne.n	800e5f6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800e5bc:	693b      	ldr	r3, [r7, #16]
 800e5be:	3304      	adds	r3, #4
 800e5c0:	4618      	mov	r0, r3
 800e5c2:	f7fe fdcf 	bl	800d164 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800e5c6:	693b      	ldr	r3, [r7, #16]
 800e5c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e5ca:	2201      	movs	r2, #1
 800e5cc:	409a      	lsls	r2, r3
 800e5ce:	4b18      	ldr	r3, [pc, #96]	@ (800e630 <xTaskRemoveFromEventList+0xb4>)
 800e5d0:	681b      	ldr	r3, [r3, #0]
 800e5d2:	4313      	orrs	r3, r2
 800e5d4:	4a16      	ldr	r2, [pc, #88]	@ (800e630 <xTaskRemoveFromEventList+0xb4>)
 800e5d6:	6013      	str	r3, [r2, #0]
 800e5d8:	693b      	ldr	r3, [r7, #16]
 800e5da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e5dc:	4613      	mov	r3, r2
 800e5de:	009b      	lsls	r3, r3, #2
 800e5e0:	4413      	add	r3, r2
 800e5e2:	009b      	lsls	r3, r3, #2
 800e5e4:	4a13      	ldr	r2, [pc, #76]	@ (800e634 <xTaskRemoveFromEventList+0xb8>)
 800e5e6:	441a      	add	r2, r3
 800e5e8:	693b      	ldr	r3, [r7, #16]
 800e5ea:	3304      	adds	r3, #4
 800e5ec:	4619      	mov	r1, r3
 800e5ee:	4610      	mov	r0, r2
 800e5f0:	f7fe fd5b 	bl	800d0aa <vListInsertEnd>
 800e5f4:	e005      	b.n	800e602 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800e5f6:	693b      	ldr	r3, [r7, #16]
 800e5f8:	3318      	adds	r3, #24
 800e5fa:	4619      	mov	r1, r3
 800e5fc:	480e      	ldr	r0, [pc, #56]	@ (800e638 <xTaskRemoveFromEventList+0xbc>)
 800e5fe:	f7fe fd54 	bl	800d0aa <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e602:	693b      	ldr	r3, [r7, #16]
 800e604:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e606:	4b0d      	ldr	r3, [pc, #52]	@ (800e63c <xTaskRemoveFromEventList+0xc0>)
 800e608:	681b      	ldr	r3, [r3, #0]
 800e60a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e60c:	429a      	cmp	r2, r3
 800e60e:	d905      	bls.n	800e61c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800e610:	2301      	movs	r3, #1
 800e612:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800e614:	4b0a      	ldr	r3, [pc, #40]	@ (800e640 <xTaskRemoveFromEventList+0xc4>)
 800e616:	2201      	movs	r2, #1
 800e618:	601a      	str	r2, [r3, #0]
 800e61a:	e001      	b.n	800e620 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800e61c:	2300      	movs	r3, #0
 800e61e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800e620:	697b      	ldr	r3, [r7, #20]
}
 800e622:	4618      	mov	r0, r3
 800e624:	3718      	adds	r7, #24
 800e626:	46bd      	mov	sp, r7
 800e628:	bd80      	pop	{r7, pc}
 800e62a:	bf00      	nop
 800e62c:	200236bc 	.word	0x200236bc
 800e630:	2002369c 	.word	0x2002369c
 800e634:	20023598 	.word	0x20023598
 800e638:	20023654 	.word	0x20023654
 800e63c:	20023594 	.word	0x20023594
 800e640:	200236a8 	.word	0x200236a8

0800e644 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800e644:	b480      	push	{r7}
 800e646:	b083      	sub	sp, #12
 800e648:	af00      	add	r7, sp, #0
 800e64a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800e64c:	4b06      	ldr	r3, [pc, #24]	@ (800e668 <vTaskInternalSetTimeOutState+0x24>)
 800e64e:	681a      	ldr	r2, [r3, #0]
 800e650:	687b      	ldr	r3, [r7, #4]
 800e652:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800e654:	4b05      	ldr	r3, [pc, #20]	@ (800e66c <vTaskInternalSetTimeOutState+0x28>)
 800e656:	681a      	ldr	r2, [r3, #0]
 800e658:	687b      	ldr	r3, [r7, #4]
 800e65a:	605a      	str	r2, [r3, #4]
}
 800e65c:	bf00      	nop
 800e65e:	370c      	adds	r7, #12
 800e660:	46bd      	mov	sp, r7
 800e662:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e666:	4770      	bx	lr
 800e668:	200236ac 	.word	0x200236ac
 800e66c:	20023698 	.word	0x20023698

0800e670 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800e670:	b580      	push	{r7, lr}
 800e672:	b088      	sub	sp, #32
 800e674:	af00      	add	r7, sp, #0
 800e676:	6078      	str	r0, [r7, #4]
 800e678:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800e67a:	687b      	ldr	r3, [r7, #4]
 800e67c:	2b00      	cmp	r3, #0
 800e67e:	d10b      	bne.n	800e698 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800e680:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e684:	f383 8811 	msr	BASEPRI, r3
 800e688:	f3bf 8f6f 	isb	sy
 800e68c:	f3bf 8f4f 	dsb	sy
 800e690:	613b      	str	r3, [r7, #16]
}
 800e692:	bf00      	nop
 800e694:	bf00      	nop
 800e696:	e7fd      	b.n	800e694 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800e698:	683b      	ldr	r3, [r7, #0]
 800e69a:	2b00      	cmp	r3, #0
 800e69c:	d10b      	bne.n	800e6b6 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800e69e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e6a2:	f383 8811 	msr	BASEPRI, r3
 800e6a6:	f3bf 8f6f 	isb	sy
 800e6aa:	f3bf 8f4f 	dsb	sy
 800e6ae:	60fb      	str	r3, [r7, #12]
}
 800e6b0:	bf00      	nop
 800e6b2:	bf00      	nop
 800e6b4:	e7fd      	b.n	800e6b2 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800e6b6:	f000 fe6f 	bl	800f398 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800e6ba:	4b1d      	ldr	r3, [pc, #116]	@ (800e730 <xTaskCheckForTimeOut+0xc0>)
 800e6bc:	681b      	ldr	r3, [r3, #0]
 800e6be:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800e6c0:	687b      	ldr	r3, [r7, #4]
 800e6c2:	685b      	ldr	r3, [r3, #4]
 800e6c4:	69ba      	ldr	r2, [r7, #24]
 800e6c6:	1ad3      	subs	r3, r2, r3
 800e6c8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800e6ca:	683b      	ldr	r3, [r7, #0]
 800e6cc:	681b      	ldr	r3, [r3, #0]
 800e6ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e6d2:	d102      	bne.n	800e6da <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800e6d4:	2300      	movs	r3, #0
 800e6d6:	61fb      	str	r3, [r7, #28]
 800e6d8:	e023      	b.n	800e722 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800e6da:	687b      	ldr	r3, [r7, #4]
 800e6dc:	681a      	ldr	r2, [r3, #0]
 800e6de:	4b15      	ldr	r3, [pc, #84]	@ (800e734 <xTaskCheckForTimeOut+0xc4>)
 800e6e0:	681b      	ldr	r3, [r3, #0]
 800e6e2:	429a      	cmp	r2, r3
 800e6e4:	d007      	beq.n	800e6f6 <xTaskCheckForTimeOut+0x86>
 800e6e6:	687b      	ldr	r3, [r7, #4]
 800e6e8:	685b      	ldr	r3, [r3, #4]
 800e6ea:	69ba      	ldr	r2, [r7, #24]
 800e6ec:	429a      	cmp	r2, r3
 800e6ee:	d302      	bcc.n	800e6f6 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800e6f0:	2301      	movs	r3, #1
 800e6f2:	61fb      	str	r3, [r7, #28]
 800e6f4:	e015      	b.n	800e722 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800e6f6:	683b      	ldr	r3, [r7, #0]
 800e6f8:	681b      	ldr	r3, [r3, #0]
 800e6fa:	697a      	ldr	r2, [r7, #20]
 800e6fc:	429a      	cmp	r2, r3
 800e6fe:	d20b      	bcs.n	800e718 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800e700:	683b      	ldr	r3, [r7, #0]
 800e702:	681a      	ldr	r2, [r3, #0]
 800e704:	697b      	ldr	r3, [r7, #20]
 800e706:	1ad2      	subs	r2, r2, r3
 800e708:	683b      	ldr	r3, [r7, #0]
 800e70a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800e70c:	6878      	ldr	r0, [r7, #4]
 800e70e:	f7ff ff99 	bl	800e644 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800e712:	2300      	movs	r3, #0
 800e714:	61fb      	str	r3, [r7, #28]
 800e716:	e004      	b.n	800e722 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800e718:	683b      	ldr	r3, [r7, #0]
 800e71a:	2200      	movs	r2, #0
 800e71c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800e71e:	2301      	movs	r3, #1
 800e720:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800e722:	f000 fe6b 	bl	800f3fc <vPortExitCritical>

	return xReturn;
 800e726:	69fb      	ldr	r3, [r7, #28]
}
 800e728:	4618      	mov	r0, r3
 800e72a:	3720      	adds	r7, #32
 800e72c:	46bd      	mov	sp, r7
 800e72e:	bd80      	pop	{r7, pc}
 800e730:	20023698 	.word	0x20023698
 800e734:	200236ac 	.word	0x200236ac

0800e738 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800e738:	b480      	push	{r7}
 800e73a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800e73c:	4b03      	ldr	r3, [pc, #12]	@ (800e74c <vTaskMissedYield+0x14>)
 800e73e:	2201      	movs	r2, #1
 800e740:	601a      	str	r2, [r3, #0]
}
 800e742:	bf00      	nop
 800e744:	46bd      	mov	sp, r7
 800e746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e74a:	4770      	bx	lr
 800e74c:	200236a8 	.word	0x200236a8

0800e750 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800e750:	b580      	push	{r7, lr}
 800e752:	b082      	sub	sp, #8
 800e754:	af00      	add	r7, sp, #0
 800e756:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800e758:	f000 f852 	bl	800e800 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800e75c:	4b06      	ldr	r3, [pc, #24]	@ (800e778 <prvIdleTask+0x28>)
 800e75e:	681b      	ldr	r3, [r3, #0]
 800e760:	2b01      	cmp	r3, #1
 800e762:	d9f9      	bls.n	800e758 <prvIdleTask+0x8>
			{
				taskYIELD();
 800e764:	4b05      	ldr	r3, [pc, #20]	@ (800e77c <prvIdleTask+0x2c>)
 800e766:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e76a:	601a      	str	r2, [r3, #0]
 800e76c:	f3bf 8f4f 	dsb	sy
 800e770:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800e774:	e7f0      	b.n	800e758 <prvIdleTask+0x8>
 800e776:	bf00      	nop
 800e778:	20023598 	.word	0x20023598
 800e77c:	e000ed04 	.word	0xe000ed04

0800e780 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800e780:	b580      	push	{r7, lr}
 800e782:	b082      	sub	sp, #8
 800e784:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e786:	2300      	movs	r3, #0
 800e788:	607b      	str	r3, [r7, #4]
 800e78a:	e00c      	b.n	800e7a6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800e78c:	687a      	ldr	r2, [r7, #4]
 800e78e:	4613      	mov	r3, r2
 800e790:	009b      	lsls	r3, r3, #2
 800e792:	4413      	add	r3, r2
 800e794:	009b      	lsls	r3, r3, #2
 800e796:	4a12      	ldr	r2, [pc, #72]	@ (800e7e0 <prvInitialiseTaskLists+0x60>)
 800e798:	4413      	add	r3, r2
 800e79a:	4618      	mov	r0, r3
 800e79c:	f7fe fc58 	bl	800d050 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e7a0:	687b      	ldr	r3, [r7, #4]
 800e7a2:	3301      	adds	r3, #1
 800e7a4:	607b      	str	r3, [r7, #4]
 800e7a6:	687b      	ldr	r3, [r7, #4]
 800e7a8:	2b06      	cmp	r3, #6
 800e7aa:	d9ef      	bls.n	800e78c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800e7ac:	480d      	ldr	r0, [pc, #52]	@ (800e7e4 <prvInitialiseTaskLists+0x64>)
 800e7ae:	f7fe fc4f 	bl	800d050 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800e7b2:	480d      	ldr	r0, [pc, #52]	@ (800e7e8 <prvInitialiseTaskLists+0x68>)
 800e7b4:	f7fe fc4c 	bl	800d050 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800e7b8:	480c      	ldr	r0, [pc, #48]	@ (800e7ec <prvInitialiseTaskLists+0x6c>)
 800e7ba:	f7fe fc49 	bl	800d050 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800e7be:	480c      	ldr	r0, [pc, #48]	@ (800e7f0 <prvInitialiseTaskLists+0x70>)
 800e7c0:	f7fe fc46 	bl	800d050 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800e7c4:	480b      	ldr	r0, [pc, #44]	@ (800e7f4 <prvInitialiseTaskLists+0x74>)
 800e7c6:	f7fe fc43 	bl	800d050 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800e7ca:	4b0b      	ldr	r3, [pc, #44]	@ (800e7f8 <prvInitialiseTaskLists+0x78>)
 800e7cc:	4a05      	ldr	r2, [pc, #20]	@ (800e7e4 <prvInitialiseTaskLists+0x64>)
 800e7ce:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800e7d0:	4b0a      	ldr	r3, [pc, #40]	@ (800e7fc <prvInitialiseTaskLists+0x7c>)
 800e7d2:	4a05      	ldr	r2, [pc, #20]	@ (800e7e8 <prvInitialiseTaskLists+0x68>)
 800e7d4:	601a      	str	r2, [r3, #0]
}
 800e7d6:	bf00      	nop
 800e7d8:	3708      	adds	r7, #8
 800e7da:	46bd      	mov	sp, r7
 800e7dc:	bd80      	pop	{r7, pc}
 800e7de:	bf00      	nop
 800e7e0:	20023598 	.word	0x20023598
 800e7e4:	20023624 	.word	0x20023624
 800e7e8:	20023638 	.word	0x20023638
 800e7ec:	20023654 	.word	0x20023654
 800e7f0:	20023668 	.word	0x20023668
 800e7f4:	20023680 	.word	0x20023680
 800e7f8:	2002364c 	.word	0x2002364c
 800e7fc:	20023650 	.word	0x20023650

0800e800 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800e800:	b580      	push	{r7, lr}
 800e802:	b082      	sub	sp, #8
 800e804:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e806:	e019      	b.n	800e83c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800e808:	f000 fdc6 	bl	800f398 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e80c:	4b10      	ldr	r3, [pc, #64]	@ (800e850 <prvCheckTasksWaitingTermination+0x50>)
 800e80e:	68db      	ldr	r3, [r3, #12]
 800e810:	68db      	ldr	r3, [r3, #12]
 800e812:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e814:	687b      	ldr	r3, [r7, #4]
 800e816:	3304      	adds	r3, #4
 800e818:	4618      	mov	r0, r3
 800e81a:	f7fe fca3 	bl	800d164 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800e81e:	4b0d      	ldr	r3, [pc, #52]	@ (800e854 <prvCheckTasksWaitingTermination+0x54>)
 800e820:	681b      	ldr	r3, [r3, #0]
 800e822:	3b01      	subs	r3, #1
 800e824:	4a0b      	ldr	r2, [pc, #44]	@ (800e854 <prvCheckTasksWaitingTermination+0x54>)
 800e826:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800e828:	4b0b      	ldr	r3, [pc, #44]	@ (800e858 <prvCheckTasksWaitingTermination+0x58>)
 800e82a:	681b      	ldr	r3, [r3, #0]
 800e82c:	3b01      	subs	r3, #1
 800e82e:	4a0a      	ldr	r2, [pc, #40]	@ (800e858 <prvCheckTasksWaitingTermination+0x58>)
 800e830:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800e832:	f000 fde3 	bl	800f3fc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800e836:	6878      	ldr	r0, [r7, #4]
 800e838:	f000 f810 	bl	800e85c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e83c:	4b06      	ldr	r3, [pc, #24]	@ (800e858 <prvCheckTasksWaitingTermination+0x58>)
 800e83e:	681b      	ldr	r3, [r3, #0]
 800e840:	2b00      	cmp	r3, #0
 800e842:	d1e1      	bne.n	800e808 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800e844:	bf00      	nop
 800e846:	bf00      	nop
 800e848:	3708      	adds	r7, #8
 800e84a:	46bd      	mov	sp, r7
 800e84c:	bd80      	pop	{r7, pc}
 800e84e:	bf00      	nop
 800e850:	20023668 	.word	0x20023668
 800e854:	20023694 	.word	0x20023694
 800e858:	2002367c 	.word	0x2002367c

0800e85c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800e85c:	b480      	push	{r7}
 800e85e:	b083      	sub	sp, #12
 800e860:	af00      	add	r7, sp, #0
 800e862:	6078      	str	r0, [r7, #4]
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800e864:	bf00      	nop
 800e866:	370c      	adds	r7, #12
 800e868:	46bd      	mov	sp, r7
 800e86a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e86e:	4770      	bx	lr

0800e870 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800e870:	b480      	push	{r7}
 800e872:	b083      	sub	sp, #12
 800e874:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e876:	4b0c      	ldr	r3, [pc, #48]	@ (800e8a8 <prvResetNextTaskUnblockTime+0x38>)
 800e878:	681b      	ldr	r3, [r3, #0]
 800e87a:	681b      	ldr	r3, [r3, #0]
 800e87c:	2b00      	cmp	r3, #0
 800e87e:	d104      	bne.n	800e88a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800e880:	4b0a      	ldr	r3, [pc, #40]	@ (800e8ac <prvResetNextTaskUnblockTime+0x3c>)
 800e882:	f04f 32ff 	mov.w	r2, #4294967295
 800e886:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800e888:	e008      	b.n	800e89c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e88a:	4b07      	ldr	r3, [pc, #28]	@ (800e8a8 <prvResetNextTaskUnblockTime+0x38>)
 800e88c:	681b      	ldr	r3, [r3, #0]
 800e88e:	68db      	ldr	r3, [r3, #12]
 800e890:	68db      	ldr	r3, [r3, #12]
 800e892:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800e894:	687b      	ldr	r3, [r7, #4]
 800e896:	685b      	ldr	r3, [r3, #4]
 800e898:	4a04      	ldr	r2, [pc, #16]	@ (800e8ac <prvResetNextTaskUnblockTime+0x3c>)
 800e89a:	6013      	str	r3, [r2, #0]
}
 800e89c:	bf00      	nop
 800e89e:	370c      	adds	r7, #12
 800e8a0:	46bd      	mov	sp, r7
 800e8a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8a6:	4770      	bx	lr
 800e8a8:	2002364c 	.word	0x2002364c
 800e8ac:	200236b4 	.word	0x200236b4

0800e8b0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800e8b0:	b480      	push	{r7}
 800e8b2:	b083      	sub	sp, #12
 800e8b4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800e8b6:	4b0b      	ldr	r3, [pc, #44]	@ (800e8e4 <xTaskGetSchedulerState+0x34>)
 800e8b8:	681b      	ldr	r3, [r3, #0]
 800e8ba:	2b00      	cmp	r3, #0
 800e8bc:	d102      	bne.n	800e8c4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800e8be:	2301      	movs	r3, #1
 800e8c0:	607b      	str	r3, [r7, #4]
 800e8c2:	e008      	b.n	800e8d6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e8c4:	4b08      	ldr	r3, [pc, #32]	@ (800e8e8 <xTaskGetSchedulerState+0x38>)
 800e8c6:	681b      	ldr	r3, [r3, #0]
 800e8c8:	2b00      	cmp	r3, #0
 800e8ca:	d102      	bne.n	800e8d2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800e8cc:	2302      	movs	r3, #2
 800e8ce:	607b      	str	r3, [r7, #4]
 800e8d0:	e001      	b.n	800e8d6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800e8d2:	2300      	movs	r3, #0
 800e8d4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800e8d6:	687b      	ldr	r3, [r7, #4]
	}
 800e8d8:	4618      	mov	r0, r3
 800e8da:	370c      	adds	r7, #12
 800e8dc:	46bd      	mov	sp, r7
 800e8de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8e2:	4770      	bx	lr
 800e8e4:	200236a0 	.word	0x200236a0
 800e8e8:	200236bc 	.word	0x200236bc

0800e8ec <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800e8ec:	b580      	push	{r7, lr}
 800e8ee:	b086      	sub	sp, #24
 800e8f0:	af00      	add	r7, sp, #0
 800e8f2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800e8f4:	687b      	ldr	r3, [r7, #4]
 800e8f6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800e8f8:	2300      	movs	r3, #0
 800e8fa:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e8fc:	687b      	ldr	r3, [r7, #4]
 800e8fe:	2b00      	cmp	r3, #0
 800e900:	d070      	beq.n	800e9e4 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800e902:	4b3b      	ldr	r3, [pc, #236]	@ (800e9f0 <xTaskPriorityDisinherit+0x104>)
 800e904:	681b      	ldr	r3, [r3, #0]
 800e906:	693a      	ldr	r2, [r7, #16]
 800e908:	429a      	cmp	r2, r3
 800e90a:	d00b      	beq.n	800e924 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800e90c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e910:	f383 8811 	msr	BASEPRI, r3
 800e914:	f3bf 8f6f 	isb	sy
 800e918:	f3bf 8f4f 	dsb	sy
 800e91c:	60fb      	str	r3, [r7, #12]
}
 800e91e:	bf00      	nop
 800e920:	bf00      	nop
 800e922:	e7fd      	b.n	800e920 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800e924:	693b      	ldr	r3, [r7, #16]
 800e926:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800e928:	2b00      	cmp	r3, #0
 800e92a:	d10b      	bne.n	800e944 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800e92c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e930:	f383 8811 	msr	BASEPRI, r3
 800e934:	f3bf 8f6f 	isb	sy
 800e938:	f3bf 8f4f 	dsb	sy
 800e93c:	60bb      	str	r3, [r7, #8]
}
 800e93e:	bf00      	nop
 800e940:	bf00      	nop
 800e942:	e7fd      	b.n	800e940 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800e944:	693b      	ldr	r3, [r7, #16]
 800e946:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800e948:	1e5a      	subs	r2, r3, #1
 800e94a:	693b      	ldr	r3, [r7, #16]
 800e94c:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800e94e:	693b      	ldr	r3, [r7, #16]
 800e950:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e952:	693b      	ldr	r3, [r7, #16]
 800e954:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e956:	429a      	cmp	r2, r3
 800e958:	d044      	beq.n	800e9e4 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800e95a:	693b      	ldr	r3, [r7, #16]
 800e95c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800e95e:	2b00      	cmp	r3, #0
 800e960:	d140      	bne.n	800e9e4 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e962:	693b      	ldr	r3, [r7, #16]
 800e964:	3304      	adds	r3, #4
 800e966:	4618      	mov	r0, r3
 800e968:	f7fe fbfc 	bl	800d164 <uxListRemove>
 800e96c:	4603      	mov	r3, r0
 800e96e:	2b00      	cmp	r3, #0
 800e970:	d115      	bne.n	800e99e <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800e972:	693b      	ldr	r3, [r7, #16]
 800e974:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e976:	491f      	ldr	r1, [pc, #124]	@ (800e9f4 <xTaskPriorityDisinherit+0x108>)
 800e978:	4613      	mov	r3, r2
 800e97a:	009b      	lsls	r3, r3, #2
 800e97c:	4413      	add	r3, r2
 800e97e:	009b      	lsls	r3, r3, #2
 800e980:	440b      	add	r3, r1
 800e982:	681b      	ldr	r3, [r3, #0]
 800e984:	2b00      	cmp	r3, #0
 800e986:	d10a      	bne.n	800e99e <xTaskPriorityDisinherit+0xb2>
 800e988:	693b      	ldr	r3, [r7, #16]
 800e98a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e98c:	2201      	movs	r2, #1
 800e98e:	fa02 f303 	lsl.w	r3, r2, r3
 800e992:	43da      	mvns	r2, r3
 800e994:	4b18      	ldr	r3, [pc, #96]	@ (800e9f8 <xTaskPriorityDisinherit+0x10c>)
 800e996:	681b      	ldr	r3, [r3, #0]
 800e998:	4013      	ands	r3, r2
 800e99a:	4a17      	ldr	r2, [pc, #92]	@ (800e9f8 <xTaskPriorityDisinherit+0x10c>)
 800e99c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800e99e:	693b      	ldr	r3, [r7, #16]
 800e9a0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800e9a2:	693b      	ldr	r3, [r7, #16]
 800e9a4:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e9a6:	693b      	ldr	r3, [r7, #16]
 800e9a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e9aa:	f1c3 0207 	rsb	r2, r3, #7
 800e9ae:	693b      	ldr	r3, [r7, #16]
 800e9b0:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800e9b2:	693b      	ldr	r3, [r7, #16]
 800e9b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e9b6:	2201      	movs	r2, #1
 800e9b8:	409a      	lsls	r2, r3
 800e9ba:	4b0f      	ldr	r3, [pc, #60]	@ (800e9f8 <xTaskPriorityDisinherit+0x10c>)
 800e9bc:	681b      	ldr	r3, [r3, #0]
 800e9be:	4313      	orrs	r3, r2
 800e9c0:	4a0d      	ldr	r2, [pc, #52]	@ (800e9f8 <xTaskPriorityDisinherit+0x10c>)
 800e9c2:	6013      	str	r3, [r2, #0]
 800e9c4:	693b      	ldr	r3, [r7, #16]
 800e9c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e9c8:	4613      	mov	r3, r2
 800e9ca:	009b      	lsls	r3, r3, #2
 800e9cc:	4413      	add	r3, r2
 800e9ce:	009b      	lsls	r3, r3, #2
 800e9d0:	4a08      	ldr	r2, [pc, #32]	@ (800e9f4 <xTaskPriorityDisinherit+0x108>)
 800e9d2:	441a      	add	r2, r3
 800e9d4:	693b      	ldr	r3, [r7, #16]
 800e9d6:	3304      	adds	r3, #4
 800e9d8:	4619      	mov	r1, r3
 800e9da:	4610      	mov	r0, r2
 800e9dc:	f7fe fb65 	bl	800d0aa <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800e9e0:	2301      	movs	r3, #1
 800e9e2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e9e4:	697b      	ldr	r3, [r7, #20]
	}
 800e9e6:	4618      	mov	r0, r3
 800e9e8:	3718      	adds	r7, #24
 800e9ea:	46bd      	mov	sp, r7
 800e9ec:	bd80      	pop	{r7, pc}
 800e9ee:	bf00      	nop
 800e9f0:	20023594 	.word	0x20023594
 800e9f4:	20023598 	.word	0x20023598
 800e9f8:	2002369c 	.word	0x2002369c

0800e9fc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800e9fc:	b580      	push	{r7, lr}
 800e9fe:	b084      	sub	sp, #16
 800ea00:	af00      	add	r7, sp, #0
 800ea02:	6078      	str	r0, [r7, #4]
 800ea04:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800ea06:	4b29      	ldr	r3, [pc, #164]	@ (800eaac <prvAddCurrentTaskToDelayedList+0xb0>)
 800ea08:	681b      	ldr	r3, [r3, #0]
 800ea0a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ea0c:	4b28      	ldr	r3, [pc, #160]	@ (800eab0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ea0e:	681b      	ldr	r3, [r3, #0]
 800ea10:	3304      	adds	r3, #4
 800ea12:	4618      	mov	r0, r3
 800ea14:	f7fe fba6 	bl	800d164 <uxListRemove>
 800ea18:	4603      	mov	r3, r0
 800ea1a:	2b00      	cmp	r3, #0
 800ea1c:	d10b      	bne.n	800ea36 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800ea1e:	4b24      	ldr	r3, [pc, #144]	@ (800eab0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ea20:	681b      	ldr	r3, [r3, #0]
 800ea22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ea24:	2201      	movs	r2, #1
 800ea26:	fa02 f303 	lsl.w	r3, r2, r3
 800ea2a:	43da      	mvns	r2, r3
 800ea2c:	4b21      	ldr	r3, [pc, #132]	@ (800eab4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800ea2e:	681b      	ldr	r3, [r3, #0]
 800ea30:	4013      	ands	r3, r2
 800ea32:	4a20      	ldr	r2, [pc, #128]	@ (800eab4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800ea34:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800ea36:	687b      	ldr	r3, [r7, #4]
 800ea38:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ea3c:	d10a      	bne.n	800ea54 <prvAddCurrentTaskToDelayedList+0x58>
 800ea3e:	683b      	ldr	r3, [r7, #0]
 800ea40:	2b00      	cmp	r3, #0
 800ea42:	d007      	beq.n	800ea54 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ea44:	4b1a      	ldr	r3, [pc, #104]	@ (800eab0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ea46:	681b      	ldr	r3, [r3, #0]
 800ea48:	3304      	adds	r3, #4
 800ea4a:	4619      	mov	r1, r3
 800ea4c:	481a      	ldr	r0, [pc, #104]	@ (800eab8 <prvAddCurrentTaskToDelayedList+0xbc>)
 800ea4e:	f7fe fb2c 	bl	800d0aa <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800ea52:	e026      	b.n	800eaa2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800ea54:	68fa      	ldr	r2, [r7, #12]
 800ea56:	687b      	ldr	r3, [r7, #4]
 800ea58:	4413      	add	r3, r2
 800ea5a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800ea5c:	4b14      	ldr	r3, [pc, #80]	@ (800eab0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ea5e:	681b      	ldr	r3, [r3, #0]
 800ea60:	68ba      	ldr	r2, [r7, #8]
 800ea62:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800ea64:	68ba      	ldr	r2, [r7, #8]
 800ea66:	68fb      	ldr	r3, [r7, #12]
 800ea68:	429a      	cmp	r2, r3
 800ea6a:	d209      	bcs.n	800ea80 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ea6c:	4b13      	ldr	r3, [pc, #76]	@ (800eabc <prvAddCurrentTaskToDelayedList+0xc0>)
 800ea6e:	681a      	ldr	r2, [r3, #0]
 800ea70:	4b0f      	ldr	r3, [pc, #60]	@ (800eab0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ea72:	681b      	ldr	r3, [r3, #0]
 800ea74:	3304      	adds	r3, #4
 800ea76:	4619      	mov	r1, r3
 800ea78:	4610      	mov	r0, r2
 800ea7a:	f7fe fb3a 	bl	800d0f2 <vListInsert>
}
 800ea7e:	e010      	b.n	800eaa2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ea80:	4b0f      	ldr	r3, [pc, #60]	@ (800eac0 <prvAddCurrentTaskToDelayedList+0xc4>)
 800ea82:	681a      	ldr	r2, [r3, #0]
 800ea84:	4b0a      	ldr	r3, [pc, #40]	@ (800eab0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ea86:	681b      	ldr	r3, [r3, #0]
 800ea88:	3304      	adds	r3, #4
 800ea8a:	4619      	mov	r1, r3
 800ea8c:	4610      	mov	r0, r2
 800ea8e:	f7fe fb30 	bl	800d0f2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800ea92:	4b0c      	ldr	r3, [pc, #48]	@ (800eac4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800ea94:	681b      	ldr	r3, [r3, #0]
 800ea96:	68ba      	ldr	r2, [r7, #8]
 800ea98:	429a      	cmp	r2, r3
 800ea9a:	d202      	bcs.n	800eaa2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800ea9c:	4a09      	ldr	r2, [pc, #36]	@ (800eac4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800ea9e:	68bb      	ldr	r3, [r7, #8]
 800eaa0:	6013      	str	r3, [r2, #0]
}
 800eaa2:	bf00      	nop
 800eaa4:	3710      	adds	r7, #16
 800eaa6:	46bd      	mov	sp, r7
 800eaa8:	bd80      	pop	{r7, pc}
 800eaaa:	bf00      	nop
 800eaac:	20023698 	.word	0x20023698
 800eab0:	20023594 	.word	0x20023594
 800eab4:	2002369c 	.word	0x2002369c
 800eab8:	20023680 	.word	0x20023680
 800eabc:	20023650 	.word	0x20023650
 800eac0:	2002364c 	.word	0x2002364c
 800eac4:	200236b4 	.word	0x200236b4

0800eac8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800eac8:	b580      	push	{r7, lr}
 800eaca:	b08a      	sub	sp, #40	@ 0x28
 800eacc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800eace:	2300      	movs	r3, #0
 800ead0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800ead2:	f000 faed 	bl	800f0b0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800ead6:	4b1d      	ldr	r3, [pc, #116]	@ (800eb4c <xTimerCreateTimerTask+0x84>)
 800ead8:	681b      	ldr	r3, [r3, #0]
 800eada:	2b00      	cmp	r3, #0
 800eadc:	d021      	beq.n	800eb22 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800eade:	2300      	movs	r3, #0
 800eae0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800eae2:	2300      	movs	r3, #0
 800eae4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800eae6:	1d3a      	adds	r2, r7, #4
 800eae8:	f107 0108 	add.w	r1, r7, #8
 800eaec:	f107 030c 	add.w	r3, r7, #12
 800eaf0:	4618      	mov	r0, r3
 800eaf2:	f7f4 fc15 	bl	8003320 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800eaf6:	6879      	ldr	r1, [r7, #4]
 800eaf8:	68bb      	ldr	r3, [r7, #8]
 800eafa:	68fa      	ldr	r2, [r7, #12]
 800eafc:	9202      	str	r2, [sp, #8]
 800eafe:	9301      	str	r3, [sp, #4]
 800eb00:	2302      	movs	r3, #2
 800eb02:	9300      	str	r3, [sp, #0]
 800eb04:	2300      	movs	r3, #0
 800eb06:	460a      	mov	r2, r1
 800eb08:	4911      	ldr	r1, [pc, #68]	@ (800eb50 <xTimerCreateTimerTask+0x88>)
 800eb0a:	4812      	ldr	r0, [pc, #72]	@ (800eb54 <xTimerCreateTimerTask+0x8c>)
 800eb0c:	f7ff f926 	bl	800dd5c <xTaskCreateStatic>
 800eb10:	4603      	mov	r3, r0
 800eb12:	4a11      	ldr	r2, [pc, #68]	@ (800eb58 <xTimerCreateTimerTask+0x90>)
 800eb14:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800eb16:	4b10      	ldr	r3, [pc, #64]	@ (800eb58 <xTimerCreateTimerTask+0x90>)
 800eb18:	681b      	ldr	r3, [r3, #0]
 800eb1a:	2b00      	cmp	r3, #0
 800eb1c:	d001      	beq.n	800eb22 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800eb1e:	2301      	movs	r3, #1
 800eb20:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800eb22:	697b      	ldr	r3, [r7, #20]
 800eb24:	2b00      	cmp	r3, #0
 800eb26:	d10b      	bne.n	800eb40 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800eb28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eb2c:	f383 8811 	msr	BASEPRI, r3
 800eb30:	f3bf 8f6f 	isb	sy
 800eb34:	f3bf 8f4f 	dsb	sy
 800eb38:	613b      	str	r3, [r7, #16]
}
 800eb3a:	bf00      	nop
 800eb3c:	bf00      	nop
 800eb3e:	e7fd      	b.n	800eb3c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800eb40:	697b      	ldr	r3, [r7, #20]
}
 800eb42:	4618      	mov	r0, r3
 800eb44:	3718      	adds	r7, #24
 800eb46:	46bd      	mov	sp, r7
 800eb48:	bd80      	pop	{r7, pc}
 800eb4a:	bf00      	nop
 800eb4c:	200236f0 	.word	0x200236f0
 800eb50:	080127d4 	.word	0x080127d4
 800eb54:	0800ec95 	.word	0x0800ec95
 800eb58:	200236f4 	.word	0x200236f4

0800eb5c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800eb5c:	b580      	push	{r7, lr}
 800eb5e:	b08a      	sub	sp, #40	@ 0x28
 800eb60:	af00      	add	r7, sp, #0
 800eb62:	60f8      	str	r0, [r7, #12]
 800eb64:	60b9      	str	r1, [r7, #8]
 800eb66:	607a      	str	r2, [r7, #4]
 800eb68:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800eb6a:	2300      	movs	r3, #0
 800eb6c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800eb6e:	68fb      	ldr	r3, [r7, #12]
 800eb70:	2b00      	cmp	r3, #0
 800eb72:	d10b      	bne.n	800eb8c <xTimerGenericCommand+0x30>
	__asm volatile
 800eb74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eb78:	f383 8811 	msr	BASEPRI, r3
 800eb7c:	f3bf 8f6f 	isb	sy
 800eb80:	f3bf 8f4f 	dsb	sy
 800eb84:	623b      	str	r3, [r7, #32]
}
 800eb86:	bf00      	nop
 800eb88:	bf00      	nop
 800eb8a:	e7fd      	b.n	800eb88 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800eb8c:	4b19      	ldr	r3, [pc, #100]	@ (800ebf4 <xTimerGenericCommand+0x98>)
 800eb8e:	681b      	ldr	r3, [r3, #0]
 800eb90:	2b00      	cmp	r3, #0
 800eb92:	d02a      	beq.n	800ebea <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800eb94:	68bb      	ldr	r3, [r7, #8]
 800eb96:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800eb98:	687b      	ldr	r3, [r7, #4]
 800eb9a:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800eb9c:	68fb      	ldr	r3, [r7, #12]
 800eb9e:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800eba0:	68bb      	ldr	r3, [r7, #8]
 800eba2:	2b05      	cmp	r3, #5
 800eba4:	dc18      	bgt.n	800ebd8 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800eba6:	f7ff fe83 	bl	800e8b0 <xTaskGetSchedulerState>
 800ebaa:	4603      	mov	r3, r0
 800ebac:	2b02      	cmp	r3, #2
 800ebae:	d109      	bne.n	800ebc4 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800ebb0:	4b10      	ldr	r3, [pc, #64]	@ (800ebf4 <xTimerGenericCommand+0x98>)
 800ebb2:	6818      	ldr	r0, [r3, #0]
 800ebb4:	f107 0114 	add.w	r1, r7, #20
 800ebb8:	2300      	movs	r3, #0
 800ebba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ebbc:	f7fe fc34 	bl	800d428 <xQueueGenericSend>
 800ebc0:	6278      	str	r0, [r7, #36]	@ 0x24
 800ebc2:	e012      	b.n	800ebea <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800ebc4:	4b0b      	ldr	r3, [pc, #44]	@ (800ebf4 <xTimerGenericCommand+0x98>)
 800ebc6:	6818      	ldr	r0, [r3, #0]
 800ebc8:	f107 0114 	add.w	r1, r7, #20
 800ebcc:	2300      	movs	r3, #0
 800ebce:	2200      	movs	r2, #0
 800ebd0:	f7fe fc2a 	bl	800d428 <xQueueGenericSend>
 800ebd4:	6278      	str	r0, [r7, #36]	@ 0x24
 800ebd6:	e008      	b.n	800ebea <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800ebd8:	4b06      	ldr	r3, [pc, #24]	@ (800ebf4 <xTimerGenericCommand+0x98>)
 800ebda:	6818      	ldr	r0, [r3, #0]
 800ebdc:	f107 0114 	add.w	r1, r7, #20
 800ebe0:	2300      	movs	r3, #0
 800ebe2:	683a      	ldr	r2, [r7, #0]
 800ebe4:	f7fe fd22 	bl	800d62c <xQueueGenericSendFromISR>
 800ebe8:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800ebea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800ebec:	4618      	mov	r0, r3
 800ebee:	3728      	adds	r7, #40	@ 0x28
 800ebf0:	46bd      	mov	sp, r7
 800ebf2:	bd80      	pop	{r7, pc}
 800ebf4:	200236f0 	.word	0x200236f0

0800ebf8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800ebf8:	b580      	push	{r7, lr}
 800ebfa:	b088      	sub	sp, #32
 800ebfc:	af02      	add	r7, sp, #8
 800ebfe:	6078      	str	r0, [r7, #4]
 800ec00:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ec02:	4b23      	ldr	r3, [pc, #140]	@ (800ec90 <prvProcessExpiredTimer+0x98>)
 800ec04:	681b      	ldr	r3, [r3, #0]
 800ec06:	68db      	ldr	r3, [r3, #12]
 800ec08:	68db      	ldr	r3, [r3, #12]
 800ec0a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ec0c:	697b      	ldr	r3, [r7, #20]
 800ec0e:	3304      	adds	r3, #4
 800ec10:	4618      	mov	r0, r3
 800ec12:	f7fe faa7 	bl	800d164 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ec16:	697b      	ldr	r3, [r7, #20]
 800ec18:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800ec1c:	f003 0304 	and.w	r3, r3, #4
 800ec20:	2b00      	cmp	r3, #0
 800ec22:	d023      	beq.n	800ec6c <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800ec24:	697b      	ldr	r3, [r7, #20]
 800ec26:	699a      	ldr	r2, [r3, #24]
 800ec28:	687b      	ldr	r3, [r7, #4]
 800ec2a:	18d1      	adds	r1, r2, r3
 800ec2c:	687b      	ldr	r3, [r7, #4]
 800ec2e:	683a      	ldr	r2, [r7, #0]
 800ec30:	6978      	ldr	r0, [r7, #20]
 800ec32:	f000 f8d5 	bl	800ede0 <prvInsertTimerInActiveList>
 800ec36:	4603      	mov	r3, r0
 800ec38:	2b00      	cmp	r3, #0
 800ec3a:	d020      	beq.n	800ec7e <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ec3c:	2300      	movs	r3, #0
 800ec3e:	9300      	str	r3, [sp, #0]
 800ec40:	2300      	movs	r3, #0
 800ec42:	687a      	ldr	r2, [r7, #4]
 800ec44:	2100      	movs	r1, #0
 800ec46:	6978      	ldr	r0, [r7, #20]
 800ec48:	f7ff ff88 	bl	800eb5c <xTimerGenericCommand>
 800ec4c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800ec4e:	693b      	ldr	r3, [r7, #16]
 800ec50:	2b00      	cmp	r3, #0
 800ec52:	d114      	bne.n	800ec7e <prvProcessExpiredTimer+0x86>
	__asm volatile
 800ec54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ec58:	f383 8811 	msr	BASEPRI, r3
 800ec5c:	f3bf 8f6f 	isb	sy
 800ec60:	f3bf 8f4f 	dsb	sy
 800ec64:	60fb      	str	r3, [r7, #12]
}
 800ec66:	bf00      	nop
 800ec68:	bf00      	nop
 800ec6a:	e7fd      	b.n	800ec68 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ec6c:	697b      	ldr	r3, [r7, #20]
 800ec6e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800ec72:	f023 0301 	bic.w	r3, r3, #1
 800ec76:	b2da      	uxtb	r2, r3
 800ec78:	697b      	ldr	r3, [r7, #20]
 800ec7a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ec7e:	697b      	ldr	r3, [r7, #20]
 800ec80:	6a1b      	ldr	r3, [r3, #32]
 800ec82:	6978      	ldr	r0, [r7, #20]
 800ec84:	4798      	blx	r3
}
 800ec86:	bf00      	nop
 800ec88:	3718      	adds	r7, #24
 800ec8a:	46bd      	mov	sp, r7
 800ec8c:	bd80      	pop	{r7, pc}
 800ec8e:	bf00      	nop
 800ec90:	200236e8 	.word	0x200236e8

0800ec94 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800ec94:	b580      	push	{r7, lr}
 800ec96:	b084      	sub	sp, #16
 800ec98:	af00      	add	r7, sp, #0
 800ec9a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ec9c:	f107 0308 	add.w	r3, r7, #8
 800eca0:	4618      	mov	r0, r3
 800eca2:	f000 f859 	bl	800ed58 <prvGetNextExpireTime>
 800eca6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800eca8:	68bb      	ldr	r3, [r7, #8]
 800ecaa:	4619      	mov	r1, r3
 800ecac:	68f8      	ldr	r0, [r7, #12]
 800ecae:	f000 f805 	bl	800ecbc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800ecb2:	f000 f8d7 	bl	800ee64 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ecb6:	bf00      	nop
 800ecb8:	e7f0      	b.n	800ec9c <prvTimerTask+0x8>
	...

0800ecbc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800ecbc:	b580      	push	{r7, lr}
 800ecbe:	b084      	sub	sp, #16
 800ecc0:	af00      	add	r7, sp, #0
 800ecc2:	6078      	str	r0, [r7, #4]
 800ecc4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800ecc6:	f7ff fa35 	bl	800e134 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ecca:	f107 0308 	add.w	r3, r7, #8
 800ecce:	4618      	mov	r0, r3
 800ecd0:	f000 f866 	bl	800eda0 <prvSampleTimeNow>
 800ecd4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800ecd6:	68bb      	ldr	r3, [r7, #8]
 800ecd8:	2b00      	cmp	r3, #0
 800ecda:	d130      	bne.n	800ed3e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800ecdc:	683b      	ldr	r3, [r7, #0]
 800ecde:	2b00      	cmp	r3, #0
 800ece0:	d10a      	bne.n	800ecf8 <prvProcessTimerOrBlockTask+0x3c>
 800ece2:	687a      	ldr	r2, [r7, #4]
 800ece4:	68fb      	ldr	r3, [r7, #12]
 800ece6:	429a      	cmp	r2, r3
 800ece8:	d806      	bhi.n	800ecf8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800ecea:	f7ff fa31 	bl	800e150 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800ecee:	68f9      	ldr	r1, [r7, #12]
 800ecf0:	6878      	ldr	r0, [r7, #4]
 800ecf2:	f7ff ff81 	bl	800ebf8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800ecf6:	e024      	b.n	800ed42 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800ecf8:	683b      	ldr	r3, [r7, #0]
 800ecfa:	2b00      	cmp	r3, #0
 800ecfc:	d008      	beq.n	800ed10 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800ecfe:	4b13      	ldr	r3, [pc, #76]	@ (800ed4c <prvProcessTimerOrBlockTask+0x90>)
 800ed00:	681b      	ldr	r3, [r3, #0]
 800ed02:	681b      	ldr	r3, [r3, #0]
 800ed04:	2b00      	cmp	r3, #0
 800ed06:	d101      	bne.n	800ed0c <prvProcessTimerOrBlockTask+0x50>
 800ed08:	2301      	movs	r3, #1
 800ed0a:	e000      	b.n	800ed0e <prvProcessTimerOrBlockTask+0x52>
 800ed0c:	2300      	movs	r3, #0
 800ed0e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800ed10:	4b0f      	ldr	r3, [pc, #60]	@ (800ed50 <prvProcessTimerOrBlockTask+0x94>)
 800ed12:	6818      	ldr	r0, [r3, #0]
 800ed14:	687a      	ldr	r2, [r7, #4]
 800ed16:	68fb      	ldr	r3, [r7, #12]
 800ed18:	1ad3      	subs	r3, r2, r3
 800ed1a:	683a      	ldr	r2, [r7, #0]
 800ed1c:	4619      	mov	r1, r3
 800ed1e:	f7fe ffe9 	bl	800dcf4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800ed22:	f7ff fa15 	bl	800e150 <xTaskResumeAll>
 800ed26:	4603      	mov	r3, r0
 800ed28:	2b00      	cmp	r3, #0
 800ed2a:	d10a      	bne.n	800ed42 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800ed2c:	4b09      	ldr	r3, [pc, #36]	@ (800ed54 <prvProcessTimerOrBlockTask+0x98>)
 800ed2e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ed32:	601a      	str	r2, [r3, #0]
 800ed34:	f3bf 8f4f 	dsb	sy
 800ed38:	f3bf 8f6f 	isb	sy
}
 800ed3c:	e001      	b.n	800ed42 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800ed3e:	f7ff fa07 	bl	800e150 <xTaskResumeAll>
}
 800ed42:	bf00      	nop
 800ed44:	3710      	adds	r7, #16
 800ed46:	46bd      	mov	sp, r7
 800ed48:	bd80      	pop	{r7, pc}
 800ed4a:	bf00      	nop
 800ed4c:	200236ec 	.word	0x200236ec
 800ed50:	200236f0 	.word	0x200236f0
 800ed54:	e000ed04 	.word	0xe000ed04

0800ed58 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800ed58:	b480      	push	{r7}
 800ed5a:	b085      	sub	sp, #20
 800ed5c:	af00      	add	r7, sp, #0
 800ed5e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800ed60:	4b0e      	ldr	r3, [pc, #56]	@ (800ed9c <prvGetNextExpireTime+0x44>)
 800ed62:	681b      	ldr	r3, [r3, #0]
 800ed64:	681b      	ldr	r3, [r3, #0]
 800ed66:	2b00      	cmp	r3, #0
 800ed68:	d101      	bne.n	800ed6e <prvGetNextExpireTime+0x16>
 800ed6a:	2201      	movs	r2, #1
 800ed6c:	e000      	b.n	800ed70 <prvGetNextExpireTime+0x18>
 800ed6e:	2200      	movs	r2, #0
 800ed70:	687b      	ldr	r3, [r7, #4]
 800ed72:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800ed74:	687b      	ldr	r3, [r7, #4]
 800ed76:	681b      	ldr	r3, [r3, #0]
 800ed78:	2b00      	cmp	r3, #0
 800ed7a:	d105      	bne.n	800ed88 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ed7c:	4b07      	ldr	r3, [pc, #28]	@ (800ed9c <prvGetNextExpireTime+0x44>)
 800ed7e:	681b      	ldr	r3, [r3, #0]
 800ed80:	68db      	ldr	r3, [r3, #12]
 800ed82:	681b      	ldr	r3, [r3, #0]
 800ed84:	60fb      	str	r3, [r7, #12]
 800ed86:	e001      	b.n	800ed8c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800ed88:	2300      	movs	r3, #0
 800ed8a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800ed8c:	68fb      	ldr	r3, [r7, #12]
}
 800ed8e:	4618      	mov	r0, r3
 800ed90:	3714      	adds	r7, #20
 800ed92:	46bd      	mov	sp, r7
 800ed94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed98:	4770      	bx	lr
 800ed9a:	bf00      	nop
 800ed9c:	200236e8 	.word	0x200236e8

0800eda0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800eda0:	b580      	push	{r7, lr}
 800eda2:	b084      	sub	sp, #16
 800eda4:	af00      	add	r7, sp, #0
 800eda6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800eda8:	f7ff fa70 	bl	800e28c <xTaskGetTickCount>
 800edac:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800edae:	4b0b      	ldr	r3, [pc, #44]	@ (800eddc <prvSampleTimeNow+0x3c>)
 800edb0:	681b      	ldr	r3, [r3, #0]
 800edb2:	68fa      	ldr	r2, [r7, #12]
 800edb4:	429a      	cmp	r2, r3
 800edb6:	d205      	bcs.n	800edc4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800edb8:	f000 f914 	bl	800efe4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800edbc:	687b      	ldr	r3, [r7, #4]
 800edbe:	2201      	movs	r2, #1
 800edc0:	601a      	str	r2, [r3, #0]
 800edc2:	e002      	b.n	800edca <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800edc4:	687b      	ldr	r3, [r7, #4]
 800edc6:	2200      	movs	r2, #0
 800edc8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800edca:	4a04      	ldr	r2, [pc, #16]	@ (800eddc <prvSampleTimeNow+0x3c>)
 800edcc:	68fb      	ldr	r3, [r7, #12]
 800edce:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800edd0:	68fb      	ldr	r3, [r7, #12]
}
 800edd2:	4618      	mov	r0, r3
 800edd4:	3710      	adds	r7, #16
 800edd6:	46bd      	mov	sp, r7
 800edd8:	bd80      	pop	{r7, pc}
 800edda:	bf00      	nop
 800eddc:	200236f8 	.word	0x200236f8

0800ede0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800ede0:	b580      	push	{r7, lr}
 800ede2:	b086      	sub	sp, #24
 800ede4:	af00      	add	r7, sp, #0
 800ede6:	60f8      	str	r0, [r7, #12]
 800ede8:	60b9      	str	r1, [r7, #8]
 800edea:	607a      	str	r2, [r7, #4]
 800edec:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800edee:	2300      	movs	r3, #0
 800edf0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800edf2:	68fb      	ldr	r3, [r7, #12]
 800edf4:	68ba      	ldr	r2, [r7, #8]
 800edf6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800edf8:	68fb      	ldr	r3, [r7, #12]
 800edfa:	68fa      	ldr	r2, [r7, #12]
 800edfc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800edfe:	68ba      	ldr	r2, [r7, #8]
 800ee00:	687b      	ldr	r3, [r7, #4]
 800ee02:	429a      	cmp	r2, r3
 800ee04:	d812      	bhi.n	800ee2c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ee06:	687a      	ldr	r2, [r7, #4]
 800ee08:	683b      	ldr	r3, [r7, #0]
 800ee0a:	1ad2      	subs	r2, r2, r3
 800ee0c:	68fb      	ldr	r3, [r7, #12]
 800ee0e:	699b      	ldr	r3, [r3, #24]
 800ee10:	429a      	cmp	r2, r3
 800ee12:	d302      	bcc.n	800ee1a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800ee14:	2301      	movs	r3, #1
 800ee16:	617b      	str	r3, [r7, #20]
 800ee18:	e01b      	b.n	800ee52 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800ee1a:	4b10      	ldr	r3, [pc, #64]	@ (800ee5c <prvInsertTimerInActiveList+0x7c>)
 800ee1c:	681a      	ldr	r2, [r3, #0]
 800ee1e:	68fb      	ldr	r3, [r7, #12]
 800ee20:	3304      	adds	r3, #4
 800ee22:	4619      	mov	r1, r3
 800ee24:	4610      	mov	r0, r2
 800ee26:	f7fe f964 	bl	800d0f2 <vListInsert>
 800ee2a:	e012      	b.n	800ee52 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800ee2c:	687a      	ldr	r2, [r7, #4]
 800ee2e:	683b      	ldr	r3, [r7, #0]
 800ee30:	429a      	cmp	r2, r3
 800ee32:	d206      	bcs.n	800ee42 <prvInsertTimerInActiveList+0x62>
 800ee34:	68ba      	ldr	r2, [r7, #8]
 800ee36:	683b      	ldr	r3, [r7, #0]
 800ee38:	429a      	cmp	r2, r3
 800ee3a:	d302      	bcc.n	800ee42 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800ee3c:	2301      	movs	r3, #1
 800ee3e:	617b      	str	r3, [r7, #20]
 800ee40:	e007      	b.n	800ee52 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ee42:	4b07      	ldr	r3, [pc, #28]	@ (800ee60 <prvInsertTimerInActiveList+0x80>)
 800ee44:	681a      	ldr	r2, [r3, #0]
 800ee46:	68fb      	ldr	r3, [r7, #12]
 800ee48:	3304      	adds	r3, #4
 800ee4a:	4619      	mov	r1, r3
 800ee4c:	4610      	mov	r0, r2
 800ee4e:	f7fe f950 	bl	800d0f2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800ee52:	697b      	ldr	r3, [r7, #20]
}
 800ee54:	4618      	mov	r0, r3
 800ee56:	3718      	adds	r7, #24
 800ee58:	46bd      	mov	sp, r7
 800ee5a:	bd80      	pop	{r7, pc}
 800ee5c:	200236ec 	.word	0x200236ec
 800ee60:	200236e8 	.word	0x200236e8

0800ee64 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800ee64:	b580      	push	{r7, lr}
 800ee66:	b08c      	sub	sp, #48	@ 0x30
 800ee68:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ee6a:	e0a7      	b.n	800efbc <prvProcessReceivedCommands+0x158>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800ee6c:	68bb      	ldr	r3, [r7, #8]
 800ee6e:	2b00      	cmp	r3, #0
 800ee70:	f2c0 80a4 	blt.w	800efbc <prvProcessReceivedCommands+0x158>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800ee74:	693b      	ldr	r3, [r7, #16]
 800ee76:	627b      	str	r3, [r7, #36]	@ 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800ee78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ee7a:	695b      	ldr	r3, [r3, #20]
 800ee7c:	2b00      	cmp	r3, #0
 800ee7e:	d004      	beq.n	800ee8a <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ee80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ee82:	3304      	adds	r3, #4
 800ee84:	4618      	mov	r0, r3
 800ee86:	f7fe f96d 	bl	800d164 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ee8a:	1d3b      	adds	r3, r7, #4
 800ee8c:	4618      	mov	r0, r3
 800ee8e:	f7ff ff87 	bl	800eda0 <prvSampleTimeNow>
 800ee92:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 800ee94:	68bb      	ldr	r3, [r7, #8]
 800ee96:	2b09      	cmp	r3, #9
 800ee98:	f200 808d 	bhi.w	800efb6 <prvProcessReceivedCommands+0x152>
 800ee9c:	a201      	add	r2, pc, #4	@ (adr r2, 800eea4 <prvProcessReceivedCommands+0x40>)
 800ee9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eea2:	bf00      	nop
 800eea4:	0800eecd 	.word	0x0800eecd
 800eea8:	0800eecd 	.word	0x0800eecd
 800eeac:	0800eecd 	.word	0x0800eecd
 800eeb0:	0800ef43 	.word	0x0800ef43
 800eeb4:	0800ef57 	.word	0x0800ef57
 800eeb8:	0800efa3 	.word	0x0800efa3
 800eebc:	0800eecd 	.word	0x0800eecd
 800eec0:	0800eecd 	.word	0x0800eecd
 800eec4:	0800ef43 	.word	0x0800ef43
 800eec8:	0800ef57 	.word	0x0800ef57
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800eecc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eece:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800eed2:	f043 0301 	orr.w	r3, r3, #1
 800eed6:	b2da      	uxtb	r2, r3
 800eed8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eeda:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800eede:	68fa      	ldr	r2, [r7, #12]
 800eee0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eee2:	699b      	ldr	r3, [r3, #24]
 800eee4:	18d1      	adds	r1, r2, r3
 800eee6:	68fb      	ldr	r3, [r7, #12]
 800eee8:	6a3a      	ldr	r2, [r7, #32]
 800eeea:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800eeec:	f7ff ff78 	bl	800ede0 <prvInsertTimerInActiveList>
 800eef0:	4603      	mov	r3, r0
 800eef2:	2b00      	cmp	r3, #0
 800eef4:	d061      	beq.n	800efba <prvProcessReceivedCommands+0x156>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800eef6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eef8:	6a1b      	ldr	r3, [r3, #32]
 800eefa:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800eefc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800eefe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ef00:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800ef04:	f003 0304 	and.w	r3, r3, #4
 800ef08:	2b00      	cmp	r3, #0
 800ef0a:	d056      	beq.n	800efba <prvProcessReceivedCommands+0x156>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800ef0c:	68fa      	ldr	r2, [r7, #12]
 800ef0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ef10:	699b      	ldr	r3, [r3, #24]
 800ef12:	441a      	add	r2, r3
 800ef14:	2300      	movs	r3, #0
 800ef16:	9300      	str	r3, [sp, #0]
 800ef18:	2300      	movs	r3, #0
 800ef1a:	2100      	movs	r1, #0
 800ef1c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800ef1e:	f7ff fe1d 	bl	800eb5c <xTimerGenericCommand>
 800ef22:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 800ef24:	69fb      	ldr	r3, [r7, #28]
 800ef26:	2b00      	cmp	r3, #0
 800ef28:	d147      	bne.n	800efba <prvProcessReceivedCommands+0x156>
	__asm volatile
 800ef2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ef2e:	f383 8811 	msr	BASEPRI, r3
 800ef32:	f3bf 8f6f 	isb	sy
 800ef36:	f3bf 8f4f 	dsb	sy
 800ef3a:	61bb      	str	r3, [r7, #24]
}
 800ef3c:	bf00      	nop
 800ef3e:	bf00      	nop
 800ef40:	e7fd      	b.n	800ef3e <prvProcessReceivedCommands+0xda>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ef42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ef44:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800ef48:	f023 0301 	bic.w	r3, r3, #1
 800ef4c:	b2da      	uxtb	r2, r3
 800ef4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ef50:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
					break;
 800ef54:	e032      	b.n	800efbc <prvProcessReceivedCommands+0x158>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ef56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ef58:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800ef5c:	f043 0301 	orr.w	r3, r3, #1
 800ef60:	b2da      	uxtb	r2, r3
 800ef62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ef64:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800ef68:	68fa      	ldr	r2, [r7, #12]
 800ef6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ef6c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800ef6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ef70:	699b      	ldr	r3, [r3, #24]
 800ef72:	2b00      	cmp	r3, #0
 800ef74:	d10b      	bne.n	800ef8e <prvProcessReceivedCommands+0x12a>
	__asm volatile
 800ef76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ef7a:	f383 8811 	msr	BASEPRI, r3
 800ef7e:	f3bf 8f6f 	isb	sy
 800ef82:	f3bf 8f4f 	dsb	sy
 800ef86:	617b      	str	r3, [r7, #20]
}
 800ef88:	bf00      	nop
 800ef8a:	bf00      	nop
 800ef8c:	e7fd      	b.n	800ef8a <prvProcessReceivedCommands+0x126>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800ef8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ef90:	699a      	ldr	r2, [r3, #24]
 800ef92:	6a3b      	ldr	r3, [r7, #32]
 800ef94:	18d1      	adds	r1, r2, r3
 800ef96:	6a3b      	ldr	r3, [r7, #32]
 800ef98:	6a3a      	ldr	r2, [r7, #32]
 800ef9a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800ef9c:	f7ff ff20 	bl	800ede0 <prvInsertTimerInActiveList>
					break;
 800efa0:	e00c      	b.n	800efbc <prvProcessReceivedCommands+0x158>
					{
						/* If dynamic allocation is not enabled, the memory
						could not have been dynamically allocated. So there is
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800efa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800efa4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800efa8:	f023 0301 	bic.w	r3, r3, #1
 800efac:	b2da      	uxtb	r2, r3
 800efae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800efb0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800efb4:	e002      	b.n	800efbc <prvProcessReceivedCommands+0x158>

				default	:
					/* Don't expect to get here. */
					break;
 800efb6:	bf00      	nop
 800efb8:	e000      	b.n	800efbc <prvProcessReceivedCommands+0x158>
					break;
 800efba:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800efbc:	4b08      	ldr	r3, [pc, #32]	@ (800efe0 <prvProcessReceivedCommands+0x17c>)
 800efbe:	681b      	ldr	r3, [r3, #0]
 800efc0:	f107 0108 	add.w	r1, r7, #8
 800efc4:	2200      	movs	r2, #0
 800efc6:	4618      	mov	r0, r3
 800efc8:	f7fe fbce 	bl	800d768 <xQueueReceive>
 800efcc:	4603      	mov	r3, r0
 800efce:	2b00      	cmp	r3, #0
 800efd0:	f47f af4c 	bne.w	800ee6c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800efd4:	bf00      	nop
 800efd6:	bf00      	nop
 800efd8:	3728      	adds	r7, #40	@ 0x28
 800efda:	46bd      	mov	sp, r7
 800efdc:	bd80      	pop	{r7, pc}
 800efde:	bf00      	nop
 800efe0:	200236f0 	.word	0x200236f0

0800efe4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800efe4:	b580      	push	{r7, lr}
 800efe6:	b088      	sub	sp, #32
 800efe8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800efea:	e049      	b.n	800f080 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800efec:	4b2e      	ldr	r3, [pc, #184]	@ (800f0a8 <prvSwitchTimerLists+0xc4>)
 800efee:	681b      	ldr	r3, [r3, #0]
 800eff0:	68db      	ldr	r3, [r3, #12]
 800eff2:	681b      	ldr	r3, [r3, #0]
 800eff4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800eff6:	4b2c      	ldr	r3, [pc, #176]	@ (800f0a8 <prvSwitchTimerLists+0xc4>)
 800eff8:	681b      	ldr	r3, [r3, #0]
 800effa:	68db      	ldr	r3, [r3, #12]
 800effc:	68db      	ldr	r3, [r3, #12]
 800effe:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f000:	68fb      	ldr	r3, [r7, #12]
 800f002:	3304      	adds	r3, #4
 800f004:	4618      	mov	r0, r3
 800f006:	f7fe f8ad 	bl	800d164 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f00a:	68fb      	ldr	r3, [r7, #12]
 800f00c:	6a1b      	ldr	r3, [r3, #32]
 800f00e:	68f8      	ldr	r0, [r7, #12]
 800f010:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f012:	68fb      	ldr	r3, [r7, #12]
 800f014:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800f018:	f003 0304 	and.w	r3, r3, #4
 800f01c:	2b00      	cmp	r3, #0
 800f01e:	d02f      	beq.n	800f080 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800f020:	68fb      	ldr	r3, [r7, #12]
 800f022:	699b      	ldr	r3, [r3, #24]
 800f024:	693a      	ldr	r2, [r7, #16]
 800f026:	4413      	add	r3, r2
 800f028:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800f02a:	68ba      	ldr	r2, [r7, #8]
 800f02c:	693b      	ldr	r3, [r7, #16]
 800f02e:	429a      	cmp	r2, r3
 800f030:	d90e      	bls.n	800f050 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800f032:	68fb      	ldr	r3, [r7, #12]
 800f034:	68ba      	ldr	r2, [r7, #8]
 800f036:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f038:	68fb      	ldr	r3, [r7, #12]
 800f03a:	68fa      	ldr	r2, [r7, #12]
 800f03c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f03e:	4b1a      	ldr	r3, [pc, #104]	@ (800f0a8 <prvSwitchTimerLists+0xc4>)
 800f040:	681a      	ldr	r2, [r3, #0]
 800f042:	68fb      	ldr	r3, [r7, #12]
 800f044:	3304      	adds	r3, #4
 800f046:	4619      	mov	r1, r3
 800f048:	4610      	mov	r0, r2
 800f04a:	f7fe f852 	bl	800d0f2 <vListInsert>
 800f04e:	e017      	b.n	800f080 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f050:	2300      	movs	r3, #0
 800f052:	9300      	str	r3, [sp, #0]
 800f054:	2300      	movs	r3, #0
 800f056:	693a      	ldr	r2, [r7, #16]
 800f058:	2100      	movs	r1, #0
 800f05a:	68f8      	ldr	r0, [r7, #12]
 800f05c:	f7ff fd7e 	bl	800eb5c <xTimerGenericCommand>
 800f060:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800f062:	687b      	ldr	r3, [r7, #4]
 800f064:	2b00      	cmp	r3, #0
 800f066:	d10b      	bne.n	800f080 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800f068:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f06c:	f383 8811 	msr	BASEPRI, r3
 800f070:	f3bf 8f6f 	isb	sy
 800f074:	f3bf 8f4f 	dsb	sy
 800f078:	603b      	str	r3, [r7, #0]
}
 800f07a:	bf00      	nop
 800f07c:	bf00      	nop
 800f07e:	e7fd      	b.n	800f07c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f080:	4b09      	ldr	r3, [pc, #36]	@ (800f0a8 <prvSwitchTimerLists+0xc4>)
 800f082:	681b      	ldr	r3, [r3, #0]
 800f084:	681b      	ldr	r3, [r3, #0]
 800f086:	2b00      	cmp	r3, #0
 800f088:	d1b0      	bne.n	800efec <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800f08a:	4b07      	ldr	r3, [pc, #28]	@ (800f0a8 <prvSwitchTimerLists+0xc4>)
 800f08c:	681b      	ldr	r3, [r3, #0]
 800f08e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800f090:	4b06      	ldr	r3, [pc, #24]	@ (800f0ac <prvSwitchTimerLists+0xc8>)
 800f092:	681b      	ldr	r3, [r3, #0]
 800f094:	4a04      	ldr	r2, [pc, #16]	@ (800f0a8 <prvSwitchTimerLists+0xc4>)
 800f096:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800f098:	4a04      	ldr	r2, [pc, #16]	@ (800f0ac <prvSwitchTimerLists+0xc8>)
 800f09a:	697b      	ldr	r3, [r7, #20]
 800f09c:	6013      	str	r3, [r2, #0]
}
 800f09e:	bf00      	nop
 800f0a0:	3718      	adds	r7, #24
 800f0a2:	46bd      	mov	sp, r7
 800f0a4:	bd80      	pop	{r7, pc}
 800f0a6:	bf00      	nop
 800f0a8:	200236e8 	.word	0x200236e8
 800f0ac:	200236ec 	.word	0x200236ec

0800f0b0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800f0b0:	b580      	push	{r7, lr}
 800f0b2:	b082      	sub	sp, #8
 800f0b4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800f0b6:	f000 f96f 	bl	800f398 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800f0ba:	4b15      	ldr	r3, [pc, #84]	@ (800f110 <prvCheckForValidListAndQueue+0x60>)
 800f0bc:	681b      	ldr	r3, [r3, #0]
 800f0be:	2b00      	cmp	r3, #0
 800f0c0:	d120      	bne.n	800f104 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800f0c2:	4814      	ldr	r0, [pc, #80]	@ (800f114 <prvCheckForValidListAndQueue+0x64>)
 800f0c4:	f7fd ffc4 	bl	800d050 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800f0c8:	4813      	ldr	r0, [pc, #76]	@ (800f118 <prvCheckForValidListAndQueue+0x68>)
 800f0ca:	f7fd ffc1 	bl	800d050 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800f0ce:	4b13      	ldr	r3, [pc, #76]	@ (800f11c <prvCheckForValidListAndQueue+0x6c>)
 800f0d0:	4a10      	ldr	r2, [pc, #64]	@ (800f114 <prvCheckForValidListAndQueue+0x64>)
 800f0d2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800f0d4:	4b12      	ldr	r3, [pc, #72]	@ (800f120 <prvCheckForValidListAndQueue+0x70>)
 800f0d6:	4a10      	ldr	r2, [pc, #64]	@ (800f118 <prvCheckForValidListAndQueue+0x68>)
 800f0d8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800f0da:	2300      	movs	r3, #0
 800f0dc:	9300      	str	r3, [sp, #0]
 800f0de:	4b11      	ldr	r3, [pc, #68]	@ (800f124 <prvCheckForValidListAndQueue+0x74>)
 800f0e0:	4a11      	ldr	r2, [pc, #68]	@ (800f128 <prvCheckForValidListAndQueue+0x78>)
 800f0e2:	210c      	movs	r1, #12
 800f0e4:	200a      	movs	r0, #10
 800f0e6:	f7fe f8d1 	bl	800d28c <xQueueGenericCreateStatic>
 800f0ea:	4603      	mov	r3, r0
 800f0ec:	4a08      	ldr	r2, [pc, #32]	@ (800f110 <prvCheckForValidListAndQueue+0x60>)
 800f0ee:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800f0f0:	4b07      	ldr	r3, [pc, #28]	@ (800f110 <prvCheckForValidListAndQueue+0x60>)
 800f0f2:	681b      	ldr	r3, [r3, #0]
 800f0f4:	2b00      	cmp	r3, #0
 800f0f6:	d005      	beq.n	800f104 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800f0f8:	4b05      	ldr	r3, [pc, #20]	@ (800f110 <prvCheckForValidListAndQueue+0x60>)
 800f0fa:	681b      	ldr	r3, [r3, #0]
 800f0fc:	490b      	ldr	r1, [pc, #44]	@ (800f12c <prvCheckForValidListAndQueue+0x7c>)
 800f0fe:	4618      	mov	r0, r3
 800f100:	f7fe fdce 	bl	800dca0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800f104:	f000 f97a 	bl	800f3fc <vPortExitCritical>
}
 800f108:	bf00      	nop
 800f10a:	46bd      	mov	sp, r7
 800f10c:	bd80      	pop	{r7, pc}
 800f10e:	bf00      	nop
 800f110:	200236f0 	.word	0x200236f0
 800f114:	200236c0 	.word	0x200236c0
 800f118:	200236d4 	.word	0x200236d4
 800f11c:	200236e8 	.word	0x200236e8
 800f120:	200236ec 	.word	0x200236ec
 800f124:	20023774 	.word	0x20023774
 800f128:	200236fc 	.word	0x200236fc
 800f12c:	080127dc 	.word	0x080127dc

0800f130 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800f130:	b480      	push	{r7}
 800f132:	b085      	sub	sp, #20
 800f134:	af00      	add	r7, sp, #0
 800f136:	60f8      	str	r0, [r7, #12]
 800f138:	60b9      	str	r1, [r7, #8]
 800f13a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800f13c:	68fb      	ldr	r3, [r7, #12]
 800f13e:	3b04      	subs	r3, #4
 800f140:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800f142:	68fb      	ldr	r3, [r7, #12]
 800f144:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800f148:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f14a:	68fb      	ldr	r3, [r7, #12]
 800f14c:	3b04      	subs	r3, #4
 800f14e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800f150:	68bb      	ldr	r3, [r7, #8]
 800f152:	f023 0201 	bic.w	r2, r3, #1
 800f156:	68fb      	ldr	r3, [r7, #12]
 800f158:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f15a:	68fb      	ldr	r3, [r7, #12]
 800f15c:	3b04      	subs	r3, #4
 800f15e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800f160:	4a0c      	ldr	r2, [pc, #48]	@ (800f194 <pxPortInitialiseStack+0x64>)
 800f162:	68fb      	ldr	r3, [r7, #12]
 800f164:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800f166:	68fb      	ldr	r3, [r7, #12]
 800f168:	3b14      	subs	r3, #20
 800f16a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800f16c:	687a      	ldr	r2, [r7, #4]
 800f16e:	68fb      	ldr	r3, [r7, #12]
 800f170:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800f172:	68fb      	ldr	r3, [r7, #12]
 800f174:	3b04      	subs	r3, #4
 800f176:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800f178:	68fb      	ldr	r3, [r7, #12]
 800f17a:	f06f 0202 	mvn.w	r2, #2
 800f17e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800f180:	68fb      	ldr	r3, [r7, #12]
 800f182:	3b20      	subs	r3, #32
 800f184:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800f186:	68fb      	ldr	r3, [r7, #12]
}
 800f188:	4618      	mov	r0, r3
 800f18a:	3714      	adds	r7, #20
 800f18c:	46bd      	mov	sp, r7
 800f18e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f192:	4770      	bx	lr
 800f194:	0800f199 	.word	0x0800f199

0800f198 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800f198:	b480      	push	{r7}
 800f19a:	b085      	sub	sp, #20
 800f19c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800f19e:	2300      	movs	r3, #0
 800f1a0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800f1a2:	4b13      	ldr	r3, [pc, #76]	@ (800f1f0 <prvTaskExitError+0x58>)
 800f1a4:	681b      	ldr	r3, [r3, #0]
 800f1a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f1aa:	d00b      	beq.n	800f1c4 <prvTaskExitError+0x2c>
	__asm volatile
 800f1ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f1b0:	f383 8811 	msr	BASEPRI, r3
 800f1b4:	f3bf 8f6f 	isb	sy
 800f1b8:	f3bf 8f4f 	dsb	sy
 800f1bc:	60fb      	str	r3, [r7, #12]
}
 800f1be:	bf00      	nop
 800f1c0:	bf00      	nop
 800f1c2:	e7fd      	b.n	800f1c0 <prvTaskExitError+0x28>
	__asm volatile
 800f1c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f1c8:	f383 8811 	msr	BASEPRI, r3
 800f1cc:	f3bf 8f6f 	isb	sy
 800f1d0:	f3bf 8f4f 	dsb	sy
 800f1d4:	60bb      	str	r3, [r7, #8]
}
 800f1d6:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800f1d8:	bf00      	nop
 800f1da:	687b      	ldr	r3, [r7, #4]
 800f1dc:	2b00      	cmp	r3, #0
 800f1de:	d0fc      	beq.n	800f1da <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800f1e0:	bf00      	nop
 800f1e2:	bf00      	nop
 800f1e4:	3714      	adds	r7, #20
 800f1e6:	46bd      	mov	sp, r7
 800f1e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1ec:	4770      	bx	lr
 800f1ee:	bf00      	nop
 800f1f0:	20000034 	.word	0x20000034
	...

0800f200 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800f200:	4b07      	ldr	r3, [pc, #28]	@ (800f220 <pxCurrentTCBConst2>)
 800f202:	6819      	ldr	r1, [r3, #0]
 800f204:	6808      	ldr	r0, [r1, #0]
 800f206:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f20a:	f380 8809 	msr	PSP, r0
 800f20e:	f3bf 8f6f 	isb	sy
 800f212:	f04f 0000 	mov.w	r0, #0
 800f216:	f380 8811 	msr	BASEPRI, r0
 800f21a:	4770      	bx	lr
 800f21c:	f3af 8000 	nop.w

0800f220 <pxCurrentTCBConst2>:
 800f220:	20023594 	.word	0x20023594
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800f224:	bf00      	nop
 800f226:	bf00      	nop

0800f228 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800f228:	4808      	ldr	r0, [pc, #32]	@ (800f24c <prvPortStartFirstTask+0x24>)
 800f22a:	6800      	ldr	r0, [r0, #0]
 800f22c:	6800      	ldr	r0, [r0, #0]
 800f22e:	f380 8808 	msr	MSP, r0
 800f232:	f04f 0000 	mov.w	r0, #0
 800f236:	f380 8814 	msr	CONTROL, r0
 800f23a:	b662      	cpsie	i
 800f23c:	b661      	cpsie	f
 800f23e:	f3bf 8f4f 	dsb	sy
 800f242:	f3bf 8f6f 	isb	sy
 800f246:	df00      	svc	0
 800f248:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800f24a:	bf00      	nop
 800f24c:	e000ed08 	.word	0xe000ed08

0800f250 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800f250:	b580      	push	{r7, lr}
 800f252:	b086      	sub	sp, #24
 800f254:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800f256:	4b47      	ldr	r3, [pc, #284]	@ (800f374 <xPortStartScheduler+0x124>)
 800f258:	681b      	ldr	r3, [r3, #0]
 800f25a:	4a47      	ldr	r2, [pc, #284]	@ (800f378 <xPortStartScheduler+0x128>)
 800f25c:	4293      	cmp	r3, r2
 800f25e:	d10b      	bne.n	800f278 <xPortStartScheduler+0x28>
	__asm volatile
 800f260:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f264:	f383 8811 	msr	BASEPRI, r3
 800f268:	f3bf 8f6f 	isb	sy
 800f26c:	f3bf 8f4f 	dsb	sy
 800f270:	613b      	str	r3, [r7, #16]
}
 800f272:	bf00      	nop
 800f274:	bf00      	nop
 800f276:	e7fd      	b.n	800f274 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800f278:	4b3e      	ldr	r3, [pc, #248]	@ (800f374 <xPortStartScheduler+0x124>)
 800f27a:	681b      	ldr	r3, [r3, #0]
 800f27c:	4a3f      	ldr	r2, [pc, #252]	@ (800f37c <xPortStartScheduler+0x12c>)
 800f27e:	4293      	cmp	r3, r2
 800f280:	d10b      	bne.n	800f29a <xPortStartScheduler+0x4a>
	__asm volatile
 800f282:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f286:	f383 8811 	msr	BASEPRI, r3
 800f28a:	f3bf 8f6f 	isb	sy
 800f28e:	f3bf 8f4f 	dsb	sy
 800f292:	60fb      	str	r3, [r7, #12]
}
 800f294:	bf00      	nop
 800f296:	bf00      	nop
 800f298:	e7fd      	b.n	800f296 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800f29a:	4b39      	ldr	r3, [pc, #228]	@ (800f380 <xPortStartScheduler+0x130>)
 800f29c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800f29e:	697b      	ldr	r3, [r7, #20]
 800f2a0:	781b      	ldrb	r3, [r3, #0]
 800f2a2:	b2db      	uxtb	r3, r3
 800f2a4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800f2a6:	697b      	ldr	r3, [r7, #20]
 800f2a8:	22ff      	movs	r2, #255	@ 0xff
 800f2aa:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800f2ac:	697b      	ldr	r3, [r7, #20]
 800f2ae:	781b      	ldrb	r3, [r3, #0]
 800f2b0:	b2db      	uxtb	r3, r3
 800f2b2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800f2b4:	78fb      	ldrb	r3, [r7, #3]
 800f2b6:	b2db      	uxtb	r3, r3
 800f2b8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800f2bc:	b2da      	uxtb	r2, r3
 800f2be:	4b31      	ldr	r3, [pc, #196]	@ (800f384 <xPortStartScheduler+0x134>)
 800f2c0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800f2c2:	4b31      	ldr	r3, [pc, #196]	@ (800f388 <xPortStartScheduler+0x138>)
 800f2c4:	2207      	movs	r2, #7
 800f2c6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f2c8:	e009      	b.n	800f2de <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800f2ca:	4b2f      	ldr	r3, [pc, #188]	@ (800f388 <xPortStartScheduler+0x138>)
 800f2cc:	681b      	ldr	r3, [r3, #0]
 800f2ce:	3b01      	subs	r3, #1
 800f2d0:	4a2d      	ldr	r2, [pc, #180]	@ (800f388 <xPortStartScheduler+0x138>)
 800f2d2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800f2d4:	78fb      	ldrb	r3, [r7, #3]
 800f2d6:	b2db      	uxtb	r3, r3
 800f2d8:	005b      	lsls	r3, r3, #1
 800f2da:	b2db      	uxtb	r3, r3
 800f2dc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f2de:	78fb      	ldrb	r3, [r7, #3]
 800f2e0:	b2db      	uxtb	r3, r3
 800f2e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f2e6:	2b80      	cmp	r3, #128	@ 0x80
 800f2e8:	d0ef      	beq.n	800f2ca <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800f2ea:	4b27      	ldr	r3, [pc, #156]	@ (800f388 <xPortStartScheduler+0x138>)
 800f2ec:	681b      	ldr	r3, [r3, #0]
 800f2ee:	f1c3 0307 	rsb	r3, r3, #7
 800f2f2:	2b04      	cmp	r3, #4
 800f2f4:	d00b      	beq.n	800f30e <xPortStartScheduler+0xbe>
	__asm volatile
 800f2f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f2fa:	f383 8811 	msr	BASEPRI, r3
 800f2fe:	f3bf 8f6f 	isb	sy
 800f302:	f3bf 8f4f 	dsb	sy
 800f306:	60bb      	str	r3, [r7, #8]
}
 800f308:	bf00      	nop
 800f30a:	bf00      	nop
 800f30c:	e7fd      	b.n	800f30a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800f30e:	4b1e      	ldr	r3, [pc, #120]	@ (800f388 <xPortStartScheduler+0x138>)
 800f310:	681b      	ldr	r3, [r3, #0]
 800f312:	021b      	lsls	r3, r3, #8
 800f314:	4a1c      	ldr	r2, [pc, #112]	@ (800f388 <xPortStartScheduler+0x138>)
 800f316:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800f318:	4b1b      	ldr	r3, [pc, #108]	@ (800f388 <xPortStartScheduler+0x138>)
 800f31a:	681b      	ldr	r3, [r3, #0]
 800f31c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800f320:	4a19      	ldr	r2, [pc, #100]	@ (800f388 <xPortStartScheduler+0x138>)
 800f322:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800f324:	687b      	ldr	r3, [r7, #4]
 800f326:	b2da      	uxtb	r2, r3
 800f328:	697b      	ldr	r3, [r7, #20]
 800f32a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800f32c:	4b17      	ldr	r3, [pc, #92]	@ (800f38c <xPortStartScheduler+0x13c>)
 800f32e:	681b      	ldr	r3, [r3, #0]
 800f330:	4a16      	ldr	r2, [pc, #88]	@ (800f38c <xPortStartScheduler+0x13c>)
 800f332:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800f336:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800f338:	4b14      	ldr	r3, [pc, #80]	@ (800f38c <xPortStartScheduler+0x13c>)
 800f33a:	681b      	ldr	r3, [r3, #0]
 800f33c:	4a13      	ldr	r2, [pc, #76]	@ (800f38c <xPortStartScheduler+0x13c>)
 800f33e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800f342:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800f344:	f000 f8da 	bl	800f4fc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800f348:	4b11      	ldr	r3, [pc, #68]	@ (800f390 <xPortStartScheduler+0x140>)
 800f34a:	2200      	movs	r2, #0
 800f34c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800f34e:	f000 f8f9 	bl	800f544 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800f352:	4b10      	ldr	r3, [pc, #64]	@ (800f394 <xPortStartScheduler+0x144>)
 800f354:	681b      	ldr	r3, [r3, #0]
 800f356:	4a0f      	ldr	r2, [pc, #60]	@ (800f394 <xPortStartScheduler+0x144>)
 800f358:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800f35c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800f35e:	f7ff ff63 	bl	800f228 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800f362:	f7ff f85d 	bl	800e420 <vTaskSwitchContext>
	prvTaskExitError();
 800f366:	f7ff ff17 	bl	800f198 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800f36a:	2300      	movs	r3, #0
}
 800f36c:	4618      	mov	r0, r3
 800f36e:	3718      	adds	r7, #24
 800f370:	46bd      	mov	sp, r7
 800f372:	bd80      	pop	{r7, pc}
 800f374:	e000ed00 	.word	0xe000ed00
 800f378:	410fc271 	.word	0x410fc271
 800f37c:	410fc270 	.word	0x410fc270
 800f380:	e000e400 	.word	0xe000e400
 800f384:	200237bc 	.word	0x200237bc
 800f388:	200237c0 	.word	0x200237c0
 800f38c:	e000ed20 	.word	0xe000ed20
 800f390:	20000034 	.word	0x20000034
 800f394:	e000ef34 	.word	0xe000ef34

0800f398 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800f398:	b480      	push	{r7}
 800f39a:	b083      	sub	sp, #12
 800f39c:	af00      	add	r7, sp, #0
	__asm volatile
 800f39e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f3a2:	f383 8811 	msr	BASEPRI, r3
 800f3a6:	f3bf 8f6f 	isb	sy
 800f3aa:	f3bf 8f4f 	dsb	sy
 800f3ae:	607b      	str	r3, [r7, #4]
}
 800f3b0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800f3b2:	4b10      	ldr	r3, [pc, #64]	@ (800f3f4 <vPortEnterCritical+0x5c>)
 800f3b4:	681b      	ldr	r3, [r3, #0]
 800f3b6:	3301      	adds	r3, #1
 800f3b8:	4a0e      	ldr	r2, [pc, #56]	@ (800f3f4 <vPortEnterCritical+0x5c>)
 800f3ba:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800f3bc:	4b0d      	ldr	r3, [pc, #52]	@ (800f3f4 <vPortEnterCritical+0x5c>)
 800f3be:	681b      	ldr	r3, [r3, #0]
 800f3c0:	2b01      	cmp	r3, #1
 800f3c2:	d110      	bne.n	800f3e6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800f3c4:	4b0c      	ldr	r3, [pc, #48]	@ (800f3f8 <vPortEnterCritical+0x60>)
 800f3c6:	681b      	ldr	r3, [r3, #0]
 800f3c8:	b2db      	uxtb	r3, r3
 800f3ca:	2b00      	cmp	r3, #0
 800f3cc:	d00b      	beq.n	800f3e6 <vPortEnterCritical+0x4e>
	__asm volatile
 800f3ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f3d2:	f383 8811 	msr	BASEPRI, r3
 800f3d6:	f3bf 8f6f 	isb	sy
 800f3da:	f3bf 8f4f 	dsb	sy
 800f3de:	603b      	str	r3, [r7, #0]
}
 800f3e0:	bf00      	nop
 800f3e2:	bf00      	nop
 800f3e4:	e7fd      	b.n	800f3e2 <vPortEnterCritical+0x4a>
	}
}
 800f3e6:	bf00      	nop
 800f3e8:	370c      	adds	r7, #12
 800f3ea:	46bd      	mov	sp, r7
 800f3ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3f0:	4770      	bx	lr
 800f3f2:	bf00      	nop
 800f3f4:	20000034 	.word	0x20000034
 800f3f8:	e000ed04 	.word	0xe000ed04

0800f3fc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800f3fc:	b480      	push	{r7}
 800f3fe:	b083      	sub	sp, #12
 800f400:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800f402:	4b12      	ldr	r3, [pc, #72]	@ (800f44c <vPortExitCritical+0x50>)
 800f404:	681b      	ldr	r3, [r3, #0]
 800f406:	2b00      	cmp	r3, #0
 800f408:	d10b      	bne.n	800f422 <vPortExitCritical+0x26>
	__asm volatile
 800f40a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f40e:	f383 8811 	msr	BASEPRI, r3
 800f412:	f3bf 8f6f 	isb	sy
 800f416:	f3bf 8f4f 	dsb	sy
 800f41a:	607b      	str	r3, [r7, #4]
}
 800f41c:	bf00      	nop
 800f41e:	bf00      	nop
 800f420:	e7fd      	b.n	800f41e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800f422:	4b0a      	ldr	r3, [pc, #40]	@ (800f44c <vPortExitCritical+0x50>)
 800f424:	681b      	ldr	r3, [r3, #0]
 800f426:	3b01      	subs	r3, #1
 800f428:	4a08      	ldr	r2, [pc, #32]	@ (800f44c <vPortExitCritical+0x50>)
 800f42a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800f42c:	4b07      	ldr	r3, [pc, #28]	@ (800f44c <vPortExitCritical+0x50>)
 800f42e:	681b      	ldr	r3, [r3, #0]
 800f430:	2b00      	cmp	r3, #0
 800f432:	d105      	bne.n	800f440 <vPortExitCritical+0x44>
 800f434:	2300      	movs	r3, #0
 800f436:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f438:	683b      	ldr	r3, [r7, #0]
 800f43a:	f383 8811 	msr	BASEPRI, r3
}
 800f43e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800f440:	bf00      	nop
 800f442:	370c      	adds	r7, #12
 800f444:	46bd      	mov	sp, r7
 800f446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f44a:	4770      	bx	lr
 800f44c:	20000034 	.word	0x20000034

0800f450 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800f450:	f3ef 8009 	mrs	r0, PSP
 800f454:	f3bf 8f6f 	isb	sy
 800f458:	4b15      	ldr	r3, [pc, #84]	@ (800f4b0 <pxCurrentTCBConst>)
 800f45a:	681a      	ldr	r2, [r3, #0]
 800f45c:	f01e 0f10 	tst.w	lr, #16
 800f460:	bf08      	it	eq
 800f462:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800f466:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f46a:	6010      	str	r0, [r2, #0]
 800f46c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800f470:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800f474:	f380 8811 	msr	BASEPRI, r0
 800f478:	f3bf 8f4f 	dsb	sy
 800f47c:	f3bf 8f6f 	isb	sy
 800f480:	f7fe ffce 	bl	800e420 <vTaskSwitchContext>
 800f484:	f04f 0000 	mov.w	r0, #0
 800f488:	f380 8811 	msr	BASEPRI, r0
 800f48c:	bc09      	pop	{r0, r3}
 800f48e:	6819      	ldr	r1, [r3, #0]
 800f490:	6808      	ldr	r0, [r1, #0]
 800f492:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f496:	f01e 0f10 	tst.w	lr, #16
 800f49a:	bf08      	it	eq
 800f49c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800f4a0:	f380 8809 	msr	PSP, r0
 800f4a4:	f3bf 8f6f 	isb	sy
 800f4a8:	4770      	bx	lr
 800f4aa:	bf00      	nop
 800f4ac:	f3af 8000 	nop.w

0800f4b0 <pxCurrentTCBConst>:
 800f4b0:	20023594 	.word	0x20023594
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800f4b4:	bf00      	nop
 800f4b6:	bf00      	nop

0800f4b8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800f4b8:	b580      	push	{r7, lr}
 800f4ba:	b082      	sub	sp, #8
 800f4bc:	af00      	add	r7, sp, #0
	__asm volatile
 800f4be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f4c2:	f383 8811 	msr	BASEPRI, r3
 800f4c6:	f3bf 8f6f 	isb	sy
 800f4ca:	f3bf 8f4f 	dsb	sy
 800f4ce:	607b      	str	r3, [r7, #4]
}
 800f4d0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800f4d2:	f7fe feeb 	bl	800e2ac <xTaskIncrementTick>
 800f4d6:	4603      	mov	r3, r0
 800f4d8:	2b00      	cmp	r3, #0
 800f4da:	d003      	beq.n	800f4e4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800f4dc:	4b06      	ldr	r3, [pc, #24]	@ (800f4f8 <SysTick_Handler+0x40>)
 800f4de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f4e2:	601a      	str	r2, [r3, #0]
 800f4e4:	2300      	movs	r3, #0
 800f4e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f4e8:	683b      	ldr	r3, [r7, #0]
 800f4ea:	f383 8811 	msr	BASEPRI, r3
}
 800f4ee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800f4f0:	bf00      	nop
 800f4f2:	3708      	adds	r7, #8
 800f4f4:	46bd      	mov	sp, r7
 800f4f6:	bd80      	pop	{r7, pc}
 800f4f8:	e000ed04 	.word	0xe000ed04

0800f4fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800f4fc:	b480      	push	{r7}
 800f4fe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800f500:	4b0b      	ldr	r3, [pc, #44]	@ (800f530 <vPortSetupTimerInterrupt+0x34>)
 800f502:	2200      	movs	r2, #0
 800f504:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800f506:	4b0b      	ldr	r3, [pc, #44]	@ (800f534 <vPortSetupTimerInterrupt+0x38>)
 800f508:	2200      	movs	r2, #0
 800f50a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800f50c:	4b0a      	ldr	r3, [pc, #40]	@ (800f538 <vPortSetupTimerInterrupt+0x3c>)
 800f50e:	681b      	ldr	r3, [r3, #0]
 800f510:	4a0a      	ldr	r2, [pc, #40]	@ (800f53c <vPortSetupTimerInterrupt+0x40>)
 800f512:	fba2 2303 	umull	r2, r3, r2, r3
 800f516:	099b      	lsrs	r3, r3, #6
 800f518:	4a09      	ldr	r2, [pc, #36]	@ (800f540 <vPortSetupTimerInterrupt+0x44>)
 800f51a:	3b01      	subs	r3, #1
 800f51c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800f51e:	4b04      	ldr	r3, [pc, #16]	@ (800f530 <vPortSetupTimerInterrupt+0x34>)
 800f520:	2207      	movs	r2, #7
 800f522:	601a      	str	r2, [r3, #0]
}
 800f524:	bf00      	nop
 800f526:	46bd      	mov	sp, r7
 800f528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f52c:	4770      	bx	lr
 800f52e:	bf00      	nop
 800f530:	e000e010 	.word	0xe000e010
 800f534:	e000e018 	.word	0xe000e018
 800f538:	20000028 	.word	0x20000028
 800f53c:	10624dd3 	.word	0x10624dd3
 800f540:	e000e014 	.word	0xe000e014

0800f544 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800f544:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800f554 <vPortEnableVFP+0x10>
 800f548:	6801      	ldr	r1, [r0, #0]
 800f54a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800f54e:	6001      	str	r1, [r0, #0]
 800f550:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800f552:	bf00      	nop
 800f554:	e000ed88 	.word	0xe000ed88

0800f558 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800f558:	b480      	push	{r7}
 800f55a:	b085      	sub	sp, #20
 800f55c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800f55e:	f3ef 8305 	mrs	r3, IPSR
 800f562:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800f564:	68fb      	ldr	r3, [r7, #12]
 800f566:	2b0f      	cmp	r3, #15
 800f568:	d915      	bls.n	800f596 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800f56a:	4a18      	ldr	r2, [pc, #96]	@ (800f5cc <vPortValidateInterruptPriority+0x74>)
 800f56c:	68fb      	ldr	r3, [r7, #12]
 800f56e:	4413      	add	r3, r2
 800f570:	781b      	ldrb	r3, [r3, #0]
 800f572:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800f574:	4b16      	ldr	r3, [pc, #88]	@ (800f5d0 <vPortValidateInterruptPriority+0x78>)
 800f576:	781b      	ldrb	r3, [r3, #0]
 800f578:	7afa      	ldrb	r2, [r7, #11]
 800f57a:	429a      	cmp	r2, r3
 800f57c:	d20b      	bcs.n	800f596 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800f57e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f582:	f383 8811 	msr	BASEPRI, r3
 800f586:	f3bf 8f6f 	isb	sy
 800f58a:	f3bf 8f4f 	dsb	sy
 800f58e:	607b      	str	r3, [r7, #4]
}
 800f590:	bf00      	nop
 800f592:	bf00      	nop
 800f594:	e7fd      	b.n	800f592 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800f596:	4b0f      	ldr	r3, [pc, #60]	@ (800f5d4 <vPortValidateInterruptPriority+0x7c>)
 800f598:	681b      	ldr	r3, [r3, #0]
 800f59a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800f59e:	4b0e      	ldr	r3, [pc, #56]	@ (800f5d8 <vPortValidateInterruptPriority+0x80>)
 800f5a0:	681b      	ldr	r3, [r3, #0]
 800f5a2:	429a      	cmp	r2, r3
 800f5a4:	d90b      	bls.n	800f5be <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800f5a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f5aa:	f383 8811 	msr	BASEPRI, r3
 800f5ae:	f3bf 8f6f 	isb	sy
 800f5b2:	f3bf 8f4f 	dsb	sy
 800f5b6:	603b      	str	r3, [r7, #0]
}
 800f5b8:	bf00      	nop
 800f5ba:	bf00      	nop
 800f5bc:	e7fd      	b.n	800f5ba <vPortValidateInterruptPriority+0x62>
	}
 800f5be:	bf00      	nop
 800f5c0:	3714      	adds	r7, #20
 800f5c2:	46bd      	mov	sp, r7
 800f5c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5c8:	4770      	bx	lr
 800f5ca:	bf00      	nop
 800f5cc:	e000e3f0 	.word	0xe000e3f0
 800f5d0:	200237bc 	.word	0x200237bc
 800f5d4:	e000ed0c 	.word	0xe000ed0c
 800f5d8:	200237c0 	.word	0x200237c0

0800f5dc <malloc>:
 800f5dc:	4b02      	ldr	r3, [pc, #8]	@ (800f5e8 <malloc+0xc>)
 800f5de:	4601      	mov	r1, r0
 800f5e0:	6818      	ldr	r0, [r3, #0]
 800f5e2:	f000 b82d 	b.w	800f640 <_malloc_r>
 800f5e6:	bf00      	nop
 800f5e8:	20000044 	.word	0x20000044

0800f5ec <free>:
 800f5ec:	4b02      	ldr	r3, [pc, #8]	@ (800f5f8 <free+0xc>)
 800f5ee:	4601      	mov	r1, r0
 800f5f0:	6818      	ldr	r0, [r3, #0]
 800f5f2:	f001 bdfd 	b.w	80111f0 <_free_r>
 800f5f6:	bf00      	nop
 800f5f8:	20000044 	.word	0x20000044

0800f5fc <sbrk_aligned>:
 800f5fc:	b570      	push	{r4, r5, r6, lr}
 800f5fe:	4e0f      	ldr	r6, [pc, #60]	@ (800f63c <sbrk_aligned+0x40>)
 800f600:	460c      	mov	r4, r1
 800f602:	6831      	ldr	r1, [r6, #0]
 800f604:	4605      	mov	r5, r0
 800f606:	b911      	cbnz	r1, 800f60e <sbrk_aligned+0x12>
 800f608:	f000 ff48 	bl	801049c <_sbrk_r>
 800f60c:	6030      	str	r0, [r6, #0]
 800f60e:	4621      	mov	r1, r4
 800f610:	4628      	mov	r0, r5
 800f612:	f000 ff43 	bl	801049c <_sbrk_r>
 800f616:	1c43      	adds	r3, r0, #1
 800f618:	d103      	bne.n	800f622 <sbrk_aligned+0x26>
 800f61a:	f04f 34ff 	mov.w	r4, #4294967295
 800f61e:	4620      	mov	r0, r4
 800f620:	bd70      	pop	{r4, r5, r6, pc}
 800f622:	1cc4      	adds	r4, r0, #3
 800f624:	f024 0403 	bic.w	r4, r4, #3
 800f628:	42a0      	cmp	r0, r4
 800f62a:	d0f8      	beq.n	800f61e <sbrk_aligned+0x22>
 800f62c:	1a21      	subs	r1, r4, r0
 800f62e:	4628      	mov	r0, r5
 800f630:	f000 ff34 	bl	801049c <_sbrk_r>
 800f634:	3001      	adds	r0, #1
 800f636:	d1f2      	bne.n	800f61e <sbrk_aligned+0x22>
 800f638:	e7ef      	b.n	800f61a <sbrk_aligned+0x1e>
 800f63a:	bf00      	nop
 800f63c:	200237c4 	.word	0x200237c4

0800f640 <_malloc_r>:
 800f640:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f644:	1ccd      	adds	r5, r1, #3
 800f646:	f025 0503 	bic.w	r5, r5, #3
 800f64a:	3508      	adds	r5, #8
 800f64c:	2d0c      	cmp	r5, #12
 800f64e:	bf38      	it	cc
 800f650:	250c      	movcc	r5, #12
 800f652:	2d00      	cmp	r5, #0
 800f654:	4606      	mov	r6, r0
 800f656:	db01      	blt.n	800f65c <_malloc_r+0x1c>
 800f658:	42a9      	cmp	r1, r5
 800f65a:	d904      	bls.n	800f666 <_malloc_r+0x26>
 800f65c:	230c      	movs	r3, #12
 800f65e:	6033      	str	r3, [r6, #0]
 800f660:	2000      	movs	r0, #0
 800f662:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f666:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800f73c <_malloc_r+0xfc>
 800f66a:	f000 f869 	bl	800f740 <__malloc_lock>
 800f66e:	f8d8 3000 	ldr.w	r3, [r8]
 800f672:	461c      	mov	r4, r3
 800f674:	bb44      	cbnz	r4, 800f6c8 <_malloc_r+0x88>
 800f676:	4629      	mov	r1, r5
 800f678:	4630      	mov	r0, r6
 800f67a:	f7ff ffbf 	bl	800f5fc <sbrk_aligned>
 800f67e:	1c43      	adds	r3, r0, #1
 800f680:	4604      	mov	r4, r0
 800f682:	d158      	bne.n	800f736 <_malloc_r+0xf6>
 800f684:	f8d8 4000 	ldr.w	r4, [r8]
 800f688:	4627      	mov	r7, r4
 800f68a:	2f00      	cmp	r7, #0
 800f68c:	d143      	bne.n	800f716 <_malloc_r+0xd6>
 800f68e:	2c00      	cmp	r4, #0
 800f690:	d04b      	beq.n	800f72a <_malloc_r+0xea>
 800f692:	6823      	ldr	r3, [r4, #0]
 800f694:	4639      	mov	r1, r7
 800f696:	4630      	mov	r0, r6
 800f698:	eb04 0903 	add.w	r9, r4, r3
 800f69c:	f000 fefe 	bl	801049c <_sbrk_r>
 800f6a0:	4581      	cmp	r9, r0
 800f6a2:	d142      	bne.n	800f72a <_malloc_r+0xea>
 800f6a4:	6821      	ldr	r1, [r4, #0]
 800f6a6:	1a6d      	subs	r5, r5, r1
 800f6a8:	4629      	mov	r1, r5
 800f6aa:	4630      	mov	r0, r6
 800f6ac:	f7ff ffa6 	bl	800f5fc <sbrk_aligned>
 800f6b0:	3001      	adds	r0, #1
 800f6b2:	d03a      	beq.n	800f72a <_malloc_r+0xea>
 800f6b4:	6823      	ldr	r3, [r4, #0]
 800f6b6:	442b      	add	r3, r5
 800f6b8:	6023      	str	r3, [r4, #0]
 800f6ba:	f8d8 3000 	ldr.w	r3, [r8]
 800f6be:	685a      	ldr	r2, [r3, #4]
 800f6c0:	bb62      	cbnz	r2, 800f71c <_malloc_r+0xdc>
 800f6c2:	f8c8 7000 	str.w	r7, [r8]
 800f6c6:	e00f      	b.n	800f6e8 <_malloc_r+0xa8>
 800f6c8:	6822      	ldr	r2, [r4, #0]
 800f6ca:	1b52      	subs	r2, r2, r5
 800f6cc:	d420      	bmi.n	800f710 <_malloc_r+0xd0>
 800f6ce:	2a0b      	cmp	r2, #11
 800f6d0:	d917      	bls.n	800f702 <_malloc_r+0xc2>
 800f6d2:	1961      	adds	r1, r4, r5
 800f6d4:	42a3      	cmp	r3, r4
 800f6d6:	6025      	str	r5, [r4, #0]
 800f6d8:	bf18      	it	ne
 800f6da:	6059      	strne	r1, [r3, #4]
 800f6dc:	6863      	ldr	r3, [r4, #4]
 800f6de:	bf08      	it	eq
 800f6e0:	f8c8 1000 	streq.w	r1, [r8]
 800f6e4:	5162      	str	r2, [r4, r5]
 800f6e6:	604b      	str	r3, [r1, #4]
 800f6e8:	4630      	mov	r0, r6
 800f6ea:	f000 f82f 	bl	800f74c <__malloc_unlock>
 800f6ee:	f104 000b 	add.w	r0, r4, #11
 800f6f2:	1d23      	adds	r3, r4, #4
 800f6f4:	f020 0007 	bic.w	r0, r0, #7
 800f6f8:	1ac2      	subs	r2, r0, r3
 800f6fa:	bf1c      	itt	ne
 800f6fc:	1a1b      	subne	r3, r3, r0
 800f6fe:	50a3      	strne	r3, [r4, r2]
 800f700:	e7af      	b.n	800f662 <_malloc_r+0x22>
 800f702:	6862      	ldr	r2, [r4, #4]
 800f704:	42a3      	cmp	r3, r4
 800f706:	bf0c      	ite	eq
 800f708:	f8c8 2000 	streq.w	r2, [r8]
 800f70c:	605a      	strne	r2, [r3, #4]
 800f70e:	e7eb      	b.n	800f6e8 <_malloc_r+0xa8>
 800f710:	4623      	mov	r3, r4
 800f712:	6864      	ldr	r4, [r4, #4]
 800f714:	e7ae      	b.n	800f674 <_malloc_r+0x34>
 800f716:	463c      	mov	r4, r7
 800f718:	687f      	ldr	r7, [r7, #4]
 800f71a:	e7b6      	b.n	800f68a <_malloc_r+0x4a>
 800f71c:	461a      	mov	r2, r3
 800f71e:	685b      	ldr	r3, [r3, #4]
 800f720:	42a3      	cmp	r3, r4
 800f722:	d1fb      	bne.n	800f71c <_malloc_r+0xdc>
 800f724:	2300      	movs	r3, #0
 800f726:	6053      	str	r3, [r2, #4]
 800f728:	e7de      	b.n	800f6e8 <_malloc_r+0xa8>
 800f72a:	230c      	movs	r3, #12
 800f72c:	6033      	str	r3, [r6, #0]
 800f72e:	4630      	mov	r0, r6
 800f730:	f000 f80c 	bl	800f74c <__malloc_unlock>
 800f734:	e794      	b.n	800f660 <_malloc_r+0x20>
 800f736:	6005      	str	r5, [r0, #0]
 800f738:	e7d6      	b.n	800f6e8 <_malloc_r+0xa8>
 800f73a:	bf00      	nop
 800f73c:	200237c8 	.word	0x200237c8

0800f740 <__malloc_lock>:
 800f740:	4801      	ldr	r0, [pc, #4]	@ (800f748 <__malloc_lock+0x8>)
 800f742:	f000 bef8 	b.w	8010536 <__retarget_lock_acquire_recursive>
 800f746:	bf00      	nop
 800f748:	2002390c 	.word	0x2002390c

0800f74c <__malloc_unlock>:
 800f74c:	4801      	ldr	r0, [pc, #4]	@ (800f754 <__malloc_unlock+0x8>)
 800f74e:	f000 bef3 	b.w	8010538 <__retarget_lock_release_recursive>
 800f752:	bf00      	nop
 800f754:	2002390c 	.word	0x2002390c

0800f758 <__cvt>:
 800f758:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f75c:	ec57 6b10 	vmov	r6, r7, d0
 800f760:	2f00      	cmp	r7, #0
 800f762:	460c      	mov	r4, r1
 800f764:	4619      	mov	r1, r3
 800f766:	463b      	mov	r3, r7
 800f768:	bfbb      	ittet	lt
 800f76a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800f76e:	461f      	movlt	r7, r3
 800f770:	2300      	movge	r3, #0
 800f772:	232d      	movlt	r3, #45	@ 0x2d
 800f774:	700b      	strb	r3, [r1, #0]
 800f776:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800f778:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800f77c:	4691      	mov	r9, r2
 800f77e:	f023 0820 	bic.w	r8, r3, #32
 800f782:	bfbc      	itt	lt
 800f784:	4632      	movlt	r2, r6
 800f786:	4616      	movlt	r6, r2
 800f788:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800f78c:	d005      	beq.n	800f79a <__cvt+0x42>
 800f78e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800f792:	d100      	bne.n	800f796 <__cvt+0x3e>
 800f794:	3401      	adds	r4, #1
 800f796:	2102      	movs	r1, #2
 800f798:	e000      	b.n	800f79c <__cvt+0x44>
 800f79a:	2103      	movs	r1, #3
 800f79c:	ab03      	add	r3, sp, #12
 800f79e:	9301      	str	r3, [sp, #4]
 800f7a0:	ab02      	add	r3, sp, #8
 800f7a2:	9300      	str	r3, [sp, #0]
 800f7a4:	ec47 6b10 	vmov	d0, r6, r7
 800f7a8:	4653      	mov	r3, sl
 800f7aa:	4622      	mov	r2, r4
 800f7ac:	f000 ff5c 	bl	8010668 <_dtoa_r>
 800f7b0:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800f7b4:	4605      	mov	r5, r0
 800f7b6:	d119      	bne.n	800f7ec <__cvt+0x94>
 800f7b8:	f019 0f01 	tst.w	r9, #1
 800f7bc:	d00e      	beq.n	800f7dc <__cvt+0x84>
 800f7be:	eb00 0904 	add.w	r9, r0, r4
 800f7c2:	2200      	movs	r2, #0
 800f7c4:	2300      	movs	r3, #0
 800f7c6:	4630      	mov	r0, r6
 800f7c8:	4639      	mov	r1, r7
 800f7ca:	f7f1 f985 	bl	8000ad8 <__aeabi_dcmpeq>
 800f7ce:	b108      	cbz	r0, 800f7d4 <__cvt+0x7c>
 800f7d0:	f8cd 900c 	str.w	r9, [sp, #12]
 800f7d4:	2230      	movs	r2, #48	@ 0x30
 800f7d6:	9b03      	ldr	r3, [sp, #12]
 800f7d8:	454b      	cmp	r3, r9
 800f7da:	d31e      	bcc.n	800f81a <__cvt+0xc2>
 800f7dc:	9b03      	ldr	r3, [sp, #12]
 800f7de:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f7e0:	1b5b      	subs	r3, r3, r5
 800f7e2:	4628      	mov	r0, r5
 800f7e4:	6013      	str	r3, [r2, #0]
 800f7e6:	b004      	add	sp, #16
 800f7e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f7ec:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800f7f0:	eb00 0904 	add.w	r9, r0, r4
 800f7f4:	d1e5      	bne.n	800f7c2 <__cvt+0x6a>
 800f7f6:	7803      	ldrb	r3, [r0, #0]
 800f7f8:	2b30      	cmp	r3, #48	@ 0x30
 800f7fa:	d10a      	bne.n	800f812 <__cvt+0xba>
 800f7fc:	2200      	movs	r2, #0
 800f7fe:	2300      	movs	r3, #0
 800f800:	4630      	mov	r0, r6
 800f802:	4639      	mov	r1, r7
 800f804:	f7f1 f968 	bl	8000ad8 <__aeabi_dcmpeq>
 800f808:	b918      	cbnz	r0, 800f812 <__cvt+0xba>
 800f80a:	f1c4 0401 	rsb	r4, r4, #1
 800f80e:	f8ca 4000 	str.w	r4, [sl]
 800f812:	f8da 3000 	ldr.w	r3, [sl]
 800f816:	4499      	add	r9, r3
 800f818:	e7d3      	b.n	800f7c2 <__cvt+0x6a>
 800f81a:	1c59      	adds	r1, r3, #1
 800f81c:	9103      	str	r1, [sp, #12]
 800f81e:	701a      	strb	r2, [r3, #0]
 800f820:	e7d9      	b.n	800f7d6 <__cvt+0x7e>

0800f822 <__exponent>:
 800f822:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f824:	2900      	cmp	r1, #0
 800f826:	bfba      	itte	lt
 800f828:	4249      	neglt	r1, r1
 800f82a:	232d      	movlt	r3, #45	@ 0x2d
 800f82c:	232b      	movge	r3, #43	@ 0x2b
 800f82e:	2909      	cmp	r1, #9
 800f830:	7002      	strb	r2, [r0, #0]
 800f832:	7043      	strb	r3, [r0, #1]
 800f834:	dd29      	ble.n	800f88a <__exponent+0x68>
 800f836:	f10d 0307 	add.w	r3, sp, #7
 800f83a:	461d      	mov	r5, r3
 800f83c:	270a      	movs	r7, #10
 800f83e:	461a      	mov	r2, r3
 800f840:	fbb1 f6f7 	udiv	r6, r1, r7
 800f844:	fb07 1416 	mls	r4, r7, r6, r1
 800f848:	3430      	adds	r4, #48	@ 0x30
 800f84a:	f802 4c01 	strb.w	r4, [r2, #-1]
 800f84e:	460c      	mov	r4, r1
 800f850:	2c63      	cmp	r4, #99	@ 0x63
 800f852:	f103 33ff 	add.w	r3, r3, #4294967295
 800f856:	4631      	mov	r1, r6
 800f858:	dcf1      	bgt.n	800f83e <__exponent+0x1c>
 800f85a:	3130      	adds	r1, #48	@ 0x30
 800f85c:	1e94      	subs	r4, r2, #2
 800f85e:	f803 1c01 	strb.w	r1, [r3, #-1]
 800f862:	1c41      	adds	r1, r0, #1
 800f864:	4623      	mov	r3, r4
 800f866:	42ab      	cmp	r3, r5
 800f868:	d30a      	bcc.n	800f880 <__exponent+0x5e>
 800f86a:	f10d 0309 	add.w	r3, sp, #9
 800f86e:	1a9b      	subs	r3, r3, r2
 800f870:	42ac      	cmp	r4, r5
 800f872:	bf88      	it	hi
 800f874:	2300      	movhi	r3, #0
 800f876:	3302      	adds	r3, #2
 800f878:	4403      	add	r3, r0
 800f87a:	1a18      	subs	r0, r3, r0
 800f87c:	b003      	add	sp, #12
 800f87e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f880:	f813 6b01 	ldrb.w	r6, [r3], #1
 800f884:	f801 6f01 	strb.w	r6, [r1, #1]!
 800f888:	e7ed      	b.n	800f866 <__exponent+0x44>
 800f88a:	2330      	movs	r3, #48	@ 0x30
 800f88c:	3130      	adds	r1, #48	@ 0x30
 800f88e:	7083      	strb	r3, [r0, #2]
 800f890:	70c1      	strb	r1, [r0, #3]
 800f892:	1d03      	adds	r3, r0, #4
 800f894:	e7f1      	b.n	800f87a <__exponent+0x58>
	...

0800f898 <_printf_float>:
 800f898:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f89c:	b08d      	sub	sp, #52	@ 0x34
 800f89e:	460c      	mov	r4, r1
 800f8a0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800f8a4:	4616      	mov	r6, r2
 800f8a6:	461f      	mov	r7, r3
 800f8a8:	4605      	mov	r5, r0
 800f8aa:	f000 fdbf 	bl	801042c <_localeconv_r>
 800f8ae:	6803      	ldr	r3, [r0, #0]
 800f8b0:	9304      	str	r3, [sp, #16]
 800f8b2:	4618      	mov	r0, r3
 800f8b4:	f7f0 fce4 	bl	8000280 <strlen>
 800f8b8:	2300      	movs	r3, #0
 800f8ba:	930a      	str	r3, [sp, #40]	@ 0x28
 800f8bc:	f8d8 3000 	ldr.w	r3, [r8]
 800f8c0:	9005      	str	r0, [sp, #20]
 800f8c2:	3307      	adds	r3, #7
 800f8c4:	f023 0307 	bic.w	r3, r3, #7
 800f8c8:	f103 0208 	add.w	r2, r3, #8
 800f8cc:	f894 a018 	ldrb.w	sl, [r4, #24]
 800f8d0:	f8d4 b000 	ldr.w	fp, [r4]
 800f8d4:	f8c8 2000 	str.w	r2, [r8]
 800f8d8:	e9d3 8900 	ldrd	r8, r9, [r3]
 800f8dc:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800f8e0:	9307      	str	r3, [sp, #28]
 800f8e2:	f8cd 8018 	str.w	r8, [sp, #24]
 800f8e6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800f8ea:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f8ee:	4b9c      	ldr	r3, [pc, #624]	@ (800fb60 <_printf_float+0x2c8>)
 800f8f0:	f04f 32ff 	mov.w	r2, #4294967295
 800f8f4:	f7f1 f922 	bl	8000b3c <__aeabi_dcmpun>
 800f8f8:	bb70      	cbnz	r0, 800f958 <_printf_float+0xc0>
 800f8fa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f8fe:	4b98      	ldr	r3, [pc, #608]	@ (800fb60 <_printf_float+0x2c8>)
 800f900:	f04f 32ff 	mov.w	r2, #4294967295
 800f904:	f7f1 f8fc 	bl	8000b00 <__aeabi_dcmple>
 800f908:	bb30      	cbnz	r0, 800f958 <_printf_float+0xc0>
 800f90a:	2200      	movs	r2, #0
 800f90c:	2300      	movs	r3, #0
 800f90e:	4640      	mov	r0, r8
 800f910:	4649      	mov	r1, r9
 800f912:	f7f1 f8eb 	bl	8000aec <__aeabi_dcmplt>
 800f916:	b110      	cbz	r0, 800f91e <_printf_float+0x86>
 800f918:	232d      	movs	r3, #45	@ 0x2d
 800f91a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f91e:	4a91      	ldr	r2, [pc, #580]	@ (800fb64 <_printf_float+0x2cc>)
 800f920:	4b91      	ldr	r3, [pc, #580]	@ (800fb68 <_printf_float+0x2d0>)
 800f922:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800f926:	bf94      	ite	ls
 800f928:	4690      	movls	r8, r2
 800f92a:	4698      	movhi	r8, r3
 800f92c:	2303      	movs	r3, #3
 800f92e:	6123      	str	r3, [r4, #16]
 800f930:	f02b 0304 	bic.w	r3, fp, #4
 800f934:	6023      	str	r3, [r4, #0]
 800f936:	f04f 0900 	mov.w	r9, #0
 800f93a:	9700      	str	r7, [sp, #0]
 800f93c:	4633      	mov	r3, r6
 800f93e:	aa0b      	add	r2, sp, #44	@ 0x2c
 800f940:	4621      	mov	r1, r4
 800f942:	4628      	mov	r0, r5
 800f944:	f000 f9d2 	bl	800fcec <_printf_common>
 800f948:	3001      	adds	r0, #1
 800f94a:	f040 808d 	bne.w	800fa68 <_printf_float+0x1d0>
 800f94e:	f04f 30ff 	mov.w	r0, #4294967295
 800f952:	b00d      	add	sp, #52	@ 0x34
 800f954:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f958:	4642      	mov	r2, r8
 800f95a:	464b      	mov	r3, r9
 800f95c:	4640      	mov	r0, r8
 800f95e:	4649      	mov	r1, r9
 800f960:	f7f1 f8ec 	bl	8000b3c <__aeabi_dcmpun>
 800f964:	b140      	cbz	r0, 800f978 <_printf_float+0xe0>
 800f966:	464b      	mov	r3, r9
 800f968:	2b00      	cmp	r3, #0
 800f96a:	bfbc      	itt	lt
 800f96c:	232d      	movlt	r3, #45	@ 0x2d
 800f96e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800f972:	4a7e      	ldr	r2, [pc, #504]	@ (800fb6c <_printf_float+0x2d4>)
 800f974:	4b7e      	ldr	r3, [pc, #504]	@ (800fb70 <_printf_float+0x2d8>)
 800f976:	e7d4      	b.n	800f922 <_printf_float+0x8a>
 800f978:	6863      	ldr	r3, [r4, #4]
 800f97a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800f97e:	9206      	str	r2, [sp, #24]
 800f980:	1c5a      	adds	r2, r3, #1
 800f982:	d13b      	bne.n	800f9fc <_printf_float+0x164>
 800f984:	2306      	movs	r3, #6
 800f986:	6063      	str	r3, [r4, #4]
 800f988:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800f98c:	2300      	movs	r3, #0
 800f98e:	6022      	str	r2, [r4, #0]
 800f990:	9303      	str	r3, [sp, #12]
 800f992:	ab0a      	add	r3, sp, #40	@ 0x28
 800f994:	e9cd a301 	strd	sl, r3, [sp, #4]
 800f998:	ab09      	add	r3, sp, #36	@ 0x24
 800f99a:	9300      	str	r3, [sp, #0]
 800f99c:	6861      	ldr	r1, [r4, #4]
 800f99e:	ec49 8b10 	vmov	d0, r8, r9
 800f9a2:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800f9a6:	4628      	mov	r0, r5
 800f9a8:	f7ff fed6 	bl	800f758 <__cvt>
 800f9ac:	9b06      	ldr	r3, [sp, #24]
 800f9ae:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800f9b0:	2b47      	cmp	r3, #71	@ 0x47
 800f9b2:	4680      	mov	r8, r0
 800f9b4:	d129      	bne.n	800fa0a <_printf_float+0x172>
 800f9b6:	1cc8      	adds	r0, r1, #3
 800f9b8:	db02      	blt.n	800f9c0 <_printf_float+0x128>
 800f9ba:	6863      	ldr	r3, [r4, #4]
 800f9bc:	4299      	cmp	r1, r3
 800f9be:	dd41      	ble.n	800fa44 <_printf_float+0x1ac>
 800f9c0:	f1aa 0a02 	sub.w	sl, sl, #2
 800f9c4:	fa5f fa8a 	uxtb.w	sl, sl
 800f9c8:	3901      	subs	r1, #1
 800f9ca:	4652      	mov	r2, sl
 800f9cc:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800f9d0:	9109      	str	r1, [sp, #36]	@ 0x24
 800f9d2:	f7ff ff26 	bl	800f822 <__exponent>
 800f9d6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800f9d8:	1813      	adds	r3, r2, r0
 800f9da:	2a01      	cmp	r2, #1
 800f9dc:	4681      	mov	r9, r0
 800f9de:	6123      	str	r3, [r4, #16]
 800f9e0:	dc02      	bgt.n	800f9e8 <_printf_float+0x150>
 800f9e2:	6822      	ldr	r2, [r4, #0]
 800f9e4:	07d2      	lsls	r2, r2, #31
 800f9e6:	d501      	bpl.n	800f9ec <_printf_float+0x154>
 800f9e8:	3301      	adds	r3, #1
 800f9ea:	6123      	str	r3, [r4, #16]
 800f9ec:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800f9f0:	2b00      	cmp	r3, #0
 800f9f2:	d0a2      	beq.n	800f93a <_printf_float+0xa2>
 800f9f4:	232d      	movs	r3, #45	@ 0x2d
 800f9f6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f9fa:	e79e      	b.n	800f93a <_printf_float+0xa2>
 800f9fc:	9a06      	ldr	r2, [sp, #24]
 800f9fe:	2a47      	cmp	r2, #71	@ 0x47
 800fa00:	d1c2      	bne.n	800f988 <_printf_float+0xf0>
 800fa02:	2b00      	cmp	r3, #0
 800fa04:	d1c0      	bne.n	800f988 <_printf_float+0xf0>
 800fa06:	2301      	movs	r3, #1
 800fa08:	e7bd      	b.n	800f986 <_printf_float+0xee>
 800fa0a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800fa0e:	d9db      	bls.n	800f9c8 <_printf_float+0x130>
 800fa10:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800fa14:	d118      	bne.n	800fa48 <_printf_float+0x1b0>
 800fa16:	2900      	cmp	r1, #0
 800fa18:	6863      	ldr	r3, [r4, #4]
 800fa1a:	dd0b      	ble.n	800fa34 <_printf_float+0x19c>
 800fa1c:	6121      	str	r1, [r4, #16]
 800fa1e:	b913      	cbnz	r3, 800fa26 <_printf_float+0x18e>
 800fa20:	6822      	ldr	r2, [r4, #0]
 800fa22:	07d0      	lsls	r0, r2, #31
 800fa24:	d502      	bpl.n	800fa2c <_printf_float+0x194>
 800fa26:	3301      	adds	r3, #1
 800fa28:	440b      	add	r3, r1
 800fa2a:	6123      	str	r3, [r4, #16]
 800fa2c:	65a1      	str	r1, [r4, #88]	@ 0x58
 800fa2e:	f04f 0900 	mov.w	r9, #0
 800fa32:	e7db      	b.n	800f9ec <_printf_float+0x154>
 800fa34:	b913      	cbnz	r3, 800fa3c <_printf_float+0x1a4>
 800fa36:	6822      	ldr	r2, [r4, #0]
 800fa38:	07d2      	lsls	r2, r2, #31
 800fa3a:	d501      	bpl.n	800fa40 <_printf_float+0x1a8>
 800fa3c:	3302      	adds	r3, #2
 800fa3e:	e7f4      	b.n	800fa2a <_printf_float+0x192>
 800fa40:	2301      	movs	r3, #1
 800fa42:	e7f2      	b.n	800fa2a <_printf_float+0x192>
 800fa44:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800fa48:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fa4a:	4299      	cmp	r1, r3
 800fa4c:	db05      	blt.n	800fa5a <_printf_float+0x1c2>
 800fa4e:	6823      	ldr	r3, [r4, #0]
 800fa50:	6121      	str	r1, [r4, #16]
 800fa52:	07d8      	lsls	r0, r3, #31
 800fa54:	d5ea      	bpl.n	800fa2c <_printf_float+0x194>
 800fa56:	1c4b      	adds	r3, r1, #1
 800fa58:	e7e7      	b.n	800fa2a <_printf_float+0x192>
 800fa5a:	2900      	cmp	r1, #0
 800fa5c:	bfd4      	ite	le
 800fa5e:	f1c1 0202 	rsble	r2, r1, #2
 800fa62:	2201      	movgt	r2, #1
 800fa64:	4413      	add	r3, r2
 800fa66:	e7e0      	b.n	800fa2a <_printf_float+0x192>
 800fa68:	6823      	ldr	r3, [r4, #0]
 800fa6a:	055a      	lsls	r2, r3, #21
 800fa6c:	d407      	bmi.n	800fa7e <_printf_float+0x1e6>
 800fa6e:	6923      	ldr	r3, [r4, #16]
 800fa70:	4642      	mov	r2, r8
 800fa72:	4631      	mov	r1, r6
 800fa74:	4628      	mov	r0, r5
 800fa76:	47b8      	blx	r7
 800fa78:	3001      	adds	r0, #1
 800fa7a:	d12b      	bne.n	800fad4 <_printf_float+0x23c>
 800fa7c:	e767      	b.n	800f94e <_printf_float+0xb6>
 800fa7e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800fa82:	f240 80dd 	bls.w	800fc40 <_printf_float+0x3a8>
 800fa86:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800fa8a:	2200      	movs	r2, #0
 800fa8c:	2300      	movs	r3, #0
 800fa8e:	f7f1 f823 	bl	8000ad8 <__aeabi_dcmpeq>
 800fa92:	2800      	cmp	r0, #0
 800fa94:	d033      	beq.n	800fafe <_printf_float+0x266>
 800fa96:	4a37      	ldr	r2, [pc, #220]	@ (800fb74 <_printf_float+0x2dc>)
 800fa98:	2301      	movs	r3, #1
 800fa9a:	4631      	mov	r1, r6
 800fa9c:	4628      	mov	r0, r5
 800fa9e:	47b8      	blx	r7
 800faa0:	3001      	adds	r0, #1
 800faa2:	f43f af54 	beq.w	800f94e <_printf_float+0xb6>
 800faa6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800faaa:	4543      	cmp	r3, r8
 800faac:	db02      	blt.n	800fab4 <_printf_float+0x21c>
 800faae:	6823      	ldr	r3, [r4, #0]
 800fab0:	07d8      	lsls	r0, r3, #31
 800fab2:	d50f      	bpl.n	800fad4 <_printf_float+0x23c>
 800fab4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800fab8:	4631      	mov	r1, r6
 800faba:	4628      	mov	r0, r5
 800fabc:	47b8      	blx	r7
 800fabe:	3001      	adds	r0, #1
 800fac0:	f43f af45 	beq.w	800f94e <_printf_float+0xb6>
 800fac4:	f04f 0900 	mov.w	r9, #0
 800fac8:	f108 38ff 	add.w	r8, r8, #4294967295
 800facc:	f104 0a1a 	add.w	sl, r4, #26
 800fad0:	45c8      	cmp	r8, r9
 800fad2:	dc09      	bgt.n	800fae8 <_printf_float+0x250>
 800fad4:	6823      	ldr	r3, [r4, #0]
 800fad6:	079b      	lsls	r3, r3, #30
 800fad8:	f100 8103 	bmi.w	800fce2 <_printf_float+0x44a>
 800fadc:	68e0      	ldr	r0, [r4, #12]
 800fade:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800fae0:	4298      	cmp	r0, r3
 800fae2:	bfb8      	it	lt
 800fae4:	4618      	movlt	r0, r3
 800fae6:	e734      	b.n	800f952 <_printf_float+0xba>
 800fae8:	2301      	movs	r3, #1
 800faea:	4652      	mov	r2, sl
 800faec:	4631      	mov	r1, r6
 800faee:	4628      	mov	r0, r5
 800faf0:	47b8      	blx	r7
 800faf2:	3001      	adds	r0, #1
 800faf4:	f43f af2b 	beq.w	800f94e <_printf_float+0xb6>
 800faf8:	f109 0901 	add.w	r9, r9, #1
 800fafc:	e7e8      	b.n	800fad0 <_printf_float+0x238>
 800fafe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fb00:	2b00      	cmp	r3, #0
 800fb02:	dc39      	bgt.n	800fb78 <_printf_float+0x2e0>
 800fb04:	4a1b      	ldr	r2, [pc, #108]	@ (800fb74 <_printf_float+0x2dc>)
 800fb06:	2301      	movs	r3, #1
 800fb08:	4631      	mov	r1, r6
 800fb0a:	4628      	mov	r0, r5
 800fb0c:	47b8      	blx	r7
 800fb0e:	3001      	adds	r0, #1
 800fb10:	f43f af1d 	beq.w	800f94e <_printf_float+0xb6>
 800fb14:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800fb18:	ea59 0303 	orrs.w	r3, r9, r3
 800fb1c:	d102      	bne.n	800fb24 <_printf_float+0x28c>
 800fb1e:	6823      	ldr	r3, [r4, #0]
 800fb20:	07d9      	lsls	r1, r3, #31
 800fb22:	d5d7      	bpl.n	800fad4 <_printf_float+0x23c>
 800fb24:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800fb28:	4631      	mov	r1, r6
 800fb2a:	4628      	mov	r0, r5
 800fb2c:	47b8      	blx	r7
 800fb2e:	3001      	adds	r0, #1
 800fb30:	f43f af0d 	beq.w	800f94e <_printf_float+0xb6>
 800fb34:	f04f 0a00 	mov.w	sl, #0
 800fb38:	f104 0b1a 	add.w	fp, r4, #26
 800fb3c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fb3e:	425b      	negs	r3, r3
 800fb40:	4553      	cmp	r3, sl
 800fb42:	dc01      	bgt.n	800fb48 <_printf_float+0x2b0>
 800fb44:	464b      	mov	r3, r9
 800fb46:	e793      	b.n	800fa70 <_printf_float+0x1d8>
 800fb48:	2301      	movs	r3, #1
 800fb4a:	465a      	mov	r2, fp
 800fb4c:	4631      	mov	r1, r6
 800fb4e:	4628      	mov	r0, r5
 800fb50:	47b8      	blx	r7
 800fb52:	3001      	adds	r0, #1
 800fb54:	f43f aefb 	beq.w	800f94e <_printf_float+0xb6>
 800fb58:	f10a 0a01 	add.w	sl, sl, #1
 800fb5c:	e7ee      	b.n	800fb3c <_printf_float+0x2a4>
 800fb5e:	bf00      	nop
 800fb60:	7fefffff 	.word	0x7fefffff
 800fb64:	08012a6c 	.word	0x08012a6c
 800fb68:	08012a70 	.word	0x08012a70
 800fb6c:	08012a74 	.word	0x08012a74
 800fb70:	08012a78 	.word	0x08012a78
 800fb74:	08012a7c 	.word	0x08012a7c
 800fb78:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800fb7a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800fb7e:	4553      	cmp	r3, sl
 800fb80:	bfa8      	it	ge
 800fb82:	4653      	movge	r3, sl
 800fb84:	2b00      	cmp	r3, #0
 800fb86:	4699      	mov	r9, r3
 800fb88:	dc36      	bgt.n	800fbf8 <_printf_float+0x360>
 800fb8a:	f04f 0b00 	mov.w	fp, #0
 800fb8e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800fb92:	f104 021a 	add.w	r2, r4, #26
 800fb96:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800fb98:	9306      	str	r3, [sp, #24]
 800fb9a:	eba3 0309 	sub.w	r3, r3, r9
 800fb9e:	455b      	cmp	r3, fp
 800fba0:	dc31      	bgt.n	800fc06 <_printf_float+0x36e>
 800fba2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fba4:	459a      	cmp	sl, r3
 800fba6:	dc3a      	bgt.n	800fc1e <_printf_float+0x386>
 800fba8:	6823      	ldr	r3, [r4, #0]
 800fbaa:	07da      	lsls	r2, r3, #31
 800fbac:	d437      	bmi.n	800fc1e <_printf_float+0x386>
 800fbae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fbb0:	ebaa 0903 	sub.w	r9, sl, r3
 800fbb4:	9b06      	ldr	r3, [sp, #24]
 800fbb6:	ebaa 0303 	sub.w	r3, sl, r3
 800fbba:	4599      	cmp	r9, r3
 800fbbc:	bfa8      	it	ge
 800fbbe:	4699      	movge	r9, r3
 800fbc0:	f1b9 0f00 	cmp.w	r9, #0
 800fbc4:	dc33      	bgt.n	800fc2e <_printf_float+0x396>
 800fbc6:	f04f 0800 	mov.w	r8, #0
 800fbca:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800fbce:	f104 0b1a 	add.w	fp, r4, #26
 800fbd2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fbd4:	ebaa 0303 	sub.w	r3, sl, r3
 800fbd8:	eba3 0309 	sub.w	r3, r3, r9
 800fbdc:	4543      	cmp	r3, r8
 800fbde:	f77f af79 	ble.w	800fad4 <_printf_float+0x23c>
 800fbe2:	2301      	movs	r3, #1
 800fbe4:	465a      	mov	r2, fp
 800fbe6:	4631      	mov	r1, r6
 800fbe8:	4628      	mov	r0, r5
 800fbea:	47b8      	blx	r7
 800fbec:	3001      	adds	r0, #1
 800fbee:	f43f aeae 	beq.w	800f94e <_printf_float+0xb6>
 800fbf2:	f108 0801 	add.w	r8, r8, #1
 800fbf6:	e7ec      	b.n	800fbd2 <_printf_float+0x33a>
 800fbf8:	4642      	mov	r2, r8
 800fbfa:	4631      	mov	r1, r6
 800fbfc:	4628      	mov	r0, r5
 800fbfe:	47b8      	blx	r7
 800fc00:	3001      	adds	r0, #1
 800fc02:	d1c2      	bne.n	800fb8a <_printf_float+0x2f2>
 800fc04:	e6a3      	b.n	800f94e <_printf_float+0xb6>
 800fc06:	2301      	movs	r3, #1
 800fc08:	4631      	mov	r1, r6
 800fc0a:	4628      	mov	r0, r5
 800fc0c:	9206      	str	r2, [sp, #24]
 800fc0e:	47b8      	blx	r7
 800fc10:	3001      	adds	r0, #1
 800fc12:	f43f ae9c 	beq.w	800f94e <_printf_float+0xb6>
 800fc16:	9a06      	ldr	r2, [sp, #24]
 800fc18:	f10b 0b01 	add.w	fp, fp, #1
 800fc1c:	e7bb      	b.n	800fb96 <_printf_float+0x2fe>
 800fc1e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800fc22:	4631      	mov	r1, r6
 800fc24:	4628      	mov	r0, r5
 800fc26:	47b8      	blx	r7
 800fc28:	3001      	adds	r0, #1
 800fc2a:	d1c0      	bne.n	800fbae <_printf_float+0x316>
 800fc2c:	e68f      	b.n	800f94e <_printf_float+0xb6>
 800fc2e:	9a06      	ldr	r2, [sp, #24]
 800fc30:	464b      	mov	r3, r9
 800fc32:	4442      	add	r2, r8
 800fc34:	4631      	mov	r1, r6
 800fc36:	4628      	mov	r0, r5
 800fc38:	47b8      	blx	r7
 800fc3a:	3001      	adds	r0, #1
 800fc3c:	d1c3      	bne.n	800fbc6 <_printf_float+0x32e>
 800fc3e:	e686      	b.n	800f94e <_printf_float+0xb6>
 800fc40:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800fc44:	f1ba 0f01 	cmp.w	sl, #1
 800fc48:	dc01      	bgt.n	800fc4e <_printf_float+0x3b6>
 800fc4a:	07db      	lsls	r3, r3, #31
 800fc4c:	d536      	bpl.n	800fcbc <_printf_float+0x424>
 800fc4e:	2301      	movs	r3, #1
 800fc50:	4642      	mov	r2, r8
 800fc52:	4631      	mov	r1, r6
 800fc54:	4628      	mov	r0, r5
 800fc56:	47b8      	blx	r7
 800fc58:	3001      	adds	r0, #1
 800fc5a:	f43f ae78 	beq.w	800f94e <_printf_float+0xb6>
 800fc5e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800fc62:	4631      	mov	r1, r6
 800fc64:	4628      	mov	r0, r5
 800fc66:	47b8      	blx	r7
 800fc68:	3001      	adds	r0, #1
 800fc6a:	f43f ae70 	beq.w	800f94e <_printf_float+0xb6>
 800fc6e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800fc72:	2200      	movs	r2, #0
 800fc74:	2300      	movs	r3, #0
 800fc76:	f10a 3aff 	add.w	sl, sl, #4294967295
 800fc7a:	f7f0 ff2d 	bl	8000ad8 <__aeabi_dcmpeq>
 800fc7e:	b9c0      	cbnz	r0, 800fcb2 <_printf_float+0x41a>
 800fc80:	4653      	mov	r3, sl
 800fc82:	f108 0201 	add.w	r2, r8, #1
 800fc86:	4631      	mov	r1, r6
 800fc88:	4628      	mov	r0, r5
 800fc8a:	47b8      	blx	r7
 800fc8c:	3001      	adds	r0, #1
 800fc8e:	d10c      	bne.n	800fcaa <_printf_float+0x412>
 800fc90:	e65d      	b.n	800f94e <_printf_float+0xb6>
 800fc92:	2301      	movs	r3, #1
 800fc94:	465a      	mov	r2, fp
 800fc96:	4631      	mov	r1, r6
 800fc98:	4628      	mov	r0, r5
 800fc9a:	47b8      	blx	r7
 800fc9c:	3001      	adds	r0, #1
 800fc9e:	f43f ae56 	beq.w	800f94e <_printf_float+0xb6>
 800fca2:	f108 0801 	add.w	r8, r8, #1
 800fca6:	45d0      	cmp	r8, sl
 800fca8:	dbf3      	blt.n	800fc92 <_printf_float+0x3fa>
 800fcaa:	464b      	mov	r3, r9
 800fcac:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800fcb0:	e6df      	b.n	800fa72 <_printf_float+0x1da>
 800fcb2:	f04f 0800 	mov.w	r8, #0
 800fcb6:	f104 0b1a 	add.w	fp, r4, #26
 800fcba:	e7f4      	b.n	800fca6 <_printf_float+0x40e>
 800fcbc:	2301      	movs	r3, #1
 800fcbe:	4642      	mov	r2, r8
 800fcc0:	e7e1      	b.n	800fc86 <_printf_float+0x3ee>
 800fcc2:	2301      	movs	r3, #1
 800fcc4:	464a      	mov	r2, r9
 800fcc6:	4631      	mov	r1, r6
 800fcc8:	4628      	mov	r0, r5
 800fcca:	47b8      	blx	r7
 800fccc:	3001      	adds	r0, #1
 800fcce:	f43f ae3e 	beq.w	800f94e <_printf_float+0xb6>
 800fcd2:	f108 0801 	add.w	r8, r8, #1
 800fcd6:	68e3      	ldr	r3, [r4, #12]
 800fcd8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800fcda:	1a5b      	subs	r3, r3, r1
 800fcdc:	4543      	cmp	r3, r8
 800fcde:	dcf0      	bgt.n	800fcc2 <_printf_float+0x42a>
 800fce0:	e6fc      	b.n	800fadc <_printf_float+0x244>
 800fce2:	f04f 0800 	mov.w	r8, #0
 800fce6:	f104 0919 	add.w	r9, r4, #25
 800fcea:	e7f4      	b.n	800fcd6 <_printf_float+0x43e>

0800fcec <_printf_common>:
 800fcec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fcf0:	4616      	mov	r6, r2
 800fcf2:	4698      	mov	r8, r3
 800fcf4:	688a      	ldr	r2, [r1, #8]
 800fcf6:	690b      	ldr	r3, [r1, #16]
 800fcf8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800fcfc:	4293      	cmp	r3, r2
 800fcfe:	bfb8      	it	lt
 800fd00:	4613      	movlt	r3, r2
 800fd02:	6033      	str	r3, [r6, #0]
 800fd04:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800fd08:	4607      	mov	r7, r0
 800fd0a:	460c      	mov	r4, r1
 800fd0c:	b10a      	cbz	r2, 800fd12 <_printf_common+0x26>
 800fd0e:	3301      	adds	r3, #1
 800fd10:	6033      	str	r3, [r6, #0]
 800fd12:	6823      	ldr	r3, [r4, #0]
 800fd14:	0699      	lsls	r1, r3, #26
 800fd16:	bf42      	ittt	mi
 800fd18:	6833      	ldrmi	r3, [r6, #0]
 800fd1a:	3302      	addmi	r3, #2
 800fd1c:	6033      	strmi	r3, [r6, #0]
 800fd1e:	6825      	ldr	r5, [r4, #0]
 800fd20:	f015 0506 	ands.w	r5, r5, #6
 800fd24:	d106      	bne.n	800fd34 <_printf_common+0x48>
 800fd26:	f104 0a19 	add.w	sl, r4, #25
 800fd2a:	68e3      	ldr	r3, [r4, #12]
 800fd2c:	6832      	ldr	r2, [r6, #0]
 800fd2e:	1a9b      	subs	r3, r3, r2
 800fd30:	42ab      	cmp	r3, r5
 800fd32:	dc26      	bgt.n	800fd82 <_printf_common+0x96>
 800fd34:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800fd38:	6822      	ldr	r2, [r4, #0]
 800fd3a:	3b00      	subs	r3, #0
 800fd3c:	bf18      	it	ne
 800fd3e:	2301      	movne	r3, #1
 800fd40:	0692      	lsls	r2, r2, #26
 800fd42:	d42b      	bmi.n	800fd9c <_printf_common+0xb0>
 800fd44:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800fd48:	4641      	mov	r1, r8
 800fd4a:	4638      	mov	r0, r7
 800fd4c:	47c8      	blx	r9
 800fd4e:	3001      	adds	r0, #1
 800fd50:	d01e      	beq.n	800fd90 <_printf_common+0xa4>
 800fd52:	6823      	ldr	r3, [r4, #0]
 800fd54:	6922      	ldr	r2, [r4, #16]
 800fd56:	f003 0306 	and.w	r3, r3, #6
 800fd5a:	2b04      	cmp	r3, #4
 800fd5c:	bf02      	ittt	eq
 800fd5e:	68e5      	ldreq	r5, [r4, #12]
 800fd60:	6833      	ldreq	r3, [r6, #0]
 800fd62:	1aed      	subeq	r5, r5, r3
 800fd64:	68a3      	ldr	r3, [r4, #8]
 800fd66:	bf0c      	ite	eq
 800fd68:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800fd6c:	2500      	movne	r5, #0
 800fd6e:	4293      	cmp	r3, r2
 800fd70:	bfc4      	itt	gt
 800fd72:	1a9b      	subgt	r3, r3, r2
 800fd74:	18ed      	addgt	r5, r5, r3
 800fd76:	2600      	movs	r6, #0
 800fd78:	341a      	adds	r4, #26
 800fd7a:	42b5      	cmp	r5, r6
 800fd7c:	d11a      	bne.n	800fdb4 <_printf_common+0xc8>
 800fd7e:	2000      	movs	r0, #0
 800fd80:	e008      	b.n	800fd94 <_printf_common+0xa8>
 800fd82:	2301      	movs	r3, #1
 800fd84:	4652      	mov	r2, sl
 800fd86:	4641      	mov	r1, r8
 800fd88:	4638      	mov	r0, r7
 800fd8a:	47c8      	blx	r9
 800fd8c:	3001      	adds	r0, #1
 800fd8e:	d103      	bne.n	800fd98 <_printf_common+0xac>
 800fd90:	f04f 30ff 	mov.w	r0, #4294967295
 800fd94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fd98:	3501      	adds	r5, #1
 800fd9a:	e7c6      	b.n	800fd2a <_printf_common+0x3e>
 800fd9c:	18e1      	adds	r1, r4, r3
 800fd9e:	1c5a      	adds	r2, r3, #1
 800fda0:	2030      	movs	r0, #48	@ 0x30
 800fda2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800fda6:	4422      	add	r2, r4
 800fda8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800fdac:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800fdb0:	3302      	adds	r3, #2
 800fdb2:	e7c7      	b.n	800fd44 <_printf_common+0x58>
 800fdb4:	2301      	movs	r3, #1
 800fdb6:	4622      	mov	r2, r4
 800fdb8:	4641      	mov	r1, r8
 800fdba:	4638      	mov	r0, r7
 800fdbc:	47c8      	blx	r9
 800fdbe:	3001      	adds	r0, #1
 800fdc0:	d0e6      	beq.n	800fd90 <_printf_common+0xa4>
 800fdc2:	3601      	adds	r6, #1
 800fdc4:	e7d9      	b.n	800fd7a <_printf_common+0x8e>
	...

0800fdc8 <_printf_i>:
 800fdc8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800fdcc:	7e0f      	ldrb	r7, [r1, #24]
 800fdce:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800fdd0:	2f78      	cmp	r7, #120	@ 0x78
 800fdd2:	4691      	mov	r9, r2
 800fdd4:	4680      	mov	r8, r0
 800fdd6:	460c      	mov	r4, r1
 800fdd8:	469a      	mov	sl, r3
 800fdda:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800fdde:	d807      	bhi.n	800fdf0 <_printf_i+0x28>
 800fde0:	2f62      	cmp	r7, #98	@ 0x62
 800fde2:	d80a      	bhi.n	800fdfa <_printf_i+0x32>
 800fde4:	2f00      	cmp	r7, #0
 800fde6:	f000 80d2 	beq.w	800ff8e <_printf_i+0x1c6>
 800fdea:	2f58      	cmp	r7, #88	@ 0x58
 800fdec:	f000 80b9 	beq.w	800ff62 <_printf_i+0x19a>
 800fdf0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800fdf4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800fdf8:	e03a      	b.n	800fe70 <_printf_i+0xa8>
 800fdfa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800fdfe:	2b15      	cmp	r3, #21
 800fe00:	d8f6      	bhi.n	800fdf0 <_printf_i+0x28>
 800fe02:	a101      	add	r1, pc, #4	@ (adr r1, 800fe08 <_printf_i+0x40>)
 800fe04:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800fe08:	0800fe61 	.word	0x0800fe61
 800fe0c:	0800fe75 	.word	0x0800fe75
 800fe10:	0800fdf1 	.word	0x0800fdf1
 800fe14:	0800fdf1 	.word	0x0800fdf1
 800fe18:	0800fdf1 	.word	0x0800fdf1
 800fe1c:	0800fdf1 	.word	0x0800fdf1
 800fe20:	0800fe75 	.word	0x0800fe75
 800fe24:	0800fdf1 	.word	0x0800fdf1
 800fe28:	0800fdf1 	.word	0x0800fdf1
 800fe2c:	0800fdf1 	.word	0x0800fdf1
 800fe30:	0800fdf1 	.word	0x0800fdf1
 800fe34:	0800ff75 	.word	0x0800ff75
 800fe38:	0800fe9f 	.word	0x0800fe9f
 800fe3c:	0800ff2f 	.word	0x0800ff2f
 800fe40:	0800fdf1 	.word	0x0800fdf1
 800fe44:	0800fdf1 	.word	0x0800fdf1
 800fe48:	0800ff97 	.word	0x0800ff97
 800fe4c:	0800fdf1 	.word	0x0800fdf1
 800fe50:	0800fe9f 	.word	0x0800fe9f
 800fe54:	0800fdf1 	.word	0x0800fdf1
 800fe58:	0800fdf1 	.word	0x0800fdf1
 800fe5c:	0800ff37 	.word	0x0800ff37
 800fe60:	6833      	ldr	r3, [r6, #0]
 800fe62:	1d1a      	adds	r2, r3, #4
 800fe64:	681b      	ldr	r3, [r3, #0]
 800fe66:	6032      	str	r2, [r6, #0]
 800fe68:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800fe6c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800fe70:	2301      	movs	r3, #1
 800fe72:	e09d      	b.n	800ffb0 <_printf_i+0x1e8>
 800fe74:	6833      	ldr	r3, [r6, #0]
 800fe76:	6820      	ldr	r0, [r4, #0]
 800fe78:	1d19      	adds	r1, r3, #4
 800fe7a:	6031      	str	r1, [r6, #0]
 800fe7c:	0606      	lsls	r6, r0, #24
 800fe7e:	d501      	bpl.n	800fe84 <_printf_i+0xbc>
 800fe80:	681d      	ldr	r5, [r3, #0]
 800fe82:	e003      	b.n	800fe8c <_printf_i+0xc4>
 800fe84:	0645      	lsls	r5, r0, #25
 800fe86:	d5fb      	bpl.n	800fe80 <_printf_i+0xb8>
 800fe88:	f9b3 5000 	ldrsh.w	r5, [r3]
 800fe8c:	2d00      	cmp	r5, #0
 800fe8e:	da03      	bge.n	800fe98 <_printf_i+0xd0>
 800fe90:	232d      	movs	r3, #45	@ 0x2d
 800fe92:	426d      	negs	r5, r5
 800fe94:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800fe98:	4859      	ldr	r0, [pc, #356]	@ (8010000 <_printf_i+0x238>)
 800fe9a:	230a      	movs	r3, #10
 800fe9c:	e011      	b.n	800fec2 <_printf_i+0xfa>
 800fe9e:	6821      	ldr	r1, [r4, #0]
 800fea0:	6833      	ldr	r3, [r6, #0]
 800fea2:	0608      	lsls	r0, r1, #24
 800fea4:	f853 5b04 	ldr.w	r5, [r3], #4
 800fea8:	d402      	bmi.n	800feb0 <_printf_i+0xe8>
 800feaa:	0649      	lsls	r1, r1, #25
 800feac:	bf48      	it	mi
 800feae:	b2ad      	uxthmi	r5, r5
 800feb0:	2f6f      	cmp	r7, #111	@ 0x6f
 800feb2:	4853      	ldr	r0, [pc, #332]	@ (8010000 <_printf_i+0x238>)
 800feb4:	6033      	str	r3, [r6, #0]
 800feb6:	bf14      	ite	ne
 800feb8:	230a      	movne	r3, #10
 800feba:	2308      	moveq	r3, #8
 800febc:	2100      	movs	r1, #0
 800febe:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800fec2:	6866      	ldr	r6, [r4, #4]
 800fec4:	60a6      	str	r6, [r4, #8]
 800fec6:	2e00      	cmp	r6, #0
 800fec8:	bfa2      	ittt	ge
 800feca:	6821      	ldrge	r1, [r4, #0]
 800fecc:	f021 0104 	bicge.w	r1, r1, #4
 800fed0:	6021      	strge	r1, [r4, #0]
 800fed2:	b90d      	cbnz	r5, 800fed8 <_printf_i+0x110>
 800fed4:	2e00      	cmp	r6, #0
 800fed6:	d04b      	beq.n	800ff70 <_printf_i+0x1a8>
 800fed8:	4616      	mov	r6, r2
 800feda:	fbb5 f1f3 	udiv	r1, r5, r3
 800fede:	fb03 5711 	mls	r7, r3, r1, r5
 800fee2:	5dc7      	ldrb	r7, [r0, r7]
 800fee4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800fee8:	462f      	mov	r7, r5
 800feea:	42bb      	cmp	r3, r7
 800feec:	460d      	mov	r5, r1
 800feee:	d9f4      	bls.n	800feda <_printf_i+0x112>
 800fef0:	2b08      	cmp	r3, #8
 800fef2:	d10b      	bne.n	800ff0c <_printf_i+0x144>
 800fef4:	6823      	ldr	r3, [r4, #0]
 800fef6:	07df      	lsls	r7, r3, #31
 800fef8:	d508      	bpl.n	800ff0c <_printf_i+0x144>
 800fefa:	6923      	ldr	r3, [r4, #16]
 800fefc:	6861      	ldr	r1, [r4, #4]
 800fefe:	4299      	cmp	r1, r3
 800ff00:	bfde      	ittt	le
 800ff02:	2330      	movle	r3, #48	@ 0x30
 800ff04:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ff08:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ff0c:	1b92      	subs	r2, r2, r6
 800ff0e:	6122      	str	r2, [r4, #16]
 800ff10:	f8cd a000 	str.w	sl, [sp]
 800ff14:	464b      	mov	r3, r9
 800ff16:	aa03      	add	r2, sp, #12
 800ff18:	4621      	mov	r1, r4
 800ff1a:	4640      	mov	r0, r8
 800ff1c:	f7ff fee6 	bl	800fcec <_printf_common>
 800ff20:	3001      	adds	r0, #1
 800ff22:	d14a      	bne.n	800ffba <_printf_i+0x1f2>
 800ff24:	f04f 30ff 	mov.w	r0, #4294967295
 800ff28:	b004      	add	sp, #16
 800ff2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ff2e:	6823      	ldr	r3, [r4, #0]
 800ff30:	f043 0320 	orr.w	r3, r3, #32
 800ff34:	6023      	str	r3, [r4, #0]
 800ff36:	4833      	ldr	r0, [pc, #204]	@ (8010004 <_printf_i+0x23c>)
 800ff38:	2778      	movs	r7, #120	@ 0x78
 800ff3a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800ff3e:	6823      	ldr	r3, [r4, #0]
 800ff40:	6831      	ldr	r1, [r6, #0]
 800ff42:	061f      	lsls	r7, r3, #24
 800ff44:	f851 5b04 	ldr.w	r5, [r1], #4
 800ff48:	d402      	bmi.n	800ff50 <_printf_i+0x188>
 800ff4a:	065f      	lsls	r7, r3, #25
 800ff4c:	bf48      	it	mi
 800ff4e:	b2ad      	uxthmi	r5, r5
 800ff50:	6031      	str	r1, [r6, #0]
 800ff52:	07d9      	lsls	r1, r3, #31
 800ff54:	bf44      	itt	mi
 800ff56:	f043 0320 	orrmi.w	r3, r3, #32
 800ff5a:	6023      	strmi	r3, [r4, #0]
 800ff5c:	b11d      	cbz	r5, 800ff66 <_printf_i+0x19e>
 800ff5e:	2310      	movs	r3, #16
 800ff60:	e7ac      	b.n	800febc <_printf_i+0xf4>
 800ff62:	4827      	ldr	r0, [pc, #156]	@ (8010000 <_printf_i+0x238>)
 800ff64:	e7e9      	b.n	800ff3a <_printf_i+0x172>
 800ff66:	6823      	ldr	r3, [r4, #0]
 800ff68:	f023 0320 	bic.w	r3, r3, #32
 800ff6c:	6023      	str	r3, [r4, #0]
 800ff6e:	e7f6      	b.n	800ff5e <_printf_i+0x196>
 800ff70:	4616      	mov	r6, r2
 800ff72:	e7bd      	b.n	800fef0 <_printf_i+0x128>
 800ff74:	6833      	ldr	r3, [r6, #0]
 800ff76:	6825      	ldr	r5, [r4, #0]
 800ff78:	6961      	ldr	r1, [r4, #20]
 800ff7a:	1d18      	adds	r0, r3, #4
 800ff7c:	6030      	str	r0, [r6, #0]
 800ff7e:	062e      	lsls	r6, r5, #24
 800ff80:	681b      	ldr	r3, [r3, #0]
 800ff82:	d501      	bpl.n	800ff88 <_printf_i+0x1c0>
 800ff84:	6019      	str	r1, [r3, #0]
 800ff86:	e002      	b.n	800ff8e <_printf_i+0x1c6>
 800ff88:	0668      	lsls	r0, r5, #25
 800ff8a:	d5fb      	bpl.n	800ff84 <_printf_i+0x1bc>
 800ff8c:	8019      	strh	r1, [r3, #0]
 800ff8e:	2300      	movs	r3, #0
 800ff90:	6123      	str	r3, [r4, #16]
 800ff92:	4616      	mov	r6, r2
 800ff94:	e7bc      	b.n	800ff10 <_printf_i+0x148>
 800ff96:	6833      	ldr	r3, [r6, #0]
 800ff98:	1d1a      	adds	r2, r3, #4
 800ff9a:	6032      	str	r2, [r6, #0]
 800ff9c:	681e      	ldr	r6, [r3, #0]
 800ff9e:	6862      	ldr	r2, [r4, #4]
 800ffa0:	2100      	movs	r1, #0
 800ffa2:	4630      	mov	r0, r6
 800ffa4:	f7f0 f91c 	bl	80001e0 <memchr>
 800ffa8:	b108      	cbz	r0, 800ffae <_printf_i+0x1e6>
 800ffaa:	1b80      	subs	r0, r0, r6
 800ffac:	6060      	str	r0, [r4, #4]
 800ffae:	6863      	ldr	r3, [r4, #4]
 800ffb0:	6123      	str	r3, [r4, #16]
 800ffb2:	2300      	movs	r3, #0
 800ffb4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ffb8:	e7aa      	b.n	800ff10 <_printf_i+0x148>
 800ffba:	6923      	ldr	r3, [r4, #16]
 800ffbc:	4632      	mov	r2, r6
 800ffbe:	4649      	mov	r1, r9
 800ffc0:	4640      	mov	r0, r8
 800ffc2:	47d0      	blx	sl
 800ffc4:	3001      	adds	r0, #1
 800ffc6:	d0ad      	beq.n	800ff24 <_printf_i+0x15c>
 800ffc8:	6823      	ldr	r3, [r4, #0]
 800ffca:	079b      	lsls	r3, r3, #30
 800ffcc:	d413      	bmi.n	800fff6 <_printf_i+0x22e>
 800ffce:	68e0      	ldr	r0, [r4, #12]
 800ffd0:	9b03      	ldr	r3, [sp, #12]
 800ffd2:	4298      	cmp	r0, r3
 800ffd4:	bfb8      	it	lt
 800ffd6:	4618      	movlt	r0, r3
 800ffd8:	e7a6      	b.n	800ff28 <_printf_i+0x160>
 800ffda:	2301      	movs	r3, #1
 800ffdc:	4632      	mov	r2, r6
 800ffde:	4649      	mov	r1, r9
 800ffe0:	4640      	mov	r0, r8
 800ffe2:	47d0      	blx	sl
 800ffe4:	3001      	adds	r0, #1
 800ffe6:	d09d      	beq.n	800ff24 <_printf_i+0x15c>
 800ffe8:	3501      	adds	r5, #1
 800ffea:	68e3      	ldr	r3, [r4, #12]
 800ffec:	9903      	ldr	r1, [sp, #12]
 800ffee:	1a5b      	subs	r3, r3, r1
 800fff0:	42ab      	cmp	r3, r5
 800fff2:	dcf2      	bgt.n	800ffda <_printf_i+0x212>
 800fff4:	e7eb      	b.n	800ffce <_printf_i+0x206>
 800fff6:	2500      	movs	r5, #0
 800fff8:	f104 0619 	add.w	r6, r4, #25
 800fffc:	e7f5      	b.n	800ffea <_printf_i+0x222>
 800fffe:	bf00      	nop
 8010000:	08012a7e 	.word	0x08012a7e
 8010004:	08012a8f 	.word	0x08012a8f

08010008 <std>:
 8010008:	2300      	movs	r3, #0
 801000a:	b510      	push	{r4, lr}
 801000c:	4604      	mov	r4, r0
 801000e:	e9c0 3300 	strd	r3, r3, [r0]
 8010012:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8010016:	6083      	str	r3, [r0, #8]
 8010018:	8181      	strh	r1, [r0, #12]
 801001a:	6643      	str	r3, [r0, #100]	@ 0x64
 801001c:	81c2      	strh	r2, [r0, #14]
 801001e:	6183      	str	r3, [r0, #24]
 8010020:	4619      	mov	r1, r3
 8010022:	2208      	movs	r2, #8
 8010024:	305c      	adds	r0, #92	@ 0x5c
 8010026:	f000 f9f9 	bl	801041c <memset>
 801002a:	4b0d      	ldr	r3, [pc, #52]	@ (8010060 <std+0x58>)
 801002c:	6263      	str	r3, [r4, #36]	@ 0x24
 801002e:	4b0d      	ldr	r3, [pc, #52]	@ (8010064 <std+0x5c>)
 8010030:	62a3      	str	r3, [r4, #40]	@ 0x28
 8010032:	4b0d      	ldr	r3, [pc, #52]	@ (8010068 <std+0x60>)
 8010034:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8010036:	4b0d      	ldr	r3, [pc, #52]	@ (801006c <std+0x64>)
 8010038:	6323      	str	r3, [r4, #48]	@ 0x30
 801003a:	4b0d      	ldr	r3, [pc, #52]	@ (8010070 <std+0x68>)
 801003c:	6224      	str	r4, [r4, #32]
 801003e:	429c      	cmp	r4, r3
 8010040:	d006      	beq.n	8010050 <std+0x48>
 8010042:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8010046:	4294      	cmp	r4, r2
 8010048:	d002      	beq.n	8010050 <std+0x48>
 801004a:	33d0      	adds	r3, #208	@ 0xd0
 801004c:	429c      	cmp	r4, r3
 801004e:	d105      	bne.n	801005c <std+0x54>
 8010050:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8010054:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010058:	f000 ba6c 	b.w	8010534 <__retarget_lock_init_recursive>
 801005c:	bd10      	pop	{r4, pc}
 801005e:	bf00      	nop
 8010060:	0801026d 	.word	0x0801026d
 8010064:	0801028f 	.word	0x0801028f
 8010068:	080102c7 	.word	0x080102c7
 801006c:	080102eb 	.word	0x080102eb
 8010070:	200237cc 	.word	0x200237cc

08010074 <stdio_exit_handler>:
 8010074:	4a02      	ldr	r2, [pc, #8]	@ (8010080 <stdio_exit_handler+0xc>)
 8010076:	4903      	ldr	r1, [pc, #12]	@ (8010084 <stdio_exit_handler+0x10>)
 8010078:	4803      	ldr	r0, [pc, #12]	@ (8010088 <stdio_exit_handler+0x14>)
 801007a:	f000 b869 	b.w	8010150 <_fwalk_sglue>
 801007e:	bf00      	nop
 8010080:	20000038 	.word	0x20000038
 8010084:	08011d15 	.word	0x08011d15
 8010088:	20000048 	.word	0x20000048

0801008c <cleanup_stdio>:
 801008c:	6841      	ldr	r1, [r0, #4]
 801008e:	4b0c      	ldr	r3, [pc, #48]	@ (80100c0 <cleanup_stdio+0x34>)
 8010090:	4299      	cmp	r1, r3
 8010092:	b510      	push	{r4, lr}
 8010094:	4604      	mov	r4, r0
 8010096:	d001      	beq.n	801009c <cleanup_stdio+0x10>
 8010098:	f001 fe3c 	bl	8011d14 <_fflush_r>
 801009c:	68a1      	ldr	r1, [r4, #8]
 801009e:	4b09      	ldr	r3, [pc, #36]	@ (80100c4 <cleanup_stdio+0x38>)
 80100a0:	4299      	cmp	r1, r3
 80100a2:	d002      	beq.n	80100aa <cleanup_stdio+0x1e>
 80100a4:	4620      	mov	r0, r4
 80100a6:	f001 fe35 	bl	8011d14 <_fflush_r>
 80100aa:	68e1      	ldr	r1, [r4, #12]
 80100ac:	4b06      	ldr	r3, [pc, #24]	@ (80100c8 <cleanup_stdio+0x3c>)
 80100ae:	4299      	cmp	r1, r3
 80100b0:	d004      	beq.n	80100bc <cleanup_stdio+0x30>
 80100b2:	4620      	mov	r0, r4
 80100b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80100b8:	f001 be2c 	b.w	8011d14 <_fflush_r>
 80100bc:	bd10      	pop	{r4, pc}
 80100be:	bf00      	nop
 80100c0:	200237cc 	.word	0x200237cc
 80100c4:	20023834 	.word	0x20023834
 80100c8:	2002389c 	.word	0x2002389c

080100cc <global_stdio_init.part.0>:
 80100cc:	b510      	push	{r4, lr}
 80100ce:	4b0b      	ldr	r3, [pc, #44]	@ (80100fc <global_stdio_init.part.0+0x30>)
 80100d0:	4c0b      	ldr	r4, [pc, #44]	@ (8010100 <global_stdio_init.part.0+0x34>)
 80100d2:	4a0c      	ldr	r2, [pc, #48]	@ (8010104 <global_stdio_init.part.0+0x38>)
 80100d4:	601a      	str	r2, [r3, #0]
 80100d6:	4620      	mov	r0, r4
 80100d8:	2200      	movs	r2, #0
 80100da:	2104      	movs	r1, #4
 80100dc:	f7ff ff94 	bl	8010008 <std>
 80100e0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80100e4:	2201      	movs	r2, #1
 80100e6:	2109      	movs	r1, #9
 80100e8:	f7ff ff8e 	bl	8010008 <std>
 80100ec:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80100f0:	2202      	movs	r2, #2
 80100f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80100f6:	2112      	movs	r1, #18
 80100f8:	f7ff bf86 	b.w	8010008 <std>
 80100fc:	20023904 	.word	0x20023904
 8010100:	200237cc 	.word	0x200237cc
 8010104:	08010075 	.word	0x08010075

08010108 <__sfp_lock_acquire>:
 8010108:	4801      	ldr	r0, [pc, #4]	@ (8010110 <__sfp_lock_acquire+0x8>)
 801010a:	f000 ba14 	b.w	8010536 <__retarget_lock_acquire_recursive>
 801010e:	bf00      	nop
 8010110:	2002390d 	.word	0x2002390d

08010114 <__sfp_lock_release>:
 8010114:	4801      	ldr	r0, [pc, #4]	@ (801011c <__sfp_lock_release+0x8>)
 8010116:	f000 ba0f 	b.w	8010538 <__retarget_lock_release_recursive>
 801011a:	bf00      	nop
 801011c:	2002390d 	.word	0x2002390d

08010120 <__sinit>:
 8010120:	b510      	push	{r4, lr}
 8010122:	4604      	mov	r4, r0
 8010124:	f7ff fff0 	bl	8010108 <__sfp_lock_acquire>
 8010128:	6a23      	ldr	r3, [r4, #32]
 801012a:	b11b      	cbz	r3, 8010134 <__sinit+0x14>
 801012c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010130:	f7ff bff0 	b.w	8010114 <__sfp_lock_release>
 8010134:	4b04      	ldr	r3, [pc, #16]	@ (8010148 <__sinit+0x28>)
 8010136:	6223      	str	r3, [r4, #32]
 8010138:	4b04      	ldr	r3, [pc, #16]	@ (801014c <__sinit+0x2c>)
 801013a:	681b      	ldr	r3, [r3, #0]
 801013c:	2b00      	cmp	r3, #0
 801013e:	d1f5      	bne.n	801012c <__sinit+0xc>
 8010140:	f7ff ffc4 	bl	80100cc <global_stdio_init.part.0>
 8010144:	e7f2      	b.n	801012c <__sinit+0xc>
 8010146:	bf00      	nop
 8010148:	0801008d 	.word	0x0801008d
 801014c:	20023904 	.word	0x20023904

08010150 <_fwalk_sglue>:
 8010150:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010154:	4607      	mov	r7, r0
 8010156:	4688      	mov	r8, r1
 8010158:	4614      	mov	r4, r2
 801015a:	2600      	movs	r6, #0
 801015c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8010160:	f1b9 0901 	subs.w	r9, r9, #1
 8010164:	d505      	bpl.n	8010172 <_fwalk_sglue+0x22>
 8010166:	6824      	ldr	r4, [r4, #0]
 8010168:	2c00      	cmp	r4, #0
 801016a:	d1f7      	bne.n	801015c <_fwalk_sglue+0xc>
 801016c:	4630      	mov	r0, r6
 801016e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010172:	89ab      	ldrh	r3, [r5, #12]
 8010174:	2b01      	cmp	r3, #1
 8010176:	d907      	bls.n	8010188 <_fwalk_sglue+0x38>
 8010178:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801017c:	3301      	adds	r3, #1
 801017e:	d003      	beq.n	8010188 <_fwalk_sglue+0x38>
 8010180:	4629      	mov	r1, r5
 8010182:	4638      	mov	r0, r7
 8010184:	47c0      	blx	r8
 8010186:	4306      	orrs	r6, r0
 8010188:	3568      	adds	r5, #104	@ 0x68
 801018a:	e7e9      	b.n	8010160 <_fwalk_sglue+0x10>

0801018c <iprintf>:
 801018c:	b40f      	push	{r0, r1, r2, r3}
 801018e:	b507      	push	{r0, r1, r2, lr}
 8010190:	4906      	ldr	r1, [pc, #24]	@ (80101ac <iprintf+0x20>)
 8010192:	ab04      	add	r3, sp, #16
 8010194:	6808      	ldr	r0, [r1, #0]
 8010196:	f853 2b04 	ldr.w	r2, [r3], #4
 801019a:	6881      	ldr	r1, [r0, #8]
 801019c:	9301      	str	r3, [sp, #4]
 801019e:	f001 fc1d 	bl	80119dc <_vfiprintf_r>
 80101a2:	b003      	add	sp, #12
 80101a4:	f85d eb04 	ldr.w	lr, [sp], #4
 80101a8:	b004      	add	sp, #16
 80101aa:	4770      	bx	lr
 80101ac:	20000044 	.word	0x20000044

080101b0 <_puts_r>:
 80101b0:	6a03      	ldr	r3, [r0, #32]
 80101b2:	b570      	push	{r4, r5, r6, lr}
 80101b4:	6884      	ldr	r4, [r0, #8]
 80101b6:	4605      	mov	r5, r0
 80101b8:	460e      	mov	r6, r1
 80101ba:	b90b      	cbnz	r3, 80101c0 <_puts_r+0x10>
 80101bc:	f7ff ffb0 	bl	8010120 <__sinit>
 80101c0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80101c2:	07db      	lsls	r3, r3, #31
 80101c4:	d405      	bmi.n	80101d2 <_puts_r+0x22>
 80101c6:	89a3      	ldrh	r3, [r4, #12]
 80101c8:	0598      	lsls	r0, r3, #22
 80101ca:	d402      	bmi.n	80101d2 <_puts_r+0x22>
 80101cc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80101ce:	f000 f9b2 	bl	8010536 <__retarget_lock_acquire_recursive>
 80101d2:	89a3      	ldrh	r3, [r4, #12]
 80101d4:	0719      	lsls	r1, r3, #28
 80101d6:	d502      	bpl.n	80101de <_puts_r+0x2e>
 80101d8:	6923      	ldr	r3, [r4, #16]
 80101da:	2b00      	cmp	r3, #0
 80101dc:	d135      	bne.n	801024a <_puts_r+0x9a>
 80101de:	4621      	mov	r1, r4
 80101e0:	4628      	mov	r0, r5
 80101e2:	f000 f8c5 	bl	8010370 <__swsetup_r>
 80101e6:	b380      	cbz	r0, 801024a <_puts_r+0x9a>
 80101e8:	f04f 35ff 	mov.w	r5, #4294967295
 80101ec:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80101ee:	07da      	lsls	r2, r3, #31
 80101f0:	d405      	bmi.n	80101fe <_puts_r+0x4e>
 80101f2:	89a3      	ldrh	r3, [r4, #12]
 80101f4:	059b      	lsls	r3, r3, #22
 80101f6:	d402      	bmi.n	80101fe <_puts_r+0x4e>
 80101f8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80101fa:	f000 f99d 	bl	8010538 <__retarget_lock_release_recursive>
 80101fe:	4628      	mov	r0, r5
 8010200:	bd70      	pop	{r4, r5, r6, pc}
 8010202:	2b00      	cmp	r3, #0
 8010204:	da04      	bge.n	8010210 <_puts_r+0x60>
 8010206:	69a2      	ldr	r2, [r4, #24]
 8010208:	429a      	cmp	r2, r3
 801020a:	dc17      	bgt.n	801023c <_puts_r+0x8c>
 801020c:	290a      	cmp	r1, #10
 801020e:	d015      	beq.n	801023c <_puts_r+0x8c>
 8010210:	6823      	ldr	r3, [r4, #0]
 8010212:	1c5a      	adds	r2, r3, #1
 8010214:	6022      	str	r2, [r4, #0]
 8010216:	7019      	strb	r1, [r3, #0]
 8010218:	68a3      	ldr	r3, [r4, #8]
 801021a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801021e:	3b01      	subs	r3, #1
 8010220:	60a3      	str	r3, [r4, #8]
 8010222:	2900      	cmp	r1, #0
 8010224:	d1ed      	bne.n	8010202 <_puts_r+0x52>
 8010226:	2b00      	cmp	r3, #0
 8010228:	da11      	bge.n	801024e <_puts_r+0x9e>
 801022a:	4622      	mov	r2, r4
 801022c:	210a      	movs	r1, #10
 801022e:	4628      	mov	r0, r5
 8010230:	f000 f85f 	bl	80102f2 <__swbuf_r>
 8010234:	3001      	adds	r0, #1
 8010236:	d0d7      	beq.n	80101e8 <_puts_r+0x38>
 8010238:	250a      	movs	r5, #10
 801023a:	e7d7      	b.n	80101ec <_puts_r+0x3c>
 801023c:	4622      	mov	r2, r4
 801023e:	4628      	mov	r0, r5
 8010240:	f000 f857 	bl	80102f2 <__swbuf_r>
 8010244:	3001      	adds	r0, #1
 8010246:	d1e7      	bne.n	8010218 <_puts_r+0x68>
 8010248:	e7ce      	b.n	80101e8 <_puts_r+0x38>
 801024a:	3e01      	subs	r6, #1
 801024c:	e7e4      	b.n	8010218 <_puts_r+0x68>
 801024e:	6823      	ldr	r3, [r4, #0]
 8010250:	1c5a      	adds	r2, r3, #1
 8010252:	6022      	str	r2, [r4, #0]
 8010254:	220a      	movs	r2, #10
 8010256:	701a      	strb	r2, [r3, #0]
 8010258:	e7ee      	b.n	8010238 <_puts_r+0x88>
	...

0801025c <puts>:
 801025c:	4b02      	ldr	r3, [pc, #8]	@ (8010268 <puts+0xc>)
 801025e:	4601      	mov	r1, r0
 8010260:	6818      	ldr	r0, [r3, #0]
 8010262:	f7ff bfa5 	b.w	80101b0 <_puts_r>
 8010266:	bf00      	nop
 8010268:	20000044 	.word	0x20000044

0801026c <__sread>:
 801026c:	b510      	push	{r4, lr}
 801026e:	460c      	mov	r4, r1
 8010270:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010274:	f000 f900 	bl	8010478 <_read_r>
 8010278:	2800      	cmp	r0, #0
 801027a:	bfab      	itete	ge
 801027c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801027e:	89a3      	ldrhlt	r3, [r4, #12]
 8010280:	181b      	addge	r3, r3, r0
 8010282:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8010286:	bfac      	ite	ge
 8010288:	6563      	strge	r3, [r4, #84]	@ 0x54
 801028a:	81a3      	strhlt	r3, [r4, #12]
 801028c:	bd10      	pop	{r4, pc}

0801028e <__swrite>:
 801028e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010292:	461f      	mov	r7, r3
 8010294:	898b      	ldrh	r3, [r1, #12]
 8010296:	05db      	lsls	r3, r3, #23
 8010298:	4605      	mov	r5, r0
 801029a:	460c      	mov	r4, r1
 801029c:	4616      	mov	r6, r2
 801029e:	d505      	bpl.n	80102ac <__swrite+0x1e>
 80102a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80102a4:	2302      	movs	r3, #2
 80102a6:	2200      	movs	r2, #0
 80102a8:	f000 f8d4 	bl	8010454 <_lseek_r>
 80102ac:	89a3      	ldrh	r3, [r4, #12]
 80102ae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80102b2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80102b6:	81a3      	strh	r3, [r4, #12]
 80102b8:	4632      	mov	r2, r6
 80102ba:	463b      	mov	r3, r7
 80102bc:	4628      	mov	r0, r5
 80102be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80102c2:	f000 b8fb 	b.w	80104bc <_write_r>

080102c6 <__sseek>:
 80102c6:	b510      	push	{r4, lr}
 80102c8:	460c      	mov	r4, r1
 80102ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80102ce:	f000 f8c1 	bl	8010454 <_lseek_r>
 80102d2:	1c43      	adds	r3, r0, #1
 80102d4:	89a3      	ldrh	r3, [r4, #12]
 80102d6:	bf15      	itete	ne
 80102d8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80102da:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80102de:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80102e2:	81a3      	strheq	r3, [r4, #12]
 80102e4:	bf18      	it	ne
 80102e6:	81a3      	strhne	r3, [r4, #12]
 80102e8:	bd10      	pop	{r4, pc}

080102ea <__sclose>:
 80102ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80102ee:	f000 b8a1 	b.w	8010434 <_close_r>

080102f2 <__swbuf_r>:
 80102f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80102f4:	460e      	mov	r6, r1
 80102f6:	4614      	mov	r4, r2
 80102f8:	4605      	mov	r5, r0
 80102fa:	b118      	cbz	r0, 8010304 <__swbuf_r+0x12>
 80102fc:	6a03      	ldr	r3, [r0, #32]
 80102fe:	b90b      	cbnz	r3, 8010304 <__swbuf_r+0x12>
 8010300:	f7ff ff0e 	bl	8010120 <__sinit>
 8010304:	69a3      	ldr	r3, [r4, #24]
 8010306:	60a3      	str	r3, [r4, #8]
 8010308:	89a3      	ldrh	r3, [r4, #12]
 801030a:	071a      	lsls	r2, r3, #28
 801030c:	d501      	bpl.n	8010312 <__swbuf_r+0x20>
 801030e:	6923      	ldr	r3, [r4, #16]
 8010310:	b943      	cbnz	r3, 8010324 <__swbuf_r+0x32>
 8010312:	4621      	mov	r1, r4
 8010314:	4628      	mov	r0, r5
 8010316:	f000 f82b 	bl	8010370 <__swsetup_r>
 801031a:	b118      	cbz	r0, 8010324 <__swbuf_r+0x32>
 801031c:	f04f 37ff 	mov.w	r7, #4294967295
 8010320:	4638      	mov	r0, r7
 8010322:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010324:	6823      	ldr	r3, [r4, #0]
 8010326:	6922      	ldr	r2, [r4, #16]
 8010328:	1a98      	subs	r0, r3, r2
 801032a:	6963      	ldr	r3, [r4, #20]
 801032c:	b2f6      	uxtb	r6, r6
 801032e:	4283      	cmp	r3, r0
 8010330:	4637      	mov	r7, r6
 8010332:	dc05      	bgt.n	8010340 <__swbuf_r+0x4e>
 8010334:	4621      	mov	r1, r4
 8010336:	4628      	mov	r0, r5
 8010338:	f001 fcec 	bl	8011d14 <_fflush_r>
 801033c:	2800      	cmp	r0, #0
 801033e:	d1ed      	bne.n	801031c <__swbuf_r+0x2a>
 8010340:	68a3      	ldr	r3, [r4, #8]
 8010342:	3b01      	subs	r3, #1
 8010344:	60a3      	str	r3, [r4, #8]
 8010346:	6823      	ldr	r3, [r4, #0]
 8010348:	1c5a      	adds	r2, r3, #1
 801034a:	6022      	str	r2, [r4, #0]
 801034c:	701e      	strb	r6, [r3, #0]
 801034e:	6962      	ldr	r2, [r4, #20]
 8010350:	1c43      	adds	r3, r0, #1
 8010352:	429a      	cmp	r2, r3
 8010354:	d004      	beq.n	8010360 <__swbuf_r+0x6e>
 8010356:	89a3      	ldrh	r3, [r4, #12]
 8010358:	07db      	lsls	r3, r3, #31
 801035a:	d5e1      	bpl.n	8010320 <__swbuf_r+0x2e>
 801035c:	2e0a      	cmp	r6, #10
 801035e:	d1df      	bne.n	8010320 <__swbuf_r+0x2e>
 8010360:	4621      	mov	r1, r4
 8010362:	4628      	mov	r0, r5
 8010364:	f001 fcd6 	bl	8011d14 <_fflush_r>
 8010368:	2800      	cmp	r0, #0
 801036a:	d0d9      	beq.n	8010320 <__swbuf_r+0x2e>
 801036c:	e7d6      	b.n	801031c <__swbuf_r+0x2a>
	...

08010370 <__swsetup_r>:
 8010370:	b538      	push	{r3, r4, r5, lr}
 8010372:	4b29      	ldr	r3, [pc, #164]	@ (8010418 <__swsetup_r+0xa8>)
 8010374:	4605      	mov	r5, r0
 8010376:	6818      	ldr	r0, [r3, #0]
 8010378:	460c      	mov	r4, r1
 801037a:	b118      	cbz	r0, 8010384 <__swsetup_r+0x14>
 801037c:	6a03      	ldr	r3, [r0, #32]
 801037e:	b90b      	cbnz	r3, 8010384 <__swsetup_r+0x14>
 8010380:	f7ff fece 	bl	8010120 <__sinit>
 8010384:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010388:	0719      	lsls	r1, r3, #28
 801038a:	d422      	bmi.n	80103d2 <__swsetup_r+0x62>
 801038c:	06da      	lsls	r2, r3, #27
 801038e:	d407      	bmi.n	80103a0 <__swsetup_r+0x30>
 8010390:	2209      	movs	r2, #9
 8010392:	602a      	str	r2, [r5, #0]
 8010394:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010398:	81a3      	strh	r3, [r4, #12]
 801039a:	f04f 30ff 	mov.w	r0, #4294967295
 801039e:	e033      	b.n	8010408 <__swsetup_r+0x98>
 80103a0:	0758      	lsls	r0, r3, #29
 80103a2:	d512      	bpl.n	80103ca <__swsetup_r+0x5a>
 80103a4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80103a6:	b141      	cbz	r1, 80103ba <__swsetup_r+0x4a>
 80103a8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80103ac:	4299      	cmp	r1, r3
 80103ae:	d002      	beq.n	80103b6 <__swsetup_r+0x46>
 80103b0:	4628      	mov	r0, r5
 80103b2:	f000 ff1d 	bl	80111f0 <_free_r>
 80103b6:	2300      	movs	r3, #0
 80103b8:	6363      	str	r3, [r4, #52]	@ 0x34
 80103ba:	89a3      	ldrh	r3, [r4, #12]
 80103bc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80103c0:	81a3      	strh	r3, [r4, #12]
 80103c2:	2300      	movs	r3, #0
 80103c4:	6063      	str	r3, [r4, #4]
 80103c6:	6923      	ldr	r3, [r4, #16]
 80103c8:	6023      	str	r3, [r4, #0]
 80103ca:	89a3      	ldrh	r3, [r4, #12]
 80103cc:	f043 0308 	orr.w	r3, r3, #8
 80103d0:	81a3      	strh	r3, [r4, #12]
 80103d2:	6923      	ldr	r3, [r4, #16]
 80103d4:	b94b      	cbnz	r3, 80103ea <__swsetup_r+0x7a>
 80103d6:	89a3      	ldrh	r3, [r4, #12]
 80103d8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80103dc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80103e0:	d003      	beq.n	80103ea <__swsetup_r+0x7a>
 80103e2:	4621      	mov	r1, r4
 80103e4:	4628      	mov	r0, r5
 80103e6:	f001 fce3 	bl	8011db0 <__smakebuf_r>
 80103ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80103ee:	f013 0201 	ands.w	r2, r3, #1
 80103f2:	d00a      	beq.n	801040a <__swsetup_r+0x9a>
 80103f4:	2200      	movs	r2, #0
 80103f6:	60a2      	str	r2, [r4, #8]
 80103f8:	6962      	ldr	r2, [r4, #20]
 80103fa:	4252      	negs	r2, r2
 80103fc:	61a2      	str	r2, [r4, #24]
 80103fe:	6922      	ldr	r2, [r4, #16]
 8010400:	b942      	cbnz	r2, 8010414 <__swsetup_r+0xa4>
 8010402:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8010406:	d1c5      	bne.n	8010394 <__swsetup_r+0x24>
 8010408:	bd38      	pop	{r3, r4, r5, pc}
 801040a:	0799      	lsls	r1, r3, #30
 801040c:	bf58      	it	pl
 801040e:	6962      	ldrpl	r2, [r4, #20]
 8010410:	60a2      	str	r2, [r4, #8]
 8010412:	e7f4      	b.n	80103fe <__swsetup_r+0x8e>
 8010414:	2000      	movs	r0, #0
 8010416:	e7f7      	b.n	8010408 <__swsetup_r+0x98>
 8010418:	20000044 	.word	0x20000044

0801041c <memset>:
 801041c:	4402      	add	r2, r0
 801041e:	4603      	mov	r3, r0
 8010420:	4293      	cmp	r3, r2
 8010422:	d100      	bne.n	8010426 <memset+0xa>
 8010424:	4770      	bx	lr
 8010426:	f803 1b01 	strb.w	r1, [r3], #1
 801042a:	e7f9      	b.n	8010420 <memset+0x4>

0801042c <_localeconv_r>:
 801042c:	4800      	ldr	r0, [pc, #0]	@ (8010430 <_localeconv_r+0x4>)
 801042e:	4770      	bx	lr
 8010430:	20000184 	.word	0x20000184

08010434 <_close_r>:
 8010434:	b538      	push	{r3, r4, r5, lr}
 8010436:	4d06      	ldr	r5, [pc, #24]	@ (8010450 <_close_r+0x1c>)
 8010438:	2300      	movs	r3, #0
 801043a:	4604      	mov	r4, r0
 801043c:	4608      	mov	r0, r1
 801043e:	602b      	str	r3, [r5, #0]
 8010440:	f7f5 f91a 	bl	8005678 <_close>
 8010444:	1c43      	adds	r3, r0, #1
 8010446:	d102      	bne.n	801044e <_close_r+0x1a>
 8010448:	682b      	ldr	r3, [r5, #0]
 801044a:	b103      	cbz	r3, 801044e <_close_r+0x1a>
 801044c:	6023      	str	r3, [r4, #0]
 801044e:	bd38      	pop	{r3, r4, r5, pc}
 8010450:	20023908 	.word	0x20023908

08010454 <_lseek_r>:
 8010454:	b538      	push	{r3, r4, r5, lr}
 8010456:	4d07      	ldr	r5, [pc, #28]	@ (8010474 <_lseek_r+0x20>)
 8010458:	4604      	mov	r4, r0
 801045a:	4608      	mov	r0, r1
 801045c:	4611      	mov	r1, r2
 801045e:	2200      	movs	r2, #0
 8010460:	602a      	str	r2, [r5, #0]
 8010462:	461a      	mov	r2, r3
 8010464:	f7f5 f92f 	bl	80056c6 <_lseek>
 8010468:	1c43      	adds	r3, r0, #1
 801046a:	d102      	bne.n	8010472 <_lseek_r+0x1e>
 801046c:	682b      	ldr	r3, [r5, #0]
 801046e:	b103      	cbz	r3, 8010472 <_lseek_r+0x1e>
 8010470:	6023      	str	r3, [r4, #0]
 8010472:	bd38      	pop	{r3, r4, r5, pc}
 8010474:	20023908 	.word	0x20023908

08010478 <_read_r>:
 8010478:	b538      	push	{r3, r4, r5, lr}
 801047a:	4d07      	ldr	r5, [pc, #28]	@ (8010498 <_read_r+0x20>)
 801047c:	4604      	mov	r4, r0
 801047e:	4608      	mov	r0, r1
 8010480:	4611      	mov	r1, r2
 8010482:	2200      	movs	r2, #0
 8010484:	602a      	str	r2, [r5, #0]
 8010486:	461a      	mov	r2, r3
 8010488:	f7f5 f8bd 	bl	8005606 <_read>
 801048c:	1c43      	adds	r3, r0, #1
 801048e:	d102      	bne.n	8010496 <_read_r+0x1e>
 8010490:	682b      	ldr	r3, [r5, #0]
 8010492:	b103      	cbz	r3, 8010496 <_read_r+0x1e>
 8010494:	6023      	str	r3, [r4, #0]
 8010496:	bd38      	pop	{r3, r4, r5, pc}
 8010498:	20023908 	.word	0x20023908

0801049c <_sbrk_r>:
 801049c:	b538      	push	{r3, r4, r5, lr}
 801049e:	4d06      	ldr	r5, [pc, #24]	@ (80104b8 <_sbrk_r+0x1c>)
 80104a0:	2300      	movs	r3, #0
 80104a2:	4604      	mov	r4, r0
 80104a4:	4608      	mov	r0, r1
 80104a6:	602b      	str	r3, [r5, #0]
 80104a8:	f7f5 f91a 	bl	80056e0 <_sbrk>
 80104ac:	1c43      	adds	r3, r0, #1
 80104ae:	d102      	bne.n	80104b6 <_sbrk_r+0x1a>
 80104b0:	682b      	ldr	r3, [r5, #0]
 80104b2:	b103      	cbz	r3, 80104b6 <_sbrk_r+0x1a>
 80104b4:	6023      	str	r3, [r4, #0]
 80104b6:	bd38      	pop	{r3, r4, r5, pc}
 80104b8:	20023908 	.word	0x20023908

080104bc <_write_r>:
 80104bc:	b538      	push	{r3, r4, r5, lr}
 80104be:	4d07      	ldr	r5, [pc, #28]	@ (80104dc <_write_r+0x20>)
 80104c0:	4604      	mov	r4, r0
 80104c2:	4608      	mov	r0, r1
 80104c4:	4611      	mov	r1, r2
 80104c6:	2200      	movs	r2, #0
 80104c8:	602a      	str	r2, [r5, #0]
 80104ca:	461a      	mov	r2, r3
 80104cc:	f7f5 f8b8 	bl	8005640 <_write>
 80104d0:	1c43      	adds	r3, r0, #1
 80104d2:	d102      	bne.n	80104da <_write_r+0x1e>
 80104d4:	682b      	ldr	r3, [r5, #0]
 80104d6:	b103      	cbz	r3, 80104da <_write_r+0x1e>
 80104d8:	6023      	str	r3, [r4, #0]
 80104da:	bd38      	pop	{r3, r4, r5, pc}
 80104dc:	20023908 	.word	0x20023908

080104e0 <__errno>:
 80104e0:	4b01      	ldr	r3, [pc, #4]	@ (80104e8 <__errno+0x8>)
 80104e2:	6818      	ldr	r0, [r3, #0]
 80104e4:	4770      	bx	lr
 80104e6:	bf00      	nop
 80104e8:	20000044 	.word	0x20000044

080104ec <__libc_init_array>:
 80104ec:	b570      	push	{r4, r5, r6, lr}
 80104ee:	4d0d      	ldr	r5, [pc, #52]	@ (8010524 <__libc_init_array+0x38>)
 80104f0:	4c0d      	ldr	r4, [pc, #52]	@ (8010528 <__libc_init_array+0x3c>)
 80104f2:	1b64      	subs	r4, r4, r5
 80104f4:	10a4      	asrs	r4, r4, #2
 80104f6:	2600      	movs	r6, #0
 80104f8:	42a6      	cmp	r6, r4
 80104fa:	d109      	bne.n	8010510 <__libc_init_array+0x24>
 80104fc:	4d0b      	ldr	r5, [pc, #44]	@ (801052c <__libc_init_array+0x40>)
 80104fe:	4c0c      	ldr	r4, [pc, #48]	@ (8010530 <__libc_init_array+0x44>)
 8010500:	f001 ff88 	bl	8012414 <_init>
 8010504:	1b64      	subs	r4, r4, r5
 8010506:	10a4      	asrs	r4, r4, #2
 8010508:	2600      	movs	r6, #0
 801050a:	42a6      	cmp	r6, r4
 801050c:	d105      	bne.n	801051a <__libc_init_array+0x2e>
 801050e:	bd70      	pop	{r4, r5, r6, pc}
 8010510:	f855 3b04 	ldr.w	r3, [r5], #4
 8010514:	4798      	blx	r3
 8010516:	3601      	adds	r6, #1
 8010518:	e7ee      	b.n	80104f8 <__libc_init_array+0xc>
 801051a:	f855 3b04 	ldr.w	r3, [r5], #4
 801051e:	4798      	blx	r3
 8010520:	3601      	adds	r6, #1
 8010522:	e7f2      	b.n	801050a <__libc_init_array+0x1e>
 8010524:	08012de8 	.word	0x08012de8
 8010528:	08012de8 	.word	0x08012de8
 801052c:	08012de8 	.word	0x08012de8
 8010530:	08012dec 	.word	0x08012dec

08010534 <__retarget_lock_init_recursive>:
 8010534:	4770      	bx	lr

08010536 <__retarget_lock_acquire_recursive>:
 8010536:	4770      	bx	lr

08010538 <__retarget_lock_release_recursive>:
 8010538:	4770      	bx	lr

0801053a <memcpy>:
 801053a:	440a      	add	r2, r1
 801053c:	4291      	cmp	r1, r2
 801053e:	f100 33ff 	add.w	r3, r0, #4294967295
 8010542:	d100      	bne.n	8010546 <memcpy+0xc>
 8010544:	4770      	bx	lr
 8010546:	b510      	push	{r4, lr}
 8010548:	f811 4b01 	ldrb.w	r4, [r1], #1
 801054c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010550:	4291      	cmp	r1, r2
 8010552:	d1f9      	bne.n	8010548 <memcpy+0xe>
 8010554:	bd10      	pop	{r4, pc}

08010556 <quorem>:
 8010556:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801055a:	6903      	ldr	r3, [r0, #16]
 801055c:	690c      	ldr	r4, [r1, #16]
 801055e:	42a3      	cmp	r3, r4
 8010560:	4607      	mov	r7, r0
 8010562:	db7e      	blt.n	8010662 <quorem+0x10c>
 8010564:	3c01      	subs	r4, #1
 8010566:	f101 0814 	add.w	r8, r1, #20
 801056a:	00a3      	lsls	r3, r4, #2
 801056c:	f100 0514 	add.w	r5, r0, #20
 8010570:	9300      	str	r3, [sp, #0]
 8010572:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010576:	9301      	str	r3, [sp, #4]
 8010578:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801057c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010580:	3301      	adds	r3, #1
 8010582:	429a      	cmp	r2, r3
 8010584:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8010588:	fbb2 f6f3 	udiv	r6, r2, r3
 801058c:	d32e      	bcc.n	80105ec <quorem+0x96>
 801058e:	f04f 0a00 	mov.w	sl, #0
 8010592:	46c4      	mov	ip, r8
 8010594:	46ae      	mov	lr, r5
 8010596:	46d3      	mov	fp, sl
 8010598:	f85c 3b04 	ldr.w	r3, [ip], #4
 801059c:	b298      	uxth	r0, r3
 801059e:	fb06 a000 	mla	r0, r6, r0, sl
 80105a2:	0c02      	lsrs	r2, r0, #16
 80105a4:	0c1b      	lsrs	r3, r3, #16
 80105a6:	fb06 2303 	mla	r3, r6, r3, r2
 80105aa:	f8de 2000 	ldr.w	r2, [lr]
 80105ae:	b280      	uxth	r0, r0
 80105b0:	b292      	uxth	r2, r2
 80105b2:	1a12      	subs	r2, r2, r0
 80105b4:	445a      	add	r2, fp
 80105b6:	f8de 0000 	ldr.w	r0, [lr]
 80105ba:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80105be:	b29b      	uxth	r3, r3
 80105c0:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80105c4:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80105c8:	b292      	uxth	r2, r2
 80105ca:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80105ce:	45e1      	cmp	r9, ip
 80105d0:	f84e 2b04 	str.w	r2, [lr], #4
 80105d4:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80105d8:	d2de      	bcs.n	8010598 <quorem+0x42>
 80105da:	9b00      	ldr	r3, [sp, #0]
 80105dc:	58eb      	ldr	r3, [r5, r3]
 80105de:	b92b      	cbnz	r3, 80105ec <quorem+0x96>
 80105e0:	9b01      	ldr	r3, [sp, #4]
 80105e2:	3b04      	subs	r3, #4
 80105e4:	429d      	cmp	r5, r3
 80105e6:	461a      	mov	r2, r3
 80105e8:	d32f      	bcc.n	801064a <quorem+0xf4>
 80105ea:	613c      	str	r4, [r7, #16]
 80105ec:	4638      	mov	r0, r7
 80105ee:	f001 f8c3 	bl	8011778 <__mcmp>
 80105f2:	2800      	cmp	r0, #0
 80105f4:	db25      	blt.n	8010642 <quorem+0xec>
 80105f6:	4629      	mov	r1, r5
 80105f8:	2000      	movs	r0, #0
 80105fa:	f858 2b04 	ldr.w	r2, [r8], #4
 80105fe:	f8d1 c000 	ldr.w	ip, [r1]
 8010602:	fa1f fe82 	uxth.w	lr, r2
 8010606:	fa1f f38c 	uxth.w	r3, ip
 801060a:	eba3 030e 	sub.w	r3, r3, lr
 801060e:	4403      	add	r3, r0
 8010610:	0c12      	lsrs	r2, r2, #16
 8010612:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8010616:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 801061a:	b29b      	uxth	r3, r3
 801061c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010620:	45c1      	cmp	r9, r8
 8010622:	f841 3b04 	str.w	r3, [r1], #4
 8010626:	ea4f 4022 	mov.w	r0, r2, asr #16
 801062a:	d2e6      	bcs.n	80105fa <quorem+0xa4>
 801062c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010630:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010634:	b922      	cbnz	r2, 8010640 <quorem+0xea>
 8010636:	3b04      	subs	r3, #4
 8010638:	429d      	cmp	r5, r3
 801063a:	461a      	mov	r2, r3
 801063c:	d30b      	bcc.n	8010656 <quorem+0x100>
 801063e:	613c      	str	r4, [r7, #16]
 8010640:	3601      	adds	r6, #1
 8010642:	4630      	mov	r0, r6
 8010644:	b003      	add	sp, #12
 8010646:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801064a:	6812      	ldr	r2, [r2, #0]
 801064c:	3b04      	subs	r3, #4
 801064e:	2a00      	cmp	r2, #0
 8010650:	d1cb      	bne.n	80105ea <quorem+0x94>
 8010652:	3c01      	subs	r4, #1
 8010654:	e7c6      	b.n	80105e4 <quorem+0x8e>
 8010656:	6812      	ldr	r2, [r2, #0]
 8010658:	3b04      	subs	r3, #4
 801065a:	2a00      	cmp	r2, #0
 801065c:	d1ef      	bne.n	801063e <quorem+0xe8>
 801065e:	3c01      	subs	r4, #1
 8010660:	e7ea      	b.n	8010638 <quorem+0xe2>
 8010662:	2000      	movs	r0, #0
 8010664:	e7ee      	b.n	8010644 <quorem+0xee>
	...

08010668 <_dtoa_r>:
 8010668:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801066c:	69c7      	ldr	r7, [r0, #28]
 801066e:	b099      	sub	sp, #100	@ 0x64
 8010670:	ed8d 0b02 	vstr	d0, [sp, #8]
 8010674:	ec55 4b10 	vmov	r4, r5, d0
 8010678:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 801067a:	9109      	str	r1, [sp, #36]	@ 0x24
 801067c:	4683      	mov	fp, r0
 801067e:	920e      	str	r2, [sp, #56]	@ 0x38
 8010680:	9313      	str	r3, [sp, #76]	@ 0x4c
 8010682:	b97f      	cbnz	r7, 80106a4 <_dtoa_r+0x3c>
 8010684:	2010      	movs	r0, #16
 8010686:	f7fe ffa9 	bl	800f5dc <malloc>
 801068a:	4602      	mov	r2, r0
 801068c:	f8cb 001c 	str.w	r0, [fp, #28]
 8010690:	b920      	cbnz	r0, 801069c <_dtoa_r+0x34>
 8010692:	4ba7      	ldr	r3, [pc, #668]	@ (8010930 <_dtoa_r+0x2c8>)
 8010694:	21ef      	movs	r1, #239	@ 0xef
 8010696:	48a7      	ldr	r0, [pc, #668]	@ (8010934 <_dtoa_r+0x2cc>)
 8010698:	f001 fbe8 	bl	8011e6c <__assert_func>
 801069c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80106a0:	6007      	str	r7, [r0, #0]
 80106a2:	60c7      	str	r7, [r0, #12]
 80106a4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80106a8:	6819      	ldr	r1, [r3, #0]
 80106aa:	b159      	cbz	r1, 80106c4 <_dtoa_r+0x5c>
 80106ac:	685a      	ldr	r2, [r3, #4]
 80106ae:	604a      	str	r2, [r1, #4]
 80106b0:	2301      	movs	r3, #1
 80106b2:	4093      	lsls	r3, r2
 80106b4:	608b      	str	r3, [r1, #8]
 80106b6:	4658      	mov	r0, fp
 80106b8:	f000 fe24 	bl	8011304 <_Bfree>
 80106bc:	f8db 301c 	ldr.w	r3, [fp, #28]
 80106c0:	2200      	movs	r2, #0
 80106c2:	601a      	str	r2, [r3, #0]
 80106c4:	1e2b      	subs	r3, r5, #0
 80106c6:	bfb9      	ittee	lt
 80106c8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80106cc:	9303      	strlt	r3, [sp, #12]
 80106ce:	2300      	movge	r3, #0
 80106d0:	6033      	strge	r3, [r6, #0]
 80106d2:	9f03      	ldr	r7, [sp, #12]
 80106d4:	4b98      	ldr	r3, [pc, #608]	@ (8010938 <_dtoa_r+0x2d0>)
 80106d6:	bfbc      	itt	lt
 80106d8:	2201      	movlt	r2, #1
 80106da:	6032      	strlt	r2, [r6, #0]
 80106dc:	43bb      	bics	r3, r7
 80106de:	d112      	bne.n	8010706 <_dtoa_r+0x9e>
 80106e0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80106e2:	f242 730f 	movw	r3, #9999	@ 0x270f
 80106e6:	6013      	str	r3, [r2, #0]
 80106e8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80106ec:	4323      	orrs	r3, r4
 80106ee:	f000 854d 	beq.w	801118c <_dtoa_r+0xb24>
 80106f2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80106f4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 801094c <_dtoa_r+0x2e4>
 80106f8:	2b00      	cmp	r3, #0
 80106fa:	f000 854f 	beq.w	801119c <_dtoa_r+0xb34>
 80106fe:	f10a 0303 	add.w	r3, sl, #3
 8010702:	f000 bd49 	b.w	8011198 <_dtoa_r+0xb30>
 8010706:	ed9d 7b02 	vldr	d7, [sp, #8]
 801070a:	2200      	movs	r2, #0
 801070c:	ec51 0b17 	vmov	r0, r1, d7
 8010710:	2300      	movs	r3, #0
 8010712:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8010716:	f7f0 f9df 	bl	8000ad8 <__aeabi_dcmpeq>
 801071a:	4680      	mov	r8, r0
 801071c:	b158      	cbz	r0, 8010736 <_dtoa_r+0xce>
 801071e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8010720:	2301      	movs	r3, #1
 8010722:	6013      	str	r3, [r2, #0]
 8010724:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8010726:	b113      	cbz	r3, 801072e <_dtoa_r+0xc6>
 8010728:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 801072a:	4b84      	ldr	r3, [pc, #528]	@ (801093c <_dtoa_r+0x2d4>)
 801072c:	6013      	str	r3, [r2, #0]
 801072e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8010950 <_dtoa_r+0x2e8>
 8010732:	f000 bd33 	b.w	801119c <_dtoa_r+0xb34>
 8010736:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 801073a:	aa16      	add	r2, sp, #88	@ 0x58
 801073c:	a917      	add	r1, sp, #92	@ 0x5c
 801073e:	4658      	mov	r0, fp
 8010740:	f001 f8ca 	bl	80118d8 <__d2b>
 8010744:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8010748:	4681      	mov	r9, r0
 801074a:	2e00      	cmp	r6, #0
 801074c:	d077      	beq.n	801083e <_dtoa_r+0x1d6>
 801074e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8010750:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8010754:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010758:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801075c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8010760:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8010764:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8010768:	4619      	mov	r1, r3
 801076a:	2200      	movs	r2, #0
 801076c:	4b74      	ldr	r3, [pc, #464]	@ (8010940 <_dtoa_r+0x2d8>)
 801076e:	f7ef fd93 	bl	8000298 <__aeabi_dsub>
 8010772:	a369      	add	r3, pc, #420	@ (adr r3, 8010918 <_dtoa_r+0x2b0>)
 8010774:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010778:	f7ef ff46 	bl	8000608 <__aeabi_dmul>
 801077c:	a368      	add	r3, pc, #416	@ (adr r3, 8010920 <_dtoa_r+0x2b8>)
 801077e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010782:	f7ef fd8b 	bl	800029c <__adddf3>
 8010786:	4604      	mov	r4, r0
 8010788:	4630      	mov	r0, r6
 801078a:	460d      	mov	r5, r1
 801078c:	f7ef fed2 	bl	8000534 <__aeabi_i2d>
 8010790:	a365      	add	r3, pc, #404	@ (adr r3, 8010928 <_dtoa_r+0x2c0>)
 8010792:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010796:	f7ef ff37 	bl	8000608 <__aeabi_dmul>
 801079a:	4602      	mov	r2, r0
 801079c:	460b      	mov	r3, r1
 801079e:	4620      	mov	r0, r4
 80107a0:	4629      	mov	r1, r5
 80107a2:	f7ef fd7b 	bl	800029c <__adddf3>
 80107a6:	4604      	mov	r4, r0
 80107a8:	460d      	mov	r5, r1
 80107aa:	f7f0 f9dd 	bl	8000b68 <__aeabi_d2iz>
 80107ae:	2200      	movs	r2, #0
 80107b0:	4607      	mov	r7, r0
 80107b2:	2300      	movs	r3, #0
 80107b4:	4620      	mov	r0, r4
 80107b6:	4629      	mov	r1, r5
 80107b8:	f7f0 f998 	bl	8000aec <__aeabi_dcmplt>
 80107bc:	b140      	cbz	r0, 80107d0 <_dtoa_r+0x168>
 80107be:	4638      	mov	r0, r7
 80107c0:	f7ef feb8 	bl	8000534 <__aeabi_i2d>
 80107c4:	4622      	mov	r2, r4
 80107c6:	462b      	mov	r3, r5
 80107c8:	f7f0 f986 	bl	8000ad8 <__aeabi_dcmpeq>
 80107cc:	b900      	cbnz	r0, 80107d0 <_dtoa_r+0x168>
 80107ce:	3f01      	subs	r7, #1
 80107d0:	2f16      	cmp	r7, #22
 80107d2:	d851      	bhi.n	8010878 <_dtoa_r+0x210>
 80107d4:	4b5b      	ldr	r3, [pc, #364]	@ (8010944 <_dtoa_r+0x2dc>)
 80107d6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80107da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80107de:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80107e2:	f7f0 f983 	bl	8000aec <__aeabi_dcmplt>
 80107e6:	2800      	cmp	r0, #0
 80107e8:	d048      	beq.n	801087c <_dtoa_r+0x214>
 80107ea:	3f01      	subs	r7, #1
 80107ec:	2300      	movs	r3, #0
 80107ee:	9312      	str	r3, [sp, #72]	@ 0x48
 80107f0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80107f2:	1b9b      	subs	r3, r3, r6
 80107f4:	1e5a      	subs	r2, r3, #1
 80107f6:	bf44      	itt	mi
 80107f8:	f1c3 0801 	rsbmi	r8, r3, #1
 80107fc:	2300      	movmi	r3, #0
 80107fe:	9208      	str	r2, [sp, #32]
 8010800:	bf54      	ite	pl
 8010802:	f04f 0800 	movpl.w	r8, #0
 8010806:	9308      	strmi	r3, [sp, #32]
 8010808:	2f00      	cmp	r7, #0
 801080a:	db39      	blt.n	8010880 <_dtoa_r+0x218>
 801080c:	9b08      	ldr	r3, [sp, #32]
 801080e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8010810:	443b      	add	r3, r7
 8010812:	9308      	str	r3, [sp, #32]
 8010814:	2300      	movs	r3, #0
 8010816:	930a      	str	r3, [sp, #40]	@ 0x28
 8010818:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801081a:	2b09      	cmp	r3, #9
 801081c:	d864      	bhi.n	80108e8 <_dtoa_r+0x280>
 801081e:	2b05      	cmp	r3, #5
 8010820:	bfc4      	itt	gt
 8010822:	3b04      	subgt	r3, #4
 8010824:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8010826:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010828:	f1a3 0302 	sub.w	r3, r3, #2
 801082c:	bfcc      	ite	gt
 801082e:	2400      	movgt	r4, #0
 8010830:	2401      	movle	r4, #1
 8010832:	2b03      	cmp	r3, #3
 8010834:	d863      	bhi.n	80108fe <_dtoa_r+0x296>
 8010836:	e8df f003 	tbb	[pc, r3]
 801083a:	372a      	.short	0x372a
 801083c:	5535      	.short	0x5535
 801083e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8010842:	441e      	add	r6, r3
 8010844:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8010848:	2b20      	cmp	r3, #32
 801084a:	bfc1      	itttt	gt
 801084c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8010850:	409f      	lslgt	r7, r3
 8010852:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8010856:	fa24 f303 	lsrgt.w	r3, r4, r3
 801085a:	bfd6      	itet	le
 801085c:	f1c3 0320 	rsble	r3, r3, #32
 8010860:	ea47 0003 	orrgt.w	r0, r7, r3
 8010864:	fa04 f003 	lslle.w	r0, r4, r3
 8010868:	f7ef fe54 	bl	8000514 <__aeabi_ui2d>
 801086c:	2201      	movs	r2, #1
 801086e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8010872:	3e01      	subs	r6, #1
 8010874:	9214      	str	r2, [sp, #80]	@ 0x50
 8010876:	e777      	b.n	8010768 <_dtoa_r+0x100>
 8010878:	2301      	movs	r3, #1
 801087a:	e7b8      	b.n	80107ee <_dtoa_r+0x186>
 801087c:	9012      	str	r0, [sp, #72]	@ 0x48
 801087e:	e7b7      	b.n	80107f0 <_dtoa_r+0x188>
 8010880:	427b      	negs	r3, r7
 8010882:	930a      	str	r3, [sp, #40]	@ 0x28
 8010884:	2300      	movs	r3, #0
 8010886:	eba8 0807 	sub.w	r8, r8, r7
 801088a:	930f      	str	r3, [sp, #60]	@ 0x3c
 801088c:	e7c4      	b.n	8010818 <_dtoa_r+0x1b0>
 801088e:	2300      	movs	r3, #0
 8010890:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010892:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010894:	2b00      	cmp	r3, #0
 8010896:	dc35      	bgt.n	8010904 <_dtoa_r+0x29c>
 8010898:	2301      	movs	r3, #1
 801089a:	9300      	str	r3, [sp, #0]
 801089c:	9307      	str	r3, [sp, #28]
 801089e:	461a      	mov	r2, r3
 80108a0:	920e      	str	r2, [sp, #56]	@ 0x38
 80108a2:	e00b      	b.n	80108bc <_dtoa_r+0x254>
 80108a4:	2301      	movs	r3, #1
 80108a6:	e7f3      	b.n	8010890 <_dtoa_r+0x228>
 80108a8:	2300      	movs	r3, #0
 80108aa:	930b      	str	r3, [sp, #44]	@ 0x2c
 80108ac:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80108ae:	18fb      	adds	r3, r7, r3
 80108b0:	9300      	str	r3, [sp, #0]
 80108b2:	3301      	adds	r3, #1
 80108b4:	2b01      	cmp	r3, #1
 80108b6:	9307      	str	r3, [sp, #28]
 80108b8:	bfb8      	it	lt
 80108ba:	2301      	movlt	r3, #1
 80108bc:	f8db 001c 	ldr.w	r0, [fp, #28]
 80108c0:	2100      	movs	r1, #0
 80108c2:	2204      	movs	r2, #4
 80108c4:	f102 0514 	add.w	r5, r2, #20
 80108c8:	429d      	cmp	r5, r3
 80108ca:	d91f      	bls.n	801090c <_dtoa_r+0x2a4>
 80108cc:	6041      	str	r1, [r0, #4]
 80108ce:	4658      	mov	r0, fp
 80108d0:	f000 fcd8 	bl	8011284 <_Balloc>
 80108d4:	4682      	mov	sl, r0
 80108d6:	2800      	cmp	r0, #0
 80108d8:	d13c      	bne.n	8010954 <_dtoa_r+0x2ec>
 80108da:	4b1b      	ldr	r3, [pc, #108]	@ (8010948 <_dtoa_r+0x2e0>)
 80108dc:	4602      	mov	r2, r0
 80108de:	f240 11af 	movw	r1, #431	@ 0x1af
 80108e2:	e6d8      	b.n	8010696 <_dtoa_r+0x2e>
 80108e4:	2301      	movs	r3, #1
 80108e6:	e7e0      	b.n	80108aa <_dtoa_r+0x242>
 80108e8:	2401      	movs	r4, #1
 80108ea:	2300      	movs	r3, #0
 80108ec:	9309      	str	r3, [sp, #36]	@ 0x24
 80108ee:	940b      	str	r4, [sp, #44]	@ 0x2c
 80108f0:	f04f 33ff 	mov.w	r3, #4294967295
 80108f4:	9300      	str	r3, [sp, #0]
 80108f6:	9307      	str	r3, [sp, #28]
 80108f8:	2200      	movs	r2, #0
 80108fa:	2312      	movs	r3, #18
 80108fc:	e7d0      	b.n	80108a0 <_dtoa_r+0x238>
 80108fe:	2301      	movs	r3, #1
 8010900:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010902:	e7f5      	b.n	80108f0 <_dtoa_r+0x288>
 8010904:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010906:	9300      	str	r3, [sp, #0]
 8010908:	9307      	str	r3, [sp, #28]
 801090a:	e7d7      	b.n	80108bc <_dtoa_r+0x254>
 801090c:	3101      	adds	r1, #1
 801090e:	0052      	lsls	r2, r2, #1
 8010910:	e7d8      	b.n	80108c4 <_dtoa_r+0x25c>
 8010912:	bf00      	nop
 8010914:	f3af 8000 	nop.w
 8010918:	636f4361 	.word	0x636f4361
 801091c:	3fd287a7 	.word	0x3fd287a7
 8010920:	8b60c8b3 	.word	0x8b60c8b3
 8010924:	3fc68a28 	.word	0x3fc68a28
 8010928:	509f79fb 	.word	0x509f79fb
 801092c:	3fd34413 	.word	0x3fd34413
 8010930:	08012aad 	.word	0x08012aad
 8010934:	08012ac4 	.word	0x08012ac4
 8010938:	7ff00000 	.word	0x7ff00000
 801093c:	08012a7d 	.word	0x08012a7d
 8010940:	3ff80000 	.word	0x3ff80000
 8010944:	08012bc0 	.word	0x08012bc0
 8010948:	08012b1c 	.word	0x08012b1c
 801094c:	08012aa9 	.word	0x08012aa9
 8010950:	08012a7c 	.word	0x08012a7c
 8010954:	f8db 301c 	ldr.w	r3, [fp, #28]
 8010958:	6018      	str	r0, [r3, #0]
 801095a:	9b07      	ldr	r3, [sp, #28]
 801095c:	2b0e      	cmp	r3, #14
 801095e:	f200 80a4 	bhi.w	8010aaa <_dtoa_r+0x442>
 8010962:	2c00      	cmp	r4, #0
 8010964:	f000 80a1 	beq.w	8010aaa <_dtoa_r+0x442>
 8010968:	2f00      	cmp	r7, #0
 801096a:	dd33      	ble.n	80109d4 <_dtoa_r+0x36c>
 801096c:	4bad      	ldr	r3, [pc, #692]	@ (8010c24 <_dtoa_r+0x5bc>)
 801096e:	f007 020f 	and.w	r2, r7, #15
 8010972:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010976:	ed93 7b00 	vldr	d7, [r3]
 801097a:	05f8      	lsls	r0, r7, #23
 801097c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8010980:	ea4f 1427 	mov.w	r4, r7, asr #4
 8010984:	d516      	bpl.n	80109b4 <_dtoa_r+0x34c>
 8010986:	4ba8      	ldr	r3, [pc, #672]	@ (8010c28 <_dtoa_r+0x5c0>)
 8010988:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801098c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8010990:	f7ef ff64 	bl	800085c <__aeabi_ddiv>
 8010994:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010998:	f004 040f 	and.w	r4, r4, #15
 801099c:	2603      	movs	r6, #3
 801099e:	4da2      	ldr	r5, [pc, #648]	@ (8010c28 <_dtoa_r+0x5c0>)
 80109a0:	b954      	cbnz	r4, 80109b8 <_dtoa_r+0x350>
 80109a2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80109a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80109aa:	f7ef ff57 	bl	800085c <__aeabi_ddiv>
 80109ae:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80109b2:	e028      	b.n	8010a06 <_dtoa_r+0x39e>
 80109b4:	2602      	movs	r6, #2
 80109b6:	e7f2      	b.n	801099e <_dtoa_r+0x336>
 80109b8:	07e1      	lsls	r1, r4, #31
 80109ba:	d508      	bpl.n	80109ce <_dtoa_r+0x366>
 80109bc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80109c0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80109c4:	f7ef fe20 	bl	8000608 <__aeabi_dmul>
 80109c8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80109cc:	3601      	adds	r6, #1
 80109ce:	1064      	asrs	r4, r4, #1
 80109d0:	3508      	adds	r5, #8
 80109d2:	e7e5      	b.n	80109a0 <_dtoa_r+0x338>
 80109d4:	f000 80d2 	beq.w	8010b7c <_dtoa_r+0x514>
 80109d8:	427c      	negs	r4, r7
 80109da:	4b92      	ldr	r3, [pc, #584]	@ (8010c24 <_dtoa_r+0x5bc>)
 80109dc:	4d92      	ldr	r5, [pc, #584]	@ (8010c28 <_dtoa_r+0x5c0>)
 80109de:	f004 020f 	and.w	r2, r4, #15
 80109e2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80109e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80109ea:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80109ee:	f7ef fe0b 	bl	8000608 <__aeabi_dmul>
 80109f2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80109f6:	1124      	asrs	r4, r4, #4
 80109f8:	2300      	movs	r3, #0
 80109fa:	2602      	movs	r6, #2
 80109fc:	2c00      	cmp	r4, #0
 80109fe:	f040 80b2 	bne.w	8010b66 <_dtoa_r+0x4fe>
 8010a02:	2b00      	cmp	r3, #0
 8010a04:	d1d3      	bne.n	80109ae <_dtoa_r+0x346>
 8010a06:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8010a08:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8010a0c:	2b00      	cmp	r3, #0
 8010a0e:	f000 80b7 	beq.w	8010b80 <_dtoa_r+0x518>
 8010a12:	4b86      	ldr	r3, [pc, #536]	@ (8010c2c <_dtoa_r+0x5c4>)
 8010a14:	2200      	movs	r2, #0
 8010a16:	4620      	mov	r0, r4
 8010a18:	4629      	mov	r1, r5
 8010a1a:	f7f0 f867 	bl	8000aec <__aeabi_dcmplt>
 8010a1e:	2800      	cmp	r0, #0
 8010a20:	f000 80ae 	beq.w	8010b80 <_dtoa_r+0x518>
 8010a24:	9b07      	ldr	r3, [sp, #28]
 8010a26:	2b00      	cmp	r3, #0
 8010a28:	f000 80aa 	beq.w	8010b80 <_dtoa_r+0x518>
 8010a2c:	9b00      	ldr	r3, [sp, #0]
 8010a2e:	2b00      	cmp	r3, #0
 8010a30:	dd37      	ble.n	8010aa2 <_dtoa_r+0x43a>
 8010a32:	1e7b      	subs	r3, r7, #1
 8010a34:	9304      	str	r3, [sp, #16]
 8010a36:	4620      	mov	r0, r4
 8010a38:	4b7d      	ldr	r3, [pc, #500]	@ (8010c30 <_dtoa_r+0x5c8>)
 8010a3a:	2200      	movs	r2, #0
 8010a3c:	4629      	mov	r1, r5
 8010a3e:	f7ef fde3 	bl	8000608 <__aeabi_dmul>
 8010a42:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010a46:	9c00      	ldr	r4, [sp, #0]
 8010a48:	3601      	adds	r6, #1
 8010a4a:	4630      	mov	r0, r6
 8010a4c:	f7ef fd72 	bl	8000534 <__aeabi_i2d>
 8010a50:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010a54:	f7ef fdd8 	bl	8000608 <__aeabi_dmul>
 8010a58:	4b76      	ldr	r3, [pc, #472]	@ (8010c34 <_dtoa_r+0x5cc>)
 8010a5a:	2200      	movs	r2, #0
 8010a5c:	f7ef fc1e 	bl	800029c <__adddf3>
 8010a60:	4605      	mov	r5, r0
 8010a62:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8010a66:	2c00      	cmp	r4, #0
 8010a68:	f040 808d 	bne.w	8010b86 <_dtoa_r+0x51e>
 8010a6c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010a70:	4b71      	ldr	r3, [pc, #452]	@ (8010c38 <_dtoa_r+0x5d0>)
 8010a72:	2200      	movs	r2, #0
 8010a74:	f7ef fc10 	bl	8000298 <__aeabi_dsub>
 8010a78:	4602      	mov	r2, r0
 8010a7a:	460b      	mov	r3, r1
 8010a7c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8010a80:	462a      	mov	r2, r5
 8010a82:	4633      	mov	r3, r6
 8010a84:	f7f0 f850 	bl	8000b28 <__aeabi_dcmpgt>
 8010a88:	2800      	cmp	r0, #0
 8010a8a:	f040 828b 	bne.w	8010fa4 <_dtoa_r+0x93c>
 8010a8e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010a92:	462a      	mov	r2, r5
 8010a94:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8010a98:	f7f0 f828 	bl	8000aec <__aeabi_dcmplt>
 8010a9c:	2800      	cmp	r0, #0
 8010a9e:	f040 8128 	bne.w	8010cf2 <_dtoa_r+0x68a>
 8010aa2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8010aa6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8010aaa:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8010aac:	2b00      	cmp	r3, #0
 8010aae:	f2c0 815a 	blt.w	8010d66 <_dtoa_r+0x6fe>
 8010ab2:	2f0e      	cmp	r7, #14
 8010ab4:	f300 8157 	bgt.w	8010d66 <_dtoa_r+0x6fe>
 8010ab8:	4b5a      	ldr	r3, [pc, #360]	@ (8010c24 <_dtoa_r+0x5bc>)
 8010aba:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8010abe:	ed93 7b00 	vldr	d7, [r3]
 8010ac2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010ac4:	2b00      	cmp	r3, #0
 8010ac6:	ed8d 7b00 	vstr	d7, [sp]
 8010aca:	da03      	bge.n	8010ad4 <_dtoa_r+0x46c>
 8010acc:	9b07      	ldr	r3, [sp, #28]
 8010ace:	2b00      	cmp	r3, #0
 8010ad0:	f340 8101 	ble.w	8010cd6 <_dtoa_r+0x66e>
 8010ad4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8010ad8:	4656      	mov	r6, sl
 8010ada:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010ade:	4620      	mov	r0, r4
 8010ae0:	4629      	mov	r1, r5
 8010ae2:	f7ef febb 	bl	800085c <__aeabi_ddiv>
 8010ae6:	f7f0 f83f 	bl	8000b68 <__aeabi_d2iz>
 8010aea:	4680      	mov	r8, r0
 8010aec:	f7ef fd22 	bl	8000534 <__aeabi_i2d>
 8010af0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010af4:	f7ef fd88 	bl	8000608 <__aeabi_dmul>
 8010af8:	4602      	mov	r2, r0
 8010afa:	460b      	mov	r3, r1
 8010afc:	4620      	mov	r0, r4
 8010afe:	4629      	mov	r1, r5
 8010b00:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8010b04:	f7ef fbc8 	bl	8000298 <__aeabi_dsub>
 8010b08:	f806 4b01 	strb.w	r4, [r6], #1
 8010b0c:	9d07      	ldr	r5, [sp, #28]
 8010b0e:	eba6 040a 	sub.w	r4, r6, sl
 8010b12:	42a5      	cmp	r5, r4
 8010b14:	4602      	mov	r2, r0
 8010b16:	460b      	mov	r3, r1
 8010b18:	f040 8117 	bne.w	8010d4a <_dtoa_r+0x6e2>
 8010b1c:	f7ef fbbe 	bl	800029c <__adddf3>
 8010b20:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010b24:	4604      	mov	r4, r0
 8010b26:	460d      	mov	r5, r1
 8010b28:	f7ef fffe 	bl	8000b28 <__aeabi_dcmpgt>
 8010b2c:	2800      	cmp	r0, #0
 8010b2e:	f040 80f9 	bne.w	8010d24 <_dtoa_r+0x6bc>
 8010b32:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010b36:	4620      	mov	r0, r4
 8010b38:	4629      	mov	r1, r5
 8010b3a:	f7ef ffcd 	bl	8000ad8 <__aeabi_dcmpeq>
 8010b3e:	b118      	cbz	r0, 8010b48 <_dtoa_r+0x4e0>
 8010b40:	f018 0f01 	tst.w	r8, #1
 8010b44:	f040 80ee 	bne.w	8010d24 <_dtoa_r+0x6bc>
 8010b48:	4649      	mov	r1, r9
 8010b4a:	4658      	mov	r0, fp
 8010b4c:	f000 fbda 	bl	8011304 <_Bfree>
 8010b50:	2300      	movs	r3, #0
 8010b52:	7033      	strb	r3, [r6, #0]
 8010b54:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8010b56:	3701      	adds	r7, #1
 8010b58:	601f      	str	r7, [r3, #0]
 8010b5a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8010b5c:	2b00      	cmp	r3, #0
 8010b5e:	f000 831d 	beq.w	801119c <_dtoa_r+0xb34>
 8010b62:	601e      	str	r6, [r3, #0]
 8010b64:	e31a      	b.n	801119c <_dtoa_r+0xb34>
 8010b66:	07e2      	lsls	r2, r4, #31
 8010b68:	d505      	bpl.n	8010b76 <_dtoa_r+0x50e>
 8010b6a:	e9d5 2300 	ldrd	r2, r3, [r5]
 8010b6e:	f7ef fd4b 	bl	8000608 <__aeabi_dmul>
 8010b72:	3601      	adds	r6, #1
 8010b74:	2301      	movs	r3, #1
 8010b76:	1064      	asrs	r4, r4, #1
 8010b78:	3508      	adds	r5, #8
 8010b7a:	e73f      	b.n	80109fc <_dtoa_r+0x394>
 8010b7c:	2602      	movs	r6, #2
 8010b7e:	e742      	b.n	8010a06 <_dtoa_r+0x39e>
 8010b80:	9c07      	ldr	r4, [sp, #28]
 8010b82:	9704      	str	r7, [sp, #16]
 8010b84:	e761      	b.n	8010a4a <_dtoa_r+0x3e2>
 8010b86:	4b27      	ldr	r3, [pc, #156]	@ (8010c24 <_dtoa_r+0x5bc>)
 8010b88:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8010b8a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8010b8e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8010b92:	4454      	add	r4, sl
 8010b94:	2900      	cmp	r1, #0
 8010b96:	d053      	beq.n	8010c40 <_dtoa_r+0x5d8>
 8010b98:	4928      	ldr	r1, [pc, #160]	@ (8010c3c <_dtoa_r+0x5d4>)
 8010b9a:	2000      	movs	r0, #0
 8010b9c:	f7ef fe5e 	bl	800085c <__aeabi_ddiv>
 8010ba0:	4633      	mov	r3, r6
 8010ba2:	462a      	mov	r2, r5
 8010ba4:	f7ef fb78 	bl	8000298 <__aeabi_dsub>
 8010ba8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8010bac:	4656      	mov	r6, sl
 8010bae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010bb2:	f7ef ffd9 	bl	8000b68 <__aeabi_d2iz>
 8010bb6:	4605      	mov	r5, r0
 8010bb8:	f7ef fcbc 	bl	8000534 <__aeabi_i2d>
 8010bbc:	4602      	mov	r2, r0
 8010bbe:	460b      	mov	r3, r1
 8010bc0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010bc4:	f7ef fb68 	bl	8000298 <__aeabi_dsub>
 8010bc8:	3530      	adds	r5, #48	@ 0x30
 8010bca:	4602      	mov	r2, r0
 8010bcc:	460b      	mov	r3, r1
 8010bce:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8010bd2:	f806 5b01 	strb.w	r5, [r6], #1
 8010bd6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8010bda:	f7ef ff87 	bl	8000aec <__aeabi_dcmplt>
 8010bde:	2800      	cmp	r0, #0
 8010be0:	d171      	bne.n	8010cc6 <_dtoa_r+0x65e>
 8010be2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010be6:	4911      	ldr	r1, [pc, #68]	@ (8010c2c <_dtoa_r+0x5c4>)
 8010be8:	2000      	movs	r0, #0
 8010bea:	f7ef fb55 	bl	8000298 <__aeabi_dsub>
 8010bee:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8010bf2:	f7ef ff7b 	bl	8000aec <__aeabi_dcmplt>
 8010bf6:	2800      	cmp	r0, #0
 8010bf8:	f040 8095 	bne.w	8010d26 <_dtoa_r+0x6be>
 8010bfc:	42a6      	cmp	r6, r4
 8010bfe:	f43f af50 	beq.w	8010aa2 <_dtoa_r+0x43a>
 8010c02:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8010c06:	4b0a      	ldr	r3, [pc, #40]	@ (8010c30 <_dtoa_r+0x5c8>)
 8010c08:	2200      	movs	r2, #0
 8010c0a:	f7ef fcfd 	bl	8000608 <__aeabi_dmul>
 8010c0e:	4b08      	ldr	r3, [pc, #32]	@ (8010c30 <_dtoa_r+0x5c8>)
 8010c10:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8010c14:	2200      	movs	r2, #0
 8010c16:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010c1a:	f7ef fcf5 	bl	8000608 <__aeabi_dmul>
 8010c1e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010c22:	e7c4      	b.n	8010bae <_dtoa_r+0x546>
 8010c24:	08012bc0 	.word	0x08012bc0
 8010c28:	08012b98 	.word	0x08012b98
 8010c2c:	3ff00000 	.word	0x3ff00000
 8010c30:	40240000 	.word	0x40240000
 8010c34:	401c0000 	.word	0x401c0000
 8010c38:	40140000 	.word	0x40140000
 8010c3c:	3fe00000 	.word	0x3fe00000
 8010c40:	4631      	mov	r1, r6
 8010c42:	4628      	mov	r0, r5
 8010c44:	f7ef fce0 	bl	8000608 <__aeabi_dmul>
 8010c48:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8010c4c:	9415      	str	r4, [sp, #84]	@ 0x54
 8010c4e:	4656      	mov	r6, sl
 8010c50:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010c54:	f7ef ff88 	bl	8000b68 <__aeabi_d2iz>
 8010c58:	4605      	mov	r5, r0
 8010c5a:	f7ef fc6b 	bl	8000534 <__aeabi_i2d>
 8010c5e:	4602      	mov	r2, r0
 8010c60:	460b      	mov	r3, r1
 8010c62:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010c66:	f7ef fb17 	bl	8000298 <__aeabi_dsub>
 8010c6a:	3530      	adds	r5, #48	@ 0x30
 8010c6c:	f806 5b01 	strb.w	r5, [r6], #1
 8010c70:	4602      	mov	r2, r0
 8010c72:	460b      	mov	r3, r1
 8010c74:	42a6      	cmp	r6, r4
 8010c76:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8010c7a:	f04f 0200 	mov.w	r2, #0
 8010c7e:	d124      	bne.n	8010cca <_dtoa_r+0x662>
 8010c80:	4bac      	ldr	r3, [pc, #688]	@ (8010f34 <_dtoa_r+0x8cc>)
 8010c82:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8010c86:	f7ef fb09 	bl	800029c <__adddf3>
 8010c8a:	4602      	mov	r2, r0
 8010c8c:	460b      	mov	r3, r1
 8010c8e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010c92:	f7ef ff49 	bl	8000b28 <__aeabi_dcmpgt>
 8010c96:	2800      	cmp	r0, #0
 8010c98:	d145      	bne.n	8010d26 <_dtoa_r+0x6be>
 8010c9a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8010c9e:	49a5      	ldr	r1, [pc, #660]	@ (8010f34 <_dtoa_r+0x8cc>)
 8010ca0:	2000      	movs	r0, #0
 8010ca2:	f7ef faf9 	bl	8000298 <__aeabi_dsub>
 8010ca6:	4602      	mov	r2, r0
 8010ca8:	460b      	mov	r3, r1
 8010caa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010cae:	f7ef ff1d 	bl	8000aec <__aeabi_dcmplt>
 8010cb2:	2800      	cmp	r0, #0
 8010cb4:	f43f aef5 	beq.w	8010aa2 <_dtoa_r+0x43a>
 8010cb8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8010cba:	1e73      	subs	r3, r6, #1
 8010cbc:	9315      	str	r3, [sp, #84]	@ 0x54
 8010cbe:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8010cc2:	2b30      	cmp	r3, #48	@ 0x30
 8010cc4:	d0f8      	beq.n	8010cb8 <_dtoa_r+0x650>
 8010cc6:	9f04      	ldr	r7, [sp, #16]
 8010cc8:	e73e      	b.n	8010b48 <_dtoa_r+0x4e0>
 8010cca:	4b9b      	ldr	r3, [pc, #620]	@ (8010f38 <_dtoa_r+0x8d0>)
 8010ccc:	f7ef fc9c 	bl	8000608 <__aeabi_dmul>
 8010cd0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010cd4:	e7bc      	b.n	8010c50 <_dtoa_r+0x5e8>
 8010cd6:	d10c      	bne.n	8010cf2 <_dtoa_r+0x68a>
 8010cd8:	4b98      	ldr	r3, [pc, #608]	@ (8010f3c <_dtoa_r+0x8d4>)
 8010cda:	2200      	movs	r2, #0
 8010cdc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010ce0:	f7ef fc92 	bl	8000608 <__aeabi_dmul>
 8010ce4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010ce8:	f7ef ff14 	bl	8000b14 <__aeabi_dcmpge>
 8010cec:	2800      	cmp	r0, #0
 8010cee:	f000 8157 	beq.w	8010fa0 <_dtoa_r+0x938>
 8010cf2:	2400      	movs	r4, #0
 8010cf4:	4625      	mov	r5, r4
 8010cf6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010cf8:	43db      	mvns	r3, r3
 8010cfa:	9304      	str	r3, [sp, #16]
 8010cfc:	4656      	mov	r6, sl
 8010cfe:	2700      	movs	r7, #0
 8010d00:	4621      	mov	r1, r4
 8010d02:	4658      	mov	r0, fp
 8010d04:	f000 fafe 	bl	8011304 <_Bfree>
 8010d08:	2d00      	cmp	r5, #0
 8010d0a:	d0dc      	beq.n	8010cc6 <_dtoa_r+0x65e>
 8010d0c:	b12f      	cbz	r7, 8010d1a <_dtoa_r+0x6b2>
 8010d0e:	42af      	cmp	r7, r5
 8010d10:	d003      	beq.n	8010d1a <_dtoa_r+0x6b2>
 8010d12:	4639      	mov	r1, r7
 8010d14:	4658      	mov	r0, fp
 8010d16:	f000 faf5 	bl	8011304 <_Bfree>
 8010d1a:	4629      	mov	r1, r5
 8010d1c:	4658      	mov	r0, fp
 8010d1e:	f000 faf1 	bl	8011304 <_Bfree>
 8010d22:	e7d0      	b.n	8010cc6 <_dtoa_r+0x65e>
 8010d24:	9704      	str	r7, [sp, #16]
 8010d26:	4633      	mov	r3, r6
 8010d28:	461e      	mov	r6, r3
 8010d2a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010d2e:	2a39      	cmp	r2, #57	@ 0x39
 8010d30:	d107      	bne.n	8010d42 <_dtoa_r+0x6da>
 8010d32:	459a      	cmp	sl, r3
 8010d34:	d1f8      	bne.n	8010d28 <_dtoa_r+0x6c0>
 8010d36:	9a04      	ldr	r2, [sp, #16]
 8010d38:	3201      	adds	r2, #1
 8010d3a:	9204      	str	r2, [sp, #16]
 8010d3c:	2230      	movs	r2, #48	@ 0x30
 8010d3e:	f88a 2000 	strb.w	r2, [sl]
 8010d42:	781a      	ldrb	r2, [r3, #0]
 8010d44:	3201      	adds	r2, #1
 8010d46:	701a      	strb	r2, [r3, #0]
 8010d48:	e7bd      	b.n	8010cc6 <_dtoa_r+0x65e>
 8010d4a:	4b7b      	ldr	r3, [pc, #492]	@ (8010f38 <_dtoa_r+0x8d0>)
 8010d4c:	2200      	movs	r2, #0
 8010d4e:	f7ef fc5b 	bl	8000608 <__aeabi_dmul>
 8010d52:	2200      	movs	r2, #0
 8010d54:	2300      	movs	r3, #0
 8010d56:	4604      	mov	r4, r0
 8010d58:	460d      	mov	r5, r1
 8010d5a:	f7ef febd 	bl	8000ad8 <__aeabi_dcmpeq>
 8010d5e:	2800      	cmp	r0, #0
 8010d60:	f43f aebb 	beq.w	8010ada <_dtoa_r+0x472>
 8010d64:	e6f0      	b.n	8010b48 <_dtoa_r+0x4e0>
 8010d66:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8010d68:	2a00      	cmp	r2, #0
 8010d6a:	f000 80db 	beq.w	8010f24 <_dtoa_r+0x8bc>
 8010d6e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010d70:	2a01      	cmp	r2, #1
 8010d72:	f300 80bf 	bgt.w	8010ef4 <_dtoa_r+0x88c>
 8010d76:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8010d78:	2a00      	cmp	r2, #0
 8010d7a:	f000 80b7 	beq.w	8010eec <_dtoa_r+0x884>
 8010d7e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8010d82:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8010d84:	4646      	mov	r6, r8
 8010d86:	9a08      	ldr	r2, [sp, #32]
 8010d88:	2101      	movs	r1, #1
 8010d8a:	441a      	add	r2, r3
 8010d8c:	4658      	mov	r0, fp
 8010d8e:	4498      	add	r8, r3
 8010d90:	9208      	str	r2, [sp, #32]
 8010d92:	f000 fb6b 	bl	801146c <__i2b>
 8010d96:	4605      	mov	r5, r0
 8010d98:	b15e      	cbz	r6, 8010db2 <_dtoa_r+0x74a>
 8010d9a:	9b08      	ldr	r3, [sp, #32]
 8010d9c:	2b00      	cmp	r3, #0
 8010d9e:	dd08      	ble.n	8010db2 <_dtoa_r+0x74a>
 8010da0:	42b3      	cmp	r3, r6
 8010da2:	9a08      	ldr	r2, [sp, #32]
 8010da4:	bfa8      	it	ge
 8010da6:	4633      	movge	r3, r6
 8010da8:	eba8 0803 	sub.w	r8, r8, r3
 8010dac:	1af6      	subs	r6, r6, r3
 8010dae:	1ad3      	subs	r3, r2, r3
 8010db0:	9308      	str	r3, [sp, #32]
 8010db2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010db4:	b1f3      	cbz	r3, 8010df4 <_dtoa_r+0x78c>
 8010db6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010db8:	2b00      	cmp	r3, #0
 8010dba:	f000 80b7 	beq.w	8010f2c <_dtoa_r+0x8c4>
 8010dbe:	b18c      	cbz	r4, 8010de4 <_dtoa_r+0x77c>
 8010dc0:	4629      	mov	r1, r5
 8010dc2:	4622      	mov	r2, r4
 8010dc4:	4658      	mov	r0, fp
 8010dc6:	f000 fc11 	bl	80115ec <__pow5mult>
 8010dca:	464a      	mov	r2, r9
 8010dcc:	4601      	mov	r1, r0
 8010dce:	4605      	mov	r5, r0
 8010dd0:	4658      	mov	r0, fp
 8010dd2:	f000 fb61 	bl	8011498 <__multiply>
 8010dd6:	4649      	mov	r1, r9
 8010dd8:	9004      	str	r0, [sp, #16]
 8010dda:	4658      	mov	r0, fp
 8010ddc:	f000 fa92 	bl	8011304 <_Bfree>
 8010de0:	9b04      	ldr	r3, [sp, #16]
 8010de2:	4699      	mov	r9, r3
 8010de4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010de6:	1b1a      	subs	r2, r3, r4
 8010de8:	d004      	beq.n	8010df4 <_dtoa_r+0x78c>
 8010dea:	4649      	mov	r1, r9
 8010dec:	4658      	mov	r0, fp
 8010dee:	f000 fbfd 	bl	80115ec <__pow5mult>
 8010df2:	4681      	mov	r9, r0
 8010df4:	2101      	movs	r1, #1
 8010df6:	4658      	mov	r0, fp
 8010df8:	f000 fb38 	bl	801146c <__i2b>
 8010dfc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010dfe:	4604      	mov	r4, r0
 8010e00:	2b00      	cmp	r3, #0
 8010e02:	f000 81cf 	beq.w	80111a4 <_dtoa_r+0xb3c>
 8010e06:	461a      	mov	r2, r3
 8010e08:	4601      	mov	r1, r0
 8010e0a:	4658      	mov	r0, fp
 8010e0c:	f000 fbee 	bl	80115ec <__pow5mult>
 8010e10:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010e12:	2b01      	cmp	r3, #1
 8010e14:	4604      	mov	r4, r0
 8010e16:	f300 8095 	bgt.w	8010f44 <_dtoa_r+0x8dc>
 8010e1a:	9b02      	ldr	r3, [sp, #8]
 8010e1c:	2b00      	cmp	r3, #0
 8010e1e:	f040 8087 	bne.w	8010f30 <_dtoa_r+0x8c8>
 8010e22:	9b03      	ldr	r3, [sp, #12]
 8010e24:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010e28:	2b00      	cmp	r3, #0
 8010e2a:	f040 8089 	bne.w	8010f40 <_dtoa_r+0x8d8>
 8010e2e:	9b03      	ldr	r3, [sp, #12]
 8010e30:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8010e34:	0d1b      	lsrs	r3, r3, #20
 8010e36:	051b      	lsls	r3, r3, #20
 8010e38:	b12b      	cbz	r3, 8010e46 <_dtoa_r+0x7de>
 8010e3a:	9b08      	ldr	r3, [sp, #32]
 8010e3c:	3301      	adds	r3, #1
 8010e3e:	9308      	str	r3, [sp, #32]
 8010e40:	f108 0801 	add.w	r8, r8, #1
 8010e44:	2301      	movs	r3, #1
 8010e46:	930a      	str	r3, [sp, #40]	@ 0x28
 8010e48:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010e4a:	2b00      	cmp	r3, #0
 8010e4c:	f000 81b0 	beq.w	80111b0 <_dtoa_r+0xb48>
 8010e50:	6923      	ldr	r3, [r4, #16]
 8010e52:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8010e56:	6918      	ldr	r0, [r3, #16]
 8010e58:	f000 fabc 	bl	80113d4 <__hi0bits>
 8010e5c:	f1c0 0020 	rsb	r0, r0, #32
 8010e60:	9b08      	ldr	r3, [sp, #32]
 8010e62:	4418      	add	r0, r3
 8010e64:	f010 001f 	ands.w	r0, r0, #31
 8010e68:	d077      	beq.n	8010f5a <_dtoa_r+0x8f2>
 8010e6a:	f1c0 0320 	rsb	r3, r0, #32
 8010e6e:	2b04      	cmp	r3, #4
 8010e70:	dd6b      	ble.n	8010f4a <_dtoa_r+0x8e2>
 8010e72:	9b08      	ldr	r3, [sp, #32]
 8010e74:	f1c0 001c 	rsb	r0, r0, #28
 8010e78:	4403      	add	r3, r0
 8010e7a:	4480      	add	r8, r0
 8010e7c:	4406      	add	r6, r0
 8010e7e:	9308      	str	r3, [sp, #32]
 8010e80:	f1b8 0f00 	cmp.w	r8, #0
 8010e84:	dd05      	ble.n	8010e92 <_dtoa_r+0x82a>
 8010e86:	4649      	mov	r1, r9
 8010e88:	4642      	mov	r2, r8
 8010e8a:	4658      	mov	r0, fp
 8010e8c:	f000 fc08 	bl	80116a0 <__lshift>
 8010e90:	4681      	mov	r9, r0
 8010e92:	9b08      	ldr	r3, [sp, #32]
 8010e94:	2b00      	cmp	r3, #0
 8010e96:	dd05      	ble.n	8010ea4 <_dtoa_r+0x83c>
 8010e98:	4621      	mov	r1, r4
 8010e9a:	461a      	mov	r2, r3
 8010e9c:	4658      	mov	r0, fp
 8010e9e:	f000 fbff 	bl	80116a0 <__lshift>
 8010ea2:	4604      	mov	r4, r0
 8010ea4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8010ea6:	2b00      	cmp	r3, #0
 8010ea8:	d059      	beq.n	8010f5e <_dtoa_r+0x8f6>
 8010eaa:	4621      	mov	r1, r4
 8010eac:	4648      	mov	r0, r9
 8010eae:	f000 fc63 	bl	8011778 <__mcmp>
 8010eb2:	2800      	cmp	r0, #0
 8010eb4:	da53      	bge.n	8010f5e <_dtoa_r+0x8f6>
 8010eb6:	1e7b      	subs	r3, r7, #1
 8010eb8:	9304      	str	r3, [sp, #16]
 8010eba:	4649      	mov	r1, r9
 8010ebc:	2300      	movs	r3, #0
 8010ebe:	220a      	movs	r2, #10
 8010ec0:	4658      	mov	r0, fp
 8010ec2:	f000 fa41 	bl	8011348 <__multadd>
 8010ec6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010ec8:	4681      	mov	r9, r0
 8010eca:	2b00      	cmp	r3, #0
 8010ecc:	f000 8172 	beq.w	80111b4 <_dtoa_r+0xb4c>
 8010ed0:	2300      	movs	r3, #0
 8010ed2:	4629      	mov	r1, r5
 8010ed4:	220a      	movs	r2, #10
 8010ed6:	4658      	mov	r0, fp
 8010ed8:	f000 fa36 	bl	8011348 <__multadd>
 8010edc:	9b00      	ldr	r3, [sp, #0]
 8010ede:	2b00      	cmp	r3, #0
 8010ee0:	4605      	mov	r5, r0
 8010ee2:	dc67      	bgt.n	8010fb4 <_dtoa_r+0x94c>
 8010ee4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010ee6:	2b02      	cmp	r3, #2
 8010ee8:	dc41      	bgt.n	8010f6e <_dtoa_r+0x906>
 8010eea:	e063      	b.n	8010fb4 <_dtoa_r+0x94c>
 8010eec:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8010eee:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8010ef2:	e746      	b.n	8010d82 <_dtoa_r+0x71a>
 8010ef4:	9b07      	ldr	r3, [sp, #28]
 8010ef6:	1e5c      	subs	r4, r3, #1
 8010ef8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010efa:	42a3      	cmp	r3, r4
 8010efc:	bfbf      	itttt	lt
 8010efe:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8010f00:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8010f02:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8010f04:	1ae3      	sublt	r3, r4, r3
 8010f06:	bfb4      	ite	lt
 8010f08:	18d2      	addlt	r2, r2, r3
 8010f0a:	1b1c      	subge	r4, r3, r4
 8010f0c:	9b07      	ldr	r3, [sp, #28]
 8010f0e:	bfbc      	itt	lt
 8010f10:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8010f12:	2400      	movlt	r4, #0
 8010f14:	2b00      	cmp	r3, #0
 8010f16:	bfb5      	itete	lt
 8010f18:	eba8 0603 	sublt.w	r6, r8, r3
 8010f1c:	9b07      	ldrge	r3, [sp, #28]
 8010f1e:	2300      	movlt	r3, #0
 8010f20:	4646      	movge	r6, r8
 8010f22:	e730      	b.n	8010d86 <_dtoa_r+0x71e>
 8010f24:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8010f26:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8010f28:	4646      	mov	r6, r8
 8010f2a:	e735      	b.n	8010d98 <_dtoa_r+0x730>
 8010f2c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8010f2e:	e75c      	b.n	8010dea <_dtoa_r+0x782>
 8010f30:	2300      	movs	r3, #0
 8010f32:	e788      	b.n	8010e46 <_dtoa_r+0x7de>
 8010f34:	3fe00000 	.word	0x3fe00000
 8010f38:	40240000 	.word	0x40240000
 8010f3c:	40140000 	.word	0x40140000
 8010f40:	9b02      	ldr	r3, [sp, #8]
 8010f42:	e780      	b.n	8010e46 <_dtoa_r+0x7de>
 8010f44:	2300      	movs	r3, #0
 8010f46:	930a      	str	r3, [sp, #40]	@ 0x28
 8010f48:	e782      	b.n	8010e50 <_dtoa_r+0x7e8>
 8010f4a:	d099      	beq.n	8010e80 <_dtoa_r+0x818>
 8010f4c:	9a08      	ldr	r2, [sp, #32]
 8010f4e:	331c      	adds	r3, #28
 8010f50:	441a      	add	r2, r3
 8010f52:	4498      	add	r8, r3
 8010f54:	441e      	add	r6, r3
 8010f56:	9208      	str	r2, [sp, #32]
 8010f58:	e792      	b.n	8010e80 <_dtoa_r+0x818>
 8010f5a:	4603      	mov	r3, r0
 8010f5c:	e7f6      	b.n	8010f4c <_dtoa_r+0x8e4>
 8010f5e:	9b07      	ldr	r3, [sp, #28]
 8010f60:	9704      	str	r7, [sp, #16]
 8010f62:	2b00      	cmp	r3, #0
 8010f64:	dc20      	bgt.n	8010fa8 <_dtoa_r+0x940>
 8010f66:	9300      	str	r3, [sp, #0]
 8010f68:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010f6a:	2b02      	cmp	r3, #2
 8010f6c:	dd1e      	ble.n	8010fac <_dtoa_r+0x944>
 8010f6e:	9b00      	ldr	r3, [sp, #0]
 8010f70:	2b00      	cmp	r3, #0
 8010f72:	f47f aec0 	bne.w	8010cf6 <_dtoa_r+0x68e>
 8010f76:	4621      	mov	r1, r4
 8010f78:	2205      	movs	r2, #5
 8010f7a:	4658      	mov	r0, fp
 8010f7c:	f000 f9e4 	bl	8011348 <__multadd>
 8010f80:	4601      	mov	r1, r0
 8010f82:	4604      	mov	r4, r0
 8010f84:	4648      	mov	r0, r9
 8010f86:	f000 fbf7 	bl	8011778 <__mcmp>
 8010f8a:	2800      	cmp	r0, #0
 8010f8c:	f77f aeb3 	ble.w	8010cf6 <_dtoa_r+0x68e>
 8010f90:	4656      	mov	r6, sl
 8010f92:	2331      	movs	r3, #49	@ 0x31
 8010f94:	f806 3b01 	strb.w	r3, [r6], #1
 8010f98:	9b04      	ldr	r3, [sp, #16]
 8010f9a:	3301      	adds	r3, #1
 8010f9c:	9304      	str	r3, [sp, #16]
 8010f9e:	e6ae      	b.n	8010cfe <_dtoa_r+0x696>
 8010fa0:	9c07      	ldr	r4, [sp, #28]
 8010fa2:	9704      	str	r7, [sp, #16]
 8010fa4:	4625      	mov	r5, r4
 8010fa6:	e7f3      	b.n	8010f90 <_dtoa_r+0x928>
 8010fa8:	9b07      	ldr	r3, [sp, #28]
 8010faa:	9300      	str	r3, [sp, #0]
 8010fac:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010fae:	2b00      	cmp	r3, #0
 8010fb0:	f000 8104 	beq.w	80111bc <_dtoa_r+0xb54>
 8010fb4:	2e00      	cmp	r6, #0
 8010fb6:	dd05      	ble.n	8010fc4 <_dtoa_r+0x95c>
 8010fb8:	4629      	mov	r1, r5
 8010fba:	4632      	mov	r2, r6
 8010fbc:	4658      	mov	r0, fp
 8010fbe:	f000 fb6f 	bl	80116a0 <__lshift>
 8010fc2:	4605      	mov	r5, r0
 8010fc4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010fc6:	2b00      	cmp	r3, #0
 8010fc8:	d05a      	beq.n	8011080 <_dtoa_r+0xa18>
 8010fca:	6869      	ldr	r1, [r5, #4]
 8010fcc:	4658      	mov	r0, fp
 8010fce:	f000 f959 	bl	8011284 <_Balloc>
 8010fd2:	4606      	mov	r6, r0
 8010fd4:	b928      	cbnz	r0, 8010fe2 <_dtoa_r+0x97a>
 8010fd6:	4b84      	ldr	r3, [pc, #528]	@ (80111e8 <_dtoa_r+0xb80>)
 8010fd8:	4602      	mov	r2, r0
 8010fda:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8010fde:	f7ff bb5a 	b.w	8010696 <_dtoa_r+0x2e>
 8010fe2:	692a      	ldr	r2, [r5, #16]
 8010fe4:	3202      	adds	r2, #2
 8010fe6:	0092      	lsls	r2, r2, #2
 8010fe8:	f105 010c 	add.w	r1, r5, #12
 8010fec:	300c      	adds	r0, #12
 8010fee:	f7ff faa4 	bl	801053a <memcpy>
 8010ff2:	2201      	movs	r2, #1
 8010ff4:	4631      	mov	r1, r6
 8010ff6:	4658      	mov	r0, fp
 8010ff8:	f000 fb52 	bl	80116a0 <__lshift>
 8010ffc:	f10a 0301 	add.w	r3, sl, #1
 8011000:	9307      	str	r3, [sp, #28]
 8011002:	9b00      	ldr	r3, [sp, #0]
 8011004:	4453      	add	r3, sl
 8011006:	930b      	str	r3, [sp, #44]	@ 0x2c
 8011008:	9b02      	ldr	r3, [sp, #8]
 801100a:	f003 0301 	and.w	r3, r3, #1
 801100e:	462f      	mov	r7, r5
 8011010:	930a      	str	r3, [sp, #40]	@ 0x28
 8011012:	4605      	mov	r5, r0
 8011014:	9b07      	ldr	r3, [sp, #28]
 8011016:	4621      	mov	r1, r4
 8011018:	3b01      	subs	r3, #1
 801101a:	4648      	mov	r0, r9
 801101c:	9300      	str	r3, [sp, #0]
 801101e:	f7ff fa9a 	bl	8010556 <quorem>
 8011022:	4639      	mov	r1, r7
 8011024:	9002      	str	r0, [sp, #8]
 8011026:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 801102a:	4648      	mov	r0, r9
 801102c:	f000 fba4 	bl	8011778 <__mcmp>
 8011030:	462a      	mov	r2, r5
 8011032:	9008      	str	r0, [sp, #32]
 8011034:	4621      	mov	r1, r4
 8011036:	4658      	mov	r0, fp
 8011038:	f000 fbba 	bl	80117b0 <__mdiff>
 801103c:	68c2      	ldr	r2, [r0, #12]
 801103e:	4606      	mov	r6, r0
 8011040:	bb02      	cbnz	r2, 8011084 <_dtoa_r+0xa1c>
 8011042:	4601      	mov	r1, r0
 8011044:	4648      	mov	r0, r9
 8011046:	f000 fb97 	bl	8011778 <__mcmp>
 801104a:	4602      	mov	r2, r0
 801104c:	4631      	mov	r1, r6
 801104e:	4658      	mov	r0, fp
 8011050:	920e      	str	r2, [sp, #56]	@ 0x38
 8011052:	f000 f957 	bl	8011304 <_Bfree>
 8011056:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011058:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801105a:	9e07      	ldr	r6, [sp, #28]
 801105c:	ea43 0102 	orr.w	r1, r3, r2
 8011060:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011062:	4319      	orrs	r1, r3
 8011064:	d110      	bne.n	8011088 <_dtoa_r+0xa20>
 8011066:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801106a:	d029      	beq.n	80110c0 <_dtoa_r+0xa58>
 801106c:	9b08      	ldr	r3, [sp, #32]
 801106e:	2b00      	cmp	r3, #0
 8011070:	dd02      	ble.n	8011078 <_dtoa_r+0xa10>
 8011072:	9b02      	ldr	r3, [sp, #8]
 8011074:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8011078:	9b00      	ldr	r3, [sp, #0]
 801107a:	f883 8000 	strb.w	r8, [r3]
 801107e:	e63f      	b.n	8010d00 <_dtoa_r+0x698>
 8011080:	4628      	mov	r0, r5
 8011082:	e7bb      	b.n	8010ffc <_dtoa_r+0x994>
 8011084:	2201      	movs	r2, #1
 8011086:	e7e1      	b.n	801104c <_dtoa_r+0x9e4>
 8011088:	9b08      	ldr	r3, [sp, #32]
 801108a:	2b00      	cmp	r3, #0
 801108c:	db04      	blt.n	8011098 <_dtoa_r+0xa30>
 801108e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8011090:	430b      	orrs	r3, r1
 8011092:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8011094:	430b      	orrs	r3, r1
 8011096:	d120      	bne.n	80110da <_dtoa_r+0xa72>
 8011098:	2a00      	cmp	r2, #0
 801109a:	dded      	ble.n	8011078 <_dtoa_r+0xa10>
 801109c:	4649      	mov	r1, r9
 801109e:	2201      	movs	r2, #1
 80110a0:	4658      	mov	r0, fp
 80110a2:	f000 fafd 	bl	80116a0 <__lshift>
 80110a6:	4621      	mov	r1, r4
 80110a8:	4681      	mov	r9, r0
 80110aa:	f000 fb65 	bl	8011778 <__mcmp>
 80110ae:	2800      	cmp	r0, #0
 80110b0:	dc03      	bgt.n	80110ba <_dtoa_r+0xa52>
 80110b2:	d1e1      	bne.n	8011078 <_dtoa_r+0xa10>
 80110b4:	f018 0f01 	tst.w	r8, #1
 80110b8:	d0de      	beq.n	8011078 <_dtoa_r+0xa10>
 80110ba:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80110be:	d1d8      	bne.n	8011072 <_dtoa_r+0xa0a>
 80110c0:	9a00      	ldr	r2, [sp, #0]
 80110c2:	2339      	movs	r3, #57	@ 0x39
 80110c4:	7013      	strb	r3, [r2, #0]
 80110c6:	4633      	mov	r3, r6
 80110c8:	461e      	mov	r6, r3
 80110ca:	3b01      	subs	r3, #1
 80110cc:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80110d0:	2a39      	cmp	r2, #57	@ 0x39
 80110d2:	d052      	beq.n	801117a <_dtoa_r+0xb12>
 80110d4:	3201      	adds	r2, #1
 80110d6:	701a      	strb	r2, [r3, #0]
 80110d8:	e612      	b.n	8010d00 <_dtoa_r+0x698>
 80110da:	2a00      	cmp	r2, #0
 80110dc:	dd07      	ble.n	80110ee <_dtoa_r+0xa86>
 80110de:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80110e2:	d0ed      	beq.n	80110c0 <_dtoa_r+0xa58>
 80110e4:	9a00      	ldr	r2, [sp, #0]
 80110e6:	f108 0301 	add.w	r3, r8, #1
 80110ea:	7013      	strb	r3, [r2, #0]
 80110ec:	e608      	b.n	8010d00 <_dtoa_r+0x698>
 80110ee:	9b07      	ldr	r3, [sp, #28]
 80110f0:	9a07      	ldr	r2, [sp, #28]
 80110f2:	f803 8c01 	strb.w	r8, [r3, #-1]
 80110f6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80110f8:	4293      	cmp	r3, r2
 80110fa:	d028      	beq.n	801114e <_dtoa_r+0xae6>
 80110fc:	4649      	mov	r1, r9
 80110fe:	2300      	movs	r3, #0
 8011100:	220a      	movs	r2, #10
 8011102:	4658      	mov	r0, fp
 8011104:	f000 f920 	bl	8011348 <__multadd>
 8011108:	42af      	cmp	r7, r5
 801110a:	4681      	mov	r9, r0
 801110c:	f04f 0300 	mov.w	r3, #0
 8011110:	f04f 020a 	mov.w	r2, #10
 8011114:	4639      	mov	r1, r7
 8011116:	4658      	mov	r0, fp
 8011118:	d107      	bne.n	801112a <_dtoa_r+0xac2>
 801111a:	f000 f915 	bl	8011348 <__multadd>
 801111e:	4607      	mov	r7, r0
 8011120:	4605      	mov	r5, r0
 8011122:	9b07      	ldr	r3, [sp, #28]
 8011124:	3301      	adds	r3, #1
 8011126:	9307      	str	r3, [sp, #28]
 8011128:	e774      	b.n	8011014 <_dtoa_r+0x9ac>
 801112a:	f000 f90d 	bl	8011348 <__multadd>
 801112e:	4629      	mov	r1, r5
 8011130:	4607      	mov	r7, r0
 8011132:	2300      	movs	r3, #0
 8011134:	220a      	movs	r2, #10
 8011136:	4658      	mov	r0, fp
 8011138:	f000 f906 	bl	8011348 <__multadd>
 801113c:	4605      	mov	r5, r0
 801113e:	e7f0      	b.n	8011122 <_dtoa_r+0xaba>
 8011140:	9b00      	ldr	r3, [sp, #0]
 8011142:	2b00      	cmp	r3, #0
 8011144:	bfcc      	ite	gt
 8011146:	461e      	movgt	r6, r3
 8011148:	2601      	movle	r6, #1
 801114a:	4456      	add	r6, sl
 801114c:	2700      	movs	r7, #0
 801114e:	4649      	mov	r1, r9
 8011150:	2201      	movs	r2, #1
 8011152:	4658      	mov	r0, fp
 8011154:	f000 faa4 	bl	80116a0 <__lshift>
 8011158:	4621      	mov	r1, r4
 801115a:	4681      	mov	r9, r0
 801115c:	f000 fb0c 	bl	8011778 <__mcmp>
 8011160:	2800      	cmp	r0, #0
 8011162:	dcb0      	bgt.n	80110c6 <_dtoa_r+0xa5e>
 8011164:	d102      	bne.n	801116c <_dtoa_r+0xb04>
 8011166:	f018 0f01 	tst.w	r8, #1
 801116a:	d1ac      	bne.n	80110c6 <_dtoa_r+0xa5e>
 801116c:	4633      	mov	r3, r6
 801116e:	461e      	mov	r6, r3
 8011170:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8011174:	2a30      	cmp	r2, #48	@ 0x30
 8011176:	d0fa      	beq.n	801116e <_dtoa_r+0xb06>
 8011178:	e5c2      	b.n	8010d00 <_dtoa_r+0x698>
 801117a:	459a      	cmp	sl, r3
 801117c:	d1a4      	bne.n	80110c8 <_dtoa_r+0xa60>
 801117e:	9b04      	ldr	r3, [sp, #16]
 8011180:	3301      	adds	r3, #1
 8011182:	9304      	str	r3, [sp, #16]
 8011184:	2331      	movs	r3, #49	@ 0x31
 8011186:	f88a 3000 	strb.w	r3, [sl]
 801118a:	e5b9      	b.n	8010d00 <_dtoa_r+0x698>
 801118c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801118e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80111ec <_dtoa_r+0xb84>
 8011192:	b11b      	cbz	r3, 801119c <_dtoa_r+0xb34>
 8011194:	f10a 0308 	add.w	r3, sl, #8
 8011198:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 801119a:	6013      	str	r3, [r2, #0]
 801119c:	4650      	mov	r0, sl
 801119e:	b019      	add	sp, #100	@ 0x64
 80111a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80111a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80111a6:	2b01      	cmp	r3, #1
 80111a8:	f77f ae37 	ble.w	8010e1a <_dtoa_r+0x7b2>
 80111ac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80111ae:	930a      	str	r3, [sp, #40]	@ 0x28
 80111b0:	2001      	movs	r0, #1
 80111b2:	e655      	b.n	8010e60 <_dtoa_r+0x7f8>
 80111b4:	9b00      	ldr	r3, [sp, #0]
 80111b6:	2b00      	cmp	r3, #0
 80111b8:	f77f aed6 	ble.w	8010f68 <_dtoa_r+0x900>
 80111bc:	4656      	mov	r6, sl
 80111be:	4621      	mov	r1, r4
 80111c0:	4648      	mov	r0, r9
 80111c2:	f7ff f9c8 	bl	8010556 <quorem>
 80111c6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80111ca:	f806 8b01 	strb.w	r8, [r6], #1
 80111ce:	9b00      	ldr	r3, [sp, #0]
 80111d0:	eba6 020a 	sub.w	r2, r6, sl
 80111d4:	4293      	cmp	r3, r2
 80111d6:	ddb3      	ble.n	8011140 <_dtoa_r+0xad8>
 80111d8:	4649      	mov	r1, r9
 80111da:	2300      	movs	r3, #0
 80111dc:	220a      	movs	r2, #10
 80111de:	4658      	mov	r0, fp
 80111e0:	f000 f8b2 	bl	8011348 <__multadd>
 80111e4:	4681      	mov	r9, r0
 80111e6:	e7ea      	b.n	80111be <_dtoa_r+0xb56>
 80111e8:	08012b1c 	.word	0x08012b1c
 80111ec:	08012aa0 	.word	0x08012aa0

080111f0 <_free_r>:
 80111f0:	b538      	push	{r3, r4, r5, lr}
 80111f2:	4605      	mov	r5, r0
 80111f4:	2900      	cmp	r1, #0
 80111f6:	d041      	beq.n	801127c <_free_r+0x8c>
 80111f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80111fc:	1f0c      	subs	r4, r1, #4
 80111fe:	2b00      	cmp	r3, #0
 8011200:	bfb8      	it	lt
 8011202:	18e4      	addlt	r4, r4, r3
 8011204:	f7fe fa9c 	bl	800f740 <__malloc_lock>
 8011208:	4a1d      	ldr	r2, [pc, #116]	@ (8011280 <_free_r+0x90>)
 801120a:	6813      	ldr	r3, [r2, #0]
 801120c:	b933      	cbnz	r3, 801121c <_free_r+0x2c>
 801120e:	6063      	str	r3, [r4, #4]
 8011210:	6014      	str	r4, [r2, #0]
 8011212:	4628      	mov	r0, r5
 8011214:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011218:	f7fe ba98 	b.w	800f74c <__malloc_unlock>
 801121c:	42a3      	cmp	r3, r4
 801121e:	d908      	bls.n	8011232 <_free_r+0x42>
 8011220:	6820      	ldr	r0, [r4, #0]
 8011222:	1821      	adds	r1, r4, r0
 8011224:	428b      	cmp	r3, r1
 8011226:	bf01      	itttt	eq
 8011228:	6819      	ldreq	r1, [r3, #0]
 801122a:	685b      	ldreq	r3, [r3, #4]
 801122c:	1809      	addeq	r1, r1, r0
 801122e:	6021      	streq	r1, [r4, #0]
 8011230:	e7ed      	b.n	801120e <_free_r+0x1e>
 8011232:	461a      	mov	r2, r3
 8011234:	685b      	ldr	r3, [r3, #4]
 8011236:	b10b      	cbz	r3, 801123c <_free_r+0x4c>
 8011238:	42a3      	cmp	r3, r4
 801123a:	d9fa      	bls.n	8011232 <_free_r+0x42>
 801123c:	6811      	ldr	r1, [r2, #0]
 801123e:	1850      	adds	r0, r2, r1
 8011240:	42a0      	cmp	r0, r4
 8011242:	d10b      	bne.n	801125c <_free_r+0x6c>
 8011244:	6820      	ldr	r0, [r4, #0]
 8011246:	4401      	add	r1, r0
 8011248:	1850      	adds	r0, r2, r1
 801124a:	4283      	cmp	r3, r0
 801124c:	6011      	str	r1, [r2, #0]
 801124e:	d1e0      	bne.n	8011212 <_free_r+0x22>
 8011250:	6818      	ldr	r0, [r3, #0]
 8011252:	685b      	ldr	r3, [r3, #4]
 8011254:	6053      	str	r3, [r2, #4]
 8011256:	4408      	add	r0, r1
 8011258:	6010      	str	r0, [r2, #0]
 801125a:	e7da      	b.n	8011212 <_free_r+0x22>
 801125c:	d902      	bls.n	8011264 <_free_r+0x74>
 801125e:	230c      	movs	r3, #12
 8011260:	602b      	str	r3, [r5, #0]
 8011262:	e7d6      	b.n	8011212 <_free_r+0x22>
 8011264:	6820      	ldr	r0, [r4, #0]
 8011266:	1821      	adds	r1, r4, r0
 8011268:	428b      	cmp	r3, r1
 801126a:	bf04      	itt	eq
 801126c:	6819      	ldreq	r1, [r3, #0]
 801126e:	685b      	ldreq	r3, [r3, #4]
 8011270:	6063      	str	r3, [r4, #4]
 8011272:	bf04      	itt	eq
 8011274:	1809      	addeq	r1, r1, r0
 8011276:	6021      	streq	r1, [r4, #0]
 8011278:	6054      	str	r4, [r2, #4]
 801127a:	e7ca      	b.n	8011212 <_free_r+0x22>
 801127c:	bd38      	pop	{r3, r4, r5, pc}
 801127e:	bf00      	nop
 8011280:	200237c8 	.word	0x200237c8

08011284 <_Balloc>:
 8011284:	b570      	push	{r4, r5, r6, lr}
 8011286:	69c6      	ldr	r6, [r0, #28]
 8011288:	4604      	mov	r4, r0
 801128a:	460d      	mov	r5, r1
 801128c:	b976      	cbnz	r6, 80112ac <_Balloc+0x28>
 801128e:	2010      	movs	r0, #16
 8011290:	f7fe f9a4 	bl	800f5dc <malloc>
 8011294:	4602      	mov	r2, r0
 8011296:	61e0      	str	r0, [r4, #28]
 8011298:	b920      	cbnz	r0, 80112a4 <_Balloc+0x20>
 801129a:	4b18      	ldr	r3, [pc, #96]	@ (80112fc <_Balloc+0x78>)
 801129c:	4818      	ldr	r0, [pc, #96]	@ (8011300 <_Balloc+0x7c>)
 801129e:	216b      	movs	r1, #107	@ 0x6b
 80112a0:	f000 fde4 	bl	8011e6c <__assert_func>
 80112a4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80112a8:	6006      	str	r6, [r0, #0]
 80112aa:	60c6      	str	r6, [r0, #12]
 80112ac:	69e6      	ldr	r6, [r4, #28]
 80112ae:	68f3      	ldr	r3, [r6, #12]
 80112b0:	b183      	cbz	r3, 80112d4 <_Balloc+0x50>
 80112b2:	69e3      	ldr	r3, [r4, #28]
 80112b4:	68db      	ldr	r3, [r3, #12]
 80112b6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80112ba:	b9b8      	cbnz	r0, 80112ec <_Balloc+0x68>
 80112bc:	2101      	movs	r1, #1
 80112be:	fa01 f605 	lsl.w	r6, r1, r5
 80112c2:	1d72      	adds	r2, r6, #5
 80112c4:	0092      	lsls	r2, r2, #2
 80112c6:	4620      	mov	r0, r4
 80112c8:	f000 fdee 	bl	8011ea8 <_calloc_r>
 80112cc:	b160      	cbz	r0, 80112e8 <_Balloc+0x64>
 80112ce:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80112d2:	e00e      	b.n	80112f2 <_Balloc+0x6e>
 80112d4:	2221      	movs	r2, #33	@ 0x21
 80112d6:	2104      	movs	r1, #4
 80112d8:	4620      	mov	r0, r4
 80112da:	f000 fde5 	bl	8011ea8 <_calloc_r>
 80112de:	69e3      	ldr	r3, [r4, #28]
 80112e0:	60f0      	str	r0, [r6, #12]
 80112e2:	68db      	ldr	r3, [r3, #12]
 80112e4:	2b00      	cmp	r3, #0
 80112e6:	d1e4      	bne.n	80112b2 <_Balloc+0x2e>
 80112e8:	2000      	movs	r0, #0
 80112ea:	bd70      	pop	{r4, r5, r6, pc}
 80112ec:	6802      	ldr	r2, [r0, #0]
 80112ee:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80112f2:	2300      	movs	r3, #0
 80112f4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80112f8:	e7f7      	b.n	80112ea <_Balloc+0x66>
 80112fa:	bf00      	nop
 80112fc:	08012aad 	.word	0x08012aad
 8011300:	08012b2d 	.word	0x08012b2d

08011304 <_Bfree>:
 8011304:	b570      	push	{r4, r5, r6, lr}
 8011306:	69c6      	ldr	r6, [r0, #28]
 8011308:	4605      	mov	r5, r0
 801130a:	460c      	mov	r4, r1
 801130c:	b976      	cbnz	r6, 801132c <_Bfree+0x28>
 801130e:	2010      	movs	r0, #16
 8011310:	f7fe f964 	bl	800f5dc <malloc>
 8011314:	4602      	mov	r2, r0
 8011316:	61e8      	str	r0, [r5, #28]
 8011318:	b920      	cbnz	r0, 8011324 <_Bfree+0x20>
 801131a:	4b09      	ldr	r3, [pc, #36]	@ (8011340 <_Bfree+0x3c>)
 801131c:	4809      	ldr	r0, [pc, #36]	@ (8011344 <_Bfree+0x40>)
 801131e:	218f      	movs	r1, #143	@ 0x8f
 8011320:	f000 fda4 	bl	8011e6c <__assert_func>
 8011324:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011328:	6006      	str	r6, [r0, #0]
 801132a:	60c6      	str	r6, [r0, #12]
 801132c:	b13c      	cbz	r4, 801133e <_Bfree+0x3a>
 801132e:	69eb      	ldr	r3, [r5, #28]
 8011330:	6862      	ldr	r2, [r4, #4]
 8011332:	68db      	ldr	r3, [r3, #12]
 8011334:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8011338:	6021      	str	r1, [r4, #0]
 801133a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801133e:	bd70      	pop	{r4, r5, r6, pc}
 8011340:	08012aad 	.word	0x08012aad
 8011344:	08012b2d 	.word	0x08012b2d

08011348 <__multadd>:
 8011348:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801134c:	690d      	ldr	r5, [r1, #16]
 801134e:	4607      	mov	r7, r0
 8011350:	460c      	mov	r4, r1
 8011352:	461e      	mov	r6, r3
 8011354:	f101 0c14 	add.w	ip, r1, #20
 8011358:	2000      	movs	r0, #0
 801135a:	f8dc 3000 	ldr.w	r3, [ip]
 801135e:	b299      	uxth	r1, r3
 8011360:	fb02 6101 	mla	r1, r2, r1, r6
 8011364:	0c1e      	lsrs	r6, r3, #16
 8011366:	0c0b      	lsrs	r3, r1, #16
 8011368:	fb02 3306 	mla	r3, r2, r6, r3
 801136c:	b289      	uxth	r1, r1
 801136e:	3001      	adds	r0, #1
 8011370:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8011374:	4285      	cmp	r5, r0
 8011376:	f84c 1b04 	str.w	r1, [ip], #4
 801137a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801137e:	dcec      	bgt.n	801135a <__multadd+0x12>
 8011380:	b30e      	cbz	r6, 80113c6 <__multadd+0x7e>
 8011382:	68a3      	ldr	r3, [r4, #8]
 8011384:	42ab      	cmp	r3, r5
 8011386:	dc19      	bgt.n	80113bc <__multadd+0x74>
 8011388:	6861      	ldr	r1, [r4, #4]
 801138a:	4638      	mov	r0, r7
 801138c:	3101      	adds	r1, #1
 801138e:	f7ff ff79 	bl	8011284 <_Balloc>
 8011392:	4680      	mov	r8, r0
 8011394:	b928      	cbnz	r0, 80113a2 <__multadd+0x5a>
 8011396:	4602      	mov	r2, r0
 8011398:	4b0c      	ldr	r3, [pc, #48]	@ (80113cc <__multadd+0x84>)
 801139a:	480d      	ldr	r0, [pc, #52]	@ (80113d0 <__multadd+0x88>)
 801139c:	21ba      	movs	r1, #186	@ 0xba
 801139e:	f000 fd65 	bl	8011e6c <__assert_func>
 80113a2:	6922      	ldr	r2, [r4, #16]
 80113a4:	3202      	adds	r2, #2
 80113a6:	f104 010c 	add.w	r1, r4, #12
 80113aa:	0092      	lsls	r2, r2, #2
 80113ac:	300c      	adds	r0, #12
 80113ae:	f7ff f8c4 	bl	801053a <memcpy>
 80113b2:	4621      	mov	r1, r4
 80113b4:	4638      	mov	r0, r7
 80113b6:	f7ff ffa5 	bl	8011304 <_Bfree>
 80113ba:	4644      	mov	r4, r8
 80113bc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80113c0:	3501      	adds	r5, #1
 80113c2:	615e      	str	r6, [r3, #20]
 80113c4:	6125      	str	r5, [r4, #16]
 80113c6:	4620      	mov	r0, r4
 80113c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80113cc:	08012b1c 	.word	0x08012b1c
 80113d0:	08012b2d 	.word	0x08012b2d

080113d4 <__hi0bits>:
 80113d4:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80113d8:	4603      	mov	r3, r0
 80113da:	bf36      	itet	cc
 80113dc:	0403      	lslcc	r3, r0, #16
 80113de:	2000      	movcs	r0, #0
 80113e0:	2010      	movcc	r0, #16
 80113e2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80113e6:	bf3c      	itt	cc
 80113e8:	021b      	lslcc	r3, r3, #8
 80113ea:	3008      	addcc	r0, #8
 80113ec:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80113f0:	bf3c      	itt	cc
 80113f2:	011b      	lslcc	r3, r3, #4
 80113f4:	3004      	addcc	r0, #4
 80113f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80113fa:	bf3c      	itt	cc
 80113fc:	009b      	lslcc	r3, r3, #2
 80113fe:	3002      	addcc	r0, #2
 8011400:	2b00      	cmp	r3, #0
 8011402:	db05      	blt.n	8011410 <__hi0bits+0x3c>
 8011404:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8011408:	f100 0001 	add.w	r0, r0, #1
 801140c:	bf08      	it	eq
 801140e:	2020      	moveq	r0, #32
 8011410:	4770      	bx	lr

08011412 <__lo0bits>:
 8011412:	6803      	ldr	r3, [r0, #0]
 8011414:	4602      	mov	r2, r0
 8011416:	f013 0007 	ands.w	r0, r3, #7
 801141a:	d00b      	beq.n	8011434 <__lo0bits+0x22>
 801141c:	07d9      	lsls	r1, r3, #31
 801141e:	d421      	bmi.n	8011464 <__lo0bits+0x52>
 8011420:	0798      	lsls	r0, r3, #30
 8011422:	bf49      	itett	mi
 8011424:	085b      	lsrmi	r3, r3, #1
 8011426:	089b      	lsrpl	r3, r3, #2
 8011428:	2001      	movmi	r0, #1
 801142a:	6013      	strmi	r3, [r2, #0]
 801142c:	bf5c      	itt	pl
 801142e:	6013      	strpl	r3, [r2, #0]
 8011430:	2002      	movpl	r0, #2
 8011432:	4770      	bx	lr
 8011434:	b299      	uxth	r1, r3
 8011436:	b909      	cbnz	r1, 801143c <__lo0bits+0x2a>
 8011438:	0c1b      	lsrs	r3, r3, #16
 801143a:	2010      	movs	r0, #16
 801143c:	b2d9      	uxtb	r1, r3
 801143e:	b909      	cbnz	r1, 8011444 <__lo0bits+0x32>
 8011440:	3008      	adds	r0, #8
 8011442:	0a1b      	lsrs	r3, r3, #8
 8011444:	0719      	lsls	r1, r3, #28
 8011446:	bf04      	itt	eq
 8011448:	091b      	lsreq	r3, r3, #4
 801144a:	3004      	addeq	r0, #4
 801144c:	0799      	lsls	r1, r3, #30
 801144e:	bf04      	itt	eq
 8011450:	089b      	lsreq	r3, r3, #2
 8011452:	3002      	addeq	r0, #2
 8011454:	07d9      	lsls	r1, r3, #31
 8011456:	d403      	bmi.n	8011460 <__lo0bits+0x4e>
 8011458:	085b      	lsrs	r3, r3, #1
 801145a:	f100 0001 	add.w	r0, r0, #1
 801145e:	d003      	beq.n	8011468 <__lo0bits+0x56>
 8011460:	6013      	str	r3, [r2, #0]
 8011462:	4770      	bx	lr
 8011464:	2000      	movs	r0, #0
 8011466:	4770      	bx	lr
 8011468:	2020      	movs	r0, #32
 801146a:	4770      	bx	lr

0801146c <__i2b>:
 801146c:	b510      	push	{r4, lr}
 801146e:	460c      	mov	r4, r1
 8011470:	2101      	movs	r1, #1
 8011472:	f7ff ff07 	bl	8011284 <_Balloc>
 8011476:	4602      	mov	r2, r0
 8011478:	b928      	cbnz	r0, 8011486 <__i2b+0x1a>
 801147a:	4b05      	ldr	r3, [pc, #20]	@ (8011490 <__i2b+0x24>)
 801147c:	4805      	ldr	r0, [pc, #20]	@ (8011494 <__i2b+0x28>)
 801147e:	f240 1145 	movw	r1, #325	@ 0x145
 8011482:	f000 fcf3 	bl	8011e6c <__assert_func>
 8011486:	2301      	movs	r3, #1
 8011488:	6144      	str	r4, [r0, #20]
 801148a:	6103      	str	r3, [r0, #16]
 801148c:	bd10      	pop	{r4, pc}
 801148e:	bf00      	nop
 8011490:	08012b1c 	.word	0x08012b1c
 8011494:	08012b2d 	.word	0x08012b2d

08011498 <__multiply>:
 8011498:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801149c:	4614      	mov	r4, r2
 801149e:	690a      	ldr	r2, [r1, #16]
 80114a0:	6923      	ldr	r3, [r4, #16]
 80114a2:	429a      	cmp	r2, r3
 80114a4:	bfa8      	it	ge
 80114a6:	4623      	movge	r3, r4
 80114a8:	460f      	mov	r7, r1
 80114aa:	bfa4      	itt	ge
 80114ac:	460c      	movge	r4, r1
 80114ae:	461f      	movge	r7, r3
 80114b0:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80114b4:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80114b8:	68a3      	ldr	r3, [r4, #8]
 80114ba:	6861      	ldr	r1, [r4, #4]
 80114bc:	eb0a 0609 	add.w	r6, sl, r9
 80114c0:	42b3      	cmp	r3, r6
 80114c2:	b085      	sub	sp, #20
 80114c4:	bfb8      	it	lt
 80114c6:	3101      	addlt	r1, #1
 80114c8:	f7ff fedc 	bl	8011284 <_Balloc>
 80114cc:	b930      	cbnz	r0, 80114dc <__multiply+0x44>
 80114ce:	4602      	mov	r2, r0
 80114d0:	4b44      	ldr	r3, [pc, #272]	@ (80115e4 <__multiply+0x14c>)
 80114d2:	4845      	ldr	r0, [pc, #276]	@ (80115e8 <__multiply+0x150>)
 80114d4:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80114d8:	f000 fcc8 	bl	8011e6c <__assert_func>
 80114dc:	f100 0514 	add.w	r5, r0, #20
 80114e0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80114e4:	462b      	mov	r3, r5
 80114e6:	2200      	movs	r2, #0
 80114e8:	4543      	cmp	r3, r8
 80114ea:	d321      	bcc.n	8011530 <__multiply+0x98>
 80114ec:	f107 0114 	add.w	r1, r7, #20
 80114f0:	f104 0214 	add.w	r2, r4, #20
 80114f4:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80114f8:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80114fc:	9302      	str	r3, [sp, #8]
 80114fe:	1b13      	subs	r3, r2, r4
 8011500:	3b15      	subs	r3, #21
 8011502:	f023 0303 	bic.w	r3, r3, #3
 8011506:	3304      	adds	r3, #4
 8011508:	f104 0715 	add.w	r7, r4, #21
 801150c:	42ba      	cmp	r2, r7
 801150e:	bf38      	it	cc
 8011510:	2304      	movcc	r3, #4
 8011512:	9301      	str	r3, [sp, #4]
 8011514:	9b02      	ldr	r3, [sp, #8]
 8011516:	9103      	str	r1, [sp, #12]
 8011518:	428b      	cmp	r3, r1
 801151a:	d80c      	bhi.n	8011536 <__multiply+0x9e>
 801151c:	2e00      	cmp	r6, #0
 801151e:	dd03      	ble.n	8011528 <__multiply+0x90>
 8011520:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8011524:	2b00      	cmp	r3, #0
 8011526:	d05b      	beq.n	80115e0 <__multiply+0x148>
 8011528:	6106      	str	r6, [r0, #16]
 801152a:	b005      	add	sp, #20
 801152c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011530:	f843 2b04 	str.w	r2, [r3], #4
 8011534:	e7d8      	b.n	80114e8 <__multiply+0x50>
 8011536:	f8b1 a000 	ldrh.w	sl, [r1]
 801153a:	f1ba 0f00 	cmp.w	sl, #0
 801153e:	d024      	beq.n	801158a <__multiply+0xf2>
 8011540:	f104 0e14 	add.w	lr, r4, #20
 8011544:	46a9      	mov	r9, r5
 8011546:	f04f 0c00 	mov.w	ip, #0
 801154a:	f85e 7b04 	ldr.w	r7, [lr], #4
 801154e:	f8d9 3000 	ldr.w	r3, [r9]
 8011552:	fa1f fb87 	uxth.w	fp, r7
 8011556:	b29b      	uxth	r3, r3
 8011558:	fb0a 330b 	mla	r3, sl, fp, r3
 801155c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8011560:	f8d9 7000 	ldr.w	r7, [r9]
 8011564:	4463      	add	r3, ip
 8011566:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801156a:	fb0a c70b 	mla	r7, sl, fp, ip
 801156e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8011572:	b29b      	uxth	r3, r3
 8011574:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8011578:	4572      	cmp	r2, lr
 801157a:	f849 3b04 	str.w	r3, [r9], #4
 801157e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8011582:	d8e2      	bhi.n	801154a <__multiply+0xb2>
 8011584:	9b01      	ldr	r3, [sp, #4]
 8011586:	f845 c003 	str.w	ip, [r5, r3]
 801158a:	9b03      	ldr	r3, [sp, #12]
 801158c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8011590:	3104      	adds	r1, #4
 8011592:	f1b9 0f00 	cmp.w	r9, #0
 8011596:	d021      	beq.n	80115dc <__multiply+0x144>
 8011598:	682b      	ldr	r3, [r5, #0]
 801159a:	f104 0c14 	add.w	ip, r4, #20
 801159e:	46ae      	mov	lr, r5
 80115a0:	f04f 0a00 	mov.w	sl, #0
 80115a4:	f8bc b000 	ldrh.w	fp, [ip]
 80115a8:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80115ac:	fb09 770b 	mla	r7, r9, fp, r7
 80115b0:	4457      	add	r7, sl
 80115b2:	b29b      	uxth	r3, r3
 80115b4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80115b8:	f84e 3b04 	str.w	r3, [lr], #4
 80115bc:	f85c 3b04 	ldr.w	r3, [ip], #4
 80115c0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80115c4:	f8be 3000 	ldrh.w	r3, [lr]
 80115c8:	fb09 330a 	mla	r3, r9, sl, r3
 80115cc:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80115d0:	4562      	cmp	r2, ip
 80115d2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80115d6:	d8e5      	bhi.n	80115a4 <__multiply+0x10c>
 80115d8:	9f01      	ldr	r7, [sp, #4]
 80115da:	51eb      	str	r3, [r5, r7]
 80115dc:	3504      	adds	r5, #4
 80115de:	e799      	b.n	8011514 <__multiply+0x7c>
 80115e0:	3e01      	subs	r6, #1
 80115e2:	e79b      	b.n	801151c <__multiply+0x84>
 80115e4:	08012b1c 	.word	0x08012b1c
 80115e8:	08012b2d 	.word	0x08012b2d

080115ec <__pow5mult>:
 80115ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80115f0:	4615      	mov	r5, r2
 80115f2:	f012 0203 	ands.w	r2, r2, #3
 80115f6:	4607      	mov	r7, r0
 80115f8:	460e      	mov	r6, r1
 80115fa:	d007      	beq.n	801160c <__pow5mult+0x20>
 80115fc:	4c25      	ldr	r4, [pc, #148]	@ (8011694 <__pow5mult+0xa8>)
 80115fe:	3a01      	subs	r2, #1
 8011600:	2300      	movs	r3, #0
 8011602:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8011606:	f7ff fe9f 	bl	8011348 <__multadd>
 801160a:	4606      	mov	r6, r0
 801160c:	10ad      	asrs	r5, r5, #2
 801160e:	d03d      	beq.n	801168c <__pow5mult+0xa0>
 8011610:	69fc      	ldr	r4, [r7, #28]
 8011612:	b97c      	cbnz	r4, 8011634 <__pow5mult+0x48>
 8011614:	2010      	movs	r0, #16
 8011616:	f7fd ffe1 	bl	800f5dc <malloc>
 801161a:	4602      	mov	r2, r0
 801161c:	61f8      	str	r0, [r7, #28]
 801161e:	b928      	cbnz	r0, 801162c <__pow5mult+0x40>
 8011620:	4b1d      	ldr	r3, [pc, #116]	@ (8011698 <__pow5mult+0xac>)
 8011622:	481e      	ldr	r0, [pc, #120]	@ (801169c <__pow5mult+0xb0>)
 8011624:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8011628:	f000 fc20 	bl	8011e6c <__assert_func>
 801162c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8011630:	6004      	str	r4, [r0, #0]
 8011632:	60c4      	str	r4, [r0, #12]
 8011634:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8011638:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801163c:	b94c      	cbnz	r4, 8011652 <__pow5mult+0x66>
 801163e:	f240 2171 	movw	r1, #625	@ 0x271
 8011642:	4638      	mov	r0, r7
 8011644:	f7ff ff12 	bl	801146c <__i2b>
 8011648:	2300      	movs	r3, #0
 801164a:	f8c8 0008 	str.w	r0, [r8, #8]
 801164e:	4604      	mov	r4, r0
 8011650:	6003      	str	r3, [r0, #0]
 8011652:	f04f 0900 	mov.w	r9, #0
 8011656:	07eb      	lsls	r3, r5, #31
 8011658:	d50a      	bpl.n	8011670 <__pow5mult+0x84>
 801165a:	4631      	mov	r1, r6
 801165c:	4622      	mov	r2, r4
 801165e:	4638      	mov	r0, r7
 8011660:	f7ff ff1a 	bl	8011498 <__multiply>
 8011664:	4631      	mov	r1, r6
 8011666:	4680      	mov	r8, r0
 8011668:	4638      	mov	r0, r7
 801166a:	f7ff fe4b 	bl	8011304 <_Bfree>
 801166e:	4646      	mov	r6, r8
 8011670:	106d      	asrs	r5, r5, #1
 8011672:	d00b      	beq.n	801168c <__pow5mult+0xa0>
 8011674:	6820      	ldr	r0, [r4, #0]
 8011676:	b938      	cbnz	r0, 8011688 <__pow5mult+0x9c>
 8011678:	4622      	mov	r2, r4
 801167a:	4621      	mov	r1, r4
 801167c:	4638      	mov	r0, r7
 801167e:	f7ff ff0b 	bl	8011498 <__multiply>
 8011682:	6020      	str	r0, [r4, #0]
 8011684:	f8c0 9000 	str.w	r9, [r0]
 8011688:	4604      	mov	r4, r0
 801168a:	e7e4      	b.n	8011656 <__pow5mult+0x6a>
 801168c:	4630      	mov	r0, r6
 801168e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011692:	bf00      	nop
 8011694:	08012b88 	.word	0x08012b88
 8011698:	08012aad 	.word	0x08012aad
 801169c:	08012b2d 	.word	0x08012b2d

080116a0 <__lshift>:
 80116a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80116a4:	460c      	mov	r4, r1
 80116a6:	6849      	ldr	r1, [r1, #4]
 80116a8:	6923      	ldr	r3, [r4, #16]
 80116aa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80116ae:	68a3      	ldr	r3, [r4, #8]
 80116b0:	4607      	mov	r7, r0
 80116b2:	4691      	mov	r9, r2
 80116b4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80116b8:	f108 0601 	add.w	r6, r8, #1
 80116bc:	42b3      	cmp	r3, r6
 80116be:	db0b      	blt.n	80116d8 <__lshift+0x38>
 80116c0:	4638      	mov	r0, r7
 80116c2:	f7ff fddf 	bl	8011284 <_Balloc>
 80116c6:	4605      	mov	r5, r0
 80116c8:	b948      	cbnz	r0, 80116de <__lshift+0x3e>
 80116ca:	4602      	mov	r2, r0
 80116cc:	4b28      	ldr	r3, [pc, #160]	@ (8011770 <__lshift+0xd0>)
 80116ce:	4829      	ldr	r0, [pc, #164]	@ (8011774 <__lshift+0xd4>)
 80116d0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80116d4:	f000 fbca 	bl	8011e6c <__assert_func>
 80116d8:	3101      	adds	r1, #1
 80116da:	005b      	lsls	r3, r3, #1
 80116dc:	e7ee      	b.n	80116bc <__lshift+0x1c>
 80116de:	2300      	movs	r3, #0
 80116e0:	f100 0114 	add.w	r1, r0, #20
 80116e4:	f100 0210 	add.w	r2, r0, #16
 80116e8:	4618      	mov	r0, r3
 80116ea:	4553      	cmp	r3, sl
 80116ec:	db33      	blt.n	8011756 <__lshift+0xb6>
 80116ee:	6920      	ldr	r0, [r4, #16]
 80116f0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80116f4:	f104 0314 	add.w	r3, r4, #20
 80116f8:	f019 091f 	ands.w	r9, r9, #31
 80116fc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8011700:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8011704:	d02b      	beq.n	801175e <__lshift+0xbe>
 8011706:	f1c9 0e20 	rsb	lr, r9, #32
 801170a:	468a      	mov	sl, r1
 801170c:	2200      	movs	r2, #0
 801170e:	6818      	ldr	r0, [r3, #0]
 8011710:	fa00 f009 	lsl.w	r0, r0, r9
 8011714:	4310      	orrs	r0, r2
 8011716:	f84a 0b04 	str.w	r0, [sl], #4
 801171a:	f853 2b04 	ldr.w	r2, [r3], #4
 801171e:	459c      	cmp	ip, r3
 8011720:	fa22 f20e 	lsr.w	r2, r2, lr
 8011724:	d8f3      	bhi.n	801170e <__lshift+0x6e>
 8011726:	ebac 0304 	sub.w	r3, ip, r4
 801172a:	3b15      	subs	r3, #21
 801172c:	f023 0303 	bic.w	r3, r3, #3
 8011730:	3304      	adds	r3, #4
 8011732:	f104 0015 	add.w	r0, r4, #21
 8011736:	4584      	cmp	ip, r0
 8011738:	bf38      	it	cc
 801173a:	2304      	movcc	r3, #4
 801173c:	50ca      	str	r2, [r1, r3]
 801173e:	b10a      	cbz	r2, 8011744 <__lshift+0xa4>
 8011740:	f108 0602 	add.w	r6, r8, #2
 8011744:	3e01      	subs	r6, #1
 8011746:	4638      	mov	r0, r7
 8011748:	612e      	str	r6, [r5, #16]
 801174a:	4621      	mov	r1, r4
 801174c:	f7ff fdda 	bl	8011304 <_Bfree>
 8011750:	4628      	mov	r0, r5
 8011752:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011756:	f842 0f04 	str.w	r0, [r2, #4]!
 801175a:	3301      	adds	r3, #1
 801175c:	e7c5      	b.n	80116ea <__lshift+0x4a>
 801175e:	3904      	subs	r1, #4
 8011760:	f853 2b04 	ldr.w	r2, [r3], #4
 8011764:	f841 2f04 	str.w	r2, [r1, #4]!
 8011768:	459c      	cmp	ip, r3
 801176a:	d8f9      	bhi.n	8011760 <__lshift+0xc0>
 801176c:	e7ea      	b.n	8011744 <__lshift+0xa4>
 801176e:	bf00      	nop
 8011770:	08012b1c 	.word	0x08012b1c
 8011774:	08012b2d 	.word	0x08012b2d

08011778 <__mcmp>:
 8011778:	690a      	ldr	r2, [r1, #16]
 801177a:	4603      	mov	r3, r0
 801177c:	6900      	ldr	r0, [r0, #16]
 801177e:	1a80      	subs	r0, r0, r2
 8011780:	b530      	push	{r4, r5, lr}
 8011782:	d10e      	bne.n	80117a2 <__mcmp+0x2a>
 8011784:	3314      	adds	r3, #20
 8011786:	3114      	adds	r1, #20
 8011788:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 801178c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8011790:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8011794:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8011798:	4295      	cmp	r5, r2
 801179a:	d003      	beq.n	80117a4 <__mcmp+0x2c>
 801179c:	d205      	bcs.n	80117aa <__mcmp+0x32>
 801179e:	f04f 30ff 	mov.w	r0, #4294967295
 80117a2:	bd30      	pop	{r4, r5, pc}
 80117a4:	42a3      	cmp	r3, r4
 80117a6:	d3f3      	bcc.n	8011790 <__mcmp+0x18>
 80117a8:	e7fb      	b.n	80117a2 <__mcmp+0x2a>
 80117aa:	2001      	movs	r0, #1
 80117ac:	e7f9      	b.n	80117a2 <__mcmp+0x2a>
	...

080117b0 <__mdiff>:
 80117b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80117b4:	4689      	mov	r9, r1
 80117b6:	4606      	mov	r6, r0
 80117b8:	4611      	mov	r1, r2
 80117ba:	4648      	mov	r0, r9
 80117bc:	4614      	mov	r4, r2
 80117be:	f7ff ffdb 	bl	8011778 <__mcmp>
 80117c2:	1e05      	subs	r5, r0, #0
 80117c4:	d112      	bne.n	80117ec <__mdiff+0x3c>
 80117c6:	4629      	mov	r1, r5
 80117c8:	4630      	mov	r0, r6
 80117ca:	f7ff fd5b 	bl	8011284 <_Balloc>
 80117ce:	4602      	mov	r2, r0
 80117d0:	b928      	cbnz	r0, 80117de <__mdiff+0x2e>
 80117d2:	4b3f      	ldr	r3, [pc, #252]	@ (80118d0 <__mdiff+0x120>)
 80117d4:	f240 2137 	movw	r1, #567	@ 0x237
 80117d8:	483e      	ldr	r0, [pc, #248]	@ (80118d4 <__mdiff+0x124>)
 80117da:	f000 fb47 	bl	8011e6c <__assert_func>
 80117de:	2301      	movs	r3, #1
 80117e0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80117e4:	4610      	mov	r0, r2
 80117e6:	b003      	add	sp, #12
 80117e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80117ec:	bfbc      	itt	lt
 80117ee:	464b      	movlt	r3, r9
 80117f0:	46a1      	movlt	r9, r4
 80117f2:	4630      	mov	r0, r6
 80117f4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80117f8:	bfba      	itte	lt
 80117fa:	461c      	movlt	r4, r3
 80117fc:	2501      	movlt	r5, #1
 80117fe:	2500      	movge	r5, #0
 8011800:	f7ff fd40 	bl	8011284 <_Balloc>
 8011804:	4602      	mov	r2, r0
 8011806:	b918      	cbnz	r0, 8011810 <__mdiff+0x60>
 8011808:	4b31      	ldr	r3, [pc, #196]	@ (80118d0 <__mdiff+0x120>)
 801180a:	f240 2145 	movw	r1, #581	@ 0x245
 801180e:	e7e3      	b.n	80117d8 <__mdiff+0x28>
 8011810:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8011814:	6926      	ldr	r6, [r4, #16]
 8011816:	60c5      	str	r5, [r0, #12]
 8011818:	f109 0310 	add.w	r3, r9, #16
 801181c:	f109 0514 	add.w	r5, r9, #20
 8011820:	f104 0e14 	add.w	lr, r4, #20
 8011824:	f100 0b14 	add.w	fp, r0, #20
 8011828:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 801182c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8011830:	9301      	str	r3, [sp, #4]
 8011832:	46d9      	mov	r9, fp
 8011834:	f04f 0c00 	mov.w	ip, #0
 8011838:	9b01      	ldr	r3, [sp, #4]
 801183a:	f85e 0b04 	ldr.w	r0, [lr], #4
 801183e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8011842:	9301      	str	r3, [sp, #4]
 8011844:	fa1f f38a 	uxth.w	r3, sl
 8011848:	4619      	mov	r1, r3
 801184a:	b283      	uxth	r3, r0
 801184c:	1acb      	subs	r3, r1, r3
 801184e:	0c00      	lsrs	r0, r0, #16
 8011850:	4463      	add	r3, ip
 8011852:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8011856:	eb00 4023 	add.w	r0, r0, r3, asr #16
 801185a:	b29b      	uxth	r3, r3
 801185c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8011860:	4576      	cmp	r6, lr
 8011862:	f849 3b04 	str.w	r3, [r9], #4
 8011866:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801186a:	d8e5      	bhi.n	8011838 <__mdiff+0x88>
 801186c:	1b33      	subs	r3, r6, r4
 801186e:	3b15      	subs	r3, #21
 8011870:	f023 0303 	bic.w	r3, r3, #3
 8011874:	3415      	adds	r4, #21
 8011876:	3304      	adds	r3, #4
 8011878:	42a6      	cmp	r6, r4
 801187a:	bf38      	it	cc
 801187c:	2304      	movcc	r3, #4
 801187e:	441d      	add	r5, r3
 8011880:	445b      	add	r3, fp
 8011882:	461e      	mov	r6, r3
 8011884:	462c      	mov	r4, r5
 8011886:	4544      	cmp	r4, r8
 8011888:	d30e      	bcc.n	80118a8 <__mdiff+0xf8>
 801188a:	f108 0103 	add.w	r1, r8, #3
 801188e:	1b49      	subs	r1, r1, r5
 8011890:	f021 0103 	bic.w	r1, r1, #3
 8011894:	3d03      	subs	r5, #3
 8011896:	45a8      	cmp	r8, r5
 8011898:	bf38      	it	cc
 801189a:	2100      	movcc	r1, #0
 801189c:	440b      	add	r3, r1
 801189e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80118a2:	b191      	cbz	r1, 80118ca <__mdiff+0x11a>
 80118a4:	6117      	str	r7, [r2, #16]
 80118a6:	e79d      	b.n	80117e4 <__mdiff+0x34>
 80118a8:	f854 1b04 	ldr.w	r1, [r4], #4
 80118ac:	46e6      	mov	lr, ip
 80118ae:	0c08      	lsrs	r0, r1, #16
 80118b0:	fa1c fc81 	uxtah	ip, ip, r1
 80118b4:	4471      	add	r1, lr
 80118b6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80118ba:	b289      	uxth	r1, r1
 80118bc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80118c0:	f846 1b04 	str.w	r1, [r6], #4
 80118c4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80118c8:	e7dd      	b.n	8011886 <__mdiff+0xd6>
 80118ca:	3f01      	subs	r7, #1
 80118cc:	e7e7      	b.n	801189e <__mdiff+0xee>
 80118ce:	bf00      	nop
 80118d0:	08012b1c 	.word	0x08012b1c
 80118d4:	08012b2d 	.word	0x08012b2d

080118d8 <__d2b>:
 80118d8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80118dc:	460f      	mov	r7, r1
 80118de:	2101      	movs	r1, #1
 80118e0:	ec59 8b10 	vmov	r8, r9, d0
 80118e4:	4616      	mov	r6, r2
 80118e6:	f7ff fccd 	bl	8011284 <_Balloc>
 80118ea:	4604      	mov	r4, r0
 80118ec:	b930      	cbnz	r0, 80118fc <__d2b+0x24>
 80118ee:	4602      	mov	r2, r0
 80118f0:	4b23      	ldr	r3, [pc, #140]	@ (8011980 <__d2b+0xa8>)
 80118f2:	4824      	ldr	r0, [pc, #144]	@ (8011984 <__d2b+0xac>)
 80118f4:	f240 310f 	movw	r1, #783	@ 0x30f
 80118f8:	f000 fab8 	bl	8011e6c <__assert_func>
 80118fc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8011900:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8011904:	b10d      	cbz	r5, 801190a <__d2b+0x32>
 8011906:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801190a:	9301      	str	r3, [sp, #4]
 801190c:	f1b8 0300 	subs.w	r3, r8, #0
 8011910:	d023      	beq.n	801195a <__d2b+0x82>
 8011912:	4668      	mov	r0, sp
 8011914:	9300      	str	r3, [sp, #0]
 8011916:	f7ff fd7c 	bl	8011412 <__lo0bits>
 801191a:	e9dd 1200 	ldrd	r1, r2, [sp]
 801191e:	b1d0      	cbz	r0, 8011956 <__d2b+0x7e>
 8011920:	f1c0 0320 	rsb	r3, r0, #32
 8011924:	fa02 f303 	lsl.w	r3, r2, r3
 8011928:	430b      	orrs	r3, r1
 801192a:	40c2      	lsrs	r2, r0
 801192c:	6163      	str	r3, [r4, #20]
 801192e:	9201      	str	r2, [sp, #4]
 8011930:	9b01      	ldr	r3, [sp, #4]
 8011932:	61a3      	str	r3, [r4, #24]
 8011934:	2b00      	cmp	r3, #0
 8011936:	bf0c      	ite	eq
 8011938:	2201      	moveq	r2, #1
 801193a:	2202      	movne	r2, #2
 801193c:	6122      	str	r2, [r4, #16]
 801193e:	b1a5      	cbz	r5, 801196a <__d2b+0x92>
 8011940:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8011944:	4405      	add	r5, r0
 8011946:	603d      	str	r5, [r7, #0]
 8011948:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 801194c:	6030      	str	r0, [r6, #0]
 801194e:	4620      	mov	r0, r4
 8011950:	b003      	add	sp, #12
 8011952:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011956:	6161      	str	r1, [r4, #20]
 8011958:	e7ea      	b.n	8011930 <__d2b+0x58>
 801195a:	a801      	add	r0, sp, #4
 801195c:	f7ff fd59 	bl	8011412 <__lo0bits>
 8011960:	9b01      	ldr	r3, [sp, #4]
 8011962:	6163      	str	r3, [r4, #20]
 8011964:	3020      	adds	r0, #32
 8011966:	2201      	movs	r2, #1
 8011968:	e7e8      	b.n	801193c <__d2b+0x64>
 801196a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801196e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8011972:	6038      	str	r0, [r7, #0]
 8011974:	6918      	ldr	r0, [r3, #16]
 8011976:	f7ff fd2d 	bl	80113d4 <__hi0bits>
 801197a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801197e:	e7e5      	b.n	801194c <__d2b+0x74>
 8011980:	08012b1c 	.word	0x08012b1c
 8011984:	08012b2d 	.word	0x08012b2d

08011988 <__sfputc_r>:
 8011988:	6893      	ldr	r3, [r2, #8]
 801198a:	3b01      	subs	r3, #1
 801198c:	2b00      	cmp	r3, #0
 801198e:	b410      	push	{r4}
 8011990:	6093      	str	r3, [r2, #8]
 8011992:	da08      	bge.n	80119a6 <__sfputc_r+0x1e>
 8011994:	6994      	ldr	r4, [r2, #24]
 8011996:	42a3      	cmp	r3, r4
 8011998:	db01      	blt.n	801199e <__sfputc_r+0x16>
 801199a:	290a      	cmp	r1, #10
 801199c:	d103      	bne.n	80119a6 <__sfputc_r+0x1e>
 801199e:	f85d 4b04 	ldr.w	r4, [sp], #4
 80119a2:	f7fe bca6 	b.w	80102f2 <__swbuf_r>
 80119a6:	6813      	ldr	r3, [r2, #0]
 80119a8:	1c58      	adds	r0, r3, #1
 80119aa:	6010      	str	r0, [r2, #0]
 80119ac:	7019      	strb	r1, [r3, #0]
 80119ae:	4608      	mov	r0, r1
 80119b0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80119b4:	4770      	bx	lr

080119b6 <__sfputs_r>:
 80119b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80119b8:	4606      	mov	r6, r0
 80119ba:	460f      	mov	r7, r1
 80119bc:	4614      	mov	r4, r2
 80119be:	18d5      	adds	r5, r2, r3
 80119c0:	42ac      	cmp	r4, r5
 80119c2:	d101      	bne.n	80119c8 <__sfputs_r+0x12>
 80119c4:	2000      	movs	r0, #0
 80119c6:	e007      	b.n	80119d8 <__sfputs_r+0x22>
 80119c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80119cc:	463a      	mov	r2, r7
 80119ce:	4630      	mov	r0, r6
 80119d0:	f7ff ffda 	bl	8011988 <__sfputc_r>
 80119d4:	1c43      	adds	r3, r0, #1
 80119d6:	d1f3      	bne.n	80119c0 <__sfputs_r+0xa>
 80119d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080119dc <_vfiprintf_r>:
 80119dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80119e0:	460d      	mov	r5, r1
 80119e2:	b09d      	sub	sp, #116	@ 0x74
 80119e4:	4614      	mov	r4, r2
 80119e6:	4698      	mov	r8, r3
 80119e8:	4606      	mov	r6, r0
 80119ea:	b118      	cbz	r0, 80119f4 <_vfiprintf_r+0x18>
 80119ec:	6a03      	ldr	r3, [r0, #32]
 80119ee:	b90b      	cbnz	r3, 80119f4 <_vfiprintf_r+0x18>
 80119f0:	f7fe fb96 	bl	8010120 <__sinit>
 80119f4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80119f6:	07d9      	lsls	r1, r3, #31
 80119f8:	d405      	bmi.n	8011a06 <_vfiprintf_r+0x2a>
 80119fa:	89ab      	ldrh	r3, [r5, #12]
 80119fc:	059a      	lsls	r2, r3, #22
 80119fe:	d402      	bmi.n	8011a06 <_vfiprintf_r+0x2a>
 8011a00:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011a02:	f7fe fd98 	bl	8010536 <__retarget_lock_acquire_recursive>
 8011a06:	89ab      	ldrh	r3, [r5, #12]
 8011a08:	071b      	lsls	r3, r3, #28
 8011a0a:	d501      	bpl.n	8011a10 <_vfiprintf_r+0x34>
 8011a0c:	692b      	ldr	r3, [r5, #16]
 8011a0e:	b99b      	cbnz	r3, 8011a38 <_vfiprintf_r+0x5c>
 8011a10:	4629      	mov	r1, r5
 8011a12:	4630      	mov	r0, r6
 8011a14:	f7fe fcac 	bl	8010370 <__swsetup_r>
 8011a18:	b170      	cbz	r0, 8011a38 <_vfiprintf_r+0x5c>
 8011a1a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011a1c:	07dc      	lsls	r4, r3, #31
 8011a1e:	d504      	bpl.n	8011a2a <_vfiprintf_r+0x4e>
 8011a20:	f04f 30ff 	mov.w	r0, #4294967295
 8011a24:	b01d      	add	sp, #116	@ 0x74
 8011a26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011a2a:	89ab      	ldrh	r3, [r5, #12]
 8011a2c:	0598      	lsls	r0, r3, #22
 8011a2e:	d4f7      	bmi.n	8011a20 <_vfiprintf_r+0x44>
 8011a30:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011a32:	f7fe fd81 	bl	8010538 <__retarget_lock_release_recursive>
 8011a36:	e7f3      	b.n	8011a20 <_vfiprintf_r+0x44>
 8011a38:	2300      	movs	r3, #0
 8011a3a:	9309      	str	r3, [sp, #36]	@ 0x24
 8011a3c:	2320      	movs	r3, #32
 8011a3e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8011a42:	f8cd 800c 	str.w	r8, [sp, #12]
 8011a46:	2330      	movs	r3, #48	@ 0x30
 8011a48:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8011bf8 <_vfiprintf_r+0x21c>
 8011a4c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8011a50:	f04f 0901 	mov.w	r9, #1
 8011a54:	4623      	mov	r3, r4
 8011a56:	469a      	mov	sl, r3
 8011a58:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011a5c:	b10a      	cbz	r2, 8011a62 <_vfiprintf_r+0x86>
 8011a5e:	2a25      	cmp	r2, #37	@ 0x25
 8011a60:	d1f9      	bne.n	8011a56 <_vfiprintf_r+0x7a>
 8011a62:	ebba 0b04 	subs.w	fp, sl, r4
 8011a66:	d00b      	beq.n	8011a80 <_vfiprintf_r+0xa4>
 8011a68:	465b      	mov	r3, fp
 8011a6a:	4622      	mov	r2, r4
 8011a6c:	4629      	mov	r1, r5
 8011a6e:	4630      	mov	r0, r6
 8011a70:	f7ff ffa1 	bl	80119b6 <__sfputs_r>
 8011a74:	3001      	adds	r0, #1
 8011a76:	f000 80a7 	beq.w	8011bc8 <_vfiprintf_r+0x1ec>
 8011a7a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011a7c:	445a      	add	r2, fp
 8011a7e:	9209      	str	r2, [sp, #36]	@ 0x24
 8011a80:	f89a 3000 	ldrb.w	r3, [sl]
 8011a84:	2b00      	cmp	r3, #0
 8011a86:	f000 809f 	beq.w	8011bc8 <_vfiprintf_r+0x1ec>
 8011a8a:	2300      	movs	r3, #0
 8011a8c:	f04f 32ff 	mov.w	r2, #4294967295
 8011a90:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011a94:	f10a 0a01 	add.w	sl, sl, #1
 8011a98:	9304      	str	r3, [sp, #16]
 8011a9a:	9307      	str	r3, [sp, #28]
 8011a9c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8011aa0:	931a      	str	r3, [sp, #104]	@ 0x68
 8011aa2:	4654      	mov	r4, sl
 8011aa4:	2205      	movs	r2, #5
 8011aa6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011aaa:	4853      	ldr	r0, [pc, #332]	@ (8011bf8 <_vfiprintf_r+0x21c>)
 8011aac:	f7ee fb98 	bl	80001e0 <memchr>
 8011ab0:	9a04      	ldr	r2, [sp, #16]
 8011ab2:	b9d8      	cbnz	r0, 8011aec <_vfiprintf_r+0x110>
 8011ab4:	06d1      	lsls	r1, r2, #27
 8011ab6:	bf44      	itt	mi
 8011ab8:	2320      	movmi	r3, #32
 8011aba:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011abe:	0713      	lsls	r3, r2, #28
 8011ac0:	bf44      	itt	mi
 8011ac2:	232b      	movmi	r3, #43	@ 0x2b
 8011ac4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011ac8:	f89a 3000 	ldrb.w	r3, [sl]
 8011acc:	2b2a      	cmp	r3, #42	@ 0x2a
 8011ace:	d015      	beq.n	8011afc <_vfiprintf_r+0x120>
 8011ad0:	9a07      	ldr	r2, [sp, #28]
 8011ad2:	4654      	mov	r4, sl
 8011ad4:	2000      	movs	r0, #0
 8011ad6:	f04f 0c0a 	mov.w	ip, #10
 8011ada:	4621      	mov	r1, r4
 8011adc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011ae0:	3b30      	subs	r3, #48	@ 0x30
 8011ae2:	2b09      	cmp	r3, #9
 8011ae4:	d94b      	bls.n	8011b7e <_vfiprintf_r+0x1a2>
 8011ae6:	b1b0      	cbz	r0, 8011b16 <_vfiprintf_r+0x13a>
 8011ae8:	9207      	str	r2, [sp, #28]
 8011aea:	e014      	b.n	8011b16 <_vfiprintf_r+0x13a>
 8011aec:	eba0 0308 	sub.w	r3, r0, r8
 8011af0:	fa09 f303 	lsl.w	r3, r9, r3
 8011af4:	4313      	orrs	r3, r2
 8011af6:	9304      	str	r3, [sp, #16]
 8011af8:	46a2      	mov	sl, r4
 8011afa:	e7d2      	b.n	8011aa2 <_vfiprintf_r+0xc6>
 8011afc:	9b03      	ldr	r3, [sp, #12]
 8011afe:	1d19      	adds	r1, r3, #4
 8011b00:	681b      	ldr	r3, [r3, #0]
 8011b02:	9103      	str	r1, [sp, #12]
 8011b04:	2b00      	cmp	r3, #0
 8011b06:	bfbb      	ittet	lt
 8011b08:	425b      	neglt	r3, r3
 8011b0a:	f042 0202 	orrlt.w	r2, r2, #2
 8011b0e:	9307      	strge	r3, [sp, #28]
 8011b10:	9307      	strlt	r3, [sp, #28]
 8011b12:	bfb8      	it	lt
 8011b14:	9204      	strlt	r2, [sp, #16]
 8011b16:	7823      	ldrb	r3, [r4, #0]
 8011b18:	2b2e      	cmp	r3, #46	@ 0x2e
 8011b1a:	d10a      	bne.n	8011b32 <_vfiprintf_r+0x156>
 8011b1c:	7863      	ldrb	r3, [r4, #1]
 8011b1e:	2b2a      	cmp	r3, #42	@ 0x2a
 8011b20:	d132      	bne.n	8011b88 <_vfiprintf_r+0x1ac>
 8011b22:	9b03      	ldr	r3, [sp, #12]
 8011b24:	1d1a      	adds	r2, r3, #4
 8011b26:	681b      	ldr	r3, [r3, #0]
 8011b28:	9203      	str	r2, [sp, #12]
 8011b2a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8011b2e:	3402      	adds	r4, #2
 8011b30:	9305      	str	r3, [sp, #20]
 8011b32:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8011c08 <_vfiprintf_r+0x22c>
 8011b36:	7821      	ldrb	r1, [r4, #0]
 8011b38:	2203      	movs	r2, #3
 8011b3a:	4650      	mov	r0, sl
 8011b3c:	f7ee fb50 	bl	80001e0 <memchr>
 8011b40:	b138      	cbz	r0, 8011b52 <_vfiprintf_r+0x176>
 8011b42:	9b04      	ldr	r3, [sp, #16]
 8011b44:	eba0 000a 	sub.w	r0, r0, sl
 8011b48:	2240      	movs	r2, #64	@ 0x40
 8011b4a:	4082      	lsls	r2, r0
 8011b4c:	4313      	orrs	r3, r2
 8011b4e:	3401      	adds	r4, #1
 8011b50:	9304      	str	r3, [sp, #16]
 8011b52:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011b56:	4829      	ldr	r0, [pc, #164]	@ (8011bfc <_vfiprintf_r+0x220>)
 8011b58:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8011b5c:	2206      	movs	r2, #6
 8011b5e:	f7ee fb3f 	bl	80001e0 <memchr>
 8011b62:	2800      	cmp	r0, #0
 8011b64:	d03f      	beq.n	8011be6 <_vfiprintf_r+0x20a>
 8011b66:	4b26      	ldr	r3, [pc, #152]	@ (8011c00 <_vfiprintf_r+0x224>)
 8011b68:	bb1b      	cbnz	r3, 8011bb2 <_vfiprintf_r+0x1d6>
 8011b6a:	9b03      	ldr	r3, [sp, #12]
 8011b6c:	3307      	adds	r3, #7
 8011b6e:	f023 0307 	bic.w	r3, r3, #7
 8011b72:	3308      	adds	r3, #8
 8011b74:	9303      	str	r3, [sp, #12]
 8011b76:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011b78:	443b      	add	r3, r7
 8011b7a:	9309      	str	r3, [sp, #36]	@ 0x24
 8011b7c:	e76a      	b.n	8011a54 <_vfiprintf_r+0x78>
 8011b7e:	fb0c 3202 	mla	r2, ip, r2, r3
 8011b82:	460c      	mov	r4, r1
 8011b84:	2001      	movs	r0, #1
 8011b86:	e7a8      	b.n	8011ada <_vfiprintf_r+0xfe>
 8011b88:	2300      	movs	r3, #0
 8011b8a:	3401      	adds	r4, #1
 8011b8c:	9305      	str	r3, [sp, #20]
 8011b8e:	4619      	mov	r1, r3
 8011b90:	f04f 0c0a 	mov.w	ip, #10
 8011b94:	4620      	mov	r0, r4
 8011b96:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011b9a:	3a30      	subs	r2, #48	@ 0x30
 8011b9c:	2a09      	cmp	r2, #9
 8011b9e:	d903      	bls.n	8011ba8 <_vfiprintf_r+0x1cc>
 8011ba0:	2b00      	cmp	r3, #0
 8011ba2:	d0c6      	beq.n	8011b32 <_vfiprintf_r+0x156>
 8011ba4:	9105      	str	r1, [sp, #20]
 8011ba6:	e7c4      	b.n	8011b32 <_vfiprintf_r+0x156>
 8011ba8:	fb0c 2101 	mla	r1, ip, r1, r2
 8011bac:	4604      	mov	r4, r0
 8011bae:	2301      	movs	r3, #1
 8011bb0:	e7f0      	b.n	8011b94 <_vfiprintf_r+0x1b8>
 8011bb2:	ab03      	add	r3, sp, #12
 8011bb4:	9300      	str	r3, [sp, #0]
 8011bb6:	462a      	mov	r2, r5
 8011bb8:	4b12      	ldr	r3, [pc, #72]	@ (8011c04 <_vfiprintf_r+0x228>)
 8011bba:	a904      	add	r1, sp, #16
 8011bbc:	4630      	mov	r0, r6
 8011bbe:	f7fd fe6b 	bl	800f898 <_printf_float>
 8011bc2:	4607      	mov	r7, r0
 8011bc4:	1c78      	adds	r0, r7, #1
 8011bc6:	d1d6      	bne.n	8011b76 <_vfiprintf_r+0x19a>
 8011bc8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011bca:	07d9      	lsls	r1, r3, #31
 8011bcc:	d405      	bmi.n	8011bda <_vfiprintf_r+0x1fe>
 8011bce:	89ab      	ldrh	r3, [r5, #12]
 8011bd0:	059a      	lsls	r2, r3, #22
 8011bd2:	d402      	bmi.n	8011bda <_vfiprintf_r+0x1fe>
 8011bd4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011bd6:	f7fe fcaf 	bl	8010538 <__retarget_lock_release_recursive>
 8011bda:	89ab      	ldrh	r3, [r5, #12]
 8011bdc:	065b      	lsls	r3, r3, #25
 8011bde:	f53f af1f 	bmi.w	8011a20 <_vfiprintf_r+0x44>
 8011be2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8011be4:	e71e      	b.n	8011a24 <_vfiprintf_r+0x48>
 8011be6:	ab03      	add	r3, sp, #12
 8011be8:	9300      	str	r3, [sp, #0]
 8011bea:	462a      	mov	r2, r5
 8011bec:	4b05      	ldr	r3, [pc, #20]	@ (8011c04 <_vfiprintf_r+0x228>)
 8011bee:	a904      	add	r1, sp, #16
 8011bf0:	4630      	mov	r0, r6
 8011bf2:	f7fe f8e9 	bl	800fdc8 <_printf_i>
 8011bf6:	e7e4      	b.n	8011bc2 <_vfiprintf_r+0x1e6>
 8011bf8:	08012c88 	.word	0x08012c88
 8011bfc:	08012c92 	.word	0x08012c92
 8011c00:	0800f899 	.word	0x0800f899
 8011c04:	080119b7 	.word	0x080119b7
 8011c08:	08012c8e 	.word	0x08012c8e

08011c0c <__sflush_r>:
 8011c0c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8011c10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011c14:	0716      	lsls	r6, r2, #28
 8011c16:	4605      	mov	r5, r0
 8011c18:	460c      	mov	r4, r1
 8011c1a:	d454      	bmi.n	8011cc6 <__sflush_r+0xba>
 8011c1c:	684b      	ldr	r3, [r1, #4]
 8011c1e:	2b00      	cmp	r3, #0
 8011c20:	dc02      	bgt.n	8011c28 <__sflush_r+0x1c>
 8011c22:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8011c24:	2b00      	cmp	r3, #0
 8011c26:	dd48      	ble.n	8011cba <__sflush_r+0xae>
 8011c28:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8011c2a:	2e00      	cmp	r6, #0
 8011c2c:	d045      	beq.n	8011cba <__sflush_r+0xae>
 8011c2e:	2300      	movs	r3, #0
 8011c30:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8011c34:	682f      	ldr	r7, [r5, #0]
 8011c36:	6a21      	ldr	r1, [r4, #32]
 8011c38:	602b      	str	r3, [r5, #0]
 8011c3a:	d030      	beq.n	8011c9e <__sflush_r+0x92>
 8011c3c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8011c3e:	89a3      	ldrh	r3, [r4, #12]
 8011c40:	0759      	lsls	r1, r3, #29
 8011c42:	d505      	bpl.n	8011c50 <__sflush_r+0x44>
 8011c44:	6863      	ldr	r3, [r4, #4]
 8011c46:	1ad2      	subs	r2, r2, r3
 8011c48:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8011c4a:	b10b      	cbz	r3, 8011c50 <__sflush_r+0x44>
 8011c4c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8011c4e:	1ad2      	subs	r2, r2, r3
 8011c50:	2300      	movs	r3, #0
 8011c52:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8011c54:	6a21      	ldr	r1, [r4, #32]
 8011c56:	4628      	mov	r0, r5
 8011c58:	47b0      	blx	r6
 8011c5a:	1c43      	adds	r3, r0, #1
 8011c5c:	89a3      	ldrh	r3, [r4, #12]
 8011c5e:	d106      	bne.n	8011c6e <__sflush_r+0x62>
 8011c60:	6829      	ldr	r1, [r5, #0]
 8011c62:	291d      	cmp	r1, #29
 8011c64:	d82b      	bhi.n	8011cbe <__sflush_r+0xb2>
 8011c66:	4a2a      	ldr	r2, [pc, #168]	@ (8011d10 <__sflush_r+0x104>)
 8011c68:	410a      	asrs	r2, r1
 8011c6a:	07d6      	lsls	r6, r2, #31
 8011c6c:	d427      	bmi.n	8011cbe <__sflush_r+0xb2>
 8011c6e:	2200      	movs	r2, #0
 8011c70:	6062      	str	r2, [r4, #4]
 8011c72:	04d9      	lsls	r1, r3, #19
 8011c74:	6922      	ldr	r2, [r4, #16]
 8011c76:	6022      	str	r2, [r4, #0]
 8011c78:	d504      	bpl.n	8011c84 <__sflush_r+0x78>
 8011c7a:	1c42      	adds	r2, r0, #1
 8011c7c:	d101      	bne.n	8011c82 <__sflush_r+0x76>
 8011c7e:	682b      	ldr	r3, [r5, #0]
 8011c80:	b903      	cbnz	r3, 8011c84 <__sflush_r+0x78>
 8011c82:	6560      	str	r0, [r4, #84]	@ 0x54
 8011c84:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8011c86:	602f      	str	r7, [r5, #0]
 8011c88:	b1b9      	cbz	r1, 8011cba <__sflush_r+0xae>
 8011c8a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011c8e:	4299      	cmp	r1, r3
 8011c90:	d002      	beq.n	8011c98 <__sflush_r+0x8c>
 8011c92:	4628      	mov	r0, r5
 8011c94:	f7ff faac 	bl	80111f0 <_free_r>
 8011c98:	2300      	movs	r3, #0
 8011c9a:	6363      	str	r3, [r4, #52]	@ 0x34
 8011c9c:	e00d      	b.n	8011cba <__sflush_r+0xae>
 8011c9e:	2301      	movs	r3, #1
 8011ca0:	4628      	mov	r0, r5
 8011ca2:	47b0      	blx	r6
 8011ca4:	4602      	mov	r2, r0
 8011ca6:	1c50      	adds	r0, r2, #1
 8011ca8:	d1c9      	bne.n	8011c3e <__sflush_r+0x32>
 8011caa:	682b      	ldr	r3, [r5, #0]
 8011cac:	2b00      	cmp	r3, #0
 8011cae:	d0c6      	beq.n	8011c3e <__sflush_r+0x32>
 8011cb0:	2b1d      	cmp	r3, #29
 8011cb2:	d001      	beq.n	8011cb8 <__sflush_r+0xac>
 8011cb4:	2b16      	cmp	r3, #22
 8011cb6:	d11e      	bne.n	8011cf6 <__sflush_r+0xea>
 8011cb8:	602f      	str	r7, [r5, #0]
 8011cba:	2000      	movs	r0, #0
 8011cbc:	e022      	b.n	8011d04 <__sflush_r+0xf8>
 8011cbe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011cc2:	b21b      	sxth	r3, r3
 8011cc4:	e01b      	b.n	8011cfe <__sflush_r+0xf2>
 8011cc6:	690f      	ldr	r7, [r1, #16]
 8011cc8:	2f00      	cmp	r7, #0
 8011cca:	d0f6      	beq.n	8011cba <__sflush_r+0xae>
 8011ccc:	0793      	lsls	r3, r2, #30
 8011cce:	680e      	ldr	r6, [r1, #0]
 8011cd0:	bf08      	it	eq
 8011cd2:	694b      	ldreq	r3, [r1, #20]
 8011cd4:	600f      	str	r7, [r1, #0]
 8011cd6:	bf18      	it	ne
 8011cd8:	2300      	movne	r3, #0
 8011cda:	eba6 0807 	sub.w	r8, r6, r7
 8011cde:	608b      	str	r3, [r1, #8]
 8011ce0:	f1b8 0f00 	cmp.w	r8, #0
 8011ce4:	dde9      	ble.n	8011cba <__sflush_r+0xae>
 8011ce6:	6a21      	ldr	r1, [r4, #32]
 8011ce8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8011cea:	4643      	mov	r3, r8
 8011cec:	463a      	mov	r2, r7
 8011cee:	4628      	mov	r0, r5
 8011cf0:	47b0      	blx	r6
 8011cf2:	2800      	cmp	r0, #0
 8011cf4:	dc08      	bgt.n	8011d08 <__sflush_r+0xfc>
 8011cf6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011cfa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011cfe:	81a3      	strh	r3, [r4, #12]
 8011d00:	f04f 30ff 	mov.w	r0, #4294967295
 8011d04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011d08:	4407      	add	r7, r0
 8011d0a:	eba8 0800 	sub.w	r8, r8, r0
 8011d0e:	e7e7      	b.n	8011ce0 <__sflush_r+0xd4>
 8011d10:	dfbffffe 	.word	0xdfbffffe

08011d14 <_fflush_r>:
 8011d14:	b538      	push	{r3, r4, r5, lr}
 8011d16:	690b      	ldr	r3, [r1, #16]
 8011d18:	4605      	mov	r5, r0
 8011d1a:	460c      	mov	r4, r1
 8011d1c:	b913      	cbnz	r3, 8011d24 <_fflush_r+0x10>
 8011d1e:	2500      	movs	r5, #0
 8011d20:	4628      	mov	r0, r5
 8011d22:	bd38      	pop	{r3, r4, r5, pc}
 8011d24:	b118      	cbz	r0, 8011d2e <_fflush_r+0x1a>
 8011d26:	6a03      	ldr	r3, [r0, #32]
 8011d28:	b90b      	cbnz	r3, 8011d2e <_fflush_r+0x1a>
 8011d2a:	f7fe f9f9 	bl	8010120 <__sinit>
 8011d2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011d32:	2b00      	cmp	r3, #0
 8011d34:	d0f3      	beq.n	8011d1e <_fflush_r+0xa>
 8011d36:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8011d38:	07d0      	lsls	r0, r2, #31
 8011d3a:	d404      	bmi.n	8011d46 <_fflush_r+0x32>
 8011d3c:	0599      	lsls	r1, r3, #22
 8011d3e:	d402      	bmi.n	8011d46 <_fflush_r+0x32>
 8011d40:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011d42:	f7fe fbf8 	bl	8010536 <__retarget_lock_acquire_recursive>
 8011d46:	4628      	mov	r0, r5
 8011d48:	4621      	mov	r1, r4
 8011d4a:	f7ff ff5f 	bl	8011c0c <__sflush_r>
 8011d4e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8011d50:	07da      	lsls	r2, r3, #31
 8011d52:	4605      	mov	r5, r0
 8011d54:	d4e4      	bmi.n	8011d20 <_fflush_r+0xc>
 8011d56:	89a3      	ldrh	r3, [r4, #12]
 8011d58:	059b      	lsls	r3, r3, #22
 8011d5a:	d4e1      	bmi.n	8011d20 <_fflush_r+0xc>
 8011d5c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011d5e:	f7fe fbeb 	bl	8010538 <__retarget_lock_release_recursive>
 8011d62:	e7dd      	b.n	8011d20 <_fflush_r+0xc>

08011d64 <__swhatbuf_r>:
 8011d64:	b570      	push	{r4, r5, r6, lr}
 8011d66:	460c      	mov	r4, r1
 8011d68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011d6c:	2900      	cmp	r1, #0
 8011d6e:	b096      	sub	sp, #88	@ 0x58
 8011d70:	4615      	mov	r5, r2
 8011d72:	461e      	mov	r6, r3
 8011d74:	da0d      	bge.n	8011d92 <__swhatbuf_r+0x2e>
 8011d76:	89a3      	ldrh	r3, [r4, #12]
 8011d78:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8011d7c:	f04f 0100 	mov.w	r1, #0
 8011d80:	bf14      	ite	ne
 8011d82:	2340      	movne	r3, #64	@ 0x40
 8011d84:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8011d88:	2000      	movs	r0, #0
 8011d8a:	6031      	str	r1, [r6, #0]
 8011d8c:	602b      	str	r3, [r5, #0]
 8011d8e:	b016      	add	sp, #88	@ 0x58
 8011d90:	bd70      	pop	{r4, r5, r6, pc}
 8011d92:	466a      	mov	r2, sp
 8011d94:	f000 f848 	bl	8011e28 <_fstat_r>
 8011d98:	2800      	cmp	r0, #0
 8011d9a:	dbec      	blt.n	8011d76 <__swhatbuf_r+0x12>
 8011d9c:	9901      	ldr	r1, [sp, #4]
 8011d9e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8011da2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8011da6:	4259      	negs	r1, r3
 8011da8:	4159      	adcs	r1, r3
 8011daa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8011dae:	e7eb      	b.n	8011d88 <__swhatbuf_r+0x24>

08011db0 <__smakebuf_r>:
 8011db0:	898b      	ldrh	r3, [r1, #12]
 8011db2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011db4:	079d      	lsls	r5, r3, #30
 8011db6:	4606      	mov	r6, r0
 8011db8:	460c      	mov	r4, r1
 8011dba:	d507      	bpl.n	8011dcc <__smakebuf_r+0x1c>
 8011dbc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8011dc0:	6023      	str	r3, [r4, #0]
 8011dc2:	6123      	str	r3, [r4, #16]
 8011dc4:	2301      	movs	r3, #1
 8011dc6:	6163      	str	r3, [r4, #20]
 8011dc8:	b003      	add	sp, #12
 8011dca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011dcc:	ab01      	add	r3, sp, #4
 8011dce:	466a      	mov	r2, sp
 8011dd0:	f7ff ffc8 	bl	8011d64 <__swhatbuf_r>
 8011dd4:	9f00      	ldr	r7, [sp, #0]
 8011dd6:	4605      	mov	r5, r0
 8011dd8:	4639      	mov	r1, r7
 8011dda:	4630      	mov	r0, r6
 8011ddc:	f7fd fc30 	bl	800f640 <_malloc_r>
 8011de0:	b948      	cbnz	r0, 8011df6 <__smakebuf_r+0x46>
 8011de2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011de6:	059a      	lsls	r2, r3, #22
 8011de8:	d4ee      	bmi.n	8011dc8 <__smakebuf_r+0x18>
 8011dea:	f023 0303 	bic.w	r3, r3, #3
 8011dee:	f043 0302 	orr.w	r3, r3, #2
 8011df2:	81a3      	strh	r3, [r4, #12]
 8011df4:	e7e2      	b.n	8011dbc <__smakebuf_r+0xc>
 8011df6:	89a3      	ldrh	r3, [r4, #12]
 8011df8:	6020      	str	r0, [r4, #0]
 8011dfa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011dfe:	81a3      	strh	r3, [r4, #12]
 8011e00:	9b01      	ldr	r3, [sp, #4]
 8011e02:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8011e06:	b15b      	cbz	r3, 8011e20 <__smakebuf_r+0x70>
 8011e08:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011e0c:	4630      	mov	r0, r6
 8011e0e:	f000 f81d 	bl	8011e4c <_isatty_r>
 8011e12:	b128      	cbz	r0, 8011e20 <__smakebuf_r+0x70>
 8011e14:	89a3      	ldrh	r3, [r4, #12]
 8011e16:	f023 0303 	bic.w	r3, r3, #3
 8011e1a:	f043 0301 	orr.w	r3, r3, #1
 8011e1e:	81a3      	strh	r3, [r4, #12]
 8011e20:	89a3      	ldrh	r3, [r4, #12]
 8011e22:	431d      	orrs	r5, r3
 8011e24:	81a5      	strh	r5, [r4, #12]
 8011e26:	e7cf      	b.n	8011dc8 <__smakebuf_r+0x18>

08011e28 <_fstat_r>:
 8011e28:	b538      	push	{r3, r4, r5, lr}
 8011e2a:	4d07      	ldr	r5, [pc, #28]	@ (8011e48 <_fstat_r+0x20>)
 8011e2c:	2300      	movs	r3, #0
 8011e2e:	4604      	mov	r4, r0
 8011e30:	4608      	mov	r0, r1
 8011e32:	4611      	mov	r1, r2
 8011e34:	602b      	str	r3, [r5, #0]
 8011e36:	f7f3 fc2b 	bl	8005690 <_fstat>
 8011e3a:	1c43      	adds	r3, r0, #1
 8011e3c:	d102      	bne.n	8011e44 <_fstat_r+0x1c>
 8011e3e:	682b      	ldr	r3, [r5, #0]
 8011e40:	b103      	cbz	r3, 8011e44 <_fstat_r+0x1c>
 8011e42:	6023      	str	r3, [r4, #0]
 8011e44:	bd38      	pop	{r3, r4, r5, pc}
 8011e46:	bf00      	nop
 8011e48:	20023908 	.word	0x20023908

08011e4c <_isatty_r>:
 8011e4c:	b538      	push	{r3, r4, r5, lr}
 8011e4e:	4d06      	ldr	r5, [pc, #24]	@ (8011e68 <_isatty_r+0x1c>)
 8011e50:	2300      	movs	r3, #0
 8011e52:	4604      	mov	r4, r0
 8011e54:	4608      	mov	r0, r1
 8011e56:	602b      	str	r3, [r5, #0]
 8011e58:	f7f3 fc2a 	bl	80056b0 <_isatty>
 8011e5c:	1c43      	adds	r3, r0, #1
 8011e5e:	d102      	bne.n	8011e66 <_isatty_r+0x1a>
 8011e60:	682b      	ldr	r3, [r5, #0]
 8011e62:	b103      	cbz	r3, 8011e66 <_isatty_r+0x1a>
 8011e64:	6023      	str	r3, [r4, #0]
 8011e66:	bd38      	pop	{r3, r4, r5, pc}
 8011e68:	20023908 	.word	0x20023908

08011e6c <__assert_func>:
 8011e6c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011e6e:	4614      	mov	r4, r2
 8011e70:	461a      	mov	r2, r3
 8011e72:	4b09      	ldr	r3, [pc, #36]	@ (8011e98 <__assert_func+0x2c>)
 8011e74:	681b      	ldr	r3, [r3, #0]
 8011e76:	4605      	mov	r5, r0
 8011e78:	68d8      	ldr	r0, [r3, #12]
 8011e7a:	b954      	cbnz	r4, 8011e92 <__assert_func+0x26>
 8011e7c:	4b07      	ldr	r3, [pc, #28]	@ (8011e9c <__assert_func+0x30>)
 8011e7e:	461c      	mov	r4, r3
 8011e80:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8011e84:	9100      	str	r1, [sp, #0]
 8011e86:	462b      	mov	r3, r5
 8011e88:	4905      	ldr	r1, [pc, #20]	@ (8011ea0 <__assert_func+0x34>)
 8011e8a:	f000 f841 	bl	8011f10 <fiprintf>
 8011e8e:	f000 f851 	bl	8011f34 <abort>
 8011e92:	4b04      	ldr	r3, [pc, #16]	@ (8011ea4 <__assert_func+0x38>)
 8011e94:	e7f4      	b.n	8011e80 <__assert_func+0x14>
 8011e96:	bf00      	nop
 8011e98:	20000044 	.word	0x20000044
 8011e9c:	08012cde 	.word	0x08012cde
 8011ea0:	08012cb0 	.word	0x08012cb0
 8011ea4:	08012ca3 	.word	0x08012ca3

08011ea8 <_calloc_r>:
 8011ea8:	b570      	push	{r4, r5, r6, lr}
 8011eaa:	fba1 5402 	umull	r5, r4, r1, r2
 8011eae:	b93c      	cbnz	r4, 8011ec0 <_calloc_r+0x18>
 8011eb0:	4629      	mov	r1, r5
 8011eb2:	f7fd fbc5 	bl	800f640 <_malloc_r>
 8011eb6:	4606      	mov	r6, r0
 8011eb8:	b928      	cbnz	r0, 8011ec6 <_calloc_r+0x1e>
 8011eba:	2600      	movs	r6, #0
 8011ebc:	4630      	mov	r0, r6
 8011ebe:	bd70      	pop	{r4, r5, r6, pc}
 8011ec0:	220c      	movs	r2, #12
 8011ec2:	6002      	str	r2, [r0, #0]
 8011ec4:	e7f9      	b.n	8011eba <_calloc_r+0x12>
 8011ec6:	462a      	mov	r2, r5
 8011ec8:	4621      	mov	r1, r4
 8011eca:	f7fe faa7 	bl	801041c <memset>
 8011ece:	e7f5      	b.n	8011ebc <_calloc_r+0x14>

08011ed0 <__ascii_mbtowc>:
 8011ed0:	b082      	sub	sp, #8
 8011ed2:	b901      	cbnz	r1, 8011ed6 <__ascii_mbtowc+0x6>
 8011ed4:	a901      	add	r1, sp, #4
 8011ed6:	b142      	cbz	r2, 8011eea <__ascii_mbtowc+0x1a>
 8011ed8:	b14b      	cbz	r3, 8011eee <__ascii_mbtowc+0x1e>
 8011eda:	7813      	ldrb	r3, [r2, #0]
 8011edc:	600b      	str	r3, [r1, #0]
 8011ede:	7812      	ldrb	r2, [r2, #0]
 8011ee0:	1e10      	subs	r0, r2, #0
 8011ee2:	bf18      	it	ne
 8011ee4:	2001      	movne	r0, #1
 8011ee6:	b002      	add	sp, #8
 8011ee8:	4770      	bx	lr
 8011eea:	4610      	mov	r0, r2
 8011eec:	e7fb      	b.n	8011ee6 <__ascii_mbtowc+0x16>
 8011eee:	f06f 0001 	mvn.w	r0, #1
 8011ef2:	e7f8      	b.n	8011ee6 <__ascii_mbtowc+0x16>

08011ef4 <__ascii_wctomb>:
 8011ef4:	4603      	mov	r3, r0
 8011ef6:	4608      	mov	r0, r1
 8011ef8:	b141      	cbz	r1, 8011f0c <__ascii_wctomb+0x18>
 8011efa:	2aff      	cmp	r2, #255	@ 0xff
 8011efc:	d904      	bls.n	8011f08 <__ascii_wctomb+0x14>
 8011efe:	228a      	movs	r2, #138	@ 0x8a
 8011f00:	601a      	str	r2, [r3, #0]
 8011f02:	f04f 30ff 	mov.w	r0, #4294967295
 8011f06:	4770      	bx	lr
 8011f08:	700a      	strb	r2, [r1, #0]
 8011f0a:	2001      	movs	r0, #1
 8011f0c:	4770      	bx	lr
	...

08011f10 <fiprintf>:
 8011f10:	b40e      	push	{r1, r2, r3}
 8011f12:	b503      	push	{r0, r1, lr}
 8011f14:	4601      	mov	r1, r0
 8011f16:	ab03      	add	r3, sp, #12
 8011f18:	4805      	ldr	r0, [pc, #20]	@ (8011f30 <fiprintf+0x20>)
 8011f1a:	f853 2b04 	ldr.w	r2, [r3], #4
 8011f1e:	6800      	ldr	r0, [r0, #0]
 8011f20:	9301      	str	r3, [sp, #4]
 8011f22:	f7ff fd5b 	bl	80119dc <_vfiprintf_r>
 8011f26:	b002      	add	sp, #8
 8011f28:	f85d eb04 	ldr.w	lr, [sp], #4
 8011f2c:	b003      	add	sp, #12
 8011f2e:	4770      	bx	lr
 8011f30:	20000044 	.word	0x20000044

08011f34 <abort>:
 8011f34:	b508      	push	{r3, lr}
 8011f36:	2006      	movs	r0, #6
 8011f38:	f000 f82c 	bl	8011f94 <raise>
 8011f3c:	2001      	movs	r0, #1
 8011f3e:	f7f3 fb57 	bl	80055f0 <_exit>

08011f42 <_raise_r>:
 8011f42:	291f      	cmp	r1, #31
 8011f44:	b538      	push	{r3, r4, r5, lr}
 8011f46:	4605      	mov	r5, r0
 8011f48:	460c      	mov	r4, r1
 8011f4a:	d904      	bls.n	8011f56 <_raise_r+0x14>
 8011f4c:	2316      	movs	r3, #22
 8011f4e:	6003      	str	r3, [r0, #0]
 8011f50:	f04f 30ff 	mov.w	r0, #4294967295
 8011f54:	bd38      	pop	{r3, r4, r5, pc}
 8011f56:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8011f58:	b112      	cbz	r2, 8011f60 <_raise_r+0x1e>
 8011f5a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011f5e:	b94b      	cbnz	r3, 8011f74 <_raise_r+0x32>
 8011f60:	4628      	mov	r0, r5
 8011f62:	f000 f831 	bl	8011fc8 <_getpid_r>
 8011f66:	4622      	mov	r2, r4
 8011f68:	4601      	mov	r1, r0
 8011f6a:	4628      	mov	r0, r5
 8011f6c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011f70:	f000 b818 	b.w	8011fa4 <_kill_r>
 8011f74:	2b01      	cmp	r3, #1
 8011f76:	d00a      	beq.n	8011f8e <_raise_r+0x4c>
 8011f78:	1c59      	adds	r1, r3, #1
 8011f7a:	d103      	bne.n	8011f84 <_raise_r+0x42>
 8011f7c:	2316      	movs	r3, #22
 8011f7e:	6003      	str	r3, [r0, #0]
 8011f80:	2001      	movs	r0, #1
 8011f82:	e7e7      	b.n	8011f54 <_raise_r+0x12>
 8011f84:	2100      	movs	r1, #0
 8011f86:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8011f8a:	4620      	mov	r0, r4
 8011f8c:	4798      	blx	r3
 8011f8e:	2000      	movs	r0, #0
 8011f90:	e7e0      	b.n	8011f54 <_raise_r+0x12>
	...

08011f94 <raise>:
 8011f94:	4b02      	ldr	r3, [pc, #8]	@ (8011fa0 <raise+0xc>)
 8011f96:	4601      	mov	r1, r0
 8011f98:	6818      	ldr	r0, [r3, #0]
 8011f9a:	f7ff bfd2 	b.w	8011f42 <_raise_r>
 8011f9e:	bf00      	nop
 8011fa0:	20000044 	.word	0x20000044

08011fa4 <_kill_r>:
 8011fa4:	b538      	push	{r3, r4, r5, lr}
 8011fa6:	4d07      	ldr	r5, [pc, #28]	@ (8011fc4 <_kill_r+0x20>)
 8011fa8:	2300      	movs	r3, #0
 8011faa:	4604      	mov	r4, r0
 8011fac:	4608      	mov	r0, r1
 8011fae:	4611      	mov	r1, r2
 8011fb0:	602b      	str	r3, [r5, #0]
 8011fb2:	f7f3 fb0d 	bl	80055d0 <_kill>
 8011fb6:	1c43      	adds	r3, r0, #1
 8011fb8:	d102      	bne.n	8011fc0 <_kill_r+0x1c>
 8011fba:	682b      	ldr	r3, [r5, #0]
 8011fbc:	b103      	cbz	r3, 8011fc0 <_kill_r+0x1c>
 8011fbe:	6023      	str	r3, [r4, #0]
 8011fc0:	bd38      	pop	{r3, r4, r5, pc}
 8011fc2:	bf00      	nop
 8011fc4:	20023908 	.word	0x20023908

08011fc8 <_getpid_r>:
 8011fc8:	f7f3 bafa 	b.w	80055c0 <_getpid>
 8011fcc:	0000      	movs	r0, r0
	...

08011fd0 <log>:
 8011fd0:	b538      	push	{r3, r4, r5, lr}
 8011fd2:	ed2d 8b02 	vpush	{d8}
 8011fd6:	ec55 4b10 	vmov	r4, r5, d0
 8011fda:	f000 f865 	bl	80120a8 <__ieee754_log>
 8011fde:	4622      	mov	r2, r4
 8011fe0:	462b      	mov	r3, r5
 8011fe2:	4620      	mov	r0, r4
 8011fe4:	4629      	mov	r1, r5
 8011fe6:	eeb0 8a40 	vmov.f32	s16, s0
 8011fea:	eef0 8a60 	vmov.f32	s17, s1
 8011fee:	f7ee fda5 	bl	8000b3c <__aeabi_dcmpun>
 8011ff2:	b998      	cbnz	r0, 801201c <log+0x4c>
 8011ff4:	2200      	movs	r2, #0
 8011ff6:	2300      	movs	r3, #0
 8011ff8:	4620      	mov	r0, r4
 8011ffa:	4629      	mov	r1, r5
 8011ffc:	f7ee fd94 	bl	8000b28 <__aeabi_dcmpgt>
 8012000:	b960      	cbnz	r0, 801201c <log+0x4c>
 8012002:	2200      	movs	r2, #0
 8012004:	2300      	movs	r3, #0
 8012006:	4620      	mov	r0, r4
 8012008:	4629      	mov	r1, r5
 801200a:	f7ee fd65 	bl	8000ad8 <__aeabi_dcmpeq>
 801200e:	b160      	cbz	r0, 801202a <log+0x5a>
 8012010:	f7fe fa66 	bl	80104e0 <__errno>
 8012014:	ed9f 8b0a 	vldr	d8, [pc, #40]	@ 8012040 <log+0x70>
 8012018:	2322      	movs	r3, #34	@ 0x22
 801201a:	6003      	str	r3, [r0, #0]
 801201c:	eeb0 0a48 	vmov.f32	s0, s16
 8012020:	eef0 0a68 	vmov.f32	s1, s17
 8012024:	ecbd 8b02 	vpop	{d8}
 8012028:	bd38      	pop	{r3, r4, r5, pc}
 801202a:	f7fe fa59 	bl	80104e0 <__errno>
 801202e:	ecbd 8b02 	vpop	{d8}
 8012032:	2321      	movs	r3, #33	@ 0x21
 8012034:	6003      	str	r3, [r0, #0]
 8012036:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801203a:	4803      	ldr	r0, [pc, #12]	@ (8012048 <log+0x78>)
 801203c:	f000 b808 	b.w	8012050 <nan>
 8012040:	00000000 	.word	0x00000000
 8012044:	fff00000 	.word	0xfff00000
 8012048:	08012cde 	.word	0x08012cde
 801204c:	00000000 	.word	0x00000000

08012050 <nan>:
 8012050:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8012058 <nan+0x8>
 8012054:	4770      	bx	lr
 8012056:	bf00      	nop
 8012058:	00000000 	.word	0x00000000
 801205c:	7ff80000 	.word	0x7ff80000

08012060 <roundf>:
 8012060:	ee10 0a10 	vmov	r0, s0
 8012064:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 8012068:	3a7f      	subs	r2, #127	@ 0x7f
 801206a:	2a16      	cmp	r2, #22
 801206c:	dc15      	bgt.n	801209a <roundf+0x3a>
 801206e:	2a00      	cmp	r2, #0
 8012070:	da08      	bge.n	8012084 <roundf+0x24>
 8012072:	3201      	adds	r2, #1
 8012074:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8012078:	d101      	bne.n	801207e <roundf+0x1e>
 801207a:	f043 537e 	orr.w	r3, r3, #1065353216	@ 0x3f800000
 801207e:	ee00 3a10 	vmov	s0, r3
 8012082:	4770      	bx	lr
 8012084:	4907      	ldr	r1, [pc, #28]	@ (80120a4 <roundf+0x44>)
 8012086:	4111      	asrs	r1, r2
 8012088:	4201      	tst	r1, r0
 801208a:	d0fa      	beq.n	8012082 <roundf+0x22>
 801208c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8012090:	4113      	asrs	r3, r2
 8012092:	4403      	add	r3, r0
 8012094:	ea23 0301 	bic.w	r3, r3, r1
 8012098:	e7f1      	b.n	801207e <roundf+0x1e>
 801209a:	2a80      	cmp	r2, #128	@ 0x80
 801209c:	d1f1      	bne.n	8012082 <roundf+0x22>
 801209e:	ee30 0a00 	vadd.f32	s0, s0, s0
 80120a2:	4770      	bx	lr
 80120a4:	007fffff 	.word	0x007fffff

080120a8 <__ieee754_log>:
 80120a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80120ac:	ec51 0b10 	vmov	r0, r1, d0
 80120b0:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80120b4:	b087      	sub	sp, #28
 80120b6:	460d      	mov	r5, r1
 80120b8:	da26      	bge.n	8012108 <__ieee754_log+0x60>
 80120ba:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80120be:	4303      	orrs	r3, r0
 80120c0:	4602      	mov	r2, r0
 80120c2:	d10a      	bne.n	80120da <__ieee754_log+0x32>
 80120c4:	49ce      	ldr	r1, [pc, #824]	@ (8012400 <__ieee754_log+0x358>)
 80120c6:	2200      	movs	r2, #0
 80120c8:	2300      	movs	r3, #0
 80120ca:	2000      	movs	r0, #0
 80120cc:	f7ee fbc6 	bl	800085c <__aeabi_ddiv>
 80120d0:	ec41 0b10 	vmov	d0, r0, r1
 80120d4:	b007      	add	sp, #28
 80120d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80120da:	2900      	cmp	r1, #0
 80120dc:	da05      	bge.n	80120ea <__ieee754_log+0x42>
 80120de:	460b      	mov	r3, r1
 80120e0:	f7ee f8da 	bl	8000298 <__aeabi_dsub>
 80120e4:	2200      	movs	r2, #0
 80120e6:	2300      	movs	r3, #0
 80120e8:	e7f0      	b.n	80120cc <__ieee754_log+0x24>
 80120ea:	4bc6      	ldr	r3, [pc, #792]	@ (8012404 <__ieee754_log+0x35c>)
 80120ec:	2200      	movs	r2, #0
 80120ee:	f7ee fa8b 	bl	8000608 <__aeabi_dmul>
 80120f2:	f06f 0335 	mvn.w	r3, #53	@ 0x35
 80120f6:	460d      	mov	r5, r1
 80120f8:	4ac3      	ldr	r2, [pc, #780]	@ (8012408 <__ieee754_log+0x360>)
 80120fa:	4295      	cmp	r5, r2
 80120fc:	dd06      	ble.n	801210c <__ieee754_log+0x64>
 80120fe:	4602      	mov	r2, r0
 8012100:	460b      	mov	r3, r1
 8012102:	f7ee f8cb 	bl	800029c <__adddf3>
 8012106:	e7e3      	b.n	80120d0 <__ieee754_log+0x28>
 8012108:	2300      	movs	r3, #0
 801210a:	e7f5      	b.n	80120f8 <__ieee754_log+0x50>
 801210c:	152c      	asrs	r4, r5, #20
 801210e:	f2a4 34ff 	subw	r4, r4, #1023	@ 0x3ff
 8012112:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8012116:	441c      	add	r4, r3
 8012118:	f505 2315 	add.w	r3, r5, #610304	@ 0x95000
 801211c:	f603 7364 	addw	r3, r3, #3940	@ 0xf64
 8012120:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8012124:	f083 527f 	eor.w	r2, r3, #1069547520	@ 0x3fc00000
 8012128:	f482 1240 	eor.w	r2, r2, #3145728	@ 0x300000
 801212c:	ea42 0105 	orr.w	r1, r2, r5
 8012130:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 8012134:	2200      	movs	r2, #0
 8012136:	4bb5      	ldr	r3, [pc, #724]	@ (801240c <__ieee754_log+0x364>)
 8012138:	f7ee f8ae 	bl	8000298 <__aeabi_dsub>
 801213c:	1cab      	adds	r3, r5, #2
 801213e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8012142:	2b02      	cmp	r3, #2
 8012144:	4682      	mov	sl, r0
 8012146:	468b      	mov	fp, r1
 8012148:	f04f 0200 	mov.w	r2, #0
 801214c:	dc53      	bgt.n	80121f6 <__ieee754_log+0x14e>
 801214e:	2300      	movs	r3, #0
 8012150:	f7ee fcc2 	bl	8000ad8 <__aeabi_dcmpeq>
 8012154:	b1d0      	cbz	r0, 801218c <__ieee754_log+0xe4>
 8012156:	2c00      	cmp	r4, #0
 8012158:	f000 8120 	beq.w	801239c <__ieee754_log+0x2f4>
 801215c:	4620      	mov	r0, r4
 801215e:	f7ee f9e9 	bl	8000534 <__aeabi_i2d>
 8012162:	a391      	add	r3, pc, #580	@ (adr r3, 80123a8 <__ieee754_log+0x300>)
 8012164:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012168:	4606      	mov	r6, r0
 801216a:	460f      	mov	r7, r1
 801216c:	f7ee fa4c 	bl	8000608 <__aeabi_dmul>
 8012170:	a38f      	add	r3, pc, #572	@ (adr r3, 80123b0 <__ieee754_log+0x308>)
 8012172:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012176:	4604      	mov	r4, r0
 8012178:	460d      	mov	r5, r1
 801217a:	4630      	mov	r0, r6
 801217c:	4639      	mov	r1, r7
 801217e:	f7ee fa43 	bl	8000608 <__aeabi_dmul>
 8012182:	4602      	mov	r2, r0
 8012184:	460b      	mov	r3, r1
 8012186:	4620      	mov	r0, r4
 8012188:	4629      	mov	r1, r5
 801218a:	e7ba      	b.n	8012102 <__ieee754_log+0x5a>
 801218c:	a38a      	add	r3, pc, #552	@ (adr r3, 80123b8 <__ieee754_log+0x310>)
 801218e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012192:	4650      	mov	r0, sl
 8012194:	4659      	mov	r1, fp
 8012196:	f7ee fa37 	bl	8000608 <__aeabi_dmul>
 801219a:	4602      	mov	r2, r0
 801219c:	460b      	mov	r3, r1
 801219e:	2000      	movs	r0, #0
 80121a0:	499b      	ldr	r1, [pc, #620]	@ (8012410 <__ieee754_log+0x368>)
 80121a2:	f7ee f879 	bl	8000298 <__aeabi_dsub>
 80121a6:	4652      	mov	r2, sl
 80121a8:	4606      	mov	r6, r0
 80121aa:	460f      	mov	r7, r1
 80121ac:	465b      	mov	r3, fp
 80121ae:	4650      	mov	r0, sl
 80121b0:	4659      	mov	r1, fp
 80121b2:	f7ee fa29 	bl	8000608 <__aeabi_dmul>
 80121b6:	4602      	mov	r2, r0
 80121b8:	460b      	mov	r3, r1
 80121ba:	4630      	mov	r0, r6
 80121bc:	4639      	mov	r1, r7
 80121be:	f7ee fa23 	bl	8000608 <__aeabi_dmul>
 80121c2:	4606      	mov	r6, r0
 80121c4:	460f      	mov	r7, r1
 80121c6:	b914      	cbnz	r4, 80121ce <__ieee754_log+0x126>
 80121c8:	4632      	mov	r2, r6
 80121ca:	463b      	mov	r3, r7
 80121cc:	e0a0      	b.n	8012310 <__ieee754_log+0x268>
 80121ce:	4620      	mov	r0, r4
 80121d0:	f7ee f9b0 	bl	8000534 <__aeabi_i2d>
 80121d4:	a374      	add	r3, pc, #464	@ (adr r3, 80123a8 <__ieee754_log+0x300>)
 80121d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80121da:	4680      	mov	r8, r0
 80121dc:	4689      	mov	r9, r1
 80121de:	f7ee fa13 	bl	8000608 <__aeabi_dmul>
 80121e2:	a373      	add	r3, pc, #460	@ (adr r3, 80123b0 <__ieee754_log+0x308>)
 80121e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80121e8:	4604      	mov	r4, r0
 80121ea:	460d      	mov	r5, r1
 80121ec:	4640      	mov	r0, r8
 80121ee:	4649      	mov	r1, r9
 80121f0:	f7ee fa0a 	bl	8000608 <__aeabi_dmul>
 80121f4:	e0a5      	b.n	8012342 <__ieee754_log+0x29a>
 80121f6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80121fa:	f7ee f84f 	bl	800029c <__adddf3>
 80121fe:	4602      	mov	r2, r0
 8012200:	460b      	mov	r3, r1
 8012202:	4650      	mov	r0, sl
 8012204:	4659      	mov	r1, fp
 8012206:	f7ee fb29 	bl	800085c <__aeabi_ddiv>
 801220a:	e9cd 0100 	strd	r0, r1, [sp]
 801220e:	4620      	mov	r0, r4
 8012210:	f7ee f990 	bl	8000534 <__aeabi_i2d>
 8012214:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012218:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801221c:	4610      	mov	r0, r2
 801221e:	4619      	mov	r1, r3
 8012220:	f7ee f9f2 	bl	8000608 <__aeabi_dmul>
 8012224:	4602      	mov	r2, r0
 8012226:	460b      	mov	r3, r1
 8012228:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801222c:	f7ee f9ec 	bl	8000608 <__aeabi_dmul>
 8012230:	a363      	add	r3, pc, #396	@ (adr r3, 80123c0 <__ieee754_log+0x318>)
 8012232:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012236:	4680      	mov	r8, r0
 8012238:	4689      	mov	r9, r1
 801223a:	f7ee f9e5 	bl	8000608 <__aeabi_dmul>
 801223e:	a362      	add	r3, pc, #392	@ (adr r3, 80123c8 <__ieee754_log+0x320>)
 8012240:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012244:	f7ee f82a 	bl	800029c <__adddf3>
 8012248:	4642      	mov	r2, r8
 801224a:	464b      	mov	r3, r9
 801224c:	f7ee f9dc 	bl	8000608 <__aeabi_dmul>
 8012250:	a35f      	add	r3, pc, #380	@ (adr r3, 80123d0 <__ieee754_log+0x328>)
 8012252:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012256:	f7ee f821 	bl	800029c <__adddf3>
 801225a:	4642      	mov	r2, r8
 801225c:	464b      	mov	r3, r9
 801225e:	f7ee f9d3 	bl	8000608 <__aeabi_dmul>
 8012262:	a35d      	add	r3, pc, #372	@ (adr r3, 80123d8 <__ieee754_log+0x330>)
 8012264:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012268:	f7ee f818 	bl	800029c <__adddf3>
 801226c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012270:	f7ee f9ca 	bl	8000608 <__aeabi_dmul>
 8012274:	a35a      	add	r3, pc, #360	@ (adr r3, 80123e0 <__ieee754_log+0x338>)
 8012276:	e9d3 2300 	ldrd	r2, r3, [r3]
 801227a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801227e:	4640      	mov	r0, r8
 8012280:	4649      	mov	r1, r9
 8012282:	f7ee f9c1 	bl	8000608 <__aeabi_dmul>
 8012286:	a358      	add	r3, pc, #352	@ (adr r3, 80123e8 <__ieee754_log+0x340>)
 8012288:	e9d3 2300 	ldrd	r2, r3, [r3]
 801228c:	f7ee f806 	bl	800029c <__adddf3>
 8012290:	4642      	mov	r2, r8
 8012292:	464b      	mov	r3, r9
 8012294:	f7ee f9b8 	bl	8000608 <__aeabi_dmul>
 8012298:	a355      	add	r3, pc, #340	@ (adr r3, 80123f0 <__ieee754_log+0x348>)
 801229a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801229e:	f7ed fffd 	bl	800029c <__adddf3>
 80122a2:	4642      	mov	r2, r8
 80122a4:	464b      	mov	r3, r9
 80122a6:	f7ee f9af 	bl	8000608 <__aeabi_dmul>
 80122aa:	f5a5 26c2 	sub.w	r6, r5, #397312	@ 0x61000
 80122ae:	4602      	mov	r2, r0
 80122b0:	460b      	mov	r3, r1
 80122b2:	f5c5 25d7 	rsb	r5, r5, #440320	@ 0x6b800
 80122b6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80122ba:	f7ed ffef 	bl	800029c <__adddf3>
 80122be:	f2a6 467a 	subw	r6, r6, #1146	@ 0x47a
 80122c2:	3551      	adds	r5, #81	@ 0x51
 80122c4:	4335      	orrs	r5, r6
 80122c6:	2d00      	cmp	r5, #0
 80122c8:	4680      	mov	r8, r0
 80122ca:	4689      	mov	r9, r1
 80122cc:	dd48      	ble.n	8012360 <__ieee754_log+0x2b8>
 80122ce:	4b50      	ldr	r3, [pc, #320]	@ (8012410 <__ieee754_log+0x368>)
 80122d0:	2200      	movs	r2, #0
 80122d2:	4650      	mov	r0, sl
 80122d4:	4659      	mov	r1, fp
 80122d6:	f7ee f997 	bl	8000608 <__aeabi_dmul>
 80122da:	4652      	mov	r2, sl
 80122dc:	465b      	mov	r3, fp
 80122de:	f7ee f993 	bl	8000608 <__aeabi_dmul>
 80122e2:	4602      	mov	r2, r0
 80122e4:	460b      	mov	r3, r1
 80122e6:	4606      	mov	r6, r0
 80122e8:	460f      	mov	r7, r1
 80122ea:	4640      	mov	r0, r8
 80122ec:	4649      	mov	r1, r9
 80122ee:	f7ed ffd5 	bl	800029c <__adddf3>
 80122f2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80122f6:	f7ee f987 	bl	8000608 <__aeabi_dmul>
 80122fa:	4680      	mov	r8, r0
 80122fc:	4689      	mov	r9, r1
 80122fe:	b964      	cbnz	r4, 801231a <__ieee754_log+0x272>
 8012300:	4602      	mov	r2, r0
 8012302:	460b      	mov	r3, r1
 8012304:	4630      	mov	r0, r6
 8012306:	4639      	mov	r1, r7
 8012308:	f7ed ffc6 	bl	8000298 <__aeabi_dsub>
 801230c:	4602      	mov	r2, r0
 801230e:	460b      	mov	r3, r1
 8012310:	4650      	mov	r0, sl
 8012312:	4659      	mov	r1, fp
 8012314:	f7ed ffc0 	bl	8000298 <__aeabi_dsub>
 8012318:	e6da      	b.n	80120d0 <__ieee754_log+0x28>
 801231a:	a323      	add	r3, pc, #140	@ (adr r3, 80123a8 <__ieee754_log+0x300>)
 801231c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012320:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012324:	f7ee f970 	bl	8000608 <__aeabi_dmul>
 8012328:	a321      	add	r3, pc, #132	@ (adr r3, 80123b0 <__ieee754_log+0x308>)
 801232a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801232e:	4604      	mov	r4, r0
 8012330:	460d      	mov	r5, r1
 8012332:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012336:	f7ee f967 	bl	8000608 <__aeabi_dmul>
 801233a:	4642      	mov	r2, r8
 801233c:	464b      	mov	r3, r9
 801233e:	f7ed ffad 	bl	800029c <__adddf3>
 8012342:	4602      	mov	r2, r0
 8012344:	460b      	mov	r3, r1
 8012346:	4630      	mov	r0, r6
 8012348:	4639      	mov	r1, r7
 801234a:	f7ed ffa5 	bl	8000298 <__aeabi_dsub>
 801234e:	4652      	mov	r2, sl
 8012350:	465b      	mov	r3, fp
 8012352:	f7ed ffa1 	bl	8000298 <__aeabi_dsub>
 8012356:	4602      	mov	r2, r0
 8012358:	460b      	mov	r3, r1
 801235a:	4620      	mov	r0, r4
 801235c:	4629      	mov	r1, r5
 801235e:	e7d9      	b.n	8012314 <__ieee754_log+0x26c>
 8012360:	4602      	mov	r2, r0
 8012362:	460b      	mov	r3, r1
 8012364:	4650      	mov	r0, sl
 8012366:	4659      	mov	r1, fp
 8012368:	f7ed ff96 	bl	8000298 <__aeabi_dsub>
 801236c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012370:	f7ee f94a 	bl	8000608 <__aeabi_dmul>
 8012374:	4606      	mov	r6, r0
 8012376:	460f      	mov	r7, r1
 8012378:	2c00      	cmp	r4, #0
 801237a:	f43f af25 	beq.w	80121c8 <__ieee754_log+0x120>
 801237e:	a30a      	add	r3, pc, #40	@ (adr r3, 80123a8 <__ieee754_log+0x300>)
 8012380:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012384:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012388:	f7ee f93e 	bl	8000608 <__aeabi_dmul>
 801238c:	a308      	add	r3, pc, #32	@ (adr r3, 80123b0 <__ieee754_log+0x308>)
 801238e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012392:	4604      	mov	r4, r0
 8012394:	460d      	mov	r5, r1
 8012396:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801239a:	e729      	b.n	80121f0 <__ieee754_log+0x148>
 801239c:	ed9f 0b16 	vldr	d0, [pc, #88]	@ 80123f8 <__ieee754_log+0x350>
 80123a0:	e698      	b.n	80120d4 <__ieee754_log+0x2c>
 80123a2:	bf00      	nop
 80123a4:	f3af 8000 	nop.w
 80123a8:	fee00000 	.word	0xfee00000
 80123ac:	3fe62e42 	.word	0x3fe62e42
 80123b0:	35793c76 	.word	0x35793c76
 80123b4:	3dea39ef 	.word	0x3dea39ef
 80123b8:	55555555 	.word	0x55555555
 80123bc:	3fd55555 	.word	0x3fd55555
 80123c0:	df3e5244 	.word	0xdf3e5244
 80123c4:	3fc2f112 	.word	0x3fc2f112
 80123c8:	96cb03de 	.word	0x96cb03de
 80123cc:	3fc74664 	.word	0x3fc74664
 80123d0:	94229359 	.word	0x94229359
 80123d4:	3fd24924 	.word	0x3fd24924
 80123d8:	55555593 	.word	0x55555593
 80123dc:	3fe55555 	.word	0x3fe55555
 80123e0:	d078c69f 	.word	0xd078c69f
 80123e4:	3fc39a09 	.word	0x3fc39a09
 80123e8:	1d8e78af 	.word	0x1d8e78af
 80123ec:	3fcc71c5 	.word	0x3fcc71c5
 80123f0:	9997fa04 	.word	0x9997fa04
 80123f4:	3fd99999 	.word	0x3fd99999
	...
 8012400:	c3500000 	.word	0xc3500000
 8012404:	43500000 	.word	0x43500000
 8012408:	7fefffff 	.word	0x7fefffff
 801240c:	3ff00000 	.word	0x3ff00000
 8012410:	3fe00000 	.word	0x3fe00000

08012414 <_init>:
 8012414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012416:	bf00      	nop
 8012418:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801241a:	bc08      	pop	{r3}
 801241c:	469e      	mov	lr, r3
 801241e:	4770      	bx	lr

08012420 <_fini>:
 8012420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012422:	bf00      	nop
 8012424:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012426:	bc08      	pop	{r3}
 8012428:	469e      	mov	lr, r3
 801242a:	4770      	bx	lr
