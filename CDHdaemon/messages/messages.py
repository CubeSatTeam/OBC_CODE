# Automatically generated by parseMessages.py
# from messages.json

from ctypes import *
import shlex

# message name: opmodeADCS code: 20
class opmodeADCS(Structure):
	def __init__(self):
		super().__init__()
		self.code=20

	_pack_=1
	_fields_=[("code",c_uint8),
		("opmode",c_uint8)]

	def __str__(self):
		return "opmodeADCS <c_uint8 opmode>"

	convList=[int,int]

# message name: attitudeADCS code: 21
class attitudeADCS(Structure):
	def __init__(self):
		super().__init__()
		self.code=21

	_pack_=1
	_fields_=[("code",c_uint8),
		("omega_x",c_float),
		("omega_y",c_float),
		("omega_z",c_float),
		("acc_x",c_float),
		("acc_y",c_float),
		("acc_z",c_float),
		("b_x",c_float),
		("b_y",c_float),
		("b_z",c_float),
		("DC_x",c_float),
		("DC_y",c_float),
		("DC_z",c_float),
		("P_x",c_float),
		("P_y",c_float),
		("P_z",c_float),
		("D_x",c_float),
		("D_y",c_float),
		("D_z",c_float),
		("ticktime",c_uint32)]

	def __str__(self):
		return "attitudeADCS <c_float omega_x> <c_float omega_y> <c_float omega_z> <c_float acc_x> <c_float acc_y> <c_float acc_z> <c_float b_x> <c_float b_y> <c_float b_z> <c_float DC_x> <c_float DC_y> <c_float DC_z> <c_float P_x> <c_float P_y> <c_float P_z> <c_float D_x> <c_float D_y> <c_float D_z> <c_uint32 ticktime>"

	convList=[int,float,float,float,float,float,float,float,float,float,float,float,float,float,float,float,float,float,float,int]

# message name: housekeepingADCS code: 22
class housekeepingADCS(Structure):
	def __init__(self):
		super().__init__()
		self.code=22

	_pack_=1
	_fields_=[("code",c_uint8),
		("temperature",c_float*8),
		("temperatureRAW",c_uint16*8),
		("current",c_float*5),
		("currentRAW",c_uint16*5),
		("ticktime",c_uint32)]

	def __str__(self):
		return "housekeepingADCS <c_float*8 temperature> <c_uint16*8 temperatureRAW> <c_float*5 current> <c_uint16*5 currentRAW> <c_uint32 ticktime>"

	convList=[int,float,int,float,int,int]

# message name: setOpmodeADCS code: 0
class setOpmodeADCS(Structure):
	def __init__(self):
		super().__init__()
		self.code=0

	_pack_=1
	_fields_=[("code",c_uint8),
		("opmode",c_uint8)]

	def __str__(self):
		return "setOpmodeADCS <c_uint8 opmode>"

	convList=[int,int]

# message name: setAttitudeADCS code: 1
class setAttitudeADCS(Structure):
	def __init__(self):
		super().__init__()
		self.code=1

	_pack_=1
	_fields_=[("code",c_uint8),
		("P_xx",c_float),
		("P_yy",c_float),
		("P_zz",c_float),
		("D_xx",c_float),
		("D_yy",c_float),
		("D_zz",c_float),
		("DC_xx",c_float),
		("DC_yy",c_float),
		("DC_zz",c_float),
		("dtheta_x",c_float),
		("dtheta_y",c_float),
		("dtheta_z",c_float)]

	def __str__(self):
		return "setAttitudeADCS <c_float P_xx> <c_float P_yy> <c_float P_zz> <c_float D_xx> <c_float D_yy> <c_float D_zz> <c_float DC_xx> <c_float DC_yy> <c_float DC_zz> <c_float dtheta_x> <c_float dtheta_y> <c_float dtheta_z>"

	convList=[int,float,float,float,float,float,float,float,float,float,float,float,float]

# messages dictionary (keys are the codes)
# can be used to instantiate class from msg code
msgDict={
20:opmodeADCS,
21:attitudeADCS,
22:housekeepingADCS,
0:setOpmodeADCS,
1:setAttitudeADCS
}

# String parsing function, this can be used to fill and return a
# structure class from a string, this string should
# contain each structure element value separated by spaces
# array elements should be passed in quotes "el1, el2, el3, ..."
# the string should start with the structure name as first element
# and the function will return the corresponding filled structure in
# case of success or throw an exception in case of failure
def parseStruct(str):

	args=shlex.split(str)
	if len(args)==0:
		raise Exception
	else:
		for msg in msgDict.keys():
			if msgDict[msg].__name__==args[0]:
				retStruct=msgDict[msg]()
				numFields=len(retStruct._fields_)
				if numFields!=len(args):
					raise Exception
				f=1
				for field in retStruct._fields_[1:]:
					#check if element is array
					if isinstance(getattr(retStruct,field[0]), Array):
						arrayElem=args[f].split(",")
						#converting string to type
						arrayType=retStruct.convList[f]
						convVals=[arrayType(_) for _ in arrayElem]
						#copying elements into field
						setattr(retStruct,field[0],type(getattr(retStruct,field[0]))(*convVals))
					else: #if single number
						#converting string to type
						convVal=retStruct.convList[f](args[f])
						setattr(retStruct,field[0],convVal)
						
					f+=1
		
				return retStruct
		
		raise Exception
